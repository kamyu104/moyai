// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof FTModule !== 'undefined' ? FTModule : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 93296;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,3,0,0,0,5,0,0,0,4,0,0,0,6,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,8,0,0,0,89,111,63,0,0,0,45,0,167,144,26,0,71,9,14,0,1,32,7,0,139,147,3,0,56,202,1,0,42,229,0,0,151,114,0,0,76,57,0,0,166,28,0,0,83,14,0,0,41,7,0,0,149,3,0,0,202,1,0,0,229,0,0,0,115,0,0,0,57,0,0,0,29,0,0,0,14,0,0,0,7,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,1,5,0,0,32,0,0,0,84,98,0,0,0,0,1,0,0,0,2,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,56,3,0,0,48,0,0,0,172,0,0,0,10,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,11,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,3,0,0,0,195,94,1,0,88,98,0,0,209,92,1,0,224,1,0,0,188,92,1,0,244,1,0,0,177,92,1,0,248,1,0,0,113,87,1,0,0,2,0,0,11,91,1,0,4,2,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,4,0,0,0,7,0,0,0,2,0,0,0,24,0,0,0,8,0,0,0,5,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,28,0,0,0,109,87,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,168,0,0,0,44,0,0,0,160,0,0,0,13,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,13,0,0,0,109,87,1,0,184,2,0,0,195,94,1,0,92,98,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,52,107,0,0,1,0,0,0,1,0,0,0,0,0,0,0,206,106,0,0,2,0,0,0,1,0,0,0,0,0,0,0,2,100,0,0,2,0,0,0,1,0,0,0,0,0,0,0,20,100,0,0,2,0,0,0,1,0,0,0,0,0,0,0,40,100,0,0,2,0,0,0,1,0,0,0,0,0,0,0,51,100,0,0,1,0,0,0,1,0,0,0,0,0,0,0,139,87,1,0,1,0,0,0,1,0,0,0,0,0,0,0,122,87,1,0,1,0,0,0,1,0,0,0,0,0,0,0,96,98,0,0,1,0,0,0,1,0,0,0,0,0,0,0,71,100,0,0,1,0,0,0,1,0,0,0,0,0,0,0,198,99,0,0,3,0,0,0,1,0,0,0,0,0,0,0,81,100,0,0,3,0,0,0,1,0,0,0,0,0,0,0,93,100,0,0,1,0,0,0,1,0,0,0,0,0,0,0,110,100,0,0,2,0,0,0,1,0,0,0,0,0,0,0,120,100,0,0,1,0,0,0,1,0,0,0,0,0,0,0,194,106,0,0,1,0,0,0,1,0,0,0,0,0,0,0,130,100,0,0,2,0,0,0,1,0,0,0,0,0,0,0,149,98,0,0,1,0,0,0,1,0,0,0,0,0,0,0,143,100,0,0,1,0,0,0,1,0,0,0,0,0,0,0,169,98,0,0,2,0,0,0,1,0,0,0,0,0,0,0,181,98,0,0,2,0,0,0,1,0,0,0,0,0,0,0,161,100,0,0,1,0,0,0,1,0,0,0,0,0,0,0,169,100,0,0,1,0,0,0,1,0,0,0,0,0,0,0,179,100,0,0,2,0,0,0,1,0,0,0,0,0,0,0,192,100,0,0,2,0,0,0,1,0,0,0,0,0,0,0,202,100,0,0,2,0,0,0,1,0,0,0,0,0,0,0,212,100,0,0,2,0,0,0,1,0,0,0,0,0,0,0,223,100,0,0,1,0,0,0,1,0,0,0,0,0,0,0,231,106,0,0,2,0,0,0,1,0,0,0,0,0,0,0,220,106,0,0,2,0,0,0,1,0,0,0,0,0,0,0,230,100,0,0,2,0,0,0,1,0,0,0,0,0,0,0,241,100,0,0,2,0,0,0,1,0,0,0,0,0,0,0,252,100,0,0,2,0,0,0,1,0,0,0,0,0,0,0,14,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,36,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,60,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,75,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,87,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,101,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,118,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,132,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,146,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,161,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,176,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,191,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,205,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,219,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,234,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,253,101,0,0,2,0,0,0,1,0,0,0,0,0,0,0,18,102,0,0,2,0,0,0,1,0,0,0,0,0,0,0,40,102,0,0,2,0,0,0,1,0,0,0,0,0,0,0,59,102,0,0,2,0,0,0,1,0,0,0,0,0,0,0,75,102,0,0,2,0,0,0,1,0,0,0,0,0,0,0,91,102,0,0,2,0,0,0,1,0,0,0,0,0,0,0,112,102,0,0,2,0,0,0,1,0,0,0,0,0,0,0,130,102,0,0,2,0,0,0,1,0,0,0,0,0,0,0,148,102,0,0,2,0,0,0,1,0,0,0,0,0,0,0,171,102,0,0,2,0,0,0,1,0,0,0,0,0,0,0,195,102,0,0,2,0,0,0,1,0,0,0,0,0,0,0,208,102,0,0,3,0,0,0,1,0,0,0,0,0,0,0,226,102,0,0,3,0,0,0,1,0,0,0,0,0,0,0,242,102,0,0,2,0,0,0,1,0,0,0,0,0,0,0,242,106,0,0,3,0,0,0,1,0,0,0,0,0,0,0,255,106,0,0,3,0,0,0,1,0,0,0,0,0,0,0,38,107,0,0,1,0,0,0,1,0,0,0,0,0,0,0,12,107,0,0,1,0,0,0,1,0,0,0,0,0,0,0,253,102,0,0,2,0,0,0,1,0,0,0,0,0,0,0,211,99,0,0,1,0,0,0,1,0,0,0,0,0,0,0,12,103,0,0,2,0,0,0,1,0,0,0,0,0,0,0,29,103,0,0,2,0,0,0,1,0,0,0,0,0,0,0,47,103,0,0,2,0,0,0,1,0,0,0,0,0,0,0,62,103,0,0,2,0,0,0,1,0,0,0,0,0,0,0,74,103,0,0,2,0,0,0,1,0,0,0,0,0,0,0,86,103,0,0,2,0,0,0,1,0,0,0,0,0,0,0,103,103,0,0,2,0,0,0,1,0,0,0,0,0,0,0,117,103,0,0,2,0,0,0,1,0,0,0,0,0,0,0,131,103,0,0,2,0,0,0,1,0,0,0,0,0,0,0,150,103,0,0,2,0,0,0,1,0,0,0,0,0,0,0,170,103,0,0,3,0,0,0,1,0,0,0,0,0,0,0,26,107,0,0,1,0,0,0,1,0,0,0,0,0,0,0,177,103,0,0,2,0,0,0,1,0,0,0,0,0,0,0,186,103,0,0,2,0,0,0,1,0,0,0,0,0,0,0,208,103,0,0,2,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,8,0,0,0,20,0,0,0,6,0,0,0,7,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,7,0,0,0,8,0,0,0,16,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,16,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,1,16,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,17,0,0,8,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,2,16,0,0,12,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,16,0,0,16,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,16,0,0,20,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,1,17,0,0,24,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,17,0,0,28,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,17,0,0,32,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,17,0,0,36,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,17,0,0,40,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,6,17,0,0,44,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,7,17,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,13,16,0,0,80,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,5,16,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,17,0,0,100,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,15,16,0,0,104,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,16,16,0,0,108,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,17,16,0,0,112,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,18,16,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,20,17,0,0,124,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,21,17,0,0,128,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,30,17,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,31,17,0,0,144,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,17,0,0,148,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,33,17,0,0,152,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,34,17,0,0,156,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,35,17,0,0,160,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,36,17,0,0,164,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,37,17,0,0,168,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,38,17,0,0,172,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,6,32,0,0,4,0,0,0,4,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,6,0,0,0,7,32,0,0,60,0,0,0,4,0,0,0,0,0,0,0,10,0,0,0,1,0,0,0,6,0,0,0,8,32,0,0,100,0,0,0,4,0,0,0,0,0,0,0,14,0,0,0,2,0,0,0,6,0,0,0,9,32,0,0,156,0,0,0,4,0,0,0,0,0,0,0,10,0,0,0,3,0,0,0,3,0,0,0,9,33,0,0,196,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,10,33,0,0,200,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,11,33,0,0,204,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,10,32,0,0,208,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,11,32,0,0,212,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,12,33,0,0,220,0,0,0,4,0,0,0,0,0,0,0,13,0,0,0,216,0,0,0,6,0,0,0,13,33,0,0,16,1,0,0,4,0,0,0,0,0,0,0,13,0,0,0,217,0,0,0,5,0,0,0,14,33,0,0,68,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,15,33,0,0,72,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,16,33,0,0,76,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,17,33,0,0,80,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,18,33,0,0,84,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,19,33,0,0,88,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,19,32,0,0,92,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,20,32,0,0,96,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,21,32,0,0,100,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,202,154,59,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,4,0,0,0,192,0,0,0,34,104,0,0,0,0,1,0,0,0,2,0,40,14,0,0,12,0,0,0,9,0,0,0,0,0,0,0,144,19,0,0,16,20,0,0,112,14,0,0,176,19,0,0,0,0,0,0,2,0,0,0,144,14,0,0,208,2,0,0,18,0,0,0,1,0,0,0,0,0,0,0,19,0,0,0,5,0,0,0,128,46,0,0,255,46,0,0,0,47,0,0,223,47,0,0,240,47,0,0,255,47,0,0,0,48,0,0,63,48,0,0,64,48,0,0,159,48,0,0,160,48,0,0,255,48,0,0,0,49,0,0,47,49,0,0,48,49,0,0,143,49,0,0,144,49,0,0,159,49,0,0,160,49,0,0,191,49,0,0,192,49,0,0,239,49,0,0,240,49,0,0,255,49,0,0,0,50,0,0,255,50,0,0,0,51,0,0,255,51,0,0,0,52,0,0,191,77,0,0,192,77,0,0,255,77,0,0,0,78,0,0,255,159,0,0,96,169,0,0,127,169,0,0,0,172,0,0,175,215,0,0,176,215,0,0,255,215,0,0,0,249,0,0,255,250,0,0,16,254,0,0,31,254,0,0,48,254,0,0,79,254,0,0,0,255,0,0,239,255,0,0,0,176,1,0,255,176,1,0,0,211,1,0,95,211,1,0,0,242,1,0,255,242,1,0,0,0,2,0,223,166,2,0,0,167,2,0,63,183,2,0,64,183,2,0,31,184,2,0,0,248,2,0,31,250,2,0,0,0,0,0,0,0,0,0,214,78,0,0,236,78,0,0,96,79,0,0,134,79,0,0,17,80,0,0,48,82,0,0,140,84,0,0,48,87,0,0,249,91,0,0,13,92,0,0,49,92,0,0,45,94,0,0,17,98,0,0,246,101,0,0,66,102,0,0,3,103,0,0,101,103,0,0,186,112,0,0,253,128,0,0,48,130,0,0,170,138,0,0,244,139,0,0,217,143,0,0,25,144,0,0,74,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,155,81,0,0,12,84,0,0,242,93,0,0,63,97,0,0,226,101,0,0,31,102,0,0,47,102,0,0,111,102,0,0,17,108,0,0,103,113,0,0,176,115,0,0,254,115,0,0,6,116,0,0,40,117,0,0,110,127,0,0,129,137,0,0,205,142,0,0,163,144,0,0,77,145,0,0,204,145,0,0,139,149,0,0,247,150,0,0,50,151,0,0,98,151,0,0,126,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,78,0,0,58,78,0,0,186,78,0,0,214,78,0,0,229,78,0,0,236,78,0,0,96,79,0,0,134,79,0,0,11,80,0,0,17,80,0,0,48,82,0,0,140,84,0,0,39,89,0,0,249,91,0,0,13,92,0,0,49,92,0,0,17,98,0,0,246,101,0,0,66,102,0,0,9,103,0,0,101,103,0,0,186,112,0,0,129,137,0,0,170,138,0,0,244,139,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,78,0,0,155,78,0,0,224,86,0,0,131,91,0,0,243,96,0,0,15,97,0,0,6,116,0,0,31,117,0,0,118,117,0,0,11,119,0,0,64,119,0,0,110,127,0,0,5,128,0,0,234,129,0,0,87,132,0,0,225,136,0,0,199,143,0,0,216,143,0,0,219,143,0,0,50,144,0,0,78,144,0,0,83,144,0,0,132,144,0,0,204,145,0,0,98,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,21,0,0,0,3,0,0,0,208,19,0,0,208,2,0,0,22,0,0,0,2,0,0,0,0,0,0,0,23,0,0,0,6,0,0,0,0,9,0,0,255,13,0,0,0,15,0,0,255,15,0,0,0,25,0,0,79,25,0,0,128,27,0,0,191,27,0,0,128,28,0,0,223,28,0,0,0,168,0,0,47,168,0,0,0,24,1,0,223,24,1,0,0,0,0,0,0,0,0,0,1,0,0,0,48,20,0,0,64,3,0,0,24,0,0,0,3,0,0,0,0,0,0,0,25,0,0,0,7,0,0,0,32,0,0,0,127,0,0,0,160,0,0,0,255,0,0,0,0,1,0,0,127,1,0,0,128,1,0,0,79,2,0,0,80,2,0,0,175,2,0,0,176,2,0,0,255,2,0,0,0,3,0,0,111,3,0,0,112,3,0,0,255,3,0,0,0,4,0,0,255,4,0,0,0,5,0,0,47,5,0,0,0,29,0,0,127,29,0,0,128,29,0,0,191,29,0,0,192,29,0,0,255,29,0,0,0,30,0,0,255,30,0,0,0,31,0,0,255,31,0,0,0,32,0,0,111,32,0,0,112,32,0,0,159,32,0,0,160,32,0,0,207,32,0,0,80,33,0,0,143,33,0,0,96,36,0,0,255,36,0,0,96,44,0,0,127,44,0,0,224,45,0,0,255,45,0,0,64,166,0,0,159,166,0,0,32,167,0,0,255,167,0,0,0,251,0,0,6,251,0,0,0,212,1,0,255,215,1,0,0,0,0,0,0,0,0,0,2,0,0,0,64,0,0,0,123,104,0,0,0,0,1,0,0,0,2,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,108,116,117,111,6,0,0,0,7,0,0,0,1,0,0,0,8,0,0,0,100,22,0,0,2,0,0,0,64,0,0,0,131,104,0,0,0,0,1,0,0,0,2,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,108,116,117,111,6,0,0,0,7,0,0,0,1,0,0,0,8,0,0,0,100,22,0,0,2,0,0,0,64,0,0,0,139,104,0,0,0,0,1,0,0,0,2,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,108,116,117,111,8,0,0,0,9,0,0,0,2,0,0,0,9,0,0,0,52,22,0,0,2,0,0,0,64,0,0,0,146,104,0,0,0,0,1,0,0,0,2,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,108,116,117,111,10,0,0,0,9,0,0,0,2,0,0,0,9,0,0,0,52,22,0,0,2,0,0,0,64,0,0,0,157,104,0,0,0,0,1,0,0,0,2,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,108,116,117,111,11,0,0,0,9,0,0,0,2,0,0,0,9,0,0,0,52,22,0,0,108,116,117,111,26,0,0,0,3,0,0,0,0,0,0,0,27,0,0,0,10,0,0,0,28,0,0,0,29,0,0,0,10,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,108,116,117,111,30,0,0,0,4,0,0,0,5,0,0,0,31,0,0,0,11,0,0,0,24,0,0,0,32,0,0,0,12,0,0,0,33,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,0,0,28,0,0,0,169,104,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,72,1,0,0,44,0,0,0,160,0,0,0,15,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,1,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,37,0,0,0,109,87,1,0,36,23,0,0,195,94,1,0,186,104,0,0,0,0,0,0,0,0,0,0,11,0,0,0,12,0,0,0,16,0,0,0,14,0,0,0,13,0,0,0,1,1,0,0,28,0,0,0,190,104,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,184,1,0,0,44,0,0,0,196,0,0,0,17,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,15,0,0,0,11,0,0,0,1,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,104,0,0,44,23,0,0,195,94,1,0,206,104,0,0,0,0,0,0,0,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,8,0,0,0,7,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,5,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,3,0,0,0,13,0,0,0,2,0,0,0,14,0,0,0,1,0,0,0,15,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,27,0,0,0,31,0,0,0,35,0,0,0,43,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,115,0,0,0,131,0,0,0,163,0,0,0,195,0,0,0,227,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,112,0,0,0,112,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,17,0,0,0,25,0,0,0,33,0,0,0,49,0,0,0,65,0,0,0,97,0,0,0,129,0,0,0,193,0,0,0,1,1,0,0,129,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,8,0,0,1,12,0,0,1,16,0,0,1,24,0,0,1,32,0,0,1,48,0,0,1,64,0,0,1,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,96,7,0,0,0,1,0,0,0,8,0,0,80,0,0,0,0,8,0,0,16,0,0,0,84,8,0,0,115,0,0,0,82,7,0,0,31,0,0,0,0,8,0,0,112,0,0,0,0,8,0,0,48,0,0,0,0,9,0,0,192,0,0,0,80,7,0,0,10,0,0,0,0,8,0,0,96,0,0,0,0,8,0,0,32,0,0,0,0,9,0,0,160,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,128,0,0,0,0,8,0,0,64,0,0,0,0,9,0,0,224,0,0,0,80,7,0,0,6,0,0,0,0,8,0,0,88,0,0,0,0,8,0,0,24,0,0,0,0,9,0,0,144,0,0,0,83,7,0,0,59,0,0,0,0,8,0,0,120,0,0,0,0,8,0,0,56,0,0,0,0,9,0,0,208,0,0,0,81,7,0,0,17,0,0,0,0,8,0,0,104,0,0,0,0,8,0,0,40,0,0,0,0,9,0,0,176,0,0,0,0,8,0,0,8,0,0,0,0,8,0,0,136,0,0,0,0,8,0,0,72,0,0,0,0,9,0,0,240,0,0,0,80,7,0,0,4,0,0,0,0,8,0,0,84,0,0,0,0,8,0,0,20,0,0,0,85,8,0,0,227,0,0,0,83,7,0,0,43,0,0,0,0,8,0,0,116,0,0,0,0,8,0,0,52,0,0,0,0,9,0,0,200,0,0,0,81,7,0,0,13,0,0,0,0,8,0,0,100,0,0,0,0,8,0,0,36,0,0,0,0,9,0,0,168,0,0,0,0,8,0,0,4,0,0,0,0,8,0,0,132,0,0,0,0,8,0,0,68,0,0,0,0,9,0,0,232,0,0,0,80,7,0,0,8,0,0,0,0,8,0,0,92,0,0,0,0,8,0,0,28,0,0,0,0,9,0,0,152,0,0,0,84,7,0,0,83,0,0,0,0,8,0,0,124,0,0,0,0,8,0,0,60,0,0,0,0,9,0,0,216,0,0,0,82,7,0,0,23,0,0,0,0,8,0,0,108,0,0,0,0,8,0,0,44,0,0,0,0,9,0,0,184,0,0,0,0,8,0,0,12,0,0,0,0,8,0,0,140,0,0,0,0,8,0,0,76,0,0,0,0,9,0,0,248,0,0,0,80,7,0,0,3,0,0,0,0,8,0,0,82,0,0,0,0,8,0,0,18,0,0,0,85,8,0,0,163,0,0,0,83,7,0,0,35,0,0,0,0,8,0,0,114,0,0,0,0,8,0,0,50,0,0,0,0,9,0,0,196,0,0,0,81,7,0,0,11,0,0,0,0,8,0,0,98,0,0,0,0,8,0,0,34,0,0,0,0,9,0,0,164,0,0,0,0,8,0,0,2,0,0,0,0,8,0,0,130,0,0,0,0,8,0,0,66,0,0,0,0,9,0,0,228,0,0,0,80,7,0,0,7,0,0,0,0,8,0,0,90,0,0,0,0,8,0,0,26,0,0,0,0,9,0,0,148,0,0,0,84,7,0,0,67,0,0,0,0,8,0,0,122,0,0,0,0,8,0,0,58,0,0,0,0,9,0,0,212,0,0,0,82,7,0,0,19,0,0,0,0,8,0,0,106,0,0,0,0,8,0,0,42,0,0,0,0,9,0,0,180,0,0,0,0,8,0,0,10,0,0,0,0,8,0,0,138,0,0,0,0,8,0,0,74,0,0,0,0,9,0,0,244,0,0,0,80,7,0,0,5,0,0,0,0,8,0,0,86,0,0,0,0,8,0,0,22,0,0,0,192,8,0,0,0,0,0,0,83,7,0,0,51,0,0,0,0,8,0,0,118,0,0,0,0,8,0,0,54,0,0,0,0,9,0,0,204,0,0,0,81,7,0,0,15,0,0,0,0,8,0,0,102,0,0,0,0,8,0,0,38,0,0,0,0,9,0,0,172,0,0,0,0,8,0,0,6,0,0,0,0,8,0,0,134,0,0,0,0,8,0,0,70,0,0,0,0,9,0,0,236,0,0,0,80,7,0,0,9,0,0,0,0,8,0,0,94,0,0,0,0,8,0,0,30,0,0,0,0,9,0,0,156,0,0,0,84,7,0,0,99,0,0,0,0,8,0,0,126,0,0,0,0,8,0,0,62,0,0,0,0,9,0,0,220,0,0,0,82,7,0,0,27,0,0,0,0,8,0,0,110,0,0,0,0,8,0,0,46,0,0,0,0,9,0,0,188,0,0,0,0,8,0,0,14,0,0,0,0,8,0,0,142,0,0,0,0,8,0,0,78,0,0,0,0,9,0,0,252,0,0,0,96,7,0,0,0,1,0,0,0,8,0,0,81,0,0,0,0,8,0,0,17,0,0,0,85,8,0,0,131,0,0,0,82,7,0,0,31,0,0,0,0,8,0,0,113,0,0,0,0,8,0,0,49,0,0,0,0,9,0,0,194,0,0,0,80,7,0,0,10,0,0,0,0,8,0,0,97,0,0,0,0,8,0,0,33,0,0,0,0,9,0,0,162,0,0,0,0,8,0,0,1,0,0,0,0,8,0,0,129,0,0,0,0,8,0,0,65,0,0,0,0,9,0,0,226,0,0,0,80,7,0,0,6,0,0,0,0,8,0,0,89,0,0,0,0,8,0,0,25,0,0,0,0,9,0,0,146,0,0,0,83,7,0,0,59,0,0,0,0,8,0,0,121,0,0,0,0,8,0,0,57,0,0,0,0,9,0,0,210,0,0,0,81,7,0,0,17,0,0,0,0,8,0,0,105,0,0,0,0,8,0,0,41,0,0,0,0,9,0,0,178,0,0,0,0,8,0,0,9,0,0,0,0,8,0,0,137,0,0,0,0,8,0,0,73,0,0,0,0,9,0,0,242,0,0,0,80,7,0,0,4,0,0,0,0,8,0,0,85,0,0,0,0,8,0,0,21,0,0,0,80,8,0,0,2,1,0,0,83,7,0,0,43,0,0,0,0,8,0,0,117,0,0,0,0,8,0,0,53,0,0,0,0,9,0,0,202,0,0,0,81,7,0,0,13,0,0,0,0,8,0,0,101,0,0,0,0,8,0,0,37,0,0,0,0,9,0,0,170,0,0,0,0,8,0,0,5,0,0,0,0,8,0,0,133,0,0,0,0,8,0,0,69,0,0,0,0,9,0,0,234,0,0,0,80,7,0,0,8,0,0,0,0,8,0,0,93,0,0,0,0,8,0,0,29,0,0,0,0,9,0,0,154,0,0,0,84,7,0,0,83,0,0,0,0,8,0,0,125,0,0,0,0,8,0,0,61,0,0,0,0,9,0,0,218,0,0,0,82,7,0,0,23,0,0,0,0,8,0,0,109,0,0,0,0,8,0,0,45,0,0,0,0,9,0,0,186,0,0,0,0,8,0,0,13,0,0,0,0,8,0,0,141,0,0,0,0,8,0,0,77,0,0,0,0,9,0,0,250,0,0,0,80,7,0,0,3,0,0,0,0,8,0,0,83,0,0,0,0,8,0,0,19,0,0,0,85,8,0,0,195,0,0,0,83,7,0,0,35,0,0,0,0,8,0,0,115,0,0,0,0,8,0,0,51,0,0,0,0,9,0,0,198,0,0,0,81,7,0,0,11,0,0,0,0,8,0,0,99,0,0,0,0,8,0,0,35,0,0,0,0,9,0,0,166,0,0,0,0,8,0,0,3,0,0,0,0,8,0,0,131,0,0,0,0,8,0,0,67,0,0,0,0,9,0,0,230,0,0,0,80,7,0,0,7,0,0,0,0,8,0,0,91,0,0,0,0,8,0,0,27,0,0,0,0,9,0,0,150,0,0,0,84,7,0,0,67,0,0,0,0,8,0,0,123,0,0,0,0,8,0,0,59,0,0,0,0,9,0,0,214,0,0,0,82,7,0,0,19,0,0,0,0,8,0,0,107,0,0,0,0,8,0,0,43,0,0,0,0,9,0,0,182,0,0,0,0,8,0,0,11,0,0,0,0,8,0,0,139,0,0,0,0,8,0,0,75,0,0,0,0,9,0,0,246,0,0,0,80,7,0,0,5,0,0,0,0,8,0,0,87,0,0,0,0,8,0,0,23,0,0,0,192,8,0,0,0,0,0,0,83,7,0,0,51,0,0,0,0,8,0,0,119,0,0,0,0,8,0,0,55,0,0,0,0,9,0,0,206,0,0,0,81,7,0,0,15,0,0,0,0,8,0,0,103,0,0,0,0,8,0,0,39,0,0,0,0,9,0,0,174,0,0,0,0,8,0,0,7,0,0,0,0,8,0,0,135,0,0,0,0,8,0,0,71,0,0,0,0,9,0,0,238,0,0,0,80,7,0,0,9,0,0,0,0,8,0,0,95,0,0,0,0,8,0,0,31,0,0,0,0,9,0,0,158,0,0,0,84,7,0,0,99,0,0,0,0,8,0,0,127,0,0,0,0,8,0,0,63,0,0,0,0,9,0,0,222,0,0,0,82,7,0,0,27,0,0,0,0,8,0,0,111,0,0,0,0,8,0,0,47,0,0,0,0,9,0,0,190,0,0,0,0,8,0,0,15,0,0,0,0,8,0,0,143,0,0,0,0,8,0,0,79,0,0,0,0,9,0,0,254,0,0,0,96,7,0,0,0,1,0,0,0,8,0,0,80,0,0,0,0,8,0,0,16,0,0,0,84,8,0,0,115,0,0,0,82,7,0,0,31,0,0,0,0,8,0,0,112,0,0,0,0,8,0,0,48,0,0,0,0,9,0,0,193,0,0,0,80,7,0,0,10,0,0,0,0,8,0,0,96,0,0,0,0,8,0,0,32,0,0,0,0,9,0,0,161,0,0,0,0,8,0,0,0,0,0,0,0,8,0,0,128,0,0,0,0,8,0,0,64,0,0,0,0,9,0,0,225,0,0,0,80,7,0,0,6,0,0,0,0,8,0,0,88,0,0,0,0,8,0,0,24,0,0,0,0,9,0,0,145,0,0,0,83,7,0,0,59,0,0,0,0,8,0,0,120,0,0,0,0,8,0,0,56,0,0,0,0,9,0,0,209,0,0,0,81,7,0,0,17,0,0,0,0,8,0,0,104,0,0,0,0,8,0,0,40,0,0,0,0,9,0,0,177,0,0,0,0,8,0,0,8,0,0,0,0,8,0,0,136,0,0,0,0,8,0,0,72,0,0,0,0,9,0,0,241,0,0,0,80,7,0,0,4,0,0,0,0,8,0,0,84,0,0,0,0,8,0,0,20,0,0,0,85,8,0,0,227,0,0,0,83,7,0,0,43,0,0,0,0,8,0,0,116,0,0,0,0,8,0,0,52,0,0,0,0,9,0,0,201,0,0,0,81,7,0,0,13,0,0,0,0,8,0,0,100,0,0,0,0,8,0,0,36,0,0,0,0,9,0,0,169,0,0,0,0,8,0,0,4,0,0,0,0,8,0,0,132,0,0,0,0,8,0,0,68,0,0,0,0,9,0,0,233,0,0,0,80,7,0,0,8,0,0,0,0,8,0,0,92,0,0,0,0,8,0,0,28,0,0,0,0,9,0,0,153,0,0,0,84,7,0,0,83,0,0,0,0,8,0,0,124,0,0,0,0,8,0,0,60,0,0,0,0,9,0,0,217,0,0,0,82,7,0,0,23,0,0,0,0,8,0,0,108,0,0,0,0,8,0,0,44,0,0,0,0,9,0,0,185,0,0,0,0,8,0,0,12,0,0,0,0,8,0,0,140,0,0,0,0,8,0,0,76,0,0,0,0,9,0,0,249,0,0,0,80,7,0,0,3,0,0,0,0,8,0,0,82,0,0,0,0,8,0,0,18,0,0,0,85,8,0,0,163,0,0,0,83,7,0,0,35,0,0,0,0,8,0,0,114,0,0,0,0,8,0,0,50,0,0,0,0,9,0,0,197,0,0,0,81,7,0,0,11,0,0,0,0,8,0,0,98,0,0,0,0,8,0,0,34,0,0,0,0,9,0,0,165,0,0,0,0,8,0,0,2,0,0,0,0,8,0,0,130,0,0,0,0,8,0,0,66,0,0,0,0,9,0,0,229,0,0,0,80,7,0,0,7,0,0,0,0,8,0,0,90,0,0,0,0,8,0,0,26,0,0,0,0,9,0,0,149,0,0,0,84,7,0,0,67,0,0,0,0,8,0,0,122,0,0,0,0,8,0,0,58,0,0,0,0,9,0,0,213,0,0,0,82,7,0,0,19,0,0,0,0,8,0,0,106,0,0,0,0,8,0,0,42,0,0,0,0,9,0,0,181,0,0,0,0,8,0,0,10,0,0,0,0,8,0,0,138,0,0,0,0,8,0,0,74,0,0,0,0,9,0,0,245,0,0,0,80,7,0,0,5,0,0,0,0,8,0,0,86,0,0,0,0,8,0,0,22,0,0,0,192,8,0,0,0,0,0,0,83,7,0,0,51,0,0,0,0,8,0,0,118,0,0,0,0,8,0,0,54,0,0,0,0,9,0,0,205,0,0,0,81,7,0,0,15,0,0,0,0,8,0,0,102,0,0,0,0,8,0,0,38,0,0,0,0,9,0,0,173,0,0,0,0,8,0,0,6,0,0,0,0,8,0,0,134,0,0,0,0,8,0,0,70,0,0,0,0,9,0,0,237,0,0,0,80,7,0,0,9,0,0,0,0,8,0,0,94,0,0,0,0,8,0,0,30,0,0,0,0,9,0,0,157,0,0,0,84,7,0,0,99,0,0,0,0,8,0,0,126,0,0,0,0,8,0,0,62,0,0,0,0,9,0,0,221,0,0,0,82,7,0,0,27,0,0,0,0,8,0,0,110,0,0,0,0,8,0,0,46,0,0,0,0,9,0,0,189,0,0,0,0,8,0,0,14,0,0,0,0,8,0,0,142,0,0,0,0,8,0,0,78,0,0,0,0,9,0,0,253,0,0,0,96,7,0,0,0,1,0,0,0,8,0,0,81,0,0,0,0,8,0,0,17,0,0,0,85,8,0,0,131,0,0,0,82,7,0,0,31,0,0,0,0,8,0,0,113,0,0,0,0,8,0,0,49,0,0,0,0,9,0,0,195,0,0,0,80,7,0,0,10,0,0,0,0,8,0,0,97,0,0,0,0,8,0,0,33,0,0,0,0,9,0,0,163,0,0,0,0,8,0,0,1,0,0,0,0,8,0,0,129,0,0,0,0,8,0,0,65,0,0,0,0,9,0,0,227,0,0,0,80,7,0,0,6,0,0,0,0,8,0,0,89,0,0,0,0,8,0,0,25,0,0,0,0,9,0,0,147,0,0,0,83,7,0,0,59,0,0,0,0,8,0,0,121,0,0,0,0,8,0,0,57,0,0,0,0,9,0,0,211,0,0,0,81,7,0,0,17,0,0,0,0,8,0,0,105,0,0,0,0,8,0,0,41,0,0,0,0,9,0,0,179,0,0,0,0,8,0,0,9,0,0,0,0,8,0,0,137,0,0,0,0,8,0,0,73,0,0,0,0,9,0,0,243,0,0,0,80,7,0,0,4,0,0,0,0,8,0,0,85,0,0,0,0,8,0,0,21,0,0,0,80,8,0,0,2,1,0,0,83,7,0,0,43,0,0,0,0,8,0,0,117,0,0,0,0,8,0,0,53,0,0,0,0,9,0,0,203,0,0,0,81,7,0,0,13,0,0,0,0,8,0,0,101,0,0,0,0,8,0,0,37,0,0,0,0,9,0,0,171,0,0,0,0,8,0,0,5,0,0,0,0,8,0,0,133,0,0,0,0,8,0,0,69,0,0,0,0,9,0,0,235,0,0,0,80,7,0,0,8,0,0,0,0,8,0,0,93,0,0,0,0,8,0,0,29,0,0,0,0,9,0,0,155,0,0,0,84,7,0,0,83,0,0,0,0,8,0,0,125,0,0,0,0,8,0,0,61,0,0,0,0,9,0,0,219,0,0,0,82,7,0,0,23,0,0,0,0,8,0,0,109,0,0,0,0,8,0,0,45], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([9,0,0,187,0,0,0,0,8,0,0,13,0,0,0,0,8,0,0,141,0,0,0,0,8,0,0,77,0,0,0,0,9,0,0,251,0,0,0,80,7,0,0,3,0,0,0,0,8,0,0,83,0,0,0,0,8,0,0,19,0,0,0,85,8,0,0,195,0,0,0,83,7,0,0,35,0,0,0,0,8,0,0,115,0,0,0,0,8,0,0,51,0,0,0,0,9,0,0,199,0,0,0,81,7,0,0,11,0,0,0,0,8,0,0,99,0,0,0,0,8,0,0,35,0,0,0,0,9,0,0,167,0,0,0,0,8,0,0,3,0,0,0,0,8,0,0,131,0,0,0,0,8,0,0,67,0,0,0,0,9,0,0,231,0,0,0,80,7,0,0,7,0,0,0,0,8,0,0,91,0,0,0,0,8,0,0,27,0,0,0,0,9,0,0,151,0,0,0,84,7,0,0,67,0,0,0,0,8,0,0,123,0,0,0,0,8,0,0,59,0,0,0,0,9,0,0,215,0,0,0,82,7,0,0,19,0,0,0,0,8,0,0,107,0,0,0,0,8,0,0,43,0,0,0,0,9,0,0,183,0,0,0,0,8,0,0,11,0,0,0,0,8,0,0,139,0,0,0,0,8,0,0,75,0,0,0,0,9,0,0,247,0,0,0,80,7,0,0,5,0,0,0,0,8,0,0,87,0,0,0,0,8,0,0,23,0,0,0,192,8,0,0,0,0,0,0,83,7,0,0,51,0,0,0,0,8,0,0,119,0,0,0,0,8,0,0,55,0,0,0,0,9,0,0,207,0,0,0,81,7,0,0,15,0,0,0,0,8,0,0,103,0,0,0,0,8,0,0,39,0,0,0,0,9,0,0,175,0,0,0,0,8,0,0,7,0,0,0,0,8,0,0,135,0,0,0,0,8,0,0,71,0,0,0,0,9,0,0,239,0,0,0,80,7,0,0,9,0,0,0,0,8,0,0,95,0,0,0,0,8,0,0,31,0,0,0,0,9,0,0,159,0,0,0,84,7,0,0,99,0,0,0,0,8,0,0,127,0,0,0,0,8,0,0,63,0,0,0,0,9,0,0,223,0,0,0,82,7,0,0,27,0,0,0,0,8,0,0,111,0,0,0,0,8,0,0,47,0,0,0,0,9,0,0,191,0,0,0,0,8,0,0,15,0,0,0,0,8,0,0,143,0,0,0,0,8,0,0,79,0,0,0,0,9,0,0,255,0,0,0,80,5,0,0,1,0,0,0,87,5,0,0,1,1,0,0,83,5,0,0,17,0,0,0,91,5,0,0,1,16,0,0,81,5,0,0,5,0,0,0,89,5,0,0,1,4,0,0,85,5,0,0,65,0,0,0,93,5,0,0,1,64,0,0,80,5,0,0,3,0,0,0,88,5,0,0,1,2,0,0,84,5,0,0,33,0,0,0,92,5,0,0,1,32,0,0,82,5,0,0,9,0,0,0,90,5,0,0,1,8,0,0,86,5,0,0,129,0,0,0,192,5,0,0,1,96,0,0,80,5,0,0,2,0,0,0,87,5,0,0,129,1,0,0,83,5,0,0,25,0,0,0,91,5,0,0,1,24,0,0,81,5,0,0,7,0,0,0,89,5,0,0,1,6,0,0,85,5,0,0,97,0,0,0,93,5,0,0,1,96,0,0,80,5,0,0,4,0,0,0,88,5,0,0,1,3,0,0,84,5,0,0,49,0,0,0,92,5,0,0,1,48,0,0,82,5,0,0,13,0,0,0,90,5,0,0,1,12,0,0,86,5,0,0,193,0,0,0,192,5,0,0,1,96,0,0,24,0,0,0,16,0,0,0,16,0,0,0,39,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,14,0,0,0,2,0,0,0,15,0,0,0,3,0,0,0,16,0,0,0,4,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,17,0,0,0,17,0,0,0,18,0,0,0,1,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,17,0,0,0,41,0,0,0,18,0,0,0,19,0,0,0,18,0,0,0,4,0,0,0,2,0,0,0,19,0,0,0,20,0,0,0,1,0,0,0,22,0,0,0,42,0,0,0,3,0,0,0,20,0,0,0,18,0,0,0,21,0,0,0,23,0,0,0,1,0,0,0,24,0,0,0,22,0,0,0,19,0,0,0,25,0,0,0,19,0,0,0,148,47,0,0,188,47,0,0,228,47,0,0,12,48,0,0,0,0,0,0,12,0,0,0,250,92,1,0,0,0,2,0,0,0,2,0,48,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,43,0,0,144,43,0,0,196,43,0,0,228,43,0,0,6,0,0,0,252,43,0,0,240,43,0,0,89,107,0,0,98,107,0,0,108,107,0,0,117,107,0,0,162,90,1,0,147,90,1,0,126,90,1,0,119,107,0,0,121,107,0,0,124,107,0,0,127,107,0,0,137,107,0,0,147,107,0,0,160,107,0,0,171,107,0,0,181,107,0,0,196,107,0,0,204,107,0,0,219,107,0,0,233,107,0,0,246,107,0,0,5,108,0,0,17,108,0,0,30,108,0,0,43,108,0,0,117,93,1,0,244,93,1,0,204,93,1,0,108,93,1,0,51,108,0,0,62,108,0,0,72,108,0,0,85,108,0,0,135,93,1,0,94,108,0,0,97,108,0,0,101,108,0,0,105,108,0,0,109,108,0,0,111,108,0,0,125,108,0,0,137,108,0,0,101,93,1,0,139,108,0,0,143,108,0,0,153,108,0,0,170,108,0,0,186,108,0,0,72,107,0,0,201,108,0,0,215,108,0,0,230,108,0,0,246,108,0,0,6,109,0,0,93,92,1,0,99,92,1,0,21,109,0,0,160,93,1,0,178,93,1,0,31,109,0,0,34,109,0,0,42,109,0,0,50,109,0,0,52,109,0,0,55,109,0,0,59,109,0,0,63,109,0,0,66,109,0,0,70,109,0,0,74,109,0,0,77,109,0,0,128,93,1,0,177,90,1,0,80,109,0,0,0,0,0,0,168,0,0,0,15,91,1,0,0,0,1,0,0,0,2,0,152,45,0,0,20,0,0,0,26,0,0,0,0,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,0,0,0,0,12,0,0,0,216,109,0,0,0,0,1,0,0,0,2,0,200,45,0,0,0,0,0,0,0,0,0,0,43,0,0,0,24,0,0,0,1,0,0,0,44,0,0,0,45,0,0,0,25,0,0,0,26,0,0,0,172,75,0,0,16,85,0,0,233,92,1,0,200,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,102,94,1,0,0,0,1,0,0,0,2,0,28,46,0,0,0,0,0,0,0,0,0,0,46,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,27,0,0,0,46,0,0,0,23,0,0,0,21,0,0,0,23,0,0,0,47,0,0,0,24,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,28,0,0,0,53,0,0,0,29,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,22,0,0,0,58,0,0,0,2,0,0,0,25,0,0,0,1,0,0,0,30,0,0,0,26,0,0,0,31,0,0,0,27,0,0,0,59,0,0,0,28,0,0,0,60,0,0,0,29,0,0,0,61,0,0,0,32,0,0,0,30,0,0,0,31,0,0,0,24,0,0,0,98,87,1,0,236,46,0,0,188,92,1,0,248,46,0,0,177,92,1,0,252,46,0,0,109,87,1,0,4,47,0,0,113,87,1,0,12,47,0,0,0,0,0,0,0,0,0,0,23,0,0,0,62,0,0,0,25,0,0,0,27,0,0,0,23,0,0,0,63,0,0,0,32,0,0,0,33,0,0,0,64,0,0,0,2,0,0,0,255,255,255,255,99,105,110,117,0,0,0,0,255,255,255,255,99,105,110,117,1,0,0,0,0,0,0,0,110,109,114,97,3,0,0,0,0,0,0,0,98,109,121,115,3,0,0,0,10,0,0,0,99,105,110,117,3,0,0,0,1,0,0,0,99,105,110,117,3,0,0,0,2,0,0,0,115,105,106,115,3,0,0,0,3,0,0,0,32,32,98,103,3,0,0,0,4,0,0,0,53,103,105,98,3,0,0,0,5,0,0,0,115,110,97,119,3,0,0,0,6,0,0,0,97,104,111,106,32,0,0,0,28,0,0,0,33,0,0,0,65,0,0,0,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,29,0,0,0,33,0,0,0,65,0,0,0,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,30,0,0,0,34,0,0,0,67,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,31,0,0,0,35,0,0,0,69,0,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,240,188,5,228,2,0,0,241,59,35,40,196,135,0,0,234,161,68,163,225,1,0,0,88,240,188,5,228,2,0,0,241,59,35,40,196,135,0,0,235,161,68,163,225,1,0,0,212,234,229,17,80,3,0,0,59,202,48,90,99,144,0,0,2,38,164,19,126,0,0,0,252,255,251,255,8,0,0,0,184,72,158,156,162,190,0,0,18,1,2,112,8,0,0,0,252,255,251,255,8,0,0,0,131,4,90,10,57,124,1,0,18,1,2,112,8,0,0,0,0,0,0,0,0,0,0,0,85,37,201,64,229,0,0,0,227,88,155,163,124,17,0,0,0,0,0,0,0,0,0,0,82,22,196,51,229,0,0,0,42,197,214,38,106,15,0,0,0,0,0,0,0,0,0,0,29,101,177,109,157,1,0,0,3,75,110,108,146,36,0,0,0,0,0,0,0,0,0,0,85,37,201,64,229,0,0,0,208,250,81,222,124,17,0,0,0,0,0,0,0,0,0,0,100,118,228,133,229,0,0,0,49,40,198,166,170,28,0,0,0,0,0,0,0,0,0,0,253,28,137,45,157,1,0,0,51,70,96,160,232,29,0,0,0,0,0,0,0,0,0,0,76,119,170,64,203,1,0,0,150,170,92,155,154,31,0,0,0,0,0,0,0,0,0,0,203,233,61,13,65,1,0,0,102,119,18,212,128,34,0,0,0,0,0,0,0,0,0,0,152,38,105,74,240,1,0,0,70,67,13,52,202,31,0,0,0,0,0,0,0,0,0,0,4,198,52,205,102,1,0,0,70,16,243,108,176,34,0,0,0,0,0,0,0,0,0,0,21,83,167,93,157,1,0,0,95,90,116,64,224,34,0,0,0,0,0,0,0,0,0,0,72,252,85,240,194,1,0,0,211,222,0,57,24,30,0,0,0,0,0,0,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,0,1,0,0,0,64,0,0,0,1,0,0,0,1,0,0,0,68,0,0,0,0,0,0,0,0,0,0,0,9,0,3,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,6,0,0,0,2,0,0,0,6,0,0,0,2,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2,0,0,0,1,5,0,0,28,0,0,0,42,90,1,0,0,0,1,0,0,0,2,0,0,0,0,0,32,0,0,0,36,0,0,0,71,0,0,0,44,2,0,0,44,0,0,0,180,0,0,0,26,0,0,0,37,0,0,0,33,0,0,0,38,0,0,0,34,0,0,0,39,0,0,0,11,0,0,0,1,0,0,0,24,0,0,0,25,0,0,0,72,0,0,0,27,0,0,0,73,0,0,0,0,0,0,0,188,92,1,0,28,51,0,0,177,92,1,0,32,51,0,0,195,94,1,0,48,90,1,0,209,92,1,0,40,51,0,0,55,90,1,0,60,51,0,0,116,94,1,0,64,51,0,0,0,0,0,0,0,0,0,0,35,0,0,0,26,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,36,0,0,0,77,0,0,0,28,0,0,0,27,0,0,0,78,0,0,0,34,0,0,0,35,0,0,0,79,0,0,0,36,0,0,0,93,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,101,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,108,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,117,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,12,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,135,93,1,0,3,0,0,0,2,0,0,0,0,0,0,0,20,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,147,93,1,0,3,0,0,0,1,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,160,93,1,0,3,0,0,0,2,0,0,0,0,0,0,0,26,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,178,93,1,0,3,0,0,0,2,0,0,0,0,0,0,0,28,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,197,93,1,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,231,91,1,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,240,91,1,0,4,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,246,91,1,0,4,0,0,0,2,0,0,0,0,0,0,0,184,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,4,92,1,0,4,0,0,0,2,0,0,0,0,0,0,0,188,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,13,92,1,0,4,0,0,0,4,0,0,0,0,0,0,0,108,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,23,92,1,0,4,0,0,0,2,0,0,0,0,0,0,0,112,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,33,92,1,0,4,0,0,0,2,0,0,0,0,0,0,0,116,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,42,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,14,0,0,0,8,0,0,0,2,0,0,0,53,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,40,0,0,0,2,0,0,0,10,0,0,0,9,0,0,0,2,0,0,0,64,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,60,0,0,0,2,0,0,0,14,0,0,0,10,0,0,0,2,0,0,0,76,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,88,0,0,0,2,0,0,0,10,0,0,0,11,0,0,0,2,0,0,0,93,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,120,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,99,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,122,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,105,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,192,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,116,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,128,0,0,0,2,0,0,0,12,0,0,0,124,0,0,0,2,0,0,0,126,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,154,0,0,0,2,0,0,0,12,0,0,0,125,0,0,0,2,0,0,0,154,92,1,0,4,0,0,0,3,0,0,0,0,0,0,0,180,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,136,92,1,0,4,0,0,0,1,0,0,0,0,0,0,0,126,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,204,93,1,0,1,0,0,0,6,0,0,0,0,0,0,0,232,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,213,93,1,0,1,0,0,0,2,0,0,0,0,0,0,0,44,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,223,93,1,0,1,0,0,0,2,0,0,0,0,0,0,0,45,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,232,93,1,0,1,0,0,0,3,0,0,0,0,0,0,0,92,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,244,93,1,0,5,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,91,90,1,0,7,0,0,0,2,0,0,0,0,0,0,0,24,2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,95,90,1,0,7,0,0,0,2,0,0,0,0,0,0,0,28,2,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,99,90,1,0,8,0,0,0,8,0,0,0,0,0,0,0,96,1,0,0,4,0,0,0,16,0,0,0,160,1,0,0,1,0,0,0,253,93,1,0,8,0,0,0,10,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,94,1,0,8,0,0,0,10,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,112,90,1,0,8,0,0,0,10,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,17,94,1,0,8,0,0,0,10,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,118,90,1,0,8,0,0,0,10,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,126,90,1,0,8,0,0,0,10,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,147,90,1,0,8,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,162,90,1,0,8,0,0,0,10,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,177,90,1,0,8,0,0,0,10,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,190,90,1,0,8,0,0,0,10,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,80,0,0,0,0,0,0,0,81,0,0,0,82,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,84,0,0,0,24,0,0,0,80,0,0,0,0,0,0,0,85,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,87,0,0,0,88,0,0,0,56,0,0,0,89,0,0,0,0,0,0,0,90,0,0,0,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,92,0,0,0,93,0,0,0,24,0,0,0,80,0,0,0,0,0,0,0,94,0,0,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,96,0,0,0,97,0,0,0,24,0,0,0,80,0,0,0,0,0,0,0,98,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,100,0,0,0,101,0,0,0,24,0,0,0,80,0,0,0,0,0,0,0,102,0,0,0,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,104,0,0,0,105,0,0,0,44,0,0,0,106,0,0,0,0,0,0,0,107,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,109,0,0,0,110,0,0,0,44,0,0,0,111,0,0,0,0,0,0,0,112,0,0,0,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,114,0,0,0,115,0,0,0,40,0,0,0,116,0,0,0,40,0,0,0,117,0,0,0,118,0,0,0,28,0,0,0,37,0,0,0,119,0,0,0,38,0,0,0,39,0,0,0,14,0,0,0,120,0,0,0,121,0,0,0,240,57,0,0,36,58,0,0,88,58,0,0,140,58,0,0,192,58,0,0,244,58,0,0,40,59,0,0,92,59,0,0,144,59,0,0,0,0,0,0,1,5,0,0,28,0,0,0,250,90,1,0,0,0,1,0,0,0,2,0,0,0,0,0,37,0,0,0,41,0,0,0,122,0,0,0,76,1,0,0,48,0,0,0,172,0,0,0,29,0,0,0,42,0,0,0,38,0,0,0,43,0,0,0,39,0,0,0,44,0,0,0,11,0,0,0,1,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,0,0,0,0,0,0,0,195,94,1,0,0,91,1,0,188,92,1,0,124,60,0,0,209,92,1,0,128,60,0,0,11,91,1,0,148,60,0,0,0,0,0,0,0,0,0,0,40,0,0,0,124,0,0,0,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,126,0,0,0,40,0,0,0,48,91,1,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,91,1,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,91,1,0,0,0,0,0,2,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,91,1,0,0,0,0,0,5,0,0,0,0,0,0,0,12,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,91,1,0,0,0,0,0,5,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,91,1,0,0,0,0,0,2,0,0,0,0,0,0,0,20,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,91,1,0,0,0,0,0,2,0,0,0,0,0,0,0,72,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,91,1,0,0,0,0,0,2,0,0,0,0,0,0,0,144,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,91,1,0,0,0,0,0,2,0,0,0,0,0,0,0,148,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,91,1,0,0,0,0,0,2,0,0,0,0,0,0,0,152,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,153,91,1,0,0,0,0,0,2,0,0,0,0,0,0,0,156,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,12,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,93,1,0,3,0,0,0,2,0,0,0,0,0,0,0,20,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,93,1,0,3,0,0,0,1,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,93,1,0,3,0,0,0,2,0,0,0,0,0,0,0,26,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,93,1,0,3,0,0,0,2,0,0,0,0,0,0,0,28,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,93,1,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,93,1,0,1,0,0,0,2,0,0,0,0,0,0,0,212,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,93,1,0,1,0,0,0,2,0,0,0,0,0,0,0,213,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,91,1,0,1,0,0,0,2,0,0,0,0,0,0,0,244,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,91,1,0,1,0,0,0,2,0,0,0,0,0,0,0,248,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,91,1,0,1,0,0,0,2,0,0,0,0,0,0,0,240,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,194,91,1,0,1,0,0,0,2,0,0,0,0,0,0,0,196,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,91,1,0,1,0,0,0,3,0,0,0,0,0,0,0,200,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,93,1,0,1,0,0,0,3,0,0,0,0,0,0,0,204,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,231,91,1,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,91,1,0,4,0,0,0,2,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,91,1,0,4,0,0,0,2,0,0,0,0,0,0,0,184,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,92,1,0,4,0,0,0,2,0,0,0,0,0,0,0,188,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,92,1,0,4,0,0,0,4,0,0,0,0,0,0,0,108,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,92,1,0,4,0,0,0,2,0,0,0,0,0,0,0,112,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,92,1,0,4,0,0,0,2,0,0,0,0,0,0,0,116,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,12,0,0,0,2,0,0,0,14,0,0,0,8,0,0,0,0,0,0,0,53,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,40,0,0,0,2,0,0,0,10,0,0,0,9,0,0,0,0,0,0,0,64,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,60,0,0,0,2,0,0,0,14,0,0,0,10,0,0,0,0,0,0,0,76,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,88,0,0,0,2,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,93,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,120,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,99,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,122,0,0,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,105,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,192,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,116,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,128,0,0,0,2,0,0,0,12,0,0,0,124,0,0,0,0,0,0,0,126,92,1,0,4,0,0,0,8,0,0,0,0,0,0,0,154,0,0,0,2,0,0,0,12,0,0,0,125,0,0,0,0,0,0,0,136,92,1,0,4,0,0,0,1,0,0,0,0,0,0,0,126,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,93,1,0,5,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,146,92,1,0,5,0,0,0,10,0,0,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,93,1,0,5,0,0,0,10,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,154,92,1,0,5,0,0,0,10,0,0,0,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,0,0,36,0,0,0,170,92,1,0,0,0,1,0,0,0,2,0,0,0,0,0,41,0,0,0,45,0,0,0,130,0,0,0,48,2,0,0,48,0,0,0,164,0,0,0,30,0,0,0,46,0,0,0,42,0,0,0,47,0,0,0,43,0,0,0,48,0,0,0,11,0,0,0,1,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,0,0,0,132,0,0,0,177,92,1,0,92,68,0,0,188,92,1,0,100,68,0,0,209,92,1,0,104,68,0,0,195,94,1,0,225,92,1,0,0,0,0,0,0,0,0,0,32,0,0,0,133,0,0,0,44,0,0,0,134,0,0,0,135,0,0,0,45,0,0,0,136,0,0,0,0,0,0,0,93,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,12,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,93,1,0,3,0,0,0,5,0,0,0,0,0,0,0,16,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,93,1,0,3,0,0,0,2,0,0,0,0,0,0,0,20,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,93,1,0,3,0,0,0,1,0,0,0,0,0,0,0,24,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,93,1,0,3,0,0,0,2,0,0,0,0,0,0,0,26,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,178,93,1,0,3,0,0,0,2,0,0,0,0,0,0,0,28,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,197,93,1,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,93,1,0,1,0,0,0,6,0,0,0,0,0,0,0,232,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,213,93,1,0,1,0,0,0,2,0,0,0,0,0,0,0,44,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,93,1,0,1,0,0,0,2,0,0,0,0,0,0,0,45,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,93,1,0,1,0,0,0,3,0,0,0,0,0,0,0,92,1,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,93,1,0,5,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,93,1,0,5,0,0,0,10,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,94,1,0,5,0,0,0,10,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,94,1,0,5,0,0,0,10,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,94,1,0,5,0,0,0,10,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,5,0,0,72,0,0,0,93,94,1,0,0,0,1,0,0,0,2,0,0,0,0,0,46,0,0,0,49,0,0,0,137,0,0,0,56,3,0,0,48,1,0,0,160,0,0,0,31,0,0,0,50,0,0,0,47,0,0,0,51,0,0,0,48,0,0,0,0,0,0,0,11,0,0,0,1,0,0,0,33,0,0,0,34,0,0,0,0,0,0,0,32,0,0,0,138,0,0,0,139,0,0,0,195,94,1,0,107,94,1,0,116,94,1,0,220,71,0,0,130,94,1,0,240,71,0,0,146,94,1,0,244,71,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,0,0,140,0,0,0,42,0,0,0,2,0,0,0,43,0,0,0,1,2,0,0,28,0,0,0,154,94,1,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,141,0,0,0,152,0,0,0,44,0,0,0,160,0,0,0,33,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,1,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,0,0,0,143,0,0,0,24,0,0,0,49,0,0,0,0,0,0,0,144,0,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,195,94,1,0,212,94,1,0,154,94,1,0,160,72,0,0,0,0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,73,0,0,76,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,46,0,0,0,80,102,1,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,93,0,94,0,95,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,97,0,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,0,109,0,110,0,0,0,111,0,112,0,113,0,114,0,0,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,0,0,123,0,0,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,0,0,132,0,133,0,0,0,134,0,135,0,136,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,138,0,0,0,139,0,0,0,0,0,0,0,0,0,140,0,141,0,142,0,143,0,0,0,0,0,0,0,0,0,0,0,144,0,0,0,0,0,0,0,145,0,0,0,0,0,146,0,147,0,148,0,149,0,0,0,0,0,0,0,0,0,4,0,4,0,8,1,16,0,8,1,17,0,8,1,18,0,8,1,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,229,0,230,0,0,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,13,0,14,0,15,0,99,0,239,0,240,0,241,0,242,0,243,0,244,0,245,0,246,0,247,0,248,0,27,0,28,0,249,0,250,0,251,0,252,0,0,0,253,0,254,0,255,0,0,1,1,1,0,0,0,0,0,0,2,1,0,0,0,0,3,1,4,1,5,1,6,1,0,0,0,0,7,1,8,1,9,1,0,0,10,1,109,0,110,0,11,1,12,1,13,1,0,0,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,1,44,1,45,1,46,1,47,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,1,49,1,50,1,0,0,0,0,51,1,52,1,53,1,54,1,55,1,0,0,56,1,0,0,0,0,56,1,0,0,0,0,58,1,59,1,0,0,0,0,60,1,61,1,62,1,0,0,0,0,0,0,158,0,155,0,163,0,63,1,64,1,65,1,66,1,67,1,68,1,69,1,0,0,0,0,70,1,150,0,164,0,169,0,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,94,1,95,1,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,107,1,108,1,109,1,110,1,111,1,112,1,113,1,114,1,115,1,116,1,117,1,118,1,119,1,120,1,121,1,122,1,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10241);
/* memory initializer */ allocate([0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,91,0,92,0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,126,0,127,0,128,0,129,0,130,0,131,0,132,0,133,0,134,0,135,0,136,0,137,0,138,0,139,0,140,0,141,0,142,0,143,0,144,0,145,0,146,0,147,0,148,0,149,0,150,0,151,0,152,0,153,0,154,0,155,0,156,0,157,0,158,0,159,0,160,0,161,0,162,0,163,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,192,0,193,0,194,0,195,0,196,0,197,0,198,0,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,208,0,209,0,210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,219,0,220,0,221,0,222,0,223,0,224,0,225,0,226,0,227,0,228,0,0,0,1,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,13,0,14,0,15,0,99,0,239,0,240,0,241,0,242,0,243,0,244,0,245,0,246,0,247,0,248,0,27,0,28,0,249,0,250,0,251,0,252,0,253,0,254,0,255,0,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,1,10,1,109,0,110,0,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,1,44,1,45,1,46,1,47,1,48,1,49,1,50,1,51,1,52,1,53,1,54,1,55,1,56,1,57,1,58,1,59,1,60,1,61,1,62,1,158,0,155,0,163,0,63,1,64,1,65,1,66,1,67,1,68,1,69,1,70,1,150,0,164,0,169,0,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,94,1,95,1,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,107,1,108,1,109,1,110,1,111,1,112,1,113,1,114,1,115,1,116,1,117,1,118,1,119,1,120,1,121,1,122,1,0,0,1,0,231,0,232,0,235,0,236,0,237,0,238,0,13,0,14,0,15,0,99,0,239,0,240,0,241,0,242,0,243,0,244,0,245,0,246,0,247,0,248,0,27,0,28,0,249,0,250,0,251,0,253,0,254,0,255,0,0,1,1,1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9,1,10,1,109,0,110,0,11,1,12,1,13,1,14,1,16,1,44,1,45,1,46,1,49,1,58,1,59,1,158,0,155,0,163,0,64,1,65,1,66,1,67,1,68,1,69,1,70,1,150,0,164,0,169,0,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,4,0,12,0,13,2,0,0,13,2,2,0,13,2,4,0,13,2,6,0,13,2,8,0,13,2,10,0,0,0,0,0,4,0,12,0,15,2,0,0,15,2,2,0,15,2,4,0,15,2,6,0,15,2,8,0,15,2,10,0,0,0,0,0,4,0,5,0,8,1,0,0,8,1,1,0,8,1,2,0,8,1,3,0,8,1,4,0,0,0,0,0,4,0,20,0,8,1,0,0,8,1,1,0,8,1,2,0,8,1,3,0,8,1,4,0,8,1,5,0,8,1,6,0,25,1,0,0,17,4,8,0,17,4,12,0,17,4,16,0,0,0,0,0,4,0,20,0,8,1,0,0,8,1,1,0,8,1,2,0,8,1,3,0,8,1,4,0,8,1,5,0,8,1,6,0,25,1,0,0,19,4,8,0,19,4,12,0,19,4,16,0,0,0,0,0,4,0,9,0,17,4,0,0,8,1,4,0,17,4,8,0,0,0,0,0,4,0,9,0,19,4,0,0,8,1,4,0,19,4,8,0,0,0,0,0,4,0,8,0,18,4,0,0,18,4,4,0,0,0,0,0,4,0,16,0,18,4,0,0,18,4,4,0,18,4,8,0,18,4,12,0,0,0,0,0,4,0,58,0,16,4,0,0,12,4,4,0,12,4,8,0,12,4,12,0,12,4,16,0,12,4,20,0,12,4,24,0,20,4,28,0,20,4,32,0,12,4,36,0,20,4,40,0,20,4,44,0,12,4,48,0,20,4,52,0,20,4,56,0,8,4,60,0,8,4,64,0,8,4,68,0,8,4,72,0,8,4,76,0,20,4,80,0,20,4,84,0,20,4,88,0,12,4,92,0,8,4,96,0,8,4,100,0,12,4,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,229,0,230,0,0,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,13,0,14,0,15,0,99,0,239,0,240,0,241,0,242,0,243,0,244,0,245,0,246,0,247,0,248,0,27,0,28,0,249,0,250,0,251,0,252,0,0,0,253,0,254,0,255,0,0,1,1,1,0,0,0,0,0,0,2,1,0,0,0,0,3,1,4,1,5,1,6,1,0,0,0,0,7,1,8,1,9,1,0,0,10,1,109,0,110,0,11,1,12,1,13,1,0,0,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,1,44,1,45,1,46,1,47,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,1,49,1,50,1,0,0,0,0,51,1,52,1,53,1,54,1,55,1,0,0,56,1,0,0,0,0,57,1,0,0,0,0,58,1,59,1,0,0,0,0,60,1,61,1,62,1,0,0,0,0,0,0,158,0,155,0,163,0,63,1,64,1,65,1,66,1,67,1,68,1,69,1,0,0,0,0,70,1,150,0,164,0,169,0,71,1,72,1,73,1,74,1,75,1,76,1,77,1,78,1,79,1,80,1,81,1,82,1,83,1,84,1,85,1,86,1,87,1,88,1,89,1,90,1,91,1,92,1,93,1,94,1,95,1,96,1,97,1,98,1,99,1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,107,1,108,1,109,1,110,1,111,1,112,1,113,1,114,1,115,1,116,1,117,1,118,1,119,1,120,1,121,1,122,1,253,0,5,1,11,1,18,1,27,1,38,1,45,1,53,1,63,1,74,1,84,1,95,1,104,1,109,1,115,1,122,1,129,1,135,1,140,1,144,1,148,1,154,1,159,1,164,1,168,1,174,1,180,1,185,1,191,1,201,1,206,1,212,1,220,1,229,1,232,1,234,1,236,1,238,1,240,1,242,1,244,1,246,1,248,1,250,1,252,1,254,1,0,2,2,2,4,2,6,2,8,2,10,2,12,2,14,2,16,2,18,2,20,2,22,2,24,2,26,2,28,2,40,2,50,2,63,2,75,2,86,2,96,2,98,2,100,2,102,2,104,2,106,2,108,2,110,2,112,2,114,2,116,2,118,2,120,2,122,2,124,2,126,2,128,2,130,2,132,2,134,2,136,2,138,2,140,2,142,2,144,2,146,2,148,2,158,2,162,2,173,2,184,2,195,2,200,2,209,2,218,2,222,2,229,2,237,2,246,2,2,3,15,3,29,3,43,3,58,3,61,3,64,3,71,3,78,3,88,3,103,3,113,3,120,3,135,3,148,3,162,3,177,3,186,3,198,3,211,3,217,3,223,3,234,3,240,3,247,3,253,3,7,4,16,4,21,4,29,4,42,4,49,4,55,4,62,4,65,4,77,4,84,4,91,4,94,4,107,4,110,4,119,4,126,4,133,4,136,4,147,4,159,4,170,4,173,4,183,4,187,4,195,4,205,4,211,4,222,4,229,4,239,4,246,4,252,4,10,5,22,5,33,5,39,5,43,5,52,5,66,5,76,5,83,5,95,5,105,5,112,5,118,5,125,5,134,5,141,5,153,5,163,5,170,5,177,5,189,5,199,5,206,5,213,5,220,5,232,5,242,5,249,5,0,6,7,6,14,6,26,6,36,6,43,6,50,6,60,6,67,6,74,6,86,6,96,6,103,6,109,6,116,6,125,6,132,6,144,6,154,6,161,6,168,6,180,6,190,6,197,6,204,6,211,6,223,6,233,6,240,6,247,6,254,6,5,7,17,7,27,7,34,7,41,7,51,7,58,7,70,7,88,7,103,7,118,7,133,7,144,7,162,7,181,7,196,7,211,7,224,7,236,7,248,7,6,8,19,8,32,8,44,8,58,8,72,8,85,8,99,8,119,8,134,8,148,8,158,8,168,8,181,8,191,8,201,8,211,8,221,8,231,8,241,8,251,8,5,9,15,9,25,9,28,9,32,9,36,9,54,9,73,9,89,9,104,9,115,9,122,9,129,9,136,9,143,9,150,9,157,9,164,9,171,9,178,9,185,9,192,9,199,9,206,9,213,9,220,9,227,9,234,9,241,9,248,9,255,9,6,10,13,10,20,10,27,10,34,10,41,10,55,10,65,10,72,10,83,10,99,10,112,10,124,10,136,10,148,10,162,10,173,10,184,10,199,10,211,10,222,10,237,10,249,10,3,11,16,11,34,11,44,11,57,11,69,11,82,11,91,11,101,11,114,11,127,11,140,11,152,11,166,11,180,11,193,11,206,11,218,11,230,11,244,11,1,12,14,12,26,12,40,12,54,12,67,12,80,12,95,12,110,12,124,12,136,12,148,12,165,12,177,12,192,12,203,12,211,12,225,12,237,12,249,12,10,13,25,13,37,13,49,13,66,13,81,13,90,13,102,13,114,13,126,13,143,13,155,13,170,13,178,13,190,13,202,13,214,13,231,13,246,13,2,14,13,14,28,14,36,14,44,14,52,14,60,14,66,14,71,14,76,14,82,14,89,14,97,14,103,14,253,0,0,0,6,0,5,1,11,1,18,1,27,1,38,1,45,1,53,1,246,2,74,1,84,1,95,1,104,1,109,1,115,1,122,1,129,1,135,1,140,1,144,1,148,1,154,1,159,1,164,1,168,1,174,1,180,1,185,1,191,1,201,1,206,1,212,1,220,1,229,1,232,1,234,1,236,1,238,1,240,1,242,1,244,1,246,1,248,1,250,1,252,1,254,1,0,2,2,2,4,2,6,2,8,2,10,2,12,2,14,2,16,2,18,2,20,2,22,2,24,2,26,2,28,2,40,2,50,2,63,2,75,2,211,3,96,2,98,2,100,2,102,2,104,2,106,2,108,2,110,2,112,2,114,2,116,2,118,2,120,2,122,2,124,2,126,2,128,2,130,2,132,2,134,2,136,2,138,2,140,2,142,2,144,2,146,2,148,2,158,2,162,2,173,2,95,5,112,5,125,5,134,5,206,5,232,5,26,6,67,6,96,6,74,6,86,6,109,6,103,6,116,6,125,6,154,6,132,6,144,6,161,6,190,6,168,6,180,6,197,6,204,6,233,6,211,6,223,6,240,6,254,6,27,7,5,7,17,7,71,3,239,4,195,2,200,2,229,2,113,3,103,3,136,4,22,5,66,5,173,4,217,3,7,4,23,0,62,4,84,4,32,0,195,4,41,0,51,0,218,2,170,4,64,0,76,0,86,0,94,0,97,0,65,4,94,4,106,0,107,4,126,4,198,3,184,2,159,4,112,0,222,2,120,0,132,0,15,3,162,3,177,3,138,0,105,5,118,5,249,5,91,4,133,4,64,3,55,4,2,3,148,3,86,2,63,1,222,4,155,0,41,7,50,6,209,2,237,2,29,3,43,3,58,3,61,3,78,3,88,3,120,3,135,3,186,3,83,5,141,5,76,5,153,5,163,5,170,5,177,5,189,5,199,5,213,5,220,5,163,0,242,5,7,6,14,6,36,6,110,4,223,3,234,3,240,3,247,3,253,3,16,4,21,4,29,4,42,4,49,4,77,4,119,4,0,6,247,6,60,6,51,7,229,4,183,4,39,5,43,6,34,7,205,4,246,4,33,5,43,5,147,4,10,5,52,5,187,4,211,4,252,4,169,0,175,0,182,0,189,0,200,0,209,0,218,0,225,0,232,0,239,0,246,0,4,0,8,0,17,4,4,0,17,4,8,0,0,0,0,0,16,4,8,0,17,0,0,0,16,4,0,0,16,4,12,0,0,0,0,0,9,1,0,0,9,1,1,0,8,1,2,0,9,1,3,0,9,1,4,0,9,1,5,0,9,1,6,0,9,1,7,0,9,1,8,0,9,1,9,0,9,1,10,0,9,1,11,0,0,0,0,0,12,2,40,0,12,2,42,0,8,1,44,0,8,1,45,0,8,1,46,0,9,1,47,0,0,0,0,0,4,0,5,0,8,1,0,0,8,1,1,0,9,1,2,0,9,1,3,0,8,1,4,0,0,0,0,0,4,0,8,0,8,1,0,0,8,1,1,0,9,1,2,0,9,1,3,0,8,1,4,0,9,1,5,0,9,1,6,0,8,1,7,0,0,0,0,0,4,0,36,0,16,4,0,0,13,2,4,0,13,2,6,0,13,2,8,0,12,2,10,0,13,2,12,0,13,2,14,0,13,2,16,0,13,2,18,0,13,2,20,0,13,2,22,0,13,2,24,0,13,2,26,0,13,2,28,0,13,2,30,0,13,2,32,0,12,2,34,0,0,0,0,0,4,0,16,0,17,4,0,0,12,2,4,0,12,2,6,0,12,2,8,0,12,2,10,0,12,2,12,0,12,2,14,0,0,0,0,0,4,0,20,0,16,4,0,0,16,4,4,0,16,4,8,0,16,4,12,0,12,2,16,0,12,2,18,0,0,0,0,0,4,0,20,0,17,4,0,0,12,2,4,0,12,2,6,0,16,4,8,0,12,2,12,0,12,2,14,0,16,4,16,0,0,0,0,0,4,0,8,0,12,2,4,0,12,2,6,0,12,2,8,0,12,2,10,0,0,0,0,0,4,0,6,0,17,4,0,0,12,2,4,0,0,0,0,0,4,0,26,0,12,2,6,0,12,2,8,0,12,2,10,0,12,2,12,0,12,2,14,0,12,2,16,0,12,2,18,0,12,2,20,0,12,2,22,0,12,2,24,0,12,2,26,0,12,2,28,0,12,2,30,0,0,0,0,0,4,0,6,0,12,2,0,0,12,4,4,0,12,4,8,0,0,0,0,0,12,2,0,0,12,2,2,0,12,2,4,0,12,2,6,0,12,2,8,0,12,4,12,0,0,0,0,0,4,0,78,0,12,2,0,0,13,2,2,0,12,2,4,0,12,2,6,0,13,2,8,0,13,2,10,0,13,2,12,0,13,2,14,0,13,2,16,0,13,2,18,0,13,2,20,0,13,2,22,0,13,2,24,0,13,2,26,0,13,2,28,0,13,2,30,0,8,1,32,0,8,1,33,0,8,1,34,0,8,1,35,0,8,1,36,0,8,1,37,0,8,1,38,0,8,1,39,0,8,1,40,0,8,1,41,0,16,4,44,0,16,4,48,0,16,4,52,0,16,4,56,0,8,1,60,0,8,1,61,0,8,1,62,0,8,1,63,0,12,2,64,0,12,2,66,0,12,2,68,0,13,2,70,0,13,2,72,0,13,2,74,0,12,2,76,0,12,2,78,0,0,0,0,0,4,0,8,0,16,4,80,0,16,4,84,0,0,0,0,0,4,0,10,0,13,2,88,0,13,2,90,0,12,2,92,0,12,2,94,0,12,2,96,0,0,0,0,0,4,0,32,0,16,4,0,0,16,4,4,0,13,2,8,0,13,2,10,0,16,4,12,0,16,4,16,0,16,4,20,0,16,4,24,0,16,4,28,0,0,0,0,0,4,0,54,0,16,4,0,0,16,4,4,0,12,2,8,0,12,2,10,0,12,2,12,0,12,2,14,0,12,2,16,0,24,16,20,0,24,8,36,0,24,6,44,0,9,1,50,0,9,1,51,0,8,1,52,0,8,1,53,0,0,0,0,0,4,0,54,0,16,4,0,0,16,4,4,0,17,4,8,0,17,4,12,0,12,2,16,0,12,2,18,0,17,4,20,0,17,4,24,0,17,4,28,0,17,4,32,0,13,2,36,0,13,2,38,0,13,2,40,0,13,2,42,0,12,2,44,0,12,2,46,0,13,2,48,0,13,2,50,0,13,2,52,0,0,0,0,0,4,0,16,0,16,4,0,0,16,4,4,0,16,4,8,0,16,4,12,0,0,0,0,0,4,0,148,0,14,2,0,0,18,4,4,0,24,60,8,0,14,2,68,0,14,2,70,0,14,2,72,0,14,2,74,0,14,2,76,0,14,2,78,0,14,2,80,0,8,1,82,0,8,1,83,0,8,1,84,0,14,2,86,0,8,1,88,0,14,2,90,0,14,2,92,0,8,1,94,0,14,2,96,0,14,2,98,0,8,1,100,0,8,1,101,0,8,1,102,0,8,1,103,0,14,2,104,0,18,4,108,0,18,4,112,0,18,4,116,0,18,4,120,0,8,1,124,0,18,4,128,0,14,2,132,0,14,2,134,0,14,2,136,0,18,2,138,0,24,16,140,0,0,0,0,0,4,0,64,0,14,2,0,0,25,58,0,0,18,2,2,0,0,0,0,0,4,0,40,0,14,2,0,0,25,34,0,0,14,2,2,0,14,2,4,0,0,0,0,0,4,0,248,0,18,4,0,0,14,2,4,0,14,2,6,0,25,12,0,0,14,2,8,0,25,2,0,0,14,2,10,0,25,110,0,0,18,4,12,0,18,4,16,0,25,104,0,0,0,0,0,0,4,0,40,0,24,8,0,0,25,4,0,0,18,4,8,0,18,4,12,0,18,4,16,0,25,16,0,0,0,0,0,0,4,0,16,0,18,4,0,0,18,4,4,0,14,2,8,0,14,2,10,0,14,2,12,0,14,2,14,0,0,0,0,0,4,0,8,0,18,4,0,0,18,4,4,0,0,0,0,0,4,0,16,0,18,4,0,0,18,4,4,0,18,4,8,0,18,4,12,0,0,0,0,0,108,111,97,100,95,102,111,110,116,40,37,115,44,37,115,41,58,32,116,111,111,32,109,97,110,121,32,102,111,110,116,115,33,10,0,78,101,119,95,70,97,99,101,40,37,115,44,37,115,41,32,69,114,114,111,114,33,32,37,100,10,0,108,111,97,100,95,109,101,109,95,102,111,110,116,40,108,101,110,58,37,100,44,37,115,41,58,32,116,111,111,32,109,97,110,121,32,102,111,110,116,115,33,10,0,78,101,119,95,77,101,109,111,114,121,95,70,97,99,101,40,108,101,110,58,37,100,44,32,37,115,41,32,69,114,114,111,114,33,32,37,100,10,0,83,101,116,95,67,104,97,114,95,83,105,122,101,32,69,114,114,111,114,33,32,37,100,10,0,76,111,97,100,95,67,104,97,114,32,69,114,114,111,114,33,32,37,100,10,0,73,110,105,116,32,69,114,114,111,114,33,32,37,100,10,0,99,105,100,0,79,84,84,79,0,114,98,0,46,65,112,112,108,101,68,111,117,98,108,101,47,0,37,0,46,114,101,115,111,117,114,99,101,47,0,114,101,115,111,117,114,99,101,46,102,114,107,47,0,47,114,115,114,99,0,47,46,46,110,97,109,101,100,102,111,114,107,47,114,115,114,99,0,46,95,0,99,102,102,0,67,70,70,0,66,68,70,0,67,79,77,77,69,78,84,0,83,84,65,82,84,70,79,78,84,0,83,84,65,82,84,80,82,79,80,69,82,84,73,69,83,0,32,43,0,70,79,78,84,66,79,85,78,68,73,78,71,66,79,88,0,70,79,78,84,0,83,73,90,69,0,67,72,65,82,83,0,37,104,100,0,70,79,78,84,95,65,83,67,69,78,84,0,70,79,78,84,95,68,69,83,67,69,78,84,0,69,78,68,70,79,78,84,0,69,78,68,67,72,65,82,0,83,84,65,82,84,67,72,65,82,0,69,78,67,79,68,73,78,71,0,0,0,0,0,0,0,255,3,126,0,0,0,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,0,0,0,0,0,0,0,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,128,192,224,240,248,252,254,83,87,73,68,84,72,0,68,87,73,68,84,72,0,66,66,88,0,66,73,84,77,65,80,0,0,0,0,0,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,69,70,65,85,76,84,95,67,72,65,82,0,83,80,65,67,73,78,71,0,45,0,0,69,78,68,80,82,79,80,69,82,84,73,69,83,0,95,88,70,82,69,69,56,54,95,71,76,89,80,72,95,82,65,78,71,69,83,0,65,86,71,95,67,65,80,73,84,65,76,95,87,73,68,84,72,0,65,86,71,95,76,79,87,69,82,67,65,83,69,95,87,73,68,84,72,0,67,65,80,95,72,69,73,71,72,84,0,67,72,65,82,83,69,84,95,67,79,76,76,69,67,84,73,79,78,83,0,67,79,80,89,82,73,71,72,84,0,68,69,83,84,73,78,65,84,73,79,78,0,68,69,86,73,67,69,95,70,79,78,84,95,78,65,77,69,0,69,78,68,95,83,80,65,67,69,0,70,65,67,69,95,78,65,77,69,0,70,73,71,85,82,69,95,87,73,68,84,72,0,70,79,78,84,78,65,77,69,95,82,69,71,73,83,84,82,89,0,70,79,85,78,68,82,89,0,70,85,76,76,95,78,65,77,69,0,73,84,65,76,73,67,95,65,78,71,76,69,0,77,65,88,95,83,80,65,67,69,0,77,73,78,95,83,80,65,67,69,0,78,79,82,77,95,83,80,65,67,69,0,78,79,84,73,67,69,0,81,85,65,68,95,87,73,68,84,72,0,82,65,87,95,65,83,67,69,78,84,0,82,65,87,95,65,86,69,82,65,71,69,95,87,73,68,84,72,0,82,65,87,95,65,86,71,95,67,65,80,73,84,65,76,95,87,73,68,84,72,0,82,65,87,95,65,86,71,95,76,79,87,69,82,67,65,83,69,95,87,73,68,84,72,0,82,65,87,95,67,65,80,95,72,69,73,71,72,84,0,82,65,87,95,68,69,83,67,69,78,84,0,82,65,87,95,69,78,68,95,83,80,65,67,69,0,82,65,87,95,70,73,71,85,82,69,95,87,73,68,84,72,0,82,65,87,95,77,65,88,95,83,80,65,67,69,0,82,65,87,95,77,73,78,95,83,80,65,67,69,0,82,65,87,95,78,79,82,77,95,83,80,65,67,69,0,82,65,87,95,80,73,88,69,76,95,83,73,90,69,0,82,65,87,95,80,79,73,78,84,95,83,73,90,69,0,82,65,87,95,80,73,88,69,76,83,73,90,69,0,82,65,87,95,80,79,73,78,84,83,73,90,69,0,82,65,87,95,81,85,65,68,95,87,73,68,84,72,0,82,65,87,95,83,77,65,76,76,95,67,65,80,95,83,73,90,69,0,82,65,87,95,83,84,82,73,75,69,79,85,84,95,65,83,67,69,78,84,0,82,65,87,95,83,84,82,73,75,69,79,85,84,95,68,69,83,67,69,78,84,0,82,65,87,95,83,85,66,83,67,82,73,80,84,95,83,73,90,69,0,82,65,87,95,83,85,66,83,67,82,73,80,84,95,88,0,82,65,87,95,83,85,66,83,67,82,73,80,84,95,89,0,82,65,87,95,83,85,80,69,82,83,67,82,73,80,84,95,83,73,90,69,0,82,65,87,95,83,85,80,69,82,83,67,82,73,80,84,95,88,0,82,65,87,95,83,85,80,69,82,83,67,82,73,80,84,95,89,0,82,65,87,95,85,78,68,69,82,76,73,78,69,95,80,79,83,73,84,73,79,78,0,82,65,87,95,85,78,68,69,82,76,73,78,69,95,84,72,73,67,75,78,69,83,83,0,82,65,87,95,88,95,72,69,73,71,72,84,0,82,69,76,65,84,73,86,69,95,83,69,84,87,73,68,84,72,0,82,69,76,65,84,73,86,69,95,87,69,73,71,72,84,0,82,69,83,79,76,85,84,73,79,78,0,83,77,65,76,76,95,67,65,80,95,83,73,90,69,0,83,84,82,73,75,69,79,85,84,95,65,83,67,69,78,84,0,83,84,82,73,75,69,79,85,84,95,68,69,83,67,69,78,84,0,83,85,66,83,67,82,73,80,84,95,83,73,90,69,0,83,85,66,83,67,82,73,80,84,95,88,0,83,85,66,83,67,82,73,80,84,95,89,0,83,85,80,69,82,83,67,82,73,80,84,95,83,73,90,69,0,83,85,80,69,82,83,67,82,73,80,84,95,88,0,83,85,80,69,82,83,67,82,73,80,84,95,89,0,85,78,68,69,82,76,73,78,69,95,80,79,83,73,84,73,79,78,0,85,78,68,69,82,76,73,78,69,95,84,72,73,67,75,78,69,83,83,0,87,69,73,71,72,84,0,88,95,72,69,73,71,72,84,0,95,77,85,76,69,95,66,65,83,69,76,73,78,69,95,79,70,70,83,69,84,0,95,77,85,76,69,95,82,69,76,65,84,73,86,69,95,67,79,77,80,79,83,69,0,0,194,193,193,32,32,32,32,32,32,32,32,32,32,13,7,9,11,128,130,130,130,130,128,128,0,1,2,2,2,1,0,2,1,1,1,2,1,2,1,2,1,4,3,2,2,1,2,4,1,1,0,2,0,0,0,5,4,2,97,117,116,111,102,105,116,116,101,114,0,84,72,69,90,79,67,81,83,0,0,0,0,0,72,69,90,76,79,67,85,83,0,0,0,0,0,102,105,106,107,100,98,104,0,0,0,0,0,0,120,122,114,111,101,115,99,0,0,0,0,0,0,120,122,114,111,101,115,99,0,0,0,0,0,0,112,113,103,106,121,0,0,0,0,0,0,0,0,114,97,115,116,101,114,49,0,114,97,115,116,101,114,53,0,115,109,111,111,116,104,0,115,109,111,111,116,104,45,108,99,100,0,115,109,111,111,116,104,45,108,99,100,118,0,112,99,102,0,49,48,54,52,54,0,56,56,53,57,0,49,0,80,67,70,0,112,102,114,0,112,102,114,45,109,101,116,114,105,99,115,0,80,70,82,0,117,110,107,110,111,119,110,32,99,111,109,112,114,101,115,115,105,111,110,32,109,101,116,104,111,100,0,105,110,118,97,108,105,100,32,119,105,110,100,111,119,32,115,105,122,101,0,105,110,99,111,114,114,101,99,116,32,104,101,97,100,101,114,32,99,104,101,99,107,0,110,101,101,100,32,100,105,99,116,105,111,110,97,114,121,0,105,110,99,111,114,114,101,99,116,32,100,97,116,97,32,99,104,101,99,107,0,105,110,118,97,108,105,100,32,98,108,111,99,107,32,116,121,112,101,0,105,110,118,97,108,105,100,32,115,116,111,114,101,100,32,98,108,111,99,107,32,108,101,110,103,116,104,115,0,116,111,111,32,109,97,110,121,32,108,101,110,103,116,104,32,111,114,32,100,105,115,116,97,110,99,101,32,115,121,109,98,111,108,115,0,105,110,118,97,108,105,100,32,98,105,116,32,108,101,110,103,116,104,32,114,101,112,101,97,116,0,105,110,118,97,108,105,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,99,111,100,101,0,105,110,118,97,108,105,100,32,100,105,115,116,97,110,99,101,32,99,111,100,101,0,111,118,101,114,115,117,98,115,99,114,105,98,101,100,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,116,114,101,101,0,105,110,99,111,109,112,108,101,116,101,32,108,105,116,101,114,97,108,47,108,101,110,103,116,104,32,116,114,101,101,0,111,118,101,114,115,117,98,115,99,114,105,98,101,100,32,100,105,115,116,97,110,99,101,32,116,114,101,101,0,105,110,99,111,109,112,108,101,116,101,32,100,105,115,116,97,110,99,101,32,116,114,101,101,0,101,109,112,116,121,32,100,105,115,116,97,110,99,101,32,116,114,101,101,32,119,105,116,104,32,108,101,110,103,116,104,115,0,111,118,101,114,115,117,98,115,99,114,105,98,101,100,32,100,121,110,97,109,105,99,32,98,105,116,32,108,101,110,103,116,104,115,32,116,114,101,101,0,105,110,99,111,109,112,108,101,116,101,32,100,121,110,97,109,105,99,32,98,105,116,32,108,101,110,103,116,104,115,32,116,114,101,101,0,70,65,77,73,76,89,95,78,65,77,69,0,65,86,69,82,65,71,69,95,87,73,68,84,72,0,80,79,73,78,84,95,83,73,90,69,0,80,73,88,69,76,95,83,73,90,69,0,82,69,83,79,76,85,84,73,79,78,95,88,0,82,69,83,79,76,85,84,73,79,78,95,89,0,83,76,65,78,84,0,79,98,108,105,113,117,101,0,87,69,73,71,72,84,95,78,65,77,69,0,83,69,84,87,73,68,84,72,95,78,65,77,69,0,65,68,68,95,83,84,89,76,69,95,78,65,77,69,0,116,114,117,101,0,83,116,97,114,116,70,111,110,116,77,101,116,114,105,99,115,0,65,115,99,101,110,100,101,114,0,65,120,105,115,76,97,98,101,108,0,65,120,105,115,84,121,112,101,0,66,0,67,0,67,67,0,67,72,0,67,97,112,72,101,105,103,104,116,0,67,104,97,114,87,105,100,116,104,0,67,104,97,114,97,99,116,101,114,83,101,116,0,67,104,97,114,97,99,116,101,114,115,0,68,101,115,99,101,110,100,101,114,0,69,110,99,111,100,105,110,103,83,99,104,101,109,101,0,69,110,100,65,120,105,115,0,69,110,100,67,104,97,114,77,101,116,114,105,99,115,0,69,110,100,67,111,109,112,111,115,105,116,101,115,0,69,110,100,68,105,114,101,99,116,105,111,110,0,69,110,100,70,111,110,116,77,101,116,114,105,99,115,0,69,110,100,75,101,114,110,68,97,116,97,0,69,110,100,75,101,114,110,80,97,105,114,115,0,69,110,100,84,114,97,99,107,75,101,114,110,0,69,115,99,67,104,97,114,0,73,115,66,97,115,101,70,111,110,116,0,73,115,67,73,68,70,111,110,116,0,73,115,70,105,120,101,100,80,105,116,99,104,0,73,115,70,105,120,101,100,86,0,75,80,0,75,80,72,0,75,80,88,0,75,80,89,0,76,0,77,97,112,112,105,110,103,83,99,104,101,109,101,0,77,101,116,114,105,99,115,83,101,116,115,0,78,0,80,67,67,0,83,116,97,114,116,65,120,105,115,0,83,116,97,114,116,67,104,97,114,77,101,116,114,105,99,115,0,83,116,97,114,116,67,111,109,112,111,115,105,116,101,115,0,83,116,97,114,116,68,105,114,101,99,116,105,111,110,0,83,116,97,114,116,75,101,114,110,68,97,116,97,0,83,116,97,114,116,75,101,114,110,80,97,105,114,115,0,83,116,97,114,116,75,101,114,110,80,97,105,114,115,48,0,83,116,97,114,116,75,101,114,110,80,97,105,114,115,49,0,83,116,97,114,116,84,114,97,99,107,75,101,114,110,0,84,114,97,99,107,75,101,114,110,0,86,86,0,86,86,101,99,116,111,114,0,86,101,114,115,105,111,110,0,87,0,87,48,0,87,48,88,0,87,48,89,0,87,49,0,87,49,88,0,87,49,89,0,87,88,0,87,89,0,88,72,101,105,103,104,116,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,112,115,110,97,109,101,115,0,46,110,117,108,108,0,110,111,110,109,97,114,107,105,110,103,114,101,116,117,114,110,0,110,111,116,101,113,117,97,108,0,105,110,102,105,110,105,116,121,0,108,101,115,115,101,113,117,97,108,0,103,114,101,97,116,101,114,101,113,117,97,108,0,112,97,114,116,105,97,108,100,105,102,102,0,115,117,109,109,97,116,105,111,110,0,112,114,111,100,117,99,116,0,112,105,0,105,110,116,101,103,114,97,108,0,79,109,101,103,97,0,114,97,100,105,99,97,108,0,97,112,112,114,111,120,101,113,117,97,108,0,68,101,108,116,97,0,110,111,110,98,114,101,97,107,105,110,103,115,112,97,99,101,0,108,111,122,101,110,103,101,0,97,112,112,108,101,0,102,114,97,110,99,0,71,98,114,101,118,101,0,103,98,114,101,118,101,0,73,100,111,116,97,99,99,101,110,116,0,83,99,101,100,105,108,108,97,0,115,99,101,100,105,108,108,97,0,67,97,99,117,116,101,0,99,97,99,117,116,101,0,67,99,97,114,111,110,0,99,99,97,114,111,110,0,100,99,114,111,97,116,0,46,110,111,116,100,101,102,0,115,112,97,99,101,0,101,120,99,108,97,109,0,113,117,111,116,101,100,98,108,0,110,117,109,98,101,114,115,105,103,110,0,100,111,108,108,97,114,0,112,101,114,99,101,110,116,0,97,109,112,101,114,115,97,110,100,0,113,117,111,116,101,114,105,103,104,116,0,112,97,114,101,110,108,101,102,116,0,112,97,114,101,110,114,105,103,104,116,0,97,115,116,101,114,105,115,107,0,112,108,117,115,0,99,111,109,109,97,0,104,121,112,104,101,110,0,112,101,114,105,111,100,0,115,108,97,115,104,0,122,101,114,111,0,111,110,101,0,116,119,111,0,116,104,114,101,101,0,102,111,117,114,0,102,105,118,101,0,115,105,120,0,115,101,118,101,110,0,101,105,103,104,116,0,110,105,110,101,0,99,111,108,111,110,0,115,101,109,105,99,111,108,111,110,0,108,101,115,115,0,101,113,117,97,108,0,103,114,101,97,116,101,114,0,113,117,101,115,116,105,111,110,0,97,116,0,65,0,66,0,67,0,68,0,69,0,70,0,71,0,72,0,73,0,74,0,75,0,76,0,77,0,78,0,79,0,80,0,81,0,82,0,83,0,84,0,85,0,86,0,87,0,88,0,89,0,90,0,98,114,97,99,107,101,116,108,101,102,116,0,98,97,99,107,115,108,97,115,104,0,98,114,97,99,107,101,116,114,105,103,104,116,0,97,115,99,105,105,99,105,114,99,117,109,0,117,110,100,101,114,115,99,111,114,101,0,113,117,111,116,101,108,101,102,116,0,97,0,98,0,99,0,100,0,101,0,102,0,103,0,104,0,105,0,106,0,107,0,108,0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,98,114,97,99,101,108,101,102,116,0,98,97,114,0,98,114,97,99,101,114,105,103,104,116,0,97,115,99,105,105,116,105,108,100,101,0,101,120,99,108,97,109,100,111,119,110,0,99,101,110,116,0,115,116,101,114,108,105,110,103,0,102,114,97,99,116,105,111,110,0,121,101,110,0,102,108,111,114,105,110,0,115,101,99,116,105,111,110,0,99,117,114,114,101,110,99,121,0,113,117,111,116,101,115,105,110,103,108,101,0,113,117,111,116,101,100,98,108,108,101,102,116,0,103,117,105,108,108,101,109,111,116,108,101,102,116,0,103,117,105,108,115,105,110,103,108,108,101,102,116,0,103,117,105,108,115,105,110,103,108,114,105,103,104,116,0,102,105,0,102,108,0,101,110,100,97,115,104,0,100,97,103,103,101,114,0,100,97,103,103,101,114,100,98,108,0,112,101,114,105,111,100,99,101,110,116,101,114,101,100,0,112,97,114,97,103,114,97,112,104,0,98,117,108,108,101,116,0,113,117,111,116,101,115,105,110,103,108,98,97,115,101,0,113,117,111,116,101,100,98,108,98,97,115,101,0,113,117,111,116,101,100,98,108,114,105,103,104,116,0,103,117,105,108,108,101,109,111,116,114,105,103,104,116,0,101,108,108,105,112,115,105,115,0,112,101,114,116,104,111,117,115,97,110,100,0,113,117,101,115,116,105,111,110,100,111,119,110,0,103,114,97,118,101,0,97,99,117,116,101,0,99,105,114,99,117,109,102,108,101,120,0,116,105,108,100,101,0,109,97,99,114,111,110,0,98,114,101,118,101,0,100,111,116,97,99,99,101,110,116,0,100,105,101,114,101,115,105,115,0,114,105,110,103,0,99,101,100,105,108,108,97,0,104,117,110,103,97,114,117,109,108,97,117,116,0,111,103,111,110,101,107,0,99,97,114,111,110,0,101,109,100,97,115,104,0,65,69,0,111,114,100,102,101,109,105,110,105,110,101,0,76,115,108,97,115,104,0,79,115,108,97,115,104,0,79,69,0,111,114,100,109,97,115,99,117,108,105,110,101,0,97,101,0,100,111,116,108,101,115,115,105,0,108,115,108,97,115,104,0,111,115,108,97,115,104,0,111,101,0,103,101,114,109,97,110,100,98,108,115,0,111,110,101,115,117,112,101,114,105,111,114,0,108,111,103,105,99,97,108,110,111,116,0,109,117,0,116,114,97,100,101,109,97,114,107,0,69,116,104,0,111,110,101,104,97,108,102,0,112,108,117,115,109,105,110,117,115,0,84,104,111,114,110,0,111,110,101,113,117,97,114,116,101,114,0,100,105,118,105,100,101,0,98,114,111,107,101,110,98,97,114,0,100,101,103,114,101,101,0,116,104,111,114,110,0,116,104,114,101,101,113,117,97,114,116,101,114,115,0,116,119,111,115,117,112,101,114,105,111,114,0,114,101,103,105,115,116,101,114,101,100,0,109,105,110,117,115,0,101,116,104,0,109,117,108,116,105,112,108,121,0,116,104,114,101,101,115,117,112,101,114,105,111,114,0,99,111,112,121,114,105,103,104,116,0,65,97,99,117,116,101,0,65,99,105,114,99,117,109,102,108,101,120,0,65,100,105,101,114,101,115,105,115,0,65,103,114,97,118,101,0,65,114,105,110,103,0,65,116,105,108,100,101,0,67,99,101,100,105,108,108,97,0,69,97,99,117,116,101,0,69,99,105,114,99,117,109,102,108,101,120,0,69,100,105,101,114,101,115,105,115,0,69,103,114,97,118,101,0,73,97,99,117,116,101,0,73,99,105,114,99,117,109,102,108,101,120,0,73,100,105,101,114,101,115,105,115,0,73,103,114,97,118,101,0,78,116,105,108,100,101,0,79,97,99,117,116,101,0,79,99,105,114,99,117,109,102,108,101,120,0,79,100,105,101,114,101,115,105,115,0,79,103,114,97,118,101,0,79,116,105,108,100,101,0,83,99,97,114,111,110,0,85,97,99,117,116,101,0,85,99,105,114,99,117,109,102,108,101,120,0,85,100,105,101,114,101,115,105,115,0,85,103,114,97,118,101,0,89,97,99,117,116,101,0,89,100,105,101,114,101,115,105,115,0,90,99,97,114,111,110,0,97,97,99,117,116,101,0,97,99,105,114,99,117,109,102,108,101,120,0,97,100,105,101,114,101,115,105,115,0,97,103,114,97,118,101,0,97,114,105,110,103,0,97,116,105,108,100,101,0,99,99,101,100,105,108,108,97,0,101,97,99,117,116,101,0,101,99,105,114,99,117,109,102,108,101,120,0,101,100,105,101,114,101,115,105,115,0,101,103,114,97,118,101,0,105,97,99,117,116,101,0,105,99,105,114,99,117,109,102,108,101,120,0,105,100,105,101,114,101,115,105,115,0,105,103,114,97,118,101,0,110,116,105,108,100,101,0,111,97,99,117,116,101,0,111,99,105,114,99,117,109,102,108,101,120,0,111,100,105,101,114,101,115,105,115,0,111,103,114,97,118,101,0,111,116,105,108,100,101,0,115,99,97,114,111,110,0,117,97,99,117,116,101,0,117,99,105,114,99,117,109,102,108,101,120,0,117,100,105,101,114,101,115,105,115,0,117,103,114,97,118,101,0,121,97,99,117,116,101,0,121,100,105,101,114,101,115,105,115,0,122,99,97,114,111,110,0,101,120,99,108,97,109,115,109,97,108,108,0,72,117,110,103,97,114,117,109,108,97,117,116,115,109,97,108,108,0,100,111,108,108,97,114,111,108,100,115,116,121,108,101,0,100,111,108,108,97,114,115,117,112,101,114,105,111,114,0,97,109,112,101,114,115,97,110,100,115,109,97,108,108,0,65,99,117,116,101,115,109,97,108,108,0,112,97,114,101,110,108,101,102,116,115,117,112,101,114,105,111,114,0,112,97,114,101,110,114,105,103,104,116,115,117,112,101,114,105,111,114,0,116,119,111,100,111,116,101,110,108,101,97,100,101,114,0,111,110,101,100,111,116,101,110,108,101,97,100,101,114,0,122,101,114,111,111,108,100,115,116,121,108,101,0,111,110,101,111,108,100,115,116,121,108,101,0,116,119,111,111,108,100,115,116,121,108,101,0,116,104,114,101,101,111,108,100,115,116,121,108,101,0,102,111,117,114,111,108,100,115,116,121,108,101,0,102,105,118,101,111,108,100,115,116,121,108,101,0,115,105,120,111,108,100,115,116,121,108,101,0,115,101,118,101,110,111,108,100,115,116,121,108,101,0,101,105,103,104,116,111,108,100,115,116,121,108,101,0,110,105,110,101,111,108,100,115,116,121,108,101,0,99,111,109,109,97,115,117,112,101,114,105,111,114,0,116,104,114,101,101,113,117,97,114,116,101,114,115,101,109,100,97,115,104,0,112,101,114,105,111,100,115,117,112,101,114,105,111,114,0,113,117,101,115,116,105,111,110,115,109,97,108,108,0,97,115,117,112,101,114,105,111,114,0,98,115,117,112,101,114,105,111,114,0,99,101,110,116,115,117,112,101,114,105,111,114,0,100,115,117,112,101,114,105,111,114,0,101,115,117,112,101,114,105,111,114,0,105,115,117,112,101,114,105,111,114,0,108,115,117,112,101,114,105,111,114,0,109,115,117,112,101,114,105,111,114,0,110,115,117,112,101,114,105,111,114,0,111,115,117,112,101,114,105,111,114,0,114,115,117,112,101,114,105,111,114,0,115,115,117,112,101,114,105,111,114,0,116,115,117,112,101,114,105,111,114,0,102,102,0,102,102,105,0,102,102,108,0,112,97,114,101,110,108,101,102,116,105,110,102,101,114,105,111,114,0,112,97,114,101,110,114,105,103,104,116,105,110,102,101,114,105,111,114,0,67,105,114,99,117,109,102,108,101,120,115,109,97,108,108,0,104,121,112,104,101,110,115,117,112,101,114,105,111,114,0,71,114,97,118,101,115,109,97,108,108,0,65,115,109,97,108,108,0,66,115,109,97,108,108,0,67,115,109,97,108,108,0,68,115,109,97,108,108,0,69,115,109,97,108,108,0,70,115,109,97,108,108,0,71,115,109,97,108,108,0,72,115,109,97,108,108,0,73,115,109,97,108,108,0,74,115,109,97,108,108,0,75,115,109,97,108,108,0,76,115,109,97,108,108,0,77,115,109,97,108,108,0,78,115,109,97,108,108,0,79,115,109,97,108,108,0,80,115,109,97,108,108,0,81,115,109,97,108,108,0,82,115,109,97,108,108,0,83,115,109,97,108,108,0,84,115,109,97,108,108,0,85,115,109,97,108,108,0,86,115,109,97,108,108,0,87,115,109,97,108,108,0,88,115,109,97,108,108,0,89,115,109,97,108,108,0,90,115,109,97,108,108], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20481);
/* memory initializer */ allocate([99,111,108,111,110,109,111,110,101,116,97,114,121,0,111,110,101,102,105,116,116,101,100,0,114,117,112,105,97,104,0,84,105,108,100,101,115,109,97,108,108,0,101,120,99,108,97,109,100,111,119,110,115,109,97,108,108,0,99,101,110,116,111,108,100,115,116,121,108,101,0,76,115,108,97,115,104,115,109,97,108,108,0,83,99,97,114,111,110,115,109,97,108,108,0,90,99,97,114,111,110,115,109,97,108,108,0,68,105,101,114,101,115,105,115,115,109,97,108,108,0,66,114,101,118,101,115,109,97,108,108,0,67,97,114,111,110,115,109,97,108,108,0,68,111,116,97,99,99,101,110,116,115,109,97,108,108,0,77,97,99,114,111,110,115,109,97,108,108,0,102,105,103,117,114,101,100,97,115,104,0,104,121,112,104,101,110,105,110,102,101,114,105,111,114,0,79,103,111,110,101,107,115,109,97,108,108,0,82,105,110,103,115,109,97,108,108,0,67,101,100,105,108,108,97,115,109,97,108,108,0,113,117,101,115,116,105,111,110,100,111,119,110,115,109,97,108,108,0,111,110,101,101,105,103,104,116,104,0,116,104,114,101,101,101,105,103,104,116,104,115,0,102,105,118,101,101,105,103,104,116,104,115,0,115,101,118,101,110,101,105,103,104,116,104,115,0,111,110,101,116,104,105,114,100,0,116,119,111,116,104,105,114,100,115,0,122,101,114,111,115,117,112,101,114,105,111,114,0,102,111,117,114,115,117,112,101,114,105,111,114,0,102,105,118,101,115,117,112,101,114,105,111,114,0,115,105,120,115,117,112,101,114,105,111,114,0,115,101,118,101,110,115,117,112,101,114,105,111,114,0,101,105,103,104,116,115,117,112,101,114,105,111,114,0,110,105,110,101,115,117,112,101,114,105,111,114,0,122,101,114,111,105,110,102,101,114,105,111,114,0,111,110,101,105,110,102,101,114,105,111,114,0,116,119,111,105,110,102,101,114,105,111,114,0,116,104,114,101,101,105,110,102,101,114,105,111,114,0,102,111,117,114,105,110,102,101,114,105,111,114,0,102,105,118,101,105,110,102,101,114,105,111,114,0,115,105,120,105,110,102,101,114,105,111,114,0,115,101,118,101,110,105,110,102,101,114,105,111,114,0,101,105,103,104,116,105,110,102,101,114,105,111,114,0,110,105,110,101,105,110,102,101,114,105,111,114,0,99,101,110,116,105,110,102,101,114,105,111,114,0,100,111,108,108,97,114,105,110,102,101,114,105,111,114,0,112,101,114,105,111,100,105,110,102,101,114,105,111,114,0,99,111,109,109,97,105,110,102,101,114,105,111,114,0,65,103,114,97,118,101,115,109,97,108,108,0,65,97,99,117,116,101,115,109,97,108,108,0,65,99,105,114,99,117,109,102,108,101,120,115,109,97,108,108,0,65,116,105,108,100,101,115,109,97,108,108,0,65,100,105,101,114,101,115,105,115,115,109,97,108,108,0,65,114,105,110,103,115,109,97,108,108,0,65,69,115,109,97,108,108,0,67,99,101,100,105,108,108,97,115,109,97,108,108,0,69,103,114,97,118,101,115,109,97,108,108,0,69,97,99,117,116,101,115,109,97,108,108,0,69,99,105,114,99,117,109,102,108,101,120,115,109,97,108,108,0,69,100,105,101,114,101,115,105,115,115,109,97,108,108,0,73,103,114,97,118,101,115,109,97,108,108,0,73,97,99,117,116,101,115,109,97,108,108,0,73,99,105,114,99,117,109,102,108,101,120,115,109,97,108,108,0,73,100,105,101,114,101,115,105,115,115,109,97,108,108,0,69,116,104,115,109,97,108,108,0,78,116,105,108,100,101,115,109,97,108,108,0,79,103,114,97,118,101,115,109,97,108,108,0,79,97,99,117,116,101,115,109,97,108,108,0,79,99,105,114,99,117,109,102,108,101,120,115,109,97,108,108,0,79,116,105,108,100,101,115,109,97,108,108,0,79,100,105,101,114,101,115,105,115,115,109,97,108,108,0,79,69,115,109,97,108,108,0,79,115,108,97,115,104,115,109,97,108,108,0,85,103,114,97,118,101,115,109,97,108,108,0,85,97,99,117,116,101,115,109,97,108,108,0,85,99,105,114,99,117,109,102,108,101,120,115,109,97,108,108,0,85,100,105,101,114,101,115,105,115,115,109,97,108,108,0,89,97,99,117,116,101,115,109,97,108,108,0,84,104,111,114,110,115,109,97,108,108,0,89,100,105,101,114,101,115,105,115,115,109,97,108,108,0,48,48,49,46,48,48,48,0,48,48,49,46,48,48,49,0,48,48,49,46,48,48,50,0,48,48,49,46,48,48,51,0,66,108,97,99,107,0,66,111,108,100,0,66,111,111,107,0,76,105,103,104,116,0,77,101,100,105,117,109,0,82,101,103,117,108,97,114,0,82,111,109,97,110,0,83,101,109,105,98,111,108,100,0,68,101,108,116,97,0,79,109,101,103,97,0,102,114,97,99,116,105,111,110,0,104,121,112,104,101,110,0,109,97,99,114,111,110,0,109,117,0,112,101,114,105,111,100,99,101,110,116,101,114,101,100,0,115,112,97,99,101,0,84,99,111,109,109,97,97,99,99,101,110,116,0,116,99,111,109,109,97,97,99,99,101,110,116,0,0,52,0,106,2,167,3,63,4,220,6,125,9,143,10,23,11,137,12,199,14,246,15,87,16,233,17,219,18,104,19,88,22,110,23,32,23,71,24,77,27,156,29,73,31,247,32,107,32,222,33,55,34,154,35,218,58,10,64,122,72,188,80,109,88,104,93,61,98,168,106,91,114,111,115,237,122,180,127,255,135,164,143,132,149,213,158,108,161,115,168,175,183,147,197,199,202,25,204,166,208,209,209,81,215,26,65,143,0,65,0,140,0,175,0,193,1,15,1,147,1,233,1,251,2,7,2,40,2,57,2,82,2,91,2,128,2,136,2,154,69,131,0,198,0,150,0,158,0,167,225,227,245,244,101,128,1,252,237,225,227,242,239,110,128,1,226,243,237,225,236,108,128,247,230,225,227,245,244,101,129,0,193,0,185,243,237,225,236,108,128,247,225,226,242,229,246,101,134,1,2,0,213,0,221,0,232,0,243,0,251,1,7,225,227,245,244,101,128,30,174,227,249,242,233,236,236,233,99,128,4,208,228,239,244,226,229,236,239,119,128,30,182,231,242,225,246,101,128,30,176,232,239,239,235,225,226,239,246,101,128,30,178,244,233,236,228,101,128,30,180,99,4,1,25,1,32,1,121,1,137,225,242,239,110,128,1,205,233,242,99,2,1,40,1,45,236,101,128,36,182,245,237,230,236,229,120,134,0,194,1,66,1,74,1,85,1,93,1,105,1,113,225,227,245,244,101,128,30,164,228,239,244,226,229,236,239,119,128,30,172,231,242,225,246,101,128,30,166,232,239,239,235,225,226,239,246,101,128,30,168,243,237,225,236,108,128,247,226,244,233,236,228,101,128,30,170,245,244,101,129,246,201,1,129,243,237,225,236,108,128,247,180,249,242,233,236,236,233,99,128,4,16,100,3,1,155,1,165,1,209,226,236,231,242,225,246,101,128,2,0,233,229,242,229,243,233,115,131,0,196,1,181,1,192,1,201,227,249,242,233,236,236,233,99,128,4,210,237,225,227,242,239,110,128,1,222,243,237,225,236,108,128,247,228,239,116,2,1,216,1,224,226,229,236,239,119,128,30,160,237,225,227,242,239,110,128,1,224,231,242,225,246,101,129,0,192,1,243,243,237,225,236,108,128,247,224,232,239,239,235,225,226,239,246,101,128,30,162,105,2,2,13,2,25,229,227,249,242,233,236,236,233,99,128,4,212,238,246,229,242,244,229,228,226,242,229,246,101,128,2,2,236,240,232,97,129,3,145,2,49,244,239,238,239,115,128,3,134,109,2,2,63,2,71,225,227,242,239,110,128,1,0,239,238,239,243,240,225,227,101,128,255,33,239,231,239,238,229,107,128,1,4,242,233,238,103,131,0,197,2,104,2,112,2,120,225,227,245,244,101,128,1,250,226,229,236,239,119,128,30,0,243,237,225,236,108,128,247,229,243,237,225,236,108,128,247,97,244,233,236,228,101,129,0,195,2,146,243,237,225,236,108,128,247,227,249,226,225,242,237,229,238,233,225,110,128,5,49,66,137,0,66,2,189,2,198,2,223,3,3,3,10,3,22,3,34,3,46,3,54,227,233,242,227,236,101,128,36,183,228,239,116,2,2,206,2,215,225,227,227,229,238,116,128,30,2,226,229,236,239,119,128,30,4,101,3,2,231,2,242,2,254,227,249,242,233,236,236,233,99,128,4,17,238,225,242,237,229,238,233,225,110,128,5,50,244,97,128,3,146,232,239,239,107,128,1,129,236,233,238,229,226,229,236,239,119,128,30,6,237,239,238,239,243,240,225,227,101,128,255,34,242,229,246,229,243,237,225,236,108,128,246,244,243,237,225,236,108,128,247,98,244,239,240,226,225,114,128,1,130,67,137,0,67,3,85,3,127,3,193,3,210,3,224,4,171,4,188,4,200,4,212,97,3,3,93,3,104,3,111,225,242,237,229,238,233,225,110,128,5,62,227,245,244,101,128,1,6,242,239,110,129,246,202,3,119,243,237,225,236,108,128,246,245,99,3,3,135,3,142,3,171,225,242,239,110,128,1,12,229,228,233,236,236,97,130,0,199,3,155,3,163,225,227,245,244,101,128,30,8,243,237,225,236,108,128,247,231,233,242,99,2,3,179,3,184,236,101,128,36,184,245,237,230,236,229,120,128,1,8,228,239,116,129,1,10,3,201,225,227,227,229,238,116,128,1,10,229,228,233,236,236,225,243,237,225,236,108,128,247,184,104,4,3,234,3,246,4,161,4,165,225,225,242,237,229,238,233,225,110,128,5,73,101,6,4,4,4,24,4,35,4,103,4,115,4,136,225,226,235,232,225,243,233,225,238,227,249,242,233,236,236,233,99,128,4,188,227,249,242,233,236,236,233,99,128,4,39,100,2,4,41,4,85,229,243,227,229,238,228,229,114,2,4,54,4,74,225,226,235,232,225,243,233,225,238,227,249,242,233,236,236,233,99,128,4,190,227,249,242,233,236,236,233,99,128,4,182,233,229,242,229,243,233,243,227,249,242,233,236,236,233,99,128,4,244,232,225,242,237,229,238,233,225,110,128,5,67,235,232,225,235,225,243,243,233,225,238,227,249,242,233,236,236,233,99,128,4,203,246,229,242,244,233,227,225,236,243,244,242,239,235,229,227,249,242,233,236,236,233,99,128,4,184,105,128,3,167,239,239,107,128,1,135,233,242,227,245,237,230,236,229,248,243,237,225,236,108,128,246,246,237,239,238,239,243,240,225,227,101,128,255,35,239,225,242,237,229,238,233,225,110,128,5,81,243,237,225,236,108,128,247,99,68,142,0,68,4,252,5,10,5,36,5,96,5,121,5,166,5,173,5,231,5,244,6,0,6,12,6,28,6,48,6,57,90,129,1,241,5,2,227,225,242,239,110,128,1,196,97,2,5,16,5,27,225,242,237,229,238,233,225,110,128,5,52,230,242,233,227,225,110,128,1,137,99,4,5,46,5,53,5,62,5,89,225,242,239,110,128,1,14,229,228,233,236,236,97,128,30,16,233,242,99,2,5,70,5,75,236,101,128,36,185,245,237,230,236,229,248,226,229,236,239,119,128,30,18,242,239,225,116,128,1,16,228,239,116,2,5,104,5,113,225,227,227,229,238,116,128,30,10,226,229,236,239,119,128,30,12,101,3,5,129,5,140,5,150,227,249,242,233,236,236,233,99,128,4,20,233,227,239,240,244,233,99,128,3,238,236,244,97,129,34,6,5,158,231,242,229,229,107,128,3,148,232,239,239,107,128,1,138,105,2,5,179,5,218,229,242,229,243,233,115,131,246,203,5,194,5,202,5,210,193,227,245,244,101,128,246,204,199,242,225,246,101,128,246,205,243,237,225,236,108,128,247,168,231,225,237,237,225,231,242,229,229,107,128,3,220,234,229,227,249,242,233,236,236,233,99,128,4,2,236,233,238,229,226,229,236,239,119,128,30,14,237,239,238,239,243,240,225,227,101,128,255,36,239,244,225,227,227,229,238,244,243,237,225,236,108,128,246,247,115,2,6,34,6,41,236,225,243,104,128,1,16,237,225,236,108,128,247,100,244,239,240,226,225,114,128,1,139,122,131,1,242,6,67,6,75,6,112,227,225,242,239,110,128,1,197,101,2,6,81,6,101,225,226,235,232,225,243,233,225,238,227,249,242,233,236,236,233,99,128,4,224,227,249,242,233,236,236,233,99,128,4,5,232,229,227,249,242,233,236,236,233,99,128,4,15,69,146,0,69,6,165,6,183,6,191,7,89,7,153,7,165,7,183,7,211,8,7,8,36,8,94,8,169,8,189,8,208,8,248,9,44,9,109,9,115,225,227,245,244,101,129,0,201,6,175,243,237,225,236,108,128,247,233,226,242,229,246,101,128,1,20,99,5,6,203,6,210,6,224,6,236,7,79,225,242,239,110,128,1,26,229,228,233,236,236,225,226,242,229,246,101,128,30,28,232,225,242,237,229,238,233,225,110,128,5,53,233,242,99,2,6,244,6,249,236,101,128,36,186,245,237,230,236,229,120,135,0,202,7,16,7,24,7,32,7,43,7,51,7,63,7,71,225,227,245,244,101,128,30,190,226,229,236,239,119,128,30,24,228,239,244,226,229,236,239,119,128,30,198,231,242,225,246,101,128,30,192,232,239,239,235,225,226,239,246,101,128,30,194,243,237,225,236,108,128,247,234,244,233,236,228,101,128,30,196,249,242,233,236,236,233,99,128,4,4,100,3,7,97,7,107,7,127,226,236,231,242,225,246,101,128,2,4,233,229,242,229,243,233,115,129,0,203,7,119,243,237,225,236,108,128,247,235,239,116,130,1,22,7,136,7,145,225,227,227,229,238,116,128,1,22,226,229,236,239,119,128,30,184,230,227,249,242,233,236,236,233,99,128,4,36,231,242,225,246,101,129,0,200,7,175,243,237,225,236,108,128,247,232,104,2,7,189,7,200,225,242,237,229,238,233,225,110,128,5,55,239,239,235,225,226,239,246,101,128,30,186,105,3,7,219,7,230,7,245,231,232,244,242,239,237,225,110,128,33,103,238,246,229,242,244,229,228,226,242,229,246,101,128,2,6,239,244,233,230,233,229,228,227,249,242,233,236,236,233,99,128,4,100,108,2,8,13,8,24,227,249,242,233,236,236,233,99,128,4,27,229,246,229,238,242,239,237,225,110,128,33,106,109,3,8,44,8,72,8,83,225,227,242,239,110,130,1,18,8,56,8,64,225,227,245,244,101,128,30,22,231,242,225,246,101,128,30,20,227,249,242,233,236,236,233,99,128,4,28,239,238,239,243,240,225,227,101,128,255,37,110,4,8,104,8,115,8,135,8,154,227,249,242,233,236,236,233,99,128,4,29,228,229,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,162,103,129,1,74,8,141,232,229,227,249,242,233,236,236,233,99,128,4,164,232,239,239,235,227,249,242,233,236,236,233,99,128,4,199,111,2,8,175,8,183,231,239,238,229,107,128,1,24,240,229,110,128,1,144,240,243,233,236,239,110,129,3,149,8,200,244,239,238,239,115,128,3,136,114,2,8,214,8,225,227,249,242,233,236,236,233,99,128,4,32,229,246,229,242,243,229,100,129,1,142,8,237,227,249,242,233,236,236,233,99,128,4,45,115,4,9,2,9,13,9,33,9,37,227,249,242,233,236,236,233,99,128,4,33,228,229,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,170,104,128,1,169,237,225,236,108,128,247,101,116,3,9,52,9,78,9,92,97,130,3,151,9,60,9,70,242,237,229,238,233,225,110,128,5,56,244,239,238,239,115,128,3,137,104,129,0,208,9,84,243,237,225,236,108,128,247,240,233,236,228,101,129,30,188,9,101,226,229,236,239,119,128,30,26,245,242,111,128,32,172,250,104,130,1,183,9,124,9,132,227,225,242,239,110,128,1,238,242,229,246,229,242,243,229,100,128,1,184,70,136,0,70,9,163,9,172,9,184,9,212,9,219,9,248,10,4,10,15,227,233,242,227,236,101,128,36,187,228,239,244,225,227,227,229,238,116,128,30,30,101,2,9,190,9,202,232,225,242,237,229,238,233,225,110,128,5,86,233,227,239,240,244,233,99,128,3,228,232,239,239,107,128,1,145,105,2,9,225,9,238,244,225,227,249,242,233,236,236,233,99,128,4,114,246,229,242,239,237,225,110,128,33,100,237,239,238,239,243,240,225,227,101,128,255,38,239,245,242,242,239,237,225,110,128,33,99,243,237,225,236,108,128,247,102,71,140,0,71,10,51,10,61,10,107,10,115,10,176,10,193,10,205,11,39,11,52,11,65,11,90,11,107,194,243,241,245,225,242,101,128,51,135,97,3,10,69,10,76,10,94,227,245,244,101,128,1,244,237,237,97,129,3,147,10,84,225,230,242,233,227,225,110,128,1,148,238,231,233,225,227,239,240,244,233,99,128,3,234,226,242,229,246,101,128,1,30,99,4,10,125,10,132,10,141,10,163,225,242,239,110,128,1,230,229,228,233,236,236,97,128,1,34,233,242,99,2,10,149,10,154,236,101,128,36,188,245,237,230,236,229,120,128,1,28,239,237,237,225,225,227,227,229,238,116,128,1,34,228,239,116,129,1,32,10,184,225,227,227,229,238,116,128,1,32,229,227,249,242,233,236,236,233,99,128,4,19,104,3,10,213,10,226,11,33,225,228,225,242,237,229,238,233,225,110,128,5,66,101,3,10,234,10,255,11,16,237,233,228,228,236,229,232,239,239,235,227,249,242,233,236,236,233,99,128,4,148,243,244,242,239,235,229,227,249,242,233,236,236,233,99,128,4,146,245,240,244,245,242,238,227,249,242,233,236,236,233,99,128,4,144,239,239,107,128,1,147,233,237,225,242,237,229,238,233,225,110,128,5,51,234,229,227,249,242,233,236,236,233,99,128,4,3,109,2,11,71,11,79,225,227,242,239,110,128,30,32,239,238,239,243,240,225,227,101,128,255,39,242,225,246,101,129,246,206,11,99,243,237,225,236,108,128,247,96,115,2,11,113,11,129,237,225,236,108,129,247,103,11,122,232,239,239,107,128,2,155,244,242,239,235,101,128,1,228,72,140,0,72,11,165,11,190,11,198,11,208,12,17,12,40,12,77,12,117,12,129,12,157,12,165,12,189,177,184,53,3,11,175,11,180,11,185,179,51,128,37,207,180,51,128,37,170,181,49,128,37,171,178,178,176,183,51,128,37,161,208,243,241,245,225,242,101,128,51,203,97,3,11,216,11,236,12,0,225,226,235,232,225,243,233,225,238,227,249,242,233,236,236,233,99,128,4,168,228,229,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,178,242,228,243,233,231,238,227,249,242,233,236,236,233,99,128,4,42,98,2,12,23,12,28,225,114,128,1,38,242,229,246,229,226,229,236,239,119,128,30,42,99,2,12,46,12,55,229,228,233,236,236,97,128,30,40,233,242,99,2,12,63,12,68,236,101,128,36,189,245,237,230,236,229,120,128,1,36,100,2,12,83,12,93,233,229,242,229,243,233,115,128,30,38,239,116,2,12,100,12,109,225,227,227,229,238,116,128,30,34,226,229,236,239,119,128,30,36,237,239,238,239,243,240,225,227,101,128,255,40,111,2,12,135,12,146,225,242,237,229,238,233,225,110,128,5,64,242,233,227,239,240,244,233,99,128,3,232,243,237,225,236,108,128,247,104,245,238,231,225,242,245,237,236,225,245,116,129,246,207,12,181,243,237,225,236,108,128,246,248,250,243,241,245,225,242,101,128,51,144,73,146,0,73,12,239,12,251,12,255,13,11,13,29,13,37,13,94,13,181,13,214,13,224,13,242,13,254,14,48,14,86,14,99,14,166,14,187,14,205,193,227,249,242,233,236,236,233,99,128,4,47,74,128,1,50,213,227,249,242,233,236,236,233,99,128,4,46,225,227,245,244,101,129,0,205,13,21,243,237,225,236,108,128,247,237,226,242,229,246,101,128,1,44,99,3,13,45,13,52,13,84,225,242,239,110,128,1,207,233,242,99,2,13,60,13,65,236,101,128,36,190,245,237,230,236,229,120,129,0,206,13,76,243,237,225,236,108,128,247,238,249,242,233,236,236,233,99,128,4,6,100,3,13,102,13,112,13,155,226,236,231,242,225,246,101,128,2,8,233,229,242,229,243,233,115,131,0,207,13,128,13,136,13,147,225,227,245,244,101,128,30,46,227,249,242,233,236,236,233,99,128,4,228,243,237,225,236,108,128,247,239,239,116,130,1,48,13,164,13,173,225,227,227,229,238,116,128,1,48,226,229,236,239,119,128,30,202,101,2,13,187,13,203,226,242,229,246,229,227,249,242,233,236,236,233,99,128,4,214,227,249,242,233,236,236,233,99,128,4,21,230,242,225,235,244,245,114,128,33,17,231,242,225,246,101,129,0,204,13,234,243,237,225,236,108,128,247,236,232,239,239,235,225,226,239,246,101,128,30,200,105,3,14,6,14,17,14,32,227,249,242,233,236,236,233,99,128,4,24,238,246,229,242,244,229,228,226,242,229,246,101,128,2,10,243,232,239,242,244,227,249,242,233,236,236,233,99,128,4,25,109,2,14,54,14,75,225,227,242,239,110,129,1,42,14,64,227,249,242,233,236,236,233,99,128,4,226,239,238,239,243,240,225,227,101,128,255,41,238,233,225,242,237,229,238,233,225,110,128,5,59,111,3,14,107,14,118,14,126,227,249,242,233,236,236,233,99,128,4,1,231,239,238,229,107,128,1,46,244,97,131,3,153,14,137,14,147,14,158,225,230,242,233,227,225,110,128,1,150,228,233,229,242,229,243,233,115,128,3,170,244,239,238,239,115,128,3,138,115,2,14,172,14,179,237,225,236,108,128,247,105,244,242,239,235,101,128,1,151,244,233,236,228,101,129,1,40,14,197,226,229,236,239,119,128,30,44,250,232,233,244,243,97,2,14,216,14,227,227,249,242,233,236,236,233,99,128,4,116,228,226,236,231,242,225,246,229,227,249,242,233,236,236,233,99,128,4,118,74,134,0,74,15,6,15,18,15,41,15,53,15,67,15,79,225,225,242,237,229,238,233,225,110,128,5,65,227,233,242,99,2,15,27,15,32,236,101,128,36,191,245,237,230,236,229,120,128,1,52,229,227,249,242,233,236,236,233,99,128,4,8,232,229,232,225,242,237,229,238,233,225,110,128,5,75,237,239,238,239,243,240,225,227,101,128,255,42,243,237,225,236,108,128,247,106,75,140,0,75,15,115,15,125,15,135,16,18,16,65,16,76,16,106,16,143,16,156,16,168,16,180,16,208,194,243,241,245,225,242,101,128,51,133,203,243,241,245,225,242,101,128,51,205,97,7,15,151,15,169,15,191,15,211,15,226,15,232,15,249,226,225,243,232,235,233,242,227,249,242,233,236,236,233,99,128,4,160,99,2,15,175,15,181,245,244,101,128,30,48,249,242,233,236,236,233,99,128,4,26,228,229,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,154,232,239,239,235,227,249,242,233,236,236,233,99,128,4,195,240,240,97,128,3,154,243,244,242,239,235,229,227,249,242,233,236,236,233,99,128,4,158,246,229,242,244,233,227,225,236,243,244,242,239,235,229,227,249,242,233,236,236,233,99,128,4,156,99,4,16,28,16,35,16,44,16,52,225,242,239,110,128,1,232,229,228,233,236,236,97,128,1,54,233,242,227,236,101,128,36,192,239,237,237,225,225,227,227,229,238,116,128,1,54,228,239,244,226,229,236,239,119,128,30,50,101,2,16,82,16,94,232,225,242,237,229,238,233,225,110,128,5,84,238,225,242,237,229,238,233,225,110,128,5,63,104,3,16,114,16,126,16,137,225,227,249,242,233,236,236,233,99,128,4,37,229,233,227,239,240,244,233,99,128,3,230,239,239,107,128,1,152,234,229,227,249,242,233,236,236,233,99,128,4,12,236,233,238,229,226,229,236,239,119,128,30,52,237,239,238,239,243,240,225,227,101,128,255,43,239,240,240,97,2,16,189,16,200,227,249,242,233,236,236,233,99,128,4,128,231,242,229,229,107,128,3,222,115,2,16,214,16,226,233,227,249,242,233,236,236,233,99,128,4,110,237,225,236,108,128,247,107,76,138,0,76,17,1,17,5,17,9,17,29,17,95,17,133,17,147,17,165,17,177,17,189,74,128,1,199,76,128,246,191,97,2,17,15,17,22,227,245,244,101,128,1,57,237,226,228,97,128,3,155,99,4,17,39,17,46,17,55,17,82,225,242,239,110,128,1,61,229,228,233,236,236,97,128,1,59,233,242,99,2,17,63,17,68,236,101,128,36,193,245,237,230,236,229,248,226,229,236,239,119,128,30,60,239,237,237,225,225,227,227,229,238,116,128,1,59,228,239,116,130,1,63,17,105,17,114,225,227,227,229,238,116,128,1,63,226,229,236,239,119,129,30,54,17,124,237,225,227,242,239,110,128,30,56,233,247,238,225,242,237,229,238,233,225,110,128,5,60,106,129,1,200,17,153,229,227,249,242,233,236,236,233,99,128,4,9,236,233,238,229,226,229,236,239,119,128,30,58,237,239,238,239,243,240,225,227,101,128,255,44,115,2,17,195,17,212,236,225,243,104,129,1,65,17,204,243,237,225,236,108,128,246,249,237,225,236,108,128,247,108,77,137,0,77,17,241,17,251,18,24,18,33,18,58,18,71,18,83,18,91,18,100,194,243,241,245,225,242,101,128,51,134,225,99,2,18,2,18,18,242,239,110,129,246,208,18,10,243,237,225,236,108,128,247,175,245,244,101,128,30,62,227,233,242,227,236,101,128,36,194,228,239,116,2,18,41,18,50,225,227,227,229,238,116,128,30,64,226,229,236,239,119,128,30,66,229,238,225,242,237,229,238,233,225,110,128,5,68,237,239,238,239,243,240,225,227,101,128,255,45,243,237,225,236,108,128,247,109,244,245,242,238,229,100,128,1,156,117,128,3,156,78,141,0,78,18,134,18,138,18,146,18,212,18,237,18,248,19,3,19,21,19,33,19,45,19,58,19,66,19,84,74,128,1,202,225,227,245,244,101,128,1,67,99,4,18,156,18,163,18,172,18,199,225,242,239,110,128,1,71,229,228,233,236,236,97,128,1,69,233,242,99,2,18,180,18,185,236,101,128,36,195,245,237,230,236,229,248,226,229,236,239,119,128,30,74,239,237,237,225,225,227,227,229,238,116,128,1,69,228,239,116,2,18,220,18,229,225,227,227,229,238,116,128,30,68,226,229,236,239,119,128,30,70,232,239,239,235,236,229,230,116,128,1,157,233,238,229,242,239,237,225,110,128,33,104,106,129,1,203,19,9,229,227,249,242,233,236,236,233,99,128,4,10,236,233,238,229,226,229,236,239,119,128,30,72,237,239,238,239,243,240,225,227,101,128,255,46,239,247,225,242,237,229,238,233,225,110,128,5,70,243,237,225,236,108,128,247,110,244,233,236,228,101,129,0,209,19,76,243,237,225,236,108,128,247,241,117,128,3,157,79,141,0,79,19,118,19,132,19,150,19,203,20,78,20,152,20,187,21,48,21,69,21,213,21,223,21,254,22,53,69,129,1,82,19,124,243,237,225,236,108,128,246,250,225,227,245,244,101,129,0,211,19,142,243,237,225,236,108,128,247,243,98,2,19,156,19,196,225,242,242,229,100,2,19,166,19,177,227,249,242,233,236,236,233,99,128,4,232,228,233,229,242,229,243,233,243,227,249,242,233,236,236,233,99,128,4,234,242,229,246,101,128,1,78,99,4,19,213,19,220,19,235,20,68,225,242,239,110,128,1,209,229,238,244,229,242,229,228,244,233,236,228,101,128,1,159,233,242,99,2,19,243,19,248,236,101,128,36,196,245,237,230,236,229,120,134,0,212,20,13,20,21,20,32,20,40,20,52,20,60,225,227,245,244,101,128,30,208,228,239,244,226,229,236,239,119,128,30,216,231,242,225,246,101,128,30,210,232,239,239,235,225,226,239,246,101,128,30,212,243,237,225,236,108,128,247,244,244,233,236,228,101,128,30,214,249,242,233,236,236,233,99,128,4,30,100,3,20,86,20,109,20,142,226,108,2,20,93,20,101,225,227,245,244,101,128,1,80,231,242,225,246,101,128,2,12,233,229,242,229,243,233,115,130,0,214,20,123,20,134,227,249,242,233,236,236,233,99,128,4,230,243,237,225,236,108,128,247,246,239,244,226,229,236,239,119,128,30,204,103,2,20,158,20,170,239,238,229,235,243,237,225,236,108,128,246,251,242,225,246,101,129,0,210,20,179,243,237,225,236,108,128,247,242,104,4,20,197,20,208,20,212,21,34,225,242,237,229,238,233,225,110,128,5,85,109,128,33,38,111,2,20,218,20,228,239,235,225,226,239,246,101,128,30,206,242,110,133,1,160,20,243,20,251,21,6,21,14,21,26,225,227,245,244,101,128,30,218,228,239,244,226,229,236,239,119,128,30,226,231,242,225,246,101,128,30,220,232,239,239,235,225,226,239,246,101,128,30,222,244,233,236,228,101,128,30,224,245,238,231,225,242,245,237,236,225,245,116,128,1,80,105,129,1,162,21,54,238,246,229,242,244,229,228,226,242,229,246,101,128,2,14,109,4,21,79,21,107,21,184,21,202,225,227,242,239,110,130,1,76,21,91,21,99,225,227,245,244,101,128,30,82,231,242,225,246,101,128,30,80,229,231,97,132,33,38,21,121,21,132,21,140,21,156,227,249,242,233,236,236,233,99,128,4,96,231,242,229,229,107,128,3,169,242,239,245,238,228,227,249,242,233,236,236,233,99,128,4,122,116,2,21,162,21,177,233,244,236,239,227,249,242,233,236,236,233,99,128,4,124,239,238,239,115,128,3,143,233,227,242,239,110,129,3,159,21,194,244,239,238,239,115,128,3,140,239,238,239,243,240,225,227,101,128,255,47,238,229,242,239,237,225,110,128,33,96,111,2,21,229,21,248,231,239,238,229,107,129,1,234,21,239,237,225,227,242,239,110,128,1,236,240,229,110,128,1,134,115,3,22,6,22,33,22,40,236,225,243,104,130,0,216,22,17,22,25,225,227,245,244,101,128,1,254,243,237,225,236,108,128,247,248,237,225,236,108,128,247,111,244,242,239,235,229,225,227,245,244,101,128,1,254,116,2,22,59,22,70,227,249,242,233,236,236,233,99,128,4,126,233,236,228,101,131,0,213,22,83,22,91,22,102,225,227,245,244,101,128,30,76,228,233,229,242,229,243,233,115,128,30,78,243,237,225,236,108,128,247,245,80,136,0,80,22,130,22,138,22,147,22,159,22,211,22,227,22,246,23,2,225,227,245,244,101,128,30,84,227,233,242,227,236,101,128,36,197,228,239,244,225,227,227,229,238,116,128,30,86,101,3,22,167,22,178,22,190,227,249,242,233,236,236,233,99,128,4,31,232,225,242,237,229,238,233,225,110,128,5,74,237,233,228,228,236,229,232,239,239,235,227,249,242,233,236,236,233,99,128,4,166,104,2,22,217,22,221,105,128,3,166,239,239,107,128,1,164,105,129,3,160,22,233,247,242,225,242,237,229,238,233,225,110,128,5,83,237,239,238,239,243,240,225,227,101,128,255,48,115,2,23,8,23,25,105,129,3,168,23,14,227,249,242,233,236,236,233,99,128,4,112,237,225,236,108,128,247,112,81,131,0,81,23,42,23,51,23,63,227,233,242,227,236,101,128,36,198,237,239,238,239,243,240,225,227,101,128,255,49,243,237,225,236,108,128,247,113,82,138,0,82,23,95,23,119,23,166,23,217,23,230,23,240,23,245,24,19,24,31,24,43,97,2,23,101,23,112,225,242,237,229,238,233,225,110,128,5,76,227,245,244,101,128,1,84,99,4,23,129,23,136,23,145,23,153,225,242,239,110,128,1,88,229,228,233,236,236,97,128,1,86,233,242,227,236,101,128,36,199,239,237,237,225,225,227,227,229,238,116,128,1,86,100,2,23,172,23,182,226,236,231,242,225,246,101,128,2,16,239,116,2,23,189,23,198,225,227,227,229,238,116,128,30,88,226,229,236,239,119,129,30,90,23,208,237,225,227,242,239,110,128,30,92,229,232,225,242,237,229,238,233,225,110,128,5,80,230,242,225,235,244,245,114,128,33,28,232,111,128,3,161,233,110,2,23,252,24,5,231,243,237,225,236,108,128,246,252,246,229,242,244,229,228,226,242,229,246,101,128,2,18,236,233,238,229,226,229,236,239,119,128,30,94,237,239,238,239,243,240,225,227,101,128,255,50,243,237,225,236,108,129,247,114,24,53,233,238,246,229,242,244,229,100,129,2,129,24,66,243,245,240,229,242,233,239,114,128,2,182,83,139,0,83,24,103,26,17,26,55,26,182,26,221,26,250,27,84,27,105,27,117,27,135,27,143,70,6,24,117,24,209,24,241,25,77,25,119,25,221,48,9,24,137,24,145,24,153,24,161,24,169,24,177,24,185,24,193,24,201,177,176,176,176,48,128,37,12,178,176,176,176,48,128,37,20,179,176,176,176,48,128,37,16,180,176,176,176,48,128,37,24,181,176,176,176,48,128,37,60,182,176,176,176,48,128,37,44,183,176,176,176,48,128,37,52,184,176,176,176,48,128,37,28,185,176,176,176,48,128,37,36,49,3,24,217,24,225,24,233,176,176,176,176,48,128,37,0,177,176,176,176,48,128,37,2,185,176,176,176,48,128,37,97,50,9,25,5,25,13,25,21,25,29,25,37,25,45,25,53,25,61,25,69,176,176,176,176,48,128,37,98,177,176,176,176,48,128,37,86,178,176,176,176,48,128,37,85,179,176,176,176,48,128,37,99,180,176,176,176,48,128,37,81,181,176,176,176,48,128,37,87,182,176,176,176,48,128,37,93,183,176,176,176,48,128,37,92,184,176,176,176,48,128,37,91,51,4,25,87,25,95,25,103,25,111,182,176,176,176,48,128,37,94,183,176,176,176,48,128,37,95,184,176,176,176,48,128,37,90,185,176,176,176,48,128,37,84,52,10,25,141,25,149,25,157,25,165,25,173,25,181,25,189,25,197,25,205,25,213,176,176,176,176,48,128,37,105,177,176,176,176,48,128,37,102,178,176,176,176,48,128,37,96,179,176,176,176,48,128,37,80,180,176,176,176,48,128,37,108,181,176,176,176,48,128,37,103,182,176,176,176,48,128,37,104,183,176,176,176,48,128,37,100,184,176,176,176,48,128,37,101,185,176,176,176,48,128,37,89,53,5,25,233,25,241,25,249,26,1,26,9,176,176,176,176,48,128,37,88,177,176,176,176,48,128,37,82,178,176,176,176,48,128,37,83,179,176,176,176,48,128,37,107,180,176,176,176,48,128,37,106,97,2,26,23,26,44,227,245,244,101,129,1,90,26,32,228,239,244,225,227,227,229,238,116,128,30,100,237,240,233,231,242,229,229,107,128,3,224,99,5,26,67,26,98,26,107,26,147,26,169,225,242,239,110,130,1,96,26,78,26,90,228,239,244,225,227,227,229,238,116,128,30,102,243,237,225,236,108,128,246,253,229,228,233,236,236,97,128,1,94,232,247,97,130,1,143,26,117,26,128,227,249,242,233,236,236,233,99,128,4,216,228,233,229,242,229,243,233,243,227,249,242,233,236,236,233,99,128,4,218,233,242,99,2,26,155,26,160,236,101,128,36,200,245,237,230,236,229,120,128,1,92,239,237,237,225,225,227,227,229,238,116,128,2,24,228,239,116,2,26,190,26,199,225,227,227,229,238,116,128,30,96,226,229,236,239,119,129,30,98,26,209,228,239,244,225,227,227,229,238,116,128,30,104,101,2,26,227,26,239,232,225,242,237,229,238,233,225,110,128,5,77,246,229,238,242,239,237,225,110,128,33,102,104,5,27,6,27,34,27,48,27,59,27,72,97,2,27,12,27,23,225,242,237,229,238,233,225,110,128,5,71,227,249,242,233,236,236,233,99,128,4,40,227,232,225,227,249,242,233,236,236,233,99,128,4,41,229,233,227,239,240,244,233,99,128,3,226,232,225,227,249,242,233,236,236,233,99,128,4,186,233,237,225,227,239,240,244,233,99,128,3,236,105,2,27,90,27,96,231,237,97,128,3,163,248,242,239,237,225,110,128,33,101,237,239,238,239,243,240,225,227,101,128,255,51,239,230,244,243,233,231,238,227,249,242,233,236,236,233,99,128,4,44,243,237,225,236,108,128,247,115,244,233,231,237,225,231,242,229,229,107,128,3,218,84,141,0,84,27,186,27,191,27,197,28,7,28,32,28,96,28,147,28,177,28,189,28,201,28,246,29,6,29,46,225,117,128,3,164,226,225,114,128,1,102,99,4,27,207,27,214,27,223,27,250,225,242,239,110,128,1,100,229,228,233,236,236,97,128,1,98,233,242,99,2,27,231,27,236,236,101,128,36,201,245,237,230,236,229,248,226,229,236,239,119,128,30,112,239,237,237,225,225,227,227,229,238,116,128,1,98,228,239,116,2,28,15,28,24,225,227,227,229,238,116,128,30,106,226,229,236,239,119,128,30,108,101,4,28,42,28,53,28,73,28,82,227,249,242,233,236,236,233,99,128,4,34,228,229,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,172,238,242,239,237,225,110,128,33,105,244,243,229,227,249,242,233,236,236,233,99,128,4,180,104,3,28,104,28,110,28,136,229,244,97,128,3,152,111,2,28,116,28,121,239,107,128,1,172,242,110,129,0,222,28,128,243,237,225,236,108,128,247,254,242,229,229,242,239,237,225,110,128,33,98,105,2,28,153,28,164,236,228,229,243,237,225,236,108,128,246,254,247,238,225,242,237,229,238,233,225,110,128,5,79,236,233,238,229,226,229,236,239,119,128,30,110,237,239,238,239,243,240,225,227,101,128,255,52,111,2,28,207,28,218,225,242,237,229,238,233,225,110,128,5,57,238,101,3,28,227,28,234,28,240,230,233,246,101,128,1,188,243,233,120,128,1,132,244,247,111,128,1,167,242,229,244,242,239,230,236,229,248,232,239,239,107,128,1,174,115,3,29,14,29,26,29,39,229,227,249,242,233,236,236,233,99,128,4,38,232,229,227,249,242,233,236,236,233,99,128,4,11,237,225,236,108,128,247,116,119,2,29,52,29,64,229,236,246,229,242,239,237,225,110,128,33,107,239,242,239,237,225,110,128,33,97,85,142,0,85,29,105,29,123,29,131,29,198,30,69,30,87,30,198,30,214,30,226,31,21,31,30,31,142,31,149,31,219,225,227,245,244,101,129,0,218,29,115,243,237,225,236,108,128,247,250,226,242,229,246,101,128,1,108,99,3,29,139,29,146,29,188,225,242,239,110,128,1,211,233,242,99,2,29,154,29,159,236,101,128,36,202,245,237,230,236,229,120,130,0,219,29,172,29,180,226,229,236,239,119,128,30,118,243,237,225,236,108,128,247,251,249,242,233,236,236,233,99,128,4,35,100,3,29,206,29,229,30,59,226,108,2,29,213,29,221,225,227,245,244,101,128,1,112,231,242,225,246,101,128,2,20,233,229,242,229,243,233,115,134,0,220,29,251,30,3,30,11,30,34,30,42,30,51,225,227,245,244,101,128,1,215,226,229,236,239,119,128,30,114,99,2,30,17,30,24,225,242,239,110,128,1,217,249,242,233,236,236,233,99,128,4,240,231,242,225,246,101,128,1,219,237,225,227,242,239,110,128,1,213,243,237,225,236,108,128,247,252,239,244,226,229,236,239,119,128,30,228,231,242,225,246,101,129,0,217,30,79,243,237,225,236,108,128,247,249,104,2,30,93,30,171,111,2,30,99,30,109,239,235,225,226,239,246,101,128,30,230,242,110,133,1,175,30,124,30,132,30,143,30,151,30,163,225,227,245,244,101,128,30,232,228,239,244,226,229,236,239,119,128,30,240,231,242,225,246,101,128,30,234,232,239,239,235,225,226,239,246,101,128,30,236,244,233,236,228,101,128,30,238,245,238,231,225,242,245,237,236,225,245,116,129,1,112,30,187,227,249,242,233,236,236,233,99,128,4,242,233,238,246,229,242,244,229,228,226,242,229,246,101,128,2,22,235,227,249,242,233,236,236,233,99,128,4,120,109,2,30,232,31,10,225,227,242,239,110,130,1,106,30,244,30,255,227,249,242,233,236,236,233,99,128,4,238,228,233,229,242,229,243,233,115,128,30,122,239,238,239,243,240,225,227,101,128,255,53,239,231,239,238,229,107,128,1,114,240,243,233,236,239,110,133,3,165,31,49,31,53,31,90,31,121,31,134,49,128,3,210,97,2,31,59,31,81,227,245,244,229,232,239,239,235,243,249,237,226,239,236,231,242,229,229,107,128,3,211,230,242,233,227,225,110,128,1,177,228,233,229,242,229,243,233,115,129,3,171,31,103,232,239,239,235,243,249,237,226,239,236,231,242,229,229,107,128,3,212,232,239,239,235,243,249,237,226,239,108,128,3,210,244,239,238,239,115,128,3,142,242,233,238,103,128,1,110,115,3,31,157,31,172,31,179,232,239,242,244,227,249,242,233,236,236,233,99,128,4,14,237,225,236,108,128,247,117,244,242,225,233,231,232,116,2,31,191,31,202,227,249,242,233,236,236,233,99,128,4,174,243,244,242,239,235,229,227,249,242,233,236,236,233,99,128,4,176,244,233,236,228,101,130,1,104,31,231,31,239,225,227,245,244,101,128,30,120,226,229,236,239,119,128,30,116,86,136,0,86,32,11,32,20,32,31,32,60,32,67,32,79,32,91,32,99,227,233,242,227,236,101,128,36,203,228,239,244,226,229,236,239,119,128,30,126,101,2,32,37,32,48,227,249,242,233,236,236,233,99,128,4,18,247,225,242,237,229,238,233,225,110,128,5,78,232,239,239,107,128,1,178,237,239,238,239,243,240,225,227,101,128,255,54,239,225,242,237,229,238,233,225,110,128,5,72,243,237,225,236,108,128,247,118,244,233,236,228,101,128,30,124,87,134,0,87,32,123,32,131,32,154,32,194,32,202,32,214,225,227,245,244,101,128,30,130,227,233,242,99,2,32,140,32,145,236,101,128,36,204,245,237,230,236,229,120,128,1,116,100,2,32,160,32,170,233,229,242,229,243,233,115,128,30,132,239,116,2,32,177,32,186,225,227,227,229,238,116,128,30,134,226,229,236,239,119,128,30,136,231,242,225,246,101,128,30,128,237,239,238,239,243,240,225,227,101,128,255,55,243,237,225,236,108,128,247,119,88,134,0,88,32,238,32,247,33,18,33,31,33,35,33,47,227,233,242,227,236,101,128,36,205,100,2,32,253,33,7,233,229,242,229,243,233,115,128,30,140,239,244,225,227,227,229,238,116,128,30,138,229,232,225,242,237,229,238,233,225,110,128,5,61,105,128,3,158,237,239,238,239,243,240,225,227,101,128,255,56,243,237,225,236,108,128,247,120,89,139,0,89,33,81,33,116,33,139,33,189,33,228,33,236,33,253,34,40,34,52,34,60,34,68,97,2,33,87,33,104,227,245,244,101,129,0,221,33,96,243,237,225,236,108,128,247,253,244,227,249,242,233,236,236,233,99,128,4,98,227,233,242,99,2,33,125,33,130,236,101,128,36,206,245,237,230,236,229,120,128,1,118,100,2,33,145,33,165,233,229,242,229,243,233,115,129,1,120,33,157,243,237,225,236,108,128,247,255,239,116,2,33,172,33,181,225,227,227,229,238,116,128,30,142,226,229,236,239,119,128,30,244,229,114,2,33,196,33,208,233,227,249,242,233,236,236,233,99,128,4,43,245,228,233,229,242,229,243,233,243,227,249,242,233,236,236,233,99,128,4,248,231,242,225,246,101,128,30,242,232,239,239,107,129,1,179,33,245,225,226,239,246,101,128,30,246,105,3,34,5,34,16,34,27,225,242,237,229,238,233,225,110,128,5,69,227,249,242,233,236,236,233,99,128,4,7,247,238,225,242,237,229,238,233,225,110,128,5,82,237,239,238,239,243,240,225,227,101,128,255,57,243,237,225,236,108,128,247,121,244,233,236,228,101,128,30,248,245,115,2,34,75,34,113,226,233,103,2,34,83,34,94,227,249,242,233,236,236,233,99,128,4,106,233,239,244,233,230,233,229,228,227,249,242,233,236,236,233,99,128,4,108,236,233,244,244,236,101,2,34,124,34,135,227,249,242,233,236,236,233,99,128,4,102,233,239,244,233,230,233,229,228,227,249,242,233,236,236,233,99,128,4,104,90,136,0,90,34,174,34,198,34,243,35,14,35,81,35,173,35,185,35,197,97,2,34,180,34,191,225,242,237,229,238,233,225,110,128,5,54,227,245,244,101,128,1,121,99,2,34,204,34,221,225,242,239,110,129,1,125,34,213,243,237,225,236,108,128,246,255,233,242,99,2,34,229,34,234,236,101,128,36,207,245,237,230,236,229,120,128,30,144,228,239,116,130,1,123,34,253,35,6,225,227,227,229,238,116,128,1,123,226,229,236,239,119,128,30,146,101,3,35,22,35,33,35,76,227,249,242,233,236,236,233,99,128,4,23,100,2,35,39,35,58,229,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,152,233,229,242,229,243,233,243,227,249,242,233,236,236,233,99,128,4,222,244,97,128,3,150,232,101,4,35,92,35,103,35,119,35,130,225,242,237,229,238,233,225,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30721);
/* memory initializer */ allocate([128,5,58,226,242,229,246,229,227,249,242,233,236,236,233,99,128,4,193,227,249,242,233,236,236,233,99,128,4,22,100,2,35,136,35,155,229,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,150,233,229,242,229,243,233,243,227,249,242,233,236,236,233,99,128,4,220,236,233,238,229,226,229,236,239,119,128,30,148,237,239,238,239,243,240,225,227,101,128,255,58,115,2,35,203,35,210,237,225,236,108,128,247,122,244,242,239,235,101,128,1,181,97,158,0,97,36,26,38,154,39,4,39,68,39,132,39,196,40,4,40,68,40,126,40,190,41,70,41,217,42,137,42,237,43,17,49,192,49,229,50,0,50,225,51,7,52,96,52,168,53,123,53,132,54,5,56,13,57,3,57,50,57,201,57,215,49,138,39,1,36,50,36,114,36,154,36,218,37,26,37,90,37,154,37,218,38,26,38,90,48,138,39,33,36,74,36,78,36,82,36,86,36,90,36,94,36,98,36,102,36,106,36,110,48,128,39,94,49,128,39,97,50,128,39,98,51,128,39,99,52,128,39,100,53,128,39,16,54,128,39,101,55,128,39,102,56,128,39,103,57,128,38,96,49,134,38,27,36,130,36,134,36,138,36,142,36,146,36,150,48,128,38,101,49,128,38,102,50,128,38,99,55,128,39,9,56,128,39,8,57,128,39,7,50,138,38,30,36,178,36,182,36,186,36,190,36,194,36,198,36,202,36,206,36,210,36,214,48,128,36,96,49,128,36,97,50,128,36,98,51,128,36,99,52,128,36,100,53,128,36,101,54,128,36,102,55,128,36,103,56,128,36,104,57,128,36,105,51,138,39,12,36,242,36,246,36,250,36,254,37,2,37,6,37,10,37,14,37,18,37,22,48,128,39,118,49,128,39,119,50,128,39,120,51,128,39,121,52,128,39,122,53,128,39,123,54,128,39,124,55,128,39,125,56,128,39,126,57,128,39,127,52,138,39,13,37,50,37,54,37,58,37,62,37,66,37,70,37,74,37,78,37,82,37,86,48,128,39,128,49,128,39,129,50,128,39,130,51,128,39,131,52,128,39,132,53,128,39,133,54,128,39,134,55,128,39,135,56,128,39,136,57,128,39,137,53,138,39,14,37,114,37,118,37,122,37,126,37,130,37,134,37,138,37,142,37,146,37,150,48,128,39,138,49,128,39,139,50,128,39,140,51,128,39,141,52,128,39,142,53,128,39,143,54,128,39,144,55,128,39,145,56,128,39,146,57,128,39,147,54,138,39,15,37,178,37,182,37,186,37,190,37,194,37,198,37,202,37,206,37,210,37,214,48,128,39,148,49,128,33,146,50,128,39,163,51,128,33,148,52,128,33,149,53,128,39,153,54,128,39,155,55,128,39,156,56,128,39,157,57,128,39,158,55,138,39,17,37,242,37,246,37,250,37,254,38,2,38,6,38,10,38,14,38,18,38,22,48,128,39,159,49,128,39,160,50,128,39,161,51,128,39,162,52,128,39,164,53,128,39,165,54,128,39,166,55,128,39,167,56,128,39,168,57,128,39,169,56,138,39,18,38,50,38,54,38,58,38,62,38,66,38,70,38,74,38,78,38,82,38,86,48,128,39,171,49,128,39,173,50,128,39,175,51,128,39,178,52,128,39,179,53,128,39,181,54,128,39,184,55,128,39,186,56,128,39,187,57,128,39,188,57,138,39,19,38,114,38,118,38,122,38,126,38,130,38,134,38,138,38,142,38,146,38,150,48,128,39,189,49,128,39,190,50,128,39,154,51,128,39,170,52,128,39,182,53,128,39,185,54,128,39,152,55,128,39,180,56,128,39,183,57,128,39,172,50,138,39,2,38,178,38,224,38,228,38,232,38,236,38,240,38,244,38,248,38,252,39,0,48,135,39,20,38,196,38,200,38,204,38,208,38,212,38,216,38,220,48,128,39,174,49,128,39,177,50,128,39,3,51,128,39,80,52,128,39,82,53,128,39,110,54,128,39,112,49,128,39,21,50,128,39,22,51,128,39,23,52,128,39,24,53,128,39,25,54,128,39,26,55,128,39,27,56,128,39,28,57,128,39,34,51,138,39,4,39,28,39,32,39,36,39,40,39,44,39,48,39,52,39,56,39,60,39,64,48,128,39,35,49,128,39,36,50,128,39,37,51,128,39,38,52,128,39,39,53,128,38,5,54,128,39,41,55,128,39,42,56,128,39,43,57,128,39,44,52,138,38,14,39,92,39,96,39,100,39,104,39,108,39,112,39,116,39,120,39,124,39,128,48,128,39,45,49,128,39,46,50,128,39,47,51,128,39,48,52,128,39,49,53,128,39,50,54,128,39,51,55,128,39,52,56,128,39,53,57,128,39,54,53,138,39,6,39,156,39,160,39,164,39,168,39,172,39,176,39,180,39,184,39,188,39,192,48,128,39,55,49,128,39,56,50,128,39,57,51,128,39,58,52,128,39,59,53,128,39,60,54,128,39,61,55,128,39,62,56,128,39,63,57,128,39,64,54,138,39,29,39,220,39,224,39,228,39,232,39,236,39,240,39,244,39,248,39,252,40,0,48,128,39,65,49,128,39,66,50,128,39,67,51,128,39,68,52,128,39,69,53,128,39,70,54,128,39,71,55,128,39,72,56,128,39,73,57,128,39,74,55,138,39,30,40,28,40,32,40,36,40,40,40,44,40,48,40,52,40,56,40,60,40,64,48,128,39,75,49,128,37,207,50,128,39,77,51,128,37,160,52,128,39,79,53,128,39,81,54,128,37,178,55,128,37,188,56,128,37,198,57,128,39,86,56,137,39,31,40,90,40,94,40,98,40,102,40,106,40,110,40,114,40,118,40,122,49,128,37,215,50,128,39,88,51,128,39,89,52,128,39,90,53,128,39,111,54,128,39,113,55,128,39,114,56,128,39,115,57,128,39,104,57,138,39,32,40,150,40,154,40,158,40,162,40,166,40,170,40,174,40,178,40,182,40,186,48,128,39,105,49,128,39,108,50,128,39,109,51,128,39,106,52,128,39,107,53,128,39,116,54,128,39,117,55,128,39,91,56,128,39,92,57,128,39,93,97,7,40,206,40,216,40,223,40,230,40,255,41,15,41,26,226,229,238,231,225,236,105,128,9,134,227,245,244,101,128,0,225,228,229,246,97,128,9,6,231,117,2,40,237,40,246,234,225,242,225,244,105,128,10,134,242,237,245,235,232,105,128,10,6,237,225,244,242,225,231,245,242,237,245,235,232,105,128,10,62,242,245,243,241,245,225,242,101,128,51,3,246,239,247,229,236,243,233,231,110,3,41,42,41,52,41,59,226,229,238,231,225,236,105,128,9,190,228,229,246,97,128,9,62,231,245,234,225,242,225,244,105,128,10,190,98,4,41,80,41,121,41,130,41,140,226,242,229,246,233,225,244,233,239,110,2,41,95,41,110,237,225,242,235,225,242,237,229,238,233,225,110,128,5,95,243,233,231,238,228,229,246,97,128,9,112,229,238,231,225,236,105,128,9,133,239,240,239,237,239,230,111,128,49,26,242,229,246,101,134,1,3,41,159,41,167,41,178,41,189,41,197,41,209,225,227,245,244,101,128,30,175,227,249,242,233,236,236,233,99,128,4,209,228,239,244,226,229,236,239,119,128,30,183,231,242,225,246,101,128,30,177,232,239,239,235,225,226,239,246,101,128,30,179,244,233,236,228,101,128,30,181,99,4,41,227,41,234,42,57,42,127,225,242,239,110,128,1,206,233,242,99,2,41,242,41,247,236,101,128,36,208,245,237,230,236,229,120,133,0,226,42,10,42,18,42,29,42,37,42,49,225,227,245,244,101,128,30,165,228,239,244,226,229,236,239,119,128,30,173,231,242,225,246,101,128,30,167,232,239,239,235,225,226,239,246,101,128,30,169,244,233,236,228,101,128,30,171,245,244,101,133,0,180,42,73,42,84,42,101,42,108,42,117,226,229,236,239,247,227,237,98,128,3,23,99,2,42,90,42,95,237,98,128,3,1,239,237,98,128,3,1,228,229,246,97,128,9,84,236,239,247,237,239,100,128,2,207,244,239,238,229,227,237,98,128,3,65,249,242,233,236,236,233,99,128,4,48,100,5,42,149,42,159,42,173,42,179,42,213,226,236,231,242,225,246,101,128,2,1,228,225,235,231,245,242,237,245,235,232,105,128,10,113,229,246,97,128,9,5,233,229,242,229,243,233,115,130,0,228,42,193,42,204,227,249,242,233,236,236,233,99,128,4,211,237,225,227,242,239,110,128,1,223,239,116,2,42,220,42,228,226,229,236,239,119,128,30,161,237,225,227,242,239,110,128,1,225,101,131,0,230,42,247,42,255,43,8,225,227,245,244,101,128,1,253,235,239,242,229,225,110,128,49,80,237,225,227,242,239,110,128,1,227,230,233,105,6,43,33,43,53,45,246,45,252,46,11,49,111,48,2,43,39,43,46,176,178,176,56,128,32,21,184,185,180,49,128,32,164,177,48,3,43,62,45,86,45,221,48,9,43,82,43,102,43,164,43,226,44,32,44,94,44,156,44,218,45,24,49,3,43,90,43,94,43,98,55,128,4,16,56,128,4,17,57,128,4,18,50,10,43,124,43,128,43,132,43,136,43,140,43,144,43,148,43,152,43,156,43,160,48,128,4,19,49,128,4,20,50,128,4,21,51,128,4,1,52,128,4,22,53,128,4,23,54,128,4,24,55,128,4,25,56,128,4,26,57,128,4,27,51,10,43,186,43,190,43,194,43,198,43,202,43,206,43,210,43,214,43,218,43,222,48,128,4,28,49,128,4,29,50,128,4,30,51,128,4,31,52,128,4,32,53,128,4,33,54,128,4,34,55,128,4,35,56,128,4,36,57,128,4,37,52,10,43,248,43,252,44,0,44,4,44,8,44,12,44,16,44,20,44,24,44,28,48,128,4,38,49,128,4,39,50,128,4,40,51,128,4,41,52,128,4,42,53,128,4,43,54,128,4,44,55,128,4,45,56,128,4,46,57,128,4,47,53,10,44,54,44,58,44,62,44,66,44,70,44,74,44,78,44,82,44,86,44,90,48,128,4,144,49,128,4,2,50,128,4,3,51,128,4,4,52,128,4,5,53,128,4,6,54,128,4,7,55,128,4,8,56,128,4,9,57,128,4,10,54,10,44,116,44,120,44,124,44,128,44,132,44,136,44,140,44,144,44,148,44,152,48,128,4,11,49,128,4,12,50,128,4,14,51,128,246,196,52,128,246,197,53,128,4,48,54,128,4,49,55,128,4,50,56,128,4,51,57,128,4,52,55,10,44,178,44,182,44,186,44,190,44,194,44,198,44,202,44,206,44,210,44,214,48,128,4,53,49,128,4,81,50,128,4,54,51,128,4,55,52,128,4,56,53,128,4,57,54,128,4,58,55,128,4,59,56,128,4,60,57,128,4,61,56,10,44,240,44,244,44,248,44,252,45,0,45,4,45,8,45,12,45,16,45,20,48,128,4,62,49,128,4,63,50,128,4,64,51,128,4,65,52,128,4,66,53,128,4,67,54,128,4,68,55,128,4,69,56,128,4,70,57,128,4,71,57,10,45,46,45,50,45,54,45,58,45,62,45,66,45,70,45,74,45,78,45,82,48,128,4,72,49,128,4,73,50,128,4,74,51,128,4,75,52,128,4,76,53,128,4,77,54,128,4,78,55,128,4,79,56,128,4,145,57,128,4,82,49,4,45,96,45,158,45,163,45,189,48,10,45,118,45,122,45,126,45,130,45,134,45,138,45,142,45,146,45,150,45,154,48,128,4,83,49,128,4,84,50,128,4,85,51,128,4,86,52,128,4,87,53,128,4,88,54,128,4,89,55,128,4,90,56,128,4,91,57,128,4,92,177,48,128,4,94,52,4,45,173,45,177,45,181,45,185,53,128,4,15,54,128,4,98,55,128,4,114,56,128,4,116,57,5,45,201,45,205,45,209,45,213,45,217,50,128,246,198,51,128,4,95,52,128,4,99,53,128,4,115,54,128,4,117,56,2,45,227,45,241,51,2,45,233,45,237,49,128,246,199,50,128,246,200,180,54,128,4,217,178,185,57,128,32,14,179,48,2,46,3,46,7,48,128,32,15,49,128,32,13,181,55,7,46,28,46,98,47,163,47,240,48,197,49,34,49,105,51,2,46,34,46,48,56,2,46,40,46,44,49,128,6,106,56,128,6,12,57,8,46,66,46,70,46,74,46,78,46,82,46,86,46,90,46,94,50,128,6,96,51,128,6,97,52,128,6,98,53,128,6,99,54,128,6,100,55,128,6,101,56,128,6,102,57,128,6,103,52,7,46,114,46,146,46,208,47,14,47,46,47,102,47,158,48,5,46,126,46,130,46,134,46,138,46,142,48,128,6,104,49,128,6,105,51,128,6,27,55,128,6,31,57,128,6,33,49,10,46,168,46,172,46,176,46,180,46,184,46,188,46,192,46,196,46,200,46,204,48,128,6,34,49,128,6,35,50,128,6,36,51,128,6,37,52,128,6,38,53,128,6,39,54,128,6,40,55,128,6,41,56,128,6,42,57,128,6,43,50,10,46,230,46,234,46,238,46,242,46,246,46,250,46,254,47,2,47,6,47,10,48,128,6,44,49,128,6,45,50,128,6,46,51,128,6,47,52,128,6,48,53,128,6,49,54,128,6,50,55,128,6,51,56,128,6,52,57,128,6,53,51,5,47,26,47,30,47,34,47,38,47,42,48,128,6,54,49,128,6,55,50,128,6,56,51,128,6,57,52,128,6,58,52,9,47,66,47,70,47,74,47,78,47,82,47,86,47,90,47,94,47,98,48,128,6,64,49,128,6,65,50,128,6,66,51,128,6,67,52,128,6,68,53,128,6,69,54,128,6,70,56,128,6,72,57,128,6,73,53,9,47,122,47,126,47,130,47,134,47,138,47,142,47,146,47,150,47,154,48,128,6,74,49,128,6,75,50,128,6,76,51,128,6,77,52,128,6,78,53,128,6,79,54,128,6,80,55,128,6,81,56,128,6,82,183,48,128,6,71,53,3,47,171,47,203,47,235,48,5,47,183,47,187,47,191,47,195,47,199,53,128,6,164,54,128,6,126,55,128,6,134,56,128,6,152,57,128,6,175,49,5,47,215,47,219,47,223,47,227,47,231,49,128,6,121,50,128,6,136,51,128,6,145,52,128,6,186,57,128,6,210,179,52,128,6,213,54,7,48,0,48,5,48,10,48,15,48,53,48,115,48,177,179,54,128,32,170,180,53,128,5,190,181,56,128,5,195,54,6,48,29,48,33,48,37,48,41,48,45,48,49,52,128,5,208,53,128,5,209,54,128,5,210,55,128,5,211,56,128,5,212,57,128,5,213,55,10,48,75,48,79,48,83,48,87,48,91,48,95,48,99,48,103,48,107,48,111,48,128,5,214,49,128,5,215,50,128,5,216,51,128,5,217,52,128,5,218,53,128,5,219,54,128,5,220,55,128,5,221,56,128,5,222,57,128,5,223,56,10,48,137,48,141,48,145,48,149,48,153,48,157,48,161,48,165,48,169,48,173,48,128,5,224,49,128,5,225,50,128,5,226,51,128,5,227,52,128,5,228,53,128,5,229,54,128,5,230,55,128,5,231,56,128,5,232,57,128,5,233,57,3,48,185,48,189,48,193,48,128,5,234,52,128,251,42,53,128,251,43,55,4,48,207,48,221,48,241,48,246,48,2,48,213,48,217,48,128,251,75,53,128,251,31,49,3,48,229,48,233,48,237,54,128,5,240,55,128,5,241,56,128,5,242,178,51,128,251,53,57,7,49,6,49,10,49,14,49,18,49,22,49,26,49,30,51,128,5,180,52,128,5,181,53,128,5,182,54,128,5,187,55,128,5,184,56,128,5,183,57,128,5,176,56,3,49,42,49,86,49,91,48,7,49,58,49,62,49,66,49,70,49,74,49,78,49,82,48,128,5,178,49,128,5,177,50,128,5,179,51,128,5,194,52,128,5,193,54,128,5,185,55,128,5,188,179,57,128,5,189,52,2,49,97,49,101,49,128,5,191,50,128,5,192,185,178,57,128,2,188,54,3,49,119,49,178,49,185,49,4,49,129,49,145,49,151,49,172,50,2,49,135,49,140,180,56,128,33,5,184,57,128,33,19,179,181,50,128,33,22,181,55,3,49,160,49,164,49,168,51,128,32,44,52,128,32,45,53,128,32,46,182,182,52,128,32,12,179,177,182,55,128,6,109,180,185,179,55,128,2,189,103,2,49,198,49,205,242,225,246,101,128,0,224,117,2,49,211,49,220,234,225,242,225,244,105,128,10,133,242,237,245,235,232,105,128,10,5,104,2,49,235,49,245,233,242,225,231,225,238,97,128,48,66,239,239,235,225,226,239,246,101,128,30,163,105,7,50,16,50,41,50,48,50,60,50,85,50,101,50,181,98,2,50,22,50,31,229,238,231,225,236,105,128,9,144,239,240,239,237,239,230,111,128,49,30,228,229,246,97,128,9,16,229,227,249,242,233,236,236,233,99,128,4,213,231,117,2,50,67,50,76,234,225,242,225,244,105,128,10,144,242,237,245,235,232,105,128,10,16,237,225,244,242,225,231,245,242,237,245,235,232,105,128,10,72,110,5,50,113,50,122,50,136,50,152,50,167,225,242,225,226,233,99,128,6,57,230,233,238,225,236,225,242,225,226,233,99,128,254,202,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,203,237,229,228,233,225,236,225,242,225,226,233,99,128,254,204,246,229,242,244,229,228,226,242,229,246,101,128,2,3,246,239,247,229,236,243,233,231,110,3,50,197,50,207,50,214,226,229,238,231,225,236,105,128,9,200,228,229,246,97,128,9,72,231,245,234,225,242,225,244,105,128,10,200,107,2,50,231,50,255,225,244,225,235,225,238,97,129,48,162,50,243,232,225,236,230,247,233,228,244,104,128,255,113,239,242,229,225,110,128,49,79,108,3,51,15,52,71,52,80,101,2,51,21,52,66,102,136,5,208,51,41,51,50,51,65,51,79,51,168,51,182,52,37,52,51,225,242,225,226,233,99,128,6,39,228,225,231,229,243,232,232,229,226,242,229,119,128,251,48,230,233,238,225,236,225,242,225,226,233,99,128,254,142,104,2,51,85,51,160,225,237,250,97,2,51,94,51,127,225,226,239,246,101,2,51,104,51,113,225,242,225,226,233,99,128,6,35,230,233,238,225,236,225,242,225,226,233,99,128,254,132,226,229,236,239,119,2,51,137,51,146,225,242,225,226,233,99,128,6,37,230,233,238,225,236,225,242,225,226,233,99,128,254,136,229,226,242,229,119,128,5,208,236,225,237,229,228,232,229,226,242,229,119,128,251,79,237,97,2,51,189,51,225,228,228,225,225,226,239,246,101,2,51,202,51,211,225,242,225,226,233,99,128,6,34,230,233,238,225,236,225,242,225,226,233,99,128,254,130,235,243,245,242,97,4,51,239,51,248,52,6,52,22,225,242,225,226,233,99,128,6,73,230,233,238,225,236,225,242,225,226,233,99,128,254,240,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,243,237,229,228,233,225,236,225,242,225,226,233,99,128,254,244,240,225,244,225,232,232,229,226,242,229,119,128,251,46,241,225,237,225,244,243,232,229,226,242,229,119,128,251,47,240,104,128,33,53,236,229,241,245,225,108,128,34,76,240,232,97,129,3,177,52,88,244,239,238,239,115,128,3,172,109,4,52,106,52,114,52,125,52,159,225,227,242,239,110,128,1,1,239,238,239,243,240,225,227,101,128,255,65,240,229,242,243,225,238,100,130,0,38,52,139,52,151,237,239,238,239,243,240,225,227,101,128,255,6,243,237,225,236,108,128,247,38,243,241,245,225,242,101,128,51,194,110,4,52,178,52,189,53,55,53,65,226,239,240,239,237,239,230,111,128,49,34,103,4,52,199,52,210,52,224,53,47,226,239,240,239,237,239,230,111,128,49,36,235,232,225,238,235,232,245,244,232,225,105,128,14,90,236,101,131,34,32,52,235,53,32,53,39,226,242,225,227,235,229,116,2,52,247,53,11,236,229,230,116,129,48,8,53,0,246,229,242,244,233,227,225,108,128,254,63,242,233,231,232,116,129,48,9,53,21,246,229,242,244,233,227,225,108,128,254,64,236,229,230,116,128,35,41,242,233,231,232,116,128,35,42,243,244,242,239,109,128,33,43,239,244,229,236,229,233,97,128,3,135,117,2,53,71,53,83,228,225,244,244,225,228,229,246,97,128,9,82,243,246,225,242,97,3,53,95,53,105,53,112,226,229,238,231,225,236,105,128,9,130,228,229,246,97,128,9,2,231,245,234,225,242,225,244,105,128,10,130,239,231,239,238,229,107,128,1,5,112,3,53,140,53,164,53,194,97,2,53,146,53,158,225,244,239,243,241,245,225,242,101,128,51,0,242,229,110,128,36,156,239,243,244,242,239,240,232,101,2,53,177,53,188,225,242,237,229,238,233,225,110,128,5,90,237,239,100,128,2,188,112,2,53,200,53,205,236,101,128,248,255,242,111,2,53,212,53,220,225,227,232,229,115,128,34,80,120,2,53,226,53,246,229,241,245,225,108,129,34,72,53,236,239,242,233,237,225,231,101,128,34,82,233,237,225,244,229,236,249,229,241,245,225,108,128,34,69,114,4,54,15,54,42,54,46,54,91,225,229,97,2,54,23,54,33,229,235,239,242,229,225,110,128,49,142,235,239,242,229,225,110,128,49,141,99,128,35,18,105,2,54,52,54,66,231,232,244,232,225,236,230,242,233,238,103,128,30,154,238,103,130,0,229,54,75,54,83,225,227,245,244,101,128,1,251,226,229,236,239,119,128,30,1,242,239,119,8,54,111,54,118,54,247,55,57,55,107,55,162,55,185,56,4,226,239,244,104,128,33,148,100,3,54,126,54,165,54,212,225,243,104,4,54,138,54,145,54,152,54,160,228,239,247,110,128,33,227,236,229,230,116,128,33,224,242,233,231,232,116,128,33,226,245,112,128,33,225,226,108,5,54,178,54,185,54,192,54,199,54,207,226,239,244,104,128,33,212,228,239,247,110,128,33,211,236,229,230,116,128,33,208,242,233,231,232,116,128,33,210,245,112,128,33,209,239,247,110,131,33,147,54,224,54,231,54,239,236,229,230,116,128,33,153,242,233,231,232,116,128,33,152,247,232,233,244,101,128,33,233,104,2,54,253,55,48,229,225,100,4,55,9,55,19,55,29,55,40,228,239,247,238,237,239,100,128,2,197,236,229,230,244,237,239,100,128,2,194,242,233,231,232,244,237,239,100,128,2,195,245,240,237,239,100,128,2,196,239,242,233,250,229,120,128,248,231,236,229,230,116,131,33,144,55,70,55,87,55,99,228,226,108,129,33,208,55,78,243,244,242,239,235,101,128,33,205,239,246,229,242,242,233,231,232,116,128,33,198,247,232,233,244,101,128,33,230,242,233,231,232,116,132,33,146,55,123,55,135,55,143,55,154,228,226,236,243,244,242,239,235,101,128,33,207,232,229,225,246,121,128,39,158,239,246,229,242,236,229,230,116,128,33,196,247,232,233,244,101,128,33,232,244,225,98,2,55,170,55,177,236,229,230,116,128,33,228,242,233,231,232,116,128,33,229,245,112,132,33,145,55,198,55,226,55,244,55,252,100,2,55,204,55,216,110,129,33,149,55,210,226,243,101,128,33,168,239,247,238,226,225,243,101,128,33,168,236,229,230,116,129,33,150,55,235,239,230,228,239,247,110,128,33,197,242,233,231,232,116,128,33,151,247,232,233,244,101,128,33,231,246,229,242,244,229,120,128,248,230,115,5,56,25,56,101,56,146,56,229,56,239,99,2,56,31,56,83,233,105,2,56,38,56,61,227,233,242,227,245,109,129,0,94,56,49,237,239,238,239,243,240,225,227,101,128,255,62,244,233,236,228,101,129,0,126,56,71,237,239,238,239,243,240,225,227,101,128,255,94,242,233,240,116,129,2,81,56,92,244,245,242,238,229,100,128,2,82,237,225,236,108,2,56,110,56,121,232,233,242,225,231,225,238,97,128,48,65,235,225,244,225,235,225,238,97,129,48,161,56,134,232,225,236,230,247,233,228,244,104,128,255,103,244,229,242,233,115,2,56,156,56,225,107,131,0,42,56,166,56,194,56,217,97,2,56,172,56,186,236,244,239,238,229,225,242,225,226,233,99,128,6,109,242,225,226,233,99,128,6,109,109,2,56,200,56,206,225,244,104,128,34,23,239,238,239,243,240,225,227,101,128,255,10,243,237,225,236,108,128,254,97,109,128,32,66,245,240,229,242,233,239,114,128,246,233,249,237,240,244,239,244,233,227,225,236,236,249,229,241,245,225,108,128,34,67,116,132,0,64,57,15,57,22,57,34,57,42,233,236,228,101,128,0,227,237,239,238,239,243,240,225,227,101,128,255,32,243,237,225,236,108,128,254,107,245,242,238,229,100,128,2,80,117,6,57,64,57,89,57,96,57,121,57,141,57,157,98,2,57,70,57,79,229,238,231,225,236,105,128,9,148,239,240,239,237,239,230,111,128,49,32,228,229,246,97,128,9,20,231,117,2,57,103,57,112,234,225,242,225,244,105,128,10,148,242,237,245,235,232,105,128,10,20,236,229,238,231,244,232,237,225,242,235,226,229,238,231,225,236,105,128,9,215,237,225,244,242,225,231,245,242,237,245,235,232,105,128,10,76,246,239,247,229,236,243,233,231,110,3,57,173,57,183,57,190,226,229,238,231,225,236,105,128,9,204,228,229,246,97,128,9,76,231,245,234,225,242,225,244,105,128,10,204,246,225,231,242,225,232,225,228,229,246,97,128,9,61,121,2,57,221,57,233,226,225,242,237,229,238,233,225,110,128,5,97,233,110,130,5,226,57,242,58,1,225,236,244,239,238,229,232,229,226,242,229,119,128,251,32,232,229,226,242,229,119,128,5,226,98,144,0,98,58,46,58,181,58,192,58,201,58,226,60,11,60,73,60,146,62,72,62,84,62,127,62,135,62,145,64,15,64,39,64,48,97,7,58,62,58,72,58,96,58,103,58,128,58,152,58,163,226,229,238,231,225,236,105,128,9,172,227,235,243,236,225,243,104,129,0,92,58,84,237,239,238,239,243,240,225,227,101,128,255,60,228,229,246,97,128,9,44,231,117,2,58,110,58,119,234,225,242,225,244,105,128,10,172,242,237,245,235,232,105,128,10,44,104,2,58,134,58,144,233,242,225,231,225,238,97,128,48,112,244,244,232,225,105,128,14,63,235,225,244,225,235,225,238,97,128,48,208,114,129,0,124,58,169,237,239,238,239,243,240,225,227,101,128,255,92,226,239,240,239,237,239,230,111,128,49,5,227,233,242,227,236,101,128,36,209,228,239,116,2,58,209,58,218,225,227,227,229,238,116,128,30,3,226,229,236,239,119,128,30,5,101,6,58,240,59,5,59,28,59,170,59,181,59,193,225,237,229,228,243,233,248,244,229,229,238,244,232,238,239,244,229,115,128,38,108,99,2,59,11,59,18,225,245,243,101,128,34,53,249,242,233,236,236,233,99,128,4,49,104,5,59,40,59,49,59,63,59,93,59,152,225,242,225,226,233,99,128,6,40,230,233,238,225,236,225,242,225,226,233,99,128,254,144,105,2,59,69,59,84,238,233,244,233,225,236,225,242,225,226,233,99,128,254,145,242,225,231,225,238,97,128,48,121,237,101,2,59,100,59,113,228,233,225,236,225,242,225,226,233,99,128,254,146,229,237,105,2,59,121,59,136,238,233,244,233,225,236,225,242,225,226,233,99,128,252,159,243,239,236,225,244,229,228,225,242,225,226,233,99,128,252,8,238,239,239,238,230,233,238,225,236,225,242,225,226,233,99,128,252,109,235,225,244,225,235,225,238,97,128,48,217,238,225,242,237,229,238,233,225,110,128,5,98,116,132,5,209,59,205,59,225,59,245,59,254,97,129,3,178,59,211,243,249,237,226,239,236,231,242,229,229,107,128,3,208,228,225,231,229,243,104,129,251,49,59,236,232,229,226,242,229,119,128,251,49,232,229,226,242,229,119,128,5,209,242,225,230,229,232,229,226,242,229,119,128,251,76,104,2,60,17,60,67,97,3,60,25,60,35,60,42,226,229,238,231,225,236,105,128,9,173,228,229,246,97,128,9,45,231,117,2,60,49,60,58,234,225,242,225,244,105,128,10,173,242,237,245,235,232,105,128,10,45,239,239,107,128,2,83,105,5,60,85,60,96,60,107,60,121,60,135,232,233,242,225,231,225,238,97,128,48,115,235,225,244,225,235,225,238,97,128,48,211,236,225,226,233,225,236,227,236,233,227,107,128,2,152,238,228,233,231,245,242,237,245,235,232,105,128,10,2,242,245,243,241,245,225,242,101,128,51,49,108,3,60,154,62,55,62,66,97,2,60,160,62,50,227,107,6,60,175,60,184,60,221,61,114,61,169,61,221,227,233,242,227,236,101,128,37,207,100,2,60,190,60,199,233,225,237,239,238,100,128,37,198,239,247,238,240,239,233,238,244,233,238,231,244,242,233,225,238,231,236,101,128,37,188,108,2,60,227,61,74,101,2,60,233,61,13,230,244,240,239,233,238,244,233,238,103,2,60,248,61,2,240,239,233,238,244,229,114,128,37,196,244,242,233,225,238,231,236,101,128,37,192,238,244,233,227,245,236,225,242,226,242,225,227,235,229,116,2,61,33,61,53,236,229,230,116,129,48,16,61,42,246,229,242,244,233,227,225,108,128,254,59,242,233,231,232,116,129,48,17,61,63,246,229,242,244,233,227,225,108,128,254,60,239,247,229,114,2,61,83,61,98,236,229,230,244,244,242,233,225,238,231,236,101,128,37,227,242,233,231,232,244,244,242,233,225,238,231,236,101,128,37,226,114,2,61,120,61,131,229,227,244,225,238,231,236,101,128,37,172,233,231,232,244,240,239,233,238,244,233,238,103,2,61,148,61,158,240,239,233,238,244,229,114,128,37,186,244,242,233,225,238,231,236,101,128,37,182,115,3,61,177,61,207,61,215,109,2,61,183,61,195,225,236,236,243,241,245,225,242,101,128,37,170,233,236,233,238,231,230,225,227,101,128,38,59,241,245,225,242,101,128,37,160,244,225,114,128,38,5,245,240,112,2,61,229,62,11,229,114,2,61,236,61,251,236,229,230,244,244,242,233,225,238,231,236,101,128,37,228,242,233,231,232,244,244,242,233,225,238,231,236,101,128,37,229,239,233,238,244,233,238,103,2,62,23,62,39,243,237,225,236,236,244,242,233,225,238,231,236,101,128,37,180,244,242,233,225,238,231,236,101,128,37,178,238,107,128,36,35,233,238,229,226,229,236,239,119,128,30,7,239,227,107,128,37,136,237,239,238,239,243,240,225,227,101,128,255,66,111,3,62,92,62,105,62,116,226,225,233,237,225,233,244,232,225,105,128,14,26,232,233,242,225,231,225,238,97,128,48,124,235,225,244,225,235,225,238,97,128,48,220,240,225,242,229,110,128,36,157,241,243,241,245,225,242,101,128,51,195,114,4,62,155,63,149,63,222,64,5,225,99,2,62,162,63,56,101,3,62,170,62,175,62,243,229,120,128,248,244,236,229,230,116,133,0,123,62,192,62,197,62,219,62,227,62,232,226,116,128,248,243,109,2,62,203,62,208,233,100,128,248,242,239,238,239,243,240,225,227,101,128,255,91,243,237,225,236,108,128,254,91,244,112,128,248,241,246,229,242,244,233,227,225,108,128,254,55,242,233,231,232,116,133,0,125,63,5,63,10,63,32,63,40,63,45,226,116,128,248,254,109,2,63,16,63,21,233,100,128,248,253,239,238,239,243,240,225,227,101,128,255,93,243,237,225,236,108,128,254,92,244,112,128,248,252,246,229,242,244,233,227,225,108,128,254,56,235,229,116,2,63,64,63,106,236,229,230,116,132,0,91,63,79,63,84,63,89,63,101,226,116,128,248,240,229,120,128,248,239,237,239,238,239,243,240,225,227,101,128,255,59,244,112,128,248,238,242,233,231,232,116,132,0,93,63,122,63,127,63,132,63,144,226,116,128,248,251,229,120,128,248,250,237,239,238,239,243,240,225,227,101,128,255,61,244,112,128,248,249,229,246,101,131,2,216,63,161,63,172,63,178,226,229,236,239,247,227,237,98,128,3,46,227,237,98,128,3,6,233,238,246,229,242,244,229,100,3,63,193,63,204,63,210,226,229,236,239,247,227,237,98,128,3,47,227,237,98,128,3,17,228,239,245,226,236,229,227,237,98,128,3,97,233,228,231,101,2,63,231,63,242,226,229,236,239,247,227,237,98,128,3,42,233,238,246,229,242,244,229,228,226,229,236,239,247,227,237,98,128,3,58,239,235,229,238,226,225,114,128,0,166,115,2,64,21,64,29,244,242,239,235,101,128,1,128,245,240,229,242,233,239,114,128,246,234,244,239,240,226,225,114,128,1,131,117,3,64,56,64,67,64,78,232,233,242,225,231,225,238,97,128,48,118,235,225,244,225,235,225,238,97,128,48,214,236,108,2,64,85,64,115,229,116,130,32,34,64,94,64,104,233,238,246,229,242,243,101,128,37,216,239,240,229,242,225,244,239,114,128,34,25,243,229,249,101,128,37,206,99,143,0,99,64,156,65,105,65,116,65,180,65,211,66,48,67,215,68,199,69,43,69,92,72,84,72,92,72,102,72,114,72,147,97,9,64,176,64,187,64,197,64,204,64,211,64,236,64,246,65,42,65,51,225,242,237,229,238,233,225,110,128,5,110,226,229,238,231,225,236,105,128,9,154,227,245,244,101,128,1,7,228,229,246,97,128,9,26,231,117,2,64,218,64,227,234,225,242,225,244,105,128,10,154,242,237,245,235,232,105,128,10,26,236,243,241,245,225,242,101,128,51,136,238,228,242,225,226,233,238,228,117,4,65,8,65,18,65,24,65,31,226,229,238,231,225,236,105,128,9,129,227,237,98,128,3,16,228,229,246,97,128,9,1,231,245,234,225,242,225,244,105,128,10,129,240,243,236,239,227,107,128,33,234,114,3,65,59,65,65,65,91,229,239,102,128,33,5,239,110,130,2,199,65,74,65,85,226,229,236,239,247,227,237,98,128,3,44,227,237,98,128,3,12,242,233,225,231,229,242,229,244,245,242,110,128,33,181,226,239,240,239,237,239,230,111,128,49,24,99,4,65,126,65,133,65,152,65,174,225,242,239,110,128,1,13,229,228,233,236,236,97,129,0,231,65,144,225,227,245,244,101,128,30,9,233,242,99,2,65,160,65,165,236,101,128,36,210,245,237,230,236,229,120,128,1,9,245,242,108,128,2,85,100,2,65,186,65,202,239,116,129,1,11,65,193,225,227,227,229,238,116,128,1,11,243,241,245,225,242,101,128,51,197,101,2,65,217,65,233,228,233,236,236,97,129,0,184,65,227,227,237,98,128,3,39,238,116,132,0,162,65,246,66,14,66,26,66,37,105,2,65,252,66,4,231,242,225,228,101,128,33,3,238,230,229,242,233,239,114,128,246,223,237,239,238,239,243,240,225,227,101,128,255,224,239,236,228,243,244,249,236,101,128,247,162,243,245,240,229,242,233,239,114,128,246,224,104,5,66,60,66,123,66,134,67,62,67,154,97,4,66,70,66,81,66,91,66,98,225,242,237,229,238,233,225,110,128,5,121,226,229,238,231,225,236,105,128,9,155,228,229,246,97,128,9,27,231,117,2,66,105,66,114,234,225,242,225,244,105,128,10,155,242,237,245,235,232,105,128,10,27,226,239,240,239,237,239,230,111,128,49,20,101,6,66,148,66,168,66,192,67,4,67,16,67,37,225,226,235,232,225,243,233,225,238,227,249,242,233,236,236,233,99,128,4,189,99,2,66,174,66,182,235,237,225,242,107,128,39,19,249,242,233,236,236,233,99,128,4,71,100,2,66,198,66,242,229,243,227,229,238,228,229,114,2,66,211,66,231,225,226,235,232,225,243,233,225,238,227,249,242,233,236,236,233,99,128,4,191,227,249,242,233,236,236,233,99,128,4,183,233,229,242,229,243,233,243,227,249,242,233,236,236,233,99,128,4,245,232,225,242,237,229,238,233,225,110,128,5,115,235,232,225,235,225,243,243,233,225,238,227,249,242,233,236,236,233,99,128,4,204,246,229,242,244,233,227,225,236,243,244,242,239,235,229,227,249,242,233,236,236,233,99,128,4,185,105,129,3,199,67,68,229,245,227,104,4,67,81,67,116,67,131,67,140,97,2,67,87,67,102,227,233,242,227,236,229,235,239,242,229,225,110,128,50,119,240,225,242,229,238,235,239,242,229,225,110,128,50,23,227,233,242,227,236,229,235,239,242,229,225,110,128,50,105,235,239,242,229,225,110,128,49,74,240,225,242,229,238,235,239,242,229,225,110,128,50,9,111,2,67,160,67,210,227,104,3,67,169,67,191,67,201,225,110,2,67,176,67,184,231,244,232,225,105,128,14,10,244,232,225,105,128,14,8,233,238,231,244,232,225,105,128,14,9,239,229,244,232,225,105,128,14,12,239,107,128,1,136,105,2,67,221,68,67,229,245,99,5,67,235,68,14,68,29,68,38,68,52,97,2,67,241,68,0,227,233,242,227,236,229,235,239,242,229,225,110,128,50,118,240,225,242,229,238,235,239,242,229,225,110,128,50,22,227,233,242,227,236,229,235,239,242,229,225,110,128,50,104,235,239,242,229,225,110,128,49,72,240,225,242,229,238,235,239,242,229,225,110,128,50,8,245,240,225,242,229,238,235,239,242,229,225,110,128,50,28,242,99,2,68,74,68,169,236,101,132,37,203,68,87,68,98,68,103,68,127,237,245,236,244,233,240,236,121,128,34,151,239,116,128,34,153,112,2,68,109,68,115,236,245,115,128,34,149,239,243,244,225,236,237,225,242,107,128,48,54,247,233,244,104,2,68,136,68,152,236,229,230,244,232,225,236,230,226,236,225,227,107,128,37,208,242,233,231,232,244,232,225,236,230,226,236,225,227,107,128,37,209,245,237,230,236,229,120,130,2,198,68,182,68,193,226,229,236,239,247,227,237,98,128,3,45,227,237,98,128,3,2,108,3,68,207,68,213,69,11,229,225,114,128,35,39,233,227,107,4,68,225,68,236,68,245,68,255,225,236,246,229,239,236,225,114,128,1,194,228,229,238,244,225,108,128,1,192,236,225,244,229,242,225,108,128,1,193,242,229,244,242,239,230,236,229,120,128,1,195,245,98,129,38,99,69,18,243,245,233,116,2,69,27,69,35,226,236,225,227,107,128,38,99,247,232,233,244,101,128,38,103,109,3,69,51,69,65,69,76,227,245,226,229,228,243,241,245,225,242,101,128,51,164,239,238,239,243,240,225,227,101,128,255,67,243,241,245,225,242,229,228,243,241,245,225,242,101,128,51,160,111,8,69,110,69,121,69,208,70,150,71,179,71,210,72,61,72,70,225,242,237,229,238,233,225,110,128,5,129,236,239,110,131,0,58,69,133,69,158,69,177,237,239,110,2,69,141,69,149,229,244,225,242,121,128,32,161,239,243,240,225,227,101,128,255,26,115,2,69,164,69,170,233,231,110,128,32,161,237,225,236,108,128,254,85,244,242,233,225,238,231,245,236,225,114,2,69,192,69,202,232,225,236,230,237,239,100,128,2,209,237,239,100,128,2,208,109,2,69,214,70,143,237,97,134,0,44,69,231,70,39,70,50,70,62,70,92,70,115,97,3,69,239,70,9,70,17,226,239,246,101,2,69,248,69,254,227,237,98,128,3,19,242,233,231,232,244,227,237,98,128,3,21,227,227,229,238,116,128,246,195,114,2,70,23,70,30,225,226,233,99,128,6,12,237,229,238,233,225,110,128,5,93,233,238,230,229,242,233,239,114,128,246,225,237,239,238,239,243,240,225,227,101,128,255,12,242,229,246,229,242,243,229,100,2,70,75,70,86,225,226,239,246,229,227,237,98,128,3,20,237,239,100,128,2,189,115,2,70,98,70,105,237,225,236,108,128,254,80,245,240,229,242,233,239,114,128,246,226,244,245,242,238,229,100,2,70,126,70,137,225,226,239,246,229,227,237,98,128,3,18,237,239,100,128,2,187,240,225,243,115,128,38,60,110,2,70,156,70,165,231,242,245,229,238,116,128,34,69,116,2,70,171,70,185,239,245,242,233,238,244,229,231,242,225,108,128,34,46,242,239,108,142,35,3,70,219,70,225,70,240,70,255,71,43,71,88,71,102,71,107,71,112,71,117,71,123,71,128,71,169,71,174,193,195,75,128,0,6,66,2,70,231,70,236,197,76,128,0,7,83,128,0,8,67,2,70,246,70,251,193,78,128,0,24,82,128,0,13,68,3,71,7,71,33,71,38,67,4,71,17,71,21,71,25,71,29,49,128,0,17,50,128,0,18,51,128,0,19,52,128,0,20,197,76,128,0,127,204,69,128,0,16,69,5,71,55,71,59,71,64,71,69,71,74,77,128,0,25,206,81,128,0,5,207,84,128,0,4,211,67,128,0,27,84,2,71,80,71,84,66,128,0,23,88,128,0,3,70,2,71,94,71,98,70,128,0,12,83,128,0,28,199,83,128,0,29,200,84,128,0,9,204,70,128,0,10,206,193,75,128,0,21,210,83,128,0,30,83,5,71,140,71,144,71,154,71,159,71,164,73,128,0,15,79,129,0,14,71,150,84,128,0,2,212,88,128,0,1,213,66,128,0,26,217,78,128,0,22,213,83,128,0,31,214,84,128,0,11,240,249,242,233,231,232,116,129,0,169,71,191,115,2,71,197,71,203,225,238,115,128,248,233,229,242,233,102,128,246,217,114,2,71,216,72,44,238,229,242,226,242,225,227,235,229,116,2,71,231,72,9,236,229,230,116,130,48,12,71,242,71,254,232,225,236,230,247,233,228,244,104,128,255,98,246,229,242,244,233,227,225,108,128,254,65,242,233,231,232,116,130,48,13,72,21,72,33,232,225,236,230,247,233,228,244,104,128,255,99,246,229,242,244,233,227,225,108,128,254,66,240,239,242,225,244,233,239,238,243,241,245,225,242,101,128,51,127,243,241,245,225,242,101,128,51,199,246,229,242,235,231,243,241,245,225,242,101,128,51,198,240,225,242,229,110,128,36,158,242,245,250,229,233,242,111,128,32,162,243,244,242,229,244,227,232,229,100,128,2,151,245,114,2,72,121,72,139,236,121,2,72,128,72,134,225,238,100,128,34,207,239,114,128,34,206,242,229,238,227,121,128,0,164,249,114,4,72,158,72,166,72,173,72,181,194,242,229,246,101,128,246,209,198,236,229,120,128,246,210,226,242,229,246,101,128,246,212,230,236,229,120,128,246,213,100,146,0,100,72,228,74,110,75,134,75,194,76,114,77,68,77,130,78,59,78,72,78,81,78,107,78,132,78,141,79,208,79,216,79,227,79,247,80,19,97,11,72,252,73,7,73,17,73,89,73,152,73,163,73,174,73,243,74,49,74,55,74,85,225,242,237,229,238,233,225,110,128,5,100,226,229,238,231,225,236,105,128,9,166,100,5,73,29,73,38,73,44,73,58,73,74,225,242,225,226,233,99,128,6,54,229,246,97,128,9,38,230,233,238,225,236,225,242,225,226,233,99,128,254,190,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,191,237,229,228,233,225,236,225,242,225,226,233,99,128,254,192,103,3,73,97,73,114,73,128,229,243,104,129,5,188,73,105,232,229,226,242,229,119,128,5,188,231,229,114,129,32,32,73,122,228,226,108,128,32,33,117,2,73,134,73,143,234,225,242,225,244,105,128,10,166,242,237,245,235,232,105,128,10,38,232,233,242,225,231,225,238,97,128,48,96,235,225,244,225,235,225,238,97,128,48,192,108,3,73,182,73,191,73,229,225,242,225,226,233,99,128,6,47,229,116,130,5,211,73,200,73,220,228,225,231,229,243,104,129,251,51,73,211,232,229,226,242,229,119,128,251,51,232,229,226,242,229,119,128,5,211,230,233,238,225,236,225,242,225,226,233,99,128,254,170,237,237,97,3,73,253,74,6,74,18,225,242,225,226,233,99,128,6,79,236,239,247,225,242,225,226,233,99,128,6,79,244,225,238,97,2,74,27,74,41,236,244,239,238,229,225,242,225,226,233,99,128,6,76,242,225,226,233,99,128,6,76,238,228,97,128,9,100,242,231,97,2,74,63,74,72,232,229,226,242,229,119,128,5,167,236,229,230,244,232,229,226,242,229,119,128,5,167,243,233,225,240,238,229,245,237,225,244,225,227,249,242,233,236,236,233,227,227,237,98,128,4,133,98,3,74,118,75,115,75,125,108,9,74,138,74,146,75,3,75,11,75,27,75,38,75,56,75,70,75,81,199,242,225,246,101,128,246,211,97,2,74,152,74,209,238,231,236,229,226,242,225,227,235,229,116,2,74,168,74,188,236,229,230,116,129,48,10,74,177,246,229,242,244,233,227,225,108,128,254,61,242,233,231,232,116,129,48,11,74,198,246,229,242,244,233,227,225,108,128,254,62,114,2,74,215,74,236,227,232,233,238,246,229,242,244,229,228,226,229,236,239,247,227,237,98,128,3,43,242,239,119,2,74,244,74,251,236,229,230,116,128,33,212,242,233,231,232,116,128,33,210,228,225,238,228,97,128,9,101,231,242,225,246,101,129,246,214,75,21,227,237,98,128,3,15,233,238,244,229,231,242,225,108,128,34,44,236,239,247,236,233,238,101,129,32,23,75,50,227,237,98,128,3,51,239,246,229,242,236,233,238,229,227,237,98,128,3,63,240,242,233,237,229,237,239,100,128,2,186,246,229,242,244,233,227,225,108,2,75,94,75,100,226,225,114,128,32,22], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40961);
/* memory initializer */ allocate([236,233,238,229,225,226,239,246,229,227,237,98,128,3,14,239,240,239,237,239,230,111,128,49,9,243,241,245,225,242,101,128,51,200,99,4,75,144,75,151,75,160,75,187,225,242,239,110,128,1,15,229,228,233,236,236,97,128,30,17,233,242,99,2,75,168,75,173,236,101,128,36,211,245,237,230,236,229,248,226,229,236,239,119,128,30,19,242,239,225,116,128,1,17,100,4,75,204,76,29,76,39,76,90,97,4,75,214,75,224,75,231,76,0,226,229,238,231,225,236,105,128,9,161,228,229,246,97,128,9,33,231,117,2,75,238,75,247,234,225,242,225,244,105,128,10,161,242,237,245,235,232,105,128,10,33,108,2,76,6,76,15,225,242,225,226,233,99,128,6,136,230,233,238,225,236,225,242,225,226,233,99,128,251,137,228,232,225,228,229,246,97,128,9,92,232,97,3,76,48,76,58,76,65,226,229,238,231,225,236,105,128,9,162,228,229,246,97,128,9,34,231,117,2,76,72,76,81,234,225,242,225,244,105,128,10,162,242,237,245,235,232,105,128,10,34,239,116,2,76,97,76,106,225,227,227,229,238,116,128,30,11,226,229,236,239,119,128,30,13,101,8,76,132,76,185,76,192,76,217,76,227,76,238,77,27,77,63,99,2,76,138,76,175,233,237,225,236,243,229,240,225,242,225,244,239,114,2,76,156,76,165,225,242,225,226,233,99,128,6,107,240,229,242,243,233,225,110,128,6,107,249,242,233,236,236,233,99,128,4,52,231,242,229,101,128,0,176,232,105,2,76,199,76,208,232,229,226,242,229,119,128,5,173,242,225,231,225,238,97,128,48,103,233,227,239,240,244,233,99,128,3,239,235,225,244,225,235,225,238,97,128,48,199,108,2,76,244,77,11,229,244,101,2,76,252,77,3,236,229,230,116,128,35,43,242,233,231,232,116,128,35,38,244,97,129,3,180,77,18,244,245,242,238,229,100,128,1,141,238,239,237,233,238,225,244,239,242,237,233,238,245,243,239,238,229,238,245,237,229,242,225,244,239,242,226,229,238,231,225,236,105,128,9,248,250,104,128,2,164,104,2,77,74,77,124,97,3,77,82,77,92,77,99,226,229,238,231,225,236,105,128,9,167,228,229,246,97,128,9,39,231,117,2,77,106,77,115,234,225,242,225,244,105,128,10,167,242,237,245,235,232,105,128,10,39,239,239,107,128,2,87,105,6,77,144,77,193,77,253,78,8,78,19,78,29,97,2,77,150,77,172,236,249,244,233,235,225,244,239,238,239,115,129,3,133,77,166,227,237,98,128,3,68,237,239,238,100,129,38,102,77,181,243,245,233,244,247,232,233,244,101,128,38,98,229,242,229,243,233,115,133,0,168,77,212,77,220,77,231,77,237,77,245,225,227,245,244,101,128,246,215,226,229,236,239,247,227,237,98,128,3,36,227,237,98,128,3,8,231,242,225,246,101,128,246,216,244,239,238,239,115,128,3,133,232,233,242,225,231,225,238,97,128,48,98,235,225,244,225,235,225,238,97,128,48,194,244,244,239,237,225,242,107,128,48,3,246,105,2,78,36,78,47,228,101,129,0,247,78,43,115,128,34,35,243,233,239,238,243,236,225,243,104,128,34,21,234,229,227,249,242,233,236,236,233,99,128,4,82,235,243,232,225,228,101,128,37,147,108,2,78,87,78,98,233,238,229,226,229,236,239,119,128,30,15,243,241,245,225,242,101,128,51,151,109,2,78,113,78,121,225,227,242,239,110,128,1,17,239,238,239,243,240,225,227,101,128,255,68,238,226,236,239,227,107,128,37,132,111,10,78,163,78,175,78,185,78,196,78,207,79,23,79,28,79,39,79,154,79,180,227,232,225,228,225,244,232,225,105,128,14,14,228,229,235,244,232,225,105,128,14,20,232,233,242,225,231,225,238,97,128,48,105,235,225,244,225,235,225,238,97,128,48,201,236,236,225,114,132,0,36,78,222,78,233,78,245,79,0,233,238,230,229,242,233,239,114,128,246,227,237,239,238,239,243,240,225,227,101,128,255,4,239,236,228,243,244,249,236,101,128,247,36,115,2,79,6,79,13,237,225,236,108,128,254,105,245,240,229,242,233,239,114,128,246,228,238,103,128,32,171,242,245,243,241,245,225,242,101,128,51,38,116,6,79,53,79,70,79,92,79,103,79,135,79,142,225,227,227,229,238,116,129,2,217,79,64,227,237,98,128,3,7,226,229,236,239,247,99,2,79,81,79,86,237,98,128,3,35,239,237,98,128,3,35,235,225,244,225,235,225,238,97,128,48,251,236,229,243,115,2,79,112,79,116,105,128,1,49,106,129,246,190,79,122,243,244,242,239,235,229,232,239,239,107,128,2,132,237,225,244,104,128,34,197,244,229,228,227,233,242,227,236,101,128,37,204,245,226,236,229,249,239,228,240,225,244,225,104,129,251,31,79,171,232,229,226,242,229,119,128,251,31,247,238,244,225,227,107,2,79,191,79,202,226,229,236,239,247,227,237,98,128,3,30,237,239,100,128,2,213,240,225,242,229,110,128,36,159,243,245,240,229,242,233,239,114,128,246,235,116,2,79,233,79,239,225,233,108,128,2,86,239,240,226,225,114,128,1,140,117,2,79,253,80,8,232,233,242,225,231,225,238,97,128,48,101,235,225,244,225,235,225,238,97,128,48,197,122,132,1,243,80,31,80,40,80,59,80,96,225,236,244,239,238,101,128,2,163,99,2,80,46,80,53,225,242,239,110,128,1,198,245,242,108,128,2,165,101,2,80,65,80,85,225,226,235,232,225,243,233,225,238,227,249,242,233,236,236,233,99,128,4,225,227,249,242,233,236,236,233,99,128,4,85,232,229,227,249,242,233,236,236,233,99,128,4,95,101,151,0,101,80,159,80,178,80,212,81,186,81,248,82,25,82,37,82,60,82,113,83,225,84,27,84,129,84,245,85,124,85,199,85,230,86,36,86,89,87,24,87,157,87,177,87,221,88,56,97,2,80,165,80,172,227,245,244,101,128,0,233,242,244,104,128,38,65,98,3,80,186,80,195,80,205,229,238,231,225,236,105,128,9,143,239,240,239,237,239,230,111,128,49,28,242,229,246,101,128,1,21,99,5,80,224,81,41,81,55,81,87,81,176,97,2,80,230,81,35,238,228,242,97,3,80,241,80,248,81,3,228,229,246,97,128,9,13,231,245,234,225,242,225,244,105,128,10,141,246,239,247,229,236,243,233,231,110,2,81,17,81,24,228,229,246,97,128,9,69,231,245,234,225,242,225,244,105,128,10,197,242,239,110,128,1,27,229,228,233,236,236,225,226,242,229,246,101,128,30,29,104,2,81,61,81,72,225,242,237,229,238,233,225,110,128,5,101,249,233,247,238,225,242,237,229,238,233,225,110,128,5,135,233,242,99,2,81,95,81,100,236,101,128,36,212,245,237,230,236,229,120,134,0,234,81,121,81,129,81,137,81,148,81,156,81,168,225,227,245,244,101,128,30,191,226,229,236,239,119,128,30,25,228,239,244,226,229,236,239,119,128,30,199,231,242,225,246,101,128,30,193,232,239,239,235,225,226,239,246,101,128,30,195,244,233,236,228,101,128,30,197,249,242,233,236,236,233,99,128,4,84,100,4,81,196,81,206,81,212,81,222,226,236,231,242,225,246,101,128,2,5,229,246,97,128,9,15,233,229,242,229,243,233,115,128,0,235,239,116,130,1,23,81,231,81,240,225,227,227,229,238,116,128,1,23,226,229,236,239,119,128,30,185,101,2,81,254,82,9,231,245,242,237,245,235,232,105,128,10,15,237,225,244,242,225,231,245,242,237,245,235,232,105,128,10,71,230,227,249,242,233,236,236,233,99,128,4,68,103,2,82,43,82,50,242,225,246,101,128,0,232,245,234,225,242,225,244,105,128,10,143,104,4,82,70,82,81,82,92,82,102,225,242,237,229,238,233,225,110,128,5,103,226,239,240,239,237,239,230,111,128,49,29,233,242,225,231,225,238,97,128,48,72,239,239,235,225,226,239,246,101,128,30,187,105,4,82,123,82,134,83,192,83,207,226,239,240,239,237,239,230,111,128,49,31,231,232,116,142,0,56,82,168,82,177,82,187,82,217,82,224,83,6,83,31,83,76,83,110,83,122,83,133,83,166,83,174,83,185,225,242,225,226,233,99,128,6,104,226,229,238,231,225,236,105,128,9,238,227,233,242,227,236,101,129,36,103,82,198,233,238,246,229,242,243,229,243,225,238,243,243,229,242,233,102,128,39,145,228,229,246,97,128,9,110,229,229,110,2,82,232,82,241,227,233,242,227,236,101,128,36,113,112,2,82,247,82,254,225,242,229,110,128,36,133,229,242,233,239,100,128,36,153,231,117,2,83,13,83,22,234,225,242,225,244,105,128,10,238,242,237,245,235,232,105,128,10,110,104,2,83,37,83,63,97,2,83,43,83,54,227,235,225,242,225,226,233,99,128,6,104,238,231,250,232,239,117,128,48,40,238,239,244,229,226,229,225,237,229,100,128,38,107,105,2,83,82,83,100,228,229,239,231,242,225,240,232,233,227,240,225,242,229,110,128,50,39,238,230,229,242,233,239,114,128,32,136,237,239,238,239,243,240,225,227,101,128,255,24,239,236,228,243,244,249,236,101,128,247,56,112,2,83,139,83,146,225,242,229,110,128,36,123,229,114,2,83,153,83,159,233,239,100,128,36,143,243,233,225,110,128,6,248,242,239,237,225,110,128,33,119,243,245,240,229,242,233,239,114,128,32,120,244,232,225,105,128,14,88,238,246,229,242,244,229,228,226,242,229,246,101,128,2,7,239,244,233,230,233,229,228,227,249,242,233,236,236,233,99,128,4,101,107,2,83,231,83,255,225,244,225,235,225,238,97,129,48,168,83,243,232,225,236,230,247,233,228,244,104,128,255,116,111,2,84,5,84,20,238,235,225,242,231,245,242,237,245,235,232,105,128,10,116,242,229,225,110,128,49,84,108,3,84,35,84,46,84,107,227,249,242,233,236,236,233,99,128,4,59,101,2,84,52,84,59,237,229,238,116,128,34,8,246,229,110,3,84,69,84,78,84,99,227,233,242,227,236,101,128,36,106,112,2,84,84,84,91,225,242,229,110,128,36,126,229,242,233,239,100,128,36,146,242,239,237,225,110,128,33,122,236,233,240,243,233,115,129,32,38,84,118,246,229,242,244,233,227,225,108,128,34,238,109,5,84,141,84,169,84,180,84,200,84,211,225,227,242,239,110,130,1,19,84,153,84,161,225,227,245,244,101,128,30,23,231,242,225,246,101,128,30,21,227,249,242,233,236,236,233,99,128,4,60,228,225,243,104,129,32,20,84,189,246,229,242,244,233,227,225,108,128,254,49,239,238,239,243,240,225,227,101,128,255,69,112,2,84,217,84,237,232,225,243,233,243,237,225,242,235,225,242,237,229,238,233,225,110,128,5,91,244,249,243,229,116,128,34,5,110,6,85,3,85,14,85,25,85,69,85,101,85,116,226,239,240,239,237,239,230,111,128,49,35,227,249,242,233,236,236,233,99,128,4,61,100,2,85,31,85,50,225,243,104,129,32,19,85,39,246,229,242,244,233,227,225,108,128,254,50,229,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,163,103,130,1,75,85,77,85,88,226,239,240,239,237,239,230,111,128,49,37,232,229,227,249,242,233,236,236,233,99,128,4,165,232,239,239,235,227,249,242,233,236,236,233,99,128,4,200,243,240,225,227,101,128,32,2,111,3,85,132,85,140,85,149,231,239,238,229,107,128,1,25,235,239,242,229,225,110,128,49,83,240,229,110,130,2,91,85,159,85,168,227,236,239,243,229,100,128,2,154,242,229,246,229,242,243,229,100,130,2,92,85,183,85,192,227,236,239,243,229,100,128,2,94,232,239,239,107,128,2,93,112,2,85,205,85,212,225,242,229,110,128,36,160,243,233,236,239,110,129,3,181,85,222,244,239,238,239,115,128,3,173,241,117,2,85,237,86,25,225,108,130,0,61,85,246,86,2,237,239,238,239,243,240,225,227,101,128,255,29,115,2,86,8,86,15,237,225,236,108,128,254,102,245,240,229,242,233,239,114,128,32,124,233,246,225,236,229,238,227,101,128,34,97,114,3,86,44,86,55,86,66,226,239,240,239,237,239,230,111,128,49,38,227,249,242,233,236,236,233,99,128,4,64,229,246,229,242,243,229,100,129,2,88,86,78,227,249,242,233,236,236,233,99,128,4,77,115,6,86,103,86,114,86,134,86,215,87,4,87,14,227,249,242,233,236,236,233,99,128,4,65,228,229,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,171,104,132,2,131,86,146,86,153,86,184,86,199,227,245,242,108,128,2,134,239,242,116,2,86,161,86,168,228,229,246,97,128,9,14,246,239,247,229,236,243,233,231,238,228,229,246,97,128,9,70,242,229,246,229,242,243,229,228,236,239,239,112,128,1,170,243,241,245,225,244,242,229,246,229,242,243,229,100,128,2,133,237,225,236,108,2,86,224,86,235,232,233,242,225,231,225,238,97,128,48,71,235,225,244,225,235,225,238,97,129,48,167,86,248,232,225,236,230,247,233,228,244,104,128,255,106,244,233,237,225,244,229,100,128,33,46,245,240,229,242,233,239,114,128,246,236,116,5,87,36,87,62,87,66,87,83,87,149,97,130,3,183,87,44,87,54,242,237,229,238,233,225,110,128,5,104,244,239,238,239,115,128,3,174,104,128,0,240,233,236,228,101,129,30,189,87,75,226,229,236,239,119,128,30,27,238,225,232,244,97,3,87,95,87,127,87,136,230,239,245,235,104,2,87,105,87,114,232,229,226,242,229,119,128,5,145,236,229,230,244,232,229,226,242,229,119,128,5,145,232,229,226,242,229,119,128,5,145,236,229,230,244,232,229,226,242,229,119,128,5,145,245,242,238,229,100,128,1,221,117,2,87,163,87,172,235,239,242,229,225,110,128,49,97,242,111,128,32,172,246,239,247,229,236,243,233,231,110,3,87,193,87,203,87,210,226,229,238,231,225,236,105,128,9,199,228,229,246,97,128,9,71,231,245,234,225,242,225,244,105,128,10,199,120,2,87,227,88,44,227,236,225,109,132,0,33,87,242,87,253,88,24,88,36,225,242,237,229,238,233,225,110,128,5,92,100,2,88,3,88,8,226,108,128,32,60,239,247,110,129,0,161,88,16,243,237,225,236,108,128,247,161,237,239,238,239,243,240,225,227,101,128,255,1,243,237,225,236,108,128,247,33,233,243,244,229,238,244,233,225,108,128,34,3,250,104,131,2,146,88,67,88,86,88,97,99,2,88,73,88,80,225,242,239,110,128,1,239,245,242,108,128,2,147,242,229,246,229,242,243,229,100,128,1,185,244,225,233,108,128,1,186,102,140,0,102,88,132,88,214,88,225,88,234,88,246,89,93,89,109,91,117,91,130,91,156,93,33,93,41,97,4,88,142,88,149,88,160,88,171,228,229,246,97,128,9,94,231,245,242,237,245,235,232,105,128,10,94,232,242,229,238,232,229,233,116,128,33,9,244,232,97,3,88,181,88,190,88,202,225,242,225,226,233,99,128,6,78,236,239,247,225,242,225,226,233,99,128,6,78,244,225,238,225,242,225,226,233,99,128,6,75,226,239,240,239,237,239,230,111,128,49,8,227,233,242,227,236,101,128,36,213,228,239,244,225,227,227,229,238,116,128,30,31,101,3,88,254,89,76,89,86,104,4,89,8,89,31,89,45,89,61,225,114,2,89,15,89,22,225,226,233,99,128,6,65,237,229,238,233,225,110,128,5,134,230,233,238,225,236,225,242,225,226,233,99,128,254,210,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,211,237,229,228,233,225,236,225,242,225,226,233,99,128,254,212,233,227,239,240,244,233,99,128,3,229,237,225,236,101,128,38,64,102,130,251,0,89,101,89,105,105,128,251,3,108,128,251,4,105,136,251,1,89,129,89,169,89,180,89,202,90,68,90,85,90,93,90,106,230,244,229,229,110,2,89,139,89,148,227,233,242,227,236,101,128,36,110,112,2,89,154,89,161,225,242,229,110,128,36,130,229,242,233,239,100,128,36,150,231,245,242,229,228,225,243,104,128,32,18,236,236,229,100,2,89,189,89,195,226,239,120,128,37,160,242,229,227,116,128,37,172,238,225,108,5,89,216,89,255,90,16,90,33,90,49,235,225,102,130,5,218,89,226,89,246,228,225,231,229,243,104,129,251,58,89,237,232,229,226,242,229,119,128,251,58,232,229,226,242,229,119,128,5,218,237,229,109,129,5,221,90,7,232,229,226,242,229,119,128,5,221,238,245,110,129,5,223,90,24,232,229,226,242,229,119,128,5,223,240,101,129,5,227,90,40,232,229,226,242,229,119,128,5,227,244,243,225,228,105,129,5,229,90,59,232,229,226,242,229,119,128,5,229,242,243,244,244,239,238,229,227,232,233,238,229,243,101,128,2,201,243,232,229,249,101,128,37,201,244,225,227,249,242,233,236,236,233,99,128,4,115,246,101,142,0,53,90,139,90,148,90,158,90,188,90,195,90,205,90,230,91,1,91,35,91,47,91,58,91,91,91,99,91,110,225,242,225,226,233,99,128,6,101,226,229,238,231,225,236,105,128,9,235,227,233,242,227,236,101,129,36,100,90,169,233,238,246,229,242,243,229,243,225,238,243,243,229,242,233,102,128,39,142,228,229,246,97,128,9,107,229,233,231,232,244,232,115,128,33,93,231,117,2,90,212,90,221,234,225,242,225,244,105,128,10,235,242,237,245,235,232,105,128,10,107,232,97,2,90,237,90,248,227,235,225,242,225,226,233,99,128,6,101,238,231,250,232,239,117,128,48,37,105,2,91,7,91,25,228,229,239,231,242,225,240,232,233,227,240,225,242,229,110,128,50,36,238,230,229,242,233,239,114,128,32,133,237,239,238,239,243,240,225,227,101,128,255,21,239,236,228,243,244,249,236,101,128,247,53,112,2,91,64,91,71,225,242,229,110,128,36,120,229,114,2,91,78,91,84,233,239,100,128,36,140,243,233,225,110,128,6,245,242,239,237,225,110,128,33,116,243,245,240,229,242,233,239,114,128,32,117,244,232,225,105,128,14,85,108,129,251,2,91,123,239,242,233,110,128,1,146,109,2,91,136,91,147,239,238,239,243,240,225,227,101,128,255,70,243,241,245,225,242,101,128,51,153,111,4,91,166,91,188,91,200,91,207,230,97,2,91,173,91,181,238,244,232,225,105,128,14,31,244,232,225,105,128,14,29,238,231,237,225,238,244,232,225,105,128,14,79,242,225,236,108,128,34,0,245,114,142,0,52,91,240,91,249,92,3,92,33,92,40,92,65,92,92,92,126,92,138,92,157,92,168,92,201,92,209,92,220,225,242,225,226,233,99,128,6,100,226,229,238,231,225,236,105,128,9,234,227,233,242,227,236,101,129,36,99,92,14,233,238,246,229,242,243,229,243,225,238,243,243,229,242,233,102,128,39,141,228,229,246,97,128,9,106,231,117,2,92,47,92,56,234,225,242,225,244,105,128,10,234,242,237,245,235,232,105,128,10,106,232,97,2,92,72,92,83,227,235,225,242,225,226,233,99,128,6,100,238,231,250,232,239,117,128,48,36,105,2,92,98,92,116,228,229,239,231,242,225,240,232,233,227,240,225,242,229,110,128,50,35,238,230,229,242,233,239,114,128,32,132,237,239,238,239,243,240,225,227,101,128,255,20,238,245,237,229,242,225,244,239,242,226,229,238,231,225,236,105,128,9,247,239,236,228,243,244,249,236,101,128,247,52,112,2,92,174,92,181,225,242,229,110,128,36,119,229,114,2,92,188,92,194,233,239,100,128,36,139,243,233,225,110,128,6,244,242,239,237,225,110,128,33,115,243,245,240,229,242,233,239,114,128,32,116,116,2,92,226,93,8,229,229,110,2,92,234,92,243,227,233,242,227,236,101,128,36,109,112,2,92,249,93,0,225,242,229,110,128,36,129,229,242,233,239,100,128,36,149,104,2,93,14,93,19,225,105,128,14,84,244,239,238,229,227,232,233,238,229,243,101,128,2,203,240,225,242,229,110,128,36,161,242,97,2,93,48,93,56,227,244,233,239,110,128,32,68,238,99,128,32,163,103,144,0,103,93,97,94,43,94,66,94,127,94,144,95,65,96,58,96,143,96,156,97,14,97,39,97,67,97,89,98,34,98,56,98,158,97,9,93,117,93,127,93,134,93,141,93,205,93,230,93,241,93,252,94,30,226,229,238,231,225,236,105,128,9,151,227,245,244,101,128,1,245,228,229,246,97,128,9,23,102,4,93,151,93,160,93,174,93,190,225,242,225,226,233,99,128,6,175,230,233,238,225,236,225,242,225,226,233,99,128,251,147,233,238,233,244,233,225,236,225,242,225,226,233,99,128,251,148,237,229,228,233,225,236,225,242,225,226,233,99,128,251,149,231,117,2,93,212,93,221,234,225,242,225,244,105,128,10,151,242,237,245,235,232,105,128,10,23,232,233,242,225,231,225,238,97,128,48,76,235,225,244,225,235,225,238,97,128,48,172,237,237,97,130,3,179,94,6,94,19,236,225,244,233,238,243,237,225,236,108,128,2,99,243,245,240,229,242,233,239,114,128,2,224,238,231,233,225,227,239,240,244,233,99,128,3,235,98,2,94,49,94,59,239,240,239,237,239,230,111,128,49,13,242,229,246,101,128,1,31,99,4,94,76,94,83,94,92,94,114,225,242,239,110,128,1,231,229,228,233,236,236,97,128,1,35,233,242,99,2,94,100,94,105,236,101,128,36,214,245,237,230,236,229,120,128,1,29,239,237,237,225,225,227,227,229,238,116,128,1,35,228,239,116,129,1,33,94,135,225,227,227,229,238,116,128,1,33,101,6,94,158,94,169,94,180,94,191,94,210,95,56,227,249,242,233,236,236,233,99,128,4,51,232,233,242,225,231,225,238,97,128,48,82,235,225,244,225,235,225,238,97,128,48,178,239,237,229,244,242,233,227,225,236,236,249,229,241,245,225,108,128,34,81,114,3,94,218,95,11,95,21,229,243,104,3,94,228,94,243,94,252,225,227,227,229,238,244,232,229,226,242,229,119,128,5,156,232,229,226,242,229,119,128,5,243,237,245,241,228,225,237,232,229,226,242,229,119,128,5,157,237,225,238,228,226,236,115,128,0,223,243,232,225,249,233,109,2,95,32,95,47,225,227,227,229,238,244,232,229,226,242,229,119,128,5,158,232,229,226,242,229,119,128,5,244,244,225,237,225,242,107,128,48,19,104,5,95,77,95,210,96,17,96,42,96,48,97,4,95,87,95,97,95,120,95,145,226,229,238,231,225,236,105,128,9,152,100,2,95,103,95,114,225,242,237,229,238,233,225,110,128,5,114,229,246,97,128,9,24,231,117,2,95,127,95,136,234,225,242,225,244,105,128,10,152,242,237,245,235,232,105,128,10,24,233,110,4,95,156,95,165,95,179,95,195,225,242,225,226,233,99,128,6,58,230,233,238,225,236,225,242,225,226,233,99,128,254,206,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,207,237,229,228,233,225,236,225,242,225,226,233,99,128,254,208,101,3,95,218,95,239,96,0,237,233,228,228,236,229,232,239,239,235,227,249,242,233,236,236,233,99,128,4,149,243,244,242,239,235,229,227,249,242,233,236,236,233,99,128,4,147,245,240,244,245,242,238,227,249,242,233,236,236,233,99,128,4,145,232,97,2,96,24,96,31,228,229,246,97,128,9,90,231,245,242,237,245,235,232,105,128,10,90,239,239,107,128,2,96,250,243,241,245,225,242,101,128,51,147,105,3,96,66,96,77,96,88,232,233,242,225,231,225,238,97,128,48,78,235,225,244,225,235,225,238,97,128,48,174,109,2,96,94,96,105,225,242,237,229,238,233,225,110,128,5,99,229,108,130,5,210,96,114,96,134,228,225,231,229,243,104,129,251,50,96,125,232,229,226,242,229,119,128,251,50,232,229,226,242,229,119,128,5,210,234,229,227,249,242,233,236,236,233,99,128,4,83,236,239,244,244,225,108,2,96,167,96,184,233,238,246,229,242,244,229,228,243,244,242,239,235,101,128,1,190,243,244,239,112,132,2,148,96,199,96,210,96,216,96,248,233,238,246,229,242,244,229,100,128,2,150,237,239,100,128,2,192,242,229,246,229,242,243,229,100,130,2,149,96,231,96,237,237,239,100,128,2,193,243,245,240,229,242,233,239,114,128,2,228,243,244,242,239,235,101,129,2,161,97,3,242,229,246,229,242,243,229,100,128,2,162,109,2,97,20,97,28,225,227,242,239,110,128,30,33,239,238,239,243,240,225,227,101,128,255,71,111,2,97,45,97,56,232,233,242,225,231,225,238,97,128,48,84,235,225,244,225,235,225,238,97,128,48,180,240,97,2,97,74,97,80,242,229,110,128,36,162,243,241,245,225,242,101,128,51,172,114,2,97,95,97,192,97,2,97,101,97,109,228,233,229,238,116,128,34,7,246,101,134,0,96,97,126,97,137,97,154,97,161,97,170,97,182,226,229,236,239,247,227,237,98,128,3,22,99,2,97,143,97,148,237,98,128,3,0,239,237,98,128,3,0,228,229,246,97,128,9,83,236,239,247,237,239,100,128,2,206,237,239,238,239,243,240,225,227,101,128,255,64,244,239,238,229,227,237,98,128,3,64,229,225,244,229,114,132,0,62,97,208,97,227,97,239,98,26,229,241,245,225,108,129,34,101,97,218,239,242,236,229,243,115,128,34,219,237,239,238,239,243,240,225,227,101,128,255,30,111,2,97,245,98,15,114,2,97,251,98,8,229,241,245,233,246,225,236,229,238,116,128,34,115,236,229,243,115,128,34,119,246,229,242,229,241,245,225,108,128,34,103,243,237,225,236,108,128,254,101,115,2,98,40,98,48,227,242,233,240,116,128,2,97,244,242,239,235,101,128,1,229,117,4,98,66,98,77,98,134,98,145,232,233,242,225,231,225,238,97,128,48,80,233,108,2,98,84,98,109,236,229,237,239,116,2,98,94,98,101,236,229,230,116,128,0,171,242,233,231,232,116,128,0,187,243,233,238,231,108,2,98,119,98,126,236,229,230,116,128,32,57,242,233,231,232,116,128,32,58,235,225,244,225,235,225,238,97,128,48,176,242,225,237,245,243,241,245,225,242,101,128,51,24,249,243,241,245,225,242,101,128,51,201,104,144,0,104,98,204,101,90,101,125,101,162,101,202,103,90,103,110,104,75,104,87,104,99,105,167,105,175,105,186,105,195,106,19,106,23,97,13,98,232,99,15,99,25,99,55,99,80,99,158,99,170,99,195,99,210,99,239,99,252,100,54,100,63,97,2,98,238,99,1,226,235,232,225,243,233,225,238,227,249,242,233,236,236,233,99,128,4,169,236,244,239,238,229,225,242,225,226,233,99,128,6,193,226,229,238,231,225,236,105,128,9,185,228,101,2,99,32,99,50,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,179,246,97,128,9,57,231,117,2,99,62,99,71,234,225,242,225,244,105,128,10,185,242,237,245,235,232,105,128,10,57,104,4,99,90,99,99,99,113,99,143,225,242,225,226,233,99,128,6,45,230,233,238,225,236,225,242,225,226,233,99,128,254,162,105,2,99,119,99,134,238,233,244,233,225,236,225,242,225,226,233,99,128,254,163,242,225,231,225,238,97,128,48,111,237,229,228,233,225,236,225,242,225,226,233,99,128,254,164,233,244,245,243,241,245,225,242,101,128,51,42,235,225,244,225,235,225,238,97,129,48,207,99,183,232,225,236,230,247,233,228,244,104,128,255,138,236,225,238,244,231,245,242,237,245,235,232,105,128,10,77,237,250,97,2,99,218,99,227,225,242,225,226,233,99,128,6,33,236,239,247,225,242,225,226,233,99,128,6,33,238,231,245,236,230,233,236,236,229,114,128,49,100,114,2,100,2,100,18,228,243,233,231,238,227,249,242,233,236,236,233,99,128,4,74,240,239,239,110,2,100,27,100,40,236,229,230,244,226,225,242,226,245,112,128,33,188,242,233,231,232,244,226,225,242,226,245,112,128,33,192,243,241,245,225,242,101,128,51,202,244,225,102,3,100,73,100,165,101,0,240,225,244,225,104,134,5,178,100,93,100,98,100,112,100,121,100,136,100,152,177,54,128,5,178,50,2,100,104,100,108,51,128,5,178,102,128,5,178,232,229,226,242,229,119,128,5,178,238,225,242,242,239,247,232,229,226,242,229,119,128,5,178,241,245,225,242,244,229,242,232,229,226,242,229,119,128,5,178,247,233,228,229,232,229,226,242,229,119,128,5,178,241,225,237,225,244,115,135,5,179,100,188,100,193,100,198,100,203,100,212,100,227,100,243,177,98,128,5,179,178,56,128,5,179,179,52,128,5,179,232,229,226,242,229,119,128,5,179,238,225,242,242,239,247,232,229,226,242,229,119,128,5,179,241,245,225,242,244,229,242,232,229,226,242,229,119,128,5,179,247,233,228,229,232,229,226,242,229,119,128,5,179,243,229,231,239,108,135,5,177,101,22,101,27,101,32,101,37,101,46,101,61,101,77,177,55,128,5,177,178,52,128,5,177,179,48,128,5,177,232,229,226,242,229,119,128,5,177,238,225,242,242,239,247,232,229,226,242,229,119,128,5,177,241,245,225,242,244,229,242,232,229,226,242,229,119,128,5,177,247,233,228,229,232,229,226,242,229,119,128,5,177,98,3,101,98,101,103,101,113,225,114,128,1,39,239,240,239,237,239,230,111,128,49,15,242,229,246,229,226,229,236,239,119,128,30,43,99,2,101,131,101,140,229,228,233,236,236,97,128,30,41,233,242,99,2,101,148,101,153,236,101,128,36,215,245,237,230,236,229,120,128,1,37,100,2,101,168,101,178,233,229,242,229,243,233,115,128,30,39,239,116,2,101,185,101,194,225,227,227,229,238,116,128,30,35,226,229,236,239,119,128,30,37,101,136,5,212,101,222,101,255,102,19,102,248,103,8,103,53,103,62,103,75,225,242,116,129,38,101,101,230,243,245,233,116,2,101,239,101,247,226,236,225,227,107,128,38,101,247,232,233,244,101,128,38,97,228,225,231,229,243,104,129,251,52,102,10,232,229,226,242,229,119,128,251,52,104,6,102,33,102,61,102,69,102,119,102,165,102,214,97,2,102,39,102,53,236,244,239,238,229,225,242,225,226,233,99,128,6,193,242,225,226,233,99,128,6,71,229,226,242,229,119,128,5,212,230,233,238,225,236,97,2,102,80,102,111,236,116,2,102,87,102,99,239,238,229,225,242,225,226,233,99,128,251,167,244,247,239,225,242,225,226,233,99,128,254,234,242,225,226,233,99,128,254,234,232,225,237,250,225,225,226,239,246,101,2,102,134,102,148,230,233,238,225,236,225,242,225,226,233,99,128,251,165,233,243,239,236,225,244,229,228,225,242,225,226,233,99,128,251,164,105,2,102,171,102,205,238,233,244,233,225,236,97,2,102,183,102,197,236,244,239,238,229,225,242,225,226,233,99,128,251,168,242,225,226,233,99,128,254,235,242,225,231,225,238,97,128,48,120,237,229,228,233,225,236,97,2,102,226,102,240,236,244,239,238,229,225,242,225,226,233,99,128,251,169,242,225,226,233,99,128,254,236,233,243,229,233,229,242,225,243,241,245,225,242,101,128,51,123,107,2,103,14,103,38,225,244,225,235,225,238,97,129,48,216,103,26,232,225,236,230,247,233,228,244,104,128,255,141,245,244,225,225,242,245,243,241,245,225,242,101,128,51,54,238,231,232,239,239,107,128,2,103,242,245,244,245,243,241,245,225,242,101,128,51,57,116,129,5,215,103,81,232,229,226,242,229,119,128,5,215,232,239,239,107,129,2,102,103,99,243,245,240,229,242,233,239,114,128,2,177,105,4,103,120,103,205,103,216,103,241,229,245,104,4,103,132,103,167,103,182,103,191,97,2,103,138,103,153,227,233,242,227,236,229,235,239,242,229,225,110,128,50,123,240,225,242,229,238,235,239,242,229,225,110,128,50,27,227,233,242,227,236,229,235,239,242,229,225,110,128,50,109,235,239,242,229,225,110,128,49,78,240,225,242,229,238,235,239,242,229,225,110,128,50,13,232,233,242,225,231,225,238,97,128,48,114,235,225,244,225,235,225,238,97,129,48,210,103,229,232,225,236,230,247,233,228,244,104,128,255,139,242,233,113,134,5,180,104,3,104,8,104,22,104,31,104,46,104,62,177,52,128,5,180,50,2,104,14,104,18,49,128,5,180,100,128,5,180,232,229,226,242,229,119,128,5,180,238,225,242,242,239,247,232,229,226,242,229,119,128,5,180,241,245,225,242,244,229,242,232,229,226,242,229,119,128,5,180,247,233,228,229,232,229,226,242,229,119,128,5,180,236,233,238,229,226,229,236,239,119,128,30,150,237,239,238,239,243,240,225,227,101,128,255,72,111,9,104,119,104,130,104,154,104,179,105,11,105,24,105,110,105,150,105,161,225,242,237,229,238,233,225,110,128,5,112,232,105,2,104,137,104,145,240,244,232,225,105,128,14,43,242,225,231,225,238,97,128,48,123,235,225,244,225,235,225,238,97,129,48,219,104,167,232,225,236,230,247,233,228,244,104,128,255,142,236,225,109,135,5,185,104,199,104,204,104,209,104,214,104,223,104,238,104,254,177,57,128,5,185,178,54,128,5,185,179,50,128,5,185,232,229,226,242,229,119,128,5,185,238,225,242,242,239,247,232,229,226,242,229,119,128,5,185,241,245,225,242,244,229,242,232,229,226,242,229,119,128,5,185,247,233,228,229,232,229,226,242,229,119,128,5,185,238,239,235,232,245,235,244,232,225,105,128,14,46,111,2,105,30,105,100,107,4,105,40,105,52,105,58,105,80,225,226,239,246,229,227,239,237,98,128,3,9,227,237,98,128,3,9,240,225,236,225,244,225,236,233,250,229,228,226,229,236,239,247,227,237,98,128,3,33,242,229,244,242,239,230,236,229,248,226,229,236,239,247,227,237,98,128,3,34,238,243,241,245,225,242,101,128,51,66,114,2,105,116,105,143,105,2,105,122,105,131,227,239,240,244,233,99,128,3,233,250,239,238,244,225,236,226,225,114,128,32,21,238,227,237,98,128,3,27,244,243,240,242,233,238,231,115,128,38,104,245,243,101,128,35,2,240,225,242,229,110,128,36,163,243,245,240,229,242,233,239,114,128,2,176,244,245,242,238,229,100,128,2,101,117,4,105,205,105,216,105,229,105,254,232,233,242,225,231,225,238,97,128,48,117,233,233,244,239,243,241,245,225,242,101,128,51,51,235,225,244,225,235,225,238,97,129,48,213,105,242,232,225,236,230,247,233,228,244,104,128,255,140,238,231,225,242,245,237,236,225,245,116,129,2,221,106,13,227,237,98,128,3,11,118,128,1,149,249,240,232,229,110,132,0,45,106,39,106,50,106,62,106,85,233,238,230,229,242,233,239,114,128,246,229,237,239,238,239,243,240,225,227,101,128,255,13,115,2,106,68,106,75,237,225,236,108,128,254,99,245,240,229,242,233,239,114,128,246,230,244,247,111,128,32,16,105,149,0,105,106,137,106,160,106,194,106,241,110,123,110,243,111,24,111,51,111,213,111,217,111,255,112,21,112,105,113,14,113,89,113,97,113,110,113,197,113,254,114,26,114,70,225,99,2,106,144,106,150,245,244,101,128,0,237,249,242,233,236,236,233,99,128,4,79,98,3,106,168,106,177,106,187,229,238,231,225,236,105,128,9,135,239,240,239,237,239,230,111,128,49,39,242,229,246,101,128,1,45,99,3,106,202,106,209,106,231,225,242,239,110,128,1,208,233,242,99,2,106,217,106,222,236,101,128,36,216,245,237,230,236,229,120,128,0,238,249,242,233,236,236,233,99,128,4,86,100,4,106,251,107,5,110,80,110,113,226,236,231,242,225,246,101,128,2,9,101,2,107,11,110,75,239,231,242,225,240,104,7,107,32,107,46,107,59,109,244,110,19,110,32,110,44,229,225,242,244,232,227,233,242,227,236,101,128,50,143,230,233,242,229,227,233,242,227,236,101,128,50,139,233,99,14,107,90,107,106,107,205,108,3,108,69,108,98,108,114,108,171,108,220,108,232,109,3,109,70,109,208,109,237,225,236,236,233,225,238,227,229,240,225,242,229,110,128,50,63,99,4,107,116,107,127,107,141,107,148,225,236,236,240,225,242,229,110,128,50,58,229,238,244,242,229,227,233,242,227,236,101,128,50,165,236,239,243,101,128,48,6,111,3,107,156,107,171,107,191,237,237,97,129,48,1,107,164,236,229,230,116,128,255,100,238,231,242,225,244,245,236,225,244,233,239,238,240,225,242,229,110,128,50,55,242,242,229,227,244,227,233,242,227,236,101,128,50,163,101,3,107,213,107,225,107,242,225,242,244,232,240,225,242,229,110,128,50,47,238,244,229,242,240,242,233,243,229,240,225,242,229,110,128,50,61,248,227,229,236,236,229,238,244,227,233,242,227,236,101,128,50,157,102,2,108,9,108,24,229,243,244,233,246,225,236,240,225,242,229,110,128,50,64,105,2,108,30,108,59,238,225,238,227,233,225,108,2,108,42,108,51,227,233,242,227,236,101,128,50,150,240,225,242,229,110,128,50,54,242,229,240,225,242,229,110,128,50,43,104,2,108,75,108,86,225,246,229,240,225,242,229,110,128,50,50,233,231,232,227,233,242,227,236,101,128,50,164,233,244,229,242,225,244,233,239,238,237,225,242,107,128,48,5,108,3,108,122,108,148,108,160,225,226,239,114,2,108,131,108,140,227,233,242,227,236,101,128,50,152,240,225,242,229,110,128,50,56,229,230,244,227,233,242,227,236,101,128,50,167,239,247,227,233,242,227,236,101,128,50,166,109,2,108,177,108,209,101,2,108,183,108,198,228,233,227,233,238,229,227,233,242,227,236,101,128,50,169,244,225,236,240,225,242,229,110,128,50,46,239,239,238,240,225,242,229,110,128,50,42,238,225,237,229,240,225,242,229,110,128,50,52,112,2,108,238,108,246,229,242,233,239,100,128,48,2,242,233,238,244,227,233,242,227,236,101,128,50,158,114,2,109,9,109,57,101,3,109,17,109,28,109,43,225,227,232,240,225,242,229,110,128,50,67,240,242,229,243,229,238,244,240,225,242,229,110,128,50,57,243,239,245,242,227,229,240,225,242,229,110,128,50,62,233,231,232,244,227,233,242,227,236,101,128,50,168,115,5,109,82,109,111,109,125,109,150,109,178,101,2,109,88,109,101,227,242,229,244,227,233,242,227,236,101,128,50,153,236,230,240,225,242,229,110,128,50,66,239,227,233,229,244,249,240,225,242,229,110,128,50,51,112,2,109,131,109,137,225,227,101,128,48,0,229,227,233,225,236,240,225,242,229,110,128,50,53,116,2,109,156,109,167,239,227,235,240,225,242,229,110,128,50,49,245,228,249,240,225,242,229,110,128,50,59,117,2,109,184,109,193,238,240,225,242,229,110,128,50,48,240,229,242,246,233,243,229,240,225,242,229,110,128,50,60,119,2,109,214,109,226,225,244,229,242,240,225,242,229,110,128,50,44,239,239,228,240,225,242,229,110,128,50,45,250,229,242,111,128,48,7,109,2,109,250,110,7,229,244,225,236,227,233,242,227,236,101,128,50,142,239,239,238,227,233,242,227,236,101,128,50,138,238,225,237,229,227,233,242,227,236,101,128,50,148,243,245,238,227,233,242,227,236,101,128,50,144,119,2,110,50,110,63,225,244,229,242,227,233,242,227,236,101,128,50,140,239,239,228,227,233,242,227,236,101,128,50,141,246,97,128,9,7,233,229,242,229,243,233,115,130,0,239,110,94,110,102,225,227,245,244,101,128,30,47,227,249,242,233,236,236,233,99,128,4,229,239,244,226,229,236,239,119,128,30,203,101,3,110,131,110,147,110,158,226,242,229,246,229,227,249,242,233,236,236,233,99,128,4,215,227,249,242,233,236,236,233,99,128,4,53,245,238,103,4,110,170,110,205,110,220,110,229,97,2,110,176,110,191,227,233,242,227,236,229,235,239,242,229,225,110,128,50,117,240,225,242,229,238,235,239,242,229,225,110,128,50,21,227,233,242,227,236,229,235,239,242,229,225,110,128,50,103,235,239,242,229,225,110,128,49,71,240,225,242,229,238,235,239,242,229,225,110,128,50,7,103,2,110,249,111,0,242,225,246,101,128,0,236,117,2,111,6,111,15,234,225,242,225,244,105,128,10,135,242,237,245,235,232,105,128,10,7,104,2,111,30,111,40,233,242,225,231,225,238,97,128,48,68,239,239,235,225,226,239,246,101,128,30,201,105,8,111,69,111,79,111,90,111,97,111,122,111,138,111,153,111,169,226,229,238,231,225,236,105,128,9,136,227,249,242,233,236,236,233,99,128,4,56,228,229,246,97,128,9,8,231,117,2,111,104,111,113,234,225,242,225,244,105,128,10,136,242,237,245,235,232,105,128,10,8,237,225,244,242,225,231,245,242,237,245,235,232,105,128,10,64,238,246,229,242,244,229,228,226,242,229,246,101,128,2,11,243,232,239,242,244,227,249,242,233,236,236,233,99,128,4,57,246,239,247,229,236,243,233,231,110,3,111,185,111,195,111,202,226,229,238,231,225,236,105,128,9,192,228,229,246,97,128,9,64,231,245,234,225,242,225,244,105,128,10,192,106,128,1,51,107,2,111,223,111,247,225,244,225,235,225,238,97,129,48,164,111,235,232,225,236,230,247,233,228,244,104,128,255,114,239,242,229,225,110,128,49,99,108,2,112,5,112,10,228,101,128,2,220,245,249,232,229,226,242,229,119,128,5,172,109,2,112,27,112,94,97,3,112,35,112,55,112,80,227,242,239,110,129,1,43,112,44,227,249,242,233,236,236,233,99,128,4,227,231,229,239,242,225,240,240,242,239,248,233,237,225,244,229,236,249,229,241,245,225,108,128,34,83,244,242,225,231,245,242,237,245,235,232,105,128,10,63,239,238,239,243,240,225,227,101,128,255,73,110,5,112,117,112,127,112,136,112,148,112,232,227,242,229,237,229,238,116,128,34,6,230,233,238,233,244,121,128,34,30,233,225,242,237,229,238,233,225,110,128,5,107,116,2,112,154,112,222,101,2,112,160,112,211,231,242,225,108,131,34,43,112,173,112,191,112,196,98,2,112,179,112,187,239,244,244,239,109,128,35,33,116,128,35,33,229,120,128,248,245,116,2,112,202,112,207,239,112,128,35,32,112,128,35,32,242,243,229,227,244,233,239,110,128,34,41,233,243,241,245,225,242,101,128,51,5,118,3,112,240,112,249,113,2,226,245,236,236,229,116,128,37,216,227,233,242,227,236,101,128,37,217,243,237,233,236,229,230,225,227,101,128,38,59,111,3,113,22,113,33,113,41,227,249,242,233,236,236,233,99,128,4,81,231,239,238,229,107,128,1,47,244,97,131,3,185,113,52,113,73,113,81,228,233,229,242,229,243,233,115,129,3,202,113,65,244,239,238,239,115,128,3,144,236,225,244,233,110,128,2,105,244,239,238,239,115,128,3,175,240,225,242,229,110,128,36,164,242,233,231,245,242,237,245,235,232,105,128,10,114,115,4,113,120,113,165,113,179,113,187,237,225,236,108,2,113,129,113,140,232,233,242,225,231,225,238,97,128,48,67,235,225,244,225,235,225,238,97,129,48,163,113,153,232,225,236,230,247,233,228,244,104,128,255,104,243,232,225,242,226,229,238,231,225,236,105,128,9,250,244,242,239,235,101,128,2,104,245,240,229,242,233,239,114,128,246,237,116,2,113,203,113,237,229,242,225,244,233,239,110,2,113,215,113,226,232,233,242,225,231,225,238,97,128,48,157,235,225,244,225,235,225,238,97,128,48,253,233,236,228,101,129,1,41,113,246,226,229,236,239,119,128,30,45,117,2,114,4,114,15,226,239,240,239,237,239,230,111,128,49,41,227,249,242,233,236,236,233,99,128,4,78,246,239,247,229,236,243,233,231,110,3,114,42,114,52,114,59,226,229,238,231,225,236,105,128,9,191,228,229,246,97,128,9,63,231,245,234,225,242,225,244,105,128,10,191,250,232,233,244,243,97,2,114,81,114,92,227,249,242,233,236,236,233,99,128,4,117,228,226,236,231,242,225,246,229,227,249,242,233,236,236,233,99,128,4,119,106,138,0,106,114,135,114,198,114,209,115,3,115,19,115,132,115,201,115,206,115,218,115,226,97,4,114,145,114,156,114,166,114,173,225,242,237,229,238,233,225,110,128,5,113,226,229,238,231,225,236,105,128,9,156,228,229,246,97,128,9,28,231,117,2,114,180,114,189,234,225,242,225,244,105,128,10,156,242,237,245,235,232,105,128,10,28,226,239,240,239,237,239,230,111,128,49,16,99,3,114,217,114,224,114,246,225,242,239,110,128,1,240,233,242,99,2,114,232,114,237,236,101,128,36,217,245,237,230,236,229,120,128,1,53,242,239,243,243,229,228,244,225,233,108,128,2,157,228,239,244,236,229,243,243,243,244,242,239,235,101,128,2,95,101,3,115,27,115,38,115,103,227,249,242,233,236,236,233,99,128,4,88,229,109,4,115,49,115,58,115,72,115,88,225,242,225,226,233,99,128,6,44,230,233,238,225,236,225,242,225,226,233,99,128,254,158,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,159,237,229,228,233,225,236,225,242,225,226,233,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51201);
/* memory initializer */ allocate([128,254,160,104,2,115,109,115,118,225,242,225,226,233,99,128,6,152,230,233,238,225,236,225,242,225,226,233,99,128,251,139,104,2,115,138,115,188,97,3,115,146,115,156,115,163,226,229,238,231,225,236,105,128,9,157,228,229,246,97,128,9,29,231,117,2,115,170,115,179,234,225,242,225,244,105,128,10,157,242,237,245,235,232,105,128,10,29,229,232,225,242,237,229,238,233,225,110,128,5,123,233,115,128,48,4,237,239,238,239,243,240,225,227,101,128,255,74,240,225,242,229,110,128,36,165,243,245,240,229,242,233,239,114,128,2,178,107,146,0,107,116,21,118,110,118,121,118,183,118,194,119,28,119,42,120,150,121,90,121,103,121,129,121,178,122,60,122,82,122,95,122,118,122,160,122,170,97,12,116,47,116,79,116,101,116,131,116,245,117,14,117,44,117,69,117,175,117,189,118,56,118,85,98,2,116,53,116,70,225,243,232,235,233,242,227,249,242,233,236,236,233,99,128,4,161,229,238,231,225,236,105,128,9,149,99,2,116,85,116,91,245,244,101,128,30,49,249,242,233,236,236,233,99,128,4,58,228,101,2,116,108,116,126,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,155,246,97,128,9,21,102,135,5,219,116,149,116,158,116,178,116,192,116,201,116,217,116,232,225,242,225,226,233,99,128,6,67,228,225,231,229,243,104,129,251,59,116,169,232,229,226,242,229,119,128,251,59,230,233,238,225,236,225,242,225,226,233,99,128,254,218,232,229,226,242,229,119,128,5,219,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,219,237,229,228,233,225,236,225,242,225,226,233,99,128,254,220,242,225,230,229,232,229,226,242,229,119,128,251,77,231,117,2,116,252,117,5,234,225,242,225,244,105,128,10,149,242,237,245,235,232,105,128,10,21,104,2,117,20,117,30,233,242,225,231,225,238,97,128,48,75,239,239,235,227,249,242,233,236,236,233,99,128,4,196,235,225,244,225,235,225,238,97,129,48,171,117,57,232,225,236,230,247,233,228,244,104,128,255,118,112,2,117,75,117,96,240,97,129,3,186,117,82,243,249,237,226,239,236,231,242,229,229,107,128,3,240,249,229,239,245,110,3,117,108,117,122,117,156,237,233,229,245,237,235,239,242,229,225,110,128,49,113,112,2,117,128,117,143,232,233,229,245,240,232,235,239,242,229,225,110,128,49,132,233,229,245,240,235,239,242,229,225,110,128,49,120,243,243,225,238,231,240,233,229,245,240,235,239,242,229,225,110,128,49,121,242,239,242,233,233,243,241,245,225,242,101,128,51,13,115,5,117,201,117,245,118,4,118,12,118,40,232,233,228,225,225,245,244,111,2,117,214,117,223,225,242,225,226,233,99,128,6,64,238,239,243,233,228,229,226,229,225,242,233,238,231,225,242,225,226,233,99,128,6,64,237,225,236,236,235,225,244,225,235,225,238,97,128,48,245,241,245,225,242,101,128,51,132,242,97,2,118,19,118,28,225,242,225,226,233,99,128,6,80,244,225,238,225,242,225,226,233,99,128,6,77,244,242,239,235,229,227,249,242,233,236,236,233,99,128,4,159,244,225,232,233,242,225,240,242,239,236,239,238,231,237,225,242,235,232,225,236,230,247,233,228,244,104,128,255,112,246,229,242,244,233,227,225,236,243,244,242,239,235,229,227,249,242,233,236,236,233,99,128,4,157,226,239,240,239,237,239,230,111,128,49,14,99,4,118,131,118,153,118,162,118,170,97,2,118,137,118,147,236,243,241,245,225,242,101,128,51,137,242,239,110,128,1,233,229,228,233,236,236,97,128,1,55,233,242,227,236,101,128,36,218,239,237,237,225,225,227,227,229,238,116,128,1,55,228,239,244,226,229,236,239,119,128,30,51,101,4,118,204,118,231,119,0,119,12,104,2,118,210,118,221,225,242,237,229,238,233,225,110,128,5,132,233,242,225,231,225,238,97,128,48,81,235,225,244,225,235,225,238,97,129,48,177,118,244,232,225,236,230,247,233,228,244,104,128,255,121,238,225,242,237,229,238,233,225,110,128,5,111,243,237,225,236,236,235,225,244,225,235,225,238,97,128,48,246,231,242,229,229,238,236,225,238,228,233,99,128,1,56,104,6,119,56,119,185,119,196,119,221,120,52,120,140,97,5,119,68,119,78,119,89,119,96,119,121,226,229,238,231,225,236,105,128,9,150,227,249,242,233,236,236,233,99,128,4,69,228,229,246,97,128,9,22,231,117,2,119,103,119,112,234,225,242,225,244,105,128,10,150,242,237,245,235,232,105,128,10,22,104,4,119,131,119,140,119,154,119,170,225,242,225,226,233,99,128,6,46,230,233,238,225,236,225,242,225,226,233,99,128,254,166,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,167,237,229,228,233,225,236,225,242,225,226,233,99,128,254,168,229,233,227,239,240,244,233,99,128,3,231,232,97,2,119,203,119,210,228,229,246,97,128,9,89,231,245,242,237,245,235,232,105,128,10,89,233,229,245,235,104,4,119,235,120,14,120,29,120,38,97,2,119,241,120,0,227,233,242,227,236,229,235,239,242,229,225,110,128,50,120,240,225,242,229,238,235,239,242,229,225,110,128,50,24,227,233,242,227,236,229,235,239,242,229,225,110,128,50,106,235,239,242,229,225,110,128,49,75,240,225,242,229,238,235,239,242,229,225,110,128,50,10,111,4,120,62,120,111,120,121,120,126,235,104,4,120,73,120,82,120,91,120,101,225,233,244,232,225,105,128,14,2,239,238,244,232,225,105,128,14,5,245,225,244,244,232,225,105,128,14,3,247,225,233,244,232,225,105,128,14,4,237,245,244,244,232,225,105,128,14,91,239,107,128,1,153,242,225,235,232,225,238,231,244,232,225,105,128,14,6,250,243,241,245,225,242,101,128,51,145,105,4,120,160,120,171,120,196,120,245,232,233,242,225,231,225,238,97,128,48,77,235,225,244,225,235,225,238,97,129,48,173,120,184,232,225,236,230,247,233,228,244,104,128,255,119,242,111,3,120,205,120,220,120,236,231,245,242,225,237,245,243,241,245,225,242,101,128,51,21,237,229,229,244,239,242,245,243,241,245,225,242,101,128,51,22,243,241,245,225,242,101,128,51,20,249,229,239,107,5,121,4,121,39,121,54,121,63,121,77,97,2,121,10,121,25,227,233,242,227,236,229,235,239,242,229,225,110,128,50,110,240,225,242,229,238,235,239,242,229,225,110,128,50,14,227,233,242,227,236,229,235,239,242,229,225,110,128,50,96,235,239,242,229,225,110,128,49,49,240,225,242,229,238,235,239,242,229,225,110,128,50,0,243,233,239,243,235,239,242,229,225,110,128,49,51,234,229,227,249,242,233,236,236,233,99,128,4,92,108,2,121,109,121,120,233,238,229,226,229,236,239,119,128,30,53,243,241,245,225,242,101,128,51,152,109,3,121,137,121,151,121,162,227,245,226,229,228,243,241,245,225,242,101,128,51,166,239,238,239,243,240,225,227,101,128,255,75,243,241,245,225,242,229,228,243,241,245,225,242,101,128,51,162,111,5,121,190,121,216,121,254,122,10,122,24,104,2,121,196,121,206,233,242,225,231,225,238,97,128,48,83,237,243,241,245,225,242,101,128,51,192,235,97,2,121,223,121,231,233,244,232,225,105,128,14,1,244,225,235,225,238,97,129,48,179,121,242,232,225,236,230,247,233,228,244,104,128,255,122,239,240,239,243,241,245,225,242,101,128,51,30,240,240,225,227,249,242,233,236,236,233,99,128,4,129,114,2,122,30,122,50,229,225,238,243,244,225,238,228,225,242,228,243,249,237,226,239,108,128,50,127,239,238,233,243,227,237,98,128,3,67,240,97,2,122,67,122,73,242,229,110,128,36,166,243,241,245,225,242,101,128,51,170,243,233,227,249,242,233,236,236,233,99,128,4,111,116,2,122,101,122,110,243,241,245,225,242,101,128,51,207,245,242,238,229,100,128,2,158,117,2,122,124,122,135,232,233,242,225,231,225,238,97,128,48,79,235,225,244,225,235,225,238,97,129,48,175,122,148,232,225,236,230,247,233,228,244,104,128,255,120,246,243,241,245,225,242,101,128,51,184,247,243,241,245,225,242,101,128,51,190,108,146,0,108,122,220,124,247,125,20,125,86,125,124,126,20,126,29,126,45,126,69,126,87,126,205,126,246,127,125,127,133,127,166,127,175,127,183,127,245,97,7,122,236,122,246,122,253,123,4,123,29,123,45,124,235,226,229,238,231,225,236,105,128,9,178,227,245,244,101,128,1,58,228,229,246,97,128,9,50,231,117,2,123,11,123,20,234,225,242,225,244,105,128,10,178,242,237,245,235,232,105,128,10,50,235,235,232,225,238,231,249,225,239,244,232,225,105,128,14,69,109,10,123,67,124,6,124,23,124,61,124,75,124,94,124,110,124,130,124,150,124,173,97,2,123,73,123,254,236,229,102,4,123,85,123,99,123,191,123,208,230,233,238,225,236,225,242,225,226,233,99,128,254,252,232,225,237,250,97,2,123,109,123,150,225,226,239,246,101,2,123,119,123,133,230,233,238,225,236,225,242,225,226,233,99,128,254,248,233,243,239,236,225,244,229,228,225,242,225,226,233,99,128,254,247,226,229,236,239,119,2,123,160,123,174,230,233,238,225,236,225,242,225,226,233,99,128,254,250,233,243,239,236,225,244,229,228,225,242,225,226,233,99,128,254,249,233,243,239,236,225,244,229,228,225,242,225,226,233,99,128,254,251,237,225,228,228,225,225,226,239,246,101,2,123,223,123,237,230,233,238,225,236,225,242,225,226,233,99,128,254,246,233,243,239,236,225,244,229,228,225,242,225,226,233,99,128,254,245,242,225,226,233,99,128,6,68,226,228,97,129,3,187,124,14,243,244,242,239,235,101,128,1,155,229,100,130,5,220,124,32,124,52,228,225,231,229,243,104,129,251,60,124,43,232,229,226,242,229,119,128,251,60,232,229,226,242,229,119,128,5,220,230,233,238,225,236,225,242,225,226,233,99,128,254,222,232,225,232,233,238,233,244,233,225,236,225,242,225,226,233,99,128,252,202,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,223,234,229,229,237,233,238,233,244,233,225,236,225,242,225,226,233,99,128,252,201,235,232,225,232,233,238,233,244,233,225,236,225,242,225,226,233,99,128,252,203,236,225,237,232,229,232,233,243,239,236,225,244,229,228,225,242,225,226,233,99,128,253,242,237,101,2,124,180,124,193,228,233,225,236,225,242,225,226,233,99,128,254,224,229,109,2,124,200,124,219,232,225,232,233,238,233,244,233,225,236,225,242,225,226,233,99,128,253,136,233,238,233,244,233,225,236,225,242,225,226,233,99,128,252,204,242,231,229,227,233,242,227,236,101,128,37,239,98,3,124,255,125,4,125,10,225,114,128,1,154,229,236,116,128,2,108,239,240,239,237,239,230,111,128,49,12,99,4,125,30,125,37,125,46,125,73,225,242,239,110,128,1,62,229,228,233,236,236,97,128,1,60,233,242,99,2,125,54,125,59,236,101,128,36,219,245,237,230,236,229,248,226,229,236,239,119,128,30,61,239,237,237,225,225,227,227,229,238,116,128,1,60,228,239,116,130,1,64,125,96,125,105,225,227,227,229,238,116,128,1,64,226,229,236,239,119,129,30,55,125,115,237,225,227,242,239,110,128,30,57,101,3,125,132,125,170,126,15,230,116,2,125,139,125,155,225,238,231,236,229,225,226,239,246,229,227,237,98,128,3,26,244,225,227,235,226,229,236,239,247,227,237,98,128,3,24,243,115,132,0,60,125,183,125,205,125,217,126,7,229,241,245,225,108,129,34,100,125,193,239,242,231,242,229,225,244,229,114,128,34,218,237,239,238,239,243,240,225,227,101,128,255,28,111,2,125,223,125,252,114,2,125,229,125,242,229,241,245,233,246,225,236,229,238,116,128,34,114,231,242,229,225,244,229,114,128,34,118,246,229,242,229,241,245,225,108,128,34,102,243,237,225,236,108,128,254,100,250,104,128,2,110,230,226,236,239,227,107,128,37,140,232,239,239,235,242,229,244,242,239,230,236,229,120,128,2,109,105,2,126,51,126,56,242,97,128,32,164,247,238,225,242,237,229,238,233,225,110,128,5,108,106,129,1,201,126,75,229,227,249,242,233,236,236,233,99,128,4,89,108,132,246,192,126,99,126,123,126,134,126,143,97,2,126,105,126,112,228,229,246,97,128,9,51,231,245,234,225,242,225,244,105,128,10,179,233,238,229,226,229,236,239,119,128,30,59,236,225,228,229,246,97,128,9,52,246,239,227,225,236,233,99,3,126,157,126,167,126,174,226,229,238,231,225,236,105,128,9,225,228,229,246,97,128,9,97,246,239,247,229,236,243,233,231,110,2,126,188,126,198,226,229,238,231,225,236,105,128,9,227,228,229,246,97,128,9,99,109,3,126,213,126,226,126,237,233,228,228,236,229,244,233,236,228,101,128,2,107,239,238,239,243,240,225,227,101,128,255,76,243,241,245,225,242,101,128,51,208,111,6,127,4,127,16,127,58,127,69,127,75,127,117,227,232,245,236,225,244,232,225,105,128,14,44,231,233,227,225,108,3,127,28,127,34,127,53,225,238,100,128,34,39,238,239,116,129,0,172,127,42,242,229,246,229,242,243,229,100,128,35,16,239,114,128,34,40,236,233,238,231,244,232,225,105,128,14,37,238,231,115,128,1,127,247,236,233,238,101,2,127,85,127,108,99,2,127,91,127,103,229,238,244,229,242,236,233,238,101,128,254,78,237,98,128,3,50,228,225,243,232,229,100,128,254,77,250,229,238,231,101,128,37,202,240,225,242,229,110,128,36,167,115,3,127,141,127,148,127,156,236,225,243,104,128,1,66,241,245,225,242,101,128,33,19,245,240,229,242,233,239,114,128,246,238,244,243,232,225,228,101,128,37,145,245,244,232,225,105,128,14,38,246,239,227,225,236,233,99,3,127,197,127,207,127,214,226,229,238,231,225,236,105,128,9,140,228,229,246,97,128,9,12,246,239,247,229,236,243,233,231,110,2,127,228,127,238,226,229,238,231,225,236,105,128,9,226,228,229,246,97,128,9,98,248,243,241,245,225,242,101,128,51,211,109,144,0,109,128,35,130,144,130,169,130,196,130,221,132,18,132,40,133,95,133,125,133,174,134,25,134,47,134,72,134,81,135,108,135,136,97,12,128,61,128,71,128,135,128,142,128,167,128,215,130,51,130,76,130,81,130,95,130,107,130,112,226,229,238,231,225,236,105,128,9,174,99,2,128,77,128,129,242,239,110,132,0,175,128,91,128,102,128,108,128,117,226,229,236,239,247,227,237,98,128,3,49,227,237,98,128,3,4,236,239,247,237,239,100,128,2,205,237,239,238,239,243,240,225,227,101,128,255,227,245,244,101,128,30,63,228,229,246,97,128,9,46,231,117,2,128,149,128,158,234,225,242,225,244,105,128,10,174,242,237,245,235,232,105,128,10,46,104,2,128,173,128,205,225,240,225,235,104,2,128,183,128,192,232,229,226,242,229,119,128,5,164,236,229,230,244,232,229,226,242,229,119,128,5,164,233,242,225,231,225,238,97,128,48,126,105,5,128,227,129,40,129,103,129,133,130,39,227,232,225,244,244,225,247,97,3,128,242,129,17,129,24,236,239,119,2,128,250,129,5,236,229,230,244,244,232,225,105,128,248,149,242,233,231,232,244,244,232,225,105,128,248,148,244,232,225,105,128,14,75,245,240,240,229,242,236,229,230,244,244,232,225,105,128,248,147,229,107,3,129,49,129,80,129,87,236,239,119,2,129,57,129,68,236,229,230,244,244,232,225,105,128,248,140,242,233,231,232,244,244,232,225,105,128,248,139,244,232,225,105,128,14,72,245,240,240,229,242,236,229,230,244,244,232,225,105,128,248,138,232,225,238,225,235,225,116,2,129,115,129,126,236,229,230,244,244,232,225,105,128,248,132,244,232,225,105,128,14,49,116,3,129,141,129,169,129,232,225,233,235,232,117,2,129,151,129,162,236,229,230,244,244,232,225,105,128,248,137,244,232,225,105,128,14,71,232,111,3,129,178,129,209,129,216,236,239,119,2,129,186,129,197,236,229,230,244,244,232,225,105,128,248,143,242,233,231,232,244,244,232,225,105,128,248,142,244,232,225,105,128,14,73,245,240,240,229,242,236,229,230,244,244,232,225,105,128,248,141,242,105,3,129,241,130,16,130,23,236,239,119,2,129,249,130,4,236,229,230,244,244,232,225,105,128,248,146,242,233,231,232,244,244,232,225,105,128,248,145,244,232,225,105,128,14,74,245,240,240,229,242,236,229,230,244,244,232,225,105,128,248,144,249,225,237,239,235,244,232,225,105,128,14,70,235,225,244,225,235,225,238,97,129,48,222,130,64,232,225,236,230,247,233,228,244,104,128,255,143,236,101,128,38,66,238,243,249,239,238,243,241,245,225,242,101,128,51,71,241,225,230,232,229,226,242,229,119,128,5,190,242,115,128,38,66,115,2,130,118,130,136,239,242,225,227,233,242,227,236,229,232,229,226,242,229,119,128,5,175,241,245,225,242,101,128,51,131,98,2,130,150,130,160,239,240,239,237,239,230,111,128,49,7,243,241,245,225,242,101,128,51,212,99,2,130,175,130,183,233,242,227,236,101,128,36,220,245,226,229,228,243,241,245,225,242,101,128,51,165,228,239,116,2,130,204,130,213,225,227,227,229,238,116,128,30,65,226,229,236,239,119,128,30,67,101,7,130,237,131,108,131,119,131,134,131,159,131,196,131,208,101,2,130,243,131,95,109,4,130,253,131,6,131,20,131,36,225,242,225,226,233,99,128,6,69,230,233,238,225,236,225,242,225,226,233,99,128,254,226,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,227,237,101,2,131,43,131,56,228,233,225,236,225,242,225,226,233,99,128,254,228,229,237,105,2,131,64,131,79,238,233,244,233,225,236,225,242,225,226,233,99,128,252,209,243,239,236,225,244,229,228,225,242,225,226,233,99,128,252,72,244,239,242,245,243,241,245,225,242,101,128,51,77,232,233,242,225,231,225,238,97,128,48,129,233,250,233,229,242,225,243,241,245,225,242,101,128,51,126,235,225,244,225,235,225,238,97,129,48,225,131,147,232,225,236,230,247,233,228,244,104,128,255,146,109,130,5,222,131,167,131,187,228,225,231,229,243,104,129,251,62,131,178,232,229,226,242,229,119,128,251,62,232,229,226,242,229,119,128,5,222,238,225,242,237,229,238,233,225,110,128,5,116,242,235,232,97,3,131,219,131,228,132,5,232,229,226,242,229,119,128,5,165,235,229,230,245,236,97,2,131,239,131,248,232,229,226,242,229,119,128,5,166,236,229,230,244,232,229,226,242,229,119,128,5,166,236,229,230,244,232,229,226,242,229,119,128,5,165,104,2,132,24,132,30,239,239,107,128,2,113,250,243,241,245,225,242,101,128,51,146,105,6,132,54,132,91,132,228,132,239,133,8,133,65,228,100,2,132,61,132,86,236,229,228,239,244,235,225,244,225,235,225,238,225,232,225,236,230,247,233,228,244,104,128,255,101,239,116,128,0,183,229,245,109,5,132,105,132,140,132,155,132,164,132,215,97,2,132,111,132,126,227,233,242,227,236,229,235,239,242,229,225,110,128,50,114,240,225,242,229,238,235,239,242,229,225,110,128,50,18,227,233,242,227,236,229,235,239,242,229,225,110,128,50,100,235,239,242,229,225,110,128,49,65,112,2,132,170,132,202,97,2,132,176,132,190,238,243,233,239,243,235,239,242,229,225,110,128,49,112,242,229,238,235,239,242,229,225,110,128,50,4,233,229,245,240,235,239,242,229,225,110,128,49,110,243,233,239,243,235,239,242,229,225,110,128,49,111,232,233,242,225,231,225,238,97,128,48,127,235,225,244,225,235,225,238,97,129,48,223,132,252,232,225,236,230,247,233,228,244,104,128,255,144,238,117,2,133,15,133,60,115,132,34,18,133,27,133,38,133,47,133,53,226,229,236,239,247,227,237,98,128,3,32,227,233,242,227,236,101,128,34,150,237,239,100,128,2,215,240,236,245,115,128,34,19,244,101,128,32,50,242,105,2,133,72,133,86,226,225,225,242,245,243,241,245,225,242,101,128,51,74,243,241,245,225,242,101,128,51,73,108,2,133,101,133,116,239,238,231,236,229,231,244,245,242,238,229,100,128,2,112,243,241,245,225,242,101,128,51,150,109,3,133,133,133,147,133,158,227,245,226,229,228,243,241,245,225,242,101,128,51,163,239,238,239,243,240,225,227,101,128,255,77,243,241,245,225,242,229,228,243,241,245,225,242,101,128,51,159,111,5,133,186,133,212,133,237,133,247,134,0,104,2,133,192,133,202,233,242,225,231,225,238,97,128,48,130,237,243,241,245,225,242,101,128,51,193,235,225,244,225,235,225,238,97,129,48,226,133,225,232,225,236,230,247,233,228,244,104,128,255,147,236,243,241,245,225,242,101,128,51,214,237,225,244,232,225,105,128,14,33,246,229,242,243,243,241,245,225,242,101,129,51,167,134,15,228,243,241,245,225,242,101,128,51,168,240,97,2,134,32,134,38,242,229,110,128,36,168,243,241,245,225,242,101,128,51,171,115,2,134,53,134,62,243,241,245,225,242,101,128,51,179,245,240,229,242,233,239,114,128,246,239,244,245,242,238,229,100,128,2,111,117,141,0,181,134,111,134,115,134,125,134,149,134,159,134,181,134,192,134,217,134,240,134,250,135,24,135,88,135,98,49,128,0,181,225,243,241,245,225,242,101,128,51,130,227,104,2,134,132,134,142,231,242,229,225,244,229,114,128,34,107,236,229,243,115,128,34,106,230,243,241,245,225,242,101,128,51,140,103,2,134,165,134,172,242,229,229,107,128,3,188,243,241,245,225,242,101,128,51,141,232,233,242,225,231,225,238,97,128,48,128,235,225,244,225,235,225,238,97,129,48,224,134,205,232,225,236,230,247,233,228,244,104,128,255,145,108,2,134,223,134,232,243,241,245,225,242,101,128,51,149,244,233,240,236,121,128,0,215,237,243,241,245,225,242,101,128,51,155,238,225,104,2,135,2,135,11,232,229,226,242,229,119,128,5,163,236,229,230,244,232,229,226,242,229,119,128,5,163,115,2,135,30,135,79,233,99,3,135,39,135,56,135,67,225,236,238,239,244,101,129,38,106,135,50,228,226,108,128,38,107,230,236,225,244,243,233,231,110,128,38,109,243,232,225,242,240,243,233,231,110,128,38,111,243,241,245,225,242,101,128,51,178,246,243,241,245,225,242,101,128,51,182,247,243,241,245,225,242,101,128,51,188,118,2,135,114,135,127,237,229,231,225,243,241,245,225,242,101,128,51,185,243,241,245,225,242,101,128,51,183,119,2,135,142,135,155,237,229,231,225,243,241,245,225,242,101,128,51,191,243,241,245,225,242,101,128,51,189,110,150,0,110,135,212,136,90,136,114,136,180,136,205,137,7,137,17,137,84,137,127,139,161,139,179,139,204,139,235,140,5,140,70,142,52,142,60,142,85,142,93,143,61,143,71,143,81,97,8,135,230,135,250,136,1,136,8,136,33,136,44,136,69,136,81,98,2,135,236,135,245,229,238,231,225,236,105,128,9,168,236,97,128,34,7,227,245,244,101,128,1,68,228,229,246,97,128,9,40,231,117,2,136,15,136,24,234,225,242,225,244,105,128,10,168,242,237,245,235,232,105,128,10,40,232,233,242,225,231,225,238,97,128,48,106,235,225,244,225,235,225,238,97,129,48,202,136,57,232,225,236,230,247,233,228,244,104,128,255,133,240,239,243,244,242,239,240,232,101,128,1,73,243,241,245,225,242,101,128,51,129,98,2,136,96,136,106,239,240,239,237,239,230,111,128,49,11,243,240,225,227,101,128,0,160,99,4,136,124,136,131,136,140,136,167,225,242,239,110,128,1,72,229,228,233,236,236,97,128,1,70,233,242,99,2,136,148,136,153,236,101,128,36,221,245,237,230,236,229,248,226,229,236,239,119,128,30,75,239,237,237,225,225,227,227,229,238,116,128,1,70,228,239,116,2,136,188,136,197,225,227,227,229,238,116,128,30,69,226,229,236,239,119,128,30,71,101,3,136,213,136,224,136,249,232,233,242,225,231,225,238,97,128,48,109,235,225,244,225,235,225,238,97,129,48,205,136,237,232,225,236,230,247,233,228,244,104,128,255,136,247,243,232,229,241,229,236,243,233,231,110,128,32,170,230,243,241,245,225,242,101,128,51,139,103,2,137,23,137,73,97,3,137,31,137,41,137,48,226,229,238,231,225,236,105,128,9,153,228,229,246,97,128,9,25,231,117,2,137,55,137,64,234,225,242,225,244,105,128,10,153,242,237,245,235,232,105,128,10,25,239,238,231,245,244,232,225,105,128,14,7,104,2,137,90,137,100,233,242,225,231,225,238,97,128,48,147,239,239,107,2,137,108,137,115,236,229,230,116,128,2,114,242,229,244,242,239,230,236,229,120,128,2,115,105,4,137,137,138,50,138,61,138,119,229,245,110,7,137,155,137,190,137,222,137,236,137,245,138,22,138,35,97,2,137,161,137,176,227,233,242,227,236,229,235,239,242,229,225,110,128,50,111,240,225,242,229,238,235,239,242,229,225,110,128,50,15,227,105,2,137,197,137,209,229,245,227,235,239,242,229,225,110,128,49,53,242,227,236,229,235,239,242,229,225,110,128,50,97,232,233,229,245,232,235,239,242,229,225,110,128,49,54,235,239,242,229,225,110,128,49,52,240,97,2,137,252,138,10,238,243,233,239,243,235,239,242,229,225,110,128,49,104,242,229,238,235,239,242,229,225,110,128,50,1,243,233,239,243,235,239,242,229,225,110,128,49,103,244,233,235,229,245,244,235,239,242,229,225,110,128,49,102,232,233,242,225,231,225,238,97,128,48,107,107,2,138,67,138,91,225,244,225,235,225,238,97,129,48,203,138,79,232,225,236,230,247,233,228,244,104,128,255,134,232,225,232,233,116,2,138,101,138,112,236,229,230,244,244,232,225,105,128,248,153,244,232,225,105,128,14,77,238,101,141,0,57,138,150,138,159,138,169,138,199,138,206,138,231,139,2,139,36,139,48,139,59,139,92,139,100,139,111,225,242,225,226,233,99,128,6,105,226,229,238,231,225,236,105,128,9,239,227,233,242,227,236,101,129,36,104,138,180,233,238,246,229,242,243,229,243,225,238,243,243,229,242,233,102,128,39,146,228,229,246,97,128,9,111,231,117,2,138,213,138,222,234,225,242,225,244,105,128,10,239,242,237,245,235,232,105,128,10,111,232,97,2,138,238,138,249,227,235,225,242,225,226,233,99,128,6,105,238,231,250,232,239,117,128,48,41,105,2,139,8,139,26,228,229,239,231,242,225,240,232,233,227,240,225,242,229,110,128,50,40,238,230,229,242,233,239,114,128,32,137,237,239,238,239,243,240,225,227,101,128,255,25,239,236,228,243,244,249,236,101,128,247,57,112,2,139,65,139,72,225,242,229,110,128,36,124,229,114,2,139,79,139,85,233,239,100,128,36,144,243,233,225,110,128,6,249,242,239,237,225,110,128,33,120,243,245,240,229,242,233,239,114,128,32,121,116,2,139,117,139,155,229,229,110,2,139,125,139,134,227,233,242,227,236,101,128,36,114,112,2,139,140,139,147,225,242,229,110,128,36,134,229,242,233,239,100,128,36,154,232,225,105,128,14,89,106,129,1,204,139,167,229,227,249,242,233,236,236,233,99,128,4,90,235,225,244,225,235,225,238,97,129,48,243,139,192,232,225,236,230,247,233,228,244,104,128,255,157,108,2,139,210,139,224,229,231,242,233,231,232,244,236,239,238,103,128,1,158,233,238,229,226,229,236,239,119,128,30,73,109,2,139,241,139,252,239,238,239,243,240,225,227,101,128,255,78,243,241,245,225,242,101,128,51,154,110,2,140,11,140,61,97,3,140,19,140,29,140,36,226,229,238,231,225,236,105,128,9,163,228,229,246,97,128,9,35,231,117,2,140,43,140,52,234,225,242,225,244,105,128,10,163,242,237,245,235,232,105,128,10,35,238,225,228,229,246,97,128,9,41,111,6,140,84,140,95,140,120,140,161,141,113,142,40,232,233,242,225,231,225,238,97,128,48,110,235,225,244,225,235,225,238,97,129,48,206,140,108,232,225,236,230,247,233,228,244,104,128,255,137,110,3,140,128,140,144,140,153,226,242,229,225,235,233,238,231,243,240,225,227,101,128,0,160,229,238,244,232,225,105,128,14,19,245,244,232,225,105,128,14,25,239,110,7,140,178,140,187,140,201,140,235,140,251,141,36,141,95,225,242,225,226,233,99,128,6,70,230,233,238,225,236,225,242,225,226,233,99,128,254,230,231,232,245,238,238,97,2,140,212,140,221,225,242,225,226,233,99,128,6,186,230,233,238,225,236,225,242,225,226,233,99,128,251,159,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,231,234,229,229,237,105,2,141,5,141,20,238,233,244,233,225,236,225,242,225,226,233,99,128,252,210,243,239,236,225,244,229,228,225,242,225,226,233,99,128,252,75,237,101,2,141,43,141,56,228,233,225,236,225,242,225,226,233,99,128,254,232,229,237,105,2,141,64,141,79,238,233,244,233,225,236,225,242,225,226,233,99,128,252,213,243,239,236,225,244,229,228,225,242,225,226,233,99,128,252,78,238,239,239,238,230,233,238,225,236,225,242,225,226,233,99,128,252,141,116,7,141,129,141,140,141,169,141,204,141,216,141,236,142,6,227,239,238,244,225,233,238,115,128,34,12,101,2,141,146,141,162,236,229,237,229,238,116,129,34,9,141,157,239,102,128,34,9,241,245,225,108,128,34,96,231,242,229,225,244,229,114,129,34,111,141,181,238,239,114,2,141,189,141,197,229,241,245,225,108,128,34,113,236,229,243,115,128,34,121,233,228,229,238,244,233,227,225,108,128,34,98,236,229,243,115,129,34,110,141,225,238,239,242,229,241,245,225,108,128,34,112,112,2,141,242,141,252,225,242,225,236,236,229,108,128,34,38,242,229,227,229,228,229,115,128,34,128,243,117,3,142,15,142,22,142,31,226,243,229,116,128,34,132,227,227,229,229,228,115,128,34,129,240,229,242,243,229,116,128,34,133,247,225,242,237,229,238,233,225,110,128,5,118,240,225,242,229,110,128,36,169,115,2,142,66,142,75,243,241,245,225,242,101,128,51,177,245,240,229,242,233,239,114,128,32,127,244,233,236,228,101,128,0,241,117,132,3,189,142,105,142,116,142,197,143,24,232,233,242,225,231,225,238,97,128,48,108,107,2,142,122,142,146,225,244,225,235,225,238,97,129,48,204,142,134,232,225,236,230,247,233,228,244,104,128,255,135,244,97,3,142,155,142,165,142,172,226,229,238,231,225,236,105,128,9,188,228,229,246,97,128,9,60,231,117,2,142,179,142,188,234,225,242,225,244,105,128,10,188,242,237,245,235,232,105,128,10,60,109,2,142,203,142,237,226,229,242,243,233,231,110,130,0,35,142,217,142,229,237,239,238,239,243,240,225,227,101,128,255,3,243,237,225,236,108,128,254,95,229,114,2,142,244,143,20,225,236,243,233,231,110,2,142,255,143,7,231,242,229,229,107,128,3,116,236,239,247,229,242,231,242,229,229,107,128,3,117,111,128,33,22,110,130,5,224,143,32,143,52,228,225,231,229,243,104,129,251,64,143,43,232,229,226,242,229,119,128,251,64,232,229,226,242,229,119,128,5,224,246,243,241,245,225,242,101,128,51,181,247,243,241,245,225,242,101,128,51,187,249,97,3,143,90,143,100,143,107,226,229,238,231,225,236,105,128,9,158,228,229,246,97,128,9,30,231,117,2,143,114,143,123,234,225,242,225,244,105,128,10,158,242,237,245,235,232,105,128,10,30,111,147,0,111,143,174,143,196,144,18,144,188,145,4,145,19,145,59,145,182,145,203,145,241,145,252,146,174,148,8,148,72,148,105,148,151,149,24,149,71,149,83,97,2,143,180,143,187,227,245,244,101,128,0,243,238,231,244,232,225,105,128,14,45,98,4,143,206,143,248,144,1,144,11,225,242,242,229,100,130,2,117,143,218,143,229,227,249,242,233,236,236,233,99,128,4,233,228,233,229,242,229,243,233,243,227,249,242,233,236,236,233,99,128,4,235,229,238,231,225,236,105,128,9,147,239,240,239,237,239,230,111,128,49,27,242,229,246,101,128,1,79,99,3,144,26,144,99,144,178,97,2,144,32,144,93,238,228,242,97,3,144,43,144,50,144,61,228,229,246,97,128,9,17,231,245,234,225,242,225,244,105,128,10,145,246,239,247,229,236,243,233,231,110,2,144,75,144,82,228,229,246,97,128,9,73,231,245,234,225,242,225,244,105,128,10,201,242,239,110,128,1,210,233,242,99,2,144,107,144,112,236,101,128,36,222,245,237,230,236,229,120,133,0,244,144,131,144,139,144,150,144,158,144,170,225,227,245,244,101,128,30,209,228,239,244,226,229,236,239,119,128,30,217,231,242,225,246,101,128,30,211,232,239,239,235,225,226,239,246,101,128,30,213,244,233,236,228,101,128,30,215,249,242,233,236,236,233,99,128,4,62,100,4,144,198,144,221,144,227,144,250,226,108,2,144,205,144,213,225,227,245,244,101,128,1,81,231,242,225,246,101,128,2,13,229,246,97,128,9,19,233,229,242,229,243,233,115,129,0,246,144,239,227,249,242,233,236,236,233,99,128,4,231,239,244,226,229,236,239,119,128,30,205,101,129,1,83,145,10,235,239,242,229,225,110,128,49,90,103,3,145,27,145,42,145,49,239,238,229,107,129,2,219,145,36,227,237,98,128,3,40,242,225,246,101,128,0,242,245,234,225,242,225,244,105,128,10,147,104,4,145,69,145,80,145,90,145,168,225,242,237,229,238,233,225,110,128,5,133,233,242,225,231,225,238,97,128,48,74,111,2,145,96,145,106,239,235,225,226,239,246,101,128,30,207,242,110,133,1,161,145,121,145,129,145,140,145,148,145,160,225,227,245,244,101,128,30,219,228,239,244,226,229,236,239,119,128,30,227,231,242,225,246,101,128,30,221,232,239,239,235,225,226,239,246,101,128,30,223,244,233,236,228,101,128,30,225,245,238,231,225,242,245,237,236,225,245,116,128,1,81,105,129,1,163,145,188,238,246,229,242,244,229,228,226,242,229,246,101,128,2,15,107,2,145,209,145,233,225,244,225,235,225,238,97,129,48,170,145,221,232,225,236,230,247,233,228,244,104,128,255,117,239,242,229,225,110,128,49,87,236,229,232,229,226,242,229,119,128,5,171,109,6,146,10,146,38,146,45,146,134,146,145,146,163,225,227,242,239,110,130,1,77,146,22,146,30,225,227,245,244,101,128,30,83,231,242,225,246,101,128,30,81,228,229,246,97,128,9,80,229,231,97,133,3,201,146,61,146,65,146,76,146,90,146,106,49,128,3,214,227,249,242,233,236,236,233,99,128,4,97,236,225,244,233,238,227,236,239,243,229,100,128,2,119,242,239,245,238,228,227,249,242,233,236,236,233,99,128,4,123,116,2,146,112,146,127,233,244,236,239,227,249,242,233,236,236,233,99,128,4,125,239,238,239,115,128,3,206,231,245,234,225,242,225,244,105,128,10,208,233,227,242,239,110,129,3,191,146,155,244,239,238,239,115,128,3,204,239,238,239,243,240,225,227,101,128,255,79,238,101,145,0,49,146,213,146,222,146,232,147,6,147,31,147,40,147,49,147,74,147,108,147,142,147,154,147,173,147,184,147,217,147,227,147,235,147,246,225,242,225,226,233,99,128,6,97,226,229,238,231,225,236,105,128,9,231,227,233,242,227,236,101,129,36,96,146,243,233,238,246,229,242,243,229,243,225,238,243,243,229,242,233,102,128,39,138,100,2,147,12,147,18,229,246,97,128,9,103,239,244,229,238,236,229,225,228,229,114,128,32,36,229,233,231,232,244,104,128,33,91,230,233,244,244,229,100,128,246,220,231,117,2,147,56,147,65,234,225,242,225,244,105,128,10,231,242,237,245,235,232,105,128,10,103,232,97,3,147,83,147,94,147,99,227,235,225,242,225,226,233,99,128,6,97,236,102,128,0,189,238,231,250,232,239,117,128,48,33,105,2,147,114,147,132,228,229,239,231,242,225,240,232,233,227,240,225,242,229,110,128,50,32,238,230,229,242,233,239,114,128,32,129,237,239,238,239,243,240,225,227,101,128,255,17,238,245,237,229,242,225,244,239,242,226,229,238,231,225,236,105,128,9,244,239,236,228,243,244,249,236,101,128,247,49,112,2,147,190,147,197,225,242,229,110,128,36,116,229,114,2,147,204,147,210,233,239,100,128,36,136,243,233,225,110,128,6,241,241,245,225,242,244,229,114,128,0,188,242,239,237,225,110,128,33,112,243,245,240,229,242,233,239,114,128,0,185,244,104,2,147,253,148,2,225,105,128,14,81,233,242,100,128,33,83,111,3,148,16,148,50,148,66,103,2,148,22,148,40,239,238,229,107,129,1,235,148,31,237,225,227,242,239,110,128,1,237,245,242,237,245,235,232,105,128,10,19,237,225,244,242,225,231,245,242,237,245,235,232,105,128,10,75,240,229,110,128,2,84,112,3,148,80,148,87,148,98,225,242,229,110,128,36,170,229,238,226,245,236,236,229,116,128,37,230,244,233,239,110,128,35,37,114,2,148,111,148,140,100,2,148,117,148,128,230,229,237,233,238,233,238,101,128,0,170,237,225,243,227,245,236,233,238,101,128,0,186,244,232,239,231,239,238,225,108,128,34,31,115,5,148,163,148,195,148,212,149,1,149,14,232,239,242,116,2,148,172,148,179,228,229,246,97,128,9,18,246,239,247,229,236,243,233,231,238,228,229,246,97,128,9,74,236,225,243,104,129,0,248,148,204,225,227,245,244,101,128,1,255,237,225,236,108,2,148,221,148,232,232,233,242,225,231,225,238,97,128,48,73,235,225,244,225,235,225,238,97,129,48,169,148,245,232,225,236,230,247,233,228,244,104,128,255,107,244,242,239,235,229,225,227,245,244,101,128,1,255,245,240,229,242,233,239,114,128,246,240,116,2,149,30,149,41,227,249,242,233,236,236,233,99,128,4,127,233,236,228,101,130,0,245,149,52,149,60,225,227,245,244,101,128,30,77,228,233,229,242,229,243,233,115,128,30,79,245,226,239,240,239,237,239,230,111,128,49,33,118,2,149,89,149,170,229,114,2,149,96,149,162,236,233,238,101,131,32,62,149,109,149,132,149,155,99,2,149,115,149,127,229,238,244,229,242,236,233,238,101,128,254,74,237,98,128,3,5,100,2,149,138,149,146,225,243,232,229,100,128,254,73,226,236,247,225,246,121,128,254,76,247,225,246,121,128,254,75,243,227,239,242,101,128,0,175,239,247,229,236,243,233,231,110,3,149,185,149,195,149,202,226,229,238,231,225,236,105,128,9,203,228,229,246,97,128,9,75,231,245,234,225,242,225,244,105,128,10,203,112,145,0,112,149,251,152,123,152,134,152,143,152,155,154,80,154,90,155,82,156,101,156,191,156,217,157,92,157,100,158,2,158,60,158,88,158,98,97,14,150,25,150,57,150,67,150,74,150,81,150,129,150,140,150,154,150,165,150,212,150,226,151,238,152,21,152,111,97,2,150,31,150,43,237,240,243,243,241,245,225,242,101,128,51,128,243,229,238,244,239,243,241,245,225,242,101,128,51,43,226,229,238,231,225,236,105,128,9,170,227,245,244,101,128,30,85,228,229,246,97,128,9,42,103,2,150,87,150,105,101,2,150,93,150,100,228,239,247,110,128,33,223,245,112,128,33,222,117,2,150,111,150,120,234,225,242,225,244,105,128,10,170,242,237,245,235,232,105,128,10,42,232,233,242,225,231,225,238,97,128,48,113,233,249,225,238,238,239,233,244,232,225,105,128,14,47,235,225,244,225,235,225,238,97,128,48,209,108,2,150,171,150,196,225,244,225,236,233,250,225,244,233,239,238,227,249,242,233,236,236,233,227,227,237,98,128,4,132,239,227,232,235,225,227,249,242,233,236,236,233,99,128,4,192,238,243,233,239,243,235,239,242,229,225,110,128,49,127,114,3,150,234,150,255,151,227,97,2,150,240,150,248,231,242,225,240,104,128,0,182,236,236,229,108,128,34,37,229,110,2,151,6,151,116,236,229,230,116,136,0,40,151,29,151,44,151,49,151,54,151,65,151,77,151,100,151,105,225,236,244,239,238,229,225,242,225,226,233,99,128,253,62,226,116,128,248,237,229,120,128,248,236,233,238,230,229,242,233,239,114,128,32,141,237,239,238,239,243,240,225,227,101,128,255,8,115,2,151,83,151,90,237,225,236,108,128,254,89,245,240,229,242,233,239,114,128,32,125,244,112,128,248,235,246,229,242,244,233,227,225,108,128,254,53,242,233,231,232,116,136,0,41,151,140,151,155,151,160,151,165,151,176,151,188,151,211,151,216,225,236,244,239,238,229,225,242,225,226,233,99,128,253,63,226,116,128,248,248,229,120,128,248,247,233,238,230,229,242,233,239,114,128,32,142,237,239,238,239,243,240,225,227,101,128,255,9,115,2,151,194,151,201,237,225,236,108,128,254,90,245,240,229,242,233,239,114,128,32,126,244,112,128,248,246,246,229,242,244,233,227,225,108,128,254,54,244,233,225,236,228,233,230,102,128,34,2,115,3,151,246,152,1,152,13,229,241,232,229,226,242,229,119,128,5,192,232,244,225,232,229,226,242,229,119,128,5,153,241,245,225,242,101,128,51,169,244,225,104,134,5,183,152,39,152,53,152,58,152,67,152,82,152,98,49,2,152,45,152,49,49,128,5,183,100,128,5,183,178,97,128,5,183,232,229,226,242,229,119,128,5,183,238,225,242,242,239,247,232,229,226,242,229,119,128,5,183,241,245,225,242,244,229,242,232,229,226,242,229,119,128,5,183,247,233,228,229,232,229,226,242,229,119,128,5,183,250,229,242,232,229,226,242,229,119,128,5,161,226,239,240,239,237,239,230,111,128,49,6,227,233,242,227,236,101,128,36,223,228,239,244,225,227,227,229,238,116,128,30,87,101,137,5,228,152,177,152,188,152,208,152,220,152,240,153,86,153,97,153,118,154,73,227,249,242,233,236,236,233,99,128,4,63,228,225,231,229,243,104,129,251,68,152,199,232,229,226,242,229,119,128,251,68,229,250,233,243,241,245,225,242,101,128,51,59,230,233,238,225,236,228,225,231,229,243,232,232,229,226,242,229,119,128,251,67,104,5,152,252,153,19,153,27,153,41,153,71,225,114,2,153,3,153,10,225,226,233,99,128,6,126,237,229,238,233,225,110,128,5,122,229,226,242,229,119,128,5,228,230,233,238,225,236,225,242,225,226,233,99,128,251,87,105,2,153,47,153,62,238,233,244,233,225,236,225,242,225,226,233,99,128,251,88,242,225,231,225,238,97,128,48,122,237,229,228,233,225,236,225,242,225,226,233,99,128,251,89,235,225,244,225,235,225,238,97,128,48,218,237,233,228,228,236,229,232,239,239,235,227,249,242,233,236,236,233,99,128,4,167,114,5,153,130,153,142,153,184,154,49,154,62,225,230,229,232,229,226,242,229,119,128,251,78,227,229,238,116,131,0,37,153,155,153,164,153,176,225,242,225,226,233,99,128,6,106,237,239,238,239,243,240,225,227,101,128,255,5,243,237,225,236,108,128,254,106,105,2,153,190,154,31,239,100,134,0,46,153,207,153,218,153,229,153,241,153,252,154,8,225,242,237,229,238,233,225,110,128,5,137,227,229,238,244,229,242,229,100,128,0,183,232,225,236,230,247,233,228,244,104,128,255,97,233,238,230,229,242,233,239,114,128,246,231,237,239,238,239,243,240,225,227,101,128,255,14,115,2,154,14,154,21,237,225,236,108,128,254,82,245,240,229,242,233,239,114,128,246,232,243,240,239,237,229,238,233,231,242,229,229,235,227,237,98,128,3,66,240,229,238,228,233,227,245,236,225,114,128,34,165,244,232,239,245,243,225,238,100,128,32,48,243,229,244,97,128,32,167,230,243,241,245,225,242,101,128,51,138,104,3,154,98,154,148,155,29,97,3,154,106,154,116,154,123,226,229,238,231,225,236,105,128,9,171,228,229,246,97,128,9,43,231,117,2,154,130,154,139,234,225,242,225,244,105,128,10,171,242,237,245,235,232,105,128,10,43,105,133,3,198,154,162,154,166,154,252,155,4,155,15,49,128,3,213,229,245,240,104,4,154,179,154,214,154,229,154,238,97,2,154,185,154,200,227,233,242,227,236,229,235,239,242,229,225,110,128,50,122,240,225,242,229,238,235,239,242,229,225,110,128,50,26,227,233,242,227,236,229,235,239,242,229,225,110,128,50,108,235,239,242,229,225,110,128,49,77,240,225,242,229,238,235,239,242,229,225,110,128,50,12,236,225,244,233,110,128,2,120,238,244,232,245,244,232,225,105,128,14,58,243,249,237,226,239,236,231,242,229,229,107,128,3,213,111,3,155,37,155,42,155,68,239,107,128,1,165,240,104,2,155,49,155,58,225,238,244,232,225,105,128,14,30,245,238,231,244,232,225,105,128,14,28,243,225,237,240,232,225,239,244,232,225,105,128,14,32,105,133,3,192,155,96,156,52,156,63,156,74,156,88,229,245,112,6], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61441);
/* memory initializer */ allocate([155,112,155,147,155,179,155,207,155,221,156,17,97,2,155,118,155,133,227,233,242,227,236,229,235,239,242,229,225,110,128,50,115,240,225,242,229,238,235,239,242,229,225,110,128,50,19,227,105,2,155,154,155,166,229,245,227,235,239,242,229,225,110,128,49,118,242,227,236,229,235,239,242,229,225,110,128,50,101,107,2,155,185,155,199,233,249,229,239,235,235,239,242,229,225,110,128,49,114,239,242,229,225,110,128,49,66,240,225,242,229,238,235,239,242,229,225,110,128,50,5,243,233,239,115,2,155,230,156,2,107,2,155,236,155,250,233,249,229,239,235,235,239,242,229,225,110,128,49,116,239,242,229,225,110,128,49,68,244,233,235,229,245,244,235,239,242,229,225,110,128,49,117,116,2,156,23,156,38,232,233,229,245,244,232,235,239,242,229,225,110,128,49,119,233,235,229,245,244,235,239,242,229,225,110,128,49,115,232,233,242,225,231,225,238,97,128,48,116,235,225,244,225,235,225,238,97,128,48,212,243,249,237,226,239,236,231,242,229,229,107,128,3,214,247,242,225,242,237,229,238,233,225,110,128,5,131,236,245,115,132,0,43,156,115,156,126,156,135,156,168,226,229,236,239,247,227,237,98,128,3,31,227,233,242,227,236,101,128,34,149,109,2,156,141,156,148,233,238,245,115,128,0,177,111,2,156,154,156,158,100,128,2,214,238,239,243,240,225,227,101,128,255,11,115,2,156,174,156,181,237,225,236,108,128,254,98,245,240,229,242,233,239,114,128,32,122,109,2,156,197,156,208,239,238,239,243,240,225,227,101,128,255,80,243,241,245,225,242,101,128,51,216,111,5,156,229,156,240,157,51,157,62,157,72,232,233,242,225,231,225,238,97,128,48,125,233,238,244,233,238,231,233,238,228,229,120,4,157,4,157,16,157,28,157,41,228,239,247,238,247,232,233,244,101,128,38,31,236,229,230,244,247,232,233,244,101,128,38,28,242,233,231,232,244,247,232,233,244,101,128,38,30,245,240,247,232,233,244,101,128,38,29,235,225,244,225,235,225,238,97,128,48,221,240,236,225,244,232,225,105,128,14,27,243,244,225,236,237,225,242,107,129,48,18,157,85,230,225,227,101,128,48,32,240,225,242,229,110,128,36,171,114,3,157,108,157,134,157,159,101,2,157,114,157,122,227,229,228,229,115,128,34,122,243,227,242,233,240,244,233,239,110,128,33,30,233,237,101,2,157,142,157,148,237,239,100,128,2,185,242,229,246,229,242,243,229,100,128,32,53,111,4,157,169,157,176,157,186,157,199,228,245,227,116,128,34,15,234,229,227,244,233,246,101,128,35,5,236,239,238,231,229,228,235,225,238,97,128,48,252,112,2,157,205,157,242,101,2,157,211,157,218,236,236,239,114,128,35,24,242,243,117,2,157,226,157,233,226,243,229,116,128,34,130,240,229,242,243,229,116,128,34,131,239,242,244,233,239,110,129,34,55,157,253,225,108,128,34,29,115,2,158,8,158,51,105,130,3,200,158,16,158,27,227,249,242,233,236,236,233,99,128,4,113,236,233,240,238,229,245,237,225,244,225,227,249,242,233,236,236,233,227,227,237,98,128,4,134,243,241,245,225,242,101,128,51,176,117,2,158,66,158,77,232,233,242,225,231,225,238,97,128,48,119,235,225,244,225,235,225,238,97,128,48,215,246,243,241,245,225,242,101,128,51,180,247,243,241,245,225,242,101,128,51,186,113,136,0,113,158,128,159,177,159,188,159,197,159,204,159,216,159,254,160,6,97,4,158,138,158,161,158,225,159,160,100,2,158,144,158,150,229,246,97,128,9,88,237,225,232,229,226,242,229,119,128,5,168,102,4,158,171,158,180,158,194,158,210,225,242,225,226,233,99,128,6,66,230,233,238,225,236,225,242,225,226,233,99,128,254,214,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,215,237,229,228,233,225,236,225,242,225,226,233,99,128,254,216,237,225,244,115,136,5,184,158,248,159,12,159,26,159,31,159,36,159,45,159,60,159,147,49,3,159,0,159,4,159,8,48,128,5,184,97,128,5,184,99,128,5,184,50,2,159,18,159,22,55,128,5,184,57,128,5,184,179,51,128,5,184,228,101,128,5,184,232,229,226,242,229,119,128,5,184,238,225,242,242,239,247,232,229,226,242,229,119,128,5,184,113,2,159,66,159,132,225,244,225,110,4,159,79,159,88,159,103,159,119,232,229,226,242,229,119,128,5,184,238,225,242,242,239,247,232,229,226,242,229,119,128,5,184,241,245,225,242,244,229,242,232,229,226,242,229,119,128,5,184,247,233,228,229,232,229,226,242,229,119,128,5,184,245,225,242,244,229,242,232,229,226,242,229,119,128,5,184,247,233,228,229,232,229,226,242,229,119,128,5,184,242,238,229,249,240,225,242,225,232,229,226,242,229,119,128,5,159,226,239,240,239,237,239,230,111,128,49,17,227,233,242,227,236,101,128,36,224,232,239,239,107,128,2,160,237,239,238,239,243,240,225,227,101,128,255,81,239,102,130,5,231,159,225,159,245,228,225,231,229,243,104,129,251,71,159,236,232,229,226,242,229,119,128,251,71,232,229,226,242,229,119,128,5,231,240,225,242,229,110,128,36,172,117,4,160,16,160,28,160,117,160,204,225,242,244,229,242,238,239,244,101,128,38,105,226,245,244,115,135,5,187,160,49,160,54,160,59,160,64,160,73,160,88,160,104,177,56,128,5,187,178,53,128,5,187,179,49,128,5,187,232,229,226,242,229,119,128,5,187,238,225,242,242,239,247,232,229,226,242,229,119,128,5,187,241,245,225,242,244,229,242,232,229,226,242,229,119,128,5,187,247,233,228,229,232,229,226,242,229,119,128,5,187,229,243,244,233,239,110,133,0,63,160,136,160,159,160,176,160,184,160,196,225,114,2,160,143,160,150,225,226,233,99,128,6,31,237,229,238,233,225,110,128,5,94,228,239,247,110,129,0,191,160,168,243,237,225,236,108,128,247,191,231,242,229,229,107,128,3,126,237,239,238,239,243,240,225,227,101,128,255,31,243,237,225,236,108,128,247,63,239,244,101,4,160,216,161,31,161,51,161,80,228,226,108,133,0,34,160,232,160,239,160,246,161,2,161,23,226,225,243,101,128,32,30,236,229,230,116,128,32,28,237,239,238,239,243,240,225,227,101,128,255,2,240,242,233,237,101,129,48,30,161,12,242,229,246,229,242,243,229,100,128,48,29,242,233,231,232,116,128,32,29,236,229,230,116,129,32,24,161,40,242,229,246,229,242,243,229,100,128,32,27,114,2,161,57,161,67,229,246,229,242,243,229,100,128,32,27,233,231,232,116,129,32,25,161,76,110,128,1,73,243,233,238,231,108,2,161,90,161,97,226,225,243,101,128,32,26,101,129,0,39,161,103,237,239,238,239,243,240,225,227,101,128,255,7,114,145,0,114,161,153,162,157,162,168,162,215,163,10,164,27,164,51,164,146,166,180,166,217,166,229,167,27,167,35,167,197,167,208,167,243,168,87,97,11,161,177,161,188,161,198,161,205,162,14,162,30,162,55,162,66,162,91,162,114,162,151,225,242,237,229,238,233,225,110,128,5,124,226,229,238,231,225,236,105,128,9,176,227,245,244,101,128,1,85,100,4,161,215,161,221,161,235,162,5,229,246,97,128,9,48,233,227,225,108,129,34,26,161,230,229,120,128,248,229,239,246,229,242,243,243,241,245,225,242,101,129,51,174,161,251,228,243,241,245,225,242,101,128,51,175,243,241,245,225,242,101,128,51,173,230,101,129,5,191,162,21,232,229,226,242,229,119,128,5,191,231,117,2,162,37,162,46,234,225,242,225,244,105,128,10,176,242,237,245,235,232,105,128,10,48,232,233,242,225,231,225,238,97,128,48,137,235,225,244,225,235,225,238,97,129,48,233,162,79,232,225,236,230,247,233,228,244,104,128,255,151,236,239,247,229,242,228,233,225,231,239,238,225,236,226,229,238,231,225,236,105,128,9,241,109,2,162,120,162,143,233,228,228,236,229,228,233,225,231,239,238,225,236,226,229,238,231,225,236,105,128,9,240,243,232,239,242,110,128,2,100,244,233,111,128,34,54,226,239,240,239,237,239,230,111,128,49,22,99,4,162,178,162,185,162,194,162,202,225,242,239,110,128,1,89,229,228,233,236,236,97,128,1,87,233,242,227,236,101,128,36,225,239,237,237,225,225,227,227,229,238,116,128,1,87,100,2,162,221,162,231,226,236,231,242,225,246,101,128,2,17,239,116,2,162,238,162,247,225,227,227,229,238,116,128,30,89,226,229,236,239,119,129,30,91,163,1,237,225,227,242,239,110,128,30,93,101,6,163,24,163,69,163,104,163,159,163,184,163,217,102,2,163,30,163,43,229,242,229,238,227,229,237,225,242,107,128,32,59,236,229,248,243,117,2,163,53,163,60,226,243,229,116,128,34,134,240,229,242,243,229,116,128,34,135,231,233,243,244,229,114,2,163,80,163,85,229,100,128,0,174,115,2,163,91,163,97,225,238,115,128,248,232,229,242,233,102,128,246,218,104,3,163,112,163,135,163,149,225,114,2,163,119,163,126,225,226,233,99,128,6,49,237,229,238,233,225,110,128,5,128,230,233,238,225,236,225,242,225,226,233,99,128,254,174,233,242,225,231,225,238,97,128,48,140,235,225,244,225,235,225,238,97,129,48,236,163,172,232,225,236,230,247,233,228,244,104,128,255,154,243,104,130,5,232,163,193,163,208,228,225,231,229,243,232,232,229,226,242,229,119,128,251,72,232,229,226,242,229,119,128,5,232,118,3,163,225,163,238,164,14,229,242,243,229,228,244,233,236,228,101,128,34,61,233,97,2,163,245,163,254,232,229,226,242,229,119,128,5,151,237,245,231,242,225,243,232,232,229,226,242,229,119,128,5,151,236,239,231,233,227,225,236,238,239,116,128,35,16,230,233,243,232,232,239,239,107,129,2,126,164,40,242,229,246,229,242,243,229,100,128,2,127,104,2,164,57,164,80,97,2,164,63,164,73,226,229,238,231,225,236,105,128,9,221,228,229,246,97,128,9,93,111,131,3,193,164,90,164,119,164,133,239,107,129,2,125,164,97,244,245,242,238,229,100,129,2,123,164,108,243,245,240,229,242,233,239,114,128,2,181,243,249,237,226,239,236,231,242,229,229,107,128,3,241,244,233,227,232,239,239,235,237,239,100,128,2,222,105,6,164,160,165,204,165,250,166,5,166,30,166,166,229,245,108,9,164,182,164,217,164,232,164,246,165,36,165,50,165,136,165,149,165,184,97,2,164,188,164,203,227,233,242,227,236,229,235,239,242,229,225,110,128,50,113,240,225,242,229,238,235,239,242,229,225,110,128,50,17,227,233,242,227,236,229,235,239,242,229,225,110,128,50,99,232,233,229,245,232,235,239,242,229,225,110,128,49,64,107,2,164,252,165,28,233,249,229,239,107,2,165,6,165,15,235,239,242,229,225,110,128,49,58,243,233,239,243,235,239,242,229,225,110,128,49,105,239,242,229,225,110,128,49,57,237,233,229,245,237,235,239,242,229,225,110,128,49,59,112,3,165,58,165,90,165,105,97,2,165,64,165,78,238,243,233,239,243,235,239,242,229,225,110,128,49,108,242,229,238,235,239,242,229,225,110,128,50,3,232,233,229,245,240,232,235,239,242,229,225,110,128,49,63,233,229,245,112,2,165,114,165,123,235,239,242,229,225,110,128,49,60,243,233,239,243,235,239,242,229,225,110,128,49,107,243,233,239,243,235,239,242,229,225,110,128,49,61,116,2,165,155,165,170,232,233,229,245,244,232,235,239,242,229,225,110,128,49,62,233,235,229,245,244,235,239,242,229,225,110,128,49,106,249,229,239,242,233,238,232,233,229,245,232,235,239,242,229,225,110,128,49,109,231,232,116,2,165,212,165,220,225,238,231,236,101,128,34,31,116,2,165,226,165,240,225,227,235,226,229,236,239,247,227,237,98,128,3,25,242,233,225,238,231,236,101,128,34,191,232,233,242,225,231,225,238,97,128,48,138,235,225,244,225,235,225,238,97,129,48,234,166,18,232,225,236,230,247,233,228,244,104,128,255,152,110,2,166,36,166,152,103,131,2,218,166,46,166,57,166,63,226,229,236,239,247,227,237,98,128,3,37,227,237,98,128,3,10,232,225,236,102,2,166,72,166,118,236,229,230,116,131,2,191,166,85,166,96,166,107,225,242,237,229,238,233,225,110,128,5,89,226,229,236,239,247,227,237,98,128,3,28,227,229,238,244,229,242,229,100,128,2,211,242,233,231,232,116,130,2,190,166,130,166,141,226,229,236,239,247,227,237,98,128,3,57,227,229,238,244,229,242,229,100,128,2,210,246,229,242,244,229,228,226,242,229,246,101,128,2,19,244,244,239,242,245,243,241,245,225,242,101,128,51,81,108,2,166,186,166,197,233,238,229,226,229,236,239,119,128,30,95,239,238,231,236,229,103,129,2,124,166,208,244,245,242,238,229,100,128,2,122,237,239,238,239,243,240,225,227,101,128,255,82,111,3,166,237,166,248,167,17,232,233,242,225,231,225,238,97,128,48,141,235,225,244,225,235,225,238,97,129,48,237,167,5,232,225,236,230,247,233,228,244,104,128,255,155,242,245,225,244,232,225,105,128,14,35,240,225,242,229,110,128,36,173,114,3,167,43,167,79,167,109,97,3,167,51,167,61,167,68,226,229,238,231,225,236,105,128,9,220,228,229,246,97,128,9,49,231,245,242,237,245,235,232,105,128,10,92,229,104,2,167,86,167,95,225,242,225,226,233,99,128,6,145,230,233,238,225,236,225,242,225,226,233,99,128,251,141,246,239,227,225,236,233,99,4,167,125,167,135,167,142,167,153,226,229,238,231,225,236,105,128,9,224,228,229,246,97,128,9,96,231,245,234,225,242,225,244,105,128,10,224,246,239,247,229,236,243,233,231,110,3,167,169,167,179,167,186,226,229,238,231,225,236,105,128,9,196,228,229,246,97,128,9,68,231,245,234,225,242,225,244,105,128,10,196,243,245,240,229,242,233,239,114,128,246,241,116,2,167,214,167,222,226,236,239,227,107,128,37,144,245,242,238,229,100,129,2,121,167,232,243,245,240,229,242,233,239,114,128,2,180,117,4,167,253,168,8,168,33,168,80,232,233,242,225,231,225,238,97,128,48,139,235,225,244,225,235,225,238,97,129,48,235,168,21,232,225,236,230,247,233,228,244,104,128,255,153,112,2,168,39,168,74,229,101,2,168,46,168,60,237,225,242,235,226,229,238,231,225,236,105,128,9,242,243,233,231,238,226,229,238,231,225,236,105,128,9,243,233,225,104,128,246,221,244,232,225,105,128,14,36,246,239,227,225,236,233,99,4,168,103,168,113,168,120,168,131,226,229,238,231,225,236,105,128,9,139,228,229,246,97,128,9,11,231,245,234,225,242,225,244,105,128,10,139,246,239,247,229,236,243,233,231,110,3,168,147,168,157,168,164,226,229,238,231,225,236,105,128,9,195,228,229,246,97,128,9,67,231,245,234,225,242,225,244,105,128,10,195,115,147,0,115,168,217,170,187,170,198,171,68,171,107,174,49,174,60,176,203,179,85,179,131,179,158,180,93,180,160,181,193,181,203,182,133,182,206,183,120,183,130,97,9,168,237,168,247,169,12,169,84,169,109,169,120,169,145,169,177,169,217,226,229,238,231,225,236,105,128,9,184,227,245,244,101,129,1,91,169,0,228,239,244,225,227,227,229,238,116,128,30,101,100,5,169,24,169,33,169,39,169,53,169,69,225,242,225,226,233,99,128,6,53,229,246,97,128,9,56,230,233,238,225,236,225,242,225,226,233,99,128,254,186,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,187,237,229,228,233,225,236,225,242,225,226,233,99,128,254,188,231,117,2,169,91,169,100,234,225,242,225,244,105,128,10,184,242,237,245,235,232,105,128,10,56,232,233,242,225,231,225,238,97,128,48,85,235,225,244,225,235,225,238,97,129,48,181,169,133,232,225,236,230,247,233,228,244,104,128,255,123,236,236,225,236,236,225,232,239,245,225,236,225,249,232,229,247,225,243,225,236,236,225,237,225,242,225,226,233,99,128,253,250,237,229,235,104,130,5,225,169,188,169,208,228,225,231,229,243,104,129,251,65,169,199,232,229,226,242,229,119,128,251,65,232,229,226,242,229,119,128,5,225,242,97,5,169,230,170,48,170,56,170,106,170,114,97,5,169,242,169,250,170,2,170,33,170,41,225,244,232,225,105,128,14,50,229,244,232,225,105,128,14,65,233,237,225,233,109,2,170,12,170,23,225,236,225,233,244,232,225,105,128,14,68,245,225,238,244,232,225,105,128,14,67,237,244,232,225,105,128,14,51,244,232,225,105,128,14,48,229,244,232,225,105,128,14,64,105,3,170,64,170,88,170,99,105,2,170,70,170,81,236,229,230,244,244,232,225,105,128,248,134,244,232,225,105,128,14,53,236,229,230,244,244,232,225,105,128,248,133,244,232,225,105,128,14,52,239,244,232,225,105,128,14,66,117,3,170,122,170,172,170,179,101,3,170,130,170,154,170,165,101,2,170,136,170,147,236,229,230,244,244,232,225,105,128,248,136,244,232,225,105,128,14,55,236,229,230,244,244,232,225,105,128,248,135,244,232,225,105,128,14,54,244,232,225,105,128,14,56,245,244,232,225,105,128,14,57,226,239,240,239,237,239,230,111,128,49,25,99,5,170,210,170,231,170,240,171,33,171,55,225,242,239,110,129,1,97,170,219,228,239,244,225,227,227,229,238,116,128,30,103,229,228,233,236,236,97,128,1,95,232,247,97,131,2,89,170,252,171,7,171,26,227,249,242,233,236,236,233,99,128,4,217,228,233,229,242,229,243,233,243,227,249,242,233,236,236,233,99,128,4,219,232,239,239,107,128,2,90,233,242,99,2,171,41,171,46,236,101,128,36,226,245,237,230,236,229,120,128,1,93,239,237,237,225,225,227,227,229,238,116,128,2,25,228,239,116,2,171,76,171,85,225,227,227,229,238,116,128,30,97,226,229,236,239,119,129,30,99,171,95,228,239,244,225,227,227,229,238,116,128,30,105,101,9,171,127,171,143,171,178,171,243,172,90,172,117,172,142,172,223,172,250,225,231,245,236,236,226,229,236,239,247,227,237,98,128,3,60,99,2,171,149,171,171,239,238,100,129,32,51,171,157,244,239,238,229,227,232,233,238,229,243,101,128,2,202,244,233,239,110,128,0,167,229,110,4,171,189,171,198,171,212,171,228,225,242,225,226,233,99,128,6,51,230,233,238,225,236,225,242,225,226,233,99,128,254,178,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,179,237,229,228,233,225,236,225,242,225,226,233,99,128,254,180,231,239,108,135,5,182,172,7,172,21,172,26,172,35,172,50,172,66,172,77,49,2,172,13,172,17,51,128,5,182,102,128,5,182,178,99,128,5,182,232,229,226,242,229,119,128,5,182,238,225,242,242,239,247,232,229,226,242,229,119,128,5,182,241,245,225,242,244,229,242,232,229,226,242,229,119,128,5,182,244,225,232,229,226,242,229,119,128,5,146,247,233,228,229,232,229,226,242,229,119,128,5,182,104,2,172,96,172,107,225,242,237,229,238,233,225,110,128,5,125,233,242,225,231,225,238,97,128,48,91,235,225,244,225,235,225,238,97,129,48,187,172,130,232,225,236,230,247,233,228,244,104,128,255,126,237,105,2,172,149,172,192,227,239,236,239,110,131,0,59,172,163,172,172,172,184,225,242,225,226,233,99,128,6,27,237,239,238,239,243,240,225,227,101,128,255,27,243,237,225,236,108,128,254,84,246,239,233,227,229,228,237,225,242,235,235,225,238,97,129,48,156,172,211,232,225,236,230,247,233,228,244,104,128,255,159,238,116,2,172,230,172,240,233,243,241,245,225,242,101,128,51,34,239,243,241,245,225,242,101,128,51,35,246,229,110,142,0,55,173,28,173,37,173,47,173,77,173,84,173,94,173,119,173,146,173,180,173,192,173,203,173,236,173,244,173,255,225,242,225,226,233,99,128,6,103,226,229,238,231,225,236,105,128,9,237,227,233,242,227,236,101,129,36,102,173,58,233,238,246,229,242,243,229,243,225,238,243,243,229,242,233,102,128,39,144,228,229,246,97,128,9,109,229,233,231,232,244,232,115,128,33,94,231,117,2,173,101,173,110,234,225,242,225,244,105,128,10,237,242,237,245,235,232,105,128,10,109,232,97,2,173,126,173,137,227,235,225,242,225,226,233,99,128,6,103,238,231,250,232,239,117,128,48,39,105,2,173,152,173,170,228,229,239,231,242,225,240,232,233,227,240,225,242,229,110,128,50,38,238,230,229,242,233,239,114,128,32,135,237,239,238,239,243,240,225,227,101,128,255,23,239,236,228,243,244,249,236,101,128,247,55,112,2,173,209,173,216,225,242,229,110,128,36,122,229,114,2,173,223,173,229,233,239,100,128,36,142,243,233,225,110,128,6,247,242,239,237,225,110,128,33,118,243,245,240,229,242,233,239,114,128,32,119,116,2,174,5,174,43,229,229,110,2,174,13,174,22,227,233,242,227,236,101,128,36,112,112,2,174,28,174,35,225,242,229,110,128,36,132,229,242,233,239,100,128,36,152,232,225,105,128,14,87,230,244,232,249,240,232,229,110,128,0,173,104,7,174,76,175,50,175,61,175,75,176,20,176,33,176,197,97,6,174,90,174,101,174,111,174,122,175,9,175,34,225,242,237,229,238,233,225,110,128,5,119,226,229,238,231,225,236,105,128,9,182,227,249,242,233,236,236,233,99,128,4,72,100,2,174,128,174,224,228,97,4,174,139,174,148,174,179,174,193,225,242,225,226,233,99,128,6,81,228,225,237,237,97,2,174,158,174,167,225,242,225,226,233,99,128,252,97,244,225,238,225,242,225,226,233,99,128,252,94,230,225,244,232,225,225,242,225,226,233,99,128,252,96,235,225,243,242,97,2,174,203,174,212,225,242,225,226,233,99,128,252,98,244,225,238,225,242,225,226,233,99,128,252,95,101,132,37,146,174,236,174,243,174,251,175,4,228,225,242,107,128,37,147,236,233,231,232,116,128,37,145,237,229,228,233,245,109,128,37,146,246,97,128,9,54,231,117,2,175,16,175,25,234,225,242,225,244,105,128,10,182,242,237,245,235,232,105,128,10,54,236,243,232,229,236,229,244,232,229,226,242,229,119,128,5,147,226,239,240,239,237,239,230,111,128,49,21,227,232,225,227,249,242,233,236,236,233,99,128,4,73,101,4,175,85,175,150,175,160,175,177,229,110,4,175,96,175,105,175,119,175,135,225,242,225,226,233,99,128,6,52,230,233,238,225,236,225,242,225,226,233,99,128,254,182,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,183,237,229,228,233,225,236,225,242,225,226,233,99,128,254,184,233,227,239,240,244,233,99,128,3,227,241,229,108,129,32,170,175,168,232,229,226,242,229,119,128,32,170,246,97,134,5,176,175,194,175,209,175,223,175,232,175,247,176,7,49,2,175,200,175,205,177,53,128,5,176,53,128,5,176,50,2,175,215,175,219,50,128,5,176,101,128,5,176,232,229,226,242,229,119,128,5,176,238,225,242,242,239,247,232,229,226,242,229,119,128,5,176,241,245,225,242,244,229,242,232,229,226,242,229,119,128,5,176,247,233,228,229,232,229,226,242,229,119,128,5,176,232,225,227,249,242,233,236,236,233,99,128,4,187,105,2,176,39,176,50,237,225,227,239,240,244,233,99,128,3,237,110,131,5,233,176,60,176,143,176,152,100,2,176,66,176,132,225,231,229,243,104,130,251,73,176,78,176,87,232,229,226,242,229,119,128,251,73,115,2,176,93,176,113,232,233,238,228,239,116,129,251,44,176,104,232,229,226,242,229,119,128,251,44,233,238,228,239,116,129,251,45,176,123,232,229,226,242,229,119,128,251,45,239,244,232,229,226,242,229,119,128,5,193,232,229,226,242,229,119,128,5,233,115,2,176,158,176,178,232,233,238,228,239,116,129,251,42,176,169,232,229,226,242,229,119,128,251,42,233,238,228,239,116,129,251,43,176,188,232,229,226,242,229,119,128,251,43,239,239,107,128,2,130,105,8,176,221,177,9,177,20,177,45,177,75,177,83,177,96,178,11,231,237,97,131,3,195,176,233,176,237,176,245,49,128,3,194,230,233,238,225,108,128,3,194,236,245,238,225,244,229,243,249,237,226,239,236,231,242,229,229,107,128,3,242,232,233,242,225,231,225,238,97,128,48,87,235,225,244,225,235,225,238,97,129,48,183,177,33,232,225,236,230,247,233,228,244,104,128,255,124,236,245,113,2,177,53,177,62,232,229,226,242,229,119,128,5,189,236,229,230,244,232,229,226,242,229,119,128,5,189,237,233,236,225,114,128,34,60,238,228,239,244,232,229,226,242,229,119,128,5,194,239,115,6,177,111,177,146,177,178,177,206,177,220,177,252,97,2,177,117,177,132,227,233,242,227,236,229,235,239,242,229,225,110,128,50,116,240,225,242,229,238,235,239,242,229,225,110,128,50,20,227,105,2,177,153,177,165,229,245,227,235,239,242,229,225,110,128,49,126,242,227,236,229,235,239,242,229,225,110,128,50,102,107,2,177,184,177,198,233,249,229,239,235,235,239,242,229,225,110,128,49,122,239,242,229,225,110,128,49,69,238,233,229,245,238,235,239,242,229,225,110,128,49,123,112,2,177,226,177,239,225,242,229,238,235,239,242,229,225,110,128,50,6,233,229,245,240,235,239,242,229,225,110,128,49,125,244,233,235,229,245,244,235,239,242,229,225,110,128,49,124,120,141,0,54,178,41,178,50,178,60,178,90,178,97,178,122,178,149,178,183,178,195,178,206,178,239,178,247,179,2,225,242,225,226,233,99,128,6,102,226,229,238,231,225,236,105,128,9,236,227,233,242,227,236,101,129,36,101,178,71,233,238,246,229,242,243,229,243,225,238,243,243,229,242,233,102,128,39,143,228,229,246,97,128,9,108,231,117,2,178,104,178,113,234,225,242,225,244,105,128,10,236,242,237,245,235,232,105,128,10,108,232,97,2,178,129,178,140,227,235,225,242,225,226,233,99,128,6,102,238,231,250,232,239,117,128,48,38,105,2,178,155,178,173,228,229,239,231,242,225,240,232,233,227,240,225,242,229,110,128,50,37,238,230,229,242,233,239,114,128,32,134,237,239,238,239,243,240,225,227,101,128,255,22,239,236,228,243,244,249,236,101,128,247,54,112,2,178,212,178,219,225,242,229,110,128,36,121,229,114,2,178,226,178,232,233,239,100,128,36,141,243,233,225,110,128,6,246,242,239,237,225,110,128,33,117,243,245,240,229,242,233,239,114,128,32,118,116,2,179,8,179,79,229,229,110,2,179,16,179,58,99,2,179,22,179,30,233,242,227,236,101,128,36,111,245,242,242,229,238,227,249,228,229,238,239,237,233,238,225,244,239,242,226,229,238,231,225,236,105,128,9,249,112,2,179,64,179,71,225,242,229,110,128,36,131,229,242,233,239,100,128,36,151,232,225,105,128,14,86,108,2,179,91,179,111,225,243,104,129,0,47,179,99,237,239,238,239,243,240,225,227,101,128,255,15,239,238,103,129,1,127,179,119,228,239,244,225,227,227,229,238,116,128,30,155,109,2,179,137,179,147,233,236,229,230,225,227,101,128,38,58,239,238,239,243,240,225,227,101,128,255,83,111,6,179,172,179,222,179,233,180,2,180,47,180,58,102,2,179,178,179,192,240,225,243,245,241,232,229,226,242,229,119,128,5,195,116,2,179,198,179,207,232,249,240,232,229,110,128,0,173,243,233,231,238,227,249,242,233,236,236,233,99,128,4,76,232,233,242,225,231,225,238,97,128,48,93,235,225,244,225,235,225,238,97,129,48,189,179,246,232,225,236,230,247,233,228,244,104,128,255,127,236,233,228,245,115,2,180,12,180,29,236,239,238,231,239,246,229,242,236,225,249,227,237,98,128,3,56,243,232,239,242,244,239,246,229,242,236,225,249,227,237,98,128,3,55,242,245,243,233,244,232,225,105,128,14,41,115,3,180,66,180,76,180,84,225,236,225,244,232,225,105,128,14,40,239,244,232,225,105,128,14,11,245,225,244,232,225,105,128,14,42,240,97,3,180,102,180,122,180,154,227,101,129,0,32,180,109,232,225,227,235,225,242,225,226,233,99,128,0,32,228,101,129,38,96,180,129,243,245,233,116,2,180,138,180,146,226,236,225,227,107,128,38,96,247,232,233,244,101,128,38,100,242,229,110,128,36,174,241,245,225,242,101,11,180,188,180,199,180,213,180,238,180,255,181,25,181,40,181,73,181,100,181,156,181,171,226,229,236,239,247,227,237,98,128,3,59,99,2,180,205,180,209,99,128,51,196,109,128,51,157,228,233,225,231,239,238,225,236,227,242,239,243,243,232,225,244,227,232,230,233,236,108,128,37,169,232,239,242,233,250,239,238,244,225,236,230,233,236,108,128,37,164,107,2,181,5,181,9,103,128,51,143,109,129,51,158,181,15,227,225,240,233,244,225,108,128,51,206,108,2,181,31,181,35,110,128,51,209,239,103,128,51,210,109,4,181,50,181,54,181,59,181,63,103,128,51,142,233,108,128,51,213,109,128,51,156,243,241,245,225,242,229,100,128,51,161,239,242,244,232,239,231,239,238,225,236,227,242,239,243,243,232,225,244,227,232,230,233,236,108,128,37,166,245,240,240,229,114,2,181,110,181,133,236,229,230,244,244,239,236,239,247,229,242,242,233,231,232,244,230,233,236,108,128,37,167,242,233,231,232,244,244,239,236,239,247,229,242,236,229,230,244,230,233,236,108,128,37,168,246,229,242,244,233,227,225,236,230,233,236,108,128,37,165,247,232,233,244,229,247,233,244,232,243,237,225,236,236,226,236,225,227,107,128,37,163,242,243,241,245,225,242,101,128,51,219,115,2,181,209,182,123,97,4,181,219,181,229,181,236,181,247,226,229,238,231,225,236,105,128,9,183,228,229,246,97,128,9,55,231,245,234,225,242,225,244,105,128,10,183,238,103,8,182,10,182,24,182,38,182,52,182,67,182,81,182,95,182,108,227,233,229,245,227,235,239,242,229,225,110,128,49,73,232,233,229,245,232,235,239,242,229,225,110,128,49,133,233,229,245,238,231,235,239,242,229,225,110,128,49,128,235,233,249,229,239,235,235,239,242,229,225,110,128,49,50,238,233,229,245,238,235,239,242,229,225,110,128,49,101,240,233,229,245,240,235,239,242,229,225,110,128,49,67,243,233,239,243,235,239,242,229,225,110,128,49,70,244,233,235,229,245,244,235,239,242,229,225,110,128,49,56,245,240,229,242,233,239,114,128,246,242,116,2,182,139,182,162,229,242,236,233,238,103,129,0,163,182,150,237,239,238,239,243,240,225,227,101,128,255,225,242,239,235,101,2,182,171,182,188,236,239,238,231,239,246,229,242,236,225,249,227,237,98,128,3,54,243,232,239,242,244,239,246,229,242,236,225,249,227,237,98,128,3,53,117,7,182,222,182,254,183,20,183,31,183,72,183,82,183,86,226,243,229,116,130,34,130,182,233,182,244,238,239,244,229,241,245,225,108,128,34,138,239,242,229,241,245,225,108,128,34,134,99,2,183,4,183,12,227,229,229,228,115,128,34,123,232,244,232,225,116,128,34,11,232,233,242,225,231,225,238,97,128,48,89,107,2,183,37,183,61,225,244,225,235,225,238,97,129,48,185,183,49,232,225,236,230,247,233,228,244,104,128,255,125,245,238,225,242,225,226,233,99,128,6,82,237,237,225,244,233,239,110,128,34,17,110,128,38,60,240,229,242,243,229,116,130,34,131,183,99,183,110,238,239,244,229,241,245,225,108,128,34,139,239,242,229,241,245,225,108,128,34,135,246,243,241,245,225,242,101,128,51,220,249,239,245,247,225,229,242,225,243,241,245,225,242,101,128,51,124,116,144,0,116,183,183,184,192,184,213,185,100,185,140,187,188,191,70,192,145,192,157,192,169,193,202,193,227,194,57,194,237,195,165,195,255,97,10,183,205,183,215,183,236,183,243,184,12,184,90,184,107,184,132,184,146,184,150,226,229,238,231,225,236,105,128,9,164,227,107,2,183,222,183,229,228,239,247,110,128,34,164,236,229,230,116,128,34,163,228,229,246,97,128,9,36,231,117,2,183,250,184,3,234,225,242,225,244,105,128,10,164,242,237,245,235,232,105,128,10,36,104,4,184,22,184,31,184,45,184,75,225,242,225,226,233,99,128,6,55,230,233,238,225,236,225,242,225,226,233,99,128,254,194,105,2,184,51,184,66,238,233,244,233,225,236,225,242,225,226,233,99,128,254,195,242,225,231,225,238,97,128,48,95,237,229,228,233,225,236,225,242,225,226,233,99,128,254,196,233,243,249,239,245,229,242,225,243,241,245,225,242,101,128,51,125,235,225,244,225,235,225,238,97,129,48,191,184,120,232,225,236,230,247,233,228,244,104,128,255,128,244,247,229,229,236,225,242,225,226,233,99,128,6,64,117,128,3,196,118,130,5,234,184,158,184,183,228,225,231,229,115,129,251,74,184,168,104,129,251,74,184,174,232,229,226,242,229,119,128,251,74,232,229,226,242,229,119,128,5,234,98,2,184,198,184,203,225,114,128,1,103,239,240,239,237,239,230,111,128,49,10,99,6,184,227,184,234,184,241,184,250,185,60,185,87,225,242,239,110,128,1,101,227,245,242,108,128,2,168,229,228,233,236,236,97,128,1,99,232,229,104,4,185,6,185,15,185,29,185,45,225,242,225,226,233,99,128,6,134,230,233,238,225,236,225,242,225,226,233,99,128,251,123,233,238,233,244,233,225,236,225,242,225,226,233,99,128,251,124,237,229,228,233,225,236,225,242,225,226,233,99,128,251,125,233,242,99,2,185,68,185,73,236,101,128,36,227,245,237,230,236,229,248,226,229,236,239,119,128,30,113,239,237,237,225,225,227,227,229,238,116,128,1,99,100,2,185,106,185,116,233,229,242,229,243,233,115,128,30,151,239,116,2,185,123,185,132,225,227,227,229,238,116,128,30,107,226,229,236,239,119,128,30,109,101,9,185,160,185,171,185,191,186,201,186,226,187,34,187,101,187,106,187,158,227,249,242,233,236,236,233,99,128,4,66,228,229,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,173,104,7,185,207,185,216,185,230,186,14,186,44,186,85,186,183,225,242,225,226,233,99,128,6,42,230,233,238,225,236,225,242,225,226,233,99,128,254,150,232,225,232,105,2,185,239,185,254,238,233,244,233,225,236,225,242,225,226,233,99,128,252,162,243,239,236,225,244,229,228,225,242,225,226,233,99,128,252,12,105,2,186,20,186,35,238,233,244,233,225,236,225,242,225,226,233,99,128,254,151,242,225,231,225,238,97,128,48,102,234,229,229,237,105,2,186,54,186,69,238,233,244,233,225,236,225,242,225,226,233,99,128,252,161,243,239,236,225,244,229,228,225,242,225,226,233,99,128,252,11,109,2,186,91,186,125,225,242,226,245,244,97,2,186,102,186,111,225,242,225,226,233,99,128,6,41,230,233,238,225,236,225,242,225,226,233,99,128,254,148,101,2,186,131,186,144,228,233,225,236,225,242,225,226,233,99,128,254,152,229,237,105,2,186,152,186,167,238,233,244,233,225,236,225,242,225,226,233,99,128,252,164,243,239,236,225,244,229,228,225,242,225,226,233,99,128,252,14,238,239,239,238,230,233,238,225,236,225,242,225,226,233,99,128,252,115,235,225,244,225,235,225,238,97,129,48,198,186,214,232,225,236,230,247,233,228,244,104,128,255,131,108,2,186,232,186,251,229,240,232,239,238,101,129,33,33,186,243,226,236,225,227,107,128,38,14,233,243,232,97,2,187,4,187,19,231,229,228,239,236,225,232,229,226,242,229,119,128,5,160,241,229,244,225,238,225,232,229,226,242,229,119,128,5,169,110,4,187,44,187,53,187,72,187,93,227,233,242,227,236,101,128,36,105,233,228,229,239,231,242,225,240,232,233,227,240,225,242,229,110,128,50,41,112,2,187,78,187,85,225,242,229,110,128,36,125,229,242,233,239,100,128,36,145,242,239,237,225,110,128,33,121,243,104,128,2,167,116,131,5,216,187,116,187,136,187,145,228,225,231,229,243,104,129,251,56,187,127,232,229,226,242,229,119,128,251,56,232,229,226,242,229,119,128,5,216,243,229,227,249,242,233,236,236,233,99,128,4,181,246,233,114,2,187,166,187,175,232,229,226,242,229,119,128,5,155,236,229,230,244,232,229,226,242,229,119,128,5,155,104,6,187,202,188,98,188,220,189,96,190,3,191,60,97,5,187,214,187,224,187,231,188,0,188,29,226,229,238,231,225,236,105,128,9,165,228,229,246,97,128,9,37,231,117,2,187,238,187,247,234,225,242,225,244,105,128,10,165,242,237,245,235,232,105,128,10,37,108,2,188,6,188,15,225,242,225,226,233,99,128,6,48,230,233,238,225,236,225,242,225,226,233,99,128,254,172,238,244,232,225,235,232,225,116,3,188,44,188,75,188,82,236,239,119,2,188,52,188,63,236,229,230,244,244,232,225,105,128,248,152,242,233,231,232,244,244,232,225,105,128,248,151,244,232,225,105,128,14,76,245,240,240,229,242,236,229,230,244,244,232,225,105,128,248,150,101,3,188,106,188,170,188,193,104,4,188,116,188,125,188,139,188,155,225,242,225,226,233,99,128,6,43,230,233,238,225,236,225,242,225,226,233,99,128,254,154,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,155,237,229,228,233,225,236,225,242,225,226,233,99,128,254,156,242,101,2,188,177,188,186,229,248,233,243,244,115,128,34,3,230,239,242,101,128,34,52,244,97,130,3,184,188,202,188,206,49,128,3,209,243,249,237,226,239,236,231,242,229,229,107,128,3,209,105,2,188,226,189,56,229,245,244,104,4,188,239,189,18,189,33,189,42,97,2,188,245,189,4,227,233,242,227,236,229,235,239,242,229,225,110,128,50,121,240,225,242,229,238,235,239,242,229,225,110,128,50,25,227,233,242,227,236,229,235,239,242,229,225,110,128,50,107,235,239,242,229,225,110,128,49,76,240,225,242,229,238,235,239,242,229,225,110,128,50,11,242,244,229,229,110,2,189,66,189,75,227,233,242,227,236,101,128,36,108,112,2,189,81,189,88,225,242,229,110,128,36,128,229,242,233,239,100,128,36,148,111,6,189,110,189,127,189,132,189,146,189,151,189,204,238,225,238,231,237,239,238,244,232,239,244,232,225,105,128,14,17,239,107,128,1,173,240,232,245,244,232,225,239,244,232,225,105,128,14,18,242,110,128,0,254,244,104,3,189,160,189,184,189,194,97,2,189,166,189,176,232,225,238,244,232,225,105,128,14,23,238,244,232,225,105,128,14,16,239,238,231,244,232,225,105,128,14,24,245,238,231,244,232,225,105,128,14,22,245,243,225,238,100,2,189,214,189,225,227,249,242,233,236,236,233,99,128,4,130,243,243,229,240,225,242,225,244,239,114,2,189,240,189,249,225,242,225,226,233,99,128,6,108,240,229,242,243,233,225,110,128,6,108,242,229,101,144,0,51,190,41,190,50,190,60,190,90,190,97,190,107,190,132,190,159,190,193,190,205,190,224,190,235,191,12,191,34,191,42,191,53,225,242,225,226,233,99,128,6,99,226,229,238,231,225,236,105,128,9,233,227,233,242,227,236,101,129,36,98,190,71,233,238,246,229,242,243,229,243,225,238,243,243,229,242,233,102,128,39,140,228,229,246,97,128,9,105,229,233,231,232,244,232,115,128,33,92,231,117,2,190,114,190,123,234,225,242,225,244,105,128,10,233,242,237,245,235,232,105,128,10,105,232,97,2,190,139,190,150,227,235,225,242,225,226,233,99,128,6,99,238,231,250,232,239,117,128,48,35,105,2,190,165,190,183,228,229,239,231,242,225,240,232,233,227,240,225,242,229,110,128,50,34,238,230,229,242,233,239,114,128,32,131,237,239,238,239,243,240,225,227,101,128,255,19,238,245,237,229,242,225,244,239,242,226,229,238,231,225,236,105,128,9,246,239,236,228,243,244,249,236,101,128,247,51,112,2,190,241,190,248,225,242,229,110,128,36,118,229,114,2,190,255,191,5,233,239,100,128,36,138,243,233,225,110,128,6,243,241,245,225,242,244,229,242,115,129,0,190,191,25,229,237,228,225,243,104,128,246,222,242,239,237,225,110,128,33,114,243,245,240,229,242,233,239,114,128,0,179,244,232,225,105,128,14,83,250,243,241,245,225,242,101,128,51,148,105,7,191,86,191,97,191,212,192,54,192,66,192,115,192,132,232,233,242,225,231,225,238,97,128,48,97,107,2,191,103,191,127,225,244,225,235,225,238,97,129,48,193,191,115,232,225,236,230,247,233,228,244,104,128,255,129,229,245,116,4,191,139,191,174,191,189,191,198,97,2,191,145,191,160,227,233,242,227,236,229,235,239,242,229,225,110,128,50,112,240,225,242,229,238,235,239,242,229,225,110,128,50,16,227,233,242,227,236,229,235,239,242,229,225,110,128,50,98,235,239,242,229,225,110,128,49,55,240,225,242,229,238,235,239,242,229,225,110,128,50,2,236,228,101,133,2,220,191,228,191,239,192,0,192,12,192,40,226,229,236,239,247,227,237,98,128,3,48,99,2,191,245,191,250,237,98,128,3,3,239,237,98,128,3,3,228,239,245,226,236,229,227,237,98,128,3,96,111,2,192,18,192,28,240,229,242,225,244,239,114,128,34,60,246,229,242,236,225,249,227,237,98,128,3,52,246,229,242,244,233,227,225,236,227,237,98,128,3,62,237,229,243,227,233,242,227,236,101,128,34,151,112,2,192,72,192,102,229,232,97,2,192,80,192,89,232,229,226,242,229,119,128,5,150,236,229,230,244,232,229,226,242,229,119,128,5,150,240,233,231,245,242,237,245,235,232,105,128,10,112,244,236,239,227,249,242,233,236,236,233,227,227,237,98,128,4,131,247,238,225,242,237,229,238,233,225,110,128,5,127,236,233,238,229,226,229,236,239,119,128,30,111,237,239,238,239,243,240,225,227,101,128,255,84,111,7,192,185,192,196,192,207,192,232,193,96,193,108,193,192,225,242,237,229,238,233,225,110,128,5,105,232,233,242,225,231,225,238,97,128,48,104,235,225,244,225,235,225,238,97,129,48,200,192,220,232,225,236,230,247,233,228,244,104,128,255,132,110,3,192,240,193,82,193,87,101,4,192,250,193,63,193,70,193,76,226,225,114,4,193,6,193,35,193,45,193,54,229,248,244,242,97,2,193,16,193,26,232,233,231,232,237,239,100,128,2,229,236,239,247,237,239,100,128,2,233,232,233,231,232,237,239,100,128,2,230,236,239,247,237,239,100,128,2,232,237,233,228,237,239,100,128,2,231,230,233,246,101,128,1,189,243,233,120,128,1,133,244,247,111,128,1,168,239,115,128,3,132,243,241,245,225,242,101,128,51,39,240,225,244,225,235,244,232,225,105,128,14,15,242,244,239,233,243,229,243,232,229,236,236,226,242,225,227,235,229,116,2,193,131,193,161,236,229,230,116,130,48,20,193,142,193,150,243,237,225,236,108,128,254,93,246,229,242,244,233,227,225,108,128,254,57,242,233,231,232,116,130,48,21,193,173,193,181,243,237,225,236,108,128,254,94,246,229,242,244,233,227,225,108,128,254,58,244,225,239,244,232,225,105,128,14,21,240,97,2,193,209,193,221,236,225,244,225,236,232,239,239,107,128,1,171,242,229,110,128,36,175,114,3,193,235,194,10,194,25,225,228,229,237,225,242,107,129,33,34,193,247,115,2,193,253,194,3,225,238,115,128,248,234,229,242,233,102,128,246,219,229,244,242,239,230,236,229,248,232,239,239,107,128,2,136,233,225,103,4,194,37,194,42,194,47,194,52,228,110,128,37,188,236,102,128,37,196,242,116,128,37,186,245,112,128,37,178,115,132,2,166,194,69,194,108,194,214,194,227,225,228,105,130,5,230,194,79,194,99,228,225,231,229,243,104,129,251,70,194,90,232,229,226,242,229,119,128,251,70,232,229,226,242,229,119,128,5,230,101,2,194,114,194,125,227,249,242,233,236,236,233,99,128,4,70,242,101,134,5,181,194,142,194,156,194,161,194,170,194,185,194,201,49,2,194,148,194,152,50,128,5,181,101,128,5,181,178,98,128,5,181,232,229,226,242,229,119,128,5,181,238,225,242,242,239,247,232,229,226,242,229,119,128,5,181,241,245,225,242,244,229,242,232,229,226,242,229,119,128,5,181,247,233,228,229,232,229,226,242,229,119,128,5,181,232,229,227,249,242,233,236,236,233,99,128,4,91,245,240,229,242,233,239,114,128,246,243,116,4,194,247,195,41,195,106,195,157,97,3,194,255,195,9,195,16,226,229,238,231,225,236,105,128,9,159,228,229,246,97,128,9,31,231,117,2,195,23,195,32,234,225,242,225,244,105,128,10,159,242,237,245,235,232,105,128,10,31,229,104,4,195,52,195,61,195,75,195,91,225,242,225,226,233,99,128,6,121,230,233,238,225,236,225,242,225,226,233,99,128,251,103,233,238,233,244,233,225,236,225,242,225,226,233,99,128,251,104,237,229,228,233,225,236,225,242,225], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+71681);
/* memory initializer */ allocate([226,233,99,128,251,105,232,97,3,195,115,195,125,195,132,226,229,238,231,225,236,105,128,9,160,228,229,246,97,128,9,32,231,117,2,195,139,195,148,234,225,242,225,244,105,128,10,160,242,237,245,235,232,105,128,10,32,245,242,238,229,100,128,2,135,117,3,195,173,195,184,195,209,232,233,242,225,231,225,238,97,128,48,100,235,225,244,225,235,225,238,97,129,48,196,195,197,232,225,236,230,247,233,228,244,104,128,255,130,243,237,225,236,108,2,195,219,195,230,232,233,242,225,231,225,238,97,128,48,99,235,225,244,225,235,225,238,97,129,48,195,195,243,232,225,236,230,247,233,228,244,104,128,255,111,119,2,196,5,196,110,101,2,196,11,196,59,236,246,101,3,196,21,196,30,196,51,227,233,242,227,236,101,128,36,107,112,2,196,36,196,43,225,242,229,110,128,36,127,229,242,233,239,100,128,36,147,242,239,237,225,110,128,33,123,238,244,121,3,196,69,196,78,196,89,227,233,242,227,236,101,128,36,115,232,225,238,231,250,232,239,117,128,83,68,112,2,196,95,196,102,225,242,229,110,128,36,135,229,242,233,239,100,128,36,155,111,142,0,50,196,142,196,151,196,161,196,191,196,243,197,12,197,39,197,73,197,85,197,104,197,115,197,148,197,156,197,180,225,242,225,226,233,99,128,6,98,226,229,238,231,225,236,105,128,9,232,227,233,242,227,236,101,129,36,97,196,172,233,238,246,229,242,243,229,243,225,238,243,243,229,242,233,102,128,39,139,100,2,196,197,196,203,229,246,97,128,9,104,239,116,2,196,210,196,221,229,238,236,229,225,228,229,114,128,32,37,236,229,225,228,229,114,129,32,37,196,232,246,229,242,244,233,227,225,108,128,254,48,231,117,2,196,250,197,3,234,225,242,225,244,105,128,10,232,242,237,245,235,232,105,128,10,104,232,97,2,197,19,197,30,227,235,225,242,225,226,233,99,128,6,98,238,231,250,232,239,117,128,48,34,105,2,197,45,197,63,228,229,239,231,242,225,240,232,233,227,240,225,242,229,110,128,50,33,238,230,229,242,233,239,114,128,32,130,237,239,238,239,243,240,225,227,101,128,255,18,238,245,237,229,242,225,244,239,242,226,229,238,231,225,236,105,128,9,245,239,236,228,243,244,249,236,101,128,247,50,112,2,197,121,197,128,225,242,229,110,128,36,117,229,114,2,197,135,197,141,233,239,100,128,36,137,243,233,225,110,128,6,242,242,239,237,225,110,128,33,113,115,2,197,162,197,170,244,242,239,235,101,128,1,187,245,240,229,242,233,239,114,128,0,178,244,104,2,197,187,197,192,225,105,128,14,82,233,242,228,115,128,33,84,117,145,0,117,197,237,197,245,198,30,198,87,198,225,199,6,199,129,199,145,199,196,200,10,200,91,200,100,200,219,200,243,201,95,201,123,201,237,225,227,245,244,101,128,0,250,98,4,197,255,198,4,198,13,198,23,225,114,128,2,137,229,238,231,225,236,105,128,9,137,239,240,239,237,239,230,111,128,49,40,242,229,246,101,128,1,109,99,3,198,38,198,45,198,77,225,242,239,110,128,1,212,233,242,99,2,198,53,198,58,236,101,128,36,228,245,237,230,236,229,120,129,0,251,198,69,226,229,236,239,119,128,30,119,249,242,233,236,236,233,99,128,4,67,100,5,198,99,198,110,198,133,198,139,198,215,225,244,244,225,228,229,246,97,128,9,81,226,108,2,198,117,198,125,225,227,245,244,101,128,1,113,231,242,225,246,101,128,2,21,229,246,97,128,9,9,233,229,242,229,243,233,115,133,0,252,198,159,198,167,198,175,198,198,198,206,225,227,245,244,101,128,1,216,226,229,236,239,119,128,30,115,99,2,198,181,198,188,225,242,239,110,128,1,218,249,242,233,236,236,233,99,128,4,241,231,242,225,246,101,128,1,220,237,225,227,242,239,110,128,1,214,239,244,226,229,236,239,119,128,30,229,103,2,198,231,198,238,242,225,246,101,128,0,249,117,2,198,244,198,253,234,225,242,225,244,105,128,10,137,242,237,245,235,232,105,128,10,9,104,3,199,14,199,24,199,102,233,242,225,231,225,238,97,128,48,70,111,2,199,30,199,40,239,235,225,226,239,246,101,128,30,231,242,110,133,1,176,199,55,199,63,199,74,199,82,199,94,225,227,245,244,101,128,30,233,228,239,244,226,229,236,239,119,128,30,241,231,242,225,246,101,128,30,235,232,239,239,235,225,226,239,246,101,128,30,237,244,233,236,228,101,128,30,239,245,238,231,225,242,245,237,236,225,245,116,129,1,113,199,118,227,249,242,233,236,236,233,99,128,4,243,233,238,246,229,242,244,229,228,226,242,229,246,101,128,2,23,107,3,199,153,199,177,199,188,225,244,225,235,225,238,97,129,48,166,199,165,232,225,236,230,247,233,228,244,104,128,255,115,227,249,242,233,236,236,233,99,128,4,121,239,242,229,225,110,128,49,92,109,2,199,202,199,255,97,2,199,208,199,241,227,242,239,110,130,1,107,199,219,199,230,227,249,242,233,236,236,233,99,128,4,239,228,233,229,242,229,243,233,115,128,30,123,244,242,225,231,245,242,237,245,235,232,105,128,10,65,239,238,239,243,240,225,227,101,128,255,85,110,2,200,16,200,71,228,229,242,243,227,239,242,101,132,0,95,200,35,200,41,200,53,200,64,228,226,108,128,32,23,237,239,238,239,243,240,225,227,101,128,255,63,246,229,242,244,233,227,225,108,128,254,51,247,225,246,121,128,254,79,105,2,200,77,200,82,239,110,128,34,42,246,229,242,243,225,108,128,34,0,239,231,239,238,229,107,128,1,115,112,5,200,112,200,119,200,127,200,142,200,193,225,242,229,110,128,36,176,226,236,239,227,107,128,37,128,240,229,242,228,239,244,232,229,226,242,229,119,128,5,196,243,233,236,239,110,131,3,197,200,156,200,177,200,185,228,233,229,242,229,243,233,115,129,3,203,200,169,244,239,238,239,115,128,3,176,236,225,244,233,110,128,2,138,244,239,238,239,115,128,3,205,244,225,227,107,2,200,202,200,213,226,229,236,239,247,227,237,98,128,3,29,237,239,100,128,2,212,114,2,200,225,200,237,225,231,245,242,237,245,235,232,105,128,10,115,233,238,103,128,1,111,115,3,200,251,201,10,201,55,232,239,242,244,227,249,242,233,236,236,233,99,128,4,94,237,225,236,108,2,201,19,201,30,232,233,242,225,231,225,238,97,128,48,69,235,225,244,225,235,225,238,97,129,48,165,201,43,232,225,236,230,247,233,228,244,104,128,255,105,244,242,225,233,231,232,116,2,201,67,201,78,227,249,242,233,236,236,233,99,128,4,175,243,244,242,239,235,229,227,249,242,233,236,236,233,99,128,4,177,244,233,236,228,101,130,1,105,201,107,201,115,225,227,245,244,101,128,30,121,226,229,236,239,119,128,30,117,117,5,201,135,201,145,201,152,201,177,201,193,226,229,238,231,225,236,105,128,9,138,228,229,246,97,128,9,10,231,117,2,201,159,201,168,234,225,242,225,244,105,128,10,138,242,237,245,235,232,105,128,10,10,237,225,244,242,225,231,245,242,237,245,235,232,105,128,10,66,246,239,247,229,236,243,233,231,110,3,201,209,201,219,201,226,226,229,238,231,225,236,105,128,9,194,228,229,246,97,128,9,66,231,245,234,225,242,225,244,105,128,10,194,246,239,247,229,236,243,233,231,110,3,201,253,202,7,202,14,226,229,238,231,225,236,105,128,9,193,228,229,246,97,128,9,65,231,245,234,225,242,225,244,105,128,10,193,118,139,0,118,202,51,202,199,202,208,202,219,203,148,203,155,203,253,204,9,204,109,204,117,204,138,97,4,202,61,202,68,202,93,202,104,228,229,246,97,128,9,53,231,117,2,202,75,202,84,234,225,242,225,244,105,128,10,181,242,237,245,235,232,105,128,10,53,235,225,244,225,235,225,238,97,128,48,247,118,132,5,213,202,116,202,143,202,175,202,187,228,225,231,229,243,104,130,251,53,202,129,202,134,182,53,128,251,53,232,229,226,242,229,119,128,251,53,104,2,202,149,202,157,229,226,242,229,119,128,5,213,239,236,225,109,129,251,75,202,166,232,229,226,242,229,119,128,251,75,246,225,246,232,229,226,242,229,119,128,5,240,249,239,228,232,229,226,242,229,119,128,5,241,227,233,242,227,236,101,128,36,229,228,239,244,226,229,236,239,119,128,30,127,101,6,202,233,202,244,203,52,203,63,203,69,203,136,227,249,242,233,236,236,233,99,128,4,50,104,4,202,254,203,7,203,21,203,37,225,242,225,226,233,99,128,6,164,230,233,238,225,236,225,242,225,226,233,99,128,251,107,233,238,233,244,233,225,236,225,242,225,226,233,99,128,251,108,237,229,228,233,225,236,225,242,225,226,233,99,128,251,109,235,225,244,225,235,225,238,97,128,48,249,238,245,115,128,38,64,242,244,233,227,225,108,2,203,80,203,86,226,225,114,128,0,124,236,233,238,101,4,203,99,203,110,203,121,203,130,225,226,239,246,229,227,237,98,128,3,13,226,229,236,239,247,227,237,98,128,3,41,236,239,247,237,239,100,128,2,204,237,239,100,128,2,200,247,225,242,237,229,238,233,225,110,128,5,126,232,239,239,107,128,2,139,105,3,203,163,203,174,203,213,235,225,244,225,235,225,238,97,128,48,248,242,225,237,97,3,203,185,203,195,203,202,226,229,238,231,225,236,105,128,9,205,228,229,246,97,128,9,77,231,245,234,225,242,225,244,105,128,10,205,243,225,242,231,97,3,203,225,203,235,203,242,226,229,238,231,225,236,105,128,9,131,228,229,246,97,128,9,3,231,245,234,225,242,225,244,105,128,10,131,237,239,238,239,243,240,225,227,101,128,255,86,111,3,204,17,204,28,204,98,225,242,237,229,238,233,225,110,128,5,120,233,227,229,100,2,204,37,204,73,233,244,229,242,225,244,233,239,110,2,204,51,204,62,232,233,242,225,231,225,238,97,128,48,158,235,225,244,225,235,225,238,97,128,48,254,237,225,242,235,235,225,238,97,129,48,155,204,86,232,225,236,230,247,233,228,244,104,128,255,158,235,225,244,225,235,225,238,97,128,48,250,240,225,242,229,110,128,36,177,116,2,204,123,204,130,233,236,228,101,128,30,125,245,242,238,229,100,128,2,140,117,2,204,144,204,155,232,233,242,225,231,225,238,97,128,48,148,235,225,244,225,235,225,238,97,128,48,244,119,143,0,119,204,200,205,177,205,187,205,210,205,250,206,61,206,69,208,40,208,81,208,93,208,168,208,176,208,183,208,194,208,203,97,8,204,218,204,225,204,235,204,246,205,28,205,60,205,72,205,108,227,245,244,101,128,30,131,229,235,239,242,229,225,110,128,49,89,232,233,242,225,231,225,238,97,128,48,143,107,2,204,252,205,20,225,244,225,235,225,238,97,129,48,239,205,8,232,225,236,230,247,233,228,244,104,128,255,156,239,242,229,225,110,128,49,88,243,237,225,236,108,2,205,38,205,49,232,233,242,225,231,225,238,97,128,48,142,235,225,244,225,235,225,238,97,128,48,238,244,244,239,243,241,245,225,242,101,128,51,87,118,2,205,78,205,86,229,228,225,243,104,128,48,28,249,245,238,228,229,242,243,227,239,242,229,246,229,242,244,233,227,225,108,128,254,52,119,3,205,116,205,125,205,139,225,242,225,226,233,99,128,6,72,230,233,238,225,236,225,242,225,226,233,99,128,254,238,232,225,237,250,225,225,226,239,246,101,2,205,154,205,163,225,242,225,226,233,99,128,6,36,230,233,238,225,236,225,242,225,226,233,99,128,254,134,226,243,241,245,225,242,101,128,51,221,227,233,242,99,2,205,196,205,201,236,101,128,36,230,245,237,230,236,229,120,128,1,117,100,2,205,216,205,226,233,229,242,229,243,233,115,128,30,133,239,116,2,205,233,205,242,225,227,227,229,238,116,128,30,135,226,229,236,239,119,128,30,137,101,4,206,4,206,15,206,27,206,51,232,233,242,225,231,225,238,97,128,48,145,233,229,242,243,244,242,225,243,115,128,33,24,107,2,206,33,206,43,225,244,225,235,225,238,97,128,48,241,239,242,229,225,110,128,49,94,239,235,239,242,229,225,110,128,49,93,231,242,225,246,101,128,30,129,232,233,244,101,8,206,90,206,99,206,183,207,17,207,101,207,146,207,198,207,254,226,245,236,236,229,116,128,37,230,99,2,206,105,206,125,233,242,227,236,101,129,37,203,206,115,233,238,246,229,242,243,101,128,37,217,239,242,238,229,242,226,242,225,227,235,229,116,2,206,142,206,162,236,229,230,116,129,48,14,206,151,246,229,242,244,233,227,225,108,128,254,67,242,233,231,232,116,129,48,15,206,172,246,229,242,244,233,227,225,108,128,254,68,100,2,206,189,206,230,233,225,237,239,238,100,129,37,199,206,200,227,239,238,244,225,233,238,233,238,231,226,236,225,227,235,243,237,225,236,236,228,233,225,237,239,238,100,128,37,200,239,247,238,240,239,233,238,244,233,238,103,2,206,246,207,6,243,237,225,236,236,244,242,233,225,238,231,236,101,128,37,191,244,242,233,225,238,231,236,101,128,37,189,236,101,2,207,24,207,66,230,244,240,239,233,238,244,233,238,103,2,207,39,207,55,243,237,225,236,236,244,242,233,225,238,231,236,101,128,37,195,244,242,233,225,238,231,236,101,128,37,193,238,244,233,227,245,236,225,242,226,242,225,227,235,229,116,2,207,86,207,93,236,229,230,116,128,48,22,242,233,231,232,116,128,48,23,242,233,231,232,244,240,239,233,238,244,233,238,103,2,207,119,207,135,243,237,225,236,236,244,242,233,225,238,231,236,101,128,37,185,244,242,233,225,238,231,236,101,128,37,183,115,3,207,154,207,184,207,192,109,2,207,160,207,172,225,236,236,243,241,245,225,242,101,128,37,171,233,236,233,238,231,230,225,227,101,128,38,58,241,245,225,242,101,128,37,161,244,225,114,128,38,6,116,2,207,204,207,215,229,236,229,240,232,239,238,101,128,38,15,239,242,244,239,233,243,229,243,232,229,236,236,226,242,225,227,235,229,116,2,207,239,207,246,236,229,230,116,128,48,24,242,233,231,232,116,128,48,25,245,240,240,239,233,238,244,233,238,103,2,208,13,208,29,243,237,225,236,236,244,242,233,225,238,231,236,101,128,37,181,244,242,233,225,238,231,236,101,128,37,179,105,2,208,46,208,57,232,233,242,225,231,225,238,97,128,48,144,107,2,208,63,208,73,225,244,225,235,225,238,97,128,48,240,239,242,229,225,110,128,49,95,237,239,238,239,243,240,225,227,101,128,255,87,111,4,208,103,208,114,208,139,208,157,232,233,242,225,231,225,238,97,128,48,146,235,225,244,225,235,225,238,97,129,48,242,208,127,232,225,236,230,247,233,228,244,104,128,255,102,110,129,32,169,208,145,237,239,238,239,243,240,225,227,101,128,255,230,247,225,229,238,244,232,225,105,128,14,39,240,225,242,229,110,128,36,178,242,233,238,103,128,30,152,243,245,240,229,242,233,239,114,128,2,183,244,245,242,238,229,100,128,2,141,249,238,110,128,1,191,120,137,0,120,208,231,208,242,208,253,209,6,209,33,209,46,209,50,209,62,209,70,225,226,239,246,229,227,237,98,128,3,61,226,239,240,239,237,239,230,111,128,49,18,227,233,242,227,236,101,128,36,231,100,2,209,12,209,22,233,229,242,229,243,233,115,128,30,141,239,244,225,227,227,229,238,116,128,30,139,229,232,225,242,237,229,238,233,225,110,128,5,109,105,128,3,190,237,239,238,239,243,240,225,227,101,128,255,88,240,225,242,229,110,128,36,179,243,245,240,229,242,233,239,114,128,2,227,121,143,0,121,209,115,210,74,210,97,210,137,212,103,212,111,212,128,212,192,212,204,213,201,213,241,213,253,214,8,214,29,215,2,97,11,209,139,209,151,209,161,209,168,209,175,209,185,209,210,209,221,210,3,210,16,210,62,225,228,239,243,241,245,225,242,101,128,51,78,226,229,238,231,225,236,105,128,9,175,227,245,244,101,128,0,253,228,229,246,97,128,9,47,229,235,239,242,229,225,110,128,49,82,231,117,2,209,192,209,201,234,225,242,225,244,105,128,10,175,242,237,245,235,232,105,128,10,47,232,233,242,225,231,225,238,97,128,48,132,107,2,209,227,209,251,225,244,225,235,225,238,97,129,48,228,209,239,232,225,236,230,247,233,228,244,104,128,255,148,239,242,229,225,110,128,49,81,237,225,235,235,225,238,244,232,225,105,128,14,78,243,237,225,236,108,2,210,26,210,37,232,233,242,225,231,225,238,97,128,48,131,235,225,244,225,235,225,238,97,129,48,227,210,50,232,225,236,230,247,233,228,244,104,128,255,108,244,227,249,242,233,236,236,233,99,128,4,99,227,233,242,99,2,210,83,210,88,236,101,128,36,232,245,237,230,236,229,120,128,1,119,100,2,210,103,210,113,233,229,242,229,243,233,115,128,0,255,239,116,2,210,120,210,129,225,227,227,229,238,116,128,30,143,226,229,236,239,119,128,30,245,101,7,210,153,211,161,211,170,211,188,211,220,212,40,212,91,104,8,210,171,210,180,210,214,210,228,211,45,211,61,211,120,211,138,225,242,225,226,233,99,128,6,74,226,225,242,242,229,101,2,210,191,210,200,225,242,225,226,233,99,128,6,210,230,233,238,225,236,225,242,225,226,233,99,128,251,175,230,233,238,225,236,225,242,225,226,233,99,128,254,242,232,225,237,250,225,225,226,239,246,101,4,210,247,211,0,211,14,211,30,225,242,225,226,233,99,128,6,38,230,233,238,225,236,225,242,225,226,233,99,128,254,138,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,139,237,229,228,233,225,236,225,242,225,226,233,99,128,254,140,233,238,233,244,233,225,236,225,242,225,226,233,99,128,254,243,237,101,2,211,68,211,81,228,233,225,236,225,242,225,226,233,99,128,254,244,229,237,105,2,211,89,211,104,238,233,244,233,225,236,225,242,225,226,233,99,128,252,221,243,239,236,225,244,229,228,225,242,225,226,233,99,128,252,88,238,239,239,238,230,233,238,225,236,225,242,225,226,233,99,128,252,148,244,232,242,229,229,228,239,244,243,226,229,236,239,247,225,242,225,226,233,99,128,6,209,235,239,242,229,225,110,128,49,86,110,129,0,165,211,176,237,239,238,239,243,240,225,227,101,128,255,229,111,2,211,194,211,203,235,239,242,229,225,110,128,49,85,242,233,238,232,233,229,245,232,235,239,242,229,225,110,128,49,134,114,3,211,228,212,8,212,20,225,232,226,229,238,249,239,237,111,2,211,242,211,251,232,229,226,242,229,119,128,5,170,236,229,230,244,232,229,226,242,229,119,128,5,170,233,227,249,242,233,236,236,233,99,128,4,75,245,228,233,229,242,229,243,233,243,227,249,242,233,236,236,233,99,128,4,249,243,233,229,245,238,103,3,212,53,212,62,212,78,235,239,242,229,225,110,128,49,129,240,225,238,243,233,239,243,235,239,242,229,225,110,128,49,131,243,233,239,243,235,239,242,229,225,110,128,49,130,244,233,246,232,229,226,242,229,119,128,5,154,231,242,225,246,101,128,30,243,232,239,239,107,129,1,180,212,120,225,226,239,246,101,128,30,247,105,5,212,140,212,151,212,162,212,171,212,179,225,242,237,229,238,233,225,110,128,5,117,227,249,242,233,236,236,233,99,128,4,87,235,239,242,229,225,110,128,49,98,238,249,225,238,103,128,38,47,247,238,225,242,237,229,238,233,225,110,128,5,130,237,239,238,239,243,240,225,227,101,128,255,89,111,7,212,220,213,34,213,45,213,55,213,93,213,139,213,148,100,131,5,217,212,230,212,250,213,3,228,225,231,229,243,104,129,251,57,212,241,232,229,226,242,229,119,128,251,57,232,229,226,242,229,119,128,5,217,249,239,100,2,213,11,213,20,232,229,226,242,229,119,128,5,242,240,225,244,225,232,232,229,226,242,229,119,128,251,31,232,233,242,225,231,225,238,97,128,48,136,233,235,239,242,229,225,110,128,49,137,107,2,213,61,213,85,225,244,225,235,225,238,97,129,48,232,213,73,232,225,236,230,247,233,228,244,104,128,255,150,239,242,229,225,110,128,49,91,243,237,225,236,108,2,213,103,213,114,232,233,242,225,231,225,238,97,128,48,135,235,225,244,225,235,225,238,97,129,48,231,213,127,232,225,236,230,247,233,228,244,104,128,255,110,244,231,242,229,229,107,128,3,243,121,2,213,154,213,191,97,2,213,160,213,170,229,235,239,242,229,225,110,128,49,136,107,2,213,176,213,184,239,242,229,225,110,128,49,135,244,232,225,105,128,14,34,233,238,231,244,232,225,105,128,14,13,112,2,213,207,213,214,225,242,229,110,128,36,180,239,231,229,231,242,225,237,237,229,238,105,129,3,122,213,230,231,242,229,229,235,227,237,98,128,3,69,114,129,1,166,213,247,233,238,103,128,30,153,243,245,240,229,242,233,239,114,128,2,184,116,2,214,14,214,21,233,236,228,101,128,30,249,245,242,238,229,100,128,2,142,117,5,214,41,214,52,214,62,214,100,214,232,232,233,242,225,231,225,238,97,128,48,134,233,235,239,242,229,225,110,128,49,140,107,2,214,68,214,92,225,244,225,235,225,238,97,129,48,230,214,80,232,225,236,230,247,233,228,244,104,128,255,149,239,242,229,225,110,128,49,96,115,3,214,108,214,146,214,187,226,233,103,2,214,116,214,127,227,249,242,233,236,236,233,99,128,4,107,233,239,244,233,230,233,229,228,227,249,242,233,236,236,233,99,128,4,109,236,233,244,244,236,101,2,214,157,214,168,227,249,242,233,236,236,233,99,128,4,103,233,239,244,233,230,233,229,228,227,249,242,233,236,236,233,99,128,4,105,237,225,236,108,2,214,196,214,207,232,233,242,225,231,225,238,97,128,48,133,235,225,244,225,235,225,238,97,129,48,229,214,220,232,225,236,230,247,233,228,244,104,128,255,109,249,101,2,214,239,214,248,235,239,242,229,225,110,128,49,139,239,235,239,242,229,225,110,128,49,138,249,97,2,215,9,215,19,226,229,238,231,225,236,105,128,9,223,228,229,246,97,128,9,95,122,142,0,122,215,58,216,66,216,77,216,120,216,147,217,182,218,34,218,76,218,88,218,100,218,128,218,136,218,152,218,161,97,10,215,80,215,91,215,98,215,105,215,116,215,194,215,224,215,235,216,15,216,27,225,242,237,229,238,233,225,110,128,5,102,227,245,244,101,128,1,122,228,229,246,97,128,9,91,231,245,242,237,245,235,232,105,128,10,91,104,4,215,126,215,135,215,149,215,179,225,242,225,226,233,99,128,6,56,230,233,238,225,236,225,242,225,226,233,99,128,254,198,105,2,215,155,215,170,238,233,244,233,225,236,225,242,225,226,233,99,128,254,199,242,225,231,225,238,97,128,48,86,237,229,228,233,225,236,225,242,225,226,233,99,128,254,200,233,110,2,215,201,215,210,225,242,225,226,233,99,128,6,50,230,233,238,225,236,225,242,225,226,233,99,128,254,176,235,225,244,225,235,225,238,97,128,48,182,241,229,102,2,215,243,216,1,231,225,228,239,236,232,229,226,242,229,119,128,5,149,241,225,244,225,238,232,229,226,242,229,119,128,5,148,242,241,225,232,229,226,242,229,119,128,5,152,249,233,110,130,5,214,216,37,216,57,228,225,231,229,243,104,129,251,54,216,48,232,229,226,242,229,119,128,251,54,232,229,226,242,229,119,128,5,214,226,239,240,239,237,239,230,111,128,49,23,99,3,216,85,216,92,216,114,225,242,239,110,128,1,126,233,242,99,2,216,100,216,105,236,101,128,36,233,245,237,230,236,229,120,128,30,145,245,242,108,128,2,145,228,239,116,130,1,124,216,130,216,139,225,227,227,229,238,116,128,1,124,226,229,236,239,119,128,30,147,101,6,216,161,216,172,216,215,216,226,216,237,217,177,227,249,242,233,236,236,233,99,128,4,55,100,2,216,178,216,197,229,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,153,233,229,242,229,243,233,243,227,249,242,233,236,236,233,99,128,4,223,232,233,242,225,231,225,238,97,128,48,92,235,225,244,225,235,225,238,97,128,48,188,242,111,140,0,48,217,10,217,19,217,29,217,36,217,61,217,74,217,85,217,97,217,108,217,118,217,129,217,136,225,242,225,226,233,99,128,6,96,226,229,238,231,225,236,105,128,9,230,228,229,246,97,128,9,102,231,117,2,217,43,217,52,234,225,242,225,244,105,128,10,230,242,237,245,235,232,105,128,10,102,232,225,227,235,225,242,225,226,233,99,128,6,96,233,238,230,229,242,233,239,114,128,32,128,237,239,238,239,243,240,225,227,101,128,255,16,239,236,228,243,244,249,236,101,128,247,48,240,229,242,243,233,225,110,128,6,240,243,245,240,229,242,233,239,114,128,32,112,244,232,225,105,128,14,80,247,233,228,244,104,3,217,148,217,157,217,169,234,239,233,238,229,114,128,254,255,238,239,238,234,239,233,238,229,114,128,32,12,243,240,225,227,101,128,32,11,244,97,128,3,182,104,2,217,188,217,199,226,239,240,239,237,239,230,111,128,49,19,101,4,217,209,217,220,217,236,217,247,225,242,237,229,238,233,225,110,128,5,106,226,242,229,246,229,227,249,242,233,236,236,233,99,128,4,194,227,249,242,233,236,236,233,99,128,4,54,100,2,217,253,218,16,229,243,227,229,238,228,229,242,227,249,242,233,236,236,233,99,128,4,151,233,229,242,229,243,233,243,227,249,242,233,236,236,233,99,128,4,221,105,3,218,42,218,53,218,64,232,233,242,225,231,225,238,97,128,48,88,235,225,244,225,235,225,238,97,128,48,184,238,239,242,232,229,226,242,229,119,128,5,174,236,233,238,229,226,229,236,239,119,128,30,149,237,239,238,239,243,240,225,227,101,128,255,90,111,2,218,106,218,117,232,233,242,225,231,225,238,97,128,48,94,235,225,244,225,235,225,238,97,128,48,190,240,225,242,229,110,128,36,181,242,229,244,242,239,230,236,229,248,232,239,239,107,128,2,144,243,244,242,239,235,101,128,1,182,117,2,218,167,218,178,232,233,242,225,231,225,238,97,128,48,90,235,225,244,225,235,225,238,97,128,48,186,115,102,110,116,45,116,97,98,108,101,0,98,100,102,0,116,116,45,99,109,97,112,115,0,67,72,65,82,83,69,84,95,82,69,71,73,83,84,82,89,0,67,72,65,82,83,69,84,95,69,78,67,79,68,73,78,71,0,68,70,75,97,105,83,104,111,45,83,66,0,0,0,0,0,0,68,70,75,97,105,83,104,117,0,0,0,0,0,0,0,0,0,68,70,75,97,105,45,83,66,0,0,0,0,0,0,0,0,0,72,117,97,84,105,97,110,75,97,105,84,105,63,0,0,0,0,72,117,97,84,105,97,110,83,111,110,103,84,105,63,0,0,0,77,105,110,103,76,105,85,0,0,0,0,0,0,0,0,0,0,80,77,105,110,103,76,105,85,0,0,0,0,0,0,0,0,0,77,105,110,103,76,105,52,51,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,255,254,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,6,7,8,9,3,5,7,9,11,13,15,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,32,32,32,32,32,32,2,2,0,80,16,16,16,16,16,16,16,16,0,0,16,0,16,16,16,16,18,16,0,34,1,17,16,32,0,16,32,16,16,0,16,16,0,0,0,0,16,16,16,16,16,0,32,32,0,0,32,32,0,0,32,17,32,17,17,17,32,33,33,1,1,0,0,16,33,33,33,33,33,33,17,17,16,0,33,33,17,16,16,16,33,33,33,33,17,17,17,17,17,17,17,17,17,17,17,17,32,16,16,16,16,16,16,16,32,32,0,0,0,0,16,16,0,32,32,0,0,16,32,32,17,16,51,33,33,16,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,83,108,97,110,116,0,116,121,112,101,49,0,84,121,112,101,32,49,0,107,101,114,110,105,110,103,0,87,105,100,116,104,0,79,112,116,105,99,97,108,83,105,122,101,0,99,108,111,115,101,102,105,108,101,0,78,68,86,0,67,68,86,0,68,101,115,105,103,110,86,101,99,116,111,114,0,83,117,98,114,115,0,80,114,105,118,97,116,101,0,66,108,101,110,100,68,101,115,105,103,110,80,111,115,105,116,105,111,110,115,0,66,108,101,110,100,68,101,115,105,103,110,77,97,112,0,66,108,101,110,100,65,120,105,115,84,121,112,101,115,0,87,101,105,103,104,116,86,101,99,116,111,114,0,66,117,105,108,100,67,104,97,114,65,114,114,97,121,0,139,247,225,13,14,100,117,112,0,112,117,116,0,37,33,80,83,45,65,100,111,98,101,70,111,110,116,0,37,33,70,111,110,116,84,121,112,101,0,101,101,120,101,99,0,116,49,99,105,100,0,67,73,68,32,84,121,112,101,32,49,0,67,73,68,0,112,115,104,105,110,116,101,114,0,66,108,97,99,107,0,37,65,68,79,66,101,103,105,110,70,111,110,116,68,105,99,116,0,67,73,68,70,111,110,116,78,97,109,101,0,67,73,68,70,111,110,116,86,101,114,115,105,111,110,0,67,73,68,70,111,110,116,84,121,112,101,0,82,101,103,105,115,116,114,121,0,79,114,100,101,114,105,110,103,0,83,117,112,112,108,101,109,101,110,116,0,85,73,68,66,97,115,101,0,67,73,68,77,97,112,79,102,102,115,101,116,0,70,68,66,121,116,101,115,0,71,68,66,121,116,101,115,0,67,73,68,67,111,117,110,116,0,83,117,98,114,77,97,112,79,102,102,115,101,116,0,83,68,66,121,116,101,115,0,83,117,98,114,67,111,117,110,116,0,108,101,110,66,117,105,108,100,67,104,97,114,65,114,114,97,121,0,70,111,114,99,101,66,111,108,100,84,104,114,101,115,104,111,108,100,0,85,110,105,113,117,101,73,68,0,108,101,110,73,86,0,76,97,110,103,117,97,103,101,71,114,111,117,112,0,112,97,115,115,119,111,114,100,0,66,108,117,101,83,99,97,108,101,0,66,108,117,101,83,104,105,102,116,0,66,108,117,101,70,117,122,122,0,66,108,117,101,86,97,108,117,101,115,0,79,116,104,101,114,66,108,117,101,115,0,70,97,109,105,108,121,66,108,117,101,115,0,70,97,109,105,108,121,79,116,104,101,114,66,108,117,101,115,0,83,116,100,72,87,0,83,116,100,86,87,0,77,105,110,70,101,97,116,117,114,101,0,83,116,101,109,83,110,97,112,72,0,83,116,101,109,83,110,97,112,86,0,70,111,114,99,101,66,111,108,100,0,70,68,65,114,114,97,121,0,69,120,112,97,110,115,105,111,110,70,97,99,116,111,114,0,116,121,112,101,52,50,0,103,108,121,112,104,45,100,105,99,116,0,112,111,115,116,115,99,114,105,112,116,45,102,111,110,116,45,110,97,109,101,0,112,111,115,116,115,99,114,105,112,116,45,105,110,102,111,0,84,121,112,101,32,52,50,0,112,111,115,116,115,99,114,105,112,116,45,99,109,97,112,115,0,112,115,97,117,120,0,37,33,80,83,45,65,100,111,98,101,45,51,46,48,32,82,101,115,111,117,114,99,101,45,67,73,68,70,111,110,116,0,83,116,97,114,116,68,97,116,97,0,47,115,102,110,116,115,0,40,72,101,120,41,0,37,33,80,83,45,84,114,117,101,84,121,112,101,70,111,110,116,0,70,111,110,116,68,105,114,101,99,116,111,114,121,0,107,110,111,119,110,0,118,101,114,115,105,111,110,0,78,111,116,105,99,101,0,70,117,108,108,78,97,109,101,0,70,97,109,105,108,121,78,97,109,101,0,87,101,105,103,104,116,0,73,116,97,108,105,99,65,110,103,108,101,0,105,115,70,105,120,101,100,80,105,116,99,104,0,85,110,100,101,114,108,105,110,101,80,111,115,105,116,105,111,110,0,85,110,100,101,114,108,105,110,101,84,104,105,99,107,110,101,115,115,0,70,83,84,121,112,101,0,70,111,110,116,78,97,109,101,0,80,97,105,110,116,84,121,112,101,0,70,111,110,116,84,121,112,101,0,83,116,114,111,107,101,87,105,100,116,104,0,70,111,110,116,66,66,111,120,0,70,111,110,116,77,97,116,114,105,120,0,69,110,99,111,100,105,110,103,0,67,104,97,114,83,116,114,105,110,103,115,0,115,102,110,116,115,0,46,110,111,116,100,101,102,0,83,116,97,110,100,97,114,100,69,110,99,111,100,105,110,103,0,69,120,112,101,114,116,69,110,99,111,100,105,110,103,0,73,83,79,76,97,116,105,110,49,69,110,99,111,100,105,110,103,0,116,114,117,101,116,121,112,101,0,115,102,110,116,0,84,114,117,101,84,121,112,101,0,109,117,108,116,105,45,109,97,115,116,101,114,115,0,116,114,117,101,116,121,112,101,45,101,110,103,105,110,101,0,116,116,45,103,108,121,102,0,119,105,110,102,111,110,116,115,0,82,101,103,117,108,97,114,0,66,111,108,100,32,73,116,97,108,105,99,0,66,111,108,100,0,73,116,97,108,105,99,0,120,102,56,54,45,100,114,105,118,101,114,45,110,97,109,101,0,87,105,110,100,111,119,115,32,70,78,84,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,114,119,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81921);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+92744);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _emscripten_cleanup_setjmp=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  var _emscripten_prep_setjmp=true;

  function ___lock() {}

  function ___unlock() {}

   
  Module["_i64Add"] = _i64Add;

  var _emscripten_postinvoke=true;

  var _emscripten_check_longjmp=true;

  
  function _realloc() { throw 'bad' }
  Module["_realloc"] = _realloc; 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _emscripten_get_longjmp_result=true;

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  var _BDtoIHigh=true;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _emscripten_setjmp=true;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_iiiiiiiiii": invoke_iiiiiiiiii, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_vi": invoke_vi, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_abort": _abort, "_pthread_cleanup_push": _pthread_cleanup_push, "_longjmp": _longjmp, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_pthread_self": _pthread_self, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "_emscripten_longjmp": _emscripten_longjmp, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_vi=env.invoke_vi;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var _abort=env._abort;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _longjmp=env._longjmp;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _pthread_self=env._pthread_self;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _monochrome($enable) {
 $enable = $enable|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($enable|0)!=(0);
 $1 = $0&1;
 HEAP32[8>>2] = $1;
 return 0;
}
function _load_font($path,$name,$mult) {
 $path = $path|0;
 $name = $name|0;
 $mult = $mult|0;
 var $$0 = 0, $$lcssa8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $i$05$lcssa = 0, $i$21 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[12>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  label = 4;
 } else {
  $2 = (_strcasecmp($0,$name)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $$lcssa8 = 12;$i$05$lcssa = 0;
   label = 3;
  } else {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $7 = HEAP32[(16)>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $36 = (_strcasecmp($7,$name)|0);
    $37 = ($36|0)==(0);
    if ($37) {
     $$lcssa8 = (16);$i$05$lcssa = 1;
     label = 3;
     break;
    }
   }
   $38 = HEAP32[(20)>>2]|0;
   $39 = ($38|0)==(0|0);
   if (!($39)) {
    $40 = (_strcasecmp($38,$name)|0);
    $41 = ($40|0)==(0);
    if ($41) {
     $$lcssa8 = (20);$i$05$lcssa = 2;
     label = 3;
     break;
    }
   }
   $42 = HEAP32[(24)>>2]|0;
   $43 = ($42|0)==(0|0);
   if (!($43)) {
    $44 = (_strcasecmp($42,$name)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     $$lcssa8 = (24);$i$05$lcssa = 3;
     label = 3;
     break;
    }
   }
   $46 = HEAP32[(28)>>2]|0;
   $47 = ($46|0)==(0|0);
   if (!($47)) {
    $48 = (_strcasecmp($46,$name)|0);
    $49 = ($48|0)==(0);
    if ($49) {
     $$lcssa8 = (28);$i$05$lcssa = 4;
     label = 3;
     break;
    }
   }
   $50 = HEAP32[(32)>>2]|0;
   $51 = ($50|0)==(0|0);
   if (!($51)) {
    $52 = (_strcasecmp($50,$name)|0);
    $53 = ($52|0)==(0);
    if ($53) {
     $$lcssa8 = (32);$i$05$lcssa = 5;
     label = 3;
     break;
    }
   }
   $54 = HEAP32[(36)>>2]|0;
   $55 = ($54|0)==(0|0);
   if (!($55)) {
    $56 = (_strcasecmp($54,$name)|0);
    $57 = ($56|0)==(0);
    if ($57) {
     $$lcssa8 = (36);$i$05$lcssa = 6;
     label = 3;
     break;
    }
   }
   $58 = HEAP32[(40)>>2]|0;
   $59 = ($58|0)==(0|0);
   if (!($59)) {
    $60 = (_strcasecmp($58,$name)|0);
    $61 = ($60|0)==(0);
    if ($61) {
     $$lcssa8 = (40);$i$05$lcssa = 7;
     label = 3;
     break;
    }
   }
   $62 = HEAP32[(44)>>2]|0;
   $63 = ($62|0)==(0|0);
   if (!($63)) {
    $64 = (_strcasecmp($62,$name)|0);
    $65 = ($64|0)==(0);
    if ($65) {
     $$lcssa8 = (44);$i$05$lcssa = 8;
     label = 3;
     break;
    }
   }
   $66 = HEAP32[(48)>>2]|0;
   $67 = ($66|0)==(0|0);
   if (!($67)) {
    $68 = (_strcasecmp($66,$name)|0);
    $69 = ($68|0)==(0);
    if ($69) {
     $$lcssa8 = (48);$i$05$lcssa = 9;
     label = 3;
     break;
    }
   }
   $9 = HEAP32[12>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $i$21 = 0;
   } else {
    $11 = HEAP32[(16)>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $i$21 = 1;
    } else {
     $20 = HEAP32[(20)>>2]|0;
     $21 = ($20|0)==(0|0);
     if ($21) {
      $i$21 = 2;
     } else {
      $22 = HEAP32[(24)>>2]|0;
      $23 = ($22|0)==(0|0);
      if ($23) {
       $i$21 = 3;
      } else {
       $24 = HEAP32[(28)>>2]|0;
       $25 = ($24|0)==(0|0);
       if ($25) {
        $i$21 = 4;
       } else {
        $26 = HEAP32[(32)>>2]|0;
        $27 = ($26|0)==(0|0);
        if ($27) {
         $i$21 = 5;
        } else {
         $28 = HEAP32[(36)>>2]|0;
         $29 = ($28|0)==(0|0);
         if ($29) {
          $i$21 = 6;
         } else {
          $30 = HEAP32[(40)>>2]|0;
          $31 = ($30|0)==(0|0);
          if ($31) {
           $i$21 = 7;
          } else {
           $32 = HEAP32[(44)>>2]|0;
           $33 = ($32|0)==(0|0);
           if ($33) {
            $i$21 = 8;
           } else {
            $34 = HEAP32[(48)>>2]|0;
            $35 = ($34|0)==(0|0);
            if ($35) {
             $i$21 = 9;
             break;
            }
            HEAP32[$vararg_buffer>>2] = $path;
            $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
            HEAP32[$vararg_ptr1>>2] = $name;
            (_printf(24886,$vararg_buffer)|0);
            $$0 = -1;
            STACKTOP = sp;return ($$0|0);
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $4 = (52 + ($i$05$lcssa<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  (_FT_Done_Face($5)|0);
  $6 = HEAP32[$$lcssa8>>2]|0;
  _free($6);
  HEAP32[$$lcssa8>>2] = 0;
  HEAP32[$4>>2] = 0;
  $i$21 = $i$05$lcssa;
 }
 $13 = HEAP32[92>>2]|0;
 $14 = (52 + ($i$21<<2)|0);
 $15 = (_FT_New_Face($13,$path,0,$14)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = (___strdup($name)|0);
  $18 = (12 + ($i$21<<2)|0);
  HEAP32[$18>>2] = $17;
  $19 = (96 + ($i$21<<2)|0);
  HEAP32[$19>>2] = $mult;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer2>>2] = $path;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $name;
  $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $15;
  (_printf(24921,$vararg_buffer2)|0);
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _load_mem_font($data,$datalen,$name,$mult) {
 $data = $data|0;
 $datalen = $datalen|0;
 $name = $name|0;
 $mult = $mult|0;
 var $$0 = 0, $$lcssa8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $i$05$lcssa = 0, $i$21 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[12>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  label = 4;
 } else {
  $2 = (_strcasecmp($0,$name)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $$lcssa8 = 12;$i$05$lcssa = 0;
   label = 3;
  } else {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $7 = HEAP32[(16)>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $36 = (_strcasecmp($7,$name)|0);
    $37 = ($36|0)==(0);
    if ($37) {
     $$lcssa8 = (16);$i$05$lcssa = 1;
     label = 3;
     break;
    }
   }
   $38 = HEAP32[(20)>>2]|0;
   $39 = ($38|0)==(0|0);
   if (!($39)) {
    $40 = (_strcasecmp($38,$name)|0);
    $41 = ($40|0)==(0);
    if ($41) {
     $$lcssa8 = (20);$i$05$lcssa = 2;
     label = 3;
     break;
    }
   }
   $42 = HEAP32[(24)>>2]|0;
   $43 = ($42|0)==(0|0);
   if (!($43)) {
    $44 = (_strcasecmp($42,$name)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     $$lcssa8 = (24);$i$05$lcssa = 3;
     label = 3;
     break;
    }
   }
   $46 = HEAP32[(28)>>2]|0;
   $47 = ($46|0)==(0|0);
   if (!($47)) {
    $48 = (_strcasecmp($46,$name)|0);
    $49 = ($48|0)==(0);
    if ($49) {
     $$lcssa8 = (28);$i$05$lcssa = 4;
     label = 3;
     break;
    }
   }
   $50 = HEAP32[(32)>>2]|0;
   $51 = ($50|0)==(0|0);
   if (!($51)) {
    $52 = (_strcasecmp($50,$name)|0);
    $53 = ($52|0)==(0);
    if ($53) {
     $$lcssa8 = (32);$i$05$lcssa = 5;
     label = 3;
     break;
    }
   }
   $54 = HEAP32[(36)>>2]|0;
   $55 = ($54|0)==(0|0);
   if (!($55)) {
    $56 = (_strcasecmp($54,$name)|0);
    $57 = ($56|0)==(0);
    if ($57) {
     $$lcssa8 = (36);$i$05$lcssa = 6;
     label = 3;
     break;
    }
   }
   $58 = HEAP32[(40)>>2]|0;
   $59 = ($58|0)==(0|0);
   if (!($59)) {
    $60 = (_strcasecmp($58,$name)|0);
    $61 = ($60|0)==(0);
    if ($61) {
     $$lcssa8 = (40);$i$05$lcssa = 7;
     label = 3;
     break;
    }
   }
   $62 = HEAP32[(44)>>2]|0;
   $63 = ($62|0)==(0|0);
   if (!($63)) {
    $64 = (_strcasecmp($62,$name)|0);
    $65 = ($64|0)==(0);
    if ($65) {
     $$lcssa8 = (44);$i$05$lcssa = 8;
     label = 3;
     break;
    }
   }
   $66 = HEAP32[(48)>>2]|0;
   $67 = ($66|0)==(0|0);
   if (!($67)) {
    $68 = (_strcasecmp($66,$name)|0);
    $69 = ($68|0)==(0);
    if ($69) {
     $$lcssa8 = (48);$i$05$lcssa = 9;
     label = 3;
     break;
    }
   }
   $9 = HEAP32[12>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $i$21 = 0;
   } else {
    $11 = HEAP32[(16)>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $i$21 = 1;
    } else {
     $20 = HEAP32[(20)>>2]|0;
     $21 = ($20|0)==(0|0);
     if ($21) {
      $i$21 = 2;
     } else {
      $22 = HEAP32[(24)>>2]|0;
      $23 = ($22|0)==(0|0);
      if ($23) {
       $i$21 = 3;
      } else {
       $24 = HEAP32[(28)>>2]|0;
       $25 = ($24|0)==(0|0);
       if ($25) {
        $i$21 = 4;
       } else {
        $26 = HEAP32[(32)>>2]|0;
        $27 = ($26|0)==(0|0);
        if ($27) {
         $i$21 = 5;
        } else {
         $28 = HEAP32[(36)>>2]|0;
         $29 = ($28|0)==(0|0);
         if ($29) {
          $i$21 = 6;
         } else {
          $30 = HEAP32[(40)>>2]|0;
          $31 = ($30|0)==(0|0);
          if ($31) {
           $i$21 = 7;
          } else {
           $32 = HEAP32[(44)>>2]|0;
           $33 = ($32|0)==(0|0);
           if ($33) {
            $i$21 = 8;
           } else {
            $34 = HEAP32[(48)>>2]|0;
            $35 = ($34|0)==(0|0);
            if ($35) {
             $i$21 = 9;
             break;
            }
            HEAP32[$vararg_buffer>>2] = $datalen;
            $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
            HEAP32[$vararg_ptr1>>2] = $name;
            (_printf(24948,$vararg_buffer)|0);
            $$0 = -1;
            STACKTOP = sp;return ($$0|0);
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $4 = (52 + ($i$05$lcssa<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  (_FT_Done_Face($5)|0);
  $6 = HEAP32[$$lcssa8>>2]|0;
  _free($6);
  HEAP32[$$lcssa8>>2] = 0;
  HEAP32[$4>>2] = 0;
  $i$21 = $i$05$lcssa;
 }
 $13 = HEAP32[92>>2]|0;
 $14 = (52 + ($i$21<<2)|0);
 $15 = (_FT_New_Memory_Face($13,$data,$datalen,0,$14)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = (___strdup($name)|0);
  $18 = (12 + ($i$21<<2)|0);
  HEAP32[$18>>2] = $17;
  $19 = (96 + ($i$21<<2)|0);
  HEAP32[$19>>2] = $mult;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer2>>2] = $datalen;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $name;
  $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr6>>2] = $15;
  (_printf(24991,$vararg_buffer2)|0);
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _close_font($name) {
 $name = $name|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[12>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  label = 4;
 } else {
  $2 = (_strcasecmp($0,$name)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $$lcssa = 12;$i$02$lcssa = 0;
  } else {
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {
   $7 = HEAP32[(16)>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $9 = (_strcasecmp($7,$name)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     $$lcssa = (16);$i$02$lcssa = 1;
     break;
    }
   }
   $11 = HEAP32[(20)>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = (_strcasecmp($11,$name)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $$lcssa = (20);$i$02$lcssa = 2;
     break;
    }
   }
   $15 = HEAP32[(24)>>2]|0;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    $17 = (_strcasecmp($15,$name)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     $$lcssa = (24);$i$02$lcssa = 3;
     break;
    }
   }
   $19 = HEAP32[(28)>>2]|0;
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    $21 = (_strcasecmp($19,$name)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $$lcssa = (28);$i$02$lcssa = 4;
     break;
    }
   }
   $23 = HEAP32[(32)>>2]|0;
   $24 = ($23|0)==(0|0);
   if (!($24)) {
    $25 = (_strcasecmp($23,$name)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     $$lcssa = (32);$i$02$lcssa = 5;
     break;
    }
   }
   $27 = HEAP32[(36)>>2]|0;
   $28 = ($27|0)==(0|0);
   if (!($28)) {
    $29 = (_strcasecmp($27,$name)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     $$lcssa = (36);$i$02$lcssa = 6;
     break;
    }
   }
   $31 = HEAP32[(40)>>2]|0;
   $32 = ($31|0)==(0|0);
   if (!($32)) {
    $33 = (_strcasecmp($31,$name)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     $$lcssa = (40);$i$02$lcssa = 7;
     break;
    }
   }
   $35 = HEAP32[(44)>>2]|0;
   $36 = ($35|0)==(0|0);
   if (!($36)) {
    $37 = (_strcasecmp($35,$name)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     $$lcssa = (44);$i$02$lcssa = 8;
     break;
    }
   }
   $39 = HEAP32[(48)>>2]|0;
   $40 = ($39|0)==(0|0);
   if ($40) {
    return 0;
   }
   $41 = (_strcasecmp($39,$name)|0);
   $42 = ($41|0)==(0);
   if ($42) {
    $$lcssa = (48);$i$02$lcssa = 9;
   } else {
    return 0;
   }
  }
 } while(0);
 $4 = (52 + ($i$02$lcssa<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 (_FT_Done_Face($5)|0);
 $6 = HEAP32[$$lcssa>>2]|0;
 _free($6);
 HEAP32[$$lcssa>>2] = 0;
 HEAP32[$4>>2] = 0;
 return 0;
}
function _find_font($name) {
 $name = $name|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[12>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 1;
 } else {
  $2 = (_strcasecmp($name,$0)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $$0 = 0;
  } else {
   $4 = HEAP32[(16)>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$0 = 1;
   } else {
    $6 = (_strcasecmp($name,$4)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     $$0 = 1;
    } else {
     $8 = HEAP32[(20)>>2]|0;
     $9 = ($8|0)==(0|0);
     if ($9) {
      $$0 = 1;
     } else {
      $10 = (_strcasecmp($name,$8)|0);
      $11 = ($10|0)==(0);
      if ($11) {
       $$0 = 2;
      } else {
       $12 = HEAP32[(24)>>2]|0;
       $13 = ($12|0)==(0|0);
       if ($13) {
        $$0 = 1;
       } else {
        $14 = (_strcasecmp($name,$12)|0);
        $15 = ($14|0)==(0);
        if ($15) {
         $$0 = 3;
        } else {
         $16 = HEAP32[(28)>>2]|0;
         $17 = ($16|0)==(0|0);
         if ($17) {
          $$0 = 1;
         } else {
          $18 = (_strcasecmp($name,$16)|0);
          $19 = ($18|0)==(0);
          if ($19) {
           $$0 = 4;
          } else {
           $20 = HEAP32[(32)>>2]|0;
           $21 = ($20|0)==(0|0);
           if ($21) {
            $$0 = 1;
           } else {
            $22 = (_strcasecmp($name,$20)|0);
            $23 = ($22|0)==(0);
            if ($23) {
             $$0 = 5;
            } else {
             $24 = HEAP32[(36)>>2]|0;
             $25 = ($24|0)==(0|0);
             if ($25) {
              $$0 = 1;
             } else {
              $26 = (_strcasecmp($name,$24)|0);
              $27 = ($26|0)==(0);
              if ($27) {
               $$0 = 6;
              } else {
               $28 = HEAP32[(40)>>2]|0;
               $29 = ($28|0)==(0|0);
               if ($29) {
                $$0 = 1;
               } else {
                $30 = (_strcasecmp($name,$28)|0);
                $31 = ($30|0)==(0);
                if ($31) {
                 $$0 = 7;
                } else {
                 $32 = HEAP32[(44)>>2]|0;
                 $33 = ($32|0)==(0|0);
                 if ($33) {
                  $$0 = 1;
                 } else {
                  $34 = (_strcasecmp($name,$32)|0);
                  $35 = ($34|0)==(0);
                  if ($35) {
                   $$0 = 8;
                  } else {
                   $36 = HEAP32[(48)>>2]|0;
                   $37 = ($36|0)==(0|0);
                   if ($37) {
                    $$0 = 1;
                   } else {
                    $38 = (_strcasecmp($name,$36)|0);
                    $39 = ($38|0)==(0);
                    $$ = $39 ? 9 : 1;
                    return ($$|0);
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 return ($$0|0);
}
function _get_debug_code() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[136>>2]|0;
 return ($0|0);
}
function _get_bitmap_opt_retcode() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[140>>2]|0;
 return ($0|0);
}
function _get_bitmap($font,$ch,$width,$height) {
 $font = $font|0;
 $ch = $ch|0;
 $width = $width|0;
 $height = $height|0;
 var $$0 = 0, $$04 = 0, $$05 = 0, $$ch = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch$off = 0, $error$0 = 0, $or$cond = 0, $or$cond8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[140>>2] = 0;
 HEAP32[136>>2] = 1010;
 $0 = ($font>>>0)>(9);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (12 + ($font<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (52 + ($font<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (96 + ($font<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $width << 6;
 $9 = Math_imul($8, $7)|0;
 $10 = (($9|0) / 100)&-1;
 $11 = $height << 6;
 $12 = Math_imul($11, $7)|0;
 $13 = (($12|0) / 100)&-1;
 $14 = HEAP32[(56)>>2]|0;
 $15 = ($5|0)==($14|0);
 $ch$off = (($ch) + -65)|0;
 $16 = ($ch$off>>>0)<(26);
 $or$cond = $16 & $15;
 $17 = ($13*108)|0;
 $18 = (($17|0) / 100)&-1;
 $$04 = $or$cond ? $18 : $13;
 $19 = (_FT_Set_Char_Size($5,$10,$$04,72,0)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  HEAP32[$vararg_buffer>>2] = $19;
  (_printf(25030,$vararg_buffer)|0);
  HEAP32[136>>2] = 11;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ((($5)) + 84|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[144>>2] = $22;
 $23 = HEAP32[52>>2]|0;
 $24 = ($5|0)==($23|0);
 $25 = HEAP32[(56)>>2]|0;
 $26 = ($5|0)==($25|0);
 $or$cond8 = $24 | $26;
 if ($or$cond8) {
  $27 = ($ch|0)==(126);
  if ($27) {
   $$05 = 732;
  } else {
   $28 = ($ch|0)==(94);
   $$ch = $28 ? 710 : $ch;
   $$05 = $$ch;
  }
 } else {
  $$05 = $ch;
 }
 $29 = HEAP32[8>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $32 = (_FT_Load_Char($5,$$05,4)|0);
  $error$0 = $32;
 } else {
  $31 = (_FT_Load_Char($5,$$05,131076)|0);
  $error$0 = $31;
 }
 $33 = ($error$0|0)==(0);
 if (!($33)) {
  HEAP32[$vararg_buffer1>>2] = $error$0;
  (_printf(25055,$vararg_buffer1)|0);
  HEAP32[136>>2] = 12;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = HEAP32[8>>2]|0;
 $35 = ($34|0)==(0);
 if ($35) {
  HEAP32[136>>2] = 14;
  HEAP32[140>>2] = 1;
  $41 = HEAP32[144>>2]|0;
  $42 = ((($41)) + 88|0);
  $43 = HEAP32[$42>>2]|0;
  $$0 = $43;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = HEAP32[144>>2]|0;
 $37 = ((($36)) + 76|0);
 $38 = (_mono_unpack($37)|0);
 $39 = ($38|0)==(0);
 if ($39) {
  $40 = HEAP32[148>>2]|0;
  $$0 = $40;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[136>>2] = 13;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _mono_unpack($bitmap) {
 $bitmap = $bitmap|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes$03 = 0, $bytes$1$lcssa = 0, $bytes$11 = 0, $x$02 = 0;
 var $y$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[148>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  _free($0);
 }
 $2 = ((($bitmap)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$bitmap>>2]|0;
 $5 = Math_imul($4, $3)|0;
 $6 = (_malloc($5)|0);
 HEAP32[148>>2] = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = -1;
  return ($$0|0);
 }
 $8 = HEAP32[$bitmap>>2]|0;
 $9 = ($8|0)>(0);
 if (!($9)) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ((($bitmap)) + 8|0);
 $11 = ((($bitmap)) + 12|0);
 $bytes$03 = $6;$y$04 = 0;
 while(1) {
  $12 = HEAP32[$10>>2]|0;
  $13 = Math_imul($12, $y$04)|0;
  $14 = HEAP32[$11>>2]|0;
  $15 = HEAP32[$2>>2]|0;
  $16 = ($15|0)>(0);
  if ($16) {
   $bytes$11 = $bytes$03;$x$02 = 0;
   while(1) {
    $17 = $x$02 >> 3;
    $$sum = (($17) + ($13))|0;
    $18 = (($14) + ($$sum)|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = $x$02 & 7;
    $22 = $21 ^ 7;
    $23 = 1 << $22;
    $24 = $20 & $23;
    $25 = ($24|0)!=(0);
    $26 = $25 << 31 >> 31;
    $27 = ((($bytes$11)) + 1|0);
    HEAP8[$bytes$11>>0] = $26;
    $28 = (($x$02) + 1)|0;
    $29 = HEAP32[$2>>2]|0;
    $30 = ($28|0)<($29|0);
    if ($30) {
     $bytes$11 = $27;$x$02 = $28;
    } else {
     $bytes$1$lcssa = $27;
     break;
    }
   }
  } else {
   $bytes$1$lcssa = $bytes$03;
  }
  $31 = (($y$04) + 1)|0;
  $32 = HEAP32[$bitmap>>2]|0;
  $33 = ($31|0)<($32|0);
  if ($33) {
   $bytes$03 = $bytes$1$lcssa;$y$04 = $31;
  } else {
   $$0 = 0;
   break;
  }
 }
 return ($$0|0);
}
function _get_left() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;
 $1 = ((($0)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _get_top() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _get_width() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;
 $1 = ((($0)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _get_height() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _get_pitch() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;
 $1 = ((($0)) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _get_advance() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[144>>2]|0;
 $1 = ((($0)) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >> 6;
 return ($3|0);
}
function _main() {
 var $$0 = 0, $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_FT_Init_FreeType(92)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$vararg_buffer>>2] = $0;
 (_printf(25076,$vararg_buffer)|0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _ft_service_list_lookup($service_descriptors,$service_id) {
 $service_descriptors = $service_descriptors|0;
 $service_id = $service_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $desc$03 = 0, $desc$03$lcssa = 0, $or$cond = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($service_descriptors|0)!=(0|0);
 $1 = ($service_id|0)!=(0|0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $2 = HEAP32[$service_descriptors>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $result$0 = 0;
  return ($result$0|0);
 } else {
  $4 = $2;$desc$03 = $service_descriptors;
 }
 while(1) {
  $5 = (_strcmp($4,$service_id)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $desc$03$lcssa = $desc$03;
   break;
  }
  $9 = ((($desc$03)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $result$0 = 0;
   label = 6;
   break;
  } else {
   $4 = $10;$desc$03 = $9;
  }
 }
 if ((label|0) == 6) {
  return ($result$0|0);
 }
 $7 = ((($desc$03$lcssa)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $result$0 = $8;
 return ($result$0|0);
}
function _ft_validator_init($valid,$base,$limit,$level) {
 $valid = $valid|0;
 $base = $base|0;
 $limit = $limit|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$valid>>2] = $base;
 $0 = ((($valid)) + 4|0);
 HEAP32[$0>>2] = $limit;
 $1 = ((($valid)) + 8|0);
 HEAP32[$1>>2] = $level;
 $2 = ((($valid)) + 12|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _ft_validator_error($valid,$error) {
 $valid = $valid|0;
 $error = $error|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($valid)) + 12|0);
 HEAP32[$0>>2] = $error;
 $1 = ((($valid)) + 16|0);
 _longjmp(($1|0),1);
 // unreachable;
}
function _FT_Stream_New($library,$args,$astream) {
 $library = $library|0;
 $args = $args|0;
 $astream = $astream|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $stream$0$ph = 0, $stream$01 = 0, $stream$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$astream>>2] = 0;
 $0 = ($library|0)==(0|0);
 if ($0) {
  $$0 = 33;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($args|0)==(0|0);
 if ($1) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$library>>2]|0;
 $3 = (_ft_mem_alloc($2,40,$error)|0);
 $4 = HEAP32[$error>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ((($3)) + 28|0);
  HEAP32[$6>>2] = $2;
  $7 = HEAP32[$args>>2]|0;
  $8 = $7 & 1;
  $9 = ($8|0)==(0);
  do {
   if ($9) {
    $14 = $7 & 4;
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = ((($args)) + 12|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (_FT_Stream_Open($3,$17)|0);
     HEAP32[$error>>2] = $18;
     $19 = HEAP32[$16>>2]|0;
     $20 = ((($3)) + 16|0);
     HEAP32[$20>>2] = $19;
     $stream$0$ph = $3;
     label = 12;
     break;
    }
    $21 = $7 & 2;
    $22 = ($21|0)==(0);
    if (!($22)) {
     $23 = ((($args)) + 16|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0|0);
     if (!($25)) {
      _ft_mem_free($2,$3);
      $26 = HEAP32[$23>>2]|0;
      $stream$0$ph = $26;
      label = 12;
      break;
     }
    }
    HEAP32[$error>>2] = 6;
    $stream$01 = $3;
    label = 13;
   } else {
    $10 = ((($args)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($args)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    _FT_Stream_OpenMemory($3,$11,$13);
    $stream$0$ph = $3;
    label = 12;
   }
  } while(0);
  if ((label|0) == 12) {
   $$pr = HEAP32[$error>>2]|0;
   $27 = ($$pr|0)==(0);
   if ($27) {
    $28 = ((($stream$0$ph)) + 28|0);
    HEAP32[$28>>2] = $2;
    $stream$1 = $stream$0$ph;
   } else {
    $stream$01 = $stream$0$ph;
    label = 13;
   }
  }
  if ((label|0) == 13) {
   _ft_mem_free($2,$stream$01);
   $stream$1 = 0;
  }
  HEAP32[$astream>>2] = $stream$1;
 }
 $29 = HEAP32[$error>>2]|0;
 $$0 = $29;
 STACKTOP = sp;return ($$0|0);
}
function _FT_Stream_Free($stream,$external) {
 $stream = $stream|0;
 $external = $external|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($stream|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($stream)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 _FT_Stream_Close($stream);
 $3 = ($external|0)==(0);
 if (!($3)) {
  return;
 }
 _ft_mem_free($2,$stream);
 return;
}
function _ft_glyphslot_free_bitmap($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($slot)) + 156|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($1)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 1;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = ((($slot)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 100|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($slot)) + 88|0);
   $12 = HEAP32[$11>>2]|0;
   _ft_mem_free($10,$12);
   HEAP32[$11>>2] = 0;
   $13 = HEAP32[$0>>2]|0;
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & -2;
   HEAP32[$14>>2] = $16;
   return;
  }
 }
 $17 = ((($slot)) + 88|0);
 HEAP32[$17>>2] = 0;
 return;
}
function _ft_glyphslot_set_bitmap($slot,$buffer) {
 $slot = $slot|0;
 $buffer = $buffer|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _ft_glyphslot_free_bitmap($slot);
 $0 = ((($slot)) + 88|0);
 HEAP32[$0>>2] = $buffer;
 return;
}
function _ft_glyphslot_alloc_bitmap($slot,$size) {
 $slot = $slot|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($slot)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($slot)) + 156|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $12 = $7 | 1;
  HEAP32[$6>>2] = $12;
 } else {
  $10 = ((($slot)) + 88|0);
  $11 = HEAP32[$10>>2]|0;
  _ft_mem_free($3,$11);
  HEAP32[$10>>2] = 0;
 }
 $13 = (_ft_mem_alloc($3,$size,$error)|0);
 $14 = ((($slot)) + 88|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _FT_New_GlyphSlot($face,$aslot) {
 $face = $face|0;
 $aslot = $aslot|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ((($face)) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_ft_mem_alloc($7,$9,$error)|0);
 $11 = HEAP32[$error>>2]|0;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = ((($10)) + 4|0);
   HEAP32[$13>>2] = $face;
   $14 = (_ft_glyphslot_init($10)|0);
   HEAP32[$error>>2] = $14;
   $15 = ($14|0)==(0);
   if (!($15)) {
    _ft_glyphslot_done($10);
    _ft_mem_free($7,$10);
    break;
   }
   $16 = ((($face)) + 84|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($10)) + 8|0);
   HEAP32[$18>>2] = $17;
   HEAP32[$16>>2] = $10;
   $19 = ($aslot|0)==(0|0);
   if (!($19)) {
    HEAP32[$aslot>>2] = $10;
   }
  } else {
   $20 = ($aslot|0)==(0|0);
   if (!($20)) {
    HEAP32[$aslot>>2] = 0;
   }
  }
 } while(0);
 $21 = HEAP32[$error>>2]|0;
 $$0 = $21;
 STACKTOP = sp;return ($$0|0);
}
function _FT_Done_GlyphSlot($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cur$0 = 0, $cur$03 = 0, $cur$05 = 0, $cur$05$lcssa = 0, $prev$04 = 0, $prev$04$lcssa = 0, $prev$04$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($slot|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($slot)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 96|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 84|0);
 $cur$03 = HEAP32[$7>>2]|0;
 $8 = ($cur$03|0)==(0|0);
 if ($8) {
  return;
 } else {
  $cur$05 = $cur$03;$prev$04 = 0;
 }
 while(1) {
  $9 = ($cur$05|0)==($slot|0);
  if ($9) {
   $cur$05$lcssa = $cur$05;$prev$04$lcssa = $prev$04;
   break;
  }
  $19 = ((($cur$05)) + 8|0);
  $cur$0 = HEAP32[$19>>2]|0;
  $20 = ($cur$0|0)==(0|0);
  if ($20) {
   label = 11;
   break;
  } else {
   $prev$04$phi = $cur$05;$cur$05 = $cur$0;$prev$04 = $prev$04$phi;
  }
 }
 if ((label|0) == 11) {
  return;
 }
 $10 = ($prev$04$lcssa|0)==(0|0);
 $11 = ((($cur$05$lcssa)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 if ($10) {
  $13 = HEAP32[$1>>2]|0;
  $14 = ((($13)) + 84|0);
  HEAP32[$14>>2] = $12;
 } else {
  $15 = ((($prev$04$lcssa)) + 8|0);
  HEAP32[$15>>2] = $12;
 }
 $16 = ((($slot)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  FUNCTION_TABLE_vi[$17 & 127]($slot);
 }
 _ft_glyphslot_done($slot);
 _ft_mem_free($6,$slot);
 return;
}
function _FT_Load_Glyph($face,$glyph_index,$load_flags) {
 $face = $face|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error$0 = 0, $error$1 = 0, $error$2 = 0, $load_flags$ = 0, $mode2$0 = 0, $or$cond16 = 0, $or$cond18 = 0, $or$cond20 = 0, $switch$split2D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $$0 = 35;
  return ($$0|0);
 }
 $1 = ((($face)) + 88|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 35;
  return ($$0|0);
 }
 $4 = ((($face)) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 35;
  return ($$0|0);
 }
 _ft_glyphslot_clear($5);
 $7 = ((($face)) + 96|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 160|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $load_flags & 1024;
 $14 = ($13|0)==(0);
 $15 = $load_flags | 2049;
 $load_flags$ = $14 ? $load_flags : $15;
 $16 = $load_flags$ & 1;
 $17 = ($16|0)==(0);
 $18 = $load_flags$ & -15;
 $19 = $18 | 10;
 $$1 = $17 ? $load_flags$ : $19;
 $20 = ($12|0)!=(0|0);
 $21 = $$1 & 2;
 $22 = ($21|0)==(0);
 $23 = $$1 & 32770;
 $24 = ($23|0)==(0);
 $25 = $24 & $20;
 L10: do {
  if ($25) {
   $26 = HEAP32[$8>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = $27 & 768;
   $29 = ($28|0)==(256);
   if ($29) {
    $30 = ((($face)) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 & 8192;
    $33 = ($32|0)==(0);
    if ($33) {
     $34 = $$1 & 2048;
     $35 = ($34|0)==(0);
     do {
      if ($35) {
       $36 = ((($face)) + 128|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ((($37)) + 12|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ($39|0)==(0);
       if ($40) {
        $41 = ((($37)) + 4|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ($42|0)==(0);
        if (!($43)) {
         break;
        }
       }
       $44 = HEAP32[$36>>2]|0;
       $45 = ((($44)) + 4|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(0);
       if (!($47)) {
        label = 22;
        break L10;
       }
       $48 = ((($44)) + 12|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = ($49|0)==(0);
       if ($50) {
        label = 22;
        break L10;
       }
      }
     } while(0);
     $51 = $$1 & 32;
     $52 = ($51|0)==(0);
     if ($52) {
      $53 = HEAP32[$8>>2]|0;
      $54 = HEAP32[$53>>2]|0;
      $55 = $54 & 1024;
      $56 = ($55|0)==(0);
      $57 = $$1 & 983040;
      $58 = ($57|0)==(65536);
      $or$cond20 = $58 | $56;
      if (!($or$cond20)) {
       $59 = ((($face)) + 128|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ((($60)) + 56|0);
       $62 = HEAP8[$61>>0]|0;
       $63 = ($62<<24>>24)==(0);
       if ($63) {
        $64 = HEAP32[$30>>2]|0;
        $65 = $64 & 8;
        $66 = ($65|0)==(0);
        if ($66) {
         label = 22;
         break;
        }
        $67 = ((($face)) + 732|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ($68|0)==(0);
        if ($69) {
         label = 22;
         break;
        }
        $70 = ((($face)) + 260|0);
        $71 = ((($70)) + 26|0);
        $72 = HEAP16[$71>>1]|0;
        $73 = ($72<<16>>16)==(0);
        if (!($73)) {
         label = 22;
         break;
        }
       }
      }
     }
     $74 = HEAP32[$30>>2]|0;
     $75 = $74 & 2;
     $76 = ($75|0)!=(0);
     $77 = $$1 & 8;
     $78 = ($77|0)==(0);
     $or$cond16 = $78 & $76;
     if ($or$cond16) {
      $79 = ((($8)) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ((($80)) + 80|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = HEAP32[$1>>2]|0;
      $84 = $$1 | 16384;
      $85 = (FUNCTION_TABLE_iiiii[$82 & 63]($5,$83,$glyph_index,$84)|0);
      $86 = ($85|0)==(0);
      if ($86) {
       $87 = ((($5)) + 72|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = ($88|0)==(1651078259);
       if ($89) {
        $error$0 = 0;
        break;
       }
      }
     }
     $90 = ((($face)) + 128|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ((($91)) + 28|0);
     $93 = HEAP32[$92>>2]|0;
     HEAP32[$92>>2] = 0;
     $94 = HEAP32[$12>>2]|0;
     $95 = ((($94)) + 20|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = ((($96)) + 12|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = HEAP32[$1>>2]|0;
     $100 = (FUNCTION_TABLE_iiiiii[$98 & 63]($12,$5,$99,$glyph_index,$$1)|0);
     HEAP32[$92>>2] = $93;
     $error$0 = $100;
    } else {
     label = 22;
    }
   } else {
    label = 22;
   }
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $101 = ((($8)) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ((($102)) + 80|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = HEAP32[$1>>2]|0;
  $106 = (FUNCTION_TABLE_iiiii[$104 & 63]($5,$105,$glyph_index,$$1)|0);
  $107 = ($106|0)==(0);
  if (!($107)) {
   $$0 = $106;
   return ($$0|0);
  }
  $108 = ((($5)) + 72|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109|0)==(1869968492);
  if ($110) {
   $111 = ((($5)) + 108|0);
   $112 = (_FT_Outline_Check($111)|0);
   $113 = ($112|0)==(0);
   if (!($113)) {
    $$0 = $112;
    return ($$0|0);
   }
   if ($22) {
    $114 = $$1 & 16;
    $115 = $114&255;
    _ft_glyphslot_grid_fit_metrics($5,$115);
    $error$0 = 0;
   } else {
    $error$0 = 0;
   }
  } else {
   $error$0 = 0;
  }
 }
 $116 = $$1 & 16;
 $117 = ($116|0)==(0);
 if ($117) {
  $122 = ((($5)) + 40|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ((($5)) + 64|0);
  HEAP32[$124>>2] = $123;
  $125 = ((($5)) + 68|0);
  HEAP32[$125>>2] = 0;
 } else {
  $118 = ((($5)) + 64|0);
  HEAP32[$118>>2] = 0;
  $119 = ((($5)) + 52|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ((($5)) + 68|0);
  HEAP32[$121>>2] = $120;
 }
 $126 = $$1 & 8192;
 $127 = ($126|0)==(0);
 if ($127) {
  $128 = ((($face)) + 8|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = $129 & 1;
  $131 = ($130|0)==(0);
  if (!($131)) {
   $132 = HEAP32[$1>>2]|0;
   $133 = ((($5)) + 56|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ((($132)) + 16|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (_FT_MulDiv($134,$136,64)|0);
   HEAP32[$133>>2] = $137;
   $138 = ((($5)) + 60|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ((($132)) + 20|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = (_FT_MulDiv($139,$141,64)|0);
   HEAP32[$138>>2] = $142;
  }
 }
 $143 = $$1 & 2048;
 $144 = ($143|0)==(0);
 if ($144) {
  $145 = ((($face)) + 128|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = ((($146)) + 28|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = ($148|0)==(0);
  if ($149) {
   $error$2 = $error$0;
  } else {
   $150 = (_ft_lookup_glyph_renderer($5)|0);
   $151 = ($150|0)==(0|0);
   if ($151) {
    $159 = ((($5)) + 72|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = ($160|0)==(1869968492);
    if ($161) {
     $162 = HEAP32[$147>>2]|0;
     $163 = $162 & 1;
     $164 = ($163|0)==(0);
     if (!($164)) {
      $165 = ((($5)) + 108|0);
      $166 = ((($146)) + 4|0);
      _FT_Outline_Transform($165,$166);
     }
     $167 = HEAP32[$147>>2]|0;
     $168 = $167 & 2;
     $169 = ($168|0)==(0);
     if ($169) {
      $error$1 = $error$0;
     } else {
      $170 = ((($5)) + 108|0);
      $171 = ((($146)) + 20|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ((($146)) + 24|0);
      $174 = HEAP32[$173>>2]|0;
      _FT_Outline_Translate($170,$172,$174);
      $error$1 = $error$0;
     }
    } else {
     $error$1 = $error$0;
    }
   } else {
    $152 = ((($150)) + 12|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ((($153)) + 44|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($146)) + 4|0);
    $157 = ((($146)) + 20|0);
    $158 = (FUNCTION_TABLE_iiiii[$155 & 63]($150,$5,$156,$157)|0);
    $error$1 = $158;
   }
   $175 = ((($5)) + 64|0);
   $176 = ((($146)) + 4|0);
   _FT_Vector_Transform($175,$176);
   $error$2 = $error$1;
  }
 } else {
  $error$2 = $error$0;
 }
 $177 = ($error$2|0)==(0);
 if (!($177)) {
  $$0 = $error$2;
  return ($$0|0);
 }
 $178 = ((($5)) + 72|0);
 $179 = HEAP32[$178>>2]|0;
 $switch$split2D = ($179|0)<(1668246896);
 L67: do {
  if ($switch$split2D) {
   switch ($179|0) {
   case 1651078259:  {
    $$0 = 0;
    break;
   }
   default: {
    break L67;
   }
   }
   return ($$0|0);
  } else {
   switch ($179|0) {
   case 1668246896:  {
    $$0 = 0;
    break;
   }
   default: {
    break L67;
   }
   }
   return ($$0|0);
  }
 } while(0);
 $180 = $$1 & 4;
 $181 = ($180|0)==(0);
 if ($181) {
  $$0 = 0;
  return ($$0|0);
 }
 $182 = $$1 >>> 16;
 $183 = $182 & 15;
 $184 = ($183|0)!=(0);
 $185 = $$1 & 4096;
 $186 = ($185|0)==(0);
 $or$cond18 = $186 | $184;
 $mode2$0 = $or$cond18 ? $183 : 2;
 $187 = (_FT_Render_Glyph($5,$mode2$0)|0);
 $$0 = $187;
 return ($$0|0);
}
function _FT_Render_Glyph($slot,$render_mode) {
 $slot = $slot|0;
 $render_mode = $render_mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($slot|0)==(0|0);
 if ($0) {
  $$0 = 6;
  return ($$0|0);
 }
 $1 = ((($slot)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 6;
  return ($$0|0);
 }
 $4 = ((($2)) + 96|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_FT_Render_Glyph_Internal($7,$slot,$render_mode)|0);
 $$0 = $8;
 return ($$0|0);
}
function _FT_Load_Char($face,$char_code,$load_flags) {
 $face = $face|0;
 $char_code = $char_code|0;
 $load_flags = $load_flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $glyph_index$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $$0 = 35;
  return ($$0|0);
 }
 $1 = ((($face)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $glyph_index$0 = $char_code;
 } else {
  $4 = (_FT_Get_Char_Index($face,$char_code)|0);
  $glyph_index$0 = $4;
 }
 $5 = (_FT_Load_Glyph($face,$glyph_index$0,$load_flags)|0);
 $$0 = $5;
 return ($$0|0);
}
function _FT_Get_Char_Index($face,$charcode) {
 $face = $face|0;
 $charcode = $charcode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $1 = ((($face)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 255]($2,$charcode)|0);
 $result$0 = $8;
 return ($result$0|0);
}
function _FT_New_Face($library,$pathname,$face_index,$aface) {
 $library = $library|0;
 $pathname = $pathname|0;
 $face_index = $face_index|0;
 $aface = $aface|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $args = sp;
 $0 = ($pathname|0)==(0|0);
 if ($0) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$args>>2] = 4;
 $1 = ((($args)) + 12|0);
 HEAP32[$1>>2] = $pathname;
 $2 = ((($args)) + 16|0);
 HEAP32[$2>>2] = 0;
 $3 = (_FT_Open_Face($library,$args,$face_index,$aface)|0);
 $$0 = $3;
 STACKTOP = sp;return ($$0|0);
}
function _FT_Open_Face($library,$args,$face_index,$aface) {
 $library = $library|0;
 $args = $args|0;
 $face_index = $face_index|0;
 $aface = $aface|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cur$09 = 0, $error = 0, $face = 0, $i$08 = 0, $num_params$0 = 0;
 var $num_params1$0 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond3 = 0, $or$cond5 = 0, $params$0 = 0, $params2$0 = 0, $sext = 0, $size = 0, $stream = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 12|0;
 $stream = sp + 8|0;
 $face = sp + 4|0;
 $size = sp;
 HEAP32[$stream>>2] = 0;
 HEAP32[$face>>2] = 0;
 $0 = ($aface|0)==(0|0);
 $1 = ($face_index|0)>(-1);
 $or$cond = $1 & $0;
 $or$cond$not = $or$cond ^ 1;
 $2 = ($args|0)!=(0|0);
 $or$cond3 = $2 & $or$cond$not;
 if (!($or$cond3)) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$args>>2]|0;
 $4 = $3 & 2;
 $5 = ($4|0)==(0);
 if ($5) {
  $33 = 0;
 } else {
  $6 = ((($args)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  $33 = $8;
 }
 $9 = (_FT_Stream_New($library,$args,$stream)|0);
 HEAP32[$error>>2] = $9;
 $10 = ($9|0)==(0);
 L7: do {
  if ($10) {
   $11 = HEAP32[$library>>2]|0;
   $12 = HEAP32[$args>>2]|0;
   $13 = $12 & 8;
   $14 = ($13|0)==(0);
   do {
    if ($14) {
     label = 13;
    } else {
     $15 = ((($args)) + 20|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(0|0);
     if ($17) {
      label = 13;
     } else {
      $18 = HEAP32[$16>>2]|0;
      $19 = HEAP32[$18>>2]|0;
      $20 = $19 & 1;
      $21 = ($20|0)==(0);
      if ($21) {
       HEAP32[$error>>2] = 32;
      } else {
       $22 = $12 & 16;
       $23 = ($22|0)==(0);
       if ($23) {
        $num_params$0 = 0;$params$0 = 0;
       } else {
        $24 = ((($args)) + 24|0);
        $25 = HEAP32[$24>>2]|0;
        $26 = ((($args)) + 28|0);
        $27 = HEAP32[$26>>2]|0;
        $num_params$0 = $25;$params$0 = $27;
       }
       $28 = HEAP32[$stream>>2]|0;
       $29 = (_open_face($16,$28,$face_index,$num_params$0,$params$0,$face)|0);
       HEAP32[$error>>2] = $29;
       $30 = ($29|0)==(0);
       if ($30) {
        break;
       }
      }
      $31 = HEAP32[$stream>>2]|0;
      $32 = $33&1;
      _FT_Stream_Free($31,$32);
      label = 56;
      break L7;
     }
    }
   } while(0);
   L19: do {
    if ((label|0) == 13) {
     $34 = ((($library)) + 16|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (((($library)) + 20|0) + ($35<<2)|0);
     $37 = ($35|0)>(0);
     if (!($37)) {
      label = 25;
      break L7;
     }
     $38 = ((($library)) + 20|0);
     $39 = ((($args)) + 24|0);
     $40 = ((($args)) + 28|0);
     $cur$09 = $38;
     while(1) {
      $41 = HEAP32[$cur$09>>2]|0;
      $42 = HEAP32[$41>>2]|0;
      $43 = HEAP32[$42>>2]|0;
      $44 = $43 & 1;
      $45 = ($44|0)==(0);
      if (!($45)) {
       $46 = HEAP32[$args>>2]|0;
       $47 = $46 & 16;
       $48 = ($47|0)==(0);
       if ($48) {
        $num_params1$0 = 0;$params2$0 = 0;
       } else {
        $49 = HEAP32[$39>>2]|0;
        $50 = HEAP32[$40>>2]|0;
        $num_params1$0 = $49;$params2$0 = $50;
       }
       $51 = HEAP32[$stream>>2]|0;
       $52 = (_open_face($41,$51,$face_index,$num_params1$0,$params2$0,$face)|0);
       HEAP32[$error>>2] = $52;
       $53 = ($52|0)==(0);
       if ($53) {
        break L19;
       }
       $54 = HEAP32[$cur$09>>2]|0;
       $55 = HEAP32[$54>>2]|0;
       $56 = ((($55)) + 8|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (_strcmp($57,89693)|0);
       $59 = ($58|0)==(0);
       $60 = $52 & 255;
       $61 = ($60|0)==(142);
       $or$cond5 = $61 & $59;
       if ($or$cond5) {
        $62 = HEAP32[$stream>>2]|0;
        $63 = (_FT_Stream_Seek($62,0)|0);
        $64 = ($63|0)==(0);
        if (!($64)) {
         label = 25;
         break L7;
        }
        $65 = HEAP32[$stream>>2]|0;
        $66 = (_open_face_PS_from_sfnt_stream($library,$65,$face_index,0,0,$aface)|0);
        HEAP32[$error>>2] = $66;
        $67 = ($66|0)==(0);
        if ($67) {
         break;
        }
       }
       $71 = HEAP32[$error>>2]|0;
       $72 = $71 & 255;
       $73 = ($72|0)==(2);
       if (!($73)) {
        label = 25;
        break L7;
       }
      }
      $74 = ((($cur$09)) + 4|0);
      $75 = ($74>>>0)<($36>>>0);
      if ($75) {
       $cur$09 = $74;
      } else {
       label = 25;
       break L7;
      }
     }
     $68 = HEAP32[$stream>>2]|0;
     $69 = $33&1;
     _FT_Stream_Free($68,$69);
     $70 = HEAP32[$error>>2]|0;
     $$0 = $70;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   if ($33) {
    $88 = HEAP32[$face>>2]|0;
    $89 = ((($88)) + 8|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $90 | 1024;
    HEAP32[$89>>2] = $91;
   }
   $92 = (_ft_mem_alloc($11,12,$error)|0);
   $93 = HEAP32[$error>>2]|0;
   $94 = ($93|0)==(0);
   if ($94) {
    $95 = HEAP32[$face>>2]|0;
    $96 = ((($92)) + 8|0);
    HEAP32[$96>>2] = $95;
    $97 = HEAP32[$face>>2]|0;
    $98 = ((($97)) + 96|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ((($99)) + 16|0);
    _FT_List_Add($100,$92);
    if ($1) {
     $101 = HEAP32[$face>>2]|0;
     $102 = (_FT_New_GlyphSlot($101,0)|0);
     HEAP32[$error>>2] = $102;
     $103 = ($102|0)==(0);
     if (!($103)) {
      label = 56;
      break;
     }
     $104 = HEAP32[$face>>2]|0;
     $105 = (_FT_New_Size($104,$size)|0);
     HEAP32[$error>>2] = $105;
     $106 = ($105|0)==(0);
     if (!($106)) {
      label = 56;
      break;
     }
     $107 = HEAP32[$size>>2]|0;
     $108 = HEAP32[$face>>2]|0;
     $109 = ((($108)) + 88|0);
     HEAP32[$109>>2] = $107;
    }
    $110 = HEAP32[$face>>2]|0;
    $111 = ((($110)) + 8|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $112 & 1;
    $114 = ($113|0)==(0);
    if (!($114)) {
     $115 = ((($110)) + 74|0);
     $116 = HEAP16[$115>>1]|0;
     $117 = ($116<<16>>16)<(0);
     if ($117) {
      $118 = $116&65535;
      $119 = (0 - ($118))|0;
      $120 = $119&65535;
      HEAP16[$115>>1] = $120;
     }
     $121 = HEAP32[$face>>2]|0;
     $122 = ((($121)) + 8|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $123 & 32;
     $125 = ($124|0)==(0);
     if ($125) {
      $126 = ((($121)) + 74|0);
      $127 = HEAP16[$126>>1]|0;
      $128 = ((($121)) + 78|0);
      HEAP16[$128>>1] = $127;
     }
    }
    $129 = HEAP32[$face>>2]|0;
    $130 = ((($129)) + 8|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = $131 & 2;
    $133 = ($132|0)==(0);
    if (!($133)) {
     $134 = HEAP32[$face>>2]|0;
     $135 = ((($134)) + 28|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($136|0)>(0);
     if ($137) {
      $138 = HEAP32[$face>>2]|0;
      $139 = ((($138)) + 28|0);
      $140 = HEAP32[$139>>2]|0;
      $142 = $134;$i$08 = 0;
      while(1) {
       $141 = ((($142)) + 32|0);
       $143 = HEAP32[$141>>2]|0;
       $144 = (($143) + ($i$08<<4)|0);
       $145 = HEAP16[$144>>1]|0;
       $146 = ($145<<16>>16)<(0);
       if ($146) {
        $147 = $145&65535;
        $148 = (0 - ($147))|0;
        $149 = $148&65535;
        HEAP16[$144>>1] = $149;
       }
       $150 = (((($143) + ($i$08<<4)|0)) + 8|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = ($151|0)<(0);
       if ($152) {
        $153 = (0 - ($151))|0;
        $sext = $153 << 16;
        $154 = $sext >> 16;
        HEAP32[$150>>2] = $154;
       }
       $155 = (((($143) + ($i$08<<4)|0)) + 12|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ($156|0)<(0);
       if ($157) {
        $158 = (0 - ($156))|0;
        HEAP32[$155>>2] = $158;
       }
       $159 = (($i$08) + 1)|0;
       $160 = ($159|0)<($140|0);
       if ($160) {
        $142 = $138;$i$08 = $159;
       } else {
        break;
       }
      }
     }
    }
    $161 = HEAP32[$face>>2]|0;
    $162 = ((($161)) + 128|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($163)) + 4|0);
    HEAP32[$164>>2] = 65536;
    $165 = ((($163)) + 8|0);
    HEAP32[$165>>2] = 0;
    $166 = ((($163)) + 12|0);
    HEAP32[$166>>2] = 0;
    $167 = ((($163)) + 16|0);
    HEAP32[$167>>2] = 65536;
    $168 = ((($163)) + 20|0);
    HEAP32[$168>>2] = 0;
    $169 = ((($163)) + 24|0);
    HEAP32[$169>>2] = 0;
    $170 = ((($163)) + 60|0);
    HEAP32[$170>>2] = 1;
    $171 = HEAP32[$face>>2]|0;
    if ($0) {
     (_FT_Done_Face($171)|0);
     break;
    } else {
     HEAP32[$aface>>2] = $171;
     break;
    }
   } else {
    label = 56;
   }
  } else {
   label = 25;
  }
 } while(0);
 if ((label|0) == 25) {
  $76 = HEAP32[$error>>2]|0;
  $77 = $76 & 255;
  L74: do {
   switch ($77|0) {
   case 85: case 2: case 81:  {
    $78 = HEAP32[$stream>>2]|0;
    $79 = (_load_mac_face($library,$78,$face_index,$aface,$args)|0);
    HEAP32[$error>>2] = $79;
    $80 = ($79|0)==(0);
    if ($80) {
     $81 = HEAP32[$stream>>2]|0;
     $82 = $33&1;
     _FT_Stream_Free($81,$82);
     $83 = HEAP32[$error>>2]|0;
     $$0 = $83;
     STACKTOP = sp;return ($$0|0);
    } else {
     $84 = $79 & 255;
     $85 = ($84|0)==(2);
     if (!($85)) {
      break L74;
     }
     HEAP32[$error>>2] = 2;
     break L74;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $86 = HEAP32[$stream>>2]|0;
  $87 = $33&1;
  _FT_Stream_Free($86,$87);
  label = 56;
 }
 if ((label|0) == 56) {
  $172 = HEAP32[$face>>2]|0;
  (_FT_Done_Face($172)|0);
 }
 $173 = HEAP32[$error>>2]|0;
 $$0 = $173;
 STACKTOP = sp;return ($$0|0);
}
function _FT_New_Memory_Face($library,$file_base,$file_size,$face_index,$aface) {
 $library = $library|0;
 $file_base = $file_base|0;
 $file_size = $file_size|0;
 $face_index = $face_index|0;
 $aface = $aface|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $args = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $args = sp;
 $0 = ($file_base|0)==(0|0);
 if ($0) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$args>>2] = 1;
 $1 = ((($args)) + 4|0);
 HEAP32[$1>>2] = $file_base;
 $2 = ((($args)) + 8|0);
 HEAP32[$2>>2] = $file_size;
 $3 = ((($args)) + 16|0);
 HEAP32[$3>>2] = 0;
 $4 = (_FT_Open_Face($library,$args,$face_index,$aface)|0);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function _open_face_from_buffer($library,$base,$size,$face_index,$driver_name,$aface) {
 $library = $library|0;
 $base = $base|0;
 $size = $size|0;
 $face_index = $face_index|0;
 $driver_name = $driver_name|0;
 $aface = $aface|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0;
 var $stream = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $args = sp + 8|0;
 $stream = sp;
 HEAP32[$stream>>2] = 0;
 $0 = HEAP32[$library>>2]|0;
 $1 = (_new_memory_stream($library,$base,$size,$stream)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  _ft_mem_free($0,$base);
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$args>>2] = 2;
 $3 = HEAP32[$stream>>2]|0;
 $4 = ((($args)) + 16|0);
 HEAP32[$4>>2] = $3;
 $5 = ($driver_name|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$args>>2]|0;
  $7 = $6 | 8;
  HEAP32[$args>>2] = $7;
  $8 = (_FT_Get_Module($library,$driver_name)|0);
  $9 = ((($args)) + 20|0);
  HEAP32[$9>>2] = $8;
 }
 $10 = (_FT_Open_Face($library,$args,$face_index,$aface)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$aface>>2]|0;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & -1025;
  HEAP32[$13>>2] = $15;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $16 = HEAP32[$stream>>2]|0;
  _FT_Stream_Close($16);
  $17 = HEAP32[$stream>>2]|0;
  _ft_mem_free($0,$17);
  HEAP32[$stream>>2] = 0;
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _FT_Get_Module($library,$module_name) {
 $library = $library|0;
 $module_name = $module_name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur$02 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($library|0)!=(0|0);
 $1 = ($module_name|0)!=(0|0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($library)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (((($library)) + 20|0) + ($3<<2)|0);
 $5 = ($3|0)>(0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($library)) + 20|0);
 $cur$02 = $6;
 while(1) {
  $9 = HEAP32[$cur$02>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_strcmp($12,$module_name)|0);
  $14 = ($13|0)==(0);
  $8 = ((($cur$02)) + 4|0);
  if ($14) {
   $$0 = $9;
   label = 6;
   break;
  }
  $7 = ($8>>>0)<($4>>>0);
  if ($7) {
   $cur$02 = $8;
  } else {
   $$0 = 0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function _open_face_PS_from_sfnt_stream($library,$stream,$face_index,$num_params,$params,$aface) {
 $library = $library|0;
 $stream = $stream|0;
 $face_index = $face_index|0;
 $num_params = $num_params|0;
 $params = $params|0;
 $aface = $aface|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $is_sfnt_cid = 0, $length = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 8|0;
 $offset = sp + 4|0;
 $length = sp;
 $is_sfnt_cid = sp + 12|0;
 $0 = HEAP32[$library>>2]|0;
 $1 = (_FT_Stream_Pos($stream)|0);
 $2 = (_ft_lookup_PS_in_sfnt_stream($stream,$face_index,$offset,$length,$is_sfnt_cid)|0);
 HEAP32[$error>>2] = $2;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $4 = HEAP32[$offset>>2]|0;
   $5 = (($4) + ($1))|0;
   $6 = (_FT_Stream_Seek($stream,$5)|0);
   $7 = ($6|0)==(0);
   if (!($7)) {
    $$pr = HEAP32[$error>>2]|0;
    $23 = $$pr;
    break;
   }
   $8 = HEAP32[$length>>2]|0;
   $9 = (_ft_mem_alloc($0,$8,$error)|0);
   $10 = HEAP32[$error>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = HEAP32[$length>>2]|0;
    $13 = (_FT_Stream_Read($stream,$9,$12)|0);
    HEAP32[$error>>2] = $13;
    $14 = ($13|0)==(0);
    if ($14) {
     $15 = HEAP32[$length>>2]|0;
     $16 = ($face_index|0)<(0);
     $17 = $16 ? $face_index : 0;
     $18 = HEAP8[$is_sfnt_cid>>0]|0;
     $19 = ($18<<24>>24)!=(0);
     $20 = $19 ? 25092 : 88618;
     $21 = (_open_face_from_buffer($library,$9,$15,$17,$20,$aface)|0);
     HEAP32[$error>>2] = $21;
     $23 = $21;
    } else {
     $23 = $13;
    }
   } else {
    $23 = $10;
   }
  } else {
   $23 = $2;
  }
 } while(0);
 $22 = ($23|0)==(2);
 if ($22) {
  $24 = (_FT_Stream_Seek($stream,$1)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   $$0 = $24;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $26 = HEAP32[$error>>2]|0;
 $$0 = $26;
 STACKTOP = sp;return ($$0|0);
}
function _FT_New_Size($face,$asize) {
 $face = $face|0;
 $asize = $asize|0;
 var $$0 = 0, $$pr = 0, $$pr2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $node$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $$0 = 35;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($asize|0)==(0|0);
 if ($1) {
  $$0 = 36;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($face)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 34;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$asize>>2] = 0;
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($face)) + 100|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($7)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_ft_mem_alloc($9,$11,$error)|0);
 $13 = HEAP32[$error>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = (_ft_mem_alloc($9,12,$error)|0);
  $16 = HEAP32[$error>>2]|0;
  $17 = ($16|0)==(0);
  if ($17) {
   HEAP32[$12>>2] = $face;
   $18 = ((($12)) + 40|0);
   HEAP32[$18>>2] = 0;
   $19 = ((($7)) + 56|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $$pr = HEAP32[$error>>2]|0;
    $24 = $$pr;
   } else {
    $22 = (FUNCTION_TABLE_ii[$20 & 63]($12)|0);
    HEAP32[$error>>2] = $22;
    $24 = $22;
   }
   $23 = ($24|0)==(0);
   if ($23) {
    HEAP32[$asize>>2] = $12;
    $25 = ((($15)) + 8|0);
    HEAP32[$25>>2] = $12;
    $26 = ((($face)) + 108|0);
    _FT_List_Add($26,$15);
   }
   $$pr2 = HEAP32[$error>>2]|0;
   $27 = ($$pr2|0)==(0);
   if (!($27)) {
    $node$03 = $15;
    label = 12;
   }
  } else {
   $node$03 = $15;
   label = 12;
  }
 } else {
  $node$03 = 0;
  label = 12;
 }
 if ((label|0) == 12) {
  _ft_mem_free($9,$node$03);
  _ft_mem_free($9,$12);
 }
 $28 = HEAP32[$error>>2]|0;
 $$0 = $28;
 STACKTOP = sp;return ($$0|0);
}
function _FT_Done_Face($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $error$0 = 35;
  return ($error$0|0);
 }
 $1 = ((($face)) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $error$0 = 35;
  return ($error$0|0);
 }
 $4 = ((($face)) + 128|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = ((($9)) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($13)) + 16|0);
 $17 = (_FT_List_Find($16,$face)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $error$0 = 35;
  return ($error$0|0);
 }
 _FT_List_Remove($16,$17);
 _ft_mem_free($15,$17);
 _destroy_face($15,$face,$13);
 $error$0 = 0;
 return ($error$0|0);
}
function _FT_Done_Size($size) {
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0|0);
 if ($0) {
  $$0 = 36;
  return ($$0|0);
 }
 $1 = HEAP32[$size>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 35;
  return ($$0|0);
 }
 $3 = ((($1)) + 96|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 34;
  return ($$0|0);
 }
 $6 = ((($4)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 108|0);
 $9 = (_FT_List_Find($8,$size)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 36;
  return ($$0|0);
 }
 _FT_List_Remove($8,$9);
 _ft_mem_free($7,$9);
 $11 = ((($1)) + 88|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($size|0);
 if ($13) {
  HEAP32[$11>>2] = 0;
  $14 = HEAP32[$8>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $16 = ((($14)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$11>>2] = $17;
  }
 }
 _destroy_size($7,$size,$4);
 $$0 = 0;
 return ($$0|0);
}
function _FT_Match_Size($face,$req,$ignore_width,$size_index) {
 $face = $face|0;
 $req = $req|0;
 $ignore_width = $ignore_width|0;
 $size_index = $size_index|0;
 var $$ = 0, $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$0 = 0, $i$02 = 0, $i$02$lcssa = 0, $or$cond = 0;
 var $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 2;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 35;
  return ($$0|0);
 }
 $4 = HEAP32[$req>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = 7;
  return ($$0|0);
 }
 $6 = ((($req)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 $9 = ((($req)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 if ($8) {
  $29 = $10;
 } else {
  $11 = Math_imul($10, $7)|0;
  $12 = (($11) + 36)|0;
  $13 = (($12|0) / 72)&-1;
  $29 = $13;
 }
 $14 = ((($req)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 $17 = ((($req)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 if ($16) {
  $30 = $18;
 } else {
  $19 = Math_imul($18, $15)|0;
  $20 = (($19) + 36)|0;
  $21 = (($20|0) / 72)&-1;
  $30 = $21;
 }
 $22 = HEAP32[$9>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  label = 10;
 } else {
  $24 = HEAP32[$17>>2]|0;
  $25 = ($24|0)==(0);
  if ($25) {
   $h$0 = $29;$w$0 = $29;
  } else {
   $$pr = HEAP32[$9>>2]|0;
   $26 = ($$pr|0)==(0);
   if ($26) {
    label = 10;
   } else {
    $h$0 = $30;$w$0 = $29;
   }
  }
 }
 if ((label|0) == 10) {
  $27 = HEAP32[$17>>2]|0;
  $28 = ($27|0)==(0);
  $$ = $28 ? $29 : $30;
  $h$0 = $30;$w$0 = $$;
 }
 $31 = (($w$0) + 32)|0;
 $32 = (($h$0) + 32)|0;
 $33 = ((($face)) + 28|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)>(0);
 if (!($35)) {
  $$0 = 23;
  return ($$0|0);
 }
 $36 = ((($face)) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($ignore_width<<24>>24)==(0);
 $i$02 = 0;
 while(1) {
  $39 = (((($37) + ($i$02<<4)|0)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 32)|0;
  $42 = $41 ^ $32;
  $43 = ($42>>>0)>(63);
  if (!($43)) {
   $44 = (((($37) + ($i$02<<4)|0)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 32)|0;
   $47 = $46 ^ $31;
   $48 = ($47>>>0)>(63);
   $or$cond = $38 & $48;
   if (!($or$cond)) {
    $i$02$lcssa = $i$02;
    break;
   }
  }
  $50 = (($i$02) + 1)|0;
  $51 = HEAP32[$33>>2]|0;
  $52 = ($50|0)<($51|0);
  if ($52) {
   $i$02 = $50;
  } else {
   $$0 = 23;
   label = 18;
   break;
  }
 }
 if ((label|0) == 18) {
  return ($$0|0);
 }
 $49 = ($size_index|0)==(0|0);
 if ($49) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$size_index>>2] = $i$02$lcssa;
 $$0 = 0;
 return ($$0|0);
}
function _ft_synthesize_vertical_metrics($metrics,$advance) {
 $metrics = $metrics|0;
 $advance = $advance|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $height$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($metrics)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($metrics)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = ($1|0)<($3|0);
  $$ = $5 ? $3 : $1;
  $height$0 = $$;
 } else {
  $6 = ($3|0)>(0);
  $7 = $6 ? $3 : 0;
  $$1 = (($1) - ($7))|0;
  $height$0 = $$1;
 }
 $8 = ($advance|0)==(0);
 $9 = ($height$0*12)|0;
 $10 = (($9|0) / 10)&-1;
 $$0 = $8 ? $10 : $advance;
 $11 = ((($metrics)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($metrics)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14|0) / 2)&-1;
 $16 = (($12) - ($15))|0;
 $17 = ((($metrics)) + 20|0);
 HEAP32[$17>>2] = $16;
 $18 = (($$0) - ($height$0))|0;
 $19 = (($18|0) / 2)&-1;
 $20 = ((($metrics)) + 24|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($metrics)) + 28|0);
 HEAP32[$21>>2] = $$0;
 return;
}
function _FT_Select_Metrics($face,$strike_index) {
 $face = $face|0;
 $strike_index = $strike_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 88|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = ((($face)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (((($4) + ($strike_index<<4)|0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 32)|0;
 $8 = $7 >>> 6;
 $9 = $8&65535;
 HEAP16[$2>>1] = $9;
 $10 = (((($4) + ($strike_index<<4)|0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 32)|0;
 $13 = $12 >>> 6;
 $14 = $13&65535;
 $15 = ((($1)) + 14|0);
 HEAP16[$15>>1] = $14;
 $16 = ((($face)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 1;
 $19 = ($18|0)==(0);
 if ($19) {
  $31 = ((($1)) + 16|0);
  HEAP32[$31>>2] = 65536;
  $32 = ((($1)) + 20|0);
  HEAP32[$32>>2] = 65536;
  $33 = HEAP32[$10>>2]|0;
  $34 = ((($1)) + 24|0);
  HEAP32[$34>>2] = $33;
  $35 = ((($1)) + 28|0);
  HEAP32[$35>>2] = 0;
  $36 = (($4) + ($strike_index<<4)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37 << 16 >> 16;
  $39 = $38 << 6;
  $40 = ((($1)) + 32|0);
  HEAP32[$40>>2] = $39;
  $41 = HEAP32[$5>>2]|0;
  $42 = ((($1)) + 36|0);
  HEAP32[$42>>2] = $41;
  return;
 } else {
  $20 = HEAP32[$5>>2]|0;
  $21 = ((($face)) + 68|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22&65535;
  $24 = (_FT_DivFix($20,$23)|0);
  $25 = ((($1)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = HEAP32[$10>>2]|0;
  $27 = HEAP16[$21>>1]|0;
  $28 = $27&65535;
  $29 = (_FT_DivFix($26,$28)|0);
  $30 = ((($1)) + 20|0);
  HEAP32[$30>>2] = $29;
  _ft_recompute_scaled_metrics($face,$2);
  return;
 }
}
function _FT_Request_Metrics($face,$req) {
 $face = $face|0;
 $req = $req|0;
 var $$pr = 0, $$w$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h$0 = 0, $h$1 = 0, $scaled_h$0 = 0, $scaled_h$0$ph = 0, $scaled_h$1 = 0, $scaled_w$0 = 0, $scaled_w$0$ph = 0, $scaled_w$1 = 0, $w$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 88|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = ((($face)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;
  $107 = ((($1)) + 16|0);
  HEAP32[$107>>2] = 65536;
  $108 = ((($1)) + 20|0);
  HEAP32[$108>>2] = 65536;
  return;
 }
 $7 = HEAP32[$req>>2]|0;
 L5: do {
  switch ($7|0) {
  case 0:  {
   $8 = ((($face)) + 68|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9&65535;
   $h$0 = $10;$w$0 = $10;
   label = 11;
   break;
  }
  case 1:  {
   $11 = ((($face)) + 70|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $12 << 16 >> 16;
   $14 = ((($face)) + 72|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = $15 << 16 >> 16;
   $17 = (($13) - ($16))|0;
   $h$0 = $17;$w$0 = $17;
   label = 11;
   break;
  }
  case 2:  {
   $18 = ((($face)) + 60|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($face)) + 52|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($19) - ($21))|0;
   $23 = ((($face)) + 64|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($face)) + 56|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) - ($26))|0;
   $h$0 = $27;$w$0 = $22;
   label = 11;
   break;
  }
  case 3:  {
   $28 = ((($face)) + 76|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29 << 16 >> 16;
   $31 = ((($face)) + 70|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $32 << 16 >> 16;
   $34 = ((($face)) + 72|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35 << 16 >> 16;
   $37 = (($33) - ($36))|0;
   $h$0 = $37;$w$0 = $30;
   label = 11;
   break;
  }
  case 4:  {
   $38 = ((($req)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($1)) + 16|0);
   HEAP32[$40>>2] = $39;
   $41 = ((($req)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($1)) + 20|0);
   HEAP32[$43>>2] = $42;
   $44 = HEAP32[$40>>2]|0;
   $45 = ($44|0)==(0);
   if ($45) {
    HEAP32[$40>>2] = $42;
    $scaled_h$0$ph = 0;$scaled_w$0$ph = 0;
    label = 23;
    break L5;
   }
   $46 = ($42|0)==(0);
   if ($46) {
    HEAP32[$43>>2] = $44;
    $scaled_h$0$ph = 0;$scaled_w$0$ph = 0;
    label = 23;
   } else {
    $scaled_h$0$ph = 0;$scaled_w$0$ph = 0;
    label = 23;
   }
   break;
  }
  default: {
   $h$0 = 0;$w$0 = 0;
   label = 11;
  }
  }
 } while(0);
 do {
  if ((label|0) == 11) {
   $47 = ($w$0|0)<(0);
   $48 = (0 - ($w$0))|0;
   $$w$0 = $47 ? $48 : $w$0;
   $49 = ($h$0|0)<(0);
   $50 = (0 - ($h$0))|0;
   $h$1 = $49 ? $50 : $h$0;
   $51 = ((($req)) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)==(0);
   $54 = ((($req)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   if ($53) {
    $69 = $55;
   } else {
    $56 = Math_imul($55, $52)|0;
    $57 = (($56) + 36)|0;
    $58 = (($57|0) / 72)&-1;
    $69 = $58;
   }
   $59 = ((($req)) + 16|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==(0);
   $62 = ((($req)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   if ($61) {
    $74 = $63;
   } else {
    $64 = Math_imul($63, $60)|0;
    $65 = (($64) + 36)|0;
    $66 = (($65|0) / 72)&-1;
    $74 = $66;
   }
   $67 = HEAP32[$54>>2]|0;
   $68 = ($67|0)==(0);
   if ($68) {
    $83 = (_FT_DivFix($74,$h$1)|0);
    $84 = ((($1)) + 20|0);
    HEAP32[$84>>2] = $83;
    $85 = ((($1)) + 16|0);
    HEAP32[$85>>2] = $83;
    $86 = (_FT_MulDiv($74,$$w$0,$h$1)|0);
    $scaled_h$0$ph = $74;$scaled_w$0$ph = $86;
    label = 23;
    break;
   }
   $70 = (_FT_DivFix($69,$$w$0)|0);
   $71 = ((($1)) + 16|0);
   HEAP32[$71>>2] = $70;
   $72 = HEAP32[$62>>2]|0;
   $73 = ($72|0)==(0);
   if ($73) {
    $81 = ((($1)) + 20|0);
    HEAP32[$81>>2] = $70;
    $82 = (_FT_MulDiv($69,$h$1,$$w$0)|0);
    $scaled_h$0$ph = $82;$scaled_w$0$ph = $69;
    label = 23;
    break;
   }
   $75 = (_FT_DivFix($74,$h$1)|0);
   $76 = ((($1)) + 20|0);
   HEAP32[$76>>2] = $75;
   $77 = HEAP32[$req>>2]|0;
   $78 = ($77|0)==(3);
   if ($78) {
    $79 = HEAP32[$71>>2]|0;
    $80 = ($75|0)>($79|0);
    if ($80) {
     HEAP32[$76>>2] = $79;
     $scaled_h$0$ph = $74;$scaled_w$0$ph = $69;
     label = 23;
     break;
    } else {
     HEAP32[$71>>2] = $75;
     $scaled_h$0$ph = $74;$scaled_w$0$ph = $69;
     label = 23;
     break;
    }
   } else {
    $88 = $77;$scaled_h$0 = $74;$scaled_w$0 = $69;
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $$pr = HEAP32[$req>>2]|0;
  $88 = $$pr;$scaled_h$0 = $scaled_h$0$ph;$scaled_w$0 = $scaled_w$0$ph;
 }
 $87 = ($88|0)==(0);
 if ($87) {
  $scaled_h$1 = $scaled_h$0;$scaled_w$1 = $scaled_w$0;
 } else {
  $89 = ((($face)) + 68|0);
  $90 = HEAP16[$89>>1]|0;
  $91 = $90&65535;
  $92 = ((($1)) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (_FT_MulFix($91,$93)|0);
  $95 = HEAP16[$89>>1]|0;
  $96 = $95&65535;
  $97 = ((($1)) + 20|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (_FT_MulFix($96,$98)|0);
  $scaled_h$1 = $99;$scaled_w$1 = $94;
 }
 $100 = (($scaled_w$1) + 32)|0;
 $101 = $100 >>> 6;
 $102 = $101&65535;
 HEAP16[$2>>1] = $102;
 $103 = (($scaled_h$1) + 32)|0;
 $104 = $103 >>> 6;
 $105 = $104&65535;
 $106 = ((($1)) + 14|0);
 HEAP16[$106>>1] = $105;
 _ft_recompute_scaled_metrics($face,$2);
 return;
}
function _FT_Select_Size($face,$strike_index) {
 $face = $face|0;
 $strike_index = $strike_index|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $$0 = 35;
  return ($$0|0);
 }
 $1 = ((($face)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 2;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 35;
  return ($$0|0);
 }
 $5 = ($strike_index|0)<(0);
 if ($5) {
  $$0 = 6;
  return ($$0|0);
 }
 $6 = ((($face)) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>($strike_index|0);
 if (!($8)) {
  $$0 = 6;
  return ($$0|0);
 }
 $9 = ((($face)) + 96|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 100|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  _FT_Select_Metrics($face,$strike_index);
  $$0 = 0;
  return ($$0|0);
 } else {
  $16 = ((($face)) + 88|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (FUNCTION_TABLE_iii[$14 & 255]($17,$strike_index)|0);
  $$0 = $18;
  return ($$0|0);
 }
 return (0)|0;
}
function _FT_Request_Size($face,$req) {
 $face = $face|0;
 $req = $req|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $strike_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $strike_index = sp;
 $0 = ($face|0)==(0|0);
 do {
  if ($0) {
   $$0 = 35;
  } else {
   $1 = ($req|0)==(0|0);
   if ($1) {
    $$0 = 6;
   } else {
    $2 = ((($req)) + 4|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = ($3|0)<(0);
    if ($4) {
     $$0 = 6;
    } else {
     $5 = ((($req)) + 8|0);
     $6 = HEAP32[$5>>2]|0;
     $7 = ($6|0)<(0);
     if ($7) {
      $$0 = 6;
     } else {
      $8 = HEAP32[$req>>2]|0;
      $9 = ($8>>>0)>(4);
      if ($9) {
       $$0 = 6;
      } else {
       $10 = ((($face)) + 96|0);
       $11 = HEAP32[$10>>2]|0;
       $12 = ((($11)) + 12|0);
       $13 = HEAP32[$12>>2]|0;
       $14 = ((($13)) + 96|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = ($15|0)==(0|0);
       if (!($16)) {
        $17 = ((($face)) + 88|0);
        $18 = HEAP32[$17>>2]|0;
        $19 = (FUNCTION_TABLE_iii[$15 & 255]($18,$req)|0);
        $$0 = $19;
        break;
       }
       $20 = ((($face)) + 8|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = $21 & 3;
       $23 = ($22|0)==(2);
       if (!($23)) {
        _FT_Request_Metrics($face,$req);
        $$0 = 0;
        break;
       }
       $24 = (_FT_Match_Size($face,$req,0,$strike_index)|0);
       $25 = ($24|0)==(0);
       if ($25) {
        $26 = HEAP32[$strike_index>>2]|0;
        $27 = (_FT_Select_Size($face,$26)|0);
        $$0 = $27;
       } else {
        $$0 = $24;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _FT_Set_Char_Size($face,$char_width,$char_height,$horz_resolution,$vert_resolution) {
 $face = $face|0;
 $char_width = $char_width|0;
 $char_height = $char_height|0;
 $horz_resolution = $horz_resolution|0;
 $vert_resolution = $vert_resolution|0;
 var $$$0 = 0, $$$01 = 0, $$$05 = 0, $$0 = 0, $$01 = 0, $$03 = 0, $$05 = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $char_width$char_height = 0, $horz_resolution$vert_resolution = 0, $req = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $req = sp;
 $0 = ($char_width|0)==(0);
 $1 = ($char_height|0)==(0);
 $char_width$char_height = $1 ? $char_width : $char_height;
 $$05 = $0 ? $char_height : $char_width;
 $$03 = $0 ? $char_height : $char_width$char_height;
 $2 = ($horz_resolution|0)==(0);
 $3 = ($vert_resolution|0)==(0);
 $horz_resolution$vert_resolution = $3 ? $horz_resolution : $vert_resolution;
 $$01 = $2 ? $vert_resolution : $horz_resolution;
 $$0 = $2 ? $vert_resolution : $horz_resolution$vert_resolution;
 $4 = ($$05|0)<(64);
 $$$05 = $4 ? 64 : $$05;
 $5 = ($$03|0)<(64);
 $$14 = $5 ? 64 : $$03;
 $6 = ($$01|0)==(0);
 $$$01 = $6 ? 72 : $$01;
 $$$0 = $6 ? 72 : $$0;
 HEAP32[$req>>2] = 0;
 $7 = ((($req)) + 4|0);
 HEAP32[$7>>2] = $$$05;
 $8 = ((($req)) + 8|0);
 HEAP32[$8>>2] = $$14;
 $9 = ((($req)) + 12|0);
 HEAP32[$9>>2] = $$$01;
 $10 = ((($req)) + 16|0);
 HEAP32[$10>>2] = $$$0;
 $11 = (_FT_Request_Size($face,$req)|0);
 STACKTOP = sp;return ($11|0);
}
function _FT_Select_Charmap($face,$encoding) {
 $face = $face|0;
 $encoding = $encoding|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cur$01 = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $$0 = 35;
  return ($$0|0);
 }
 $switch$split2D = ($encoding|0)<(1970170211);
 L4: do {
  if ($switch$split2D) {
   switch ($encoding|0) {
   case 0:  {
    $$0 = 6;
    break;
   }
   default: {
    break L4;
   }
   }
   return ($$0|0);
  } else {
   switch ($encoding|0) {
   case 1970170211:  {
    break;
   }
   default: {
    break L4;
   }
   }
   $1 = (_find_unicode_charmap($face)|0);
   $$0 = $1;
   return ($$0|0);
  }
 } while(0);
 $2 = ((($face)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 38;
  return ($$0|0);
 }
 $5 = ((($face)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) + ($6<<2)|0);
 $8 = ($6|0)>(0);
 if ($8) {
  $cur$01 = $3;
 } else {
  $$0 = 6;
  return ($$0|0);
 }
 while(1) {
  $9 = HEAP32[$cur$01>>2]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==($encoding|0);
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = $cur$01;
   $15 = $13;
   $16 = (($14) - ($15))|0;
   $17 = ($16|0)>(60);
   if (!($17)) {
    $$lcssa = $9;
    break;
   }
  }
  $19 = ((($cur$01)) + 4|0);
  $20 = ($19>>>0)<($7>>>0);
  if ($20) {
   $cur$01 = $19;
  } else {
   $$0 = 6;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 $18 = ((($face)) + 92|0);
 HEAP32[$18>>2] = $$lcssa;
 $$0 = 0;
 return ($$0|0);
}
function _FT_Set_Charmap($face,$charmap) {
 $face = $face|0;
 $charmap = $charmap|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cur$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $$0 = 35;
  return ($$0|0);
 }
 $1 = ((($face)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 38;
  return ($$0|0);
 }
 $4 = (_FT_Get_CMap_Format($charmap)|0);
 $5 = ($4|0)==(14);
 if ($5) {
  $$0 = 6;
  return ($$0|0);
 }
 $6 = ((($face)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($2) + ($7<<2)|0);
 $9 = ($7|0)>(0);
 if ($9) {
  $cur$01 = $2;
 } else {
  $$0 = 6;
  return ($$0|0);
 }
 while(1) {
  $10 = HEAP32[$cur$01>>2]|0;
  $11 = ($10|0)==($charmap|0);
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = $cur$01;
   $14 = $12;
   $15 = (($13) - ($14))|0;
   $16 = ($15|0)>(60);
   if (!($16)) {
    $$lcssa = $10;
    break;
   }
  }
  $18 = ((($cur$01)) + 4|0);
  $19 = ($18>>>0)<($8>>>0);
  if ($19) {
   $cur$01 = $18;
  } else {
   $$0 = 6;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($$0|0);
 }
 $17 = ((($face)) + 92|0);
 HEAP32[$17>>2] = $$lcssa;
 $$0 = 0;
 return ($$0|0);
}
function _FT_Get_CMap_Format($charmap) {
 $charmap = $charmap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmap_info = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cmap_info = sp;
 $0 = ($charmap|0)==(0|0);
 if ($0) {
  $$0 = -1;
 } else {
  $1 = HEAP32[$charmap>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = -1;
  } else {
   $3 = ((($1)) + 96|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($5)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (FUNCTION_TABLE_iii[$7 & 255]($4,87921)|0);
    $10 = ($9|0)==(0|0);
    if ($10) {
     $$0 = -1;
    } else {
     $11 = HEAP32[$9>>2]|0;
     $12 = (FUNCTION_TABLE_iii[$11 & 255]($charmap,$cmap_info)|0);
     $13 = ($12|0)==(0);
     if ($13) {
      $14 = ((($cmap_info)) + 4|0);
      $15 = HEAP32[$14>>2]|0;
      $$0 = $15;
     } else {
      $$0 = -1;
     }
    }
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _FT_CMap_New($clazz,$init_data,$charmap,$acmap) {
 $clazz = $clazz|0;
 $init_data = $init_data|0;
 $charmap = $charmap|0;
 $acmap = $acmap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmap$0 = 0, $error = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ($clazz|0)==(0|0);
 $1 = ($charmap|0)==(0|0);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$charmap>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($2)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$clazz>>2]|0;
 $7 = (_ft_mem_alloc($5,$6,$error)|0);
 $8 = HEAP32[$error>>2]|0;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   ;HEAP32[$7>>2]=HEAP32[$charmap>>2]|0;HEAP32[$7+4>>2]=HEAP32[$charmap+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$charmap+8>>2]|0;
   $10 = ((($7)) + 12|0);
   HEAP32[$10>>2] = $clazz;
   $11 = ((($clazz)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    label = 6;
   } else {
    $14 = (FUNCTION_TABLE_iii[$12 & 255]($7,$init_data)|0);
    HEAP32[$error>>2] = $14;
    $15 = ($14|0)==(0);
    if ($15) {
     label = 6;
    }
   }
   if ((label|0) == 6) {
    $16 = ((($2)) + 36|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 1)|0;
    $19 = ((($2)) + 40|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_ft_mem_realloc($5,4,$17,$18,$20,$error)|0);
    HEAP32[$19>>2] = $21;
    $22 = HEAP32[$error>>2]|0;
    $23 = ($22|0)==(0);
    if ($23) {
     $24 = HEAP32[$16>>2]|0;
     $25 = (($24) + 1)|0;
     HEAP32[$16>>2] = $25;
     $26 = HEAP32[$19>>2]|0;
     $27 = (($26) + ($24<<2)|0);
     HEAP32[$27>>2] = $7;
     $cmap$0 = $7;
     break;
    }
   }
   _ft_cmap_done_internal($7);
   $cmap$0 = 0;
  } else {
   $cmap$0 = $7;
  }
 } while(0);
 $28 = ($acmap|0)==(0|0);
 if (!($28)) {
  HEAP32[$acmap>>2] = $cmap$0;
 }
 $29 = HEAP32[$error>>2]|0;
 $$0 = $29;
 STACKTOP = sp;return ($$0|0);
}
function _FT_Get_Next_Char($face,$charcode,$agindex) {
 $face = $face|0;
 $charcode = $charcode|0;
 $agindex = $agindex|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $code = 0, $gindex$0 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $code = sp;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $gindex$0 = 0;$result$0 = 0;
 } else {
  $1 = ((($face)) + 92|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   $gindex$0 = 0;$result$0 = 0;
  } else {
   $4 = ((($face)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    $gindex$0 = 0;$result$0 = 0;
   } else {
    HEAP32[$code>>2] = $charcode;
    $7 = HEAP32[$1>>2]|0;
    $8 = ((($7)) + 12|0);
    while(1) {
     $9 = HEAP32[$8>>2]|0;
     $10 = ((($9)) + 16|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (FUNCTION_TABLE_iii[$11 & 255]($7,$code)|0);
     $13 = HEAP32[$4>>2]|0;
     $14 = ($12>>>0)<($13>>>0);
     if ($14) {
      $$lcssa = $12;
      break;
     }
    }
    $15 = ($$lcssa|0)==(0);
    $16 = HEAP32[$code>>2]|0;
    $17 = $15 ? 0 : $16;
    $gindex$0 = $$lcssa;$result$0 = $17;
   }
  }
 }
 $18 = ($agindex|0)==(0|0);
 if ($18) {
  STACKTOP = sp;return ($result$0|0);
 }
 HEAP32[$agindex>>2] = $gindex$0;
 STACKTOP = sp;return ($result$0|0);
}
function _FT_Get_Glyph_Name($face,$glyph_index,$buffer,$buffer_max) {
 $face = $face|0;
 $glyph_index = $glyph_index|0;
 $buffer = $buffer|0;
 $buffer_max = $buffer_max|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $magicptr = 0, $or$cond = 0, $svc$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($buffer|0)!=(0|0);
 $1 = ($buffer_max|0)!=(0);
 $or$cond = $0 & $1;
 if ($or$cond) {
  HEAP8[$buffer>>0] = 0;
 }
 $2 = ($face|0)==(0|0);
 if ($2) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $3 = ((($face)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<($glyph_index|0);
 if ($5) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $6 = ((($face)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 512;
 $9 = ($8|0)==(0);
 if ($9) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $10 = ((($face)) + 128|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $magicptr = $13;
 switch ($magicptr|0) {
 case 0:  {
  label = 7;
  break;
 }
 case -2:  {
  $error$0 = 6;
  return ($error$0|0);
  break;
 }
 default: {
  $svc$03 = $13;
 }
 }
 do {
  if ((label|0) == 7) {
   $14 = ((($face)) + 96|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($16)) + 32|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0|0);
   if ($19) {
    $20 = HEAP32[$10>>2]|0;
    $21 = ((($20)) + 40|0);
    HEAP32[$21>>2] = (-2);
    $error$0 = 6;
    return ($error$0|0);
   } else {
    $22 = (FUNCTION_TABLE_iii[$18 & 255]($15,89265)|0);
    $23 = ($22|0)!=(0|0);
    $24 = $23 ? $22 : (-2);
    $25 = HEAP32[$10>>2]|0;
    $26 = ((($25)) + 40|0);
    HEAP32[$26>>2] = $24;
    $27 = ($22|0)==(0|0);
    if ($27) {
     $error$0 = 6;
    } else {
     $svc$03 = $22;
     break;
    }
    return ($error$0|0);
   }
  }
 } while(0);
 $28 = HEAP32[$svc$03>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $30 = (FUNCTION_TABLE_iiiii[$28 & 63]($face,$glyph_index,$buffer,$buffer_max)|0);
 $error$0 = $30;
 return ($error$0|0);
}
function _FT_Activate_Size($size) {
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0|0);
 if ($0) {
  $$0 = 6;
 } else {
  $1 = HEAP32[$size>>2]|0;
  $2 = ($1|0)==(0|0);
  if ($2) {
   $$0 = 6;
  } else {
   $3 = ((($1)) + 96|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0|0);
   if ($5) {
    $$0 = 6;
   } else {
    $6 = ((($1)) + 88|0);
    HEAP32[$6>>2] = $size;
    $$0 = 0;
   }
  }
 }
 return ($$0|0);
}
function _FT_Lookup_Renderer($library,$format,$node) {
 $library = $library|0;
 $format = $format|0;
 $node = $node|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur$0 = 0, $cur$1$ph = 0;
 var $cur$12 = 0, $cur$12$lcssa = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($library|0)==(0|0);
 if ($0) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $1 = ((($library)) + 148|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($node|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$node>>2]|0;
  $5 = ($4|0)==(0|0);
  if ($5) {
   $cur$0 = $2;
  } else {
   $6 = ((($4)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $cur$0 = $7;
  }
  HEAP32[$node>>2] = 0;
  $cur$1$ph = $cur$0;
 } else {
  $cur$1$ph = $2;
 }
 $8 = ($cur$1$ph|0)==(0|0);
 if ($8) {
  $result$0 = 0;
  return ($result$0|0);
 } else {
  $cur$12 = $cur$1$ph;
 }
 while(1) {
  $9 = ((($cur$12)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($format|0);
  if ($13) {
   $$lcssa = $10;$cur$12$lcssa = $cur$12;
   break;
  }
  $14 = ((($cur$12)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $result$0 = 0;
   label = 11;
   break;
  } else {
   $cur$12 = $15;
  }
 }
 if ((label|0) == 11) {
  return ($result$0|0);
 }
 if (!($3)) {
  $result$0 = $$lcssa;
  return ($result$0|0);
 }
 HEAP32[$node>>2] = $cur$12$lcssa;
 $result$0 = $$lcssa;
 return ($result$0|0);
}
function _FT_Set_Renderer($library,$renderer,$num_params,$parameters) {
 $library = $library|0;
 $renderer = $renderer|0;
 $num_params = $num_params|0;
 $parameters = $parameters|0;
 var $$0 = 0, $$014 = 0, $$023 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($library|0)==(0|0);
 if ($0) {
  $$0 = 33;
  return ($$0|0);
 }
 $1 = ($renderer|0)==(0|0);
 if ($1) {
  $$0 = 6;
  return ($$0|0);
 }
 $2 = ((($library)) + 148|0);
 $3 = (_FT_List_Find($2,$renderer)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 6;
  return ($$0|0);
 }
 _FT_List_Up($2,$3);
 $5 = ((($renderer)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(1869968492);
 if ($7) {
  $8 = ((($library)) + 156|0);
  HEAP32[$8>>2] = $renderer;
 }
 $9 = ($num_params|0)==(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ((($renderer)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $$014 = $num_params;$$023 = $parameters;
 while(1) {
  $14 = HEAP32[$$023>>2]|0;
  $15 = ((($$023)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiii[$13 & 127]($renderer,$14,$16)|0);
  $18 = ($17|0)==(0);
  if (!($18)) {
   $$0 = $17;
   label = 10;
   break;
  }
  $19 = ((($$023)) + 8|0);
  $20 = (($$014) + -1)|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $$0 = 0;
   label = 10;
   break;
  } else {
   $$014 = $20;$$023 = $19;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 return (0)|0;
}
function _FT_Render_Glyph_Internal($library,$slot,$render_mode) {
 $library = $library|0;
 $slot = $slot|0;
 $render_mode = $render_mode|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cond = 0, $error$2 = 0, $node = 0, $or$cond3 = 0, $or$cond4 = 0, $renderer$1$ph = 0, $renderer$111 = 0, $renderer$111$lcssa = 0, $update$012 = 0, $update$012$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $node = sp;
 $0 = ((($slot)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $cond = ($1|0)==(1651078259);
 if ($cond) {
  $error$2 = 0;
  STACKTOP = sp;return ($error$2|0);
 }
 HEAP32[$node>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(1869968492);
 if ($3) {
  $4 = ((($library)) + 156|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($library)) + 148|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$node>>2] = $7;
  $renderer$1$ph = $5;
 } else {
  $8 = (_FT_Lookup_Renderer($library,$2,$node)|0);
  $renderer$1$ph = $8;
 }
 $9 = ($renderer$1$ph|0)==(0|0);
 if ($9) {
  $error$2 = 7;
  STACKTOP = sp;return ($error$2|0);
 } else {
  $renderer$111 = $renderer$1$ph;$update$012 = 0;
 }
 while(1) {
  $10 = ((($renderer$111)) + 60|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_iiiii[$11 & 63]($renderer$111,$slot,$render_mode,0)|0);
  $13 = ($12|0)!=(0);
  $14 = $12 & 255;
  $15 = ($14|0)==(19);
  $or$cond3 = $13 & $15;
  if (!($or$cond3)) {
   $$lcssa = $12;$renderer$111$lcssa = $renderer$111;$update$012$lcssa = $update$012;
   break;
  }
  $16 = HEAP32[$0>>2]|0;
  $17 = (_FT_Lookup_Renderer($library,$16,$node)|0);
  $18 = ($17|0)==(0|0);
  if ($18) {
   $error$2 = $12;
   label = 10;
   break;
  } else {
   $renderer$111 = $17;$update$012 = 1;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($error$2|0);
 }
 $19 = ($$lcssa|0)==(0);
 $20 = ($update$012$lcssa|0)!=(0);
 $or$cond4 = $20 & $19;
 if (!($or$cond4)) {
  $error$2 = $$lcssa;
  STACKTOP = sp;return ($error$2|0);
 }
 (_FT_Set_Renderer($library,$renderer$111$lcssa,0,0)|0);
 $error$2 = $$lcssa;
 STACKTOP = sp;return ($error$2|0);
}
function _FT_Add_Module($library,$clazz) {
 $library = $library|0;
 $clazz = $clazz|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $error = 0, $nn$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ($library|0)==(0|0);
 if ($0) {
  $$0 = 33;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($clazz|0)==(0|0);
 if ($1) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($clazz)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(131076);
 if ($4) {
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($library)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 L10: do {
  if (!($7)) {
   $8 = ((($clazz)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $nn$05 = 0;
   while(1) {
    $13 = (((($library)) + 20|0) + ($nn$05<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($15)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (_strcmp($17,$9)|0);
    $19 = ($18|0)==(0);
    $12 = (($nn$05) + 1)|0;
    if ($19) {
     $$lcssa = $14;$$lcssa19 = $15;
     break;
    }
    $10 = HEAP32[$5>>2]|0;
    $11 = ($12>>>0)<($10>>>0);
    if ($11) {
     $nn$05 = $12;
    } else {
     break L10;
    }
   }
   $20 = ((($clazz)) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($$lcssa19)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)>($23|0);
   if ($24) {
    (_FT_Remove_Module($library,$$lcssa)|0);
    break;
   } else {
    $$0 = 5;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $25 = HEAP32[$library>>2]|0;
 HEAP32[$error>>2] = 0;
 $26 = HEAP32[$5>>2]|0;
 $27 = ($26>>>0)>(31);
 L20: do {
  if ($27) {
   HEAP32[$error>>2] = 48;
  } else {
   $28 = ((($clazz)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (_ft_mem_alloc($25,$29,$error)|0);
   $31 = HEAP32[$error>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = ((($30)) + 4|0);
    HEAP32[$33>>2] = $library;
    $34 = ((($30)) + 8|0);
    HEAP32[$34>>2] = $25;
    HEAP32[$30>>2] = $clazz;
    $35 = HEAP32[$clazz>>2]|0;
    $36 = $35 & 2;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 15;
    } else {
     $38 = (_ft_add_renderer($30)|0);
     HEAP32[$error>>2] = $38;
     $39 = ($38|0)==(0);
     if ($39) {
      label = 15;
     }
    }
    do {
     if ((label|0) == 15) {
      $40 = HEAP32[$30>>2]|0;
      $41 = HEAP32[$40>>2]|0;
      $42 = $41 & 4;
      $43 = ($42|0)==(0);
      if (!($43)) {
       $44 = ((($library)) + 160|0);
       HEAP32[$44>>2] = $30;
      }
      $45 = HEAP32[$30>>2]|0;
      $46 = HEAP32[$45>>2]|0;
      $47 = $46 & 1;
      $48 = ($47|0)==(0);
      if (!($48)) {
       $49 = ((($30)) + 12|0);
       HEAP32[$49>>2] = $45;
       $50 = HEAP32[$30>>2]|0;
       $51 = HEAP32[$50>>2]|0;
       $52 = $51 & 512;
       $53 = ($52|0)==(0);
       if ($53) {
        $54 = ((($30)) + 24|0);
        $55 = (_FT_GlyphLoader_New($25,$54)|0);
        HEAP32[$error>>2] = $55;
        $56 = ($55|0)==(0);
        if (!($56)) {
         break;
        }
       }
      }
      $57 = ((($clazz)) + 24|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ($58|0)==(0|0);
      if (!($59)) {
       $60 = (FUNCTION_TABLE_ii[$58 & 63]($30)|0);
       HEAP32[$error>>2] = $60;
       $61 = ($60|0)==(0);
       if (!($61)) {
        break;
       }
      }
      $62 = HEAP32[$5>>2]|0;
      $63 = (($62) + 1)|0;
      HEAP32[$5>>2] = $63;
      $64 = (((($library)) + 20|0) + ($62<<2)|0);
      HEAP32[$64>>2] = $30;
      break L20;
     }
    } while(0);
    $66 = HEAP32[$30>>2]|0;
    $67 = HEAP32[$66>>2]|0;
    $68 = $67 & 513;
    $69 = ($68|0)==(1);
    if ($69) {
     $70 = ((($30)) + 24|0);
     $71 = HEAP32[$70>>2]|0;
     _FT_GlyphLoader_Done($71);
    }
    $72 = HEAP32[$30>>2]|0;
    $73 = HEAP32[$72>>2]|0;
    $74 = $73 & 2;
    $75 = ($74|0)==(0);
    if (!($75)) {
     $76 = ((($30)) + 12|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ((($77)) + 36|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==(1869968492);
     if ($80) {
      $81 = ((($30)) + 52|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($82|0)==(0|0);
      if (!($83)) {
       $84 = ((($77)) + 56|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = ((($85)) + 20|0);
       $87 = HEAP32[$86>>2]|0;
       FUNCTION_TABLE_vi[$87 & 127]($82);
      }
     }
    }
    _ft_mem_free($25,$30);
   }
  }
 } while(0);
 $65 = HEAP32[$error>>2]|0;
 $$0 = $65;
 STACKTOP = sp;return ($$0|0);
}
function _FT_Remove_Module($library,$module) {
 $library = $library|0;
 $module = $module|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cur$03 = 0, $cur$03$lcssa = 0, $cur$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($library|0)==(0|0);
 if ($0) {
  $$0 = 33;
  return ($$0|0);
 }
 $1 = ($module|0)==(0|0);
 if ($1) {
  $$0 = 34;
  return ($$0|0);
 }
 $2 = ((($library)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (((($library)) + 20|0) + ($3<<2)|0);
 $5 = ($3|0)>(0);
 if (!($5)) {
  $$0 = 34;
  return ($$0|0);
 }
 $6 = ((($library)) + 20|0);
 $cur$03 = $6;
 while(1) {
  $7 = HEAP32[$cur$03>>2]|0;
  $8 = ($7|0)==($module|0);
  if ($8) {
   $cur$03$lcssa = $cur$03;
   break;
  }
  $16 = ((($cur$03)) + 4|0);
  $17 = ($16>>>0)<($4>>>0);
  if ($17) {
   $cur$03 = $16;
  } else {
   $$0 = 34;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = (($9) + -1)|0;
 HEAP32[$2>>2] = $10;
 $$sum = (($3) + -1)|0;
 $11 = (((($library)) + 20|0) + ($$sum<<2)|0);
 $12 = ($cur$03$lcssa>>>0)<($11>>>0);
 if ($12) {
  $cur$12 = $cur$03$lcssa;
  while(1) {
   $13 = ((($cur$12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   HEAP32[$cur$12>>2] = $14;
   $15 = ($13>>>0)<($11>>>0);
   if ($15) {
    $cur$12 = $13;
   } else {
    break;
   }
  }
 }
 HEAP32[$11>>2] = 0;
 _Destroy_Module($module);
 $$0 = 0;
 return ($$0|0);
}
function _FT_Get_Module_Interface($library,$mod_name) {
 $library = $library|0;
 $mod_name = $mod_name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FT_Get_Module($library,$mod_name)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = 0;
  return ($5|0);
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 return ($5|0);
}
function _ft_module_get_service($module,$service_id) {
 $module = $module|0;
 $service_id = $service_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur$02 = 0, $result$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($module|0)==(0|0);
 if ($0) {
  $result$3 = 0;
  return ($result$3|0);
 }
 $1 = HEAP32[$module>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = (FUNCTION_TABLE_iii[$3 & 255]($module,$service_id)|0);
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $result$3 = $5;
   return ($result$3|0);
  }
 }
 $7 = ((($module)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (((($8)) + 20|0) + ($10<<2)|0);
 $12 = ($10|0)>(0);
 if (!($12)) {
  $result$3 = 0;
  return ($result$3|0);
 }
 $13 = ((($8)) + 20|0);
 $cur$02 = $13;
 while(1) {
  $14 = HEAP32[$cur$02>>2]|0;
  $15 = ($14|0)==($module|0);
  if (!($15)) {
   $16 = HEAP32[$14>>2]|0;
   $17 = ((($16)) + 32|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18|0)==(0|0);
   if (!($19)) {
    $20 = (FUNCTION_TABLE_iii[$18 & 255]($14,$service_id)|0);
    $21 = ($20|0)==(0|0);
    if (!($21)) {
     $result$3 = $20;
     label = 10;
     break;
    }
   }
  }
  $22 = ((($cur$02)) + 4|0);
  $23 = ($22>>>0)<($11>>>0);
  if ($23) {
   $cur$02 = $22;
  } else {
   $result$3 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  return ($result$3|0);
 }
 return (0)|0;
}
function _FT_New_Library($memory,$alibrary) {
 $memory = $memory|0;
 $alibrary = $alibrary|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ($memory|0)==(0|0);
 if ($0) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (_ft_mem_alloc($memory,192,$error)|0);
 $2 = HEAP32[$error>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$1>>2] = $memory;
 $4 = ((($1)) + 168|0);
 HEAP32[$4>>2] = 16384;
 $5 = (_ft_mem_alloc($memory,16384,$error)|0);
 $6 = ((($1)) + 164|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$error>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = ((($1)) + 4|0);
  HEAP32[$9>>2] = 2;
  $10 = ((($1)) + 8|0);
  HEAP32[$10>>2] = 4;
  $11 = ((($1)) + 12|0);
  HEAP32[$11>>2] = 10;
  $12 = ((($1)) + 188|0);
  HEAP32[$12>>2] = 1;
  HEAP32[$alibrary>>2] = $1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  _ft_mem_free($memory,$1);
  $13 = HEAP32[$error>>2]|0;
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _ft_stub_set_char_sizes($size,$width,$height,$horz_res,$vert_res) {
 $size = $size|0;
 $width = $width|0;
 $height = $height|0;
 $horz_res = $horz_res|0;
 $vert_res = $vert_res|0;
 var $$$01 = 0, $$0 = 0, $$01 = 0, $$vert_res$horz_res = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $req = 0, $vert_res$horz_res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $req = sp;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$req>>2] = 0;
 $8 = ((($req)) + 4|0);
 HEAP32[$8>>2] = $width;
 $9 = ((($req)) + 8|0);
 HEAP32[$9>>2] = $height;
 $10 = ($horz_res|0)==(0);
 $vert_res$horz_res = $10 ? $vert_res : $horz_res;
 $11 = ($vert_res|0)==(0);
 $$01 = $11 ? $vert_res$horz_res : $vert_res;
 $12 = ($vert_res$horz_res|0)==(0);
 $$vert_res$horz_res = $12 ? 72 : $vert_res$horz_res;
 $$$01 = $12 ? 72 : $$01;
 $13 = ((($req)) + 12|0);
 HEAP32[$13>>2] = $$vert_res$horz_res;
 $14 = ((($req)) + 16|0);
 HEAP32[$14>>2] = $$$01;
 $15 = HEAP32[$3>>2]|0;
 $16 = ((($15)) + 96|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (FUNCTION_TABLE_iii[$17 & 255]($size,$req)|0);
 $$0 = $18;
 STACKTOP = sp;return ($$0|0);
}
function _ft_stub_set_pixel_sizes($size,$width,$height) {
 $size = $size|0;
 $width = $width|0;
 $height = $height|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $req = sp;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$req>>2] = 0;
 $8 = $width << 6;
 $9 = ((($req)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $height << 6;
 $11 = ((($req)) + 8|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($req)) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($req)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[$3>>2]|0;
 $15 = ((($14)) + 96|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_iii[$16 & 255]($size,$req)|0);
 $$0 = $17;
 STACKTOP = sp;return ($$0|0);
}
function _ft_glyphslot_init($slot) {
 $slot = $slot|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($slot)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$error>>2] = 0;
 $8 = ((($3)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$slot>>2] = $9;
 $10 = (_ft_mem_alloc($7,40,$error)|0);
 $11 = HEAP32[$error>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = ((($slot)) + 156|0);
  HEAP32[$13>>2] = $10;
  $14 = HEAP32[$3>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 512;
  $17 = ($16|0)==(0);
  if ($17) {
   $18 = (_FT_GlyphLoader_New($7,$10)|0);
   HEAP32[$error>>2] = $18;
   $20 = $18;
  } else {
   $$pr = HEAP32[$error>>2]|0;
   $20 = $$pr;
  }
  $19 = ($20|0)==(0);
  if ($19) {
   $21 = ((($5)) + 64|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    $24 = (FUNCTION_TABLE_ii[$22 & 63]($slot)|0);
    HEAP32[$error>>2] = $24;
   }
  }
 }
 $25 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($25|0);
}
function _ft_glyphslot_done($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($slot)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 68|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  FUNCTION_TABLE_vi[$9 & 127]($slot);
 }
 _ft_glyphslot_free_bitmap($slot);
 $11 = ((($slot)) + 156|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  return;
 }
 $14 = HEAP32[$3>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 512;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = HEAP32[$12>>2]|0;
  _FT_GlyphLoader_Done($18);
  $19 = HEAP32[$11>>2]|0;
  HEAP32[$19>>2] = 0;
 }
 $20 = HEAP32[$11>>2]|0;
 _ft_mem_free($7,$20);
 HEAP32[$11>>2] = 0;
 return;
}
function _ft_glyphslot_clear($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 _ft_glyphslot_free_bitmap($slot);
 $0 = ((($slot)) + 24|0);
 $1 = ((($slot)) + 94|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($slot)) + 100|0);
 $3 = ((($slot)) + 72|0);
 dest=$0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 dest=$2; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _ft_glyphslot_grid_fit_metrics($slot,$vertical) {
 $slot = $slot|0;
 $vertical = $vertical|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($slot)) + 24|0);
 $1 = ($vertical<<24>>24)==(0);
 if ($1) {
  $29 = ((($slot)) + 44|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 & -64;
  HEAP32[$29>>2] = $31;
  $32 = ((($slot)) + 48|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 & -64;
  HEAP32[$32>>2] = $34;
  $35 = ((($slot)) + 32|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$0>>2]|0;
  $38 = (($36) + 63)|0;
  $39 = (($38) + ($37))|0;
  $40 = $39 & -64;
  $41 = ((($slot)) + 36|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($slot)) + 28|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($42) - ($44))|0;
  $46 = $45 & -64;
  $47 = $36 & -64;
  HEAP32[$35>>2] = $47;
  $48 = HEAP32[$41>>2]|0;
  $49 = (($48) + 63)|0;
  $50 = $49 & -64;
  HEAP32[$41>>2] = $50;
  $51 = HEAP32[$35>>2]|0;
  $52 = (($40) - ($51))|0;
  HEAP32[$0>>2] = $52;
  $53 = HEAP32[$41>>2]|0;
  $54 = (($53) - ($46))|0;
  HEAP32[$43>>2] = $54;
  $55 = ((($slot)) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 32)|0;
  $58 = $57 & -64;
  HEAP32[$55>>2] = $58;
  $59 = ((($slot)) + 52|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + 32)|0;
  $62 = $61 & -64;
  HEAP32[$59>>2] = $62;
  return;
 } else {
  $2 = ((($slot)) + 32|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & -64;
  HEAP32[$2>>2] = $4;
  $5 = ((($slot)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 63)|0;
  $8 = $7 & -64;
  HEAP32[$5>>2] = $8;
  $9 = ((($slot)) + 44|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = (($10) + 63)|0;
  $13 = (($12) + ($11))|0;
  $14 = $13 & -64;
  $15 = ((($slot)) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($slot)) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 63)|0;
  $20 = (($19) + ($18))|0;
  $21 = $20 & -64;
  $22 = $10 & -64;
  HEAP32[$9>>2] = $22;
  $23 = HEAP32[$15>>2]|0;
  $24 = $23 & -64;
  HEAP32[$15>>2] = $24;
  $25 = HEAP32[$9>>2]|0;
  $26 = (($14) - ($25))|0;
  HEAP32[$0>>2] = $26;
  $27 = HEAP32[$15>>2]|0;
  $28 = (($21) - ($27))|0;
  HEAP32[$17>>2] = $28;
  $55 = ((($slot)) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 32)|0;
  $58 = $57 & -64;
  HEAP32[$55>>2] = $58;
  $59 = ((($slot)) + 52|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + 32)|0;
  $62 = $61 & -64;
  HEAP32[$59>>2] = $62;
  return;
 }
}
function _ft_lookup_glyph_renderer($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($slot)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 156|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = ((($7)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($slot)) + 72|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10|0)==($12|0);
  if ($13) {
   $result$0 = $7;
   return ($result$0|0);
  }
 }
 $14 = ((($slot)) + 72|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_FT_Lookup_Renderer($5,$15,0)|0);
 $result$0 = $16;
 return ($result$0|0);
}
function _open_face($driver,$stream,$face_index,$num_params,$params,$aface) {
 $driver = $driver|0;
 $stream = $stream|0;
 $face_index = $face_index|0;
 $num_params = $num_params|0;
 $params = $params|0;
 $aface = $aface|0;
 var $$pr = 0, $$pr3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $i$05 = 0, $internal$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($driver)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($driver)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_ft_mem_alloc($3,$5,$error)|0);
 $7 = HEAP32[$error>>2]|0;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   $9 = (_ft_mem_alloc($3,64,$error)|0);
   $10 = HEAP32[$error>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = ((($6)) + 128|0);
    HEAP32[$12>>2] = $9;
    $13 = ((($6)) + 96|0);
    HEAP32[$13>>2] = $driver;
    $14 = ((($6)) + 100|0);
    HEAP32[$14>>2] = $3;
    $15 = ((($6)) + 104|0);
    HEAP32[$15>>2] = $stream;
    $16 = HEAP32[$12>>2]|0;
    $17 = ((($16)) + 52|0);
    HEAP32[$17>>2] = 0;
    $18 = ($num_params|0)>(0);
    L4: do {
     if ($18) {
      $19 = HEAP32[$12>>2]|0;
      $20 = ((($19)) + 52|0);
      $i$05 = 0;
      while(1) {
       $21 = HEAP32[$20>>2]|0;
       $22 = ($21|0)==(0|0);
       if (!($22)) {
        break L4;
       }
       $23 = (($params) + ($i$05<<3)|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = ($24|0)==(1768842098);
       if ($25) {
        $26 = (((($params) + ($i$05<<3)|0)) + 4|0);
        $27 = HEAP32[$26>>2]|0;
        HEAP32[$20>>2] = $27;
       }
       $28 = (($i$05) + 1)|0;
       $29 = ($28|0)<($num_params|0);
       if ($29) {
        $i$05 = $28;
       } else {
        break;
       }
      }
     }
    } while(0);
    $30 = ((($1)) + 48|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(0|0);
    if ($32) {
     $$pr = HEAP32[$error>>2]|0;
     $35 = $$pr;
    } else {
     $33 = (FUNCTION_TABLE_iiiiii[$31 & 63]($stream,$6,$face_index,$num_params,$params)|0);
     HEAP32[$error>>2] = $33;
     $35 = $33;
    }
    $34 = ($35|0)==(0);
    L17: do {
     if ($34) {
      $36 = (_find_unicode_charmap($6)|0);
      switch ($36|0) {
      case 0: case 38:  {
       HEAP32[$aface>>2] = $6;
       break L17;
       break;
      }
      default: {
       HEAP32[$error>>2] = $36;
       $internal$04 = $9;
       break L1;
      }
      }
     }
    } while(0);
    $$pr3 = HEAP32[$error>>2]|0;
    $37 = ($$pr3|0)==(0);
    if ($37) {
     $41 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($41|0);
    } else {
     $internal$04 = $9;
    }
   } else {
    $internal$04 = $9;
   }
  } else {
   $internal$04 = 0;
  }
 } while(0);
 _destroy_charmaps($6,$3);
 $38 = ((($1)) + 52|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  FUNCTION_TABLE_vi[$39 & 127]($6);
 }
 _ft_mem_free($3,$internal$04);
 _ft_mem_free($3,$6);
 HEAP32[$aface>>2] = 0;
 $41 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function _load_mac_face($library,$stream,$face_index,$aface,$args) {
 $library = $library|0;
 $stream = $stream|0;
 $face_index = $face_index|0;
 $aface = $aface|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $error$0 = 0, $error$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_IsMacBinary($library,$stream,$face_index,$aface)|0);
 $1 = $0 & 255;
 $2 = ($1|0)==(2);
 if ($2) {
  $3 = (_IsMacResource($library,$stream,0,$face_index,$aface)|0);
  $error$0 = $3;
 } else {
  $error$0 = $0;
 }
 $4 = $error$0 & 255;
 switch ($4|0) {
 case 85: case 2:  {
  break;
 }
 default: {
  $error$1 = $error$0;
  return ($error$1|0);
 }
 }
 $5 = HEAP32[$args>>2]|0;
 $6 = $5 & 4;
 $7 = ($6|0)==(0);
 if ($7) {
  $error$1 = $error$0;
  return ($error$1|0);
 }
 $8 = (_load_face_in_embedded_rfork($library,$stream,$face_index,$aface,$args)|0);
 $error$1 = $8;
 return ($error$1|0);
}
function _new_memory_stream($library,$base,$size,$astream) {
 $library = $library|0;
 $base = $base|0;
 $size = $size|0;
 $astream = $astream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ($library|0)==(0|0);
 if ($0) {
  $$0 = 33;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($base|0)==(0|0);
 if ($1) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$astream>>2] = 0;
 $2 = HEAP32[$library>>2]|0;
 $3 = (_ft_mem_alloc($2,40,$error)|0);
 $4 = HEAP32[$error>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  _FT_Stream_OpenMemory($3,$base,$size);
  $6 = ((($3)) + 24|0);
  HEAP32[$6>>2] = 53;
  HEAP32[$astream>>2] = $3;
 }
 $7 = HEAP32[$error>>2]|0;
 $$0 = $7;
 STACKTOP = sp;return ($$0|0);
}
function _ft_lookup_PS_in_sfnt_stream($stream,$face_index,$offset,$length,$is_sfnt_cid) {
 $stream = $stream|0;
 $face_index = $face_index|0;
 $offset = $offset|0;
 $length = $length|0;
 $is_sfnt_cid = $is_sfnt_cid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $error = 0, $i$02 = 0, $or$cond = 0, $pstable_index$01 = 0, $pstable_index$1 = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$offset>>2] = 0;
 HEAP32[$length>>2] = 0;
 HEAP8[$is_sfnt_cid>>0] = 0;
 $0 = (_FT_Stream_ReadULong($stream,$error)|0);
 $1 = HEAP32[$error>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($0|0)==(1954115633);
 if (!($3)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_FT_Stream_ReadUShort($stream,$error)|0);
 $5 = HEAP32[$error>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_FT_Stream_Skip($stream,6)|0);
 HEAP32[$error>>2] = $7;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP8[$is_sfnt_cid>>0] = 0;
 $9 = $4&65535;
 $10 = ($4<<16>>16)==(0);
 if ($10) {
  $$0 = 142;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($face_index|0)>(-1);
 $12 = ($face_index|0)<(0);
 $13 = ($face_index|0)<(0);
 $i$02 = 0;$pstable_index$01 = -1;
 L16: while(1) {
  $16 = (_FT_Stream_ReadULong($stream,$error)|0);
  $17 = HEAP32[$error>>2]|0;
  $18 = ($17|0)==(0);
  if (!($18)) {
   label = 12;
   break;
  }
  $19 = (_FT_Stream_Skip($stream,4)|0);
  HEAP32[$error>>2] = $19;
  $20 = ($19|0)==(0);
  if (!($20)) {
   label = 12;
   break;
  }
  $21 = (_FT_Stream_ReadULong($stream,$error)|0);
  HEAP32[$offset>>2] = $21;
  $22 = HEAP32[$error>>2]|0;
  $23 = ($22|0)==(0);
  if (!($23)) {
   label = 12;
   break;
  }
  $24 = (_FT_Stream_ReadULong($stream,$error)|0);
  HEAP32[$length>>2] = $24;
  $25 = HEAP32[$error>>2]|0;
  $26 = ($25|0)==(0);
  if (!($26)) {
   label = 12;
   break;
  }
  $switch$split2D = ($16|0)<(1415139377);
  L22: do {
   if ($switch$split2D) {
    switch ($16|0) {
    case 1128875040:  {
     break;
    }
    default: {
     $pstable_index$1 = $pstable_index$01;
     break L22;
    }
    }
    $28 = (($pstable_index$01) + 1)|0;
    $29 = HEAP32[$offset>>2]|0;
    $30 = (($29) + 22)|0;
    HEAP32[$offset>>2] = $30;
    $31 = HEAP32[$length>>2]|0;
    $32 = (($31) + -22)|0;
    HEAP32[$length>>2] = $32;
    HEAP8[$is_sfnt_cid>>0] = 1;
    if ($12) {
     $$0 = 0;
     label = 17;
     break L16;
    } else {
     $pstable_index$1 = $28;
    }
   } else {
    switch ($16|0) {
    case 1415139377:  {
     break;
    }
    default: {
     $pstable_index$1 = $pstable_index$01;
     break L22;
    }
    }
    $33 = (($pstable_index$01) + 1)|0;
    $34 = HEAP32[$offset>>2]|0;
    $35 = (($34) + 24)|0;
    HEAP32[$offset>>2] = $35;
    $36 = HEAP32[$length>>2]|0;
    $37 = (($36) + -24)|0;
    HEAP32[$length>>2] = $37;
    HEAP8[$is_sfnt_cid>>0] = 0;
    if ($13) {
     $$0 = 0;
     label = 17;
     break L16;
    } else {
     $pstable_index$1 = $33;
    }
   }
  } while(0);
  $38 = ($pstable_index$1|0)==($face_index|0);
  $or$cond = $11 & $38;
  $15 = (($i$02) + 1)|0;
  if ($or$cond) {
   $$0 = 0;
   label = 17;
   break;
  }
  $14 = ($15|0)<($9|0);
  if ($14) {
   $i$02 = $15;$pstable_index$01 = $pstable_index$1;
  } else {
   $$0 = 142;
   label = 17;
   break;
  }
 }
 if ((label|0) == 12) {
  $27 = HEAP32[$error>>2]|0;
  $$0 = $27;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _destroy_face($memory,$face,$driver) {
 $memory = $memory|0;
 $face = $face|0;
 $driver = $driver|0;
 var $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($driver)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 120|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($face)) + 116|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$3 & 127]($6);
 }
 $7 = ((($face)) + 84|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = $8;
  while(1) {
   _FT_Done_GlyphSlot($10);
   $11 = HEAP32[$7>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    break;
   } else {
    $10 = $11;
   }
  }
 }
 $13 = ((($face)) + 108|0);
 _FT_List_Finalize($13,7,$memory,$driver);
 $14 = ((($face)) + 88|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($face)) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  FUNCTION_TABLE_vi[$16 & 127]($face);
 }
 _destroy_charmaps($face,$memory);
 $18 = ((($1)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  FUNCTION_TABLE_vi[$19 & 127]($face);
 }
 $21 = ((($face)) + 104|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($face)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >>> 10;
 $$lobit = $25 & 1;
 _FT_Stream_Free($22,$$lobit);
 HEAP32[$21>>2] = 0;
 $26 = ((($face)) + 128|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if ($28) {
  _ft_mem_free($memory,$face);
  return;
 }
 _ft_mem_free($memory,$27);
 HEAP32[$26>>2] = 0;
 _ft_mem_free($memory,$face);
 return;
}
function _destroy_size($memory,$size,$driver) {
 $memory = $memory|0;
 $size = $size|0;
 $driver = $driver|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($size)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  FUNCTION_TABLE_vi[$1 & 127]($size);
 }
 $3 = ((($driver)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  FUNCTION_TABLE_vi[$6 & 127]($size);
 }
 $8 = ((($size)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 _ft_mem_free($memory,$9);
 HEAP32[$8>>2] = 0;
 _ft_mem_free($memory,$size);
 return;
}
function _ft_recompute_scaled_metrics($face,$metrics) {
 $face = $face|0;
 $metrics = $metrics|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 70|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ((($metrics)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_FT_MulFix($2,$4)|0);
 $6 = (($5) + 63)|0;
 $7 = $6 & -64;
 $8 = ((($metrics)) + 12|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($face)) + 72|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = HEAP32[$3>>2]|0;
 $13 = (_FT_MulFix($11,$12)|0);
 $14 = $13 & -64;
 $15 = ((($metrics)) + 16|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($face)) + 74|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = HEAP32[$3>>2]|0;
 $20 = (_FT_MulFix($18,$19)|0);
 $21 = (($20) + 32)|0;
 $22 = $21 & -64;
 $23 = ((($metrics)) + 20|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($face)) + 76|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = ((($metrics)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_FT_MulFix($26,$28)|0);
 $30 = (($29) + 32)|0;
 $31 = $30 & -64;
 $32 = ((($metrics)) + 24|0);
 HEAP32[$32>>2] = $31;
 return;
}
function _find_unicode_charmap($face) {
 $face = $face|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa19 = 0, $$sum = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 38;
  return ($$0|0);
 }
 $3 = ((($face)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + -1)|0;
 $5 = ($$sum|0)<(0);
 L4: do {
  if (!($5)) {
   $6 = (($1) + ($$sum<<2)|0);
   $7 = $1;
   $9 = $6;
   L6: while(1) {
    $8 = HEAP32[$9>>2]|0;
    $10 = ((($8)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1970170211);
    do {
     if ($12) {
      $13 = ((($8)) + 8|0);
      $14 = HEAP16[$13>>1]|0;
      $15 = ($14<<16>>16)==(3);
      if ($15) {
       $16 = ((($8)) + 10|0);
       $17 = HEAP16[$16>>1]|0;
       $18 = ($17<<16>>16)==(10);
       if (!($18)) {
        label = 7;
       }
      } else {
       label = 7;
      }
      if ((label|0) == 7) {
       label = 0;
       $19 = HEAP32[$9>>2]|0;
       $20 = ((($19)) + 8|0);
       $21 = HEAP16[$20>>1]|0;
       $22 = ($21<<16>>16)==(0);
       if (!($22)) {
        break;
       }
       $23 = ((($19)) + 10|0);
       $24 = HEAP16[$23>>1]|0;
       $25 = ($24<<16>>16)==(4);
       if (!($25)) {
        break;
       }
      }
      $26 = $9;
      $27 = (($26) - ($7))|0;
      $28 = ($27|0)>(60);
      if (!($28)) {
       $$lcssa19 = $9;
       break L6;
      }
     }
    } while(0);
    $29 = ((($9)) + -4|0);
    $30 = ($29>>>0)<($1>>>0);
    if ($30) {
     break L4;
    } else {
     $9 = $29;
    }
   }
   $31 = HEAP32[$$lcssa19>>2]|0;
   $32 = ((($face)) + 92|0);
   HEAP32[$32>>2] = $31;
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $33 = HEAP32[$3>>2]|0;
 $$sum5 = (($33) + -1)|0;
 $34 = ($$sum5|0)<(0);
 if ($34) {
  $$0 = 38;
  return ($$0|0);
 }
 $35 = (($1) + ($$sum5<<2)|0);
 $36 = $1;
 $38 = $35;
 while(1) {
  $37 = HEAP32[$38>>2]|0;
  $39 = ((($37)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(1970170211);
  if ($41) {
   $42 = $38;
   $43 = (($42) - ($36))|0;
   $44 = ($43|0)>(60);
   if (!($44)) {
    $$lcssa = $37;
    break;
   }
  }
  $45 = ((($38)) + -4|0);
  $46 = ($45>>>0)<($1>>>0);
  if ($46) {
   $$0 = 38;
   label = 18;
   break;
  } else {
   $38 = $45;
  }
 }
 if ((label|0) == 18) {
  return ($$0|0);
 }
 $47 = ((($face)) + 92|0);
 HEAP32[$47>>2] = $$lcssa;
 $$0 = 0;
 return ($$0|0);
}
function _ft_cmap_done_internal($cmap) {
 $cmap = $cmap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$cmap>>2]|0;
 $3 = ((($2)) + 100|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  _ft_mem_free($4,$cmap);
  return;
 }
 FUNCTION_TABLE_vi[$6 & 127]($cmap);
 _ft_mem_free($4,$cmap);
 return;
}
function _ft_add_renderer($module) {
 $module = $module|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($module)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_ft_mem_alloc($2,12,$error)|0);
 $4 = HEAP32[$error>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $31 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($31|0);
 }
 $6 = HEAP32[$module>>2]|0;
 $7 = ((($module)) + 12|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($6)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($module)) + 16|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$8>>2]|0;
 $12 = ($11|0)==(1869968492);
 if ($12) {
  $13 = ((($6)) + 56|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   label = 6;
  } else {
   $18 = ((($module)) + 52|0);
   $19 = (FUNCTION_TABLE_iii[$16 & 255]($2,$18)|0);
   HEAP32[$error>>2] = $19;
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = HEAP32[$13>>2]|0;
    $22 = ((($21)) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($module)) + 56|0);
    HEAP32[$24>>2] = $23;
    $25 = ((($6)) + 40|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($module)) + 60|0);
    HEAP32[$27>>2] = $26;
    label = 6;
   }
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $28 = ((($3)) + 8|0);
  HEAP32[$28>>2] = $module;
  $29 = ((($1)) + 148|0);
  _FT_List_Add($29,$3);
  _ft_set_current_renderer($1);
  $$pr = HEAP32[$error>>2]|0;
  $30 = ($$pr|0)==(0);
  if ($30) {
   $31 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($31|0);
  }
 }
 _ft_mem_free($2,$3);
 $31 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($31|0);
}
function _Destroy_Module($module) {
 $module = $module|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($module)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$module>>2]|0;
 $3 = ((($module)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 160|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==($module|0);
  if ($8) {
   HEAP32[$6>>2] = 0;
  }
 }
 $9 = HEAP32[$module>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 2;
 $12 = ($11|0)==(0);
 if (!($12)) {
  _ft_remove_renderer($module);
 }
 $13 = HEAP32[$module>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ($15|0)==(0);
 if (!($16)) {
  _Destroy_Driver($module);
 }
 $17 = ((($2)) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  _ft_mem_free($1,$module);
  return;
 }
 FUNCTION_TABLE_vi[$18 & 127]($module);
 _ft_mem_free($1,$module);
 return;
}
function _ft_remove_renderer($module) {
 $module = $module|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($module)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 148|0);
 $4 = (_FT_List_Find($3,$module)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 $6 = ((($module)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1869968492);
 if ($10) {
  $11 = ((($module)) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = ((($7)) + 56|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 20|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vi[$17 & 127]($12);
  }
 }
 _FT_List_Remove($3,$4);
 _ft_mem_free($2,$4);
 _ft_set_current_renderer($1);
 return;
}
function _Destroy_Driver($driver) {
 $driver = $driver|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($driver)) + 16|0);
 $1 = ((($driver)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _FT_List_Finalize($0,8,$2,$driver);
 $3 = HEAP32[$driver>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 512;
 $6 = ($5|0)==(0);
 if (!($6)) {
  return;
 }
 $7 = ((($driver)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 _FT_GlyphLoader_Done($8);
 return;
}
function _ft_set_current_renderer($library) {
 $library = $library|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FT_Lookup_Renderer($library,1869968492,0)|0);
 $1 = ((($library)) + 156|0);
 HEAP32[$1>>2] = $0;
 return;
}
function _destroy_charmaps($face,$memory) {
 $face = $face|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($face|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($face)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 $4 = ((($face)) + 40|0);
 if ($3) {
  $n$02 = 0;
  while(1) {
   $5 = HEAP32[$4>>2]|0;
   $6 = (($5) + ($n$02<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   _ft_cmap_done_internal($7);
   $8 = HEAP32[$4>>2]|0;
   $9 = (($8) + ($n$02<<2)|0);
   HEAP32[$9>>2] = 0;
   $10 = (($n$02) + 1)|0;
   $11 = HEAP32[$1>>2]|0;
   $12 = ($10|0)<($11|0);
   if ($12) {
    $n$02 = $10;
   } else {
    break;
   }
  }
 }
 $13 = HEAP32[$4>>2]|0;
 _ft_mem_free($memory,$13);
 HEAP32[$4>>2] = 0;
 HEAP32[$1>>2] = 0;
 return;
}
function _memory_stream_close($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$stream>>2]|0;
 _ft_mem_free($1,$2);
 $3 = ((($stream)) + 4|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$stream>>2] = 0;
 $4 = ((($stream)) + 24|0);
 HEAP32[$4>>2] = 0;
 return;
}
function _IsMacBinary($library,$stream,$face_index,$aface) {
 $library = $library|0;
 $stream = $stream|0;
 $face_index = $face_index|0;
 $aface = $aface|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $header = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $header = sp;
 $0 = ($stream|0)==(0|0);
 if ($0) {
  $$0 = 85;
 } else {
  $1 = (_FT_Stream_Seek($stream,0)|0);
  $2 = ($1|0)==(0);
  if ($2) {
   $3 = (_FT_Stream_Read($stream,$header,128)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = HEAP8[$header>>0]|0;
    $6 = ($5<<24>>24)==(0);
    if ($6) {
     $7 = ((($header)) + 74|0);
     $8 = HEAP8[$7>>0]|0;
     $9 = ($8<<24>>24)==(0);
     if ($9) {
      $10 = ((($header)) + 82|0);
      $11 = HEAP8[$10>>0]|0;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $13 = ((($header)) + 1|0);
       $14 = HEAP8[$13>>0]|0;
       $15 = $14&255;
       $16 = (($14) + -1)<<24>>24;
       $17 = ($16&255)>(32);
       if ($17) {
        $$0 = 2;
       } else {
        $18 = ((($header)) + 63|0);
        $19 = HEAP8[$18>>0]|0;
        $20 = ($19<<24>>24)==(0);
        if ($20) {
         $21 = (($15) + 2)|0;
         $22 = (($header) + ($21)|0);
         $23 = HEAP8[$22>>0]|0;
         $24 = ($23<<24>>24)==(0);
         if ($24) {
          $25 = ((($header)) + 83|0);
          $26 = HEAP8[$25>>0]|0;
          $27 = $26&255;
          $28 = $27 << 24;
          $29 = ((($header)) + 84|0);
          $30 = HEAP8[$29>>0]|0;
          $31 = $30&255;
          $32 = $31 << 16;
          $33 = $32 | $28;
          $34 = ((($header)) + 85|0);
          $35 = HEAP8[$34>>0]|0;
          $36 = $35&255;
          $37 = $36 << 8;
          $38 = $33 | $37;
          $39 = ((($header)) + 86|0);
          $40 = HEAP8[$39>>0]|0;
          $41 = $40&255;
          $42 = $38 | $41;
          $43 = (($42) + 255)|0;
          $44 = $43 & -128;
          $45 = (_IsMacResource($library,$stream,$44,$face_index,$aface)|0);
          $$0 = $45;
         } else {
          $$0 = 2;
         }
        } else {
         $$0 = 2;
        }
       }
      } else {
       $$0 = 2;
      }
     } else {
      $$0 = 2;
     }
    } else {
     $$0 = 2;
    }
   } else {
    $$0 = $3;
   }
  } else {
   $$0 = $1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _IsMacResource($library,$stream,$resource_offset,$face_index,$aface) {
 $library = $library|0;
 $stream = $stream|0;
 $resource_offset = $resource_offset|0;
 $face_index = $face_index|0;
 $aface = $aface|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $data_offsets = 0, $map_offset = 0, $rdara_pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $map_offset = sp + 12|0;
 $rdara_pos = sp + 8|0;
 $data_offsets = sp + 4|0;
 $count = sp;
 $0 = HEAP32[$library>>2]|0;
 $1 = (_FT_Raccess_Get_HeaderInfo($library,$stream,$resource_offset,$map_offset,$rdara_pos)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$map_offset>>2]|0;
 $4 = HEAP32[$rdara_pos>>2]|0;
 $5 = (_FT_Raccess_Get_DataOffsets($library,$stream,$3,$4,1347375956,$data_offsets,$count)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = HEAP32[$data_offsets>>2]|0;
  $8 = HEAP32[$count>>2]|0;
  $9 = (_Mac_Read_POST_Resource($library,$stream,$7,$8,$face_index,$aface)|0);
  $10 = HEAP32[$data_offsets>>2]|0;
  _ft_mem_free($0,$10);
  HEAP32[$data_offsets>>2] = 0;
  $11 = ($9|0)==(0);
  if (!($11)) {
   $$0 = $9;
   STACKTOP = sp;return ($$0|0);
  }
  $12 = HEAP32[$aface>>2]|0;
  HEAP32[$12>>2] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = HEAP32[$map_offset>>2]|0;
 $14 = HEAP32[$rdara_pos>>2]|0;
 $15 = (_FT_Raccess_Get_DataOffsets($library,$stream,$13,$14,1936092788,$data_offsets,$count)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = HEAP32[$count>>2]|0;
 $18 = (($face_index|0) % ($17|0))&-1;
 $19 = HEAP32[$data_offsets>>2]|0;
 $20 = (_Mac_Read_sfnt_Resource($library,$stream,$19,$17,$18,$aface)|0);
 $21 = HEAP32[$data_offsets>>2]|0;
 _ft_mem_free($0,$21);
 HEAP32[$data_offsets>>2] = 0;
 $22 = ($20|0)==(0);
 if (!($22)) {
  $$0 = $20;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = HEAP32[$count>>2]|0;
 $24 = HEAP32[$aface>>2]|0;
 HEAP32[$24>>2] = $23;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _load_face_in_embedded_rfork($library,$stream,$face_index,$aface,$args) {
 $library = $library|0;
 $stream = $stream|0;
 $face_index = $face_index|0;
 $aface = $aface|0;
 $args = $args|0;
 var $$not = 0, $$vfs_rfork_has_no_font$0 = 0, $$vfs_rfork_has_no_font$0$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args2 = 0, $error$07 = 0, $error$1 = 0;
 var $error$2 = 0, $error$2$ = 0, $errors = 0, $file_names = 0, $i$04 = 0, $offsets = 0, $or$cond = 0, $or$cond2 = 0, $stream2 = 0, $vfs_rfork_has_no_font$06 = 0, $vfs_rfork_has_no_font$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $file_names = sp + 112|0;
 $offsets = sp + 76|0;
 $errors = sp + 40|0;
 $args2 = sp + 8|0;
 $stream2 = sp;
 $0 = HEAP32[$library>>2]|0;
 HEAP32[$stream2>>2] = 0;
 $1 = ((($args)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 _FT_Raccess_Guess($library,$stream,$2,$file_names,$offsets,$errors);
 $3 = ((($args2)) + 12|0);
 $error$07 = 2;$i$04 = 0;$vfs_rfork_has_no_font$06 = 0;
 while(1) {
  $4 = (_ft_raccess_rule_by_darwin_vfs($library,$i$04)|0);
  $5 = ($4<<24>>24)!=(0);
  $$not = $5 ^ 1;
  $6 = ($vfs_rfork_has_no_font$06<<24>>24)==(0);
  $or$cond2 = $6 | $$not;
  if ($or$cond2) {
   $7 = (($errors) + ($i$04<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$args2>>2] = 4;
    $10 = (($file_names) + ($i$04<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if ($12) {
     $13 = HEAP32[$1>>2]|0;
     $14 = $13;
    } else {
     $14 = $11;
    }
    HEAP32[$3>>2] = $14;
    $15 = (_FT_Stream_New($library,$args2,$stream2)|0);
    $16 = ($15|0)==(81);
    $or$cond = $5 & $16;
    $$vfs_rfork_has_no_font$0 = $or$cond ? 1 : $vfs_rfork_has_no_font$06;
    $17 = ($15|0)==(0);
    if ($17) {
     $18 = HEAP32[$stream2>>2]|0;
     $19 = (($offsets) + ($i$04<<2)|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (_IsMacResource($library,$18,$20,$face_index,$aface)|0);
     $22 = HEAP32[$stream2>>2]|0;
     _FT_Stream_Free($22,0);
     $23 = ($21|0)==(0);
     if ($23) {
      $error$2 = 0;
      break;
     }
     $24 = ($4<<24>>24)==(0);
     $$vfs_rfork_has_no_font$0$ = $24 ? $$vfs_rfork_has_no_font$0 : 1;
     $error$1 = $21;$vfs_rfork_has_no_font$2 = $$vfs_rfork_has_no_font$0$;
    } else {
     $error$1 = $15;$vfs_rfork_has_no_font$2 = $$vfs_rfork_has_no_font$0;
    }
   } else {
    $error$1 = $error$07;$vfs_rfork_has_no_font$2 = $vfs_rfork_has_no_font$06;
   }
  } else {
   $error$1 = $error$07;$vfs_rfork_has_no_font$2 = $vfs_rfork_has_no_font$06;
  }
  $25 = (($i$04) + 1)|0;
  $26 = ($25|0)<(9);
  if ($26) {
   $error$07 = $error$1;$i$04 = $25;$vfs_rfork_has_no_font$06 = $vfs_rfork_has_no_font$2;
  } else {
   $error$2 = $error$1;
   break;
  }
 }
 $27 = HEAP32[$file_names>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _ft_mem_free($0,$27);
  HEAP32[$file_names>>2] = 0;
 }
 $29 = ((($file_names)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  _ft_mem_free($0,$30);
  HEAP32[$29>>2] = 0;
 }
 $32 = ((($file_names)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if (!($34)) {
  _ft_mem_free($0,$33);
  HEAP32[$32>>2] = 0;
 }
 $35 = ((($file_names)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  _ft_mem_free($0,$36);
  HEAP32[$35>>2] = 0;
 }
 $38 = ((($file_names)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  _ft_mem_free($0,$39);
  HEAP32[$38>>2] = 0;
 }
 $41 = ((($file_names)) + 20|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if (!($43)) {
  _ft_mem_free($0,$42);
  HEAP32[$41>>2] = 0;
 }
 $44 = ((($file_names)) + 24|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if (!($46)) {
  _ft_mem_free($0,$45);
  HEAP32[$44>>2] = 0;
 }
 $47 = ((($file_names)) + 28|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(0|0);
 if (!($49)) {
  _ft_mem_free($0,$48);
  HEAP32[$47>>2] = 0;
 }
 $50 = ((($file_names)) + 32|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0|0);
 if ($52) {
  $53 = ($error$2|0)==(0);
  $error$2$ = $53 ? 0 : 2;
  STACKTOP = sp;return ($error$2$|0);
 }
 _ft_mem_free($0,$51);
 HEAP32[$50>>2] = 0;
 $53 = ($error$2|0)==(0);
 $error$2$ = $53 ? 0 : 2;
 STACKTOP = sp;return ($error$2$|0);
}
function _Mac_Read_POST_Resource($library,$stream,$offsets,$resource_cnt,$face_index,$aface) {
 $library = $library|0;
 $stream = $stream|0;
 $offsets = $offsets|0;
 $resource_cnt = $resource_cnt|0;
 $face_index = $face_index|0;
 $aface = $aface|0;
 var $$0 = 0, $$face_index = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $error = 0, $i$022 = 0, $i$111 = 0, $len$0$lcssa = 0, $len$013 = 0, $len$1 = 0, $len$2 = 0, $pfb_len$0$lcssa = 0, $pfb_len$023 = 0, $pfb_lenpos$0$lcssa = 0, $pfb_lenpos$015 = 0, $pfb_lenpos$1 = 0, $pfb_lenpos$2 = 0, $pfb_pos$0$lcssa = 0, $pfb_pos$014 = 0, $pfb_pos$1 = 0, $pfb_pos$2 = 0, $rlen$0 = 0, $type$012 = 0;
 var $type$1 = 0, $type$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 1;
 $0 = HEAP32[$library>>2]|0;
 $1 = ($face_index|0)==(-1);
 $$face_index = $1 ? 0 : $face_index;
 $2 = ($$face_index|0)==(0);
 if (!($2)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($resource_cnt|0)>(0);
 L4: do {
  if ($3) {
   $i$022 = 0;$pfb_len$023 = 0;
   while(1) {
    $4 = (($offsets) + ($i$022<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_FT_Stream_Seek($stream,$5)|0);
    HEAP32[$error>>2] = $6;
    $7 = ($6|0)==(0);
    if (!($7)) {
     break L4;
    }
    $8 = (_FT_Stream_ReadULong($stream,$error)|0);
    $9 = HEAP32[$error>>2]|0;
    $10 = ($9|0)==(0);
    if (!($10)) {
     break L4;
    }
    $11 = (($pfb_len$023) + 6)|0;
    $12 = (($11) + ($8))|0;
    $13 = (($i$022) + 1)|0;
    $14 = ($13|0)<($resource_cnt|0);
    if ($14) {
     $i$022 = $13;$pfb_len$023 = $12;
    } else {
     $pfb_len$0$lcssa = $12;
     label = 6;
     break;
    }
   }
  } else {
   $pfb_len$0$lcssa = 0;
   label = 6;
  }
 } while(0);
 L9: do {
  if ((label|0) == 6) {
   $15 = (($pfb_len$0$lcssa) + 2)|0;
   $16 = (_ft_mem_alloc($0,$15,$error)|0);
   $17 = HEAP32[$error>>2]|0;
   $18 = ($17|0)==(0);
   if ($18) {
    HEAP8[$16>>0] = -128;
    $19 = ((($16)) + 1|0);
    HEAP8[$19>>0] = 1;
    $20 = ((($16)) + 2|0);
    $21 = ($resource_cnt|0)>(0);
    HEAP8[$20>>0]=0&255;HEAP8[$20+1>>0]=(0>>8)&255;HEAP8[$20+2>>0]=(0>>16)&255;HEAP8[$20+3>>0]=0>>24;
    L12: do {
     if ($21) {
      $i$111 = 0;$len$013 = 0;$pfb_lenpos$015 = 2;$pfb_pos$014 = 6;$type$012 = 1;
      while(1) {
       $22 = (($offsets) + ($i$111<<2)|0);
       $23 = HEAP32[$22>>2]|0;
       $24 = (_FT_Stream_Seek($stream,$23)|0);
       HEAP32[$error>>2] = $24;
       $25 = ($24|0)==(0);
       if (!($25)) {
        break L12;
       }
       $26 = (_FT_Stream_ReadULong($stream,$error)|0);
       $27 = HEAP32[$error>>2]|0;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break L9;
       }
       $29 = (_FT_Stream_ReadUShort($stream,$error)|0);
       $30 = HEAP32[$error>>2]|0;
       $31 = ($30|0)==(0);
       if (!($31)) {
        break L9;
       }
       $32 = $29&65535;
       $33 = $32 >>> 8;
       $34 = ($33|0)==(0);
       if ($34) {
        $len$2 = $len$013;$pfb_lenpos$2 = $pfb_lenpos$015;$pfb_pos$2 = $pfb_pos$014;$type$2 = $type$012;
       } else {
        $35 = ($26|0)>(2);
        $36 = (($26) + -2)|0;
        $rlen$0 = $35 ? $36 : 0;
        $37 = ($33|0)==($type$012|0);
        if ($37) {
         $38 = (($rlen$0) + ($len$013))|0;
         $len$1 = $38;$pfb_lenpos$1 = $pfb_lenpos$015;$pfb_pos$1 = $pfb_pos$014;$type$1 = $type$012;
        } else {
         $39 = (($pfb_lenpos$015) + 3)|0;
         $40 = ($39|0)>($15|0);
         if ($40) {
          break L12;
         }
         $41 = $len$013&255;
         $42 = (($16) + ($pfb_lenpos$015)|0);
         HEAP8[$42>>0] = $41;
         $43 = $len$013 >>> 8;
         $44 = $43&255;
         $45 = (($pfb_lenpos$015) + 1)|0;
         $46 = (($16) + ($45)|0);
         HEAP8[$46>>0] = $44;
         $47 = $len$013 >>> 16;
         $48 = $47&255;
         $49 = (($pfb_lenpos$015) + 2)|0;
         $50 = (($16) + ($49)|0);
         HEAP8[$50>>0] = $48;
         $51 = $len$013 >>> 24;
         $52 = $51&255;
         $53 = (($16) + ($39)|0);
         HEAP8[$53>>0] = $52;
         $54 = ($33|0)==(5);
         if ($54) {
          $len$0$lcssa = $len$013;$pfb_lenpos$0$lcssa = $pfb_lenpos$015;$pfb_pos$0$lcssa = $pfb_pos$014;
          label = 22;
          break L12;
         }
         $55 = (($pfb_pos$014) + 4)|0;
         $56 = ($55|0)>($pfb_len$0$lcssa|0);
         if ($56) {
          break L12;
         }
         $57 = (($pfb_pos$014) + 1)|0;
         $58 = (($16) + ($pfb_pos$014)|0);
         HEAP8[$58>>0] = -128;
         $59 = $33&255;
         $60 = (($pfb_pos$014) + 2)|0;
         $61 = (($16) + ($57)|0);
         HEAP8[$61>>0] = $59;
         $62 = (($pfb_pos$014) + 3)|0;
         $63 = (($16) + ($60)|0);
         HEAP8[$63>>0] = 0;
         $64 = (($16) + ($62)|0);
         HEAP8[$64>>0] = 0;
         $65 = (($pfb_pos$014) + 5)|0;
         $66 = (($16) + ($55)|0);
         HEAP8[$66>>0] = 0;
         $67 = (($pfb_pos$014) + 6)|0;
         $68 = (($16) + ($65)|0);
         HEAP8[$68>>0] = 0;
         $len$1 = $rlen$0;$pfb_lenpos$1 = $60;$pfb_pos$1 = $67;$type$1 = $33;
        }
        HEAP32[$error>>2] = 1;
        $69 = ($pfb_pos$1|0)>($pfb_len$0$lcssa|0);
        if ($69) {
         break L12;
        }
        $70 = (($pfb_pos$1) + ($rlen$0))|0;
        $71 = ($70|0)>($pfb_len$0$lcssa|0);
        if ($71) {
         break L12;
        }
        $72 = (($16) + ($pfb_pos$1)|0);
        $73 = (_FT_Stream_Read($stream,$72,$rlen$0)|0);
        HEAP32[$error>>2] = $73;
        $74 = ($73|0)==(0);
        if ($74) {
         $len$2 = $len$1;$pfb_lenpos$2 = $pfb_lenpos$1;$pfb_pos$2 = $70;$type$2 = $type$1;
        } else {
         break L12;
        }
       }
       $75 = (($i$111) + 1)|0;
       $76 = ($75|0)<($resource_cnt|0);
       if ($76) {
        $i$111 = $75;$len$013 = $len$2;$pfb_lenpos$015 = $pfb_lenpos$2;$pfb_pos$014 = $pfb_pos$2;$type$012 = $type$2;
       } else {
        $len$0$lcssa = $len$2;$pfb_lenpos$0$lcssa = $pfb_lenpos$2;$pfb_pos$0$lcssa = $pfb_pos$2;
        label = 22;
        break;
       }
      }
     } else {
      $len$0$lcssa = 0;$pfb_lenpos$0$lcssa = 2;$pfb_pos$0$lcssa = 6;
      label = 22;
     }
    } while(0);
    if ((label|0) == 22) {
     $77 = ($pfb_pos$0$lcssa|0)>($pfb_len$0$lcssa|0);
     if (!($77)) {
      $78 = (($pfb_pos$0$lcssa) + 1)|0;
      $79 = (($16) + ($pfb_pos$0$lcssa)|0);
      HEAP8[$79>>0] = -128;
      $80 = (($16) + ($78)|0);
      HEAP8[$80>>0] = 3;
      $81 = (($pfb_lenpos$0$lcssa) + 3)|0;
      $82 = ($81|0)>($15|0);
      if (!($82)) {
       $83 = (($pfb_pos$0$lcssa) + 2)|0;
       $84 = $len$0$lcssa&255;
       $85 = (($16) + ($pfb_lenpos$0$lcssa)|0);
       HEAP8[$85>>0] = $84;
       $86 = $len$0$lcssa >>> 8;
       $87 = $86&255;
       $88 = (($pfb_lenpos$0$lcssa) + 1)|0;
       $89 = (($16) + ($88)|0);
       HEAP8[$89>>0] = $87;
       $90 = $len$0$lcssa >>> 16;
       $91 = $90&255;
       $92 = (($pfb_lenpos$0$lcssa) + 2)|0;
       $93 = (($16) + ($92)|0);
       HEAP8[$93>>0] = $91;
       $94 = $len$0$lcssa >>> 24;
       $95 = $94&255;
       $96 = (($16) + ($81)|0);
       HEAP8[$96>>0] = $95;
       $97 = (_open_face_from_buffer($library,$16,$83,$$face_index,88618,$aface)|0);
       $$0 = $97;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
    _ft_mem_free($0,$16);
   }
  }
 } while(0);
 $98 = HEAP32[$error>>2]|0;
 $$0 = $98;
 STACKTOP = sp;return ($$0|0);
}
function _Mac_Read_sfnt_Resource($library,$stream,$offsets,$resource_cnt,$face_index,$aface) {
 $library = $library|0;
 $stream = $stream|0;
 $offsets = $offsets|0;
 $resource_cnt = $resource_cnt|0;
 $face_index = $face_index|0;
 $aface = $aface|0;
 var $$0 = 0, $$face_index = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = HEAP32[$library>>2]|0;
 $1 = ($face_index|0)==(-1);
 $$face_index = $1 ? 0 : $face_index;
 $2 = ($$face_index|0)<($resource_cnt|0);
 if (!($2)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($offsets) + ($$face_index<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_FT_Stream_Seek($stream,$4)|0);
 HEAP32[$error>>2] = $5;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = (_FT_Stream_ReadULong($stream,$error)|0);
  $8 = HEAP32[$error>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = ($7|0)==(-1);
   if ($10) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $11 = (_open_face_PS_from_sfnt_stream($library,$stream,$$face_index,0,0,$aface)|0);
   HEAP32[$error>>2] = $11;
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = (($4) + 4)|0;
    $14 = (_FT_Stream_Seek($stream,$13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $16 = (_ft_mem_alloc($0,$7,$error)|0);
     $17 = HEAP32[$error>>2]|0;
     $18 = ($17|0)==(0);
     if (!($18)) {
      $$0 = $17;
      STACKTOP = sp;return ($$0|0);
     }
     $19 = (_FT_Stream_Read($stream,$16,$7)|0);
     HEAP32[$error>>2] = $19;
     $20 = ($19|0)==(0);
     if ($20) {
      $21 = ($7|0)>(4);
      if ($21) {
       $22 = (_memcmp($16,25096,4)|0);
       $23 = ($22|0)!=(0);
       $phitmp = $23 ? 89693 : 25172;
       $24 = $phitmp;
      } else {
       $24 = 89693;
      }
      $25 = (_open_face_from_buffer($library,$16,$7,0,$24,$aface)|0);
      HEAP32[$error>>2] = $25;
     }
    }
   }
  }
 }
 $26 = HEAP32[$error>>2]|0;
 $$0 = $26;
 STACKTOP = sp;return ($$0|0);
}
function _FT_Stream_OpenMemory($stream,$base,$size) {
 $stream = $stream|0;
 $base = $base|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$stream>>2] = $base;
 $0 = ((($stream)) + 4|0);
 HEAP32[$0>>2] = $size;
 $1 = ((($stream)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($stream)) + 32|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($stream)) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($stream)) + 24|0);
 HEAP32[$4>>2] = 0;
 return;
}
function _FT_Stream_Close($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($stream|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($stream)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 FUNCTION_TABLE_vi[$2 & 127]($stream);
 return;
}
function _FT_Stream_Seek($stream,$pos) {
 $stream = $stream|0;
 $pos = $pos|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $error$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $5 = ((($stream)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6>>>0)<($pos>>>0);
  if ($7) {
   $error$03 = 85;
   return ($error$03|0);
  }
 } else {
  $3 = (FUNCTION_TABLE_iiiii[$1 & 63]($stream,$pos,0,0)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $error$03 = 85;
   return ($error$03|0);
  }
 }
 $8 = ((($stream)) + 8|0);
 HEAP32[$8>>2] = $pos;
 $error$03 = 0;
 return ($error$03|0);
}
function _FT_Stream_Skip($stream,$distance) {
 $stream = $stream|0;
 $distance = $distance|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($distance|0)<(0);
 if ($0) {
  $$0 = 85;
  return ($$0|0);
 }
 $1 = ((($stream)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($distance))|0;
 $4 = (_FT_Stream_Seek($stream,$3)|0);
 $$0 = $4;
 return ($$0|0);
}
function _FT_Stream_Pos($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _FT_Stream_Read($stream,$buffer,$count) {
 $stream = $stream|0;
 $buffer = $buffer|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_FT_Stream_ReadAt($stream,$1,$buffer,$count)|0);
 return ($2|0);
}
function _FT_Stream_ReadAt($stream,$pos,$buffer,$count) {
 $stream = $stream|0;
 $pos = $pos|0;
 $buffer = $buffer|0;
 $count = $count|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$ = 0, $read_bytes$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($pos>>>0);
 if (!($2)) {
  $$0 = 85;
  return ($$0|0);
 }
 $3 = ((($stream)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (($1) - ($pos))|0;
  $8 = ($7>>>0)>($count>>>0);
  $count$ = $8 ? $count : $7;
  $9 = HEAP32[$stream>>2]|0;
  $10 = (($9) + ($pos)|0);
  _memcpy(($buffer|0),($10|0),($count$|0))|0;
  $read_bytes$1 = $count$;
 } else {
  $6 = (FUNCTION_TABLE_iiiii[$4 & 63]($stream,$pos,$buffer,$count)|0);
  $read_bytes$1 = $6;
 }
 $11 = (($read_bytes$1) + ($pos))|0;
 $12 = ((($stream)) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = ($read_bytes$1>>>0)<($count>>>0);
 $$ = $13 ? 85 : 0;
 $$0 = $$;
 return ($$0|0);
}
function _FT_Stream_TryRead($stream,$buffer,$count) {
 $stream = $stream|0;
 $buffer = $buffer|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$ = 0, $read_bytes$1 = 0, $read_bytes$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($stream)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>($1>>>0);
 if (!($4)) {
  $read_bytes$2 = 0;
  return ($read_bytes$2|0);
 }
 $5 = ((($stream)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $9 = (($3) - ($1))|0;
  $10 = ($9>>>0)>($count>>>0);
  $count$ = $10 ? $count : $9;
  $11 = HEAP32[$stream>>2]|0;
  $12 = (($11) + ($1)|0);
  _memcpy(($buffer|0),($12|0),($count$|0))|0;
  $read_bytes$1 = $count$;
 } else {
  $8 = (FUNCTION_TABLE_iiiii[$6 & 63]($stream,$1,$buffer,$count)|0);
  $read_bytes$1 = $8;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = (($13) + ($read_bytes$1))|0;
 HEAP32[$0>>2] = $14;
 $read_bytes$2 = $read_bytes$1;
 return ($read_bytes$2|0);
}
function _FT_Stream_ExtractFrame($stream,$count,$pbytes) {
 $stream = $stream|0;
 $count = $count|0;
 $pbytes = $pbytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FT_Stream_EnterFrame($stream,$count)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  return ($0|0);
 }
 $2 = ((($stream)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$pbytes>>2] = $3;
 HEAP32[$2>>2] = 0;
 $4 = ((($stream)) + 36|0);
 HEAP32[$4>>2] = 0;
 return ($0|0);
}
function _FT_Stream_EnterFrame($stream,$count) {
 $stream = $stream|0;
 $count = $count|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($stream)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $23 = ((($stream)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($stream)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26>>>0)<=($24>>>0);
  $28 = (($26) - ($24))|0;
  $29 = ($28>>>0)<($count>>>0);
  $or$cond = $27 | $29;
  if ($or$cond) {
   HEAP32[$error>>2] = 85;
   $37 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($37|0);
  } else {
   $30 = HEAP32[$stream>>2]|0;
   $31 = (($30) + ($24)|0);
   $32 = ((($stream)) + 32|0);
   HEAP32[$32>>2] = $31;
   $$sum = (($24) + ($count))|0;
   $33 = (($30) + ($$sum)|0);
   $34 = ((($stream)) + 36|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$23>>2]|0;
   $36 = (($35) + ($count))|0;
   HEAP32[$23>>2] = $36;
   $37 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($37|0);
  }
 }
 $3 = ((($stream)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($stream)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)<($count>>>0);
 if ($7) {
  HEAP32[$error>>2] = 85;
  $37 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 $8 = (_ft_mem_qalloc($4,$count,$error)|0);
 HEAP32[$stream>>2] = $8;
 $9 = HEAP32[$error>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $37 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($stream)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiiii[$11 & 63]($stream,$13,$8,$count)|0);
 $15 = ($14>>>0)<($count>>>0);
 if ($15) {
  $16 = HEAP32[$stream>>2]|0;
  _ft_mem_free($4,$16);
  HEAP32[$stream>>2] = 0;
  HEAP32[$error>>2] = 85;
 }
 $17 = HEAP32[$stream>>2]|0;
 $18 = ((($stream)) + 32|0);
 HEAP32[$18>>2] = $17;
 $19 = (($17) + ($count)|0);
 $20 = ((($stream)) + 36|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$12>>2]|0;
 $22 = (($21) + ($14))|0;
 HEAP32[$12>>2] = $22;
 $37 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($37|0);
}
function _FT_Stream_ReleaseFrame($stream,$pbytes) {
 $stream = $stream|0;
 $pbytes = $pbytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($stream|0)==(0|0);
 if (!($0)) {
  $1 = ((($stream)) + 20|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($stream)) + 28|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = HEAP32[$pbytes>>2]|0;
   _ft_mem_free($5,$6);
   HEAP32[$pbytes>>2] = 0;
  }
 }
 HEAP32[$pbytes>>2] = 0;
 return;
}
function _FT_Stream_ExitFrame($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($stream)) + 28|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$stream>>2]|0;
  _ft_mem_free($4,$5);
  HEAP32[$stream>>2] = 0;
 }
 $6 = ((($stream)) + 32|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($stream)) + 36|0);
 HEAP32[$7>>2] = 0;
 return;
}
function _FT_Stream_GetChar($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($stream)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if (!($4)) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $5 = ((($1)) + 1|0);
 HEAP32[$0>>2] = $5;
 $6 = HEAP8[$1>>0]|0;
 $result$0 = $6;
 return ($result$0|0);
}
function _FT_Stream_GetUShort($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 1|0);
 $3 = ((($stream)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if (!($5)) {
  $p$0 = $1;$result$0 = 0;
  HEAP32[$0>>2] = $p$0;
  return ($result$0|0);
 }
 $6 = ((($1)) + 2|0);
 $7 = HEAP8[$1>>0]|0;
 $8 = $7&255;
 $9 = $8 << 8;
 $10 = HEAP8[$2>>0]|0;
 $11 = $10&255;
 $12 = $9 | $11;
 $13 = $12&65535;
 $p$0 = $6;$result$0 = $13;
 HEAP32[$0>>2] = $p$0;
 return ($result$0|0);
}
function _FT_Stream_GetUShortLE($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 1|0);
 $3 = ((($stream)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if (!($5)) {
  $p$0 = $1;$result$0 = 0;
  HEAP32[$0>>2] = $p$0;
  return ($result$0|0);
 }
 $6 = ((($1)) + 2|0);
 $7 = HEAP8[$2>>0]|0;
 $8 = $7&255;
 $9 = $8 << 8;
 $10 = HEAP8[$1>>0]|0;
 $11 = $10&255;
 $12 = $9 | $11;
 $13 = $12&65535;
 $p$0 = $6;$result$0 = $13;
 HEAP32[$0>>2] = $p$0;
 return ($result$0|0);
}
function _FT_Stream_GetULong($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 3|0);
 $3 = ((($stream)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if (!($5)) {
  $p$0 = $1;$result$0 = 0;
  HEAP32[$0>>2] = $p$0;
  return ($result$0|0);
 }
 $6 = ((($1)) + 4|0);
 $7 = HEAP8[$1>>0]|0;
 $8 = $7&255;
 $9 = $8 << 24;
 $10 = ((($1)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 16;
 $14 = $13 | $9;
 $15 = ((($1)) + 2|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 << 8;
 $19 = $14 | $18;
 $20 = HEAP8[$2>>0]|0;
 $21 = $20&255;
 $22 = $19 | $21;
 $p$0 = $6;$result$0 = $22;
 HEAP32[$0>>2] = $p$0;
 return ($result$0|0);
}
function _FT_Stream_GetULongLE($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 3|0);
 $3 = ((($stream)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if (!($5)) {
  $p$0 = $1;$result$0 = 0;
  HEAP32[$0>>2] = $p$0;
  return ($result$0|0);
 }
 $6 = ((($1)) + 4|0);
 $7 = HEAP8[$2>>0]|0;
 $8 = $7&255;
 $9 = $8 << 24;
 $10 = ((($1)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 16;
 $14 = $13 | $9;
 $15 = ((($1)) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 << 8;
 $19 = $14 | $18;
 $20 = HEAP8[$1>>0]|0;
 $21 = $20&255;
 $22 = $19 | $21;
 $p$0 = $6;$result$0 = $22;
 HEAP32[$0>>2] = $p$0;
 return ($result$0|0);
}
function _FT_Stream_ReadChar($stream,$error) {
 $stream = $stream|0;
 $error = $error|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $result = sp;
 HEAP8[$result>>0] = 0;
 HEAP32[$error>>2] = 0;
 $0 = ((($stream)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $3 = ((($stream)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $7 = ((($stream)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($4>>>0)<($8>>>0);
  if ($9) {
   $10 = HEAP32[$stream>>2]|0;
   $11 = (($10) + ($4)|0);
   $12 = HEAP8[$11>>0]|0;
   HEAP8[$result>>0] = $12;
   label = 5;
  } else {
   label = 6;
  }
 } else {
  $5 = (FUNCTION_TABLE_iiiii[$1 & 63]($stream,$4,$result,1)|0);
  $6 = ($5|0)==(1);
  if ($6) {
   label = 5;
  } else {
   label = 6;
  }
 }
 if ((label|0) == 5) {
  $13 = HEAP32[$3>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$3>>2] = $14;
  $15 = HEAP8[$result>>0]|0;
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 6) {
  HEAP32[$error>>2] = 85;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _FT_Stream_ReadUShort($stream,$error) {
 $stream = $stream|0;
 $error = $error|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$01 = 0, $reads = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $reads = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($stream)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ((($stream)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 do {
  if ($5) {
   $6 = ((($stream)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = HEAP32[$stream>>2]|0;
    $12 = (($11) + ($1)|0);
    $13 = ($12|0)==(0|0);
    if ($13) {
     $result$0 = 0;
    } else {
     $p$01 = $12;
     label = 5;
    }
   } else {
    $9 = (FUNCTION_TABLE_iiiii[$7 & 63]($stream,$1,$reads,2)|0);
    $10 = ($9|0)==(2);
    if ($10) {
     $p$01 = $reads;
     label = 5;
    } else {
     break;
    }
   }
   if ((label|0) == 5) {
    $14 = HEAP8[$p$01>>0]|0;
    $15 = $14&255;
    $16 = $15 << 8;
    $17 = ((($p$01)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = $16 | $19;
    $21 = $20&65535;
    $result$0 = $21;
   }
   $22 = HEAP32[$0>>2]|0;
   $23 = (($22) + 2)|0;
   HEAP32[$0>>2] = $23;
   $$0 = $result$0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$error>>2] = 85;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _FT_Stream_ReadUShortLE($stream,$error) {
 $stream = $stream|0;
 $error = $error|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$01 = 0, $reads = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $reads = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($stream)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ((($stream)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 do {
  if ($5) {
   $6 = ((($stream)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = HEAP32[$stream>>2]|0;
    $12 = (($11) + ($1)|0);
    $13 = ($12|0)==(0|0);
    if ($13) {
     $result$0 = 0;
    } else {
     $p$01 = $12;
     label = 5;
    }
   } else {
    $9 = (FUNCTION_TABLE_iiiii[$7 & 63]($stream,$1,$reads,2)|0);
    $10 = ($9|0)==(2);
    if ($10) {
     $p$01 = $reads;
     label = 5;
    } else {
     break;
    }
   }
   if ((label|0) == 5) {
    $14 = ((($p$01)) + 1|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = $16 << 8;
    $18 = HEAP8[$p$01>>0]|0;
    $19 = $18&255;
    $20 = $17 | $19;
    $21 = $20&65535;
    $result$0 = $21;
   }
   $22 = HEAP32[$0>>2]|0;
   $23 = (($22) + 2)|0;
   HEAP32[$0>>2] = $23;
   $$0 = $result$0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$error>>2] = 85;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _FT_Stream_ReadUOffset($stream,$error) {
 $stream = $stream|0;
 $error = $error|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$01 = 0, $reads = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $reads = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($stream)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 2)|0;
 $3 = ((($stream)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 do {
  if ($5) {
   $6 = ((($stream)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = HEAP32[$stream>>2]|0;
    $12 = (($11) + ($1)|0);
    $13 = ($12|0)==(0|0);
    if ($13) {
     $result$0 = 0;
    } else {
     $p$01 = $12;
     label = 5;
    }
   } else {
    $9 = (FUNCTION_TABLE_iiiii[$7 & 63]($stream,$1,$reads,3)|0);
    $10 = ($9|0)==(3);
    if ($10) {
     $p$01 = $reads;
     label = 5;
    } else {
     break;
    }
   }
   if ((label|0) == 5) {
    $14 = HEAP8[$p$01>>0]|0;
    $15 = $14&255;
    $16 = $15 << 16;
    $17 = ((($p$01)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = $19 << 8;
    $21 = $20 | $16;
    $22 = ((($p$01)) + 2|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = $21 | $24;
    $result$0 = $25;
   }
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 3)|0;
   HEAP32[$0>>2] = $27;
   $$0 = $result$0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$error>>2] = 85;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _FT_Stream_ReadULong($stream,$error) {
 $stream = $stream|0;
 $error = $error|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$01 = 0, $reads = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $reads = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($stream)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 3)|0;
 $3 = ((($stream)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 do {
  if ($5) {
   $6 = ((($stream)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = HEAP32[$stream>>2]|0;
    $12 = (($11) + ($1)|0);
    $13 = ($12|0)==(0|0);
    if ($13) {
     $result$0 = 0;
    } else {
     $p$01 = $12;
     label = 5;
    }
   } else {
    $9 = (FUNCTION_TABLE_iiiii[$7 & 63]($stream,$1,$reads,4)|0);
    $10 = ($9|0)==(4);
    if ($10) {
     $p$01 = $reads;
     label = 5;
    } else {
     break;
    }
   }
   if ((label|0) == 5) {
    $14 = HEAP8[$p$01>>0]|0;
    $15 = $14&255;
    $16 = $15 << 24;
    $17 = ((($p$01)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = $18&255;
    $20 = $19 << 16;
    $21 = $20 | $16;
    $22 = ((($p$01)) + 2|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = $24 << 8;
    $26 = $21 | $25;
    $27 = ((($p$01)) + 3|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = $26 | $29;
    $result$0 = $30;
   }
   $31 = HEAP32[$0>>2]|0;
   $32 = (($31) + 4)|0;
   HEAP32[$0>>2] = $32;
   $$0 = $result$0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$error>>2] = 85;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _FT_Stream_ReadULongLE($stream,$error) {
 $stream = $stream|0;
 $error = $error|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$01 = 0, $reads = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $reads = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($stream)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 3)|0;
 $3 = ((($stream)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 do {
  if ($5) {
   $6 = ((($stream)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = HEAP32[$stream>>2]|0;
    $12 = (($11) + ($1)|0);
    $13 = ($12|0)==(0|0);
    if ($13) {
     $result$0 = 0;
    } else {
     $p$01 = $12;
     label = 5;
    }
   } else {
    $9 = (FUNCTION_TABLE_iiiii[$7 & 63]($stream,$1,$reads,4)|0);
    $10 = ($9|0)==(4);
    if ($10) {
     $p$01 = $reads;
     label = 5;
    } else {
     break;
    }
   }
   if ((label|0) == 5) {
    $14 = ((($p$01)) + 3|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15&255;
    $17 = $16 << 24;
    $18 = ((($p$01)) + 2|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = $20 << 16;
    $22 = $21 | $17;
    $23 = ((($p$01)) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = $24&255;
    $26 = $25 << 8;
    $27 = $22 | $26;
    $28 = HEAP8[$p$01>>0]|0;
    $29 = $28&255;
    $30 = $27 | $29;
    $result$0 = $30;
   }
   $31 = HEAP32[$0>>2]|0;
   $32 = (($31) + 4)|0;
   HEAP32[$0>>2] = $32;
   $$0 = $result$0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$error>>2] = 85;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _FT_Stream_ReadFields($stream,$fields,$structure) {
 $stream = $stream|0;
 $fields = $fields|0;
 $structure = $structure|0;
 var $$0 = 0, $$02 = 0, $$02$be = 0, $$02$lcssa44 = 0, $$02$ph = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cursor$0 = 0, $cursor$0$be = 0, $cursor$0$lcssa = 0, $cursor$0$ph = 0, $cursor$1 = 0, $error$1 = 0, $frame_accessed$0$ph = 0, $frame_accessed$0$ph$lcssa = 0, $frame_accessed$0$ph50 = 0, $or$cond = 0, $sign_shift$0 = 0, $value$0 = 0, $value$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($fields|0)!=(0|0);
 $1 = ($stream|0)!=(0|0);
 $or$cond = $1 & $0;
 if (!($or$cond)) {
  $$0 = 6;
  return ($$0|0);
 }
 $2 = ((($stream)) + 32|0);
 $3 = ((($stream)) + 36|0);
 $$02$ph = $fields;$frame_accessed$0$ph = 0;
 L4: while(1) {
  $cursor$0$ph = HEAP32[$2>>2]|0;
  $$02 = $$02$ph;$cursor$0 = $cursor$0$ph;
  L6: while(1) {
   $4 = HEAP8[$$02>>0]|0;
   $5 = $4&255;
   switch ($5|0) {
   case 4:  {
    $$02$lcssa44 = $$02;
    break L6;
    break;
   }
   case 25: case 24:  {
    $12 = ((($$02)) + 1|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13&255;
    $15 = (($cursor$0) + ($14)|0);
    $16 = HEAP32[$3>>2]|0;
    $17 = ($15>>>0)>($16>>>0);
    if ($17) {
     $error$1 = 85;$frame_accessed$0$ph50 = $frame_accessed$0$ph;
     break L4;
    }
    $18 = HEAP8[$$02>>0]|0;
    $19 = ($18<<24>>24)==(24);
    if ($19) {
     $20 = ((($$02)) + 2|0);
     $21 = HEAP16[$20>>1]|0;
     $22 = $21&65535;
     $23 = (($structure) + ($22)|0);
     _memcpy(($23|0),($cursor$0|0),($14|0))|0;
     $cursor$0$be = $15;
    } else {
     $cursor$0$be = $15;
    }
    break;
   }
   case 9: case 8:  {
    $24 = ((($cursor$0)) + 1|0);
    $25 = HEAP8[$cursor$0>>0]|0;
    $26 = $25&255;
    $cursor$1 = $24;$sign_shift$0 = 24;$value$0 = $26;
    label = 17;
    break;
   }
   case 12: case 13:  {
    $27 = ((($cursor$0)) + 2|0);
    $28 = HEAP8[$cursor$0>>0]|0;
    $29 = $28&255;
    $30 = $29 << 8;
    $31 = ((($cursor$0)) + 1|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = $30 | $33;
    $cursor$1 = $27;$sign_shift$0 = 16;$value$0 = $34;
    label = 17;
    break;
   }
   case 14: case 15:  {
    $35 = ((($cursor$0)) + 2|0);
    $36 = ((($cursor$0)) + 1|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = $38 << 8;
    $40 = HEAP8[$cursor$0>>0]|0;
    $41 = $40&255;
    $42 = $39 | $41;
    $cursor$1 = $35;$sign_shift$0 = 16;$value$0 = $42;
    label = 17;
    break;
   }
   case 16: case 17:  {
    $43 = ((($cursor$0)) + 4|0);
    $44 = HEAP8[$cursor$0>>0]|0;
    $45 = $44&255;
    $46 = $45 << 24;
    $47 = ((($cursor$0)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = $49 << 16;
    $51 = $50 | $46;
    $52 = ((($cursor$0)) + 2|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53&255;
    $55 = $54 << 8;
    $56 = $51 | $55;
    $57 = ((($cursor$0)) + 3|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = $56 | $59;
    $cursor$1 = $43;$sign_shift$0 = 0;$value$0 = $60;
    label = 17;
    break;
   }
   case 18: case 19:  {
    $61 = ((($cursor$0)) + 4|0);
    $62 = ((($cursor$0)) + 3|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = $64 << 24;
    $66 = ((($cursor$0)) + 2|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $68 << 16;
    $70 = $69 | $65;
    $71 = ((($cursor$0)) + 1|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72&255;
    $74 = $73 << 8;
    $75 = $70 | $74;
    $76 = HEAP8[$cursor$0>>0]|0;
    $77 = $76&255;
    $78 = $75 | $77;
    $cursor$1 = $61;$sign_shift$0 = 0;$value$0 = $78;
    label = 17;
    break;
   }
   case 20: case 21:  {
    $79 = ((($cursor$0)) + 3|0);
    $80 = HEAP8[$cursor$0>>0]|0;
    $81 = $80&255;
    $82 = $81 << 16;
    $83 = ((($cursor$0)) + 1|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $86 = $85 << 8;
    $87 = $86 | $82;
    $88 = ((($cursor$0)) + 2|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = $87 | $90;
    $cursor$1 = $79;$sign_shift$0 = 8;$value$0 = $91;
    label = 17;
    break;
   }
   case 22: case 23:  {
    $92 = ((($cursor$0)) + 3|0);
    $93 = ((($cursor$0)) + 2|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $94&255;
    $96 = $95 << 16;
    $97 = ((($cursor$0)) + 1|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = $99 << 8;
    $101 = $100 | $96;
    $102 = HEAP8[$cursor$0>>0]|0;
    $103 = $102&255;
    $104 = $101 | $103;
    $cursor$1 = $92;$sign_shift$0 = 8;$value$0 = $104;
    label = 17;
    break;
   }
   default: {
    $cursor$0$lcssa = $cursor$0;$frame_accessed$0$ph$lcssa = $frame_accessed$0$ph;
    label = 16;
    break L4;
   }
   }
   L19: do {
    if ((label|0) == 17) {
     label = 0;
     $105 = HEAP8[$$02>>0]|0;
     $106 = $105 & 1;
     $107 = ($106<<24>>24)==(0);
     $108 = $value$0 << $sign_shift$0;
     $109 = $108 >> $sign_shift$0;
     $value$1 = $107 ? $value$0 : $109;
     $110 = ((($$02)) + 2|0);
     $111 = HEAP16[$110>>1]|0;
     $112 = $111&65535;
     $113 = (($structure) + ($112)|0);
     $114 = ((($$02)) + 1|0);
     $115 = HEAP8[$114>>0]|0;
     $116 = $115&255;
     switch ($116|0) {
     case 1:  {
      $117 = $value$1&255;
      HEAP8[$113>>0] = $117;
      $cursor$0$be = $cursor$1;
      break L19;
      break;
     }
     case 2:  {
      $118 = $value$1&65535;
      HEAP16[$113>>1] = $118;
      $cursor$0$be = $cursor$1;
      break L19;
      break;
     }
     case 4:  {
      HEAP32[$113>>2] = $value$1;
      $cursor$0$be = $cursor$1;
      break L19;
      break;
     }
     default: {
      HEAP32[$113>>2] = $value$1;
      $cursor$0$be = $cursor$1;
      break L19;
     }
     }
    }
   } while(0);
   $$02$be = ((($$02)) + 4|0);
   $$02 = $$02$be;$cursor$0 = $cursor$0$be;
  }
  $6 = ((($$02$lcssa44)) + 2|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = (_FT_Stream_EnterFrame($stream,$8)|0);
  $10 = ($9|0)==(0);
  $11 = ((($$02$lcssa44)) + 4|0);
  if ($10) {
   $$02$ph = $11;$frame_accessed$0$ph = 1;
  } else {
   $error$1 = $9;$frame_accessed$0$ph50 = $frame_accessed$0$ph;
   break;
  }
 }
 if ((label|0) == 16) {
  HEAP32[$2>>2] = $cursor$0$lcssa;
  $error$1 = 0;$frame_accessed$0$ph50 = $frame_accessed$0$ph$lcssa;
 }
 $119 = ($frame_accessed$0$ph50<<24>>24)==(0);
 if ($119) {
  $$0 = $error$1;
  return ($$0|0);
 }
 _FT_Stream_ExitFrame($stream);
 $$0 = $error$1;
 return ($$0|0);
}
function _FT_Stream_Open($stream,$filepathname) {
 $stream = $stream|0;
 $filepathname = $filepathname|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($stream|0)==(0|0);
 if ($0) {
  $$0 = 40;
  return ($$0|0);
 }
 $1 = ((($stream)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($stream)) + 16|0);
 HEAP32[$2>>2] = $filepathname;
 HEAP32[$stream>>2] = 0;
 $3 = ((($stream)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($stream)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($stream)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = (_fopen($filepathname,25101)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 1;
  return ($$0|0);
 }
 (_fseek($6,0,2)|0);
 $8 = (_ftell($6)|0);
 $9 = ((($stream)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = ($8|0)==(0);
 if ($10) {
  (_fclose($6)|0);
  $$0 = 81;
  return ($$0|0);
 } else {
  (_fseek($6,0,0)|0);
  HEAP32[$1>>2] = $6;
  HEAP32[$4>>2] = 36;
  HEAP32[$5>>2] = 54;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _FT_New_Memory() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(16)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  return ($0|0);
 }
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 147;
 $3 = ((($0)) + 12|0);
 HEAP32[$3>>2] = 37;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = 19;
 return ($0|0);
}
function _FT_Done_Memory($memory) {
 $memory = $memory|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($memory);
 return;
}
function _ft_ansi_stream_io($stream,$offset,$buffer,$count) {
 $stream = $stream|0;
 $offset = $offset|0;
 $buffer = $buffer|0;
 $count = $count|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count|0)==(0);
 if ($0) {
  $1 = ((($stream)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2>>>0)<($offset>>>0);
  if ($3) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $4 = ((($stream)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($stream)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($offset|0);
 if (!($8)) {
  (_fseek($5,$offset,0)|0);
 }
 $9 = (_fread($buffer,1,$count,$5)|0);
 $$0 = $9;
 return ($$0|0);
}
function _ft_ansi_stream_close($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 (_fclose($1)|0);
 HEAP32[$0>>2] = 0;
 $2 = ((($stream)) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$stream>>2] = 0;
 return;
}
function _ft_alloc($memory,$size) {
 $memory = $memory|0;
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc($size)|0);
 return ($0|0);
}
function _ft_realloc($memory,$cur_size,$new_size,$block) {
 $memory = $memory|0;
 $cur_size = $cur_size|0;
 $new_size = $new_size|0;
 $block = $block|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_realloc($block,$new_size)|0);
 return ($0|0);
}
function _ft_free($memory,$block) {
 $memory = $memory|0;
 $block = $block|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($block);
 return;
}
function _ft_mem_alloc($memory,$size,$p_error) {
 $memory = $memory|0;
 $size = $size|0;
 $p_error = $p_error|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $error = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (_ft_mem_qalloc($memory,$size,$error)|0);
 $1 = HEAP32[$error>>2]|0;
 $2 = ($1|0)==(0);
 $3 = ($size|0)>(0);
 $or$cond = $3 & $2;
 if ($or$cond) {
  _memset(($0|0),0,($size|0))|0;
 }
 $4 = HEAP32[$error>>2]|0;
 HEAP32[$p_error>>2] = $4;
 STACKTOP = sp;return ($0|0);
}
function _ft_mem_qalloc($memory,$size,$p_error) {
 $memory = $memory|0;
 $size = $size|0;
 $p_error = $p_error|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $block$0 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)>(0);
 if ($0) {
  $1 = ((($memory)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (FUNCTION_TABLE_iii[$2 & 255]($memory,$size)|0);
  $4 = ($3|0)==(0|0);
  $$ = $4 ? 64 : 0;
  $block$0 = $3;$error$0 = $$;
 } else {
  $5 = $size >> 31;
  $6 = $5 & 6;
  $block$0 = 0;$error$0 = $6;
 }
 HEAP32[$p_error>>2] = $error$0;
 return ($block$0|0);
}
function _ft_mem_realloc($memory,$item_size,$cur_count,$new_count,$block,$p_error) {
 $memory = $memory|0;
 $item_size = $item_size|0;
 $cur_count = $cur_count|0;
 $new_count = $new_count|0;
 $block = $block|0;
 $p_error = $p_error|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $error = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = (_ft_mem_qrealloc($memory,$item_size,$cur_count,$new_count,$block,$error)|0);
 $1 = HEAP32[$error>>2]|0;
 $2 = ($1|0)==(0);
 $3 = ($new_count|0)>($cur_count|0);
 $or$cond = $3 & $2;
 if (!($or$cond)) {
  $8 = HEAP32[$error>>2]|0;
  HEAP32[$p_error>>2] = $8;
  STACKTOP = sp;return ($0|0);
 }
 $4 = Math_imul($cur_count, $item_size)|0;
 $5 = (($0) + ($4)|0);
 $6 = (($new_count) - ($cur_count))|0;
 $7 = Math_imul($6, $item_size)|0;
 _memset(($5|0),0,($7|0))|0;
 $8 = HEAP32[$error>>2]|0;
 HEAP32[$p_error>>2] = $8;
 STACKTOP = sp;return ($0|0);
}
function _ft_mem_qrealloc($memory,$item_size,$cur_count,$new_count,$block,$p_error) {
 $memory = $memory|0;
 $item_size = $item_size|0;
 $cur_count = $cur_count|0;
 $new_count = $new_count|0;
 $block = $block|0;
 $p_error = $p_error|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $or$cond5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = $cur_count | $item_size;
 $1 = $0 | $new_count;
 $2 = ($1|0)<(0);
 do {
  if ($2) {
   HEAP32[$error>>2] = 6;
   $$0 = $block;
  } else {
   $3 = ($new_count|0)==(0);
   $4 = ($item_size|0)==(0);
   $or$cond5 = $4 | $3;
   if ($or$cond5) {
    _ft_mem_free($memory,$block);
    $$0 = 0;
    break;
   }
   $5 = (2147483647 / ($item_size|0))&-1;
   $6 = ($5|0)<($new_count|0);
   if ($6) {
    HEAP32[$error>>2] = 10;
    $$0 = $block;
    break;
   }
   $7 = ($cur_count|0)==(0);
   if ($7) {
    $8 = Math_imul($new_count, $item_size)|0;
    $9 = (_ft_mem_alloc($memory,$8,$error)|0);
    $$0 = $9;
    break;
   }
   $10 = Math_imul($cur_count, $item_size)|0;
   $11 = Math_imul($new_count, $item_size)|0;
   $12 = ((($memory)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (FUNCTION_TABLE_iiiii[$13 & 63]($memory,$10,$11,$block)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$error>>2] = 64;
    $$0 = $block;
   } else {
    $$0 = $14;
   }
  }
 } while(0);
 $16 = HEAP32[$error>>2]|0;
 HEAP32[$p_error>>2] = $16;
 STACKTOP = sp;return ($$0|0);
}
function _ft_mem_free($memory,$P) {
 $memory = $memory|0;
 $P = $P|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($P|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($memory)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$2 & 31]($memory,$P);
 return;
}
function _ft_mem_dup($memory,$address,$size,$p_error) {
 $memory = $memory|0;
 $address = $address|0;
 $size = $size|0;
 $p_error = $p_error|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $error = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (_ft_mem_qalloc($memory,$size,$error)|0);
 $1 = HEAP32[$error>>2]|0;
 $2 = ($1|0)==(0);
 $3 = ($address|0)!=(0|0);
 $or$cond = $3 & $2;
 if ($or$cond) {
  _memcpy(($0|0),($address|0),($size|0))|0;
 }
 $4 = HEAP32[$error>>2]|0;
 HEAP32[$p_error>>2] = $4;
 STACKTOP = sp;return ($0|0);
}
function _ft_mem_strdup($memory,$str,$p_error) {
 $memory = $memory|0;
 $str = $str|0;
 $p_error = $p_error|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($str|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (_strlen($str)|0);
  $2 = (($1) + 1)|0;
  $3 = $2;
 }
 $4 = (_ft_mem_dup($memory,$str,$3,$p_error)|0);
 return ($4|0);
}
function _ft_mem_strcpyn($dst,$src,$size) {
 $dst = $dst|0;
 $src = $src|0;
 $size = $size|0;
 var $$01$lcssa = 0, $$014 = 0, $$02$lcssa = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size>>>0)>(1);
 L1: do {
  if ($0) {
   $$014 = $src;$$023 = $dst;$$05 = $size;
   while(1) {
    $1 = HEAP8[$$014>>0]|0;
    $2 = ($1<<24>>24)==(0);
    if ($2) {
     $$01$lcssa = $$014;$$02$lcssa = $$023;
     break L1;
    }
    $3 = ((($$014)) + 1|0);
    $4 = ((($$023)) + 1|0);
    HEAP8[$$023>>0] = $1;
    $5 = (($$05) + -1)|0;
    $6 = ($5>>>0)>(1);
    if ($6) {
     $$014 = $3;$$023 = $4;$$05 = $5;
    } else {
     $$01$lcssa = $3;$$02$lcssa = $4;
     break;
    }
   }
  } else {
   $$01$lcssa = $src;$$02$lcssa = $dst;
  }
 } while(0);
 HEAP8[$$02$lcssa>>0] = 0;
 $7 = HEAP8[$$01$lcssa>>0]|0;
 $8 = ($7<<24>>24)!=(0);
 $9 = $8&1;
 return ($9|0);
}
function _FT_List_Find($list,$data) {
 $list = $list|0;
 $data = $data|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cur$0 = 0, $cur$01 = 0, $cur$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cur$01 = HEAP32[$list>>2]|0;
 $0 = ($cur$01|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $cur$02 = $cur$01;
 }
 while(1) {
  $1 = ((($cur$02)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==($data|0);
  if ($3) {
   $$0 = $cur$02;
   label = 4;
   break;
  }
  $4 = ((($cur$02)) + 4|0);
  $cur$0 = HEAP32[$4>>2]|0;
  $5 = ($cur$0|0)==(0|0);
  if ($5) {
   $$0 = 0;
   label = 4;
   break;
  } else {
   $cur$02 = $cur$0;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _FT_List_Add($list,$node) {
 $list = $list|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($list)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($node)) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$node>>2] = $1;
 $3 = ($1|0)==(0|0);
 if ($3) {
  HEAP32[$list>>2] = $node;
  HEAP32[$0>>2] = $node;
  return;
 } else {
  $4 = ((($1)) + 4|0);
  HEAP32[$4>>2] = $node;
  HEAP32[$0>>2] = $node;
  return;
 }
}
function _FT_List_Remove($list,$node) {
 $list = $list|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$node>>2]|0;
 $1 = ((($node)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)==(0|0);
 if ($3) {
  HEAP32[$list>>2] = $2;
 } else {
  $4 = ((($0)) + 4|0);
  HEAP32[$4>>2] = $2;
 }
 $5 = ($2|0)==(0|0);
 if ($5) {
  $6 = ((($list)) + 4|0);
  HEAP32[$6>>2] = $0;
  return;
 } else {
  HEAP32[$2>>2] = $0;
  return;
 }
}
function _FT_List_Up($list,$node) {
 $list = $list|0;
 $node = $node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$node>>2]|0;
 $1 = ((($node)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $2;
 $5 = ($2|0)==(0|0);
 if ($5) {
  $6 = ((($list)) + 4|0);
  HEAP32[$6>>2] = $0;
 } else {
  HEAP32[$2>>2] = $0;
 }
 HEAP32[$node>>2] = 0;
 $7 = HEAP32[$list>>2]|0;
 HEAP32[$1>>2] = $7;
 $8 = HEAP32[$list>>2]|0;
 HEAP32[$8>>2] = $node;
 HEAP32[$list>>2] = $node;
 return;
}
function _FT_List_Finalize($list,$destroy,$memory,$user) {
 $list = $list|0;
 $destroy = $destroy|0;
 $memory = $memory|0;
 $user = $user|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $cur$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$list>>2]|0;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = ($destroy|0)==(0|0);
  $cur$01 = $0;
  while(1) {
   $3 = ((($cur$01)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   if (!($2)) {
    $5 = ((($cur$01)) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    FUNCTION_TABLE_viii[$destroy & 31]($memory,$6,$user);
   }
   _ft_mem_free($memory,$cur$01);
   $7 = ($4|0)==(0|0);
   if ($7) {
    break;
   } else {
    $cur$01 = $4;
   }
  }
 }
 HEAP32[$list>>2] = 0;
 $8 = ((($list)) + 4|0);
 HEAP32[$8>>2] = 0;
 return;
}
function _ft_highpow2($value) {
 $value = $value|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $value;
 while(1) {
  $0 = (($$0) + -1)|0;
  $1 = $0 & $$0;
  $2 = ($1|0)==(0);
  if ($2) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $1;
  }
 }
 return ($$0$lcssa|0);
}
function _FT_Outline_Decompose($outline,$func_interface,$user) {
 $outline = $outline|0;
 $func_interface = $func_interface|0;
 $user = $user|0;
 var $$0 = 0, $$lcssa67 = 0, $$lcssa69 = 0, $$sum = 0, $$sum$pn = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $123$phi = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error$0 = 0, $first$020 = 0, $limit$0 = 0, $limit$1 = 0, $n$019 = 0, $or$cond = 0, $point$0 = 0, $point$1$be = 0, $point$115 = 0, $point$212 = 0, $tags$0 = 0, $tags$1$be = 0, $tags$116 = 0;
 var $tags$213 = 0, $v_control = 0, $v_middle = 0, $v_start = 0, $vec = 0, $vec1 = 0, $vec12 = 0, $vec2 = 0, $vec3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $v_control = sp + 16|0;
 $v_start = sp + 8|0;
 $vec = sp + 56|0;
 $vec1 = sp;
 $v_middle = sp + 48|0;
 $vec12 = sp + 40|0;
 $vec2 = sp + 32|0;
 $vec3 = sp + 24|0;
 $0 = ($outline|0)!=(0|0);
 $1 = ($func_interface|0)!=(0|0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($func_interface)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($func_interface)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP16[$outline>>1]|0;
 $7 = ($6<<16>>16)>(0);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ((($outline)) + 12|0);
 $9 = ((($outline)) + 4|0);
 $10 = ((($v_start)) + 4|0);
 $11 = ((($outline)) + 8|0);
 $12 = ((($func_interface)) + 4|0);
 $13 = ((($vec12)) + 4|0);
 $14 = ((($vec2)) + 4|0);
 $15 = ((($vec3)) + 4|0);
 $16 = ((($func_interface)) + 12|0);
 $17 = ((($vec)) + 4|0);
 $18 = ((($func_interface)) + 4|0);
 $19 = ((($v_control)) + 4|0);
 $20 = ((($vec1)) + 4|0);
 $21 = ((($v_middle)) + 4|0);
 $22 = ((($func_interface)) + 8|0);
 $23 = ((($func_interface)) + 8|0);
 $24 = ((($func_interface)) + 12|0);
 $25 = ((($func_interface)) + 8|0);
 $first$020 = 0;$n$019 = 0;
 L7: while(1) {
  $26 = HEAP32[$8>>2]|0;
  $27 = (($26) + ($n$019<<1)|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28 << 16 >> 16;
  $30 = ($28<<16>>16)<(0);
  if ($30) {
   $$0 = 20;
   label = 29;
   break;
  }
  $31 = HEAP32[$9>>2]|0;
  $32 = (($31) + ($29<<3)|0);
  $33 = (($31) + ($first$020<<3)|0);
  $34 = $33;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) + 4)|0;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = $v_start;
  $41 = $40;
  HEAP32[$41>>2] = $36;
  $42 = (($40) + 4)|0;
  $43 = $42;
  HEAP32[$43>>2] = $39;
  $44 = HEAP32[$v_start>>2]|0;
  $45 = $44 << $3;
  $46 = (($45) - ($5))|0;
  HEAP32[$v_start>>2] = $46;
  $47 = HEAP32[$10>>2]|0;
  $48 = $47 << $3;
  $49 = (($48) - ($5))|0;
  HEAP32[$10>>2] = $49;
  $50 = HEAP32[$9>>2]|0;
  $51 = (($50) + ($29<<3)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (((($50) + ($29<<3)|0)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $52 << $3;
  $56 = (($55) - ($5))|0;
  $57 = $54 << $3;
  $58 = (($57) - ($5))|0;
  $59 = $v_start;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($59) + 4)|0;
  $63 = $62;
  $64 = HEAP32[$63>>2]|0;
  $65 = $v_control;
  $66 = $65;
  HEAP32[$66>>2] = $61;
  $67 = (($65) + 4)|0;
  $68 = $67;
  HEAP32[$68>>2] = $64;
  $69 = HEAP32[$9>>2]|0;
  $70 = HEAP32[$11>>2]|0;
  $71 = (($70) + ($first$020)|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $73 & 3;
  switch ($74|0) {
  case 2:  {
   $$0 = 20;
   label = 29;
   break L7;
   break;
  }
  case 0:  {
   $75 = (($70) + ($29)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76 & 3;
   $78 = ($77<<24>>24)==(1);
   if ($78) {
    HEAP32[$v_start>>2] = $56;
    HEAP32[$10>>2] = $58;
    $$sum5 = (($29) + -1)|0;
    $79 = (($31) + ($$sum5<<3)|0);
    $limit$0 = $79;
   } else {
    $80 = HEAP32[$v_start>>2]|0;
    $81 = (($80) + ($56))|0;
    $82 = (($81|0) / 2)&-1;
    HEAP32[$v_start>>2] = $82;
    $83 = HEAP32[$10>>2]|0;
    $84 = (($83) + ($58))|0;
    $85 = (($84|0) / 2)&-1;
    HEAP32[$10>>2] = $85;
    $limit$0 = $32;
   }
   $$sum = (($first$020) + -1)|0;
   $86 = (($70) + ($$sum)|0);
   $$sum$pn = $$sum;$limit$1 = $limit$0;$tags$0 = $86;
   break;
  }
  default: {
   $$sum$pn = $first$020;$limit$1 = $32;$tags$0 = $71;
  }
  }
  $point$0 = (($69) + ($$sum$pn<<3)|0);
  $87 = HEAP32[$func_interface>>2]|0;
  $88 = (FUNCTION_TABLE_iii[$87 & 255]($v_start,$user)|0);
  $89 = ($88|0)==(0);
  if (!($89)) {
   $$0 = $88;
   label = 29;
   break;
  }
  $90 = ($point$0>>>0)<($limit$1>>>0);
  L18: do {
   if ($90) {
    $point$115 = $point$0;$tags$116 = $tags$0;
    L19: while(1) {
     $91 = ((($point$115)) + 8|0);
     $92 = ((($tags$116)) + 1|0);
     $93 = HEAP8[$92>>0]|0;
     $94 = $93&255;
     $95 = $94 & 3;
     switch ($95|0) {
     case 1:  {
      $96 = HEAP32[$91>>2]|0;
      $97 = $96 << $3;
      $98 = (($97) - ($5))|0;
      HEAP32[$vec>>2] = $98;
      $99 = ((($point$115)) + 12|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = $100 << $3;
      $102 = (($101) - ($5))|0;
      HEAP32[$17>>2] = $102;
      $103 = HEAP32[$18>>2]|0;
      $104 = (FUNCTION_TABLE_iii[$103 & 255]($vec,$user)|0);
      $105 = ($104|0)==(0);
      if ($105) {
       $point$1$be = $91;$tags$1$be = $92;
      } else {
       $$0 = $104;
       label = 29;
       break L7;
      }
      break;
     }
     case 0:  {
      $106 = HEAP32[$91>>2]|0;
      $107 = $106 << $3;
      $108 = (($107) - ($5))|0;
      HEAP32[$v_control>>2] = $108;
      $109 = ((($point$115)) + 12|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = $110 << $3;
      $112 = (($111) - ($5))|0;
      HEAP32[$19>>2] = $112;
      $113 = ($91>>>0)<($limit$1>>>0);
      if ($113) {
       $123 = $point$115;$point$212 = $91;$tags$213 = $92;
      } else {
       label = 20;
       break L19;
      }
      L28: while(1) {
       $114 = ((($point$212)) + 8|0);
       $115 = ((($tags$213)) + 1|0);
       $116 = HEAP8[$115>>0]|0;
       $117 = $116&255;
       $118 = $117 & 3;
       $119 = HEAP32[$114>>2]|0;
       $120 = $119 << $3;
       $121 = (($120) - ($5))|0;
       HEAP32[$vec1>>2] = $121;
       $122 = ((($123)) + 20|0);
       $124 = HEAP32[$122>>2]|0;
       $125 = $124 << $3;
       $126 = (($125) - ($5))|0;
       HEAP32[$20>>2] = $126;
       switch ($118|0) {
       case 1:  {
        $$lcssa67 = $114;$$lcssa69 = $115;
        break L28;
        break;
       }
       case 0:  {
        break;
       }
       default: {
        $$0 = 20;
        label = 29;
        break L7;
       }
       }
       $131 = HEAP32[$v_control>>2]|0;
       $132 = HEAP32[$vec1>>2]|0;
       $133 = (($132) + ($131))|0;
       $134 = (($133|0) / 2)&-1;
       HEAP32[$v_middle>>2] = $134;
       $135 = HEAP32[$19>>2]|0;
       $136 = HEAP32[$20>>2]|0;
       $137 = (($136) + ($135))|0;
       $138 = (($137|0) / 2)&-1;
       HEAP32[$21>>2] = $138;
       $139 = HEAP32[$22>>2]|0;
       $140 = (FUNCTION_TABLE_iiii[$139 & 127]($v_control,$v_middle,$user)|0);
       $141 = ($140|0)==(0);
       if (!($141)) {
        $$0 = $140;
        label = 29;
        break L7;
       }
       $142 = $vec1;
       $143 = $142;
       $144 = HEAP32[$143>>2]|0;
       $145 = (($142) + 4)|0;
       $146 = $145;
       $147 = HEAP32[$146>>2]|0;
       $148 = $v_control;
       $149 = $148;
       HEAP32[$149>>2] = $144;
       $150 = (($148) + 4)|0;
       $151 = $150;
       HEAP32[$151>>2] = $147;
       $152 = ($114>>>0)<($limit$1>>>0);
       if ($152) {
        $123$phi = $point$212;$point$212 = $114;$tags$213 = $115;$123 = $123$phi;
       } else {
        label = 20;
        break L19;
       }
      }
      $127 = HEAP32[$23>>2]|0;
      $128 = (FUNCTION_TABLE_iiii[$127 & 127]($v_control,$vec1,$user)|0);
      $129 = ($128|0)==(0);
      if ($129) {
       $point$1$be = $$lcssa67;$tags$1$be = $$lcssa69;
      } else {
       $$0 = $128;
       label = 29;
       break L7;
      }
      break;
     }
     default: {
      $155 = ((($point$115)) + 16|0);
      $156 = ($155>>>0)>($limit$1>>>0);
      if ($156) {
       $$0 = 20;
       label = 29;
       break L7;
      }
      $157 = ((($tags$116)) + 2|0);
      $158 = HEAP8[$157>>0]|0;
      $159 = $158 & 3;
      $160 = ($159<<24>>24)==(2);
      if (!($160)) {
       $$0 = 20;
       label = 29;
       break L7;
      }
      $161 = ((($point$115)) + 24|0);
      $162 = ((($point$115)) + 8|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = $163 << $3;
      $165 = (($164) - ($5))|0;
      HEAP32[$vec12>>2] = $165;
      $166 = ((($point$115)) + 12|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = $167 << $3;
      $169 = (($168) - ($5))|0;
      HEAP32[$13>>2] = $169;
      $170 = ((($point$115)) + 16|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = $171 << $3;
      $173 = (($172) - ($5))|0;
      HEAP32[$vec2>>2] = $173;
      $174 = ((($point$115)) + 20|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = $175 << $3;
      $177 = (($176) - ($5))|0;
      HEAP32[$14>>2] = $177;
      $178 = ($161>>>0)>($limit$1>>>0);
      if ($178) {
       label = 25;
       break L19;
      }
      $179 = ((($tags$116)) + 3|0);
      $180 = HEAP32[$161>>2]|0;
      $181 = $180 << $3;
      $182 = (($181) - ($5))|0;
      HEAP32[$vec3>>2] = $182;
      $183 = ((($point$115)) + 28|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = $184 << $3;
      $186 = (($185) - ($5))|0;
      HEAP32[$15>>2] = $186;
      $187 = HEAP32[$16>>2]|0;
      $188 = (FUNCTION_TABLE_iiiii[$187 & 63]($vec12,$vec2,$vec3,$user)|0);
      $189 = ($188|0)==(0);
      if ($189) {
       $point$1$be = $161;$tags$1$be = $179;
      } else {
       $$0 = $188;
       label = 29;
       break L7;
      }
     }
     }
     $130 = ($point$1$be>>>0)<($limit$1>>>0);
     if ($130) {
      $point$115 = $point$1$be;$tags$116 = $tags$1$be;
     } else {
      label = 26;
      break L18;
     }
    }
    if ((label|0) == 20) {
     label = 0;
     $153 = HEAP32[$25>>2]|0;
     $154 = (FUNCTION_TABLE_iiii[$153 & 127]($v_control,$v_start,$user)|0);
     $error$0 = $154;
     break;
    }
    else if ((label|0) == 25) {
     label = 0;
     $190 = HEAP32[$24>>2]|0;
     $191 = (FUNCTION_TABLE_iiiii[$190 & 63]($vec12,$vec2,$v_start,$user)|0);
     $error$0 = $191;
     break;
    }
   } else {
    label = 26;
   }
  } while(0);
  if ((label|0) == 26) {
   label = 0;
   $192 = HEAP32[$12>>2]|0;
   $193 = (FUNCTION_TABLE_iii[$192 & 255]($v_start,$user)|0);
   $error$0 = $193;
  }
  $194 = ($error$0|0)==(0);
  if (!($194)) {
   $$0 = $error$0;
   label = 29;
   break;
  }
  $195 = (($29) + 1)|0;
  $196 = (($n$019) + 1)|0;
  $197 = HEAP16[$outline>>1]|0;
  $198 = $197 << 16 >> 16;
  $199 = ($196|0)<($198|0);
  if ($199) {
   $first$020 = $195;$n$019 = $196;
  } else {
   $$0 = 0;
   label = 29;
   break;
  }
 }
 if ((label|0) == 29) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _FT_Outline_Check($outline) {
 $outline = $outline|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $end0$0$lcssa = 0, $end0$05 = 0, $n$06 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($outline|0)==(0|0);
 L1: do {
  if (!($0)) {
   $1 = ((($outline)) + 2|0);
   $2 = HEAP16[$1>>1]|0;
   $3 = $2 << 16 >> 16;
   $4 = HEAP16[$outline>>1]|0;
   $5 = $4 << 16 >> 16;
   $6 = $4 | $2;
   $7 = ($6<<16>>16)==(0);
   if ($7) {
    $$0 = 0;
    return ($$0|0);
   }
   $8 = ($2<<16>>16)<(1);
   $9 = ($4<<16>>16)<(1);
   $or$cond3 = $8 | $9;
   if (!($or$cond3)) {
    $10 = ($4<<16>>16)>(0);
    if ($10) {
     $11 = ((($outline)) + 12|0);
     $12 = HEAP32[$11>>2]|0;
     $end0$05 = -1;$n$06 = 0;
     while(1) {
      $15 = (($12) + ($n$06<<1)|0);
      $16 = HEAP16[$15>>1]|0;
      $17 = $16 << 16 >> 16;
      $18 = ($17|0)>($end0$05|0);
      $19 = ($16<<16>>16)<($2<<16>>16);
      $or$cond = $19 & $18;
      $14 = (($n$06) + 1)|0;
      if (!($or$cond)) {
       break L1;
      }
      $13 = ($14|0)<($5|0);
      if ($13) {
       $end0$05 = $17;$n$06 = $14;
      } else {
       $end0$0$lcssa = $17;
       break;
      }
     }
    } else {
     $end0$0$lcssa = -1;
    }
    $20 = (($3) + -1)|0;
    $21 = ($end0$0$lcssa|0)==($20|0);
    if ($21) {
     $$0 = 0;
     return ($$0|0);
    }
   }
  }
 } while(0);
 $$0 = 6;
 return ($$0|0);
}
function _FT_Outline_Get_CBox($outline,$acbox) {
 $outline = $outline|0;
 $acbox = $acbox|0;
 var $$xMin$0 = 0, $$yMin$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $14$phi = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vec$0 = 0, $vec$02 = 0, $vec$08 = 0, $xMax$05 = 0, $xMax$1 = 0, $xMax$2 = 0, $xMin$07 = 0, $xMin$2 = 0, $yMax$03 = 0, $yMax$1 = 0;
 var $yMax$2 = 0, $yMin$06 = 0, $yMin$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($outline|0)!=(0|0);
 $1 = ($acbox|0)!=(0|0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  return;
 }
 $2 = ((($outline)) + 2|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  $xMax$2 = 0;$xMin$2 = 0;$yMax$2 = 0;$yMin$2 = 0;
 } else {
  $5 = $3 << 16 >> 16;
  $6 = ((($outline)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($5<<3)|0);
  $9 = HEAP32[$7>>2]|0;
  $10 = ((($7)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($3<<16>>16)>(1);
  if ($12) {
   $vec$02 = ((($7)) + 8|0);
   $14 = $7;$vec$08 = $vec$02;$xMax$05 = $9;$xMin$07 = $9;$yMax$03 = $11;$yMin$06 = $11;
   while(1) {
    $13 = ((($14)) + 8|0);
    $15 = HEAP32[$13>>2]|0;
    $16 = ($15|0)<($xMin$07|0);
    $$xMin$0 = $16 ? $15 : $xMin$07;
    $17 = ($15|0)>($xMax$05|0);
    $xMax$1 = $17 ? $15 : $xMax$05;
    $18 = ((($14)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)<($yMin$06|0);
    $$yMin$0 = $20 ? $19 : $yMin$06;
    $21 = ($19|0)>($yMax$03|0);
    $yMax$1 = $21 ? $19 : $yMax$03;
    $vec$0 = ((($vec$08)) + 8|0);
    $22 = ($vec$0>>>0)<($8>>>0);
    if ($22) {
     $14$phi = $vec$08;$vec$08 = $vec$0;$xMax$05 = $xMax$1;$xMin$07 = $$xMin$0;$yMax$03 = $yMax$1;$yMin$06 = $$yMin$0;$14 = $14$phi;
    } else {
     $xMax$2 = $xMax$1;$xMin$2 = $$xMin$0;$yMax$2 = $yMax$1;$yMin$2 = $$yMin$0;
     break;
    }
   }
  } else {
   $xMax$2 = $9;$xMin$2 = $9;$yMax$2 = $11;$yMin$2 = $11;
  }
 }
 HEAP32[$acbox>>2] = $xMin$2;
 $23 = ((($acbox)) + 8|0);
 HEAP32[$23>>2] = $xMax$2;
 $24 = ((($acbox)) + 4|0);
 HEAP32[$24>>2] = $yMin$2;
 $25 = ((($acbox)) + 12|0);
 HEAP32[$25>>2] = $yMax$2;
 return;
}
function _FT_Outline_Translate($outline,$xOffset,$yOffset) {
 $outline = $outline|0;
 $xOffset = $xOffset|0;
 $yOffset = $yOffset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$01 = 0, $vec$02 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($outline|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($outline)) + 2|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)>(0);
 if (!($3)) {
  return;
 }
 $4 = ((($outline)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP16[$1>>1]|0;
 $7 = $6 << 16 >> 16;
 $n$01 = 0;$vec$02 = $5;
 while(1) {
  $8 = HEAP32[$vec$02>>2]|0;
  $9 = (($8) + ($xOffset))|0;
  HEAP32[$vec$02>>2] = $9;
  $10 = ((($vec$02)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($yOffset))|0;
  HEAP32[$10>>2] = $12;
  $13 = ((($vec$02)) + 8|0);
  $14 = (($n$01) + 1)<<16>>16;
  $15 = $14&65535;
  $16 = ($15|0)<($7|0);
  if ($16) {
   $n$01 = $14;$vec$02 = $13;
  } else {
   break;
  }
 }
 return;
}
function _FT_Vector_Transform($vector,$matrix) {
 $vector = $vector|0;
 $matrix = $matrix|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($vector|0)!=(0|0);
 $1 = ($matrix|0)!=(0|0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  return;
 }
 $2 = HEAP32[$vector>>2]|0;
 $3 = HEAP32[$matrix>>2]|0;
 $4 = (_FT_MulFix($2,$3)|0);
 $5 = ((($vector)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($matrix)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_FT_MulFix($6,$8)|0);
 $10 = (($9) + ($4))|0;
 $11 = HEAP32[$vector>>2]|0;
 $12 = ((($matrix)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_FT_MulFix($11,$13)|0);
 $15 = HEAP32[$5>>2]|0;
 $16 = ((($matrix)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_FT_MulFix($15,$17)|0);
 $19 = (($18) + ($14))|0;
 HEAP32[$vector>>2] = $10;
 HEAP32[$5>>2] = $19;
 return;
}
function _FT_Outline_Transform($outline,$matrix) {
 $outline = $outline|0;
 $matrix = $matrix|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vec$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($outline|0)!=(0|0);
 $1 = ($matrix|0)!=(0|0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  return;
 }
 $2 = ((($outline)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($outline)) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = (($3) + ($6<<3)|0);
 $8 = ($5<<16>>16)>(0);
 if ($8) {
  $vec$02 = $3;
 } else {
  return;
 }
 while(1) {
  _FT_Vector_Transform($vec$02,$matrix);
  $9 = ((($vec$02)) + 8|0);
  $10 = ($9>>>0)<($7>>>0);
  if ($10) {
   $vec$02 = $9;
  } else {
   break;
  }
 }
 return;
}
function _FT_Outline_Get_Orientation($outline) {
 $outline = $outline|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $area$0$lcssa12 = 0, $area$07 = 0;
 var $area$1$lcssa = 0, $area$1$lcssa$lcssa = 0, $area$14 = 0, $c$05 = 0, $first$06 = 0, $n$03 = 0, $v_prev$sroa$0$01 = 0, $v_prev$sroa$3$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($outline|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($outline)) + 2|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)<(1);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($outline)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP16[$outline>>1]|0;
 $7 = ($6<<16>>16)>(0);
 if ($7) {
  $8 = ((($outline)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP16[$outline>>1]|0;
  $11 = $10 << 16 >> 16;
  $area$07 = 0;$c$05 = 0;$first$06 = 0;
  while(1) {
   $12 = (($9) + ($c$05<<1)|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = $13 << 16 >> 16;
   $15 = ($first$06|0)>($14|0);
   if ($15) {
    $area$1$lcssa = $area$07;
   } else {
    $16 = (((($5) + ($14<<3)|0)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($5) + ($14<<3)|0);
    $19 = HEAP32[$18>>2]|0;
    $area$14 = $area$07;$n$03 = $first$06;$v_prev$sroa$0$01 = $19;$v_prev$sroa$3$02 = $17;
    while(1) {
     $20 = (($5) + ($n$03<<3)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (((($5) + ($n$03<<3)|0)) + 4|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = (($23) - ($v_prev$sroa$3$02))|0;
     $25 = (($21) + ($v_prev$sroa$0$01))|0;
     $26 = Math_imul($24, $25)|0;
     $27 = (($26) + ($area$14))|0;
     $28 = (($n$03) + 1)|0;
     $29 = ($n$03|0)<($14|0);
     if ($29) {
      $area$14 = $27;$n$03 = $28;$v_prev$sroa$0$01 = $21;$v_prev$sroa$3$02 = $23;
     } else {
      $area$1$lcssa = $27;
      break;
     }
    }
   }
   $30 = (($14) + 1)|0;
   $31 = (($c$05) + 1)|0;
   $32 = ($31|0)<($11|0);
   if ($32) {
    $area$07 = $area$1$lcssa;$c$05 = $31;$first$06 = $30;
   } else {
    $area$1$lcssa$lcssa = $area$1$lcssa;
    break;
   }
  }
  $33 = ($area$1$lcssa$lcssa|0)>(0);
  if ($33) {
   $$0 = 1;
   return ($$0|0);
  } else {
   $area$0$lcssa12 = $area$1$lcssa$lcssa;
  }
 } else {
  $area$0$lcssa12 = 0;
 }
 $34 = $area$0$lcssa12 >> 31;
 $35 = (($34) + 2)|0;
 $36 = $35 & -2;
 $$0 = $36;
 return ($$0|0);
}
function _FT_GlyphLoader_New($memory,$aloader) {
 $memory = $memory|0;
 $aloader = $aloader|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (_ft_mem_alloc($memory,96,$error)|0);
 $1 = HEAP32[$error>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  HEAP32[$0>>2] = $memory;
  HEAP32[$aloader>>2] = $0;
 }
 $3 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _FT_GlyphLoader_Rewind($loader) {
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 20|0);
 $1 = ((($loader)) + 56|0);
 $2 = ((($loader)) + 22|0);
 HEAP16[$2>>1] = 0;
 HEAP16[$0>>1] = 0;
 $3 = ((($loader)) + 48|0);
 HEAP32[$3>>2] = 0;
 dest=$1; src=$0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _FT_GlyphLoader_Reset($loader) {
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$loader>>2]|0;
 $1 = ((($loader)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 _ft_mem_free($0,$2);
 HEAP32[$1>>2] = 0;
 $3 = ((($loader)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 _ft_mem_free($0,$4);
 HEAP32[$3>>2] = 0;
 $5 = ((($loader)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 _ft_mem_free($0,$6);
 HEAP32[$5>>2] = 0;
 $7 = ((($loader)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 _ft_mem_free($0,$8);
 HEAP32[$7>>2] = 0;
 $9 = ((($loader)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 _ft_mem_free($0,$10);
 HEAP32[$9>>2] = 0;
 $11 = ((($loader)) + 44|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($loader)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($loader)) + 8|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($loader)) + 12|0);
 HEAP32[$14>>2] = 0;
 _FT_GlyphLoader_Rewind($loader);
 return;
}
function _FT_GlyphLoader_Done($loader) {
 $loader = $loader|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($loader|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$loader>>2]|0;
 _FT_GlyphLoader_Reset($loader);
 _ft_mem_free($1,$loader);
 return;
}
function _FT_GlyphLoader_CreateExtra($loader) {
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = HEAP32[$loader>>2]|0;
 $1 = ((($loader)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 << 1;
 $4 = (_ft_mem_realloc($0,8,0,$3,0,$error)|0);
 $5 = ((($loader)) + 40|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$error>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $13 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($13|0);
 }
 $8 = ((($loader)) + 16|0);
 HEAP8[$8>>0] = 1;
 $9 = HEAP32[$5>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 $11 = (($9) + ($10<<3)|0);
 $12 = ((($loader)) + 44|0);
 HEAP32[$12>>2] = $11;
 _FT_GlyphLoader_Adjust_Points($loader);
 $13 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _FT_GlyphLoader_CheckPoints($loader,$n_points,$n_contours) {
 $loader = $loader|0;
 $n_points = $n_points|0;
 $n_contours = $n_contours|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $adjust$0 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = HEAP32[$loader>>2]|0;
 HEAP32[$error>>2] = 0;
 $1 = ((($loader)) + 22|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = ((($loader)) + 58|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = (($3) + ($n_points))|0;
 $8 = (($7) + ($6))|0;
 $9 = ((($loader)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 do {
  if ($11) {
   $12 = (($8) + 7)|0;
   $13 = $12 & -8;
   $14 = ($13>>>0)>(32767);
   if ($14) {
    $$0 = 10;
    STACKTOP = sp;return ($$0|0);
   }
   $15 = ((($loader)) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_ft_mem_realloc($0,8,$10,$13,$16,$error)|0);
   HEAP32[$15>>2] = $17;
   $18 = HEAP32[$error>>2]|0;
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = ((($loader)) + 28|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (_ft_mem_realloc($0,1,$10,$13,$21,$error)|0);
    HEAP32[$20>>2] = $22;
    $23 = HEAP32[$error>>2]|0;
    $24 = ($23|0)==(0);
    if ($24) {
     $25 = ((($loader)) + 16|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(0);
     if (!($27)) {
      $28 = $10 << 1;
      $29 = $13 << 1;
      $30 = ((($loader)) + 40|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (_ft_mem_realloc($0,8,$28,$29,$31,$error)|0);
      HEAP32[$30>>2] = $32;
      $33 = HEAP32[$error>>2]|0;
      $34 = ($33|0)==(0);
      if (!($34)) {
       break;
      }
      $35 = (($32) + ($13<<3)|0);
      $36 = (($32) + ($10<<3)|0);
      $37 = $10 << 3;
      _memmove(($35|0),($36|0),($37|0))|0;
      $38 = HEAP32[$30>>2]|0;
      $39 = (($38) + ($13<<3)|0);
      $40 = ((($loader)) + 44|0);
      HEAP32[$40>>2] = $39;
     }
     HEAP32[$9>>2] = $13;
     $adjust$0 = 1;
     label = 9;
    }
   }
  } else {
   $adjust$0 = 0;
   label = 9;
  }
 } while(0);
 do {
  if ((label|0) == 9) {
   $41 = ((($loader)) + 8|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($loader)) + 20|0);
   $44 = HEAP16[$43>>1]|0;
   $45 = $44 << 16 >> 16;
   $46 = ((($loader)) + 56|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = $47 << 16 >> 16;
   $49 = (($45) + ($n_contours))|0;
   $50 = (($49) + ($48))|0;
   $51 = ($50>>>0)>($42>>>0);
   if ($51) {
    $52 = (($50) + 3)|0;
    $53 = $52 & -4;
    $54 = ($53>>>0)>(32767);
    if ($54) {
     $$0 = 10;
     STACKTOP = sp;return ($$0|0);
    }
    $55 = ((($loader)) + 32|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (_ft_mem_realloc($0,2,$42,$53,$56,$error)|0);
    HEAP32[$55>>2] = $57;
    $58 = HEAP32[$error>>2]|0;
    $59 = ($58|0)==(0);
    if (!($59)) {
     break;
    }
    HEAP32[$41>>2] = $53;
   } else {
    $60 = ($adjust$0<<24>>24)==(0);
    if ($60) {
     break;
    }
   }
   _FT_GlyphLoader_Adjust_Points($loader);
  }
 } while(0);
 $61 = HEAP32[$error>>2]|0;
 $$0 = $61;
 STACKTOP = sp;return ($$0|0);
}
function _FT_GlyphLoader_CheckSubGlyphs($loader,$n_subs) {
 $loader = $loader|0;
 $n_subs = $n_subs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = HEAP32[$loader>>2]|0;
 HEAP32[$error>>2] = 0;
 $1 = ((($loader)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($loader)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + ($n_subs))|0;
 $6 = (($5) + ($4))|0;
 $7 = ((($loader)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 if (!($9)) {
  $17 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 $10 = (($6) + 1)|0;
 $11 = $10 & -2;
 $12 = ((($loader)) + 52|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_ft_mem_realloc($0,32,$8,$11,$13,$error)|0);
 HEAP32[$12>>2] = $14;
 $15 = HEAP32[$error>>2]|0;
 $16 = ($15|0)==(0);
 if (!($16)) {
  $17 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 HEAP32[$7>>2] = $11;
 _FT_GlyphLoader_Adjust_Subglyphs($loader);
 $17 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _FT_GlyphLoader_Prepare($loader) {
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 58|0);
 HEAP16[$0>>1] = 0;
 $1 = ((($loader)) + 56|0);
 HEAP16[$1>>1] = 0;
 $2 = ((($loader)) + 84|0);
 HEAP32[$2>>2] = 0;
 _FT_GlyphLoader_Adjust_Points($loader);
 _FT_GlyphLoader_Adjust_Subglyphs($loader);
 return;
}
function _FT_GlyphLoader_Add($loader) {
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($loader|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($loader)) + 56|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = ((($loader)) + 22|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = ((($loader)) + 58|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = (($9) + ($6))|0;
 $11 = $10&65535;
 HEAP16[$4>>1] = $11;
 $12 = ((($loader)) + 20|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = HEAP16[$1>>1]|0;
 $16 = $15&65535;
 $17 = (($16) + ($14))|0;
 $18 = $17&65535;
 HEAP16[$12>>1] = $18;
 $19 = ((($loader)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($loader)) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($20))|0;
 HEAP32[$21>>2] = $23;
 $24 = ($2<<16>>16)==(0);
 if (!($24)) {
  $25 = ((($loader)) + 68|0);
  $26 = HEAP32[$25>>2]|0;
  $n$01 = 0;
  while(1) {
   $27 = (($26) + ($n$01<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28&65535;
   $30 = (($29) + ($6))|0;
   $31 = $30&65535;
   HEAP16[$27>>1] = $31;
   $32 = (($n$01) + 1)|0;
   $33 = ($32>>>0)<($3>>>0);
   if ($33) {
    $n$01 = $32;
   } else {
    break;
   }
  }
 }
 _FT_GlyphLoader_Prepare($loader);
 return;
}
function _FT_GlyphLoader_CopyPoints($target,$source) {
 $target = $target|0;
 $source = $source|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($source)) + 22|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ((($source)) + 20|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = (_FT_GlyphLoader_CheckPoints($target,$2,$5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  return ($6|0);
 }
 $8 = ((($target)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($source)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2 << 3;
 _memcpy(($9|0),($11|0),($12|0))|0;
 $13 = ((($target)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($source)) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 _memcpy(($14|0),($16|0),($2|0))|0;
 $17 = ((($target)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($source)) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $5 << 1;
 _memcpy(($18|0),($20|0),($21|0))|0;
 $22 = ((($target)) + 16|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(0);
 if (!($24)) {
  $25 = ((($source)) + 16|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(0);
  if (!($27)) {
   $28 = ((($target)) + 40|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($source)) + 40|0);
   $31 = HEAP32[$30>>2]|0;
   _memcpy(($29|0),($31|0),($12|0))|0;
   $32 = ((($target)) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($source)) + 44|0);
   $35 = HEAP32[$34>>2]|0;
   _memcpy(($33|0),($35|0),($12|0))|0;
  }
 }
 $36 = ((($target)) + 22|0);
 HEAP16[$36>>1] = $1;
 $37 = ((($target)) + 20|0);
 HEAP16[$37>>1] = $4;
 _FT_GlyphLoader_Adjust_Points($target);
 return ($6|0);
}
function _FT_GlyphLoader_Adjust_Points($loader) {
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($loader)) + 22|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = (($1) + ($4<<3)|0);
 $6 = ((($loader)) + 60|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($loader)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP16[$2>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = (($8) + ($10)|0);
 $12 = ((($loader)) + 64|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($loader)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($loader)) + 20|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 << 16 >> 16;
 $18 = (($14) + ($17<<1)|0);
 $19 = ((($loader)) + 68|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($loader)) + 16|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  return;
 }
 $23 = ((($loader)) + 40|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP16[$2>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = (($24) + ($26<<3)|0);
 $28 = ((($loader)) + 76|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($loader)) + 44|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP16[$2>>1]|0;
 $32 = $31 << 16 >> 16;
 $33 = (($30) + ($32<<3)|0);
 $34 = ((($loader)) + 80|0);
 HEAP32[$34>>2] = $33;
 return;
}
function _FT_GlyphLoader_Adjust_Subglyphs($loader) {
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($loader)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3<<5)|0);
 $5 = ((($loader)) + 88|0);
 HEAP32[$5>>2] = $4;
 return;
}
function _FT_RoundFix($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)>(-1);
 if ($0) {
  $1 = (($a) + 32768)|0;
  $2 = $1 & -65536;
  $6 = $2;
  return ($6|0);
 } else {
  $3 = (32768 - ($a))|0;
  $4 = $3 & -65536;
  $5 = (0 - ($4))|0;
  $6 = $5;
  return ($6|0);
 }
 return (0)|0;
}
function _FT_MulDiv($a,$b,$c) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $$0 = 0, $$06 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond7 = 0, $temp = 0, $temp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $temp = sp + 8|0;
 $temp2 = sp;
 $0 = ($a|0)==(0);
 $1 = ($b|0)==($c|0);
 $or$cond7 = $0 | $1;
 if ($or$cond7) {
  $$06 = $a;
  STACKTOP = sp;return ($$06|0);
 }
 $2 = ($a|0)<(0);
 $3 = (0 - ($a))|0;
 $4 = $2 ? $3 : $a;
 $5 = $b ^ $a;
 $6 = ($b|0)<(0);
 $7 = (0 - ($b))|0;
 $8 = $6 ? $7 : $b;
 $9 = $5 ^ $c;
 $10 = ($c|0)<(0);
 $11 = (0 - ($c))|0;
 $12 = $10 ? $11 : $c;
 $13 = ($4|0)<(46341);
 $14 = ($8|0)<(46341);
 $or$cond = $13 & $14;
 $$off = (($12) + -1)|0;
 $15 = ($$off>>>0)<(176095);
 $16 = $or$cond & $15;
 if ($16) {
  $17 = Math_imul($8, $4)|0;
  $18 = $12 >> 1;
  $19 = (($18) + ($17))|0;
  $20 = (($19|0) / ($12|0))&-1;
  $$0 = $20;
 } else {
  $21 = ($12|0)>(0);
  if ($21) {
   _ft_multo64($4,$8,$temp);
   $22 = ((($temp2)) + 4|0);
   HEAP32[$22>>2] = 0;
   $23 = $12 >> 1;
   HEAP32[$temp2>>2] = $23;
   _FT_Add64($temp,$temp2,$temp);
   $24 = ((($temp)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$temp>>2]|0;
   $27 = (_ft_div64by32($25,$26,$12)|0);
   $$0 = $27;
  } else {
   $$0 = 2147483647;
  }
 }
 $28 = ($9|0)<(0);
 $29 = (0 - ($$0))|0;
 $30 = $28 ? $29 : $$0;
 $$06 = $30;
 STACKTOP = sp;return ($$06|0);
}
function _FT_MulDiv_No_Round($a,$b,$c) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $$0 = 0, $$04 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $temp = sp;
 $0 = ($a|0)==(0);
 $1 = ($b|0)==($c|0);
 $or$cond5 = $0 | $1;
 if ($or$cond5) {
  $$04 = $a;
  STACKTOP = sp;return ($$04|0);
 }
 $2 = ($a|0)<(0);
 $3 = (0 - ($a))|0;
 $4 = $2 ? $3 : $a;
 $5 = $b ^ $a;
 $6 = ($b|0)<(0);
 $7 = (0 - ($b))|0;
 $8 = $6 ? $7 : $b;
 $9 = $5 ^ $c;
 $10 = ($c|0)<(0);
 $11 = (0 - ($c))|0;
 $12 = $10 ? $11 : $c;
 $13 = ($4|0)<(46341);
 $14 = ($8|0)<(46341);
 $or$cond = $13 & $14;
 $15 = ($12|0)>(0);
 $or$cond3 = $or$cond & $15;
 if ($or$cond3) {
  $16 = Math_imul($8, $4)|0;
  $17 = (($16|0) / ($12|0))&-1;
  $$0 = $17;
 } else {
  if ($15) {
   _ft_multo64($4,$8,$temp);
   $18 = ((($temp)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$temp>>2]|0;
   $21 = (_ft_div64by32($19,$20,$12)|0);
   $$0 = $21;
  } else {
   $$0 = 2147483647;
  }
 }
 $22 = ($9|0)<(0);
 $23 = (0 - ($$0))|0;
 $24 = $22 ? $23 : $$0;
 $$04 = $24;
 STACKTOP = sp;return ($$04|0);
}
function _FT_MulFix($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $ua$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($a|0)==(0);
 $1 = ($b|0)==(65536);
 $or$cond = $0 | $1;
 if ($or$cond) {
  $$0 = $a;
  return ($$0|0);
 }
 $2 = ($a|0)<(0);
 $3 = (0 - ($a))|0;
 $4 = $2 ? $3 : $a;
 $5 = $b ^ $a;
 $6 = ($b|0)<(0);
 $7 = (0 - ($b))|0;
 $8 = $6 ? $7 : $b;
 $9 = ($4>>>0)<(2049);
 $10 = ($8>>>0)<(1048577);
 $or$cond3 = $9 & $10;
 if ($or$cond3) {
  $11 = Math_imul($8, $4)|0;
  $12 = (($11) + 32768)|0;
  $13 = $12 >>> 16;
  $ua$0 = $13;
 } else {
  $14 = $4 & 65535;
  $15 = $4 >>> 16;
  $16 = Math_imul($15, $8)|0;
  $17 = $8 >>> 16;
  $18 = Math_imul($17, $14)|0;
  $19 = (($18) + ($16))|0;
  $20 = $8 & 65535;
  $21 = Math_imul($20, $14)|0;
  $22 = (($21) + 32768)|0;
  $23 = $22 >>> 16;
  $24 = (($19) + ($23))|0;
  $ua$0 = $24;
 }
 $25 = ($5|0)<(0);
 $26 = (0 - ($ua$0))|0;
 $27 = $25 ? $26 : $ua$0;
 $$0 = $27;
 return ($$0|0);
}
function _FT_DivFix($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $q$0 = 0, $temp = 0, $temp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $temp = sp + 8|0;
 $temp2 = sp;
 $0 = ($a|0)<(0);
 $1 = (0 - ($a))|0;
 $2 = $0 ? $1 : $a;
 $3 = $b ^ $a;
 $4 = ($b|0)<(0);
 $5 = (0 - ($b))|0;
 $6 = $4 ? $5 : $b;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $q$0 = 2147483647;
  } else {
   $8 = $2 >> 16;
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = $2 << 16;
    $11 = $6 >> 1;
    $12 = (($11) + ($10))|0;
    $13 = (($12>>>0) / ($6>>>0))&-1;
    $q$0 = $13;
    break;
   } else {
    $14 = ((($temp)) + 4|0);
    HEAP32[$14>>2] = $8;
    $15 = $2 << 16;
    HEAP32[$temp>>2] = $15;
    $16 = ((($temp2)) + 4|0);
    HEAP32[$16>>2] = 0;
    $17 = $6 >> 1;
    HEAP32[$temp2>>2] = $17;
    _FT_Add64($temp,$temp2,$temp);
    $18 = HEAP32[$14>>2]|0;
    $19 = HEAP32[$temp>>2]|0;
    $20 = (_ft_div64by32($18,$19,$6)|0);
    $q$0 = $20;
    break;
   }
  }
 } while(0);
 $21 = ($3|0)<(0);
 $22 = (0 - ($q$0))|0;
 $23 = $21 ? $22 : $q$0;
 STACKTOP = sp;return ($23|0);
}
function _FT_Matrix_Invert($matrix) {
 $matrix = $matrix|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($matrix|0)==(0|0);
 if ($0) {
  $$0 = 6;
  return ($$0|0);
 }
 $1 = HEAP32[$matrix>>2]|0;
 $2 = ((($matrix)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_FT_MulFix($1,$3)|0);
 $5 = ((($matrix)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($matrix)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_FT_MulFix($6,$8)|0);
 $10 = (($4) - ($9))|0;
 $11 = ($4|0)==($9|0);
 if ($11) {
  $$0 = 6;
  return ($$0|0);
 }
 $12 = (_FT_DivFix($6,$10)|0);
 $13 = (0 - ($12))|0;
 HEAP32[$5>>2] = $13;
 $14 = HEAP32[$7>>2]|0;
 $15 = (_FT_DivFix($14,$10)|0);
 $16 = (0 - ($15))|0;
 HEAP32[$7>>2] = $16;
 $17 = HEAP32[$matrix>>2]|0;
 $18 = HEAP32[$2>>2]|0;
 $19 = (_FT_DivFix($18,$10)|0);
 HEAP32[$matrix>>2] = $19;
 $20 = (_FT_DivFix($17,$10)|0);
 HEAP32[$2>>2] = $20;
 $$0 = 0;
 return ($$0|0);
}
function _FT_Matrix_Multiply_Scaled($a,$b,$scaling) {
 $a = $a|0;
 $b = $b|0;
 $scaling = $scaling|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $scaling << 16;
 $1 = ($a|0)!=(0|0);
 $2 = ($b|0)!=(0|0);
 $or$cond = $1 & $2;
 if (!($or$cond)) {
  return;
 }
 $3 = HEAP32[$a>>2]|0;
 $4 = HEAP32[$b>>2]|0;
 $5 = (_FT_MulDiv($3,$4,$0)|0);
 $6 = ((($a)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($b)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_FT_MulDiv($7,$9,$0)|0);
 $11 = (($10) + ($5))|0;
 $12 = HEAP32[$a>>2]|0;
 $13 = ((($b)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_FT_MulDiv($12,$14,$0)|0);
 $16 = HEAP32[$6>>2]|0;
 $17 = ((($b)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_FT_MulDiv($16,$18,$0)|0);
 $20 = (($19) + ($15))|0;
 $21 = ((($a)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$b>>2]|0;
 $24 = (_FT_MulDiv($22,$23,$0)|0);
 $25 = ((($a)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = HEAP32[$8>>2]|0;
 $28 = (_FT_MulDiv($26,$27,$0)|0);
 $29 = (($28) + ($24))|0;
 $30 = HEAP32[$21>>2]|0;
 $31 = HEAP32[$13>>2]|0;
 $32 = (_FT_MulDiv($30,$31,$0)|0);
 $33 = HEAP32[$25>>2]|0;
 $34 = HEAP32[$17>>2]|0;
 $35 = (_FT_MulDiv($33,$34,$0)|0);
 $36 = (($35) + ($32))|0;
 HEAP32[$b>>2] = $11;
 HEAP32[$13>>2] = $20;
 HEAP32[$8>>2] = $29;
 HEAP32[$17>>2] = $36;
 return;
}
function _FT_Vector_Transform_Scaled($vector,$matrix,$scaling) {
 $vector = $vector|0;
 $matrix = $matrix|0;
 $scaling = $scaling|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $scaling << 16;
 $1 = ($vector|0)!=(0|0);
 $2 = ($matrix|0)!=(0|0);
 $or$cond = $1 & $2;
 if (!($or$cond)) {
  return;
 }
 $3 = HEAP32[$vector>>2]|0;
 $4 = HEAP32[$matrix>>2]|0;
 $5 = (_FT_MulDiv($3,$4,$0)|0);
 $6 = ((($vector)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($matrix)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_FT_MulDiv($7,$9,$0)|0);
 $11 = (($10) + ($5))|0;
 $12 = HEAP32[$vector>>2]|0;
 $13 = ((($matrix)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_FT_MulDiv($12,$14,$0)|0);
 $16 = HEAP32[$6>>2]|0;
 $17 = ((($matrix)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_FT_MulDiv($16,$18,$0)|0);
 $20 = (($19) + ($15))|0;
 HEAP32[$vector>>2] = $11;
 HEAP32[$6>>2] = $20;
 return;
}
function _FT_SqrtFixed($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0 = 0, $rem_hi$0 = 0, $rem_hi$1 = 0, $rem_lo$0 = 0, $root$0 = 0, $root$1 = 0;
 var $root$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x|0)>(0);
 if ($0) {
  $count$0 = 24;$rem_hi$0 = 0;$rem_lo$0 = $x;$root$0 = 0;
 } else {
  $root$2 = 0;
  return ($root$2|0);
 }
 while(1) {
  $1 = $rem_hi$0 << 2;
  $2 = $rem_lo$0 >>> 30;
  $3 = $2 | $1;
  $4 = $rem_lo$0 << 2;
  $5 = $root$0 << 1;
  $6 = $root$0 << 2;
  $7 = $6 | 1;
  $8 = ($3>>>0)<($7>>>0);
  $9 = $8 ? 0 : $7;
  $rem_hi$1 = (($3) - ($9))|0;
  $10 = $8&1;
  $11 = $10 | $5;
  $root$1 = $11 ^ 1;
  $12 = (($count$0) + -1)|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $root$2 = $root$1;
   break;
  } else {
   $count$0 = $12;$rem_hi$0 = $rem_hi$1;$rem_lo$0 = $4;$root$0 = $root$1;
  }
 }
 return ($root$2|0);
}
function _ft_corner_orientation($in_x,$in_y,$out_x,$out_y) {
 $in_x = $in_x|0;
 $in_y = $in_y|0;
 $out_x = $out_x|0;
 $out_y = $out_y|0;
 var $$ = 0, $$in_x = 0, $$out_x = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $in_y$ = 0, $out_y$ = 0, $result$0 = 0, $z1 = 0, $z2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $z1 = sp + 8|0;
 $z2 = sp;
 $0 = ($in_y|0)==(0);
 if ($0) {
  $1 = ($in_x|0)>(-1);
  $2 = (0 - ($out_y))|0;
  $out_y$ = $1 ? $out_y : $2;
  STACKTOP = sp;return ($out_y$|0);
 }
 $3 = ($in_x|0)==(0);
 do {
  if ($3) {
   $4 = ($in_y|0)>(-1);
   $5 = (0 - ($out_x))|0;
   $$out_x = $4 ? $5 : $out_x;
   $result$0 = $$out_x;
  } else {
   $6 = ($out_y|0)==(0);
   if ($6) {
    $7 = ($out_x|0)>(-1);
    $8 = (0 - ($in_y))|0;
    $in_y$ = $7 ? $in_y : $8;
    $result$0 = $in_y$;
    break;
   }
   $9 = ($out_x|0)==(0);
   if ($9) {
    $10 = ($out_y|0)>(-1);
    $11 = (0 - ($in_x))|0;
    $$in_x = $10 ? $11 : $in_x;
    $result$0 = $$in_x;
    break;
   }
   _ft_multo64($in_x,$out_y,$z1);
   _ft_multo64($in_y,$out_x,$z2);
   $12 = ((($z1)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($z2)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)>($15>>>0);
   if ($16) {
    $result$0 = 1;
   } else {
    $17 = ($13>>>0)<($15>>>0);
    if ($17) {
     $result$0 = -1;
    } else {
     $18 = HEAP32[$z1>>2]|0;
     $19 = HEAP32[$z2>>2]|0;
     $20 = ($18>>>0)>($19>>>0);
     if ($20) {
      $result$0 = 1;
     } else {
      $21 = ($18>>>0)<($19>>>0);
      $$ = $21 << 31 >> 31;
      $result$0 = $$;
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($result$0|0);
}
function _ft_corner_is_flat($in_x,$in_y,$out_x,$out_y) {
 $in_x = $in_x|0;
 $in_y = $in_y|0;
 $out_x = $out_x|0;
 $out_y = $out_y|0;
 var $$ = 0, $$in_x = 0, $$out_x = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ay$0 = 0, $ay$1 = 0, $ay$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($in_x|0)<(0);
 $1 = (0 - ($in_x))|0;
 $$in_x = $0 ? $1 : $in_x;
 $2 = ($in_y|0)<(0);
 $3 = (0 - ($in_y))|0;
 $ay$0 = $2 ? $3 : $in_y;
 $4 = ($out_x|0)<(0);
 $5 = (0 - ($out_x))|0;
 $$out_x = $4 ? $5 : $out_x;
 $6 = ($out_y|0)<(0);
 $7 = (0 - ($out_y))|0;
 $ay$1 = $6 ? $7 : $out_y;
 $8 = (($out_x) + ($in_x))|0;
 $9 = ($8|0)<(0);
 $10 = (0 - ($8))|0;
 $$ = $9 ? $10 : $8;
 $11 = (($out_y) + ($in_y))|0;
 $12 = ($11|0)<(0);
 $13 = (0 - ($11))|0;
 $ay$2 = $12 ? $13 : $11;
 $14 = (($ay$2) + ($$))|0;
 $15 = (($ay$0) + ($$in_x))|0;
 $16 = (($15) + ($$out_x))|0;
 $17 = (($16) + ($ay$1))|0;
 $18 = (($17) - ($14))|0;
 $19 = $14 >> 4;
 $20 = ($18|0)<($19|0);
 $21 = $20&1;
 return ($21|0);
}
function _ft_multo64($x,$y,$z) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x & 65535;
 $1 = $x >>> 16;
 $2 = $y & 65535;
 $3 = $y >>> 16;
 $4 = Math_imul($2, $0)|0;
 $5 = Math_imul($3, $0)|0;
 $6 = Math_imul($2, $1)|0;
 $7 = Math_imul($3, $1)|0;
 $8 = (($5) + ($6))|0;
 $9 = ($8>>>0)<($6>>>0);
 $10 = $9&1;
 $11 = $10 << 16;
 $12 = $8 >>> 16;
 $13 = $8 << 16;
 $14 = (($13) + ($4))|0;
 $15 = ($14>>>0)<($13>>>0);
 $16 = $15&1;
 $17 = (($12) + ($7))|0;
 $18 = (($17) + ($11))|0;
 $19 = (($18) + ($16))|0;
 HEAP32[$z>>2] = $14;
 $20 = ((($z)) + 4|0);
 HEAP32[$20>>2] = $19;
 return;
}
function _FT_Add64($x,$y,$z) {
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$x>>2]|0;
 $1 = HEAP32[$y>>2]|0;
 $2 = (($1) + ($0))|0;
 $3 = ((($x)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($y)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4))|0;
 $8 = ($2>>>0)<($0>>>0);
 $9 = $8&1;
 $10 = (($7) + ($9))|0;
 HEAP32[$z>>2] = $2;
 $11 = ((($z)) + 4|0);
 HEAP32[$11>>2] = $10;
 return;
}
function _ft_div64by32($hi,$lo,$y) {
 $hi = $hi|0;
 $lo = $lo|0;
 $y = $y|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $q$0 = 0, $q$1 = 0, $r$0 = 0, $r$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($hi>>>0)<($y>>>0);
 if ($0) {
  $$01 = $lo;$i$0 = 32;$q$0 = 0;$r$0 = $hi;
 } else {
  $$0 = 2147483647;
  return ($$0|0);
 }
 while(1) {
  $1 = $r$0 << 1;
  $2 = $q$0 << 1;
  $3 = $$01 >>> 31;
  $4 = $1 | $3;
  $5 = ($4>>>0)<($y>>>0);
  $6 = $5 ? 0 : $y;
  $r$1 = (($4) - ($6))|0;
  $7 = $5&1;
  $8 = $7 | $2;
  $q$1 = $8 ^ 1;
  $9 = $$01 << 1;
  $10 = (($i$0) + -1)|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $$0 = $q$1;
   break;
  } else {
   $$01 = $9;$i$0 = $10;$q$0 = $q$1;$r$0 = $r$1;
  }
 }
 return ($$0|0);
}
function _FT_Raccess_Get_HeaderInfo($library,$stream,$rfork_offset,$map_offset,$rdata_pos) {
 $library = $library|0;
 $stream = $stream|0;
 $rfork_offset = $rfork_offset|0;
 $map_offset = $map_offset|0;
 $rdata_pos = $rdata_pos|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $allmatch$1 = 0, $allmatch$1$15 = 0, $allzeros$0$ = 0, $allzeros$0$$15 = 0, $error = 0, $head = 0, $head2 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $error = sp;
 $head = sp + 24|0;
 $head2 = sp + 8|0;
 $0 = (_FT_Stream_Seek($stream,$rfork_offset)|0);
 HEAP32[$error>>2] = $0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_FT_Stream_Read($stream,$head,16)|0);
 HEAP32[$error>>2] = $2;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP8[$head>>0]|0;
 $5 = $4&255;
 $6 = $5 << 24;
 $7 = ((($head)) + 1|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 << 16;
 $11 = $10 | $6;
 $12 = ((($head)) + 2|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 << 8;
 $16 = $11 | $15;
 $17 = ((($head)) + 3|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $16 | $19;
 $21 = (($20) + ($rfork_offset))|0;
 HEAP32[$rdata_pos>>2] = $21;
 $22 = ((($head)) + 4|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 24;
 $26 = ((($head)) + 5|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 << 16;
 $30 = $29 | $25;
 $31 = ((($head)) + 6|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 << 8;
 $35 = $30 | $34;
 $36 = ((($head)) + 7|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $35 | $38;
 $40 = (($39) + ($rfork_offset))|0;
 $41 = ((($head)) + 8|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43 << 24;
 $45 = ((($head)) + 9|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47 << 16;
 $49 = $48 | $44;
 $50 = ((($head)) + 10|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = $52 << 8;
 $54 = $49 | $53;
 $55 = ((($head)) + 11|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $58 = $54 | $57;
 $59 = (($58) + ($21))|0;
 $60 = ($59|0)!=($40|0);
 $61 = ($39|0)==(0);
 $or$cond = $61 | $60;
 if ($or$cond) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $62 = (_FT_Stream_Seek($stream,$40)|0);
 HEAP32[$error>>2] = $62;
 $63 = ($62|0)==(0);
 if (!($63)) {
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $64 = ((($head)) + 15|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65&255;
 $67 = (($66) + 1)|0;
 $68 = $67&255;
 $69 = ((($head2)) + 15|0);
 HEAP8[$69>>0] = $68;
 $70 = (_FT_Stream_Read($stream,$head2,16)|0);
 HEAP32[$error>>2] = $70;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$0 = $70;
  STACKTOP = sp;return ($$0|0);
 }
 $72 = HEAP8[$head2>>0]|0;
 $73 = ($72<<24>>24)==(0);
 $allzeros$0$ = $73&1;
 $74 = HEAP8[$head>>0]|0;
 $75 = ($72<<24>>24)==($74<<24>>24);
 $allmatch$1 = $75&1;
 $76 = ((($head2)) + 1|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = ((($head)) + 1|0);
 $79 = HEAP8[$78>>0]|0;
 $80 = ($77<<24>>24)==($79<<24>>24);
 $81 = ((($head2)) + 2|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82 | $77;
 $84 = ((($head)) + 2|0);
 $85 = HEAP8[$84>>0]|0;
 $86 = ($82<<24>>24)==($85<<24>>24);
 $87 = $86 & $80;
 $88 = ((($head2)) + 3|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = $89 | $83;
 $91 = ((($head)) + 3|0);
 $92 = HEAP8[$91>>0]|0;
 $93 = ($89<<24>>24)==($92<<24>>24);
 $94 = $93 & $87;
 $95 = ((($head2)) + 4|0);
 $96 = HEAP8[$95>>0]|0;
 $97 = $96 | $90;
 $98 = ((($head)) + 4|0);
 $99 = HEAP8[$98>>0]|0;
 $100 = ($96<<24>>24)==($99<<24>>24);
 $101 = $100 & $94;
 $102 = ((($head2)) + 5|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = $103 | $97;
 $105 = ((($head)) + 5|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = ($103<<24>>24)==($106<<24>>24);
 $108 = $107 & $101;
 $109 = ((($head2)) + 6|0);
 $110 = HEAP8[$109>>0]|0;
 $111 = $110 | $104;
 $112 = ((($head)) + 6|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = ($110<<24>>24)==($113<<24>>24);
 $115 = $114 & $108;
 $116 = ((($head2)) + 7|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = $117 | $111;
 $119 = ((($head)) + 7|0);
 $120 = HEAP8[$119>>0]|0;
 $121 = ($117<<24>>24)==($120<<24>>24);
 $122 = $121 & $115;
 $123 = ((($head2)) + 8|0);
 $124 = HEAP8[$123>>0]|0;
 $125 = $124 | $118;
 $126 = ((($head)) + 8|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = ($124<<24>>24)==($127<<24>>24);
 $129 = $128 & $122;
 $130 = ((($head2)) + 9|0);
 $131 = HEAP8[$130>>0]|0;
 $132 = $131 | $125;
 $133 = ((($head)) + 9|0);
 $134 = HEAP8[$133>>0]|0;
 $135 = ($131<<24>>24)==($134<<24>>24);
 $136 = $135 & $129;
 $137 = ((($head2)) + 10|0);
 $138 = HEAP8[$137>>0]|0;
 $139 = $138 | $132;
 $140 = ((($head)) + 10|0);
 $141 = HEAP8[$140>>0]|0;
 $142 = ($138<<24>>24)==($141<<24>>24);
 $143 = $142 & $136;
 $144 = ((($head2)) + 11|0);
 $145 = HEAP8[$144>>0]|0;
 $146 = $145 | $139;
 $147 = ((($head)) + 11|0);
 $148 = HEAP8[$147>>0]|0;
 $149 = ($145<<24>>24)==($148<<24>>24);
 $150 = $149 & $143;
 $151 = ((($head2)) + 12|0);
 $152 = HEAP8[$151>>0]|0;
 $153 = $152 | $146;
 $154 = ((($head)) + 12|0);
 $155 = HEAP8[$154>>0]|0;
 $156 = ($152<<24>>24)==($155<<24>>24);
 $157 = $156 & $150;
 $158 = ((($head2)) + 13|0);
 $159 = HEAP8[$158>>0]|0;
 $160 = $159 | $153;
 $161 = ((($head)) + 13|0);
 $162 = HEAP8[$161>>0]|0;
 $163 = ($159<<24>>24)==($162<<24>>24);
 $164 = $163 & $157;
 $165 = ((($head2)) + 14|0);
 $166 = HEAP8[$165>>0]|0;
 $167 = $166 | $160;
 $168 = ((($head)) + 14|0);
 $169 = HEAP8[$168>>0]|0;
 $170 = ($166<<24>>24)==($169<<24>>24);
 $171 = $170 & $164;
 $172 = ((($head2)) + 15|0);
 $173 = HEAP8[$172>>0]|0;
 $174 = $173 | $167;
 $175 = ($174<<24>>24)==(0);
 $allzeros$0$$15 = $175 ? $allzeros$0$ : 0;
 $176 = ((($head)) + 15|0);
 $177 = HEAP8[$176>>0]|0;
 $178 = ($173<<24>>24)==($177<<24>>24);
 $179 = $178 & $171;
 $allmatch$1$15 = $179 ? $allmatch$1 : 0;
 $180 = $allmatch$1$15 | $allzeros$0$$15;
 $181 = ($180|0)==(0);
 if ($181) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $182 = (_FT_Stream_Skip($stream,8)|0);
 HEAP32[$error>>2] = $182;
 $183 = (_FT_Stream_ReadUShort($stream,$error)|0);
 $184 = HEAP32[$error>>2]|0;
 $185 = ($184|0)==(0);
 if (!($185)) {
  $$0 = $184;
  STACKTOP = sp;return ($$0|0);
 }
 $186 = $183&65535;
 $187 = (($186) + ($40))|0;
 $188 = (_FT_Stream_Seek($stream,$187)|0);
 HEAP32[$error>>2] = $188;
 $189 = ($188|0)==(0);
 if (!($189)) {
  $$0 = $188;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$map_offset>>2] = $187;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _FT_Raccess_Get_DataOffsets($library,$stream,$map_offset,$rdata_pos,$tag,$offsets,$count) {
 $library = $library|0;
 $stream = $stream|0;
 $map_offset = $map_offset|0;
 $rdata_pos = $rdata_pos|0;
 $tag = $tag|0;
 $offsets = $offsets|0;
 $count = $count|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa34 = 0, $$lcssa36 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $i$010 = 0, $j$07 = 0, $j$16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = HEAP32[$library>>2]|0;
 $1 = (_FT_Stream_Seek($stream,$map_offset)|0);
 HEAP32[$error>>2] = $1;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_FT_Stream_ReadUShort($stream,$error)|0);
 $4 = HEAP32[$error>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = $3&65535;
 $i$010 = 0;
 while(1) {
  $9 = (_FT_Stream_ReadULong($stream,$error)|0);
  $10 = HEAP32[$error>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   label = 8;
   break;
  }
  $12 = (_FT_Stream_ReadUShort($stream,$error)|0);
  $13 = HEAP32[$error>>2]|0;
  $14 = ($13|0)==(0);
  if (!($14)) {
   label = 8;
   break;
  }
  $15 = (_FT_Stream_ReadUShort($stream,$error)|0);
  $16 = HEAP32[$error>>2]|0;
  $17 = ($16|0)==(0);
  if (!($17)) {
   label = 8;
   break;
  }
  $19 = ($9|0)==($tag|0);
  if ($19) {
   $$lcssa34 = $12;$$lcssa36 = $15;
   label = 10;
   break;
  }
  $7 = (($i$010) + 1)|0;
  $8 = ($i$010|0)<($6|0);
  if ($8) {
   $i$010 = $7;
  } else {
   $$0 = 1;
   label = 23;
   break;
  }
 }
 if ((label|0) == 8) {
  $18 = HEAP32[$error>>2]|0;
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 10) {
  $20 = $$lcssa34&65535;
  $21 = $$lcssa36&65535;
  $22 = (($20) + 1)|0;
  HEAP32[$count>>2] = $22;
  $23 = (($21) + ($map_offset))|0;
  $24 = (_FT_Stream_Seek($stream,$23)|0);
  HEAP32[$error>>2] = $24;
  $25 = ($24|0)==(0);
  if (!($25)) {
   $$0 = $24;
   STACKTOP = sp;return ($$0|0);
  }
  $26 = HEAP32[$count>>2]|0;
  $27 = (_ft_mem_realloc($0,8,0,$26,0,$error)|0);
  $28 = HEAP32[$error>>2]|0;
  $29 = ($28|0)==(0);
  if (!($29)) {
   $$0 = $28;
   STACKTOP = sp;return ($$0|0);
  }
  $30 = HEAP32[$count>>2]|0;
  $31 = ($30|0)>(0);
  L24: do {
   if ($31) {
    $j$07 = 0;
    while(1) {
     $32 = (_FT_Stream_ReadUShort($stream,$error)|0);
     $33 = (($27) + ($j$07<<3)|0);
     HEAP16[$33>>1] = $32;
     $34 = HEAP32[$error>>2]|0;
     $35 = ($34|0)==(0);
     if (!($35)) {
      break L24;
     }
     $36 = (_FT_Stream_Skip($stream,2)|0);
     HEAP32[$error>>2] = $36;
     $37 = ($36|0)==(0);
     if (!($37)) {
      break L24;
     }
     $38 = (_FT_Stream_ReadULong($stream,$error)|0);
     $39 = HEAP32[$error>>2]|0;
     $40 = ($39|0)==(0);
     if (!($40)) {
      break L24;
     }
     $41 = (_FT_Stream_Skip($stream,4)|0);
     HEAP32[$error>>2] = $41;
     $42 = ($41|0)==(0);
     if (!($42)) {
      break L24;
     }
     $43 = $38 & 16777215;
     $44 = (((($27) + ($j$07<<3)|0)) + 4|0);
     HEAP32[$44>>2] = $43;
     $45 = (($j$07) + 1)|0;
     $46 = HEAP32[$count>>2]|0;
     $47 = ($45|0)<($46|0);
     if ($47) {
      $j$07 = $45;
     } else {
      $$lcssa = $46;
      label = 18;
      break;
     }
    }
   } else {
    $$lcssa = $30;
    label = 18;
   }
  } while(0);
  if ((label|0) == 18) {
   _qsort($27,$$lcssa,8,148);
   $48 = HEAP32[$count>>2]|0;
   $49 = (_ft_mem_realloc($0,4,0,$48,0,$error)|0);
   $50 = HEAP32[$error>>2]|0;
   $51 = ($50|0)==(0);
   if ($51) {
    $52 = HEAP32[$count>>2]|0;
    $53 = ($52|0)>(0);
    if ($53) {
     $j$16 = 0;
     while(1) {
      $54 = (((($27) + ($j$16<<3)|0)) + 4|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = (($55) + ($rdata_pos))|0;
      $57 = (($49) + ($j$16<<2)|0);
      HEAP32[$57>>2] = $56;
      $58 = (($j$16) + 1)|0;
      $59 = HEAP32[$count>>2]|0;
      $60 = ($58|0)<($59|0);
      if ($60) {
       $j$16 = $58;
      } else {
       break;
      }
     }
    }
    HEAP32[$offsets>>2] = $49;
    HEAP32[$error>>2] = 0;
   }
  }
  _ft_mem_free($0,$27);
  $61 = HEAP32[$error>>2]|0;
  $$0 = $61;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 23) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _FT_Raccess_Guess($library,$stream,$base_name,$new_names,$offsets,$errors) {
 $library = $library|0;
 $stream = $stream|0;
 $base_name = $base_name|0;
 $new_names = $new_names|0;
 $offsets = $offsets|0;
 $errors = $errors|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($stream|0)==(0|0);
 $i$01 = 0;
 while(1) {
  $1 = (($new_names) + ($i$01<<2)|0);
  HEAP32[$1>>2] = 0;
  if ($0) {
   $4 = (($errors) + ($i$01<<2)|0);
   HEAP32[$4>>2] = 0;
  } else {
   $2 = (_FT_Stream_Seek($stream,0)|0);
   $3 = (($errors) + ($i$01<<2)|0);
   HEAP32[$3>>2] = $2;
  }
  $5 = (($errors) + ($i$01<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = (152 + ($i$01<<3)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($offsets) + ($i$01<<2)|0);
   $11 = (FUNCTION_TABLE_iiiiii[$9 & 63]($library,$stream,$base_name,$1,$10)|0);
   HEAP32[$5>>2] = $11;
  }
  $12 = (($i$01) + 1)|0;
  $exitcond = ($12|0)==(9);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $12;
  }
 }
 return;
}
function _ft_raccess_rule_by_darwin_vfs($library,$rule_index) {
 $library = $library|0;
 $rule_index = $rule_index|0;
 var $$ = 0, $$off = 0, $0 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_raccess_get_rule_type_from_rule_index($rule_index)|0);
 $$off = (($0) + -3)|0;
 $switch = ($$off>>>0)<(2);
 $$ = $switch&1;
 return ($$|0);
}
function _ft_raccess_sort_ref_by_id($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$a>>1]|0;
 $1 = HEAP16[$b>>1]|0;
 $2 = ($0&65535)<($1&65535);
 $3 = ($0&65535)>($1&65535);
 $$ = $3&1;
 $$0 = $2 ? -1 : $$;
 return ($$0|0);
}
function _raccess_get_rule_type_from_rule_index($rule_index) {
 $rule_index = $rule_index|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($rule_index>>>0)>(8);
 if ($0) {
  $$0 = -2;
  return ($$0|0);
 }
 $1 = (((152 + ($rule_index<<3)|0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $$0 = $2;
 return ($$0|0);
}
function _raccess_guess_apple_double($library,$stream,$base_file_name,$result_file_name,$result_offset) {
 $library = $library|0;
 $stream = $stream|0;
 $base_file_name = $base_file_name|0;
 $result_file_name = $result_file_name|0;
 $result_offset = $result_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$result_file_name>>2] = 0;
 $0 = ($stream|0)==(0|0);
 if ($0) {
  $$0 = 81;
  return ($$0|0);
 }
 $1 = (_raccess_guess_apple_generic($stream,333319,$result_offset)|0);
 $$0 = $1;
 return ($$0|0);
}
function _raccess_guess_apple_single($library,$stream,$base_file_name,$result_file_name,$result_offset) {
 $library = $library|0;
 $stream = $stream|0;
 $base_file_name = $base_file_name|0;
 $result_file_name = $result_file_name|0;
 $result_offset = $result_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$result_file_name>>2] = 0;
 $0 = ($stream|0)==(0|0);
 if ($0) {
  $$0 = 81;
  return ($$0|0);
 }
 $1 = (_raccess_guess_apple_generic($stream,333312,$result_offset)|0);
 $$0 = $1;
 return ($$0|0);
}
function _raccess_guess_darwin_ufs_export($library,$stream,$base_file_name,$result_file_name,$result_offset) {
 $library = $library|0;
 $stream = $stream|0;
 $base_file_name = $base_file_name|0;
 $result_file_name = $result_file_name|0;
 $result_offset = $result_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$library>>2]|0;
 $1 = (_raccess_make_file_name($0,$base_file_name,25169)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 64;
  return ($$0|0);
 }
 $3 = (_raccess_guess_linux_double_from_file_name($library,$1,$result_offset)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[$result_file_name>>2] = $1;
  $$0 = 0;
  return ($$0|0);
 } else {
  _ft_mem_free($0,$1);
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _raccess_guess_darwin_newvfs($library,$stream,$base_file_name,$result_file_name,$result_offset) {
 $library = $library|0;
 $stream = $stream|0;
 $base_file_name = $base_file_name|0;
 $result_file_name = $result_file_name|0;
 $result_offset = $result_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $error = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (_strlen($base_file_name)|0);
 $1 = (($0) + 18)|0;
 $2 = HEAP32[$library>>2]|0;
 $3 = (_ft_mem_alloc($2,$1,$error)|0);
 $4 = HEAP32[$error>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy(($3|0),($base_file_name|0),($0|0))|0;
 $6 = (($3) + ($0)|0);
 dest=$6; src=25151; stop=dest+18|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 HEAP32[$result_file_name>>2] = $3;
 HEAP32[$result_offset>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _raccess_guess_darwin_hfsplus($library,$stream,$base_file_name,$result_file_name,$result_offset) {
 $library = $library|0;
 $stream = $stream|0;
 $base_file_name = $base_file_name|0;
 $result_file_name = $result_file_name|0;
 $result_offset = $result_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (_strlen($base_file_name)|0);
 $1 = (($0) + 6)|0;
 $2 = HEAP32[$library>>2]|0;
 $3 = (_ft_mem_alloc($2,$1,$error)|0);
 $4 = HEAP32[$error>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy(($3|0),($base_file_name|0),($0|0))|0;
 $6 = (($3) + ($0)|0);
 ;HEAP8[$6>>0]=HEAP8[25145>>0]|0;HEAP8[$6+1>>0]=HEAP8[25145+1>>0]|0;HEAP8[$6+2>>0]=HEAP8[25145+2>>0]|0;HEAP8[$6+3>>0]=HEAP8[25145+3>>0]|0;HEAP8[$6+4>>0]=HEAP8[25145+4>>0]|0;HEAP8[$6+5>>0]=HEAP8[25145+5>>0]|0;
 HEAP32[$result_file_name>>2] = $3;
 HEAP32[$result_offset>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _raccess_guess_vfat($library,$stream,$base_file_name,$result_file_name,$result_offset) {
 $library = $library|0;
 $stream = $stream|0;
 $base_file_name = $base_file_name|0;
 $result_file_name = $result_file_name|0;
 $result_offset = $result_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$library>>2]|0;
 $1 = (_raccess_make_file_name($0,$base_file_name,25131)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 64;
  return ($$0|0);
 }
 HEAP32[$result_file_name>>2] = $1;
 HEAP32[$result_offset>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _raccess_guess_linux_cap($library,$stream,$base_file_name,$result_file_name,$result_offset) {
 $library = $library|0;
 $stream = $stream|0;
 $base_file_name = $base_file_name|0;
 $result_file_name = $result_file_name|0;
 $result_offset = $result_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$library>>2]|0;
 $1 = (_raccess_make_file_name($0,$base_file_name,25120)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 64;
  return ($$0|0);
 }
 HEAP32[$result_file_name>>2] = $1;
 HEAP32[$result_offset>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _raccess_guess_linux_double($library,$stream,$base_file_name,$result_file_name,$result_offset) {
 $library = $library|0;
 $stream = $stream|0;
 $base_file_name = $base_file_name|0;
 $result_file_name = $result_file_name|0;
 $result_offset = $result_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$library>>2]|0;
 $1 = (_raccess_make_file_name($0,$base_file_name,25118)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 64;
  return ($$0|0);
 }
 $3 = (_raccess_guess_linux_double_from_file_name($library,$1,$result_offset)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[$result_file_name>>2] = $1;
  $$0 = 0;
  return ($$0|0);
 } else {
  _ft_mem_free($0,$1);
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _raccess_guess_linux_netatalk($library,$stream,$base_file_name,$result_file_name,$result_offset) {
 $library = $library|0;
 $stream = $stream|0;
 $base_file_name = $base_file_name|0;
 $result_file_name = $result_file_name|0;
 $result_offset = $result_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$library>>2]|0;
 $1 = (_raccess_make_file_name($0,$base_file_name,25104)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 64;
  return ($$0|0);
 }
 $3 = (_raccess_guess_linux_double_from_file_name($library,$1,$result_offset)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[$result_file_name>>2] = $1;
  $$0 = 0;
  return ($$0|0);
 } else {
  _ft_mem_free($0,$1);
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _raccess_make_file_name($memory,$original_name,$insertion) {
 $memory = $memory|0;
 $original_name = $original_name|0;
 $insertion = $insertion|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $slash$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = (_strlen($original_name)|0);
 $1 = (_strlen($insertion)|0);
 $2 = (($0) + 1)|0;
 $3 = (($2) + ($1))|0;
 $4 = (_ft_mem_alloc($memory,$3,$error)|0);
 $5 = HEAP32[$error>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_strrchr($original_name,47)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP8[$4>>0] = 0;
  $slash$0 = $original_name;
 } else {
  $9 = $7;
  $10 = $original_name;
  $11 = (($9) - ($10))|0;
  $12 = (($11) + 1)|0;
  (_strncpy($4,$original_name,$12)|0);
  $13 = (($4) + ($12)|0);
  HEAP8[$13>>0] = 0;
  $14 = ((($7)) + 1|0);
  $slash$0 = $14;
 }
 (_strcat($4,$insertion)|0);
 (_strcat($4,$slash$0)|0);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function _raccess_guess_linux_double_from_file_name($library,$file_name,$result_offset) {
 $library = $library|0;
 $file_name = $file_name|0;
 $result_offset = $result_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $args2 = 0, $nouse = 0, $stream2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $args2 = sp + 8|0;
 $stream2 = sp + 4|0;
 $nouse = sp;
 HEAP32[$nouse>>2] = 0;
 HEAP32[$args2>>2] = 4;
 $0 = ((($args2)) + 12|0);
 HEAP32[$0>>2] = $file_name;
 $1 = (_FT_Stream_New($library,$args2,$stream2)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$stream2>>2]|0;
 $4 = (_raccess_guess_apple_double($library,$3,$file_name,$nouse,$result_offset)|0);
 $5 = HEAP32[$stream2>>2]|0;
 _FT_Stream_Free($5,0);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function _raccess_guess_apple_generic($stream,$magic,$result_offset) {
 $stream = $stream|0;
 $magic = $magic|0;
 $result_offset = $result_offset|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (_FT_Stream_ReadULong($stream,$error)|0);
 $1 = HEAP32[$error>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $3 = ($0|0)==($magic|0);
   if ($3) {
    (_FT_Stream_ReadULong($stream,$error)|0);
    $4 = HEAP32[$error>>2]|0;
    $5 = ($4|0)==(0);
    if ($5) {
     $6 = (_FT_Stream_Skip($stream,16)|0);
     HEAP32[$error>>2] = $6;
     $7 = ($6|0)==(0);
     if ($7) {
      $8 = (_FT_Stream_ReadUShort($stream,$error)|0);
      $9 = HEAP32[$error>>2]|0;
      $10 = ($9|0)==(0);
      if ($10) {
       $11 = $8&65535;
       $12 = ($8<<16>>16)==(0);
       if ($12) {
        $$0 = 2;
       } else {
        $i$01 = 0;
        while(1) {
         $13 = (_FT_Stream_ReadULong($stream,$error)|0);
         $14 = HEAP32[$error>>2]|0;
         $15 = ($14|0)==(0);
         if (!($15)) {
          $$0 = $14;
          break L1;
         }
         $16 = ($13|0)==(2);
         if ($16) {
          $17 = (_FT_Stream_ReadULong($stream,$error)|0);
          $18 = HEAP32[$error>>2]|0;
          $19 = ($18|0)==(0);
          if ($19) {
           (_FT_Stream_ReadULong($stream,$error)|0);
           $20 = HEAP32[$error>>2]|0;
           $21 = ($20|0)==(0);
           if ($21) {
            $$lcssa = $17;
            break;
           }
          }
         } else {
          $22 = (_FT_Stream_Skip($stream,8)|0);
          HEAP32[$error>>2] = $22;
          $23 = ($22|0)==(0);
          if (!($23)) {
           $$0 = $22;
           break L1;
          }
         }
         $24 = (($i$01) + 1)|0;
         $25 = ($24|0)<($11|0);
         if ($25) {
          $i$01 = $24;
         } else {
          $$0 = 2;
          break L1;
         }
        }
        HEAP32[$result_offset>>2] = $$lcssa;
        $$0 = 0;
       }
      } else {
       $$0 = $9;
      }
     } else {
      $$0 = $6;
     }
    } else {
     $$0 = $4;
    }
   } else {
    $$0 = 2;
   }
  } else {
   $$0 = $1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _FT_Add_Default_Modules($library) {
 $library = $library|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_FT_Add_Module($library,3640)|0);
 (_FT_Add_Module($library,18252)|0);
 (_FT_Add_Module($library,12924)|0);
 (_FT_Add_Module($library,320)|0);
 (_FT_Add_Module($library,15340)|0);
 (_FT_Add_Module($library,5944)|0);
 (_FT_Add_Module($library,17356)|0);
 (_FT_Add_Module($library,18424)|0);
 (_FT_Add_Module($library,5796)|0);
 (_FT_Add_Module($library,11276)|0);
 (_FT_Add_Module($library,11684)|0);
 (_FT_Add_Module($library,11636)|0);
 (_FT_Add_Module($library,5384)|0);
 (_FT_Add_Module($library,11768)|0);
 (_FT_Add_Module($library,5504)|0);
 (_FT_Add_Module($library,5564)|0);
 (_FT_Add_Module($library,5624)|0);
 (_FT_Add_Module($library,568)|0);
 return;
}
function _FT_Init_FreeType($alibrary) {
 $alibrary = $alibrary|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FT_New_Memory()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 7;
  return ($$0|0);
 }
 $2 = (_FT_New_Library($0,$alibrary)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[$alibrary>>2]|0;
  _FT_Add_Default_Modules($4);
  $$0 = 0;
  return ($$0|0);
 } else {
  _FT_Done_Memory($0);
  $$0 = $2;
  return ($$0|0);
 }
 return (0)|0;
}
function _FT_Vector_Length($vec) {
 $vec = $vec|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $v = sp;
 $0 = $vec;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $v;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = HEAP32[$v>>2]|0;
 $11 = ($10|0)==(0);
 $12 = ((($v)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 if ($11) {
  $14 = ($13|0)>(-1);
  $15 = (0 - ($13))|0;
  $16 = $14 ? $13 : $15;
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ($13|0)==(0);
 if ($17) {
  $18 = ($10|0)>(-1);
  $19 = (0 - ($10))|0;
  $20 = $18 ? $10 : $19;
  $$0 = $20;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (_ft_trig_prenorm($v)|0);
 _ft_trig_pseudo_polarize($v);
 $22 = HEAP32[$v>>2]|0;
 $23 = (_ft_trig_downscale($22)|0);
 HEAP32[$v>>2] = $23;
 $24 = ($21|0)>(0);
 if ($24) {
  $25 = (($21) + -1)|0;
  $26 = 1 << $25;
  $27 = (($23) + ($26))|0;
  $28 = $27 >> $21;
  $$0 = $28;
  STACKTOP = sp;return ($$0|0);
 } else {
  $29 = (0 - ($21))|0;
  $30 = $23 << $29;
  $$0 = $30;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _ft_trig_prenorm($vec) {
 $vec = $vec|0;
 var $$ = 0, $$1 = 0, $$shift$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $shift$1 = 0, $shift$2 = 0, $shift$3 = 0, $shift$5 = 0, $z$1 = 0, $z$2 = 0;
 var $z$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vec>>2]|0;
 $1 = ((($vec)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)>(-1);
 $4 = (0 - ($0))|0;
 $5 = $3 ? $0 : $4;
 $6 = ($2|0)>(-1);
 $7 = (0 - ($2))|0;
 $8 = $6 ? $2 : $7;
 $9 = $8 | $5;
 $10 = ($9|0)>(65535);
 $11 = $9 >> 16;
 $$ = $10 ? $11 : $9;
 $$1 = $10 ? 16 : 0;
 $12 = ($$|0)>(255);
 $13 = $$ >> 8;
 $14 = $$1 | 8;
 $z$1 = $12 ? $13 : $$;
 $shift$1 = $12 ? $14 : $$1;
 $15 = ($z$1|0)>(15);
 $16 = $z$1 >> 4;
 $17 = $shift$1 | 4;
 $z$2 = $15 ? $16 : $z$1;
 $shift$2 = $15 ? $17 : $shift$1;
 $18 = ($z$2|0)>(3);
 $19 = $z$2 >> 2;
 $20 = $shift$2 | 2;
 $z$3 = $18 ? $19 : $z$2;
 $shift$3 = $18 ? $20 : $shift$2;
 $21 = ($z$3|0)>(1);
 $22 = $21&1;
 $$shift$3 = (($22) + ($shift$3))|0;
 $23 = ($$shift$3|0)<(28);
 if ($23) {
  $24 = (27 - ($$shift$3))|0;
  $25 = $0 << $24;
  HEAP32[$vec>>2] = $25;
  $26 = $2 << $24;
  HEAP32[$1>>2] = $26;
  $shift$5 = $24;
  return ($shift$5|0);
 } else {
  $27 = (($$shift$3) + -27)|0;
  $28 = $0 >> $27;
  HEAP32[$vec>>2] = $28;
  $29 = $2 >> $27;
  HEAP32[$1>>2] = $29;
  $30 = (27 - ($$shift$3))|0;
  $shift$5 = $30;
  return ($shift$5|0);
 }
 return (0)|0;
}
function _ft_trig_pseudo_polarize($vec) {
 $vec = $vec|0;
 var $$theta$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $arctanptr$1 = 0, $arctanptr$2 = 0, $exitcond = 0, $i$0 = 0, $theta$3 = 0, $theta$4 = 0, $theta$4$lcssa = 0, $theta$5 = 0, $x$0 = 0, $x$2 = 0, $x$3 = 0, $x$3$lcssa = 0, $y$0 = 0, $y$2 = 0, $y$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$vec>>2]|0;
 $1 = ((($vec)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)<(0);
 $4 = (0 - ($0))|0;
 $5 = (0 - ($2))|0;
 $6 = $0 >> 31;
 $7 = $6 & 11796480;
 $x$0 = $3 ? $4 : $0;
 $y$0 = $3 ? $5 : $2;
 $8 = ($y$0|0)>(0);
 $9 = (0 - ($7))|0;
 $$theta$0 = $8 ? $9 : $7;
 $10 = ($y$0|0)<(0);
 $11 = $x$0 << 1;
 if ($10) {
  $12 = (($11) + ($y$0))|0;
  $13 = $y$0 << 1;
  $14 = (($x$0) - ($13))|0;
  $15 = (($$theta$0) + -4157273)|0;
  $arctanptr$1 = (228);$i$0 = 0;$theta$3 = $15;$x$2 = $14;$y$2 = $12;
 } else {
  $16 = (($y$0) - ($11))|0;
  $17 = $y$0 << 1;
  $18 = (($17) + ($x$0))|0;
  $19 = (($$theta$0) + 4157273)|0;
  $arctanptr$1 = (228);$i$0 = 0;$theta$3 = $19;$x$2 = $18;$y$2 = $16;
 }
 while(1) {
  $20 = ($y$2|0)<(0);
  $21 = $x$2 >> $i$0;
  if ($20) {
   $22 = (($y$2) + ($21))|0;
   $23 = $y$2 >> $i$0;
   $24 = (($x$2) - ($23))|0;
   $25 = HEAP32[$arctanptr$1>>2]|0;
   $26 = (($theta$3) - ($25))|0;
   $theta$4 = $26;$x$3 = $24;$y$3 = $22;
  } else {
   $27 = (($y$2) - ($21))|0;
   $28 = $y$2 >> $i$0;
   $29 = (($28) + ($x$2))|0;
   $30 = HEAP32[$arctanptr$1>>2]|0;
   $31 = (($30) + ($theta$3))|0;
   $theta$4 = $31;$x$3 = $29;$y$3 = $27;
  }
  $arctanptr$2 = ((($arctanptr$1)) + 4|0);
  $32 = (($i$0) + 1)|0;
  $exitcond = ($32|0)==(23);
  if ($exitcond) {
   $theta$4$lcssa = $theta$4;$x$3$lcssa = $x$3;
   break;
  } else {
   $arctanptr$1 = $arctanptr$2;$i$0 = $32;$theta$3 = $theta$4;$x$2 = $x$3;$y$2 = $y$3;
  }
 }
 $33 = ($theta$4$lcssa|0)>(-1);
 if ($33) {
  $34 = (($theta$4$lcssa) + 16)|0;
  $35 = $34 & -32;
  $theta$5 = $35;
  HEAP32[$vec>>2] = $x$3$lcssa;
  HEAP32[$1>>2] = $theta$5;
  return;
 } else {
  $36 = (16 - ($theta$4$lcssa))|0;
  $37 = $36 & -32;
  $38 = (0 - ($37))|0;
  $theta$5 = $38;
  HEAP32[$vec>>2] = $x$3$lcssa;
  HEAP32[$1>>2] = $theta$5;
  return;
 }
}
function _ft_trig_downscale($val) {
 $val = $val|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($val|0)>(-1);
 $1 = (0 - ($val))|0;
 $2 = $0 ? $val : $1;
 $3 = $2 >>> 16;
 $4 = $2 & 65535;
 $5 = ($3*17797)|0;
 $6 = ($4*17797)|0;
 $7 = ($3*47593)|0;
 $8 = (($6) + ($7))|0;
 $9 = ($4*47593)|0;
 $10 = $9 >>> 16;
 $11 = ($8>>>0)>=($10>>>0);
 $12 = $11 ? $8 : $10;
 $13 = (($8) + ($10))|0;
 $14 = $13 >>> 16;
 $15 = (($14) + ($5))|0;
 $16 = ($13>>>0)<($12>>>0);
 $17 = (($15) + 65536)|0;
 $$ = $16 ? $17 : $15;
 $18 = (0 - ($$))|0;
 $19 = $0 ? $$ : $18;
 return ($19|0);
}
function _cff_get_interface($driver,$module_interface) {
 $driver = $driver|0;
 $module_interface = $module_interface|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_service_list_lookup(424,$module_interface)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = ($driver|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($driver)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_FT_Get_Module($4,89702)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = HEAP32[$6>>2]|0;
 $9 = ((($8)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_iii[$10 & 255]($6,$module_interface)|0);
 $$0 = $11;
 return ($$0|0);
}
function _cff_glyph_load($cffslot,$cffsize,$glyph_index,$load_flags) {
 $cffslot = $cffslot|0;
 $cffsize = $cffsize|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 var $$0 = 0, $$load_flags = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($cffslot|0)==(0|0);
 if ($0) {
  $$0 = 37;
  return ($$0|0);
 }
 $1 = ($cffsize|0)==(0|0);
 $2 = $load_flags | 3;
 $$load_flags = $1 ? $2 : $load_flags;
 $3 = $$load_flags & 1;
 $4 = ($3|0)==(0);
 $size$0 = $4 ? $cffsize : 0;
 $5 = ($size$0|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$cffsize>>2]|0;
  $7 = ((($cffslot)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6|0)==($8|0);
  if (!($9)) {
   $$0 = 35;
   return ($$0|0);
  }
 }
 $10 = (_cff_slot_load($cffslot,$size$0,$glyph_index,$$load_flags)|0);
 $$0 = $10;
 return ($$0|0);
}
function _cff_get_kerning($ttface,$left_glyph,$right_glyph,$kerning) {
 $ttface = $ttface|0;
 $left_glyph = $left_glyph|0;
 $right_glyph = $right_glyph|0;
 $kerning = $kerning|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ttface)) + 532|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$kerning>>2] = 0;
 $2 = ((($kerning)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ($1|0)==(0|0);
 if ($3) {
  return 0;
 }
 $4 = ((($1)) + 128|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$5 & 127]($ttface,$left_glyph,$right_glyph)|0);
 HEAP32[$kerning>>2] = $6;
 return 0;
}
function _cff_get_advances($face,$start,$count,$flags,$advances) {
 $face = $face|0;
 $start = $start|0;
 $count = $count|0;
 $flags = $flags|0;
 $advances = $advances|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$1 = 0, $nn$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $flags | 256;
 $3 = ((($face)) + 88|0);
 $4 = ($count|0)==(0);
 if ($4) {
  $error$1 = 0;
  return ($error$1|0);
 }
 $5 = $flags & 16;
 $6 = ($5|0)==(0);
 $7 = ((($1)) + 60|0);
 $8 = ((($1)) + 56|0);
 $$in = $6 ? $8 : $7;
 $nn$01 = 0;
 while(1) {
  $9 = HEAP32[$3>>2]|0;
  $10 = (($nn$01) + ($start))|0;
  $11 = (_cff_glyph_load($1,$9,$10,$2)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $error$1 = $11;
   label = 5;
   break;
  }
  $13 = HEAP32[$$in>>2]|0;
  $14 = (($advances) + ($nn$01<<2)|0);
  HEAP32[$14>>2] = $13;
  $15 = (($nn$01) + 1)|0;
  $16 = ($15>>>0)<($count>>>0);
  if ($16) {
   $nn$01 = $15;
  } else {
   $error$1 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($error$1|0);
 }
 return (0)|0;
}
function _cff_get_ros($face,$registry,$ordering,$supplement) {
 $face = $face|0;
 $registry = $registry|0;
 $ordering = $ordering|0;
 $supplement = $supplement|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 692|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $3 = ((($1)) + 1456|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(65535);
 if ($5) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $6 = ($registry|0)==(0|0);
 if (!($6)) {
  $7 = ((($1)) + 2964|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $10 = (_cff_index_get_sid_string($1,$4)|0);
   HEAP32[$7>>2] = $10;
  }
  $11 = HEAP32[$7>>2]|0;
  HEAP32[$registry>>2] = $11;
 }
 $12 = ($ordering|0)==(0|0);
 if (!($12)) {
  $13 = ((($1)) + 2968|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $16 = ((($1)) + 1460|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_cff_index_get_sid_string($1,$17)|0);
   HEAP32[$13>>2] = $18;
  }
  $19 = HEAP32[$13>>2]|0;
  HEAP32[$ordering>>2] = $19;
 }
 $20 = ($supplement|0)==(0|0);
 if ($20) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $21 = ((($1)) + 1464|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$supplement>>2] = $22;
 $error$0 = 0;
 return ($error$0|0);
}
function _cff_get_is_cid($face,$is_cid) {
 $face = $face|0;
 $is_cid = $is_cid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 692|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP8[$is_cid>>0] = 0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return 0;
 }
 $3 = ((($1)) + 1456|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(65535);
 if ($5) {
  return 0;
 }
 HEAP8[$is_cid>>0] = 1;
 return 0;
}
function _cff_get_cid_from_glyph_index($face,$glyph_index,$cid) {
 $face = $face|0;
 $glyph_index = $glyph_index|0;
 $cid = $cid|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 692|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $error$0 = 0;
 } else {
  $3 = ((($1)) + 1456|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(65535);
  if ($5) {
   $error$0 = 6;
  } else {
   $6 = ((($1)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($glyph_index>>>0);
   if ($8) {
    $error$0 = 6;
   } else {
    $9 = ($cid|0)==(0|0);
    if ($9) {
     $error$0 = 0;
    } else {
     $10 = ((($1)) + 1160|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($11) + ($glyph_index<<1)|0);
     $13 = HEAP16[$12>>1]|0;
     $14 = $13&65535;
     HEAP32[$cid>>2] = $14;
     $error$0 = 0;
    }
   }
  }
 }
 return ($error$0|0);
}
function _cff_get_cmap_info($charmap,$cmap_info) {
 $charmap = $charmap|0;
 $cmap_info = $cmap_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$charmap>>2]|0;
 $1 = ((($0)) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$cmap_info>>2] = 0;
 $5 = ((($cmap_info)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($charmap)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2048|0);
 $9 = ($7|0)==(2088|0);
 $or$cond = $8 | $9;
 if ($or$cond) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $10 = (_FT_Get_Module($4,89702)|0);
 $11 = (_ft_module_get_service($10,87921)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $13 = HEAP32[$11>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $15 = (FUNCTION_TABLE_iii[$13 & 255]($charmap,$cmap_info)|0);
 $error$0 = $15;
 return ($error$0|0);
}
function _cff_get_glyph_name($face,$glyph_index,$buffer,$buffer_max) {
 $face = $face|0;
 $glyph_index = $glyph_index|0;
 $buffer = $buffer|0;
 $buffer_max = $buffer_max|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 692|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 2956|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $error$0 = 11;
  return ($error$0|0);
 }
 $5 = ((($1)) + 1160|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($glyph_index<<1)|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = (_cff_index_get_sid_string($1,$9)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $error$0 = 0;
  return ($error$0|0);
 }
 (_ft_mem_strcpyn($buffer,$10,$buffer_max)|0);
 $error$0 = 0;
 return ($error$0|0);
}
function _cff_get_name_index($face,$glyph_name) {
 $face = $face|0;
 $glyph_name = $glyph_name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $name$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 692|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_ft_module_get_service($3,89321)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($1)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = ((($1)) + 1160|0);
 $10 = ((($4)) + 20|0);
 $i$01 = 0;
 while(1) {
  $11 = HEAP32[$9>>2]|0;
  $12 = (($11) + ($i$01<<1)|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = ($13&65535)>(390);
  if ($15) {
   $16 = (($14) + -391)|0;
   $17 = (_cff_index_get_string($1,$16)|0);
   $name$0 = $17;
  } else {
   $18 = HEAP32[$10>>2]|0;
   $19 = (FUNCTION_TABLE_ii[$18 & 63]($14)|0);
   $name$0 = $19;
  }
  $20 = ($name$0|0)==(0|0);
  if (!($20)) {
   $21 = (_strcmp($glyph_name,$name$0)|0);
   $22 = ($21|0)==(0);
   if ($22) {
    $$0 = $i$01;
    label = 10;
    break;
   }
  }
  $23 = (($i$01) + 1)|0;
  $24 = HEAP32[$6>>2]|0;
  $25 = ($23>>>0)<($24>>>0);
  if ($25) {
   $i$01 = $23;
  } else {
   $$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 return (0)|0;
}
function _cff_get_ps_name($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 692|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 1304|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _cff_ps_get_font_info($face,$afont_info) {
 $face = $face|0;
 $afont_info = $afont_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($face)) + 692|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $45 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($45|0);
 }
 $3 = ((($1)) + 2960|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $6 = ((($face)) + 100|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_ft_mem_alloc($7,32,$error)|0);
   $9 = HEAP32[$error>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = ((($1)) + 1324|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (_cff_index_get_sid_string($1,$12)|0);
    HEAP32[$8>>2] = $13;
    $14 = ((($1)) + 1328|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (_cff_index_get_sid_string($1,$15)|0);
    $17 = ((($8)) + 4|0);
    HEAP32[$17>>2] = $16;
    $18 = ((($1)) + 1336|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (_cff_index_get_sid_string($1,$19)|0);
    $21 = ((($8)) + 8|0);
    HEAP32[$21>>2] = $20;
    $22 = ((($1)) + 1340|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (_cff_index_get_sid_string($1,$23)|0);
    $25 = ((($8)) + 12|0);
    HEAP32[$25>>2] = $24;
    $26 = ((($1)) + 1344|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (_cff_index_get_sid_string($1,$27)|0);
    $29 = ((($8)) + 16|0);
    HEAP32[$29>>2] = $28;
    $30 = ((($1)) + 1352|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($8)) + 20|0);
    HEAP32[$32>>2] = $31;
    $33 = ((($1)) + 1348|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = ((($8)) + 24|0);
    HEAP8[$35>>0] = $34;
    $36 = ((($1)) + 1356|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37&65535;
    $39 = ((($8)) + 26|0);
    HEAP16[$39>>1] = $38;
    $40 = ((($1)) + 1360|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $41&65535;
    $43 = ((($8)) + 28|0);
    HEAP16[$43>>1] = $42;
    HEAP32[$3>>2] = $8;
    break;
   } else {
    $45 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($45|0);
   }
  }
 } while(0);
 $44 = HEAP32[$3>>2]|0;
 ;HEAP32[$afont_info>>2]=HEAP32[$44>>2]|0;HEAP32[$afont_info+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$afont_info+8>>2]=HEAP32[$44+8>>2]|0;HEAP32[$afont_info+12>>2]=HEAP32[$44+12>>2]|0;HEAP32[$afont_info+16>>2]=HEAP32[$44+16>>2]|0;HEAP32[$afont_info+20>>2]=HEAP32[$44+20>>2]|0;HEAP32[$afont_info+24>>2]=HEAP32[$44+24>>2]|0;HEAP32[$afont_info+28>>2]=HEAP32[$44+28>>2]|0;
 $45 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($45|0);
}
function _cff_ps_has_glyph_names($face) {
 $face = $face|0;
 var $$lobit = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >>> 9;
 $$lobit = $2 & 1;
 return ($$lobit|0);
}
function _bdf_cmap_init($bdfcmap,$init_data) {
 $bdfcmap = $bdfcmap|0;
 $init_data = $init_data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$bdfcmap>>2]|0;
 $1 = ((($0)) + 140|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($bdfcmap)) + 16|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 144|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($bdfcmap)) + 20|0);
 HEAP32[$8>>2] = $7;
 return 0;
}
function _bdf_cmap_done($bdfcmap) {
 $bdfcmap = $bdfcmap|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($bdfcmap)) + 20|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($bdfcmap)) + 16|0);
 HEAP32[$1>>2] = 0;
 return;
}
function _bdf_cmap_char_index($bdfcmap,$charcode) {
 $bdfcmap = $bdfcmap|0;
 $charcode = $charcode|0;
 var $$lcssa = 0, $$max$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max$01 = 0;
 var $min$0$ = 0, $min$02 = 0, $phitmp = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($bdfcmap)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($bdfcmap)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $result$0 = 0;
  return ($result$0|0);
 } else {
  $max$01 = $3;$min$02 = 0;
 }
 while(1) {
  $5 = (($min$02) + ($max$01))|0;
  $6 = $5 >>> 1;
  $7 = (($1) + ($6<<3)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==($charcode|0);
  if ($9) {
   $$lcssa = $6;
   break;
  }
  $14 = ($8>>>0)>($charcode>>>0);
  $15 = (($6) + 1)|0;
  $$max$0 = $14 ? $6 : $max$01;
  $min$0$ = $14 ? $min$02 : $15;
  $16 = ($min$0$>>>0)<($$max$0>>>0);
  if ($16) {
   $max$01 = $$max$0;$min$02 = $min$0$;
  } else {
   $result$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($result$0|0);
 }
 $10 = (((($1) + ($$lcssa<<3)|0)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($12) + 1)|0;
 $phitmp = $13 & 65535;
 $result$0 = $phitmp;
 return ($result$0|0);
}
function _bdf_cmap_char_next($bdfcmap,$acharcode) {
 $bdfcmap = $bdfcmap|0;
 $acharcode = $acharcode|0;
 var $$lcssa = 0, $$max$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $charcode$0 = 0, $max$02 = 0, $min$0$ = 0, $min$0$lcssa = 0, $min$03 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($bdfcmap)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$acharcode>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ((($bdfcmap)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $min$0$lcssa = 0;
  } else {
   $max$02 = $5;$min$03 = 0;
   while(1) {
    $7 = (($min$03) + ($max$02))|0;
    $8 = $7 >>> 1;
    $9 = (($1) + ($8<<3)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($3|0)==($10|0);
    if ($11) {
     $$lcssa = $8;
     break;
    }
    $16 = ($3>>>0)<($10>>>0);
    $17 = (($8) + 1)|0;
    $$max$0 = $16 ? $8 : $max$02;
    $min$0$ = $16 ? $min$03 : $17;
    $18 = ($min$0$>>>0)<($$max$0>>>0);
    if ($18) {
     $max$02 = $$max$0;$min$03 = $min$0$;
    } else {
     $min$0$lcssa = $min$0$;
     break L1;
    }
   }
   $12 = (((($1) + ($$lcssa<<3)|0)) + 4|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = $13&65535;
   $15 = (($14) + 1)|0;
   $charcode$0 = $3;$result$0 = $15;
   HEAP32[$acharcode>>2] = $charcode$0;
   $27 = $result$0 & 65535;
   return ($27|0);
  }
 } while(0);
 $19 = HEAP32[$4>>2]|0;
 $20 = ($min$0$lcssa>>>0)<($19>>>0);
 if (!($20)) {
  $charcode$0 = 0;$result$0 = 0;
  HEAP32[$acharcode>>2] = $charcode$0;
  $27 = $result$0 & 65535;
  return ($27|0);
 }
 $21 = (($1) + ($min$0$lcssa<<3)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (((($1) + ($min$0$lcssa<<3)|0)) + 4|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = (($25) + 1)|0;
 $charcode$0 = $22;$result$0 = $26;
 HEAP32[$acharcode>>2] = $charcode$0;
 $27 = $result$0 & 65535;
 return ($27|0);
}
function _bdf_driver_requester($module,$name) {
 $module = $module|0;
 $name = $name|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_service_list_lookup(672,$name)|0);
 return ($0|0);
}
function _BDF_Face_Init($stream,$bdfface,$face_index,$num_params,$params) {
 $stream = $stream|0;
 $bdfface = $bdfface|0;
 $face_index = $face_index|0;
 $num_params = $num_params|0;
 $params = $params|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $charmap = 0, $charmap1 = 0, $error = 0, $font = 0, $n$09 = 0, $options = 0, $or$cond = 0, $or$cond5 = 0, $phitmp = 0, $phitmp8 = 0, $resolution_x$0 = 0, $resolution_y$0 = 0, $sext4 = 0, $unicode_charmap$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $error = sp + 44|0;
 $font = sp + 40|0;
 $options = sp + 24|0;
 $charmap = sp + 12|0;
 $charmap1 = sp;
 $0 = ((($bdfface)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$font>>2] = 0;
 $2 = (_FT_Stream_Seek($stream,0)|0);
 HEAP32[$error>>2] = $2;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   HEAP32[$options>>2] = 1;
   $4 = ((($options)) + 4|0);
   HEAP32[$4>>2] = 1;
   $5 = ((($options)) + 8|0);
   HEAP32[$5>>2] = 0;
   $6 = ((($options)) + 12|0);
   HEAP32[$6>>2] = 8;
   $7 = (_bdf_load_font($stream,$1,$options,$font)|0);
   HEAP32[$error>>2] = $7;
   switch ($7|0) {
   case 176:  {
    _BDF_Face_Done($bdfface);
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
    break;
   }
   case 0:  {
    break;
   }
   default: {
    break L1;
   }
   }
   $8 = HEAP32[$font>>2]|0;
   $9 = ((($bdfface)) + 140|0);
   HEAP32[$9>>2] = $8;
   HEAP32[$bdfface>>2] = 1;
   $10 = ((($bdfface)) + 4|0);
   HEAP32[$10>>2] = 0;
   $11 = ((($bdfface)) + 8|0);
   HEAP32[$11>>2] = 146;
   $12 = HEAP32[$font>>2]|0;
   $13 = (_bdf_get_font_property($12,25555)|0);
   $14 = ($13|0)==(0|0);
   L7: do {
    if (!($14)) {
     $15 = ((($13)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(1);
     if ($17) {
      $18 = ((($13)) + 12|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = ($19|0)==(0|0);
      if (!($20)) {
       $21 = HEAP8[$19>>0]|0;
       switch ($21<<24>>24) {
       case 99: case 67: case 109: case 77:  {
        break;
       }
       default: {
        break L7;
       }
       }
       $22 = HEAP32[$11>>2]|0;
       $23 = $22 | 4;
       HEAP32[$11>>2] = $23;
      }
     }
    }
   } while(0);
   $24 = HEAP32[$font>>2]|0;
   $25 = (_bdf_get_font_property($24,27330)|0);
   $26 = ($25|0)==(0|0);
   if ($26) {
    label = 11;
   } else {
    $27 = ((($25)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(0|0);
    if ($29) {
     label = 11;
    } else {
     $30 = (_ft_mem_strdup($1,$28,$error)|0);
     $31 = ((($bdfface)) + 20|0);
     HEAP32[$31>>2] = $30;
     $32 = HEAP32[$error>>2]|0;
     $33 = ($32|0)==(0);
     if (!($33)) {
      break;
     }
    }
   }
   if ((label|0) == 11) {
    $34 = ((($bdfface)) + 20|0);
    HEAP32[$34>>2] = 0;
   }
   $35 = (_bdf_interpret_style($bdfface)|0);
   HEAP32[$error>>2] = $35;
   $36 = ($35|0)==(0);
   if ($36) {
    $37 = HEAP32[$font>>2]|0;
    $38 = ((($37)) + 48|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + 1)|0;
    $41 = ((($bdfface)) + 16|0);
    HEAP32[$41>>2] = $40;
    $42 = ((($bdfface)) + 28|0);
    HEAP32[$42>>2] = 1;
    $43 = (_ft_mem_realloc($1,16,0,1,0,$error)|0);
    $44 = ((($bdfface)) + 32|0);
    HEAP32[$44>>2] = $43;
    $45 = HEAP32[$error>>2]|0;
    $46 = ($45|0)==(0);
    if ($46) {
     ;HEAP32[$43>>2]=0|0;HEAP32[$43+4>>2]=0|0;HEAP32[$43+8>>2]=0|0;HEAP32[$43+12>>2]=0|0;
     $47 = HEAP32[$font>>2]|0;
     $48 = ((($47)) + 40|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($47)) + 44|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = (($51) + ($49))|0;
     $53 = $52&65535;
     HEAP16[$43>>1] = $53;
     $54 = HEAP32[$font>>2]|0;
     $55 = (_bdf_get_font_property($54,27342)|0);
     $56 = ($55|0)==(0|0);
     if ($56) {
      $63 = HEAP16[$43>>1]|0;
      $64 = $63 << 16 >> 16;
      $65 = $64 << 1;
      $66 = (($65|0) / 3)&-1;
      $67 = $66&65535;
      $68 = ((($43)) + 2|0);
      HEAP16[$68>>1] = $67;
     } else {
      $57 = ((($55)) + 12|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = (($58) + 5)|0;
      $60 = (($59|0) / 10)&-1;
      $61 = $60&65535;
      $62 = ((($43)) + 2|0);
      HEAP16[$62>>1] = $61;
     }
     $69 = HEAP32[$font>>2]|0;
     $70 = (_bdf_get_font_property($69,27356)|0);
     $71 = ($70|0)==(0|0);
     if ($71) {
      $78 = ((($43)) + 2|0);
      $79 = HEAP16[$78>>1]|0;
      $80 = $79 << 16 >> 16;
      $81 = $80 << 6;
      $82 = ((($43)) + 4|0);
      HEAP32[$82>>2] = $81;
     } else {
      $72 = ((($70)) + 12|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73*460800)|0;
      $75 = (($74) + 36135)|0;
      $76 = (($75|0) / 72270)&-1;
      $77 = ((($43)) + 4|0);
      HEAP32[$77>>2] = $76;
     }
     $83 = HEAP32[$font>>2]|0;
     $84 = (_bdf_get_font_property($83,27367)|0);
     $85 = ($84|0)==(0|0);
     if (!($85)) {
      $86 = ((($84)) + 12|0);
      $87 = HEAP32[$86>>2]|0;
      $sext4 = $87 << 16;
      $88 = $sext4 >> 10;
      $89 = ((($43)) + 12|0);
      HEAP32[$89>>2] = $88;
     }
     $90 = HEAP32[$font>>2]|0;
     $91 = (_bdf_get_font_property($90,27378)|0);
     $92 = ($91|0)==(0|0);
     if ($92) {
      $resolution_x$0 = 0;
     } else {
      $93 = ((($91)) + 12|0);
      $94 = HEAP32[$93>>2]|0;
      $phitmp = $94 << 16;
      $phitmp8 = $phitmp >> 16;
      $resolution_x$0 = $phitmp8;
     }
     $95 = HEAP32[$font>>2]|0;
     $96 = (_bdf_get_font_property($95,27391)|0);
     $97 = ($96|0)==(0|0);
     if ($97) {
      $resolution_y$0 = 0;
     } else {
      $98 = ((($96)) + 12|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = $99&65535;
      $resolution_y$0 = $100;
     }
     $101 = ((($43)) + 12|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($102|0)==(0);
     if ($103) {
      $104 = ((($43)) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      HEAP32[$101>>2] = $105;
      $106 = ($resolution_y$0<<16>>16)==(0);
      if ($106) {
       label = 31;
      } else {
       $107 = $resolution_y$0 << 16 >> 16;
       $108 = Math_imul($105, $107)|0;
       $109 = (($108|0) / 72)&-1;
       HEAP32[$101>>2] = $109;
       label = 29;
      }
     } else {
      label = 29;
     }
     if ((label|0) == 29) {
      $110 = ($resolution_x$0|0)==(0);
      $111 = ($resolution_y$0<<16>>16)==(0);
      $or$cond5 = $110 | $111;
      if ($or$cond5) {
       label = 31;
      } else {
       $112 = $resolution_y$0 << 16 >> 16;
       $113 = HEAP32[$101>>2]|0;
       $114 = Math_imul($113, $resolution_x$0)|0;
       $115 = (($114|0) / ($112|0))&-1;
       $116 = ((($43)) + 8|0);
       HEAP32[$116>>2] = $115;
      }
     }
     if ((label|0) == 31) {
      $117 = HEAP32[$101>>2]|0;
      $118 = ((($43)) + 8|0);
      HEAP32[$118>>2] = $117;
     }
     $119 = HEAP32[$font>>2]|0;
     $120 = ((($119)) + 56|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ((($119)) + 48|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (_ft_mem_realloc($1,8,0,$123,0,$error)|0);
     $125 = ((($bdfface)) + 144|0);
     HEAP32[$125>>2] = $124;
     $126 = HEAP32[$error>>2]|0;
     $127 = ($126|0)==(0);
     if ($127) {
      $128 = ((($bdfface)) + 164|0);
      HEAP32[$128>>2] = 0;
      $129 = HEAP32[$font>>2]|0;
      $130 = ((($129)) + 48|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ($131|0)==(0);
      if ($132) {
       $$lcssa = $129;
      } else {
       $133 = HEAP32[$125>>2]|0;
       $134 = HEAP32[$font>>2]|0;
       $135 = ((($134)) + 36|0);
       $136 = HEAP32[$135>>2]|0;
       $137 = ((($134)) + 48|0);
       $138 = HEAP32[$137>>2]|0;
       $n$09 = 0;
       while(1) {
        $139 = (((($121) + (($n$09*36)|0)|0)) + 4|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = (($133) + ($n$09<<3)|0);
        HEAP32[$141>>2] = $140;
        $142 = $n$09&65535;
        $143 = (((($133) + ($n$09<<3)|0)) + 4|0);
        HEAP16[$143>>1] = $142;
        $144 = HEAP32[$139>>2]|0;
        $145 = ($144|0)==($136|0);
        if ($145) {
         HEAP32[$128>>2] = $n$09;
        }
        $146 = (($n$09) + 1)|0;
        $147 = ($146>>>0)<($138>>>0);
        if ($147) {
         $n$09 = $146;
        } else {
         $$lcssa = $134;
         break;
        }
       }
      }
      $148 = (_bdf_get_font_property($$lcssa,87930)|0);
      $149 = HEAP32[$font>>2]|0;
      $150 = (_bdf_get_font_property($149,87947)|0);
      $151 = ($148|0)!=(0|0);
      $152 = ($150|0)!=(0|0);
      $or$cond = $151 & $152;
      if ($or$cond) {
       $153 = ((($148)) + 4|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($154|0)==(1);
       if ($155) {
        $156 = ((($150)) + 4|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(1);
        if ($158) {
         $159 = ((($148)) + 12|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if (!($161)) {
          $162 = ((($150)) + 12|0);
          $163 = HEAP32[$162>>2]|0;
          $164 = ($163|0)==(0|0);
          if (!($164)) {
           $165 = (_ft_mem_strdup($1,$163,$error)|0);
           $166 = ((($bdfface)) + 132|0);
           HEAP32[$166>>2] = $165;
           $167 = HEAP32[$error>>2]|0;
           $168 = ($167|0)==(0);
           if (!($168)) {
            break;
           }
           $169 = HEAP32[$159>>2]|0;
           $170 = (_ft_mem_strdup($1,$169,$error)|0);
           $171 = ((($bdfface)) + 136|0);
           HEAP32[$171>>2] = $170;
           $172 = HEAP32[$error>>2]|0;
           $173 = ($172|0)==(0);
           if (!($173)) {
            break;
           }
           $174 = HEAP8[$170>>0]|0;
           L64: do {
            switch ($174<<24>>24) {
            case 73: case 105:  {
             $175 = ((($170)) + 1|0);
             $176 = HEAP8[$175>>0]|0;
             switch ($176<<24>>24) {
             case 83: case 115:  {
              break;
             }
             default: {
              $unicode_charmap$0 = 0;
              break L64;
             }
             }
             $177 = ((($170)) + 2|0);
             $178 = HEAP8[$177>>0]|0;
             switch ($178<<24>>24) {
             case 79: case 111:  {
              break;
             }
             default: {
              $unicode_charmap$0 = 0;
              break L64;
             }
             }
             $179 = ((($170)) + 3|0);
             $180 = (_strcmp($179,26797)|0);
             $181 = ($180|0)==(0);
             if (!($181)) {
              $182 = (_strcmp($179,26803)|0);
              $183 = ($182|0)==(0);
              if (!($183)) {
               $unicode_charmap$0 = 0;
               break L64;
              }
              $184 = HEAP32[$166>>2]|0;
              $185 = (_strcmp($184,26808)|0);
              $186 = ($185|0)==(0);
              if (!($186)) {
               $unicode_charmap$0 = 0;
               break L64;
              }
             }
             $unicode_charmap$0 = 1;
             break;
            }
            default: {
             $unicode_charmap$0 = 0;
            }
            }
           } while(0);
           HEAP32[$charmap>>2] = $bdfface;
           $187 = ((($charmap)) + 4|0);
           HEAP32[$187>>2] = 0;
           $188 = ((($charmap)) + 8|0);
           HEAP16[$188>>1] = 0;
           $189 = ((($charmap)) + 10|0);
           HEAP16[$189>>1] = 0;
           if ($unicode_charmap$0) {
            HEAP32[$187>>2] = 1970170211;
            HEAP16[$188>>1] = 3;
            HEAP16[$189>>1] = 1;
           }
           $190 = (_FT_CMap_New(528,0,$charmap,0)|0);
           HEAP32[$error>>2] = $190;
           break;
          }
         }
        }
       }
      }
      HEAP32[$charmap1>>2] = $bdfface;
      $191 = ((($charmap1)) + 4|0);
      HEAP32[$191>>2] = 1094995778;
      $192 = ((($charmap1)) + 8|0);
      HEAP16[$192>>1] = 7;
      $193 = ((($charmap1)) + 10|0);
      HEAP16[$193>>1] = 0;
      $194 = (_FT_CMap_New(528,0,$charmap1,0)|0);
      HEAP32[$error>>2] = $194;
      $195 = ((($bdfface)) + 36|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==(0);
      if (!($197)) {
       $198 = ((($bdfface)) + 40|0);
       $199 = HEAP32[$198>>2]|0;
       $200 = HEAP32[$199>>2]|0;
       $201 = ((($bdfface)) + 92|0);
       HEAP32[$201>>2] = $200;
      }
     }
    }
   }
  }
 } while(0);
 $202 = HEAP32[$error>>2]|0;
 $$0 = $202;
 STACKTOP = sp;return ($$0|0);
}
function _BDF_Face_Done($bdfface) {
 $bdfface = $bdfface|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bdfface|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($bdfface)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($bdfface)) + 140|0);
 $4 = HEAP32[$3>>2]|0;
 _bdf_free_font($4);
 $5 = ((($bdfface)) + 144|0);
 $6 = HEAP32[$5>>2]|0;
 _ft_mem_free($2,$6);
 HEAP32[$5>>2] = 0;
 $7 = ((($bdfface)) + 132|0);
 $8 = HEAP32[$7>>2]|0;
 _ft_mem_free($2,$8);
 HEAP32[$7>>2] = 0;
 $9 = ((($bdfface)) + 136|0);
 $10 = HEAP32[$9>>2]|0;
 _ft_mem_free($2,$10);
 HEAP32[$9>>2] = 0;
 $11 = ((($bdfface)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 _ft_mem_free($2,$12);
 HEAP32[$11>>2] = 0;
 $13 = ((($bdfface)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 _ft_mem_free($2,$14);
 HEAP32[$13>>2] = 0;
 $15 = ((($bdfface)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 _ft_mem_free($2,$16);
 HEAP32[$15>>2] = 0;
 $17 = HEAP32[$3>>2]|0;
 _ft_mem_free($2,$17);
 HEAP32[$3>>2] = 0;
 return;
}
function _BDF_Glyph_Load($slot,$size,$glyph_index,$load_flags) {
 $slot = $slot|0;
 $size = $size|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 140|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 278662|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ($0|0)==(0|0);
 if ($6) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)>($glyph_index>>>0);
 if (!($9)) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $10 = ($glyph_index|0)==(0);
 if ($10) {
  $11 = ((($0)) + 164|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 } else {
  $13 = (($glyph_index) + -1)|0;
  $$0 = $13;
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = ((($14)) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (((($16) + (($$0*36)|0)|0)) + 10|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = (((($16) + (($$0*36)|0)|0)) + 12|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = (((($16) + (($$0*36)|0)|0)) + 14|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = (((($16) + (($$0*36)|0)|0)) + 16|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = (((($16) + (($$0*36)|0)|0)) + 20|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = (((($16) + (($$0*36)|0)|0)) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (((($16) + (($$0*36)|0)|0)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $22&65535;
 $32 = ((($slot)) + 76|0);
 HEAP32[$32>>2] = $31;
 $33 = $20&65535;
 $34 = ((($slot)) + 80|0);
 HEAP32[$34>>2] = $33;
 $35 = ((($slot)) + 84|0);
 HEAP32[$35>>2] = $30;
 _ft_glyphslot_set_bitmap($slot,$28);
 switch ($5|0) {
 case 1:  {
  $36 = ((($slot)) + 94|0);
  HEAP8[$36>>0] = 1;
  break;
 }
 case 2:  {
  $37 = ((($slot)) + 94|0);
  HEAP8[$37>>0] = 3;
  break;
 }
 case 4:  {
  $38 = ((($slot)) + 94|0);
  HEAP8[$38>>0] = 4;
  break;
 }
 case 8:  {
  $39 = ((($slot)) + 94|0);
  HEAP8[$39>>0] = 2;
  $40 = ((($slot)) + 92|0);
  HEAP16[$40>>1] = 256;
  break;
 }
 default: {
 }
 }
 $41 = ((($slot)) + 72|0);
 HEAP32[$41>>2] = 1651078259;
 $42 = $24 << 16 >> 16;
 $43 = ((($slot)) + 100|0);
 HEAP32[$43>>2] = $42;
 $44 = $26 << 16 >> 16;
 $45 = ((($slot)) + 104|0);
 HEAP32[$45>>2] = $44;
 $46 = $18&65535;
 $47 = $46 << 6;
 $48 = ((($slot)) + 24|0);
 $49 = ((($slot)) + 40|0);
 HEAP32[$49>>2] = $47;
 $50 = $42 << 6;
 $51 = ((($slot)) + 32|0);
 HEAP32[$51>>2] = $50;
 $52 = $44 << 6;
 $53 = ((($slot)) + 36|0);
 HEAP32[$53>>2] = $52;
 $54 = HEAP32[$34>>2]|0;
 $55 = $54 << 6;
 HEAP32[$48>>2] = $55;
 $56 = HEAP32[$32>>2]|0;
 $57 = $56 << 6;
 $58 = ((($slot)) + 28|0);
 HEAP32[$58>>2] = $57;
 $59 = HEAP32[$1>>2]|0;
 $60 = ((($59)) + 6|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61&65535;
 $63 = $62 << 6;
 _ft_synthesize_vertical_metrics($48,$63);
 $error$0 = 0;
 return ($error$0|0);
}
function _BDF_Size_Request($size,$req) {
 $size = $size|0;
 $req = $req|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 140|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($req)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 $8 = ((($req)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 if ($7) {
  $14 = $9;
 } else {
  $10 = Math_imul($9, $6)|0;
  $11 = (($10) + 36)|0;
  $12 = (($11|0) / 72)&-1;
  $14 = $12;
 }
 $13 = (($14) + 32)|0;
 $15 = $13 >> 6;
 $16 = HEAP32[$req>>2]|0;
 switch ($16|0) {
 case 0:  {
  $17 = ((($2)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 32)|0;
  $20 = $19 >> 6;
  $21 = ($15|0)==($20|0);
  if (!($21)) {
   $$0 = 23;
   return ($$0|0);
  }
  break;
 }
 case 1:  {
  $22 = ((($4)) + 40|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($4)) + 44|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($23))|0;
  $27 = ($15|0)==($26|0);
  if (!($27)) {
   $$0 = 23;
   return ($$0|0);
  }
  break;
 }
 default: {
  $$0 = 7;
  return ($$0|0);
 }
 }
 (_BDF_Size_Select($size,0)|0);
 $$0 = 0;
 return ($$0|0);
}
function _BDF_Size_Select($size,$strike_index) {
 $size = $size|0;
 $strike_index = $strike_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 140|0);
 $2 = HEAP32[$1>>2]|0;
 _FT_Select_Metrics($0,$strike_index);
 $3 = ((($2)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << 6;
 $6 = ((($size)) + 24|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($2)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (0 - ($8))|0;
 $10 = $9 << 6;
 $11 = ((($size)) + 28|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($2)) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = $14 << 6;
 $16 = ((($size)) + 36|0);
 HEAP32[$16>>2] = $15;
 return 0;
}
function _bdf_interpret_style($bdf) {
 $bdf = $bdf|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $exitcond = 0, $exitcond$3 = 0, $len$1 = 0, $len$1$1 = 0, $len$1$2 = 0, $len$1$3 = 0, $len$2 = 0, $lengths = 0, $mm$04 = 0, $mm$04$3 = 0;
 var $s$1 = 0, $s$1$1 = 0, $s$1$2 = 0, $s$1$3 = 0, $s$2 = 0, $s$2$1 = 0, $s$2$2 = 0, $s$2$3 = 0, $strings = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $error = sp + 32|0;
 $strings = sp + 16|0;
 $lengths = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($bdf)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($bdf)) + 140|0);
 $3 = HEAP32[$2>>2]|0;
 ;HEAP32[$strings>>2]=0|0;HEAP32[$strings+4>>2]=0|0;HEAP32[$strings+8>>2]=0|0;HEAP32[$strings+12>>2]=0|0;
 $4 = ((($bdf)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = (_bdf_get_font_property($3,27404)|0);
 $6 = ($5|0)==(0|0);
 L1: do {
  if (!($6)) {
   $7 = ((($5)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(1);
   if ($9) {
    $10 = ((($5)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(0|0);
    if (!($12)) {
     $13 = HEAP8[$11>>0]|0;
     switch ($13<<24>>24) {
     case 105: case 73: case 111: case 79:  {
      break;
     }
     default: {
      break L1;
     }
     }
     $14 = HEAP32[$4>>2]|0;
     $15 = $14 | 1;
     HEAP32[$4>>2] = $15;
     $16 = HEAP32[$10>>2]|0;
     $17 = HEAP8[$16>>0]|0;
     $18 = $17 & -33;
     $19 = ($18<<24>>24)==(79);
     $20 = $19 ? 27410 : 89788;
     $21 = ((($strings)) + 8|0);
     HEAP32[$21>>2] = $20;
    }
   }
  }
 } while(0);
 $22 = (_bdf_get_font_property($3,27418)|0);
 $23 = ($22|0)==(0|0);
 L7: do {
  if (!($23)) {
   $24 = ((($22)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   if ($26) {
    $27 = ((($22)) + 12|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(0|0);
    if (!($29)) {
     $30 = HEAP8[$28>>0]|0;
     switch ($30<<24>>24) {
     case 98: case 66:  {
      break;
     }
     default: {
      break L7;
     }
     }
     $31 = HEAP32[$4>>2]|0;
     $32 = $31 | 2;
     HEAP32[$4>>2] = $32;
     $33 = ((($strings)) + 4|0);
     HEAP32[$33>>2] = 89783;
    }
   }
  }
 } while(0);
 $34 = (_bdf_get_font_property($3,27430)|0);
 $35 = ($34|0)==(0|0);
 L13: do {
  if (!($35)) {
   $36 = ((($34)) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(1);
   if ($38) {
    $39 = ((($34)) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(0|0);
    if (!($41)) {
     $42 = HEAP8[$40>>0]|0;
     switch ($42<<24>>24) {
     case 110: case 78: case 0:  {
      break L13;
      break;
     }
     default: {
     }
     }
     $43 = ((($strings)) + 12|0);
     HEAP32[$43>>2] = $40;
    }
   }
  }
 } while(0);
 $44 = (_bdf_get_font_property($3,27444)|0);
 $45 = ($44|0)==(0|0);
 L19: do {
  if (!($45)) {
   $46 = ((($44)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(1);
   if ($48) {
    $49 = ((($44)) + 12|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP8[$50>>0]|0;
     switch ($52<<24>>24) {
     case 110: case 78: case 0:  {
      break L19;
      break;
     }
     default: {
     }
     }
     HEAP32[$strings>>2] = $50;
    }
   }
  }
 } while(0);
 HEAP32[$lengths>>2] = 0;
 $53 = HEAP32[$strings>>2]|0;
 $54 = ($53|0)==(0|0);
 if ($54) {
  $len$1 = 0;
 } else {
  $55 = (_strlen($53)|0);
  HEAP32[$lengths>>2] = $55;
  $56 = (($55) + 1)|0;
  $len$1 = $56;
 }
 $57 = ((($lengths)) + 4|0);
 HEAP32[$57>>2] = 0;
 $58 = ((($strings)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(0|0);
 if ($60) {
  $len$1$1 = $len$1;
 } else {
  $110 = (_strlen($59)|0);
  HEAP32[$57>>2] = $110;
  $111 = (($len$1) + 1)|0;
  $112 = (($111) + ($110))|0;
  $len$1$1 = $112;
 }
 $113 = ((($lengths)) + 8|0);
 HEAP32[$113>>2] = 0;
 $114 = ((($strings)) + 8|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($115|0)==(0|0);
 if ($116) {
  $len$1$2 = $len$1$1;
 } else {
  $117 = (_strlen($115)|0);
  HEAP32[$113>>2] = $117;
  $118 = (($len$1$1) + 1)|0;
  $119 = (($118) + ($117))|0;
  $len$1$2 = $119;
 }
 $120 = ((($lengths)) + 12|0);
 HEAP32[$120>>2] = 0;
 $121 = ((($strings)) + 12|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)==(0|0);
 if ($123) {
  $len$1$3 = $len$1$2;
 } else {
  $124 = (_strlen($122)|0);
  HEAP32[$120>>2] = $124;
  $125 = (($len$1$2) + 1)|0;
  $126 = (($125) + ($124))|0;
  $len$1$3 = $126;
 }
 $127 = ($len$1$3|0)==(0);
 if ($127) {
  HEAP32[$strings>>2] = 89763;
  HEAP32[$lengths>>2] = 7;
  $len$2 = 8;
 } else {
  $len$2 = $len$1$3;
 }
 $61 = (_ft_mem_alloc($1,$len$2,$error)|0);
 $62 = ((($bdf)) + 24|0);
 HEAP32[$62>>2] = $61;
 $63 = HEAP32[$error>>2]|0;
 $64 = ($63|0)==(0);
 if (!($64)) {
  $$0 = $63;
  STACKTOP = sp;return ($$0|0);
 }
 $65 = HEAP32[$strings>>2]|0;
 $66 = HEAP32[$lengths>>2]|0;
 $67 = ($65|0)==(0|0);
 if ($67) {
  $s$2 = $61;
 } else {
  $68 = HEAP32[$62>>2]|0;
  $69 = ($61|0)==($68|0);
  if ($69) {
   $s$1 = $61;
  } else {
   $70 = ((($61)) + 1|0);
   HEAP8[$61>>0] = 32;
   $s$1 = $70;
  }
  _memcpy(($s$1|0),($65|0),($66|0))|0;
  $71 = ($66|0)==(0);
  if (!($71)) {
   $mm$04 = 0;
   while(1) {
    $72 = (($s$1) + ($mm$04)|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = ($73<<24>>24)==(32);
    if ($74) {
     HEAP8[$72>>0] = 45;
    }
    $75 = (($mm$04) + 1)|0;
    $exitcond = ($75|0)==($66|0);
    if ($exitcond) {
     break;
    } else {
     $mm$04 = $75;
    }
   }
  }
  $76 = (($s$1) + ($66)|0);
  $s$2 = $76;
 }
 $77 = ((($strings)) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($lengths)) + 4|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($78|0)==(0|0);
 if ($81) {
  $s$2$1 = $s$2;
 } else {
  $82 = HEAP32[$62>>2]|0;
  $83 = ($s$2|0)==($82|0);
  if ($83) {
   $s$1$1 = $s$2;
  } else {
   $84 = ((($s$2)) + 1|0);
   HEAP8[$s$2>>0] = 32;
   $s$1$1 = $84;
  }
  _memcpy(($s$1$1|0),($78|0),($80|0))|0;
  $85 = (($s$1$1) + ($80)|0);
  $s$2$1 = $85;
 }
 $86 = ((($strings)) + 8|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($lengths)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($87|0)==(0|0);
 if ($90) {
  $s$2$2 = $s$2$1;
 } else {
  $91 = HEAP32[$62>>2]|0;
  $92 = ($s$2$1|0)==($91|0);
  if ($92) {
   $s$1$2 = $s$2$1;
  } else {
   $93 = ((($s$2$1)) + 1|0);
   HEAP8[$s$2$1>>0] = 32;
   $s$1$2 = $93;
  }
  _memcpy(($s$1$2|0),($87|0),($89|0))|0;
  $94 = (($s$1$2) + ($89)|0);
  $s$2$2 = $94;
 }
 $95 = ((($strings)) + 12|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ((($lengths)) + 12|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($96|0)==(0|0);
 if ($99) {
  $s$2$3 = $s$2$2;
 } else {
  $100 = HEAP32[$62>>2]|0;
  $101 = ($s$2$2|0)==($100|0);
  if ($101) {
   $s$1$3 = $s$2$2;
  } else {
   $102 = ((($s$2$2)) + 1|0);
   HEAP8[$s$2$2>>0] = 32;
   $s$1$3 = $102;
  }
  _memcpy(($s$1$3|0),($96|0),($98|0))|0;
  $103 = ($98|0)==(0);
  if (!($103)) {
   $mm$04$3 = 0;
   while(1) {
    $104 = (($s$1$3) + ($mm$04$3)|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = ($105<<24>>24)==(32);
    if ($106) {
     HEAP8[$104>>0] = 45;
    }
    $107 = (($mm$04$3) + 1)|0;
    $exitcond$3 = ($107|0)==($98|0);
    if ($exitcond$3) {
     break;
    } else {
     $mm$04$3 = $107;
    }
   }
  }
  $108 = (($s$1$3) + ($98)|0);
  $s$2$3 = $108;
 }
 HEAP8[$s$2$3>>0] = 0;
 $109 = HEAP32[$error>>2]|0;
 $$0 = $109;
 STACKTOP = sp;return ($$0|0);
}
function _bdf_get_charset_id($face,$acharset_encoding,$acharset_registry) {
 $face = $face|0;
 $acharset_encoding = $acharset_encoding|0;
 $acharset_registry = $acharset_registry|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 132|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$acharset_encoding>>2] = $1;
 $2 = ((($face)) + 136|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$acharset_registry>>2] = $3;
 return 0;
}
function _bdf_get_bdf_property($face,$prop_name,$aproperty) {
 $face = $face|0;
 $prop_name = $prop_name|0;
 $aproperty = $aproperty|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 140|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_bdf_get_font_property($1,$prop_name)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 6;
  return ($$0|0);
 }
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 1:  {
  HEAP32[$aproperty>>2] = 1;
  $6 = ((($2)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($aproperty)) + 4|0);
  HEAP32[$8>>2] = $7;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 2:  {
  $9 = ((($2)) + 12|0);
  HEAP32[$aproperty>>2] = 2;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($aproperty)) + 4|0);
  HEAP32[$11>>2] = $10;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 case 3:  {
  $12 = ((($2)) + 12|0);
  HEAP32[$aproperty>>2] = 3;
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($aproperty)) + 4|0);
  HEAP32[$14>>2] = $13;
  $$0 = 0;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = 6;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _bdf_get_property($name,$font) {
 $name = $name|0;
 $font = $font|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($name|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = HEAP8[$name>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($font)) + 278676|0);
 $4 = (_hash_lookup($name,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($4)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(82);
 if ($8) {
  $9 = ((($font)) + 278668|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($7) + -83)|0;
  $12 = (($10) + ($11<<4)|0);
  $$0 = $12;
  return ($$0|0);
 } else {
  $13 = (704 + ($7<<4)|0);
  $$0 = $13;
  return ($$0|0);
 }
 return (0)|0;
}
function _bdf_load_font($stream,$extmemory,$opts,$font) {
 $stream = $stream|0;
 $extmemory = $extmemory|0;
 $opts = $opts|0;
 $font = $font|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $lineno = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $lineno = sp + 4|0;
 $error = sp;
 HEAP32[$lineno>>2] = 0;
 HEAP32[$error>>2] = 0;
 $0 = (_ft_mem_alloc($extmemory,139324,$error)|0);
 $1 = HEAP32[$error>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $3 = ($opts|0)!=(0|0);
   $4 = $3 ? $opts : 2032;
   $5 = ((($0)) + 36|0);
   HEAP32[$5>>2] = $4;
   $6 = ((($0)) + 12|0);
   HEAP16[$6>>1] = 32767;
   $7 = ((($0)) + 139320|0);
   HEAP32[$7>>2] = $extmemory;
   $8 = ((($0)) + 139304|0);
   __bdf_list_init($8,$extmemory);
   $9 = (__bdf_readstream($stream,$0,$lineno)|0);
   HEAP32[$error>>2] = $9;
   $10 = ($9|0)==(0);
   do {
    if ($10) {
     $11 = ((($0)) + 32|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==(0|0);
     do {
      if (!($13)) {
       $14 = ((($12)) + 28|0);
       $15 = HEAP32[$14>>2]|0;
       $16 = ($15|0)==(8);
       if (!($16)) {
        $17 = ((($12)) + 4|0);
        $18 = HEAP16[$17>>1]|0;
        $19 = ((($12)) + 32|0);
        HEAP16[$19>>1] = $18;
       }
       $20 = ((($0)) + 4|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = HEAP32[$11>>2]|0;
       $23 = ((($22)) + 52|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = ((($22)) + 64|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = (($26) + ($24))|0;
       $28 = ($21|0)==($27|0);
       if (!($28)) {
        $29 = ((($22)) + 278660|0);
        HEAP16[$29>>1] = 1;
       }
       $30 = HEAP32[$5>>2]|0;
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31|0)==(0);
       if (!($32)) {
        $33 = HEAP32[$11>>2]|0;
        $34 = ((($33)) + 52|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = ($35|0)==(0);
        if ($36) {
         $37 = ((($33)) + 64|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = ($38|0)==(0);
         if ($39) {
          break;
         }
        }
        $40 = ((($0)) + 16|0);
        $41 = HEAP16[$40>>1]|0;
        $42 = $41 << 16 >> 16;
        $43 = HEAP16[$6>>1]|0;
        $44 = $43 << 16 >> 16;
        $45 = (($42) - ($44))|0;
        $46 = HEAP32[$11>>2]|0;
        $47 = ((($46)) + 4|0);
        $48 = HEAP16[$47>>1]|0;
        $49 = $48&65535;
        $50 = ($45|0)==($49|0);
        if (!($50)) {
         $51 = $45&65535;
         HEAP16[$47>>1] = $51;
         $52 = HEAP32[$11>>2]|0;
         $53 = ((($52)) + 278660|0);
         HEAP16[$53>>1] = 1;
        }
        $54 = HEAP32[$11>>2]|0;
        $55 = ((($54)) + 8|0);
        $56 = HEAP16[$55>>1]|0;
        $57 = HEAP16[$6>>1]|0;
        $58 = ($56<<16>>16)==($57<<16>>16);
        if (!($58)) {
         HEAP16[$55>>1] = $57;
         $59 = HEAP32[$11>>2]|0;
         $60 = ((($59)) + 278660|0);
         HEAP16[$60>>1] = 1;
        }
        $61 = HEAP32[$11>>2]|0;
        $62 = ((($61)) + 12|0);
        $63 = HEAP16[$62>>1]|0;
        $64 = ((($0)) + 18|0);
        $65 = HEAP16[$64>>1]|0;
        $66 = ($63<<16>>16)==($65<<16>>16);
        if (!($66)) {
         HEAP16[$62>>1] = $65;
         $67 = HEAP32[$11>>2]|0;
         $68 = ((($67)) + 278660|0);
         HEAP16[$68>>1] = 1;
        }
        $69 = HEAP32[$11>>2]|0;
        $70 = ((($69)) + 14|0);
        $71 = HEAP16[$70>>1]|0;
        $72 = ((($0)) + 20|0);
        $73 = HEAP16[$72>>1]|0;
        $74 = ($71<<16>>16)==($73<<16>>16);
        if (!($74)) {
         HEAP16[$70>>1] = $73;
         $75 = HEAP16[$72>>1]|0;
         $76 = $75&65535;
         $77 = (0 - ($76))|0;
         $78 = $77&65535;
         $79 = HEAP32[$11>>2]|0;
         $80 = ((($79)) + 10|0);
         HEAP16[$80>>1] = $78;
         $81 = HEAP32[$11>>2]|0;
         $82 = ((($81)) + 278660|0);
         HEAP16[$82>>1] = 1;
        }
        $83 = HEAP16[$64>>1]|0;
        $84 = $83 << 16 >> 16;
        $85 = HEAP16[$72>>1]|0;
        $86 = $85 << 16 >> 16;
        $87 = (($86) + ($84))|0;
        $88 = HEAP32[$11>>2]|0;
        $89 = ((($88)) + 6|0);
        $90 = HEAP16[$89>>1]|0;
        $91 = $90&65535;
        $92 = ($87|0)==($91|0);
        if (!($92)) {
         $93 = $87&65535;
         HEAP16[$89>>1] = $93;
        }
       }
      }
     } while(0);
     $94 = HEAP32[$0>>2]|0;
     $95 = $94 & 1;
     $96 = ($95|0)==(0);
     if (!($96)) {
      $97 = $94 & 32;
      $98 = ($97|0)==(0);
      if ($98) {
       HEAP32[$error>>2] = 185;
       break L1;
      } else {
       HEAP32[$error>>2] = 186;
       break L1;
      }
     }
     $99 = HEAP32[$11>>2]|0;
     $100 = ($99|0)==(0|0);
     if ($100) {
      $120 = HEAP32[$error>>2]|0;
      $121 = ($120|0)==(0);
      if ($121) {
       HEAP32[$error>>2] = 3;
      }
     } else {
      $101 = ((($99)) + 88|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ($102|0)==(0);
      if (!($103)) {
       $104 = ((($99)) + 278664|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = (($102) + 1)|0;
       $107 = ((($99)) + 84|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = (_ft_mem_realloc($105,1,$102,$106,$108,$error)|0);
       $110 = HEAP32[$11>>2]|0;
       $111 = ((($110)) + 84|0);
       HEAP32[$111>>2] = $109;
       $112 = HEAP32[$error>>2]|0;
       $113 = ($112|0)==(0);
       if (!($113)) {
        break;
       }
       $114 = HEAP32[$11>>2]|0;
       $115 = ((($114)) + 88|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = ((($114)) + 84|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (($118) + ($116)|0);
       HEAP8[$119>>0] = 0;
      }
     }
     $122 = HEAP32[$11>>2]|0;
     HEAP32[$font>>2] = $122;
     break L1;
    }
   } while(0);
   $126 = ((($0)) + 32|0);
   $127 = HEAP32[$126>>2]|0;
   _bdf_free_font($127);
   $128 = HEAP32[$126>>2]|0;
   _ft_mem_free($extmemory,$128);
   HEAP32[$126>>2] = 0;
  } else {
   $123 = ($0|0)==(0|0);
   if ($123) {
    $125 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($125|0);
   }
  }
 } while(0);
 $124 = ((($0)) + 139304|0);
 __bdf_list_done($124);
 _ft_mem_free($extmemory,$0);
 $125 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($125|0);
}
function _bdf_free_font($font) {
 $font = $font|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $glyphs$014 = 0, $glyphs$19 = 0, $glyphs$24 = 0, $i$018 = 0, $i$113 = 0, $i$28 = 0, $i$33 = 0, $i$41 = 0, $prop$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($font|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($font)) + 278664|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$font>>2]|0;
 _ft_mem_free($2,$3);
 HEAP32[$font>>2] = 0;
 $4 = ((($font)) + 128|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _hash_free($5,$2);
  $7 = HEAP32[$4>>2]|0;
  _ft_mem_free($2,$7);
  HEAP32[$4>>2] = 0;
 }
 $8 = ((($font)) + 84|0);
 $9 = HEAP32[$8>>2]|0;
 _ft_mem_free($2,$9);
 HEAP32[$8>>2] = 0;
 $10 = ((($font)) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 $13 = ((($font)) + 80|0);
 if (!($12)) {
  $i$018 = 0;
  while(1) {
   $14 = HEAP32[$13>>2]|0;
   $15 = (((($14) + ($i$018<<4)|0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(1);
   if ($17) {
    $18 = (((($14) + ($i$018<<4)|0)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    _ft_mem_free($2,$19);
    $20 = HEAP32[$13>>2]|0;
    $21 = (((($20) + ($i$018<<4)|0)) + 12|0);
    HEAP32[$21>>2] = 0;
   }
   $22 = (($i$018) + 1)|0;
   $23 = HEAP32[$10>>2]|0;
   $24 = ($22>>>0)<($23>>>0);
   if ($24) {
    $i$018 = $22;
   } else {
    break;
   }
  }
 }
 $25 = HEAP32[$13>>2]|0;
 _ft_mem_free($2,$25);
 HEAP32[$13>>2] = 0;
 $26 = ((($font)) + 56|0);
 $27 = ((($font)) + 52|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0);
 if (!($29)) {
  $30 = HEAP32[$26>>2]|0;
  $glyphs$014 = $30;$i$113 = 0;
  while(1) {
   $31 = HEAP32[$glyphs$014>>2]|0;
   _ft_mem_free($2,$31);
   HEAP32[$glyphs$014>>2] = 0;
   $32 = ((($glyphs$014)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   _ft_mem_free($2,$33);
   HEAP32[$32>>2] = 0;
   $34 = (($i$113) + 1)|0;
   $35 = ((($glyphs$014)) + 36|0);
   $36 = HEAP32[$27>>2]|0;
   $37 = ($34>>>0)<($36>>>0);
   if ($37) {
    $glyphs$014 = $35;$i$113 = $34;
   } else {
    break;
   }
  }
 }
 $38 = ((($font)) + 68|0);
 $39 = ((($font)) + 64|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0);
 if (!($41)) {
  $42 = HEAP32[$38>>2]|0;
  $glyphs$19 = $42;$i$28 = 0;
  while(1) {
   $43 = HEAP32[$glyphs$19>>2]|0;
   _ft_mem_free($2,$43);
   HEAP32[$glyphs$19>>2] = 0;
   $44 = ((($glyphs$19)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   _ft_mem_free($2,$45);
   HEAP32[$44>>2] = 0;
   $46 = (($i$28) + 1)|0;
   $47 = ((($glyphs$19)) + 36|0);
   $48 = HEAP32[$39>>2]|0;
   $49 = ($46>>>0)<($48>>>0);
   if ($49) {
    $glyphs$19 = $47;$i$28 = $46;
   } else {
    break;
   }
  }
 }
 $50 = HEAP32[$26>>2]|0;
 _ft_mem_free($2,$50);
 HEAP32[$26>>2] = 0;
 $51 = HEAP32[$38>>2]|0;
 _ft_mem_free($2,$51);
 HEAP32[$38>>2] = 0;
 $52 = ((($font)) + 104|0);
 $53 = ((($font)) + 112|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0);
 if (!($55)) {
  $56 = HEAP32[$52>>2]|0;
  $glyphs$24 = $56;$i$33 = 0;
  while(1) {
   $57 = HEAP32[$glyphs$24>>2]|0;
   _ft_mem_free($2,$57);
   HEAP32[$glyphs$24>>2] = 0;
   $58 = ((($glyphs$24)) + 24|0);
   $59 = HEAP32[$58>>2]|0;
   _ft_mem_free($2,$59);
   HEAP32[$58>>2] = 0;
   $60 = (($i$33) + 1)|0;
   $61 = ((($glyphs$24)) + 36|0);
   $62 = HEAP32[$53>>2]|0;
   $63 = ($60>>>0)<($62>>>0);
   if ($63) {
    $glyphs$24 = $61;$i$33 = $60;
   } else {
    break;
   }
  }
 }
 $64 = HEAP32[$52>>2]|0;
 _ft_mem_free($2,$64);
 HEAP32[$52>>2] = 0;
 $65 = ((($font)) + 278676|0);
 _hash_free($65,$2);
 $66 = ((($font)) + 278668|0);
 $67 = ((($font)) + 278672|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $70 = HEAP32[$66>>2]|0;
  $i$41 = 0;$prop$02 = $70;
  while(1) {
   $71 = HEAP32[$prop$02>>2]|0;
   _ft_mem_free($2,$71);
   HEAP32[$prop$02>>2] = 0;
   $72 = ((($prop$02)) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(1);
   if ($74) {
    $75 = ((($prop$02)) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    _ft_mem_free($2,$76);
    HEAP32[$75>>2] = 0;
   }
   $77 = (($i$41) + 1)|0;
   $78 = ((($prop$02)) + 16|0);
   $79 = HEAP32[$67>>2]|0;
   $80 = ($77>>>0)<($79>>>0);
   if ($80) {
    $i$41 = $77;$prop$02 = $78;
   } else {
    break;
   }
  }
 }
 $81 = HEAP32[$66>>2]|0;
 _ft_mem_free($2,$81);
 HEAP32[$66>>2] = 0;
 return;
}
function _bdf_get_font_property($font,$name) {
 $font = $font|0;
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($font|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($font)) + 72|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $4 = ($name|0)==(0|0);
 $or$cond = $4 | $3;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP8[$name>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($font)) + 128|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_hash_lookup($name,$8)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ((($font)) + 80|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($9)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + ($14<<4)|0);
 $$0 = $15;
 return ($$0|0);
}
function _hash_lookup($key,$ht) {
 $key = $key|0;
 $ht = $ht|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_hash_bucket($key,$ht)|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __bdf_list_init($list,$memory) {
 $list = $list|0;
 $memory = $memory|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$list>>2]=0|0;HEAP32[$list+4>>2]=0|0;HEAP32[$list+8>>2]=0|0;
 $0 = ((($list)) + 12|0);
 HEAP32[$0>>2] = $memory;
 return;
}
function __bdf_readstream($stream,$client_data,$lno) {
 $stream = $stream|0;
 $client_data = $client_data|0;
 $lno = $lno|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $avail$0 = 0, $avail$0$ph = 0, $avail$0$ph$ph = 0, $avail$0$ph8 = 0, $avail$0$phi = 0, $avail$1 = 0, $avail$1$lcssa = 0, $avail$1$lcssa162 = 0, $avail$1$lcssa164 = 0, $buf$0$ph = 0, $buf$0$ph$ph = 0, $buf$0$ph9 = 0, $buf$0$ph9$lcssa = 0, $buf$0$ph9$lcssa165 = 0, $buf$0$ph9$lcssa167 = 0;
 var $buf$0$ph9169 = 0, $buf$0$ph9170 = 0, $buf$2 = 0, $buf_size$0$ph = 0, $buf_size$0$ph$ph = 0, $buf_size$0$ph10 = 0, $buf_size$0$ph10$lcssa = 0, $buf_size$0$ph10$lcssa171 = 0, $bytes$0 = 0, $bytes$0$ph = 0, $bytes$0$ph$ph = 0, $bytes$0$ph5 = 0, $bytes$1 = 0, $bytes$1$lcssa = 0, $bytes$1$lcssa156 = 0, $bytes$1$lcssa158 = 0, $cb = 0, $cursor$0 = 0, $cursor$0$ph = 0, $cursor$0$ph$ph = 0;
 var $cursor$0$ph7 = 0, $cursor$0$ph7$phi = 0, $cursor$1 = 0, $cursor$1$lcssa = 0, $cursor$1$lcssa159 = 0, $end$039 = 0, $end$039$lcssa = 0, $error = 0, $lineno$0$ph$ph = 0, $lineno$0$ph$ph178 = 0, $refill$0 = 0, $refill$0$ph = 0, $refill$0$ph$ph = 0, $refill$0$ph4 = 0, $start$0 = 0, $start$0$lcssa = 0, $start$0$lcssa153 = 0, $start$0$ph = 0, $start$0$ph$ph = 0, $start$0$ph6 = 0;
 var $switch$select = 0, $switch$select95 = 0, $switch$selectcmp = 0, $switch$selectcmp94 = 0, $to_skip$0$ph = 0, $to_skip$0$ph$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cb = sp + 4|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = (_ft_mem_realloc($1,1,0,1024,0,$error)|0);
 $3 = HEAP32[$error>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $buf$2 = $2;
  _ft_mem_free($1,$buf$2);
  $44 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($44|0);
 }
 HEAP32[$cb>>2] = 34;
 HEAP8[$2>>0] = 0;
 $avail$0$ph$ph = 0;$buf$0$ph$ph = $2;$buf_size$0$ph$ph = 1024;$bytes$0$ph$ph = 0;$cursor$0$ph$ph = 0;$lineno$0$ph$ph = 1;$refill$0$ph$ph = 0;$start$0$ph$ph = 0;$to_skip$0$ph$ph = 256;
 L4: while(1) {
  $avail$0$ph = $avail$0$ph$ph;$buf$0$ph = $buf$0$ph$ph;$buf_size$0$ph = $buf_size$0$ph$ph;$bytes$0$ph = $bytes$0$ph$ph;$cursor$0$ph = $cursor$0$ph$ph;$refill$0$ph = $refill$0$ph$ph;$start$0$ph = $start$0$ph$ph;$to_skip$0$ph = $to_skip$0$ph$ph;
  L6: while(1) {
   $avail$0$ph8 = $avail$0$ph;$buf$0$ph9 = $buf$0$ph;$buf_size$0$ph10 = $buf_size$0$ph;$bytes$0$ph5 = $bytes$0$ph;$cursor$0$ph7 = $cursor$0$ph;$refill$0$ph4 = $refill$0$ph;$start$0$ph6 = $start$0$ph;
   L8: while(1) {
    $avail$0 = $avail$0$ph8;$bytes$0 = $bytes$0$ph5;$cursor$0 = $cursor$0$ph7;$refill$0 = $refill$0$ph4;$start$0 = $start$0$ph6;
    while(1) {
     if ($refill$0) {
      $avail$1 = $avail$0;$bytes$1 = $bytes$0;$cursor$1 = $cursor$0;
     } else {
      $5 = (($buf$0$ph9) + ($cursor$0)|0);
      $6 = (($buf_size$0$ph10) - ($cursor$0))|0;
      $7 = (_FT_Stream_TryRead($stream,$5,$6)|0);
      $8 = (($7) + ($cursor$0))|0;
      $avail$1 = $8;$bytes$1 = $7;$cursor$1 = 0;
     }
     $9 = ($avail$1|0)>($start$0|0);
     if ($9) {
      $11 = (($buf$0$ph9) + ($start$0)|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = $12 << 24 >> 24;
      $14 = ($13|0)==($to_skip$0$ph|0);
      if ($14) {
       $avail$1$lcssa = $avail$1;$buf$0$ph9$lcssa = $buf$0$ph9;$buf_size$0$ph10$lcssa = $buf_size$0$ph10;$bytes$1$lcssa = $bytes$1;$cursor$1$lcssa = $cursor$1;$start$0$lcssa = $start$0;
       break L8;
      }
     }
     $10 = ($avail$1|0)>($start$0|0);
     L18: do {
      if ($10) {
       $end$039 = $start$0;
       while(1) {
        $16 = (($buf$0$ph9) + ($end$039)|0);
        $17 = HEAP8[$16>>0]|0;
        switch ($17<<24>>24) {
        case 10: case 13:  {
         $avail$1$lcssa162 = $avail$1;$buf$0$ph9$lcssa165 = $buf$0$ph9;$buf_size$0$ph10$lcssa171 = $buf_size$0$ph10;$bytes$1$lcssa156 = $bytes$1;$cursor$1$lcssa159 = $cursor$1;$end$039$lcssa = $end$039;$start$0$lcssa153 = $start$0;
         break L6;
         break;
        }
        default: {
        }
        }
        $18 = (($end$039) + 1)|0;
        $19 = ($18|0)<($avail$1|0);
        if ($19) {
         $end$039 = $18;
        } else {
         break L18;
        }
       }
      }
     } while(0);
     $20 = ($bytes$1|0)==(0);
     if ($20) {
      $buf$0$ph9169 = $buf$0$ph9;$lineno$0$ph$ph178 = $lineno$0$ph$ph;
      label = 26;
      break L4;
     }
     $21 = ($start$0|0)==(0);
     if ($21) {
      $avail$1$lcssa164 = $avail$1;$bytes$1$lcssa158 = $bytes$1;
      break;
     }
     $27 = (($avail$1) - ($start$0))|0;
     $28 = (($buf$0$ph9) + ($start$0)|0);
     _memcpy(($buf$0$ph9|0),($28|0),($27|0))|0;
     $avail$0$phi = $start$0;$bytes$0 = $27;$cursor$0 = $27;$refill$0 = 0;$start$0 = 0;$avail$0 = $avail$0$phi;
    }
    $22 = ($buf_size$0$ph10>>>0)>(65535);
    if ($22) {
     $buf$0$ph9$lcssa167 = $buf$0$ph9;
     label = 17;
     break L4;
    }
    $23 = $buf_size$0$ph10 << 1;
    $24 = (_ft_mem_realloc($1,1,$buf_size$0$ph10,$23,$buf$0$ph9,$error)|0);
    $25 = HEAP32[$error>>2]|0;
    $26 = ($25|0)==(0);
    if ($26) {
     $cursor$0$ph7$phi = $buf_size$0$ph10;$avail$0$ph8 = $avail$1$lcssa164;$buf$0$ph9 = $24;$buf_size$0$ph10 = $23;$bytes$0$ph5 = $bytes$1$lcssa158;$refill$0$ph4 = 0;$start$0$ph6 = 0;$cursor$0$ph7 = $cursor$0$ph7$phi;
    } else {
     $buf$2 = $24;
     label = 27;
     break L4;
    }
   }
   $15 = (($start$0$lcssa) + 1)|0;
   $avail$0$ph = $avail$1$lcssa;$buf$0$ph = $buf$0$ph9$lcssa;$buf_size$0$ph = $buf_size$0$ph10$lcssa;$bytes$0$ph = $bytes$1$lcssa;$cursor$0$ph = $cursor$1$lcssa;$refill$0$ph = 1;$start$0$ph = $15;$to_skip$0$ph = 256;
  }
  $29 = (($buf$0$ph9$lcssa165) + ($end$039$lcssa)|0);
  $30 = HEAP8[$29>>0]|0;
  HEAP8[$29>>0] = 0;
  $31 = (($buf$0$ph9$lcssa165) + ($start$0$lcssa153)|0);
  $32 = HEAP8[$31>>0]|0;
  switch ($32<<24>>24) {
  case 26: case 35:  {
   $buf$0$ph9170 = $buf$0$ph9$lcssa165;
   break;
  }
  default: {
   $33 = ($end$039$lcssa|0)>($start$0$lcssa153|0);
   if ($33) {
    $34 = HEAP32[$cb>>2]|0;
    $35 = (($end$039$lcssa) - ($start$0$lcssa153))|0;
    $36 = (FUNCTION_TABLE_iiiiii[$34 & 63]($31,$35,$lineno$0$ph$ph,$cb,$client_data)|0);
    HEAP32[$error>>2] = $36;
    $37 = ($36|0)==(-1);
    if ($37) {
     $38 = HEAP32[$cb>>2]|0;
     $39 = (FUNCTION_TABLE_iiiiii[$38 & 63]($31,$35,$lineno$0$ph$ph,$cb,$client_data)|0);
     HEAP32[$error>>2] = $39;
     $41 = $39;
    } else {
     $41 = $36;
    }
    $40 = ($41|0)==(0);
    if ($40) {
     $buf$0$ph9170 = $buf$0$ph9$lcssa165;
    } else {
     $buf$0$ph9169 = $buf$0$ph9$lcssa165;$lineno$0$ph$ph178 = $lineno$0$ph$ph;
     label = 26;
     break L4;
    }
   } else {
    $buf$0$ph9170 = $buf$0$ph9$lcssa165;
   }
  }
  }
  $42 = (($lineno$0$ph$ph) + 1)|0;
  HEAP8[$29>>0] = $30;
  $43 = (($end$039$lcssa) + 1)|0;
  $switch$selectcmp = ($30<<24>>24)==(13);
  $switch$select = $switch$selectcmp ? 10 : 256;
  $switch$selectcmp94 = ($30<<24>>24)==(10);
  $switch$select95 = $switch$selectcmp94 ? 13 : $switch$select;
  $avail$0$ph$ph = $avail$1$lcssa162;$buf$0$ph$ph = $buf$0$ph9170;$buf_size$0$ph$ph = $buf_size$0$ph10$lcssa171;$bytes$0$ph$ph = $bytes$1$lcssa156;$cursor$0$ph$ph = $cursor$1$lcssa159;$lineno$0$ph$ph = $42;$refill$0$ph$ph = 1;$start$0$ph$ph = $43;$to_skip$0$ph$ph = $switch$select95;
 }
 if ((label|0) == 17) {
  HEAP32[$error>>2] = 6;
  $buf$2 = $buf$0$ph9$lcssa167;
  _ft_mem_free($1,$buf$2);
  $44 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($44|0);
 }
 else if ((label|0) == 26) {
  HEAP32[$lno>>2] = $lineno$0$ph$ph178;
  $buf$2 = $buf$0$ph9169;
  _ft_mem_free($1,$buf$2);
  $44 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($44|0);
 }
 else if ((label|0) == 27) {
  _ft_mem_free($1,$buf$2);
  $44 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function __bdf_list_done($list) {
 $list = $list|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($list)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$list>>2]|0;
 _ft_mem_free($1,$3);
 ;HEAP32[$list>>2]=0|0;HEAP32[$list+4>>2]=0|0;HEAP32[$list+8>>2]=0|0;HEAP32[$list+12>>2]=0|0;
 return;
}
function _hash_free($ht,$memory) {
 $ht = $ht|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bp$02 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ht|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($ht)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($ht)) + 12|0);
 $4 = ($2|0)>(0);
 if ($4) {
  $5 = HEAP32[$3>>2]|0;
  $bp$02 = $5;$i$01 = 0;
  while(1) {
   $6 = HEAP32[$bp$02>>2]|0;
   _ft_mem_free($memory,$6);
   HEAP32[$bp$02>>2] = 0;
   $7 = (($i$01) + 1)|0;
   $8 = ((($bp$02)) + 4|0);
   $exitcond = ($7|0)==($2|0);
   if ($exitcond) {
    break;
   } else {
    $bp$02 = $8;$i$01 = $7;
   }
  }
 }
 $9 = HEAP32[$3>>2]|0;
 _ft_mem_free($memory,$9);
 HEAP32[$3>>2] = 0;
 return;
}
function __bdf_parse_start($line,$linelen,$lineno,$call_data,$client_data) {
 $line = $line|0;
 $linelen = $linelen|0;
 $lineno = $lineno|0;
 $call_data = $call_data|0;
 $client_data = $client_data|0;
 var $$0 = 0, $$0$v = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bitcount$0$i1$0 = 0, $bitcount$0$i1$0$lcssa = 0, $bitcount$0$lcssa6 = 0, $bitcount$03 = 0, $error = 0, $i$01 = 0, $i1$04 = 0, $memory$0 = 0, $nbuf = 0, $phitmp = 0, $prop$02 = 0, $s$0 = 0;
 var $shift$05 = 0, $slen = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $slen = sp + 16|0;
 $error = sp + 12|0;
 $nbuf = sp + 24|0;
 HEAP32[$error>>2] = 0;
 $0 = ((($client_data)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $memory$0 = 0;
 } else {
  $3 = ((($1)) + 278664|0);
  $4 = HEAP32[$3>>2]|0;
  $memory$0 = $4;
 }
 $5 = (_memcmp($line,25184,7)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = ((($client_data)) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  if ($11) {
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $12 = HEAP32[$0>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $14 = ((($line)) + 7|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(0);
  $17 = ((($line)) + 8|0);
  $$0$v = $16 ? -7 : -8;
  $$0 = (($$0$v) + ($linelen))|0;
  $s$0 = $16 ? $14 : $17;
  $18 = (__bdf_add_comment($12,$s$0,$$0)|0);
  HEAP32[$error>>2] = $18;
  $245 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($245|0);
 }
 $19 = HEAP32[$client_data>>2]|0;
 $20 = $19 & 1;
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = ((($client_data)) + 139320|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_memcmp($line,25192,9)|0);
  $25 = ($24|0)==(0);
  if (!($25)) {
   HEAP32[$error>>2] = 176;
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  HEAP32[$client_data>>2] = 1;
  HEAP32[$0>>2] = 0;
  $26 = (_ft_mem_alloc($23,278692,$error)|0);
  $27 = HEAP32[$error>>2]|0;
  $28 = ($27|0)==(0);
  if (!($28)) {
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  HEAP32[$0>>2] = $26;
  $29 = HEAP32[$22>>2]|0;
  $30 = ((($26)) + 278664|0);
  HEAP32[$30>>2] = $29;
  HEAP32[$22>>2] = 0;
  $31 = ((($26)) + 278676|0);
  $32 = (_hash_init($31,$23)|0);
  HEAP32[$error>>2] = $32;
  $33 = ($32|0)==(0);
  if ($33) {
   $i$01 = 0;$prop$02 = 704;
  } else {
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  while(1) {
   $34 = HEAP32[$prop$02>>2]|0;
   $35 = (_hash_insert($34,$i$01,$31,$23)|0);
   HEAP32[$error>>2] = $35;
   $36 = ($35|0)==(0);
   if (!($36)) {
    label = 56;
    break;
   }
   $37 = (($i$01) + 1)|0;
   $38 = ((($prop$02)) + 16|0);
   $39 = ($37>>>0)<(83);
   if ($39) {
    $i$01 = $37;$prop$02 = $38;
   } else {
    break;
   }
  }
  if ((label|0) == 56) {
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $40 = (_ft_mem_alloc($23,16,$error)|0);
  $41 = HEAP32[$0>>2]|0;
  $42 = ((($41)) + 128|0);
  HEAP32[$42>>2] = $40;
  $43 = HEAP32[$error>>2]|0;
  $44 = ($43|0)==(0);
  if (!($44)) {
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $45 = HEAP32[$0>>2]|0;
  $46 = ((($45)) + 128|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (_hash_init($47,$23)|0);
  HEAP32[$error>>2] = $48;
  $49 = ($48|0)==(0);
  if (!($49)) {
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $50 = ((($client_data)) + 36|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$0>>2]|0;
  $55 = ((($54)) + 28|0);
  HEAP32[$55>>2] = $53;
  $56 = HEAP32[$0>>2]|0;
  $57 = ((($56)) + 36|0);
  HEAP32[$57>>2] = -1;
  $245 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($245|0);
 }
 $58 = (_memcmp($line,25202,15)|0);
 $59 = ($58|0)==(0);
 if ($59) {
  $60 = $19 & 8;
  $61 = ($60|0)==(0);
  if ($61) {
   HEAP32[$error>>2] = 179;
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $62 = ((($client_data)) + 139304|0);
  $63 = (__bdf_list_split($62,25218,$line,$linelen)|0);
  HEAP32[$error>>2] = $63;
  $64 = ($63|0)==(0);
  if (!($64)) {
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $65 = HEAP32[$62>>2]|0;
  $66 = ((($65)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (__bdf_atoul($67)|0);
  $69 = HEAP32[$0>>2]|0;
  $70 = ((($69)) + 72|0);
  HEAP32[$70>>2] = $68;
  $71 = ((($client_data)) + 4|0);
  HEAP32[$71>>2] = $68;
  $72 = (_ft_mem_realloc($memory$0,16,0,$68,0,$error)|0);
  $73 = HEAP32[$0>>2]|0;
  $74 = ((($73)) + 80|0);
  HEAP32[$74>>2] = $72;
  $75 = HEAP32[$error>>2]|0;
  $76 = ($75|0)==(0);
  if (!($76)) {
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $77 = HEAP32[$client_data>>2]|0;
  $78 = $77 | 16;
  HEAP32[$client_data>>2] = $78;
  HEAP32[$call_data>>2] = 35;
  $245 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($245|0);
 }
 $79 = (_memcmp($line,25221,15)|0);
 $80 = ($79|0)==(0);
 if ($80) {
  $81 = $19 & 4;
  $82 = ($81|0)==(0);
  if ($82) {
   HEAP32[$error>>2] = 178;
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $83 = ((($client_data)) + 139304|0);
  $84 = (__bdf_list_split($83,25218,$line,$linelen)|0);
  HEAP32[$error>>2] = $84;
  $85 = ($84|0)==(0);
  if (!($85)) {
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $86 = HEAP32[$83>>2]|0;
  $87 = ((($86)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (__bdf_atos($88)|0);
  $90 = HEAP32[$0>>2]|0;
  $91 = ((($90)) + 4|0);
  HEAP16[$91>>1] = $89;
  $92 = HEAP32[$83>>2]|0;
  $93 = ((($92)) + 8|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (__bdf_atos($94)|0);
  $96 = HEAP32[$0>>2]|0;
  $97 = ((($96)) + 6|0);
  HEAP16[$97>>1] = $95;
  $98 = HEAP32[$83>>2]|0;
  $99 = ((($98)) + 12|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (__bdf_atos($100)|0);
  $102 = HEAP32[$0>>2]|0;
  $103 = ((($102)) + 8|0);
  HEAP16[$103>>1] = $101;
  $104 = HEAP32[$83>>2]|0;
  $105 = ((($104)) + 16|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (__bdf_atos($106)|0);
  $108 = HEAP32[$0>>2]|0;
  $109 = ((($108)) + 10|0);
  HEAP16[$109>>1] = $107;
  $110 = HEAP32[$0>>2]|0;
  $111 = ((($110)) + 6|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $112&65535;
  $114 = ((($110)) + 10|0);
  $115 = HEAP16[$114>>1]|0;
  $116 = $115&65535;
  $117 = (($116) + ($113))|0;
  $118 = $117&65535;
  $119 = ((($110)) + 12|0);
  HEAP16[$119>>1] = $118;
  $120 = HEAP32[$0>>2]|0;
  $121 = ((($120)) + 10|0);
  $122 = HEAP16[$121>>1]|0;
  $123 = $122&65535;
  $124 = (0 - ($123))|0;
  $125 = $124&65535;
  $126 = ((($120)) + 14|0);
  HEAP16[$126>>1] = $125;
  $127 = HEAP32[$client_data>>2]|0;
  $128 = $127 | 8;
  HEAP32[$client_data>>2] = $128;
  $245 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($245|0);
 }
 $129 = (_memcmp($line,25237,4)|0);
 $130 = ($129|0)==(0);
 if ($130) {
  $131 = ((($client_data)) + 139304|0);
  $132 = (__bdf_list_split($131,25218,$line,$linelen)|0);
  HEAP32[$error>>2] = $132;
  $133 = ($132|0)==(0);
  if (!($133)) {
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  __bdf_list_shift($131);
  $134 = (__bdf_list_join($131,$slen)|0);
  $135 = ($134|0)==(0|0);
  if ($135) {
   HEAP32[$error>>2] = 3;
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $136 = HEAP32[$0>>2]|0;
  $137 = HEAP32[$136>>2]|0;
  _ft_mem_free($memory$0,$137);
  $138 = HEAP32[$0>>2]|0;
  HEAP32[$138>>2] = 0;
  $139 = HEAP32[$slen>>2]|0;
  $140 = (($139) + 1)|0;
  $141 = (_ft_mem_realloc($memory$0,1,0,$140,0,$error)|0);
  $142 = HEAP32[$0>>2]|0;
  HEAP32[$142>>2] = $141;
  $143 = HEAP32[$error>>2]|0;
  $144 = ($143|0)==(0);
  if (!($144)) {
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $145 = HEAP32[$0>>2]|0;
  $146 = HEAP32[$145>>2]|0;
  $147 = HEAP32[$slen>>2]|0;
  $148 = (($147) + 1)|0;
  _memcpy(($146|0),($134|0),($148|0))|0;
  $149 = HEAP32[$0>>2]|0;
  $150 = ((($client_data)) + 36|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (__bdf_set_default_spacing($149,$151)|0);
  HEAP32[$error>>2] = $152;
  $153 = ($152|0)==(0);
  if (!($153)) {
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $154 = HEAP32[$client_data>>2]|0;
  $155 = $154 | 2;
  HEAP32[$client_data>>2] = $155;
  $245 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($245|0);
 }
 $156 = (_memcmp($line,25242,4)|0);
 $157 = ($156|0)==(0);
 if (!($157)) {
  $214 = (_memcmp($line,25247,5)|0);
  $215 = ($214|0)==(0);
  if (!($215)) {
   HEAP32[$error>>2] = 3;
   $245 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($245|0);
  }
  $216 = HEAP32[$client_data>>2]|0;
  $217 = $216 & 8;
  $218 = ($217|0)==(0);
  if ($218) {
   HEAP32[$error>>2] = 179;
  } else {
   $219 = HEAP32[$0>>2]|0;
   $220 = ((($219)) + 12|0);
   $221 = HEAP16[$220>>1]|0;
   $222 = $221 << 16 >> 16;
   $223 = ((($219)) + 40|0);
   HEAP32[$223>>2] = $222;
   $224 = HEAP32[$0>>2]|0;
   $225 = ((($224)) + 12|0);
   $226 = HEAP16[$225>>1]|0;
   $227 = $226 << 16 >> 16;
   HEAP32[$vararg_buffer>>2] = $227;
   (_sprintf($nbuf,25253,$vararg_buffer)|0);
   $228 = HEAP32[$0>>2]|0;
   $229 = (__bdf_add_property($228,25257,$nbuf)|0);
   HEAP32[$error>>2] = $229;
   $230 = ($229|0)==(0);
   if ($230) {
    $231 = HEAP32[$0>>2]|0;
    $232 = ((($231)) + 14|0);
    $233 = HEAP16[$232>>1]|0;
    $234 = $233 << 16 >> 16;
    $235 = ((($231)) + 44|0);
    HEAP32[$235>>2] = $234;
    $236 = HEAP32[$0>>2]|0;
    $237 = ((($236)) + 14|0);
    $238 = HEAP16[$237>>1]|0;
    $239 = $238 << 16 >> 16;
    HEAP32[$vararg_buffer1>>2] = $239;
    (_sprintf($nbuf,25253,$vararg_buffer1)|0);
    $240 = HEAP32[$0>>2]|0;
    $241 = (__bdf_add_property($240,25269,$nbuf)|0);
    HEAP32[$error>>2] = $241;
    $242 = ($241|0)==(0);
    if ($242) {
     $243 = HEAP32[$0>>2]|0;
     $244 = ((($243)) + 278660|0);
     HEAP16[$244>>1] = 1;
     HEAP32[$call_data>>2] = 36;
     HEAP32[$error>>2] = -1;
    }
   }
  }
  $245 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($245|0);
 }
 $158 = $19 & 2;
 $159 = ($158|0)==(0);
 if ($159) {
  HEAP32[$error>>2] = 177;
  $245 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($245|0);
 }
 $160 = ((($client_data)) + 139304|0);
 $161 = (__bdf_list_split($160,25218,$line,$linelen)|0);
 HEAP32[$error>>2] = $161;
 $162 = ($161|0)==(0);
 if (!($162)) {
  $245 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($245|0);
 }
 $163 = HEAP32[$160>>2]|0;
 $164 = ((($163)) + 4|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = (__bdf_atoul($165)|0);
 $167 = HEAP32[$0>>2]|0;
 $168 = ((($167)) + 16|0);
 HEAP32[$168>>2] = $166;
 $169 = HEAP32[$160>>2]|0;
 $170 = ((($169)) + 8|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = (__bdf_atoul($171)|0);
 $173 = HEAP32[$0>>2]|0;
 $174 = ((($173)) + 20|0);
 HEAP32[$174>>2] = $172;
 $175 = HEAP32[$160>>2]|0;
 $176 = ((($175)) + 12|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = (__bdf_atoul($177)|0);
 $179 = HEAP32[$0>>2]|0;
 $180 = ((($179)) + 24|0);
 HEAP32[$180>>2] = $178;
 $181 = ((($client_data)) + 139312|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = ($182|0)==(5);
 if ($183) {
  $184 = HEAP32[$160>>2]|0;
  $185 = ((($184)) + 16|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = (__bdf_atos($186)|0);
  $188 = HEAP32[$0>>2]|0;
  $189 = ((($188)) + 278662|0);
  HEAP16[$189>>1] = $187;
  $190 = HEAP32[$0>>2]|0;
  $191 = ((($190)) + 278662|0);
  $192 = HEAP16[$191>>1]|0;
  $193 = ($192<<16>>16)==(0);
  if ($193) {
   $bitcount$0$lcssa6 = 0;
   label = 43;
  } else {
   $bitcount$03 = 0;$i1$04 = 0;$shift$05 = $192;
   while(1) {
    $194 = $shift$05 & 1;
    $195 = ($194<<16>>16)==(0);
    $bitcount$0$i1$0 = $195 ? $bitcount$03 : $i1$04;
    $196 = ($shift$05&65535) >>> 1;
    $197 = (($i1$04) + 1)<<16>>16;
    $198 = ($196<<16>>16)==(0);
    if ($198) {
     $bitcount$0$i1$0$lcssa = $bitcount$0$i1$0;
     break;
    } else {
     $bitcount$03 = $bitcount$0$i1$0;$i1$04 = $197;$shift$05 = $196;
    }
   }
   $199 = ($bitcount$0$i1$0$lcssa&65535)>(3);
   if ($199) {
    $207 = 8;
   } else {
    $bitcount$0$lcssa6 = $bitcount$0$i1$0$lcssa;
    label = 43;
   }
  }
  if ((label|0) == 43) {
   $200 = $bitcount$0$lcssa6&65535;
   $201 = 1 << $200;
   $phitmp = $201 & 65535;
   $207 = $phitmp;
  }
  $202 = HEAP32[$0>>2]|0;
  $203 = ((($202)) + 278662|0);
  $204 = HEAP16[$203>>1]|0;
  $205 = $204&65535;
  $206 = ($205|0)==($207|0);
  if (!($206)) {
   $208 = $207 << 1;
   $209 = $208&65535;
   HEAP16[$203>>1] = $209;
  }
 } else {
  $210 = HEAP32[$0>>2]|0;
  $211 = ((($210)) + 278662|0);
  HEAP16[$211>>1] = 1;
 }
 $212 = HEAP32[$client_data>>2]|0;
 $213 = $212 | 4;
 HEAP32[$client_data>>2] = $213;
 $245 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($245|0);
}
function __bdf_add_comment($font,$comment,$len) {
 $font = $font|0;
 $comment = $comment|0;
 $len = $len|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($font)) + 278664|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = ((($font)) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($len) + 1)|0;
 $5 = (($4) + ($3))|0;
 $6 = ((($font)) + 84|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_ft_mem_realloc($1,1,$3,$5,$7,$error)|0);
 HEAP32[$6>>2] = $8;
 $9 = HEAP32[$error>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $17 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($17|0);
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = (($8) + ($11)|0);
 _memcpy(($12|0),($comment|0),($len|0))|0;
 $$sum = (($11) + ($len))|0;
 $13 = (($8) + ($$sum)|0);
 HEAP8[$13>>0] = 10;
 $14 = (($len) + 1)|0;
 $15 = HEAP32[$2>>2]|0;
 $16 = (($14) + ($15))|0;
 HEAP32[$2>>2] = $16;
 $17 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _hash_init($ht,$memory) {
 $ht = $ht|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($ht)) + 4|0);
 HEAP32[$0>>2] = 241;
 HEAP32[$ht>>2] = 80;
 $1 = ((($ht)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (_ft_mem_realloc($memory,4,0,241,0,$error)|0);
 $3 = ((($ht)) + 12|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _hash_insert($key,$data,$ht,$memory) {
 $key = $key|0;
 $data = $data|0;
 $ht = $ht|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (_hash_bucket($key,$ht)|0);
 HEAP32[$error>>2] = 0;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (_ft_mem_alloc($memory,8,$error)|0);
   $4 = HEAP32[$error>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[$0>>2] = $3;
    HEAP32[$3>>2] = $key;
    $6 = ((($3)) + 4|0);
    HEAP32[$6>>2] = $data;
    $7 = ((($ht)) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = HEAP32[$ht>>2]|0;
    $10 = ($8|0)<($9|0);
    if (!($10)) {
     $11 = (_hash_rehash($ht,$memory)|0);
     HEAP32[$error>>2] = $11;
     $12 = ($11|0)==(0);
     if (!($12)) {
      break;
     }
    }
    $13 = HEAP32[$7>>2]|0;
    $14 = (($13) + 1)|0;
    HEAP32[$7>>2] = $14;
   }
  } else {
   $15 = ((($1)) + 4|0);
   HEAP32[$15>>2] = $data;
  }
 } while(0);
 $16 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($16|0);
}
function __bdf_list_split($list,$separators,$line,$linelen) {
 $list = $list|0;
 $separators = $separators|0;
 $line = $line|0;
 $linelen = $linelen|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $ep$1$lcssa = 0, $ep$19 = 0, $ep$2$lcssa = 0, $ep$212 = 0, $ep$34 = 0, $ep$35 = 0, $error$3 = 0, $final_empty$0$lcssa = 0, $final_empty$017 = 0, $mult$025 = 0, $mult$025$lcssa = 0, $mult$1 = 0, $seps = 0, $sp$023 = 0, $sp$118 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $seps = sp;
 $0 = ((($list)) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($list)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = HEAP32[$list>>2]|0;
  HEAP32[$4>>2] = 25565;
  $5 = HEAP32[$list>>2]|0;
  $6 = ((($5)) + 4|0);
  HEAP32[$6>>2] = 25565;
  $7 = HEAP32[$list>>2]|0;
  $8 = ((($7)) + 8|0);
  HEAP32[$8>>2] = 25565;
  $9 = HEAP32[$list>>2]|0;
  $10 = ((($9)) + 12|0);
  HEAP32[$10>>2] = 25565;
  $11 = HEAP32[$list>>2]|0;
  $12 = ((($11)) + 16|0);
  HEAP32[$12>>2] = 25565;
 }
 $13 = ($linelen|0)==(0);
 if ($13) {
  $error$3 = 0;
  STACKTOP = sp;return ($error$3|0);
 }
 $14 = HEAP8[$line>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $error$3 = 0;
  STACKTOP = sp;return ($error$3|0);
 }
 $16 = ($separators|0)==(0|0);
 if ($16) {
  $error$3 = 6;
  STACKTOP = sp;return ($error$3|0);
 }
 $17 = HEAP8[$separators>>0]|0;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $error$3 = 6;
  STACKTOP = sp;return ($error$3|0);
 }
 dest=$seps; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $mult$025 = 0;$sp$023 = $separators;
 L16: while(1) {
  $19 = HEAP8[$sp$023>>0]|0;
  switch ($19<<24>>24) {
  case 0:  {
   $mult$025$lcssa = $mult$025;
   break L16;
   break;
  }
  case 43:  {
   $20 = ((($sp$023)) + 1|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $mult$1 = 1;
   } else {
    label = 10;
   }
   break;
  }
  default: {
   label = 10;
  }
  }
  if ((label|0) == 10) {
   label = 0;
   $23 = HEAP8[$sp$023>>0]|0;
   $24 = $23&255;
   $25 = $24 & 7;
   $26 = 1 << $25;
   $27 = $24 >>> 3;
   $28 = (($seps) + ($27)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = $26 | $30;
   $32 = $31&255;
   HEAP8[$28>>0] = $32;
   $mult$1 = $mult$025;
  }
  $33 = ((($sp$023)) + 1|0);
  $mult$025 = $mult$1;$sp$023 = $33;
 }
 $34 = (($line) + ($linelen)|0);
 $35 = ($linelen|0)>(0);
 L24: do {
  if ($35) {
   $36 = ($mult$025$lcssa|0)==(0);
   $final_empty$017 = 0;$sp$118 = $line;
   while(1) {
    $37 = HEAP8[$sp$118>>0]|0;
    $38 = ($37<<24>>24)==(0);
    if ($38) {
     $final_empty$0$lcssa = $final_empty$017;
     break L24;
    }
    $39 = HEAP8[$sp$118>>0]|0;
    $40 = ($39<<24>>24)==(0);
    L29: do {
     if ($40) {
      $ep$1$lcssa = $sp$118;
     } else {
      $42 = $39;$ep$19 = $sp$118;
      while(1) {
       $41 = $42&255;
       $43 = $41 >>> 3;
       $44 = (($seps) + ($43)|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45 << 24 >> 24;
       $47 = $41 & 7;
       $48 = 1 << $47;
       $49 = $46 & $48;
       $50 = ($49|0)==(0);
       if (!($50)) {
        $ep$1$lcssa = $ep$19;
        break L29;
       }
       $51 = ((($ep$19)) + 1|0);
       $52 = HEAP8[$51>>0]|0;
       $53 = ($52<<24>>24)==(0);
       if ($53) {
        $ep$1$lcssa = $51;
        break;
       } else {
        $42 = $52;$ep$19 = $51;
       }
      }
     }
    } while(0);
    $54 = HEAP32[$0>>2]|0;
    $55 = HEAP32[$1>>2]|0;
    $56 = ($54|0)==($55|0);
    if ($56) {
     $57 = (($54) + 1)|0;
     $58 = (__bdf_list_ensure($list,$57)|0);
     $59 = ($58|0)==(0);
     if (!($59)) {
      $error$3 = $58;
      break;
     }
    }
    $60 = ($ep$1$lcssa>>>0)>($sp$118>>>0);
    $61 = $60 ? $sp$118 : 25565;
    $62 = HEAP32[$0>>2]|0;
    $63 = (($62) + 1)|0;
    HEAP32[$0>>2] = $63;
    $64 = HEAP32[$list>>2]|0;
    $65 = (($64) + ($62<<2)|0);
    HEAP32[$65>>2] = $61;
    $66 = HEAP8[$ep$1$lcssa>>0]|0;
    $67 = ($66<<24>>24)==(0);
    if ($36) {
     if ($67) {
      $86 = 0;$ep$35 = $ep$1$lcssa;
     } else {
      $81 = ((($ep$1$lcssa)) + 1|0);
      HEAP8[$ep$1$lcssa>>0] = 0;
      $ep$34 = $81;
      label = 27;
     }
    } else {
     if ($67) {
      $86 = 0;$ep$35 = $ep$1$lcssa;
     } else {
      $69 = $66;$ep$212 = $ep$1$lcssa;
      while(1) {
       $68 = $69&255;
       $70 = $68 >>> 3;
       $71 = (($seps) + ($70)|0);
       $72 = HEAP8[$71>>0]|0;
       $73 = $72 << 24 >> 24;
       $74 = $68 & 7;
       $75 = 1 << $74;
       $76 = $73 & $75;
       $77 = ($76|0)==(0);
       if ($77) {
        $ep$2$lcssa = $ep$212;
        break;
       }
       HEAP8[$ep$212>>0] = 0;
       $78 = ((($ep$212)) + 1|0);
       $79 = HEAP8[$78>>0]|0;
       $80 = ($79<<24>>24)==(0);
       if ($80) {
        $ep$2$lcssa = $78;
        break;
       } else {
        $69 = $79;$ep$212 = $78;
       }
      }
      $82 = ($ep$2$lcssa>>>0)>($ep$1$lcssa>>>0);
      if ($82) {
       $ep$34 = $ep$2$lcssa;
       label = 27;
      } else {
       $86 = 0;$ep$35 = $ep$2$lcssa;
      }
     }
    }
    if ((label|0) == 27) {
     label = 0;
     $83 = HEAP8[$ep$34>>0]|0;
     $84 = ($83<<24>>24)==(0);
     $86 = $84;$ep$35 = $ep$34;
    }
    $85 = $86&1;
    $87 = ($ep$35>>>0)<($34>>>0);
    if ($87) {
     $final_empty$017 = $85;$sp$118 = $ep$35;
    } else {
     $final_empty$0$lcssa = $85;
     break L24;
    }
   }
   STACKTOP = sp;return ($error$3|0);
  } else {
   $final_empty$0$lcssa = 0;
  }
 } while(0);
 $88 = HEAP32[$0>>2]|0;
 $89 = (($88) + ($final_empty$0$lcssa))|0;
 $90 = HEAP32[$1>>2]|0;
 $91 = ($89>>>0)<($90>>>0);
 if (!($91)) {
  $92 = (($89) + 1)|0;
  $93 = (__bdf_list_ensure($list,$92)|0);
  $94 = ($93|0)==(0);
  if (!($94)) {
   $error$3 = $93;
   STACKTOP = sp;return ($error$3|0);
  }
 }
 $95 = ($final_empty$0$lcssa|0)==(0);
 if (!($95)) {
  $96 = HEAP32[$0>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[$0>>2] = $97;
  $98 = HEAP32[$list>>2]|0;
  $99 = (($98) + ($96<<2)|0);
  HEAP32[$99>>2] = 25565;
 }
 $100 = HEAP32[$0>>2]|0;
 $101 = HEAP32[$list>>2]|0;
 $102 = (($101) + ($100<<2)|0);
 HEAP32[$102>>2] = 0;
 $error$3 = 0;
 STACKTOP = sp;return ($error$3|0);
}
function __bdf_atoul($s) {
 $s = $s|0;
 var $$01 = 0, $$02 = 0, $$1 = 0, $$131 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dmap$1 = 0, $v$02 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$01 = 0;
  return ($$01|0);
 }
 $1 = HEAP8[$s>>0]|0;
 switch ($1<<24>>24) {
 case 48:  {
  label = 3;
  break;
 }
 case 0:  {
  $$01 = 0;
  return ($$01|0);
  break;
 }
 default: {
  $$02 = $s;$$1 = 10;$dmap$1 = 25510;
 }
 }
 L6: do {
  if ((label|0) == 3) {
   $2 = ((($s)) + 1|0);
   $3 = HEAP8[$2>>0]|0;
   switch ($3<<24>>24) {
   case 88: case 120:  {
    break;
   }
   default: {
    $$02 = $s;$$1 = 10;$dmap$1 = 25510;
    break L6;
   }
   }
   $4 = ((($s)) + 2|0);
   $$02 = $4;$$1 = 16;$dmap$1 = 25317;
  }
 } while(0);
 $5 = HEAP8[$$02>>0]|0;
 $6 = $5&255;
 $7 = $6 >>> 3;
 $8 = (($dmap$1) + ($7)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $5 << 24 >> 24;
 $12 = $11 & 7;
 $13 = 1 << $12;
 $14 = $13 & $10;
 $15 = ($14|0)==(0);
 if ($15) {
  $$01 = 0;
  return ($$01|0);
 } else {
  $$131 = $$02;$18 = $11;$v$02 = 0;
 }
 while(1) {
  $16 = Math_imul($v$02, $$1)|0;
  $17 = (25349 + ($18)|0);
  $19 = HEAP8[$17>>0]|0;
  $20 = $19&255;
  $21 = (($20) + ($16))|0;
  $22 = ((($$131)) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $24 >>> 3;
  $26 = (($dmap$1) + ($25)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = $23 << 24 >> 24;
  $30 = $29 & 7;
  $31 = 1 << $30;
  $32 = $31 & $28;
  $33 = ($32|0)==(0);
  if ($33) {
   $$01 = $21;
   break;
  } else {
   $$131 = $22;$18 = $29;$v$02 = $21;
  }
 }
 return ($$01|0);
}
function __bdf_parse_properties($line,$linelen,$lineno,$call_data,$client_data) {
 $line = $line|0;
 $linelen = $linelen|0;
 $lineno = $lineno|0;
 $call_data = $call_data|0;
 $client_data = $client_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $error$2 = 0, $name = 0, $nbuf = 0, $value = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $vlen = sp + 20|0;
 $name = sp + 16|0;
 $value = sp + 12|0;
 $nbuf = sp + 24|0;
 $0 = (_memcmp($line,25566,13)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = ((($client_data)) + 32|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (_bdf_get_font_property($3,25257)|0);
  $5 = ($4|0)==(0|0);
  do {
   if ($5) {
    $6 = ((($3)) + 12|0);
    $7 = HEAP16[$6>>1]|0;
    $8 = $7 << 16 >> 16;
    $9 = ((($3)) + 40|0);
    HEAP32[$9>>2] = $8;
    $10 = HEAP32[$2>>2]|0;
    $11 = ((($10)) + 12|0);
    $12 = HEAP16[$11>>1]|0;
    $13 = $12 << 16 >> 16;
    HEAP32[$vararg_buffer>>2] = $13;
    (_sprintf($nbuf,25253,$vararg_buffer)|0);
    $14 = HEAP32[$2>>2]|0;
    $15 = (__bdf_add_property($14,25257,$nbuf)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = HEAP32[$2>>2]|0;
     $18 = ((($17)) + 278660|0);
     HEAP16[$18>>1] = 1;
     break;
    } else {
     $error$2 = $15;
     STACKTOP = sp;return ($error$2|0);
    }
   }
  } while(0);
  $19 = HEAP32[$2>>2]|0;
  $20 = (_bdf_get_font_property($19,25269)|0);
  $21 = ($20|0)==(0|0);
  do {
   if ($21) {
    $22 = ((($19)) + 14|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = $23 << 16 >> 16;
    $25 = ((($19)) + 44|0);
    HEAP32[$25>>2] = $24;
    $26 = HEAP32[$2>>2]|0;
    $27 = ((($26)) + 14|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28 << 16 >> 16;
    HEAP32[$vararg_buffer1>>2] = $29;
    (_sprintf($nbuf,25253,$vararg_buffer1)|0);
    $30 = HEAP32[$2>>2]|0;
    $31 = (__bdf_add_property($30,25269,$nbuf)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     $33 = HEAP32[$2>>2]|0;
     $34 = ((($33)) + 278660|0);
     HEAP16[$34>>1] = 1;
     break;
    } else {
     $error$2 = $31;
     STACKTOP = sp;return ($error$2|0);
    }
   }
  } while(0);
  $35 = HEAP32[$client_data>>2]|0;
  $36 = $35 & -17;
  HEAP32[$client_data>>2] = $36;
  HEAP32[$call_data>>2] = 36;
  $error$2 = 0;
  STACKTOP = sp;return ($error$2|0);
 }
 $37 = (_memcmp($line,25580,21)|0);
 $38 = ($37|0)==(0);
 if ($38) {
  $error$2 = 0;
  STACKTOP = sp;return ($error$2|0);
 }
 $39 = (_memcmp($line,25184,7)|0);
 $40 = ($39|0)==(0);
 if ($40) {
  HEAP32[$name>>2] = $line;
  $41 = ((($line)) + 7|0);
  HEAP32[$value>>2] = $41;
  $42 = HEAP8[$41>>0]|0;
  $43 = ($42<<24>>24)==(0);
  if (!($43)) {
   $44 = ((($line)) + 8|0);
   HEAP32[$value>>2] = $44;
   HEAP8[$41>>0] = 0;
  }
  $45 = ((($client_data)) + 32|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$name>>2]|0;
  $48 = HEAP32[$value>>2]|0;
  $49 = (__bdf_add_property($46,$47,$48)|0);
  $error$2 = $49;
  STACKTOP = sp;return ($error$2|0);
 }
 $50 = ((($client_data)) + 32|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (__bdf_is_atom($line,$linelen,$name,$value,$51)|0);
 $53 = ($52|0)==(0);
 if (!($53)) {
  $54 = HEAP32[$50>>2]|0;
  $55 = HEAP32[$name>>2]|0;
  $56 = HEAP32[$value>>2]|0;
  $57 = (__bdf_add_property($54,$55,$56)|0);
  $error$2 = $57;
  STACKTOP = sp;return ($error$2|0);
 }
 $58 = ((($client_data)) + 139304|0);
 $59 = (__bdf_list_split($58,25218,$line,$linelen)|0);
 $60 = ($59|0)==(0);
 if (!($60)) {
  $error$2 = $59;
  STACKTOP = sp;return ($error$2|0);
 }
 $61 = HEAP32[$58>>2]|0;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$name>>2] = $62;
 __bdf_list_shift($58);
 $63 = (__bdf_list_join($58,$vlen)|0);
 HEAP32[$value>>2] = $63;
 $64 = HEAP32[$50>>2]|0;
 $65 = HEAP32[$name>>2]|0;
 $66 = (__bdf_add_property($64,$65,$63)|0);
 $error$2 = $66;
 STACKTOP = sp;return ($error$2|0);
}
function __bdf_atos($s) {
 $s = $s|0;
 var $$01 = 0, $$1 = 0, $$13 = 0, $$21 = 0, $$lcssa = 0, $$s = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dmap$1 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$01 = 0;
  return ($$01|0);
 }
 $1 = HEAP8[$s>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $$01 = 0;
  return ($$01|0);
 }
 $3 = ($1<<24>>24)==(45);
 $4 = ((($s)) + 1|0);
 $$s = $3 ? $4 : $s;
 $5 = HEAP8[$$s>>0]|0;
 $6 = ($5<<24>>24)==(48);
 L7: do {
  if ($6) {
   $7 = ((($$s)) + 1|0);
   $8 = HEAP8[$7>>0]|0;
   switch ($8<<24>>24) {
   case 88: case 120:  {
    break;
   }
   default: {
    $$1 = 10;$$13 = $$s;$dmap$1 = 25510;
    break L7;
   }
   }
   $9 = ((($$s)) + 2|0);
   $$1 = 16;$$13 = $9;$dmap$1 = 25317;
  } else {
   $$1 = 10;$$13 = $$s;$dmap$1 = 25510;
  }
 } while(0);
 $10 = HEAP8[$$13>>0]|0;
 $11 = $10&255;
 $12 = $11 >>> 3;
 $13 = (($dmap$1) + ($12)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $10 << 24 >> 24;
 $17 = $16 & 7;
 $18 = 1 << $17;
 $19 = $18 & $15;
 $20 = ($19|0)==(0);
 if ($20) {
  $$lcssa = 0;
 } else {
  $$21 = $$13;$22 = 0;$24 = $16;
  while(1) {
   $21 = Math_imul($22, $$1)|0;
   $23 = (25349 + ($24)|0);
   $25 = HEAP8[$23>>0]|0;
   $26 = $25&255;
   $27 = (($26) + ($21))|0;
   $28 = ((($$21)) + 1|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = $30 >>> 3;
   $32 = (($dmap$1) + ($31)|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = $29 << 24 >> 24;
   $36 = $35 & 7;
   $37 = 1 << $36;
   $38 = $37 & $34;
   $39 = ($38|0)==(0);
   $sext = $27 << 16;
   $40 = $sext >> 16;
   if ($39) {
    $$lcssa = $40;
    break;
   } else {
    $$21 = $28;$22 = $40;$24 = $35;
   }
  }
 }
 $41 = (0 - ($$lcssa))|0;
 $42 = $3 ? $41 : $$lcssa;
 $43 = $42&65535;
 $$01 = $43;
 return ($$01|0);
}
function __bdf_list_shift($list) {
 $list = $list|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $u$02 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($list|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($list)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ($2>>>0)<(2);
 if ($4) {
  HEAP32[$1>>2] = 0;
  return;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5>>>0)>(1);
 if ($6) {
  $7 = HEAP32[$1>>2]|0;
  $i$01 = 0;$u$02 = 1;
  while(1) {
   $8 = HEAP32[$list>>2]|0;
   $9 = (($8) + ($u$02<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($8) + ($i$01<<2)|0);
   HEAP32[$11>>2] = $10;
   $12 = (($i$01) + 1)|0;
   $13 = (($u$02) + 1)|0;
   $14 = ($13>>>0)<($7>>>0);
   if ($14) {
    $i$01 = $12;$u$02 = $13;
   } else {
    $$lcssa = $7;
    break;
   }
  }
 } else {
  $$lcssa = $5;
 }
 $15 = (($$lcssa) + -1)|0;
 HEAP32[$1>>2] = $15;
 return;
}
function __bdf_list_join($list,$alen) {
 $list = $list|0;
 $alen = $alen|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp$02 = 0, $i$03 = 0, $j$0$be = 0, $j$0$lcssa = 0, $j$04 = 0, $j$1$lcssa = 0, $j$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$alen>>2] = 0;
 $0 = ($list|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($list)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP32[$list>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $j$0$lcssa = 0;
 } else {
  $i$03 = 0;$j$04 = 0;
  while(1) {
   $8 = HEAP32[$list>>2]|0;
   $9 = (($8) + ($i$03<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $j$1$lcssa = $j$04;
   } else {
    $16 = $11;$fp$02 = $10;$j$11 = $j$04;
    while(1) {
     $13 = ((($fp$02)) + 1|0);
     $14 = (($j$11) + 1)|0;
     $15 = (($5) + ($j$11)|0);
     HEAP8[$15>>0] = $16;
     $17 = HEAP8[$13>>0]|0;
     $18 = ($17<<24>>24)==(0);
     if ($18) {
      $j$1$lcssa = $14;
      break;
     } else {
      $16 = $17;$fp$02 = $13;$j$11 = $14;
     }
    }
   }
   $19 = (($i$03) + 1)|0;
   $20 = HEAP32[$1>>2]|0;
   $21 = ($19>>>0)<($20>>>0);
   if ($21) {
    $24 = (($j$1$lcssa) + 1)|0;
    $25 = (($5) + ($j$1$lcssa)|0);
    HEAP8[$25>>0] = 32;
    $j$0$be = $24;
   } else {
    $j$0$be = $j$1$lcssa;
   }
   $22 = HEAP32[$1>>2]|0;
   $23 = ($19>>>0)<($22>>>0);
   if ($23) {
    $i$03 = $19;$j$04 = $j$0$be;
   } else {
    $j$0$lcssa = $j$0$be;
    break;
   }
  }
 }
 $26 = ($5|0)==(25565|0);
 if (!($26)) {
  $27 = (($5) + ($j$0$lcssa)|0);
  HEAP8[$27>>0] = 0;
 }
 HEAP32[$alen>>2] = $j$0$lcssa;
 $$0 = $5;
 return ($$0|0);
}
function __bdf_set_default_spacing($font,$opts) {
 $font = $font|0;
 $opts = $opts|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $list = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $name = sp + 16|0;
 $list = sp;
 $0 = ($font|0)==(0|0);
 if ($0) {
  $error$0 = 6;
  STACKTOP = sp;return ($error$0|0);
 }
 $1 = HEAP32[$font>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $error$0 = 6;
  STACKTOP = sp;return ($error$0|0);
 }
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $error$0 = 6;
  STACKTOP = sp;return ($error$0|0);
 }
 $5 = ((($font)) + 278664|0);
 $6 = HEAP32[$5>>2]|0;
 __bdf_list_init($list,$6);
 $7 = ((($opts)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($font)) + 28|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$font>>2]|0;
 $11 = (_strlen($10)|0);
 $12 = (($11) + 1)|0;
 $13 = ($12>>>0)>(255);
 if ($13) {
  $error$0 = 6;
  STACKTOP = sp;return ($error$0|0);
 }
 _memcpy(($name|0),($10|0),($12|0))|0;
 $14 = (__bdf_list_split($list,25563,$name,$12)|0);
 $15 = ($14|0)==(0);
 L13: do {
  if ($15) {
   $16 = ((($list)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(15);
   if ($18) {
    $19 = HEAP32[$list>>2]|0;
    $20 = ((($19)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = HEAP8[$21>>0]|0;
    $23 = $22 << 24 >> 24;
    switch ($23|0) {
    case 99: case 67:  {
     HEAP32[$9>>2] = 32;
     break L13;
     break;
    }
    case 109: case 77:  {
     HEAP32[$9>>2] = 16;
     break L13;
     break;
    }
    case 112: case 80:  {
     HEAP32[$9>>2] = 8;
     break L13;
     break;
    }
    default: {
     break L13;
    }
    }
   }
  }
 } while(0);
 __bdf_list_done($list);
 $error$0 = $14;
 STACKTOP = sp;return ($error$0|0);
}
function __bdf_add_property($font,$name,$value) {
 $font = $font|0;
 $name = $name|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $hn$0 = 0, $prop$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($font)) + 278664|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = ((($font)) + 128|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_hash_lookup($name,$3)|0);
 $5 = ($4|0)==(0|0);
 L1: do {
  if ($5) {
   $22 = ((($font)) + 278676|0);
   $23 = (_hash_lookup($name,$22)|0);
   $24 = ($23|0)==(0|0);
   if ($24) {
    $25 = (_bdf_create_property($name,$font)|0);
    HEAP32[$error>>2] = $25;
    $26 = ($25|0)==(0);
    if (!($26)) {
     break;
    }
    $27 = (_hash_lookup($name,$22)|0);
    $hn$0 = $27;
   } else {
    $hn$0 = $23;
   }
   $28 = ((($font)) + 76|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($font)) + 72|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($29|0)==($31|0);
   if ($32) {
    $33 = ($31|0)==(0);
    if ($33) {
     $34 = (_ft_mem_realloc($1,16,0,1,0,$error)|0);
     $35 = ((($font)) + 80|0);
     HEAP32[$35>>2] = $34;
     $36 = HEAP32[$error>>2]|0;
     $37 = ($36|0)==(0);
     if (!($37)) {
      break;
     }
    } else {
     $38 = (($31) + 1)|0;
     $39 = ((($font)) + 80|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (_ft_mem_realloc($1,16,$31,$38,$40,$error)|0);
     HEAP32[$39>>2] = $41;
     $42 = HEAP32[$error>>2]|0;
     $43 = ($42|0)==(0);
     if (!($43)) {
      break;
     }
    }
    $44 = ((($font)) + 80|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$30>>2]|0;
    $47 = (($45) + ($46<<4)|0);
    ;HEAP32[$47>>2]=0|0;HEAP32[$47+4>>2]=0|0;HEAP32[$47+8>>2]=0|0;HEAP32[$47+12>>2]=0|0;
    $48 = HEAP32[$30>>2]|0;
    $49 = (($48) + 1)|0;
    HEAP32[$30>>2] = $49;
   }
   $50 = ((($hn$0)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51>>>0)>(82);
   if ($52) {
    $53 = ((($font)) + 278668|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($51) + -83)|0;
    $56 = (($54) + ($55<<4)|0);
    $prop$0 = $56;
   } else {
    $57 = (704 + ($51<<4)|0);
    $prop$0 = $57;
   }
   $58 = ((($font)) + 80|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$28>>2]|0;
   $61 = (($59) + ($60<<4)|0);
   $62 = HEAP32[$prop$0>>2]|0;
   HEAP32[$61>>2] = $62;
   $63 = ((($prop$0)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (((($59) + ($60<<4)|0)) + 4|0);
   HEAP32[$65>>2] = $64;
   $66 = ((($prop$0)) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (((($59) + ($60<<4)|0)) + 8|0);
   HEAP32[$68>>2] = $67;
   $69 = HEAP32[$63>>2]|0;
   switch ($69|0) {
   case 1:  {
    $70 = (((($59) + ($60<<4)|0)) + 12|0);
    HEAP32[$70>>2] = 0;
    $71 = ($value|0)==(0|0);
    if (!($71)) {
     $72 = HEAP8[$value>>0]|0;
     $73 = ($72<<24>>24)==(0);
     if (!($73)) {
      $74 = (_ft_mem_strdup($1,$value,$error)|0);
      HEAP32[$70>>2] = $74;
      $75 = HEAP32[$error>>2]|0;
      $76 = ($75|0)==(0);
      if (!($76)) {
       break L1;
      }
     }
    }
    break;
   }
   case 2:  {
    $77 = (__bdf_atol($value)|0);
    $78 = (((($59) + ($60<<4)|0)) + 12|0);
    HEAP32[$78>>2] = $77;
    break;
   }
   case 3:  {
    $79 = (__bdf_atoul($value)|0);
    $80 = (((($59) + ($60<<4)|0)) + 12|0);
    HEAP32[$80>>2] = $79;
    break;
   }
   default: {
   }
   }
   $81 = (_memcmp($name,25184,7)|0);
   $82 = ($81|0)==(0);
   if (!($82)) {
    $83 = HEAP32[$61>>2]|0;
    $84 = HEAP32[$28>>2]|0;
    $85 = HEAP32[$2>>2]|0;
    $86 = (_hash_insert($83,$84,$85,$1)|0);
    HEAP32[$error>>2] = $86;
    $87 = ($86|0)==(0);
    if (!($87)) {
     break;
    }
   }
   $88 = HEAP32[$28>>2]|0;
   $89 = (($88) + 1)|0;
   HEAP32[$28>>2] = $89;
   $90 = (_memcmp($name,25542,12)|0);
   $91 = ($90|0)==(0);
   if ($91) {
    $92 = (((($59) + ($60<<4)|0)) + 12|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ((($font)) + 36|0);
    HEAP32[$94>>2] = $93;
    break;
   }
   $95 = (_memcmp($name,25257,11)|0);
   $96 = ($95|0)==(0);
   if ($96) {
    $97 = (((($59) + ($60<<4)|0)) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ((($font)) + 40|0);
    HEAP32[$99>>2] = $98;
    break;
   }
   $100 = (_memcmp($name,25269,12)|0);
   $101 = ($100|0)==(0);
   if ($101) {
    $102 = (((($59) + ($60<<4)|0)) + 12|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ((($font)) + 44|0);
    HEAP32[$104>>2] = $103;
    break;
   }
   $105 = (_memcmp($name,25555,7)|0);
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = (((($59) + ($60<<4)|0)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==(0|0);
    if ($109) {
     HEAP32[$error>>2] = 3;
     break;
    }
    $110 = HEAP8[$108>>0]|0;
    switch ($110<<24>>24) {
    case 80: case 112:  {
     $111 = ((($font)) + 28|0);
     HEAP32[$111>>2] = 8;
     break L1;
     break;
    }
    case 77: case 109:  {
     $112 = ((($font)) + 28|0);
     HEAP32[$112>>2] = 16;
     break L1;
     break;
    }
    case 67: case 99:  {
     $113 = ((($font)) + 28|0);
     HEAP32[$113>>2] = 32;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   }
  } else {
   $6 = ((($font)) + 80|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($4)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($7) + ($9<<4)|0)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   switch ($11|0) {
   case 1:  {
    $12 = (((($7) + ($9<<4)|0)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    _ft_mem_free($1,$13);
    HEAP32[$12>>2] = 0;
    $14 = ($value|0)==(0|0);
    if ($14) {
     break L1;
    }
    $15 = HEAP8[$value>>0]|0;
    $16 = ($15<<24>>24)==(0);
    if ($16) {
     break L1;
    }
    $17 = (_ft_mem_strdup($1,$value,$error)|0);
    HEAP32[$12>>2] = $17;
    break L1;
    break;
   }
   case 2:  {
    $18 = (__bdf_atol($value)|0);
    $19 = (((($7) + ($9<<4)|0)) + 12|0);
    HEAP32[$19>>2] = $18;
    break L1;
    break;
   }
   case 3:  {
    $20 = (__bdf_atoul($value)|0);
    $21 = (((($7) + ($9<<4)|0)) + 12|0);
    HEAP32[$21>>2] = $20;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 $114 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($114|0);
}
function __bdf_parse_glyphs($line,$linelen,$lineno,$call_data,$client_data) {
 $line = $line|0;
 $linelen = $linelen|0;
 $lineno = $lineno|0;
 $call_data = $call_data|0;
 $client_data = $client_data|0;
 var $$ = 0, $$0 = 0, $$0$v = 0, $$10 = 0, $$11 = 0, $$9 = 0, $$lcssa = 0, $$pr = 0, $$pr12 = 0, $$pr14 = 0, $$sink1 = 0, $$sink3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bp$0$ph = 0, $bp$0$ph$lcssa43 = 0, $bp$0$ph44 = 0, $error = 0, $glyph$0 = 0, $i$0 = 0, $i$0$lcssa40 = 0, $i$0$ph = 0;
 var $i$042 = 0, $or$cond = 0, $or$cond6 = 0, $or$cond8 = 0, $s$0 = 0, $sext = 0, $slen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $slen = sp + 4|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($client_data)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 278664|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_memcmp($line,25184,7)|0);
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = ((($line)) + 7|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   $9 = ((($line)) + 8|0);
   $s$0 = $8 ? $6 : $9;
   $$0$v = $8 ? -7 : -8;
   $$0 = (($$0$v) + ($linelen))|0;
   $10 = (__bdf_add_comment($1,$s$0,$$0)|0);
   HEAP32[$error>>2] = $10;
   $453 = $10;
   label = 107;
  } else {
   $11 = HEAP32[$client_data>>2]|0;
   $12 = $11 & 32;
   $13 = ($12|0)==(0);
   L4: do {
    if ($13) {
     $14 = (_memcmp($line,25247,5)|0);
     $15 = ($14|0)==(0);
     if (!($15)) {
      HEAP32[$error>>2] = 180;
      break L1;
     }
     $16 = ((($client_data)) + 139304|0);
     $17 = (__bdf_list_split($16,25218,$line,$linelen)|0);
     HEAP32[$error>>2] = $17;
     $18 = ($17|0)==(0);
     if (!($18)) {
      break L1;
     }
     $19 = HEAP32[$16>>2]|0;
     $20 = ((($19)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (__bdf_atoul($21)|0);
     $23 = ((($1)) + 48|0);
     HEAP32[$23>>2] = $22;
     $24 = ((($client_data)) + 4|0);
     HEAP32[$24>>2] = $22;
     $25 = ($22|0)==(0);
     if ($25) {
      HEAP32[$23>>2] = 64;
      $$pr = HEAP32[$24>>2]|0;
      $27 = $$pr;
     } else {
      $27 = $22;
     }
     $26 = ($27>>>0)>(1114111);
     if ($26) {
      HEAP32[$error>>2] = 6;
      break L1;
     }
     $28 = HEAP32[$23>>2]|0;
     $29 = (_ft_mem_realloc($3,36,0,$28,0,$error)|0);
     $30 = ((($1)) + 56|0);
     HEAP32[$30>>2] = $29;
     $31 = HEAP32[$error>>2]|0;
     $32 = ($31|0)==(0);
     if (!($32)) {
      break L1;
     }
     $33 = HEAP32[$client_data>>2]|0;
     $34 = $33 | 32;
     HEAP32[$client_data>>2] = $34;
    } else {
     $35 = (_memcmp($line,25282,7)|0);
     $36 = ($35|0)==(0);
     if ($36) {
      $37 = ((($1)) + 56|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ((($1)) + 52|0);
      $40 = HEAP32[$39>>2]|0;
      _qsort($38,$40,36,149);
      $41 = HEAP32[$client_data>>2]|0;
      $42 = $41 & -2;
      HEAP32[$client_data>>2] = $42;
      break;
     }
     $43 = (_memcmp($line,25290,7)|0);
     $44 = ($43|0)==(0);
     if ($44) {
      $45 = ((($client_data)) + 28|0);
      HEAP32[$45>>2] = 0;
      $46 = HEAP32[$client_data>>2]|0;
      $47 = $46 & -4033;
      HEAP32[$client_data>>2] = $47;
      break;
     }
     $48 = $11 & 64;
     $49 = ($48|0)==(0);
     if (!($49)) {
      $50 = ((($client_data)) + 28|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(-1);
      if ($52) {
       $53 = ((($client_data)) + 36|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ((($54)) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($56|0)==(0);
       if ($57) {
        break;
       }
      }
     }
     $58 = (_memcmp($line,25298,9)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      $60 = ((($client_data)) + 24|0);
      $61 = HEAP32[$60>>2]|0;
      _ft_mem_free($3,$61);
      HEAP32[$60>>2] = 0;
      $62 = ((($client_data)) + 139304|0);
      $63 = (__bdf_list_split($62,25218,$line,$linelen)|0);
      HEAP32[$error>>2] = $63;
      $64 = ($63|0)==(0);
      if (!($64)) {
       break L1;
      }
      __bdf_list_shift($62);
      $65 = (__bdf_list_join($62,$slen)|0);
      $66 = ($65|0)==(0|0);
      if ($66) {
       HEAP32[$error>>2] = 3;
       break L1;
      }
      $67 = HEAP32[$slen>>2]|0;
      $68 = (($67) + 1)|0;
      $69 = (_ft_mem_realloc($3,1,0,$68,0,$error)|0);
      HEAP32[$60>>2] = $69;
      $70 = HEAP32[$error>>2]|0;
      $71 = ($70|0)==(0);
      if (!($71)) {
       break L1;
      }
      $72 = HEAP32[$slen>>2]|0;
      $73 = (($72) + 1)|0;
      _memcpy(($69|0),($65|0),($73|0))|0;
      $74 = HEAP32[$client_data>>2]|0;
      $75 = $74 | 64;
      HEAP32[$client_data>>2] = $75;
      break;
     }
     $76 = (_memcmp($line,25308,8)|0);
     $77 = ($76|0)==(0);
     if ($77) {
      $78 = HEAP32[$client_data>>2]|0;
      $79 = $78 & 64;
      $80 = ($79|0)==(0);
      if ($80) {
       HEAP32[$error>>2] = 181;
       break L1;
      }
      $81 = ((($client_data)) + 139304|0);
      $82 = (__bdf_list_split($81,25218,$line,$linelen)|0);
      HEAP32[$error>>2] = $82;
      $83 = ($82|0)==(0);
      if (!($83)) {
       break L1;
      }
      $84 = HEAP32[$81>>2]|0;
      $85 = ((($84)) + 4|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = (__bdf_atol($86)|0);
      $88 = ((($client_data)) + 28|0);
      $89 = ($87|0)<(-1);
      $$ = $89 ? -1 : $87;
      HEAP32[$88>>2] = $$;
      $90 = ($$|0)==(-1);
      do {
       if ($90) {
        $91 = ((($client_data)) + 139312|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = ($92>>>0)>(2);
        if ($93) {
         $94 = HEAP32[$81>>2]|0;
         $95 = ((($94)) + 8|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = (__bdf_atol($96)|0);
         HEAP32[$88>>2] = $97;
         $99 = $97;
         break;
        } else {
         $$pr12 = HEAP32[$88>>2]|0;
         $99 = $$pr12;
         break;
        }
       } else {
        $99 = $$;
       }
      } while(0);
      $98 = ($99|0)>(0);
      $100 = ($99>>>0)>(1114111);
      $or$cond6 = $98 & $100;
      if ($or$cond6) {
       HEAP32[$error>>2] = 3;
       break L1;
      }
      $101 = ($99|0)>(-1);
      do {
       if ($101) {
        $102 = $99 >> 5;
        $103 = ((($client_data)) + 40|0);
        $104 = (($103) + ($102<<2)|0);
        $105 = HEAP32[$104>>2]|0;
        $106 = $99 & 31;
        $107 = 1 << $106;
        $108 = $105 & $107;
        $109 = ($108|0)==(0);
        if ($109) {
         $111 = $105 | $107;
         HEAP32[$104>>2] = $111;
         break;
        } else {
         HEAP32[$88>>2] = -1;
         $110 = ((($1)) + 278660|0);
         HEAP16[$110>>1] = 1;
         break;
        }
       }
      } while(0);
      $112 = HEAP32[$88>>2]|0;
      $113 = ($112|0)>(-1);
      if ($113) {
       $114 = ((($1)) + 52|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = ((($1)) + 48|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = ($115|0)==($117|0);
       if ($118) {
        $119 = (($117) + 64)|0;
        $120 = ((($1)) + 56|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = (_ft_mem_realloc($3,36,$117,$119,$121,$error)|0);
        HEAP32[$120>>2] = $122;
        $123 = HEAP32[$error>>2]|0;
        $124 = ($123|0)==(0);
        if (!($124)) {
         break L1;
        }
        $125 = HEAP32[$116>>2]|0;
        $126 = (($125) + 64)|0;
        HEAP32[$116>>2] = $126;
       }
       $127 = ((($1)) + 56|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = HEAP32[$114>>2]|0;
       $130 = (($129) + 1)|0;
       HEAP32[$114>>2] = $130;
       $131 = (($128) + (($129*36)|0)|0);
       $132 = ((($client_data)) + 24|0);
       $133 = HEAP32[$132>>2]|0;
       HEAP32[$131>>2] = $133;
       $134 = HEAP32[$88>>2]|0;
       $135 = (((($128) + (($129*36)|0)|0)) + 4|0);
       HEAP32[$135>>2] = $134;
       HEAP32[$132>>2] = 0;
      } else {
       $136 = ((($client_data)) + 36|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = ((($137)) + 4|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139|0)==(0);
       if ($140) {
        $163 = ((($client_data)) + 24|0);
        $164 = HEAP32[$163>>2]|0;
        _ft_mem_free($3,$164);
        HEAP32[$163>>2] = 0;
       } else {
        $141 = ((($1)) + 64|0);
        $142 = HEAP32[$141>>2]|0;
        $143 = ((($1)) + 60|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($142|0)==($144|0);
        if ($145) {
         $146 = (($144) + 4)|0;
         $147 = ((($1)) + 68|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = (_ft_mem_realloc($3,36,$144,$146,$148,$error)|0);
         HEAP32[$147>>2] = $149;
         $150 = HEAP32[$error>>2]|0;
         $151 = ($150|0)==(0);
         if (!($151)) {
          break L1;
         }
         $152 = HEAP32[$143>>2]|0;
         $153 = (($152) + 4)|0;
         HEAP32[$143>>2] = $153;
        }
        $154 = ((($1)) + 68|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = HEAP32[$141>>2]|0;
        $157 = (($155) + (($156*36)|0)|0);
        $158 = ((($client_data)) + 24|0);
        $159 = HEAP32[$158>>2]|0;
        HEAP32[$157>>2] = $159;
        $160 = HEAP32[$141>>2]|0;
        $161 = (($160) + 1)|0;
        HEAP32[$141>>2] = $161;
        $162 = (((($155) + (($156*36)|0)|0)) + 4|0);
        HEAP32[$162>>2] = $160;
       }
       $165 = ((($client_data)) + 24|0);
       HEAP32[$165>>2] = 0;
      }
      $166 = HEAP32[$client_data>>2]|0;
      $167 = $166 & 1073741695;
      $168 = $167 | 128;
      HEAP32[$client_data>>2] = $168;
      break;
     }
     $169 = ((($client_data)) + 28|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = ($170|0)==(-1);
     if ($171) {
      $172 = ((($1)) + 68|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ((($1)) + 64|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = (($175) + -1)|0;
      $177 = (($173) + (($176*36)|0)|0);
      $glyph$0 = $177;
     } else {
      $178 = ((($1)) + 56|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ((($1)) + 52|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (($181) + -1)|0;
      $183 = (($179) + (($182*36)|0)|0);
      $glyph$0 = $183;
     }
     $184 = HEAP32[$client_data>>2]|0;
     $185 = $184 & 2048;
     $186 = ($185|0)==(0);
     if (!($186)) {
      $187 = ((($client_data)) + 8|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = ((($glyph$0)) + 14|0);
      $190 = HEAP16[$189>>1]|0;
      $191 = $190&65535;
      $192 = ($188>>>0)<($191>>>0);
      if (!($192)) {
       $193 = ($184|0)<(0);
       if ($193) {
        break;
       }
       $194 = $184 | -2147483648;
       HEAP32[$client_data>>2] = $194;
       $195 = ((($1)) + 278660|0);
       HEAP16[$195>>1] = 1;
       break;
      }
      $196 = ((($glyph$0)) + 28|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = $197 << 1;
      $199 = ((($glyph$0)) + 24|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = Math_imul($197, $188)|0;
      $202 = (($200) + ($201)|0);
      $bp$0$ph = $202;$i$0$ph = 0;
      L84: while(1) {
       $i$0 = $i$0$ph;
       while(1) {
        $203 = ($i$0>>>0)<($198>>>0);
        if (!($203)) {
         $bp$0$ph44 = $bp$0$ph;$i$042 = $i$0;
         break L84;
        }
        $204 = (($line) + ($i$0)|0);
        $205 = HEAP8[$204>>0]|0;
        $206 = $205 << 24 >> 24;
        $207 = $205&255;
        $208 = $207 >>> 3;
        $209 = (25317 + ($208)|0);
        $210 = HEAP8[$209>>0]|0;
        $211 = $210&255;
        $212 = $206 & 7;
        $213 = 1 << $212;
        $214 = $213 & $211;
        $215 = ($214|0)==(0);
        if ($215) {
         $bp$0$ph$lcssa43 = $bp$0$ph;$i$0$lcssa40 = $i$0;
         label = 66;
         break L84;
        }
        $216 = HEAP8[$bp$0$ph>>0]|0;
        $217 = $216&255;
        $218 = $217 << 4;
        $219 = (25349 + ($206)|0);
        $220 = HEAP8[$219>>0]|0;
        $221 = $220&255;
        $222 = (($218) + ($221))|0;
        $223 = $222&255;
        HEAP8[$bp$0$ph>>0] = $223;
        $224 = (($i$0) + 1)|0;
        $225 = ($224>>>0)>=($198>>>0);
        $226 = $i$0 & 1;
        $227 = ($226|0)==(0);
        $or$cond8 = $225 | $227;
        if ($or$cond8) {
         $i$0 = $224;
        } else {
         $$lcssa = $224;
         break;
        }
       }
       $228 = ((($bp$0$ph)) + 1|0);
       HEAP8[$228>>0] = 0;
       $bp$0$ph = $228;$i$0$ph = $$lcssa;
      }
      if ((label|0) == 66) {
       $229 = HEAP32[$client_data>>2]|0;
       $230 = $229 & 1073741824;
       $231 = ($230|0)==(0);
       if ($231) {
        $232 = $229 | 1073741824;
        HEAP32[$client_data>>2] = $232;
        $233 = ((($1)) + 278660|0);
        HEAP16[$233>>1] = 1;
        $bp$0$ph44 = $bp$0$ph$lcssa43;$i$042 = $i$0$lcssa40;
       } else {
        $bp$0$ph44 = $bp$0$ph$lcssa43;$i$042 = $i$0$lcssa40;
       }
      }
      $234 = ((($glyph$0)) + 12|0);
      $235 = HEAP16[$234>>1]|0;
      $236 = ($235<<16>>16)==(0);
      if (!($236)) {
       $237 = $235&65535;
       $238 = HEAP32[$0>>2]|0;
       $239 = ((($238)) + 278662|0);
       $240 = HEAP16[$239>>1]|0;
       $241 = $240&65535;
       $242 = Math_imul($241, $237)|0;
       $243 = $242 & 7;
       $244 = (25477 + ($243)|0);
       $245 = HEAP8[$244>>0]|0;
       $246 = HEAP8[$bp$0$ph44>>0]|0;
       $247 = $246 & $245;
       HEAP8[$bp$0$ph44>>0] = $247;
      }
      $248 = ($i$042|0)==($198|0);
      if ($248) {
       $249 = (($line) + ($198)|0);
       $250 = HEAP8[$249>>0]|0;
       $251 = $250&255;
       $252 = $251 >>> 3;
       $253 = (25317 + ($252)|0);
       $254 = HEAP8[$253>>0]|0;
       $255 = $254&255;
       $256 = $251 & 7;
       $257 = 1 << $256;
       $258 = $257 & $255;
       $259 = ($258|0)==(0);
       if (!($259)) {
        $260 = HEAP32[$client_data>>2]|0;
        $261 = $260 & 1073741824;
        $262 = ($261|0)==(0);
        if ($262) {
         $263 = $260 | 1073741824;
         HEAP32[$client_data>>2] = $263;
         $264 = ((($1)) + 278660|0);
         HEAP16[$264>>1] = 1;
        }
       }
      }
      $265 = HEAP32[$187>>2]|0;
      $266 = (($265) + 1)|0;
      HEAP32[$187>>2] = $266;
      break;
     }
     $267 = (_memcmp($line,25485,6)|0);
     $268 = ($267|0)==(0);
     do {
      if ($268) {
       $269 = $184 & 128;
       $270 = ($269|0)==(0);
       if (!($270)) {
        $271 = ((($client_data)) + 139304|0);
        $272 = (__bdf_list_split($271,25218,$line,$linelen)|0);
        HEAP32[$error>>2] = $272;
        $273 = ($272|0)==(0);
        if (!($273)) {
         break L1;
        }
        $274 = HEAP32[$271>>2]|0;
        $275 = ((($274)) + 4|0);
        $276 = HEAP32[$275>>2]|0;
        $277 = (__bdf_atoul($276)|0);
        $278 = $277&65535;
        $279 = ((($glyph$0)) + 8|0);
        HEAP16[$279>>1] = $278;
        $280 = HEAP32[$client_data>>2]|0;
        $281 = $280 | 256;
        HEAP32[$client_data>>2] = $281;
        break L4;
       }
      } else {
       $282 = (_memcmp($line,25492,6)|0);
       $283 = ($282|0)==(0);
       if ($283) {
        $284 = $184 & 128;
        $285 = ($284|0)==(0);
        if ($285) {
         break;
        }
        $286 = ((($client_data)) + 139304|0);
        $287 = (__bdf_list_split($286,25218,$line,$linelen)|0);
        HEAP32[$error>>2] = $287;
        $288 = ($287|0)==(0);
        if (!($288)) {
         break L1;
        }
        $289 = HEAP32[$286>>2]|0;
        $290 = ((($289)) + 4|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = (__bdf_atoul($291)|0);
        $293 = $292&65535;
        $294 = ((($glyph$0)) + 10|0);
        HEAP16[$294>>1] = $293;
        $295 = HEAP32[$client_data>>2]|0;
        $296 = $295 & 256;
        $297 = ($296|0)==(0);
        if ($297) {
         $298 = $292 & 65535;
         $299 = ((($1)) + 16|0);
         $300 = HEAP32[$299>>2]|0;
         $301 = ((($1)) + 20|0);
         $302 = HEAP32[$301>>2]|0;
         $303 = Math_imul($302, $300)|0;
         $304 = (_FT_MulDiv($298,72000,$303)|0);
         $305 = $304&65535;
         $306 = ((($glyph$0)) + 8|0);
         HEAP16[$306>>1] = $305;
        }
        $307 = HEAP32[$client_data>>2]|0;
        $308 = $307 | 512;
        HEAP32[$client_data>>2] = $308;
        break L4;
       }
       $309 = (_memcmp($line,25499,3)|0);
       $310 = ($309|0)==(0);
       if (!($310)) {
        $421 = (_memcmp($line,25503,6)|0);
        $422 = ($421|0)==(0);
        if (!($422)) {
         HEAP32[$error>>2] = 3;
         break L1;
        }
        $423 = $184 & 1024;
        $424 = ($423|0)==(0);
        if ($424) {
         HEAP32[$error>>2] = 183;
         break L1;
        }
        $425 = ((($glyph$0)) + 12|0);
        $426 = HEAP16[$425>>1]|0;
        $427 = $426&65535;
        $428 = HEAP32[$0>>2]|0;
        $429 = ((($428)) + 278662|0);
        $430 = HEAP16[$429>>1]|0;
        $431 = $430&65535;
        $432 = Math_imul($431, $427)|0;
        $433 = (($432) + 7)|0;
        $434 = $433 >>> 3;
        $435 = ((($glyph$0)) + 28|0);
        HEAP32[$435>>2] = $434;
        $436 = ((($glyph$0)) + 14|0);
        $437 = HEAP16[$436>>1]|0;
        $438 = $437&65535;
        $439 = Math_imul($434, $438)|0;
        $440 = ($433>>>0)>(524287);
        $441 = ($439>>>0)>(65535);
        $or$cond = $440 | $441;
        if ($or$cond) {
         HEAP32[$error>>2] = 184;
         break L1;
        }
        $442 = $439&65535;
        $443 = ((($glyph$0)) + 32|0);
        HEAP16[$443>>1] = $442;
        $444 = $439 & 65535;
        $445 = (_ft_mem_realloc($3,1,0,$444,0,$error)|0);
        $446 = ((($glyph$0)) + 24|0);
        HEAP32[$446>>2] = $445;
        $447 = HEAP32[$error>>2]|0;
        $448 = ($447|0)==(0);
        if (!($448)) {
         break L1;
        }
        $449 = ((($client_data)) + 8|0);
        HEAP32[$449>>2] = 0;
        $450 = HEAP32[$client_data>>2]|0;
        $451 = $450 | 2048;
        HEAP32[$client_data>>2] = $451;
        break L4;
       }
       $311 = $184 & 128;
       $312 = ($311|0)==(0);
       if (!($312)) {
        $313 = ((($client_data)) + 139304|0);
        $314 = (__bdf_list_split($313,25218,$line,$linelen)|0);
        HEAP32[$error>>2] = $314;
        $315 = ($314|0)==(0);
        if (!($315)) {
         break L1;
        }
        $316 = HEAP32[$313>>2]|0;
        $317 = ((($316)) + 4|0);
        $318 = HEAP32[$317>>2]|0;
        $319 = (__bdf_atos($318)|0);
        $320 = ((($glyph$0)) + 12|0);
        HEAP16[$320>>1] = $319;
        $321 = HEAP32[$313>>2]|0;
        $322 = ((($321)) + 8|0);
        $323 = HEAP32[$322>>2]|0;
        $324 = (__bdf_atos($323)|0);
        $325 = ((($glyph$0)) + 14|0);
        HEAP16[$325>>1] = $324;
        $326 = HEAP32[$313>>2]|0;
        $327 = ((($326)) + 12|0);
        $328 = HEAP32[$327>>2]|0;
        $329 = (__bdf_atos($328)|0);
        $330 = ((($glyph$0)) + 16|0);
        HEAP16[$330>>1] = $329;
        $331 = HEAP32[$313>>2]|0;
        $332 = ((($331)) + 16|0);
        $333 = HEAP32[$332>>2]|0;
        $334 = (__bdf_atos($333)|0);
        $335 = ((($glyph$0)) + 18|0);
        HEAP16[$335>>1] = $334;
        $336 = HEAP16[$325>>1]|0;
        $337 = $336&65535;
        $338 = $334&65535;
        $339 = (($337) + ($338))|0;
        $340 = $339&65535;
        $341 = ((($glyph$0)) + 20|0);
        HEAP16[$341>>1] = $340;
        $342 = HEAP16[$335>>1]|0;
        $343 = $342&65535;
        $344 = (0 - ($343))|0;
        $345 = $344&65535;
        $346 = ((($glyph$0)) + 22|0);
        HEAP16[$346>>1] = $345;
        $347 = HEAP16[$341>>1]|0;
        $348 = ((($client_data)) + 18|0);
        $349 = HEAP16[$348>>1]|0;
        $350 = ($347<<16>>16)>($349<<16>>16);
        $$9 = $350 ? $347 : $349;
        HEAP16[$348>>1] = $$9;
        $351 = HEAP16[$346>>1]|0;
        $352 = ((($client_data)) + 20|0);
        $353 = HEAP16[$352>>1]|0;
        $354 = ($351<<16>>16)>($353<<16>>16);
        $$sink1 = $354 ? $351 : $353;
        HEAP16[$352>>1] = $$sink1;
        $355 = HEAP16[$320>>1]|0;
        $356 = $355&65535;
        $357 = HEAP16[$330>>1]|0;
        $358 = $357&65535;
        $359 = (($358) + ($356))|0;
        $360 = $359&65535;
        $361 = ((($client_data)) + 22|0);
        HEAP16[$361>>1] = $360;
        $sext = $359 << 16;
        $362 = $sext >> 16;
        $363 = ((($client_data)) + 16|0);
        $364 = HEAP16[$363>>1]|0;
        $365 = $364 << 16 >> 16;
        $366 = ($362|0)>($365|0);
        $$10 = $366 ? $360 : $364;
        HEAP16[$363>>1] = $$10;
        $367 = HEAP16[$330>>1]|0;
        $368 = ((($client_data)) + 12|0);
        $369 = HEAP16[$368>>1]|0;
        $370 = ($367<<16>>16)<($369<<16>>16);
        $$sink3 = $370 ? $367 : $369;
        HEAP16[$368>>1] = $$sink3;
        $371 = HEAP16[$330>>1]|0;
        $372 = ((($client_data)) + 14|0);
        $373 = HEAP16[$372>>1]|0;
        $374 = ($371<<16>>16)>($373<<16>>16);
        $$11 = $374 ? $371 : $373;
        HEAP16[$372>>1] = $$11;
        $375 = HEAP32[$client_data>>2]|0;
        $376 = $375 & 512;
        $377 = ($376|0)==(0);
        if ($377) {
         $378 = HEAP16[$320>>1]|0;
         $379 = ((($glyph$0)) + 10|0);
         HEAP16[$379>>1] = $378;
        }
        $380 = ((($client_data)) + 36|0);
        $381 = HEAP32[$380>>2]|0;
        $382 = HEAP32[$381>>2]|0;
        $383 = ($382|0)==(0);
        do {
         if (!($383)) {
          $384 = ((($glyph$0)) + 10|0);
          $385 = HEAP16[$384>>1]|0;
          $386 = $385&65535;
          $387 = ((($1)) + 16|0);
          $388 = HEAP32[$387>>2]|0;
          $389 = ((($1)) + 20|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = Math_imul($390, $388)|0;
          $392 = (_FT_MulDiv($386,72000,$391)|0);
          $393 = ((($glyph$0)) + 8|0);
          $394 = HEAP16[$393>>1]|0;
          $395 = $392&65535;
          $396 = ($394<<16>>16)==($395<<16>>16);
          if ($396) {
           break;
          }
          HEAP16[$393>>1] = $395;
          $397 = HEAP32[$169>>2]|0;
          $398 = ($397|0)==(-1);
          if ($398) {
           $399 = ((($1)) + 64|0);
           $400 = HEAP32[$399>>2]|0;
           $401 = (($400) + -1)|0;
           $402 = $401 & 31;
           $403 = 1 << $402;
           $404 = $401 >>> 5;
           $405 = (((($1)) + 139396|0) + ($404<<2)|0);
           $406 = HEAP32[$405>>2]|0;
           $407 = $403 | $406;
           HEAP32[$405>>2] = $407;
          } else {
           $408 = ((($glyph$0)) + 4|0);
           $409 = HEAP32[$408>>2]|0;
           $410 = $409 & 31;
           $411 = 1 << $410;
           $412 = $409 >> 5;
           $413 = (((($1)) + 132|0) + ($412<<2)|0);
           $414 = HEAP32[$413>>2]|0;
           $415 = $411 | $414;
           HEAP32[$413>>2] = $415;
          }
          $416 = HEAP32[$client_data>>2]|0;
          $417 = $416 | 4096;
          HEAP32[$client_data>>2] = $417;
          $418 = ((($1)) + 278660|0);
          HEAP16[$418>>1] = 1;
         }
        } while(0);
        $419 = HEAP32[$client_data>>2]|0;
        $420 = $419 | 1024;
        HEAP32[$client_data>>2] = $420;
        break L4;
       }
      }
     } while(0);
     HEAP32[$error>>2] = 182;
     break L1;
    }
   } while(0);
   $$pr14 = HEAP32[$error>>2]|0;
   $453 = $$pr14;
   label = 107;
  }
 } while(0);
 if ((label|0) == 107) {
  $452 = ($453|0)==(0);
  if ($452) {
   $459 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($459|0);
  }
 }
 $454 = HEAP32[$client_data>>2]|0;
 $455 = $454 & 64;
 $456 = ($455|0)==(0);
 if ($456) {
  $459 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($459|0);
 }
 $457 = ((($client_data)) + 24|0);
 $458 = HEAP32[$457>>2]|0;
 _ft_mem_free($3,$458);
 HEAP32[$457>>2] = 0;
 $459 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($459|0);
}
function _by_encoding($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($a)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($b)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 $5 = ($1|0)>($3|0);
 $$ = $5&1;
 $$0 = $4 ? -1 : $$;
 return ($$0|0);
}
function __bdf_atol($s) {
 $s = $s|0;
 var $$01 = 0, $$1 = 0, $$13 = 0, $$21 = 0, $$s = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dmap$1 = 0, $v$0$lcssa = 0, $v$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$01 = 0;
  return ($$01|0);
 }
 $1 = HEAP8[$s>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $$01 = 0;
  return ($$01|0);
 }
 $3 = ($1<<24>>24)==(45);
 $4 = ((($s)) + 1|0);
 $$s = $3 ? $4 : $s;
 $5 = HEAP8[$$s>>0]|0;
 $6 = ($5<<24>>24)==(48);
 L7: do {
  if ($6) {
   $7 = ((($$s)) + 1|0);
   $8 = HEAP8[$7>>0]|0;
   switch ($8<<24>>24) {
   case 88: case 120:  {
    break;
   }
   default: {
    $$1 = 10;$$13 = $$s;$dmap$1 = 25510;
    break L7;
   }
   }
   $9 = ((($$s)) + 2|0);
   $$1 = 16;$$13 = $9;$dmap$1 = 25317;
  } else {
   $$1 = 10;$$13 = $$s;$dmap$1 = 25510;
  }
 } while(0);
 $10 = HEAP8[$$13>>0]|0;
 $11 = $10&255;
 $12 = $11 >>> 3;
 $13 = (($dmap$1) + ($12)|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $10 << 24 >> 24;
 $17 = $16 & 7;
 $18 = 1 << $17;
 $19 = $18 & $15;
 $20 = ($19|0)==(0);
 if ($20) {
  $v$0$lcssa = 0;
 } else {
  $$21 = $$13;$23 = $16;$v$02 = 0;
  while(1) {
   $21 = Math_imul($v$02, $$1)|0;
   $22 = (25349 + ($23)|0);
   $24 = HEAP8[$22>>0]|0;
   $25 = $24&255;
   $26 = (($25) + ($21))|0;
   $27 = ((($$21)) + 1|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = $29 >>> 3;
   $31 = (($dmap$1) + ($30)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $28 << 24 >> 24;
   $35 = $34 & 7;
   $36 = 1 << $35;
   $37 = $36 & $33;
   $38 = ($37|0)==(0);
   if ($38) {
    $v$0$lcssa = $26;
    break;
   } else {
    $$21 = $27;$23 = $34;$v$02 = $26;
   }
  }
 }
 $39 = (0 - ($v$0$lcssa))|0;
 $40 = $3 ? $39 : $v$0$lcssa;
 $$01 = $40;
 return ($$01|0);
}
function _bdf_create_property($name,$font) {
 $name = $name|0;
 $font = $font|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($font)) + 278664|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = ((($font)) + 278676|0);
 $3 = (_hash_lookup($name,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = ((($font)) + 278672|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 1)|0;
  $8 = ((($font)) + 278668|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_ft_mem_realloc($1,16,$6,$7,$9,$error)|0);
  HEAP32[$8>>2] = $10;
  $11 = HEAP32[$error>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = HEAP32[$5>>2]|0;
   $14 = (($10) + ($13<<4)|0);
   ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;
   $15 = (_strlen($name)|0);
   $16 = (($15) + 1)|0;
   $17 = (_ft_mem_realloc($1,1,0,$16,0,$error)|0);
   HEAP32[$14>>2] = $17;
   $18 = HEAP32[$error>>2]|0;
   $19 = ($18|0)==(0);
   if ($19) {
    _memcpy(($17|0),($name|0),($16|0))|0;
    $20 = (((($10) + ($13<<4)|0)) + 4|0);
    HEAP32[$20>>2] = 1;
    $21 = (((($10) + ($13<<4)|0)) + 8|0);
    HEAP32[$21>>2] = 0;
    $22 = HEAP32[$5>>2]|0;
    $23 = (($22) + 83)|0;
    $24 = HEAP32[$14>>2]|0;
    $25 = (_hash_insert($24,$23,$2,$1)|0);
    HEAP32[$error>>2] = $25;
    $26 = ($25|0)==(0);
    if ($26) {
     $27 = HEAP32[$5>>2]|0;
     $28 = (($27) + 1)|0;
     HEAP32[$5>>2] = $28;
    }
   }
  }
 }
 $29 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($29|0);
}
function __bdf_is_atom($line,$linelen,$name,$value,$font) {
 $line = $line|0;
 $linelen = $linelen|0;
 $name = $name|0;
 $value = $value|0;
 $font = $font|0;
 var $$0 = 0, $$lcssa30 = 0, $$lcssa33 = 0, $$sp$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ep$0 = 0, $ep$0$lcssa = 0, $ep$0$lcssa31 = 0, $ep$032 = 0, $ep$111 = 0, $sp$0 = 0, $sp$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$name>>2] = $line;
 $ep$0 = $line;
 L1: while(1) {
  $0 = HEAP8[$ep$0>>0]|0;
  switch ($0<<24>>24) {
  case 0:  {
   $ep$0$lcssa = $ep$0;
   label = 4;
   break L1;
   break;
  }
  case 32: case 9:  {
   $$lcssa33 = $0;$ep$0$lcssa31 = $ep$0;
   label = 5;
   break L1;
   break;
  }
  default: {
  }
  }
  $1 = ((($ep$0)) + 1|0);
  $ep$0 = $1;
 }
 if ((label|0) == 4) {
  $2 = (_bdf_get_property($line,$font)|0);
  $5 = $2;$ep$032 = $ep$0$lcssa;
 }
 else if ((label|0) == 5) {
  HEAP8[$ep$0$lcssa31>>0] = 0;
  $3 = (_bdf_get_property($line,$font)|0);
  HEAP8[$ep$0$lcssa31>>0] = $$lcssa33;
  $5 = $3;$ep$032 = $ep$0$lcssa31;
 }
 $4 = ($5|0)==(0|0);
 if (!($4)) {
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if (!($8)) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $9 = (($line) + ($linelen)|0);
 $10 = HEAP8[$ep$032>>0]|0;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $sp$0 = $ep$032;
 } else {
  $12 = ((($ep$032)) + 1|0);
  HEAP8[$ep$032>>0] = 0;
  $sp$0 = $12;
 }
 L14: while(1) {
  $13 = HEAP8[$sp$0>>0]|0;
  switch ($13<<24>>24) {
  case 32: case 9:  {
   break;
  }
  default: {
   $sp$0$lcssa = $sp$0;
   break L14;
  }
  }
  $14 = ((($sp$0)) + 1|0);
  $sp$0 = $14;
 }
 $15 = HEAP8[$sp$0$lcssa>>0]|0;
 $16 = ($15<<24>>24)==(34);
 $17 = ((($sp$0$lcssa)) + 1|0);
 $$sp$0 = $16 ? $17 : $sp$0$lcssa;
 HEAP32[$value>>2] = $$sp$0;
 $18 = ($9>>>0)>($$sp$0>>>0);
 if ($18) {
  $ep$111 = $9;
 } else {
  $$0 = 1;
  return ($$0|0);
 }
 L20: while(1) {
  $19 = ((($ep$111)) + -1|0);
  $20 = HEAP8[$19>>0]|0;
  switch ($20<<24>>24) {
  case 34:  {
   $$lcssa30 = $19;
   label = 15;
   break L20;
   break;
  }
  case 9: case 32:  {
   break;
  }
  default: {
   $$0 = 1;
   label = 16;
   break L20;
  }
  }
  HEAP8[$19>>0] = 0;
  $21 = ($19>>>0)>($$sp$0>>>0);
  if ($21) {
   $ep$111 = $19;
  } else {
   $$0 = 1;
   label = 16;
   break;
  }
 }
 if ((label|0) == 15) {
  HEAP8[$$lcssa30>>0] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 16) {
  return ($$0|0);
 }
 return (0)|0;
}
function __bdf_list_ensure($list,$num_items) {
 $list = $list|0;
 $num_items = $num_items|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $newsize$0 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($list)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($num_items>>>0);
 do {
  if ($2) {
   $3 = $1 >>> 1;
   $4 = (($1) + 5)|0;
   $5 = (($4) + ($3))|0;
   $6 = ($1|0)==(536870911);
   if ($6) {
    HEAP32[$error>>2] = 64;
    break;
   }
   $7 = ((($list)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($5>>>0)<($1>>>0);
   $10 = ($5>>>0)>(536870911);
   $or$cond = $9 | $10;
   $newsize$0 = $or$cond ? 536870911 : $5;
   $11 = HEAP32[$list>>2]|0;
   $12 = (_ft_mem_realloc($8,4,$1,$newsize$0,$11,$error)|0);
   HEAP32[$list>>2] = $12;
   $13 = HEAP32[$error>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    HEAP32[$0>>2] = $newsize$0;
   }
  }
 } while(0);
 $15 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _hash_bucket($key,$ht) {
 $key = $key|0;
 $ht = $ht|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $kp$05 = 0, $ndp$0$be = 0, $ndp$0$lcssa = 0, $ndp$01 = 0, $res$0$lcssa = 0, $res$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ht)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$key>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $res$0$lcssa = 0;
 } else {
  $7 = $2;$kp$05 = $key;$res$04 = 0;
  while(1) {
   $4 = ($res$04*31)|0;
   $5 = ((($kp$05)) + 1|0);
   $6 = $7 << 24 >> 24;
   $8 = (($6) + ($4))|0;
   $9 = HEAP8[$5>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $res$0$lcssa = $8;
    break;
   } else {
    $7 = $9;$kp$05 = $5;$res$04 = $8;
   }
  }
 }
 $11 = ((($ht)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($res$0$lcssa>>>0) % ($12>>>0))&-1;
 $14 = (($1) + ($13<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $ndp$0$lcssa = $14;
  return ($ndp$0$lcssa|0);
 }
 $17 = HEAP8[$key>>0]|0;
 $19 = $15;$ndp$01 = $14;
 while(1) {
  $18 = HEAP32[$19>>2]|0;
  $20 = HEAP8[$18>>0]|0;
  $21 = ($20<<24>>24)==($17<<24>>24);
  if ($21) {
   $22 = (_strcmp($18,$key)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    $ndp$0$lcssa = $ndp$01;
    label = 10;
    break;
   }
  }
  $24 = ((($ndp$01)) + -4|0);
  $25 = ($24>>>0)<($1>>>0);
  if ($25) {
   $26 = HEAP32[$11>>2]|0;
   $27 = (($26) + -1)|0;
   $28 = (($1) + ($27<<2)|0);
   $ndp$0$be = $28;
  } else {
   $ndp$0$be = $24;
  }
  $29 = HEAP32[$ndp$0$be>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $ndp$0$lcssa = $ndp$0$be;
   label = 10;
   break;
  } else {
   $19 = $29;$ndp$01 = $ndp$0$be;
  }
 }
 if ((label|0) == 10) {
  return ($ndp$0$lcssa|0);
 }
 return (0)|0;
}
function _hash_rehash($ht,$memory) {
 $ht = $ht|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $bp$01 = 0, $error = 0, $exitcond = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($ht)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ht)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$error>>2] = 0;
 $4 = HEAP32[$2>>2]|0;
 $5 = $4 << 1;
 HEAP32[$2>>2] = $5;
 $6 = (($5|0) / 3)&-1;
 HEAP32[$ht>>2] = $6;
 $7 = HEAP32[$2>>2]|0;
 $8 = (_ft_mem_realloc($memory,4,0,$7,0,$error)|0);
 HEAP32[$0>>2] = $8;
 $9 = HEAP32[$error>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $19 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($19|0);
 }
 $11 = ($3|0)>(0);
 if ($11) {
  $bp$01 = $1;$i$02 = 0;
  while(1) {
   $12 = HEAP32[$bp$01>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $14 = HEAP32[$12>>2]|0;
    $15 = (_hash_bucket($14,$ht)|0);
    $16 = HEAP32[$bp$01>>2]|0;
    HEAP32[$15>>2] = $16;
   }
   $17 = (($i$02) + 1)|0;
   $18 = ((($bp$01)) + 4|0);
   $exitcond = ($17|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $bp$01 = $18;$i$02 = $17;
   }
  }
 }
 _ft_mem_free($memory,$1);
 $19 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($19|0);
}
function _cff_cmap_encoding_init($cmap) {
 $cmap = $cmap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$cmap>>2]|0;
 $1 = ((($0)) + 692|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 640|0);
 $4 = ((($cmap)) + 16|0);
 HEAP32[$4>>2] = $3;
 return 0;
}
function _cff_cmap_encoding_done($cmap) {
 $cmap = $cmap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 HEAP32[$0>>2] = 0;
 return;
}
function _cff_cmap_encoding_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($char_code>>>0)<(256);
 if (!($0)) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $1 = ((($cmap)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($char_code<<1)|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $result$0 = $5;
 return ($result$0|0);
}
function _cff_cmap_encoding_char_next($cmap,$pchar_code) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $code$0 = 0, $code$0$in = 0, $code$0$lcssa12 = 0, $result$0 = 0, $result$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pchar_code>>2]|0;
 HEAP32[$pchar_code>>2] = 0;
 $1 = ($0>>>0)<(255);
 if (!($1)) {
  $result$1 = 0;
  return ($result$1|0);
 }
 $2 = ((($cmap)) + 16|0);
 $code$0$in = $0;$result$0 = 0;
 while(1) {
  $code$0 = (($code$0$in) + 1)|0;
  $3 = ($code$0>>>0)>(255);
  if ($3) {
   $result$1 = $result$0;
   label = 6;
   break;
  }
  $4 = HEAP32[$2>>2]|0;
  $5 = (($4) + ($code$0<<1)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = $6&65535;
  $8 = ($6<<16>>16)==(0);
  if ($8) {
   $code$0$in = $code$0;$result$0 = $7;
  } else {
   $$lcssa = $7;$code$0$lcssa12 = $code$0;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($result$1|0);
 }
 HEAP32[$pchar_code>>2] = $code$0$lcssa12;
 $result$1 = $$lcssa;
 return ($result$1|0);
}
function _cff_cmap_unicode_init($unicodes) {
 $unicodes = $unicodes|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$unicodes>>2]|0;
 $1 = ((($0)) + 692|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 1160|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 163;
  return ($$0|0);
 }
 $6 = ((($2)) + 2956|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 100|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($7)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($2)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiiiiii[$11 & 3]($9,$unicodes,$13,150,0,$0)|0);
 $$0 = $14;
 return ($$0|0);
}
function _cff_cmap_unicode_done($unicodes) {
 $unicodes = $unicodes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$unicodes>>2]|0;
 $1 = ((($0)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($unicodes)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 _ft_mem_free($2,$4);
 HEAP32[$3>>2] = 0;
 $5 = ((($unicodes)) + 16|0);
 HEAP32[$5>>2] = 0;
 return;
}
function _cff_cmap_unicode_char_index($unicodes,$char_code) {
 $unicodes = $unicodes|0;
 $char_code = $char_code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$unicodes>>2]|0;
 $1 = ((($0)) + 692|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 2956|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 255]($unicodes,$char_code)|0);
 return ($7|0);
}
function _cff_cmap_unicode_char_next($unicodes,$pchar_code) {
 $unicodes = $unicodes|0;
 $pchar_code = $pchar_code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$unicodes>>2]|0;
 $1 = ((($0)) + 692|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 2956|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 255]($unicodes,$pchar_code)|0);
 return ($7|0);
}
function _cff_sid_to_glyph_name($face,$idx) {
 $face = $face|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 692|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 1160|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($idx<<1)|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (_cff_index_get_sid_string($1,$6)|0);
 return ($7|0);
}
function _cff_size_done($cffsize) {
 $cffsize = $cffsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$cffsize>>2]|0;
 $1 = ((($0)) + 692|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($cffsize)) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 $6 = (_cff_size_get_globals_funcs($cffsize)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return;
 }
 $8 = ((($6)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$9 & 127]($10);
 $11 = ((($2)) + 1896|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  return;
 } else {
  $i$01 = $12;
 }
 while(1) {
  $14 = HEAP32[$8>>2]|0;
  $15 = (($i$01) + -1)|0;
  $16 = (((($4)) + 4|0) + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vi[$14 & 127]($17);
  $18 = ($15|0)==(0);
  if ($18) {
   break;
  } else {
   $i$01 = $15;
  }
 }
 return;
}
function _cff_size_init($cffsize) {
 $cffsize = $cffsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $i$0 = 0, $priv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $error = sp;
 $priv = sp + 4|0;
 HEAP32[$error>>2] = 0;
 $0 = (_cff_size_get_globals_funcs($cffsize)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if (!($1)) {
   $2 = HEAP32[$cffsize>>2]|0;
   $3 = ((($2)) + 692|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = HEAP32[$cffsize>>2]|0;
   $6 = ((($5)) + 100|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (_ft_mem_alloc($7,1028,$error)|0);
   $9 = HEAP32[$error>>2]|0;
   $10 = ($9|0)==(0);
   L3: do {
    if ($10) {
     $11 = ((($4)) + 1324|0);
     _cff_make_private_dict($11,$priv);
     $12 = HEAP32[$0>>2]|0;
     $13 = HEAP32[$cffsize>>2]|0;
     $14 = ((($13)) + 100|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (FUNCTION_TABLE_iiii[$12 & 127]($15,$priv,$8)|0);
     HEAP32[$error>>2] = $16;
     $17 = ($16|0)==(0);
     if ($17) {
      $18 = ((($4)) + 1896|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = ((($8)) + 4|0);
      $i$0 = $19;
      while(1) {
       $21 = ($i$0|0)==(0);
       if ($21) {
        break;
       }
       $22 = (($i$0) + -1)|0;
       $23 = (((($4)) + 1900|0) + ($22<<2)|0);
       $24 = HEAP32[$23>>2]|0;
       _cff_make_private_dict($24,$priv);
       $25 = HEAP32[$0>>2]|0;
       $26 = HEAP32[$cffsize>>2]|0;
       $27 = ((($26)) + 100|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = (($20) + ($22<<2)|0);
       $30 = (FUNCTION_TABLE_iiii[$25 & 127]($28,$priv,$29)|0);
       HEAP32[$error>>2] = $30;
       $31 = ($30|0)==(0);
       if ($31) {
        $i$0 = $22;
       } else {
        break L3;
       }
      }
      $32 = ((($cffsize)) + 40|0);
      HEAP32[$32>>2] = $8;
      break L1;
     }
    }
   } while(0);
   $34 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($34|0);
  }
 } while(0);
 $33 = ((($cffsize)) + 44|0);
 HEAP32[$33>>2] = -1;
 $34 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($34|0);
}
function _cff_size_select($size,$strike_index) {
 $size = $size|0;
 $strike_index = $strike_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $x_scale$0 = 0, $y_scale$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($size)) + 44|0);
 HEAP32[$0>>2] = $strike_index;
 $1 = HEAP32[$size>>2]|0;
 _FT_Select_Metrics($1,$strike_index);
 $2 = (_cff_size_get_globals_funcs($size)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  return 0;
 }
 $4 = HEAP32[$size>>2]|0;
 $5 = ((($4)) + 692|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($size)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($6)) + 1392|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($2)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$8>>2]|0;
 $14 = ((($size)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($size)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 (FUNCTION_TABLE_iiiiii[$12 & 63]($13,$15,$17,0,0)|0);
 $18 = ((($6)) + 1896|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  return 0;
 } else {
  $i$01 = $19;
 }
 while(1) {
  $21 = (($i$01) + -1)|0;
  $22 = (((($6)) + 1900|0) + ($21<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 68|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($10|0)==($25|0);
  $27 = HEAP32[$14>>2]|0;
  if ($26) {
   $31 = HEAP32[$16>>2]|0;
   $x_scale$0 = $27;$y_scale$0 = $31;
  } else {
   $28 = (_FT_MulDiv($27,$10,$25)|0);
   $29 = HEAP32[$16>>2]|0;
   $30 = (_FT_MulDiv($29,$10,$25)|0);
   $x_scale$0 = $28;$y_scale$0 = $30;
  }
  $32 = HEAP32[$11>>2]|0;
  $33 = (((($8)) + 4|0) + ($21<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  (FUNCTION_TABLE_iiiiii[$32 & 63]($34,$x_scale$0,$y_scale$0,0,0)|0);
  $35 = ($21|0)==(0);
  if ($35) {
   break;
  } else {
   $i$01 = $21;
  }
 }
 return 0;
}
function _cff_size_request($size,$req) {
 $size = $size|0;
 $req = $req|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $strike_index = 0, $x_scale$0 = 0, $y_scale$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $strike_index = sp;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 2;
 $4 = ($3|0)==(0);
 do {
  if (!($4)) {
   $5 = ((($0)) + 532|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 148|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (FUNCTION_TABLE_iiii[$8 & 127]($0,$req,$strike_index)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    $11 = ((($size)) + 44|0);
    HEAP32[$11>>2] = -1;
    break;
   }
   $12 = HEAP32[$strike_index>>2]|0;
   (_cff_size_select($size,$12)|0);
   STACKTOP = sp;return 0;
  }
 } while(0);
 $13 = HEAP32[$size>>2]|0;
 _FT_Request_Metrics($13,$req);
 $14 = (_cff_size_get_globals_funcs($size)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  STACKTOP = sp;return 0;
 }
 $16 = HEAP32[$size>>2]|0;
 $17 = ((($16)) + 692|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($size)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($18)) + 1392|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($14)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$20>>2]|0;
 $26 = ((($size)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($size)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 (FUNCTION_TABLE_iiiiii[$24 & 63]($25,$27,$29,0,0)|0);
 $30 = ((($18)) + 1896|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  STACKTOP = sp;return 0;
 } else {
  $i$01 = $31;
 }
 while(1) {
  $33 = (($i$01) + -1)|0;
  $34 = (((($18)) + 1900|0) + ($33<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 68|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($22|0)==($37|0);
  $39 = HEAP32[$26>>2]|0;
  if ($38) {
   $43 = HEAP32[$28>>2]|0;
   $x_scale$0 = $39;$y_scale$0 = $43;
  } else {
   $40 = (_FT_MulDiv($39,$22,$37)|0);
   $41 = HEAP32[$28>>2]|0;
   $42 = (_FT_MulDiv($41,$22,$37)|0);
   $x_scale$0 = $40;$y_scale$0 = $42;
  }
  $44 = HEAP32[$23>>2]|0;
  $45 = (((($20)) + 4|0) + ($33<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  (FUNCTION_TABLE_iiiiii[$44 & 63]($46,$x_scale$0,$y_scale$0,0,0)|0);
  $47 = ($33|0)==(0);
  if ($47) {
   break;
  } else {
   $i$01 = $33;
  }
 }
 STACKTOP = sp;return 0;
}
function _cff_slot_done($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($slot)) + 156|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _cff_slot_init($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($slot)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 692|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 2952|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  return 0;
 }
 $7 = ((($1)) + 96|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_FT_Get_Module($10,88847)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  return 0;
 }
 $13 = ((($5)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 63]($11)|0);
 $16 = ((($slot)) + 156|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 36|0);
 HEAP32[$18>>2] = $15;
 return 0;
}
function _cff_face_init($stream,$cffface,$face_index,$num_params,$params) {
 $stream = $stream|0;
 $cffface = $cffface|0;
 $face_index = $face_index|0;
 $num_params = $num_params|0;
 $params = $params|0;
 var $$ = 0, $$0 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$old10 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cmaprec = 0;
 var $error = 0, $family$0 = 0, $family$1$ph$be = 0, $family$1$ph25 = 0, $family$121 = 0, $family$121$lcssa = 0, $flags$1 = 0, $flags$3 = 0, $flags$4 = 0, $fullp$0$ph$be = 0, $fullp$0$ph24 = 0, $fullp$0$ph24$lcssa63 = 0, $i$026 = 0, $nn$0$lcssa = 0, $nn$019 = 0, $nn$019$lcssa59 = 0, $nn$1 = 0, $not$ = 0, $or$cond = 0, $or$cond11 = 0;
 var $or$cond3 = 0, $or$cond9 = 0, $phitmp = 0, $pure_cff$0 = 0, $pure_cff$1 = 0, $scaling$0 = 0, $sext = 0, $sfnt_format$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 12|0;
 $cmaprec = sp;
 $0 = ((($cffface)) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_FT_Get_Module_Interface($3,89702)|0);
 $5 = ($4|0)==(0|0);
 L1: do {
  if ($5) {
   HEAP32[$error>>2] = 11;
  } else {
   $6 = HEAP32[$0>>2]|0;
   $7 = (_ft_module_get_service($6,89321)|0);
   $8 = (_FT_Get_Module_Interface($3,88847)|0);
   $9 = (_FT_Stream_Seek($stream,0)|0);
   HEAP32[$error>>2] = $9;
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = ((($4)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (FUNCTION_TABLE_iiiiii[$12 & 63]($stream,$cffface,$face_index,$num_params,$params)|0);
    HEAP32[$error>>2] = $13;
    $14 = ($13|0)==(0);
    if ($14) {
     $15 = ((($cffface)) + 148|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)==(1330926671);
     if (!($17)) {
      HEAP32[$error>>2] = 2;
      break;
     }
     $18 = ($face_index|0)<(0);
     if ($18) {
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $19 = ($face_index|0)>(0);
     if ($19) {
      HEAP32[$error>>2] = 6;
      break;
     }
     $20 = ((($cffface)) + 508|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (FUNCTION_TABLE_iiiii[$21 & 63]($cffface,1751474532,$stream,0)|0);
     HEAP32[$error>>2] = $22;
     $23 = ($22|0)==(0);
     if ($23) {
      $24 = ((($4)) + 8|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (FUNCTION_TABLE_iiiiii[$25 & 63]($stream,$cffface,0,$num_params,$params)|0);
      HEAP32[$error>>2] = $26;
      $27 = ($26|0)==(0);
      if ($27) {
       $pure_cff$0 = 0;
      } else {
       break;
      }
     } else {
      $28 = ((($4)) + 40|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (FUNCTION_TABLE_iii[$29 & 255]($cffface,$stream)|0);
      HEAP32[$error>>2] = $30;
      $31 = ($30|0)==(0);
      if ($31) {
       $pure_cff$0 = 1;
      } else {
       break;
      }
     }
     $32 = HEAP32[$20>>2]|0;
     $33 = (FUNCTION_TABLE_iiiii[$32 & 63]($cffface,1128678944,$stream,0)|0);
     HEAP32[$error>>2] = $33;
     $34 = ($33|0)==(0);
     if ($34) {
      $pure_cff$1 = $pure_cff$0;$sfnt_format$0 = 1;
     } else {
      break;
     }
    } else {
     $35 = (_FT_Stream_Seek($stream,0)|0);
     HEAP32[$error>>2] = $35;
     $36 = ($35|0)==(0);
     if (!($36)) {
      break;
     }
     HEAP32[$error>>2] = 0;
     $pure_cff$1 = 1;$sfnt_format$0 = 0;
    }
    $37 = ((($cffface)) + 100|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (_ft_mem_alloc($38,2972,$error)|0);
    $40 = HEAP32[$error>>2]|0;
    $41 = ($40|0)==(0);
    if ($41) {
     $42 = ((($cffface)) + 692|0);
     HEAP32[$42>>2] = $39;
     $43 = (_cff_font_load($3,$stream,$face_index,$39,$pure_cff$1)|0);
     HEAP32[$error>>2] = $43;
     $44 = ($43|0)==(0);
     if ($44) {
      $45 = ((($39)) + 2952|0);
      HEAP32[$45>>2] = $8;
      $46 = ((($39)) + 2956|0);
      HEAP32[$46>>2] = $7;
      $47 = ((($cffface)) + 4|0);
      HEAP32[$47>>2] = $face_index;
      $48 = ((($39)) + 12|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ((($cffface)) + 16|0);
      HEAP32[$50>>2] = $49;
      $51 = ((($39)) + 1456|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = ($52|0)!=(65535);
      $54 = ($7|0)!=(0|0);
      $or$cond = $54 | $53;
      if (!($or$cond)) {
       HEAP32[$error>>2] = 11;
       break;
      }
      $55 = ((($39)) + 1388|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = ($56<<24>>24)==(0);
      if ($57) {
       $58 = ($pure_cff$1<<24>>24)==(0);
       if ($58) {
        $59 = ((($cffface)) + 68|0);
        $60 = HEAP16[$59>>1]|0;
        $61 = $60&65535;
        $63 = $61;
       } else {
        $63 = 1000;
       }
       $62 = ((($39)) + 1392|0);
       HEAP32[$62>>2] = $63;
      }
      $64 = ((($39)) + 1372|0);
      $65 = ((($39)) + 1396|0);
      $66 = ((($39)) + 1392|0);
      $67 = ((($39)) + 1384|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)<(0);
      $70 = (0 - ($68))|0;
      $71 = $69 ? $70 : $68;
      $72 = ($71|0)==(65536);
      if (!($72)) {
       $73 = HEAP32[$66>>2]|0;
       $74 = (_FT_DivFix($73,$71)|0);
       HEAP32[$66>>2] = $74;
       $75 = HEAP32[$64>>2]|0;
       $76 = (_FT_DivFix($75,$71)|0);
       HEAP32[$64>>2] = $76;
       $77 = ((($39)) + 1380|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = (_FT_DivFix($78,$71)|0);
       HEAP32[$77>>2] = $79;
       $80 = ((($39)) + 1376|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = (_FT_DivFix($81,$71)|0);
       HEAP32[$80>>2] = $82;
       $83 = HEAP32[$67>>2]|0;
       $84 = (_FT_DivFix($83,$71)|0);
       HEAP32[$67>>2] = $84;
       $85 = HEAP32[$65>>2]|0;
       $86 = (_FT_DivFix($85,$71)|0);
       HEAP32[$65>>2] = $86;
       $87 = ((($39)) + 1400|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = (_FT_DivFix($88,$71)|0);
       HEAP32[$87>>2] = $89;
      }
      $90 = HEAP32[$65>>2]|0;
      $91 = $90 >> 16;
      HEAP32[$65>>2] = $91;
      $92 = ((($39)) + 1400|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = $93 >> 16;
      HEAP32[$92>>2] = $94;
      $95 = ((($39)) + 1896|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = ($96|0)==(0);
      if (!($97)) {
       $98 = ((($39)) + 1900|0);
       $i$026 = $96;
       while(1) {
        $99 = (($i$026) + -1)|0;
        $100 = (($98) + ($99<<2)|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = ((($101)) + 64|0);
        $103 = HEAP8[$102>>0]|0;
        $104 = ($103<<24>>24)==(0);
        if ($104) {
         $119 = ((($101)) + 48|0);
         ;HEAP32[$119>>2]=HEAP32[$64>>2]|0;HEAP32[$119+4>>2]=HEAP32[$64+4>>2]|0;HEAP32[$119+8>>2]=HEAP32[$64+8>>2]|0;HEAP32[$119+12>>2]=HEAP32[$64+12>>2]|0;
         $120 = ((($101)) + 72|0);
         $121 = $65;
         $122 = $121;
         $123 = HEAP32[$122>>2]|0;
         $124 = (($121) + 4)|0;
         $125 = $124;
         $126 = HEAP32[$125>>2]|0;
         $127 = $120;
         $128 = $127;
         HEAP32[$128>>2] = $123;
         $129 = (($127) + 4)|0;
         $130 = $129;
         HEAP32[$130>>2] = $126;
         $131 = HEAP32[$66>>2]|0;
         $132 = ((($101)) + 68|0);
         HEAP32[$132>>2] = $131;
        } else {
         $105 = HEAP8[$55>>0]|0;
         $106 = ($105<<24>>24)==(0);
         if (!($106)) {
          $107 = HEAP32[$66>>2]|0;
          $108 = ($107>>>0)>(1);
          if ($108) {
           $109 = ((($101)) + 68|0);
           $110 = HEAP32[$109>>2]|0;
           $111 = ($110>>>0)>(1);
           if ($111) {
            $112 = ($107>>>0)<($110>>>0);
            $$ = $112 ? $107 : $110;
            $scaling$0 = $$;
           } else {
            $scaling$0 = 1;
           }
          } else {
           $scaling$0 = 1;
          }
          $113 = ((($101)) + 48|0);
          _FT_Matrix_Multiply_Scaled($64,$113,$scaling$0);
          $114 = ((($101)) + 72|0);
          _FT_Vector_Transform_Scaled($114,$64,$scaling$0);
          $115 = ((($101)) + 68|0);
          $116 = HEAP32[$115>>2]|0;
          $117 = HEAP32[$66>>2]|0;
          $118 = (_FT_MulDiv($116,$117,$scaling$0)|0);
          HEAP32[$115>>2] = $118;
         }
        }
        $133 = ((($101)) + 72|0);
        $134 = ((($101)) + 68|0);
        $135 = ((($101)) + 60|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = ($136|0)<(0);
        $138 = (0 - ($136))|0;
        $139 = $137 ? $138 : $136;
        $140 = ($139|0)==(65536);
        if (!($140)) {
         $141 = HEAP32[$134>>2]|0;
         $142 = (_FT_DivFix($141,$139)|0);
         HEAP32[$134>>2] = $142;
         $143 = ((($101)) + 48|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = (_FT_DivFix($144,$139)|0);
         HEAP32[$143>>2] = $145;
         $146 = ((($101)) + 56|0);
         $147 = HEAP32[$146>>2]|0;
         $148 = (_FT_DivFix($147,$139)|0);
         HEAP32[$146>>2] = $148;
         $149 = ((($101)) + 52|0);
         $150 = HEAP32[$149>>2]|0;
         $151 = (_FT_DivFix($150,$139)|0);
         HEAP32[$149>>2] = $151;
         $152 = HEAP32[$135>>2]|0;
         $153 = (_FT_DivFix($152,$139)|0);
         HEAP32[$135>>2] = $153;
         $154 = HEAP32[$133>>2]|0;
         $155 = (_FT_DivFix($154,$139)|0);
         HEAP32[$133>>2] = $155;
         $156 = ((($101)) + 76|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = (_FT_DivFix($157,$139)|0);
         HEAP32[$156>>2] = $158;
        }
        $159 = HEAP32[$133>>2]|0;
        $160 = $159 >> 16;
        HEAP32[$133>>2] = $160;
        $161 = ((($101)) + 76|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = $162 >> 16;
        HEAP32[$161>>2] = $163;
        $164 = ($99|0)==(0);
        if ($164) {
         break;
        } else {
         $i$026 = $99;
        }
       }
      }
      $165 = ($pure_cff$1<<24>>24)==(0);
      if (!($165)) {
       $166 = ((($39)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       HEAP32[$cffface>>2] = $167;
       $168 = HEAP32[$51>>2]|0;
       $169 = ($168|0)==(65535);
       if ($169) {
        $173 = ((($39)) + 1184|0);
        $174 = HEAP32[$173>>2]|0;
        $storemerge = $174;
       } else {
        $170 = ((($39)) + 1168|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = (($171) + 1)|0;
        $storemerge = $172;
       }
       HEAP32[$50>>2] = $storemerge;
       $175 = ((($39)) + 1408|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = $176 >> 16;
       $178 = ((($cffface)) + 52|0);
       HEAP32[$178>>2] = $177;
       $179 = ((($39)) + 1412|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = $180 >> 16;
       $182 = ((($cffface)) + 56|0);
       HEAP32[$182>>2] = $181;
       $183 = ((($39)) + 1416|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (($184) + 65535)|0;
       $186 = $185 >> 16;
       $187 = ((($cffface)) + 60|0);
       HEAP32[$187>>2] = $186;
       $188 = ((($39)) + 1420|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = (($189) + 65535)|0;
       $191 = $190 >> 16;
       $192 = ((($cffface)) + 64|0);
       HEAP32[$192>>2] = $191;
       $193 = HEAP32[$66>>2]|0;
       $194 = $193&65535;
       $195 = ((($cffface)) + 68|0);
       HEAP16[$195>>1] = $194;
       $196 = HEAP32[$192>>2]|0;
       $197 = $196&65535;
       $198 = ((($cffface)) + 70|0);
       HEAP16[$198>>1] = $197;
       $199 = HEAP32[$182>>2]|0;
       $200 = $199&65535;
       $201 = ((($cffface)) + 72|0);
       HEAP16[$201>>1] = $200;
       $202 = HEAP16[$195>>1]|0;
       $203 = $202&65535;
       $204 = ($203*12)|0;
       $205 = (($204>>>0) / 10)&-1;
       $206 = $205&65535;
       $207 = ((($cffface)) + 74|0);
       HEAP16[$207>>1] = $206;
       $sext = $205 << 16;
       $208 = $sext >> 16;
       $209 = HEAP16[$198>>1]|0;
       $210 = $209 << 16 >> 16;
       $211 = HEAP16[$201>>1]|0;
       $212 = $211 << 16 >> 16;
       $213 = (($210) - ($212))|0;
       $214 = ($208|0)<($213|0);
       if ($214) {
        $215 = $213&65535;
        HEAP16[$207>>1] = $215;
       }
       $216 = ((($39)) + 1356|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = $217 >>> 16;
       $219 = $218&65535;
       $220 = ((($cffface)) + 80|0);
       HEAP16[$220>>1] = $219;
       $221 = ((($39)) + 1360|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = $222 >>> 16;
       $224 = $223&65535;
       $225 = ((($cffface)) + 82|0);
       HEAP16[$225>>1] = $224;
       $226 = (_cff_index_get_name($39,$face_index)|0);
       $227 = ((($cffface)) + 20|0);
       HEAP32[$227>>2] = $226;
       $228 = ($226|0)==(0|0);
       L63: do {
        if ($228) {
         $251 = ((($39)) + 1496|0);
         $252 = HEAP32[$251>>2]|0;
         $253 = (_cff_index_get_sid_string($39,$252)|0);
         $254 = ($253|0)==(0|0);
         if ($254) {
          label = 60;
         } else {
          $255 = (_cff_strcpy($38,$253)|0);
          HEAP32[$227>>2] = $255;
          label = 60;
         }
        } else {
         $229 = ((($39)) + 1336|0);
         $230 = HEAP32[$229>>2]|0;
         $231 = (_cff_index_get_sid_string($39,$230)|0);
         $232 = HEAP32[$227>>2]|0;
         _remove_subset_prefix($232);
         $233 = ((($39)) + 1340|0);
         $234 = HEAP32[$233>>2]|0;
         $235 = ($234|0)==(0);
         if ($235) {
          $family$0 = $232;
         } else {
          $236 = (_cff_index_get_sid_string($39,$234)|0);
          $237 = ($236|0)==(0|0);
          $$6 = $237 ? $232 : $236;
          $family$0 = $$6;
         }
         $238 = ($231|0)!=(0|0);
         $239 = ($family$0|0)!=(0|0);
         $or$cond3 = $238 & $239;
         if ($or$cond3) {
          $240 = HEAP8[$231>>0]|0;
          $241 = ($240<<24>>24)==(0);
          if ($241) {
           label = 60;
          } else {
           $351 = $240;$family$1$ph25 = $family$0;$fullp$0$ph24 = $231;
           L71: while(1) {
            $244 = $351;$family$121 = $family$1$ph25;
            L73: while(1) {
             $242 = HEAP8[$family$121>>0]|0;
             $243 = ($244<<24>>24)==($242<<24>>24);
             if ($243) {
              $family$121$lcssa = $family$121;
              label = 51;
              break;
             }
             switch ($244<<24>>24) {
             case 45: case 32:  {
              $family$1$ph$be = $family$121;
              break L73;
              break;
             }
             default: {
             }
             }
             switch ($242<<24>>24) {
             case 0:  {
              $fullp$0$ph24$lcssa63 = $fullp$0$ph24;
              break L71;
              break;
             }
             case 45: case 32:  {
              break;
             }
             default: {
              label = 60;
              break L63;
             }
             }
             $248 = ((($family$121)) + 1|0);
             $249 = HEAP8[$fullp$0$ph24>>0]|0;
             $250 = ($249<<24>>24)==(0);
             if ($250) {
              label = 60;
              break L63;
             } else {
              $244 = $249;$family$121 = $248;
             }
            }
            if ((label|0) == 51) {
             label = 0;
             $245 = ((($family$121$lcssa)) + 1|0);
             $family$1$ph$be = $245;
            }
            $fullp$0$ph$be = ((($fullp$0$ph24)) + 1|0);
            $246 = HEAP8[$fullp$0$ph$be>>0]|0;
            $247 = ($246<<24>>24)==(0);
            if ($247) {
             label = 60;
             break L63;
            } else {
             $351 = $246;$family$1$ph25 = $family$1$ph$be;$fullp$0$ph24 = $fullp$0$ph$be;
            }
           }
           $256 = (_cff_strcpy($38,$fullp$0$ph24$lcssa63)|0);
           $257 = HEAP32[$227>>2]|0;
           _remove_style($257,$256);
           $258 = ($256|0)==(0|0);
           if ($258) {
            label = 60;
           } else {
            $259 = ((($cffface)) + 24|0);
            HEAP32[$259>>2] = $256;
           }
          }
         } else {
          label = 60;
         }
        }
       } while(0);
       if ((label|0) == 60) {
        $260 = (_cff_strcpy($38,89763)|0);
        $261 = ((($cffface)) + 24|0);
        HEAP32[$261>>2] = $260;
       }
       $262 = ($sfnt_format$0<<24>>24)==(0);
       $$7 = $262 ? 2065 : 2073;
       $263 = ((($39)) + 1348|0);
       $264 = HEAP8[$263>>0]|0;
       $265 = ($264<<24>>24)==(0);
       $266 = $$7 | 4;
       $flags$1 = $265 ? $$7 : $266;
       $267 = ((($cffface)) + 8|0);
       HEAP32[$267>>2] = $flags$1;
       $268 = ((($39)) + 1352|0);
       $269 = HEAP32[$268>>2]|0;
       $not$ = ($269|0)!=(0);
       $$8 = $not$&1;
       $270 = ((($39)) + 1344|0);
       $271 = HEAP32[$270>>2]|0;
       $272 = (_cff_index_get_sid_string($39,$271)|0);
       $273 = ($272|0)==(0|0);
       do {
        if ($273) {
         $flags$3 = $$8;
        } else {
         $274 = (_strcmp($272,89783)|0);
         $275 = ($274|0)==(0);
         if (!($275)) {
          $276 = (_strcmp($272,88856)|0);
          $277 = ($276|0)==(0);
          if (!($277)) {
           $flags$3 = $$8;
           break;
          }
         }
         $278 = $$8 | 2;
         $flags$3 = $278;
        }
       } while(0);
       $279 = $flags$3 & 2;
       $280 = ($279|0)==(0);
       do {
        if ($280) {
         $281 = ((($cffface)) + 24|0);
         $282 = HEAP32[$281>>2]|0;
         $283 = ($282|0)==(0|0);
         if ($283) {
          $flags$4 = $flags$3;
         } else {
          $284 = (_strncmp($282,89783,4)|0);
          $285 = ($284|0)==(0);
          if (!($285)) {
           $286 = (_strncmp($282,88856,5)|0);
           $287 = ($286|0)==(0);
           if (!($287)) {
            $flags$4 = $flags$3;
            break;
           }
          }
          $288 = $flags$3 | 2;
          $flags$4 = $288;
         }
        } else {
         $flags$4 = $flags$3;
        }
       } while(0);
       $289 = ((($cffface)) + 12|0);
       HEAP32[$289>>2] = $flags$4;
      }
      $290 = HEAP32[$51>>2]|0;
      $291 = ($290|0)==(65535);
      if ($291) {
       $292 = ((($cffface)) + 8|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = $293 | 512;
       HEAP32[$292>>2] = $294;
      }
      $295 = HEAP32[$51>>2]|0;
      $296 = ($295|0)==(65535);
      $or$cond9 = $165 | $296;
      if (!($or$cond9)) {
       $297 = ((($cffface)) + 8|0);
       $298 = HEAP32[$297>>2]|0;
       $299 = $298 | 4096;
       HEAP32[$297>>2] = $299;
      }
      $300 = ((($cffface)) + 36|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = ($301|0)==(0);
      L106: do {
       if ($302) {
        $nn$0$lcssa = 1;
        label = 83;
       } else {
        $303 = ((($cffface)) + 40|0);
        $304 = HEAP32[$303>>2]|0;
        $nn$019 = 0;
        while(1) {
         $305 = (($304) + ($nn$019<<2)|0);
         $306 = HEAP32[$305>>2]|0;
         $307 = ((($306)) + 8|0);
         $308 = HEAP16[$307>>1]|0;
         $309 = ($308<<16>>16)==(3);
         if ($309) {
          $310 = ((($306)) + 10|0);
          $311 = HEAP16[$310>>1]|0;
          $312 = ($311<<16>>16)==(1);
          if ($312) {
           $nn$1 = $nn$019;
           break L106;
          }
          $$pr = HEAP16[$307>>1]|0;
          $314 = $$pr;
         } else {
          $314 = $308;
         }
         $313 = ($314<<16>>16)==(0);
         if ($313) {
          $nn$1 = $nn$019;
          break L106;
         }
         $315 = (($nn$019) + 1)|0;
         $316 = HEAP32[$300>>2]|0;
         $317 = ($315>>>0)<($316>>>0);
         if ($317) {
          $nn$019 = $315;
         } else {
          $nn$019$lcssa59 = $nn$019;
          break;
         }
        }
        $phitmp = (($nn$019$lcssa59) + 2)|0;
        $nn$0$lcssa = $phitmp;
        label = 83;
       }
      } while(0);
      if ((label|0) == 83) {
       if ($165) {
        $$old10 = ($nn$0$lcssa>>>0)>(15);
        if ($$old10) {
         break;
        }
       } else {
        $318 = HEAP32[$51>>2]|0;
        $319 = ($318|0)!=(65535);
        $320 = ($nn$0$lcssa>>>0)>(15);
        $or$cond11 = $320 | $319;
        if ($or$cond11) {
         break;
        }
       }
       HEAP32[$cmaprec>>2] = $cffface;
       $321 = ((($cmaprec)) + 8|0);
       HEAP16[$321>>1] = 3;
       $322 = ((($cmaprec)) + 10|0);
       HEAP16[$322>>1] = 1;
       $323 = ((($cmaprec)) + 4|0);
       HEAP32[$323>>2] = 1970170211;
       $324 = HEAP32[$300>>2]|0;
       $325 = (_FT_CMap_New(2088,0,$cmaprec,0)|0);
       HEAP32[$error>>2] = $325;
       switch ($325|0) {
       case 0: case 163:  {
        break;
       }
       default: {
        break L1;
       }
       }
       HEAP32[$error>>2] = 0;
       $326 = ((($cffface)) + 92|0);
       $327 = HEAP32[$326>>2]|0;
       $328 = ($327|0)==(0|0);
       if ($328) {
        $329 = HEAP32[$300>>2]|0;
        $330 = ($324|0)==($329|0);
        if ($330) {
         $nn$1 = $324;
        } else {
         $331 = ((($cffface)) + 40|0);
         $332 = HEAP32[$331>>2]|0;
         $333 = (($332) + ($324<<2)|0);
         $334 = HEAP32[$333>>2]|0;
         HEAP32[$326>>2] = $334;
         $nn$1 = $324;
        }
       } else {
        $nn$1 = $324;
       }
      }
      $335 = ($nn$1>>>0)>(15);
      if (!($335)) {
       $336 = ((($39)) + 124|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0);
       if (!($338)) {
        HEAP32[$cmaprec>>2] = $cffface;
        $339 = ((($cmaprec)) + 8|0);
        HEAP16[$339>>1] = 7;
        $340 = ((($39)) + 120|0);
        $341 = HEAP32[$340>>2]|0;
        $342 = ($341|0)==(0);
        do {
         if ($342) {
          $343 = ((($cmaprec)) + 10|0);
          HEAP16[$343>>1] = 0;
          $344 = ((($cmaprec)) + 4|0);
          HEAP32[$344>>2] = 1094995778;
         } else {
          $345 = ($341|0)==(1);
          $346 = ((($cmaprec)) + 10|0);
          if ($345) {
           HEAP16[$346>>1] = 1;
           $347 = ((($cmaprec)) + 4|0);
           HEAP32[$347>>2] = 1094992453;
           break;
          } else {
           HEAP16[$346>>1] = 2;
           $348 = ((($cmaprec)) + 4|0);
           HEAP32[$348>>2] = 1094992451;
           break;
          }
         }
        } while(0);
        $349 = (_FT_CMap_New(2048,0,$cmaprec,0)|0);
        HEAP32[$error>>2] = $349;
       }
      }
     }
    }
   }
  }
 } while(0);
 $350 = HEAP32[$error>>2]|0;
 $$0 = $350;
 STACKTOP = sp;return ($$0|0);
}
function _cff_face_done($cffface) {
 $cffface = $cffface|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($cffface|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($cffface)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($cffface)) + 532|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vi[$7 & 127]($cffface);
 }
 $8 = ((($cffface)) + 692|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 _cff_font_done($9);
 $11 = HEAP32[$8>>2]|0;
 _ft_mem_free($2,$11);
 HEAP32[$8>>2] = 0;
 return;
}
function _cff_driver_init($module) {
 $module = $module|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _cff_driver_done($module) {
 $module = $module|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _cff_size_get_globals_funcs($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 692|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 2952|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_FT_Get_Module($8,88847)|0);
 $10 = ($9|0)!=(0|0);
 $11 = ($4|0)!=(0|0);
 $or$cond = $11 & $10;
 if (!($or$cond)) {
  $15 = 0;
  return ($15|0);
 }
 $12 = HEAP32[$4>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $15 = 0;
  return ($15|0);
 }
 $14 = (FUNCTION_TABLE_ii[$12 & 63]($9)|0);
 $15 = $14;
 return ($15|0);
}
function _cff_make_private_dict($subfont,$priv) {
 $subfont = $subfont|0;
 $priv = $priv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $exitcond = 0, $exitcond22 = 0, $exitcond23 = 0, $exitcond24 = 0, $exitcond25 = 0, $exitcond26 = 0, $n$018 = 0, $n$114 = 0, $n$210 = 0, $n$36 = 0, $n$42 = 0, $n$51 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($priv|0),0,196)|0;
 $0 = ((($subfont)) + 176|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ((($priv)) + 8|0);
 HEAP8[$2>>0] = $1;
 $3 = ($1<<24>>24)==(0);
 if (!($3)) {
  $4 = $1&255;
  $n$018 = 0;
  while(1) {
   $5 = (((($subfont)) + 180|0) + ($n$018<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $6&65535;
   $8 = (((($priv)) + 12|0) + ($n$018<<1)|0);
   HEAP16[$8>>1] = $7;
   $9 = (($n$018) + 1)|0;
   $exitcond26 = ($9|0)==($4|0);
   if ($exitcond26) {
    break;
   } else {
    $n$018 = $9;
   }
  }
 }
 $10 = ((($subfont)) + 177|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ((($priv)) + 9|0);
 HEAP8[$12>>0] = $11;
 $13 = ($11<<24>>24)==(0);
 if (!($13)) {
  $14 = $11&255;
  $n$114 = 0;
  while(1) {
   $15 = (((($subfont)) + 236|0) + ($n$114<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16&65535;
   $18 = (((($priv)) + 40|0) + ($n$114<<1)|0);
   HEAP16[$18>>1] = $17;
   $19 = (($n$114) + 1)|0;
   $exitcond25 = ($19|0)==($14|0);
   if ($exitcond25) {
    break;
   } else {
    $n$114 = $19;
   }
  }
 }
 $20 = ((($subfont)) + 178|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ((($priv)) + 10|0);
 HEAP8[$22>>0] = $21;
 $23 = ($21<<24>>24)==(0);
 if (!($23)) {
  $24 = $21&255;
  $n$210 = 0;
  while(1) {
   $25 = (((($subfont)) + 276|0) + ($n$210<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $26&65535;
   $28 = (((($priv)) + 60|0) + ($n$210<<1)|0);
   HEAP16[$28>>1] = $27;
   $29 = (($n$210) + 1)|0;
   $exitcond24 = ($29|0)==($24|0);
   if ($exitcond24) {
    break;
   } else {
    $n$210 = $29;
   }
  }
 }
 $30 = ((($subfont)) + 179|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ((($priv)) + 11|0);
 HEAP8[$32>>0] = $31;
 $33 = ($31<<24>>24)==(0);
 if (!($33)) {
  $34 = $31&255;
  $n$36 = 0;
  while(1) {
   $35 = (((($subfont)) + 332|0) + ($n$36<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36&65535;
   $38 = (((($priv)) + 88|0) + ($n$36<<1)|0);
   HEAP16[$38>>1] = $37;
   $39 = (($n$36) + 1)|0;
   $exitcond23 = ($39|0)==($34|0);
   if ($exitcond23) {
    break;
   } else {
    $n$36 = $39;
   }
  }
 }
 $40 = ((($subfont)) + 372|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($priv)) + 108|0);
 HEAP32[$42>>2] = $41;
 $43 = ((($subfont)) + 376|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($priv)) + 112|0);
 HEAP32[$45>>2] = $44;
 $46 = ((($subfont)) + 380|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($priv)) + 116|0);
 HEAP32[$48>>2] = $47;
 $49 = ((($subfont)) + 384|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $50&65535;
 $52 = ((($priv)) + 120|0);
 HEAP16[$52>>1] = $51;
 $53 = ((($subfont)) + 388|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54&65535;
 $56 = ((($priv)) + 122|0);
 HEAP16[$56>>1] = $55;
 $57 = ((($subfont)) + 392|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = ((($priv)) + 124|0);
 HEAP8[$59>>0] = $58;
 $60 = ($58<<24>>24)==(0);
 if (!($60)) {
  $61 = $58&255;
  $n$42 = 0;
  while(1) {
   $62 = (((($subfont)) + 396|0) + ($n$42<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63&65535;
   $65 = (((($priv)) + 128|0) + ($n$42<<1)|0);
   HEAP16[$65>>1] = $64;
   $66 = (($n$42) + 1)|0;
   $exitcond22 = ($66|0)==($61|0);
   if ($exitcond22) {
    break;
   } else {
    $n$42 = $66;
   }
  }
 }
 $67 = ((($subfont)) + 393|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = ((($priv)) + 125|0);
 HEAP8[$69>>0] = $68;
 $70 = ($68<<24>>24)==(0);
 if ($70) {
  $77 = ((($subfont)) + 500|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = ((($priv)) + 126|0);
  HEAP8[$79>>0] = $78;
  $80 = ((($subfont)) + 512|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($priv)) + 184|0);
  HEAP32[$82>>2] = $81;
  $83 = ((($subfont)) + 508|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = ((($priv)) + 4|0);
  HEAP32[$85>>2] = $84;
  return;
 }
 $71 = $68&255;
 $n$51 = 0;
 while(1) {
  $72 = (((($subfont)) + 448|0) + ($n$51<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $73&65535;
  $75 = (((($priv)) + 154|0) + ($n$51<<1)|0);
  HEAP16[$75>>1] = $74;
  $76 = (($n$51) + 1)|0;
  $exitcond = ($76|0)==($71|0);
  if ($exitcond) {
   break;
  } else {
   $n$51 = $76;
  }
 }
 $77 = ((($subfont)) + 500|0);
 $78 = HEAP8[$77>>0]|0;
 $79 = ((($priv)) + 126|0);
 HEAP8[$79>>0] = $78;
 $80 = ((($subfont)) + 512|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($priv)) + 184|0);
 HEAP32[$82>>2] = $81;
 $83 = ((($subfont)) + 508|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ((($priv)) + 4|0);
 HEAP32[$85>>2] = $84;
 return;
}
function _remove_subset_prefix($name) {
 $name = $name|0;
 var $$off = 0, $$off$1 = 0, $$off$2 = 0, $$off$3 = 0, $$off$4 = 0, $$off$5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $idx$15 = 0, $indvars$iv$next = 0, $indvars$iv11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($name)|0);
 $1 = (($0) + 1)|0;
 $2 = ((($name)) + 6|0);
 $3 = ((($name)) + 1|0);
 $4 = ((($name)) + 2|0);
 $5 = ((($name)) + 3|0);
 $6 = ((($name)) + 4|0);
 $7 = ((($name)) + 5|0);
 $8 = ($1|0)>(6);
 if ($8) {
  $indvars$iv11 = $1;
 } else {
  return;
 }
 while(1) {
  $9 = HEAP8[$2>>0]|0;
  $10 = ($9<<24>>24)==(43);
  if (!($10)) {
   label = 7;
   break;
  }
  $11 = HEAP8[$name>>0]|0;
  $$off = (($11) + -65)<<24>>24;
  $12 = ($$off&255)<(26);
  $13 = HEAP8[$3>>0]|0;
  $$off$1 = (($13) + -65)<<24>>24;
  $14 = ($$off$1&255)<(26);
  $15 = $14 & $12;
  $16 = HEAP8[$4>>0]|0;
  $$off$2 = (($16) + -65)<<24>>24;
  $17 = ($$off$2&255)<(26);
  $18 = $17 & $15;
  $19 = HEAP8[$5>>0]|0;
  $$off$3 = (($19) + -65)<<24>>24;
  $20 = ($$off$3&255)<(26);
  $21 = $20 & $18;
  $22 = HEAP8[$6>>0]|0;
  $$off$4 = (($22) + -65)<<24>>24;
  $23 = ($$off$4&255)<(26);
  $24 = $23 & $21;
  $25 = HEAP8[$7>>0]|0;
  $$off$5 = (($25) + -65)<<24>>24;
  $26 = ($$off$5&255)<(26);
  $27 = $26 & $24;
  if (!($27)) {
   label = 7;
   break;
  }
  $28 = ($indvars$iv11|0)>(7);
  if ($28) {
   $idx$15 = 7;
   while(1) {
    $29 = (($name) + ($idx$15)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = (($idx$15) + -7)|0;
    $32 = (($name) + ($31)|0);
    HEAP8[$32>>0] = $30;
    $33 = (($idx$15) + 1)|0;
    $exitcond = ($33|0)==($indvars$iv11|0);
    if ($exitcond) {
     break;
    } else {
     $idx$15 = $33;
    }
   }
  }
  $indvars$iv$next = (($indvars$iv11) + -7)|0;
  $34 = ($indvars$iv$next|0)>(6);
  if ($34) {
   $indvars$iv11 = $indvars$iv$next;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return;
 }
}
function _cff_strcpy($memory,$source) {
 $memory = $memory|0;
 $source = $source|0;
 var $0 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (_ft_mem_strdup($memory,$source,$error)|0);
 STACKTOP = sp;return ($0|0);
}
function _remove_style($family_name,$style_name) {
 $family_name = $family_name|0;
 $style_name = $style_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx$010 = 0;
 var $idx$19 = 0, $idx$19$in = 0, $idx$19$in$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($family_name)|0);
 $1 = (_strlen($style_name)|0);
 $2 = ($0|0)>($1|0);
 if (!($2)) {
  return;
 }
 $3 = ($1|0)<(1);
 L4: do {
  if (!($3)) {
   $idx$010 = 1;
   while(1) {
    $6 = (($0) - ($idx$010))|0;
    $7 = (($family_name) + ($6)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = (($1) - ($idx$010))|0;
    $10 = (($style_name) + ($9)|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = ($8<<24>>24)==($11<<24>>24);
    $5 = (($idx$010) + 1)|0;
    if (!($12)) {
     break;
    }
    $4 = ($1|0)<($5|0);
    if ($4) {
     break L4;
    } else {
     $idx$010 = $5;
    }
   }
   return;
  }
 } while(0);
 $13 = (($0) - ($1))|0;
 $14 = ($13|0)>(1);
 if ($14) {
  $idx$19$in = $13;
 } else {
  return;
 }
 L12: while(1) {
  $idx$19 = (($idx$19$in) + -1)|0;
  $15 = (($family_name) + ($idx$19)|0);
  $16 = HEAP8[$15>>0]|0;
  switch ($16<<24>>24) {
  case 43: case 95: case 32: case 45:  {
   break;
  }
  default: {
   $idx$19$in$lcssa = $idx$19$in;
   break L12;
  }
  }
  $17 = ($idx$19|0)>(1);
  if ($17) {
   $idx$19$in = $idx$19;
  } else {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return;
 }
 $18 = (($family_name) + ($idx$19$in$lcssa)|0);
 HEAP8[$18>>0] = 0;
 return;
}
function _cff_get_standard_encoding($charcode) {
 $charcode = $charcode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($charcode>>>0)<(256);
 if (!($0)) {
  $3 = 0;
  return ($3|0);
 }
 $1 = (19372 + ($charcode<<1)|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2;
 return ($3|0);
}
function _cff_index_access_element($idx,$element,$pbytes,$pbyte_len) {
 $idx = $idx|0;
 $element = $element|0;
 $pbytes = $pbytes|0;
 $pbyte_len = $pbyte_len|0;
 var $$0 = 0, $$1 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $error = 0, $off1$0 = 0, $off1$0$ph = 0, $off1$02 = 0;
 var $off1$03 = 0, $off1$04 = 0, $off2$0 = 0, $off2$05 = 0, $off2$1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ($idx|0)==(0|0);
 if (!($0)) {
  $1 = ((($idx)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2>>>0)>($element>>>0);
  if ($3) {
   $4 = HEAP32[$idx>>2]|0;
   $5 = ((($idx)) + 24|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   L4: do {
    if ($7) {
     $8 = ((($idx)) + 12|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = $9&255;
     $11 = Math_imul($10, $element)|0;
     $12 = ((($idx)) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = (($13) + 3)|0;
     $15 = (($14) + ($11))|0;
     $16 = (_FT_Stream_Seek($4,$15)|0);
     HEAP32[$error>>2] = $16;
     $17 = ($16|0)==(0);
     if (!($17)) {
      $71 = HEAP32[$error>>2]|0;
      STACKTOP = sp;return ($71|0);
     }
     $18 = (_cff_index_read_offset($idx,$error)|0);
     $19 = HEAP32[$error>>2]|0;
     $20 = ($19|0)==(0);
     if (!($20)) {
      $71 = HEAP32[$error>>2]|0;
      STACKTOP = sp;return ($71|0);
     }
     $21 = ($18|0)==(0);
     if ($21) {
      label = 13;
     } else {
      $$0 = $element;
      while(1) {
       $22 = (($$0) + 1)|0;
       $23 = (_cff_index_read_offset($idx,$error)|0);
       $24 = ($23|0)==(0);
       if (!($24)) {
        $off1$0 = $18;$off2$0 = $23;
        label = 15;
        break L4;
       }
       $25 = HEAP32[$1>>2]|0;
       $26 = ($22>>>0)<($25>>>0);
       if ($26) {
        $$0 = $22;
       } else {
        $off1$0$ph = $18;
        label = 14;
        break;
       }
      }
     }
    } else {
     $27 = (($6) + ($element<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(0);
     if ($29) {
      label = 13;
     } else {
      $30 = HEAP32[$5>>2]|0;
      $$1 = $element;
      while(1) {
       $31 = (($$1) + 1)|0;
       $32 = (($30) + ($31<<2)|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = ($33|0)==(0);
       if (!($34)) {
        $off1$0 = $28;$off2$0 = $33;
        label = 15;
        break L4;
       }
       $35 = HEAP32[$1>>2]|0;
       $36 = ($31>>>0)<($35>>>0);
       if ($36) {
        $$1 = $31;
       } else {
        $off1$0$ph = $28;
        label = 14;
        break;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 13) {
    $37 = ((($4)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $48 = $38;$72 = $37;$off1$04 = 0;$off2$05 = 0;
    label = 16;
   }
   else if ((label|0) == 14) {
    $39 = ((($4)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $48 = $40;$72 = $39;$off1$04 = $off1$0$ph;$off2$05 = 0;
    label = 16;
   }
   else if ((label|0) == 15) {
    $41 = ((($4)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + 1)|0;
    $44 = ($off2$0>>>0)>($43>>>0);
    if ($44) {
     $52 = $41;$off1$03 = $off1$0;
     label = 17;
    } else {
     $48 = $42;$72 = $41;$off1$04 = $off1$0;$off2$05 = $off2$0;
     label = 16;
    }
   }
   if ((label|0) == 16) {
    $45 = ((($idx)) + 16|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($48) + 1)|0;
    $49 = (($47) - ($off2$05))|0;
    $50 = ($46>>>0)>($49>>>0);
    if ($50) {
     $52 = $72;$off1$03 = $off1$04;
     label = 17;
    } else {
     $off1$02 = $off1$04;$off2$1 = $off2$05;
    }
   }
   if ((label|0) == 17) {
    $51 = HEAP32[$52>>2]|0;
    $53 = ((($idx)) + 16|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($51) + 1)|0;
    $56 = (($55) - ($54))|0;
    $off1$02 = $off1$03;$off2$1 = $56;
   }
   $57 = ($off1$02|0)!=(0);
   $58 = ($off2$1>>>0)>($off1$02>>>0);
   $or$cond = $57 & $58;
   if (!($or$cond)) {
    HEAP32[$pbytes>>2] = 0;
    HEAP32[$pbyte_len>>2] = 0;
    $71 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($71|0);
   }
   $59 = (($off2$1) - ($off1$02))|0;
   HEAP32[$pbyte_len>>2] = $59;
   $60 = ((($idx)) + 28|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0|0);
   if (!($62)) {
    $$sum = (($off1$02) + -1)|0;
    $63 = (($61) + ($$sum)|0);
    HEAP32[$pbytes>>2] = $63;
    $71 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($71|0);
   }
   $64 = ((($idx)) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($off1$02) + -1)|0;
   $67 = (($66) + ($65))|0;
   $68 = (_FT_Stream_Seek($4,$67)|0);
   HEAP32[$error>>2] = $68;
   $69 = ($68|0)==(0);
   if (!($69)) {
    $71 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($71|0);
   }
   $70 = (_FT_Stream_ExtractFrame($4,$59,$pbytes)|0);
   HEAP32[$error>>2] = $70;
   $71 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($71|0);
  }
 }
 HEAP32[$error>>2] = 6;
 $71 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($71|0);
}
function _cff_index_forget_element($idx,$pbytes) {
 $idx = $idx|0;
 $pbytes = $pbytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($idx)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  return;
 }
 $3 = HEAP32[$idx>>2]|0;
 _FT_Stream_ReleaseFrame($3,$pbytes);
 return;
}
function _cff_index_get_name($font,$element) {
 $font = $font|0;
 $element = $element|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byte_len = 0, $bytes = 0, $error = 0, $name$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $bytes = sp + 8|0;
 $byte_len = sp + 4|0;
 $error = sp;
 $0 = ((($font)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_cff_index_access_element($0,$element,$bytes,$byte_len)|0);
 HEAP32[$error>>2] = $4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $name$0 = 0;
  STACKTOP = sp;return ($name$0|0);
 }
 $6 = HEAP32[$byte_len>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = (_ft_mem_alloc($3,$7,$error)|0);
 $9 = HEAP32[$error>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = HEAP32[$bytes>>2]|0;
  $12 = HEAP32[$byte_len>>2]|0;
  _memcpy(($8|0),($11|0),($12|0))|0;
  $13 = HEAP32[$byte_len>>2]|0;
  $14 = (($8) + ($13)|0);
  HEAP8[$14>>0] = 0;
 }
 _cff_index_forget_element($0,$bytes);
 $name$0 = $8;
 STACKTOP = sp;return ($name$0|0);
}
function _cff_index_get_string($font,$element) {
 $font = $font|0;
 $element = $element|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($font)) + 1312|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($element>>>0);
 if (!($2)) {
  $7 = 0;
  return ($7|0);
 }
 $3 = ((($font)) + 1316|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($element<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 return ($7|0);
}
function _cff_index_get_sid_string($font,$sid) {
 $font = $font|0;
 $sid = $sid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sid|0)==(65535);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ($sid>>>0)>(390);
 if ($1) {
  $2 = (($sid) + -391)|0;
  $3 = (_cff_index_get_string($font,$2)|0);
  $$0 = $3;
  return ($$0|0);
 }
 $4 = ((($font)) + 2956|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($5)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 63]($sid)|0);
 $$0 = $9;
 return ($$0|0);
}
function _cff_fd_select_get($fdselect,$glyph_index) {
 $fdselect = $fdselect|0;
 $glyph_index = $glyph_index|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fd$0 = 0, $first$0 = 0, $first$0$lcssa12 = 0, $p$0 = 0, $p$0$lcssa11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$fdselect>>0]|0;
 $1 = $0&255;
 switch ($1|0) {
 case 0:  {
  $2 = ((($fdselect)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($glyph_index)|0);
  $5 = HEAP8[$4>>0]|0;
  $fd$0 = $5;
  return ($fd$0|0);
  break;
 }
 case 3:  {
  $6 = ((($fdselect)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($glyph_index) - ($7))|0;
  $9 = ((($fdselect)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($8>>>0)<($10>>>0);
  if ($11) {
   $12 = ((($fdselect)) + 24|0);
   $13 = HEAP8[$12>>0]|0;
   $fd$0 = $13;
   return ($fd$0|0);
  }
  $14 = ((($fdselect)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($fdselect)) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + ($17)|0);
  $19 = ((($15)) + 2|0);
  $20 = HEAP8[$15>>0]|0;
  $21 = $20&255;
  $22 = $21 << 8;
  $23 = ((($15)) + 1|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $22 | $25;
  $29 = $15;$first$0 = $26;$p$0 = $19;
  while(1) {
   $27 = ($first$0>>>0)>($glyph_index>>>0);
   if ($27) {
    $fd$0 = 0;
    label = 10;
    break;
   }
   $28 = ((($29)) + 5|0);
   $30 = ((($29)) + 3|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $32 << 8;
   $34 = ((($29)) + 4|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = $33 | $36;
   $38 = ($37>>>0)>($glyph_index>>>0);
   if ($38) {
    $$lcssa = $37;$first$0$lcssa12 = $first$0;$p$0$lcssa11 = $p$0;
    label = 8;
    break;
   }
   $42 = ($28>>>0)<($18>>>0);
   if ($42) {
    $29 = $30;$first$0 = $37;$p$0 = $28;
   } else {
    $fd$0 = 0;
    label = 10;
    break;
   }
  }
  if ((label|0) == 8) {
   $39 = HEAP8[$p$0$lcssa11>>0]|0;
   HEAP32[$6>>2] = $first$0$lcssa12;
   $40 = (($$lcssa) - ($first$0$lcssa12))|0;
   HEAP32[$9>>2] = $40;
   $41 = ((($fdselect)) + 24|0);
   HEAP8[$41>>0] = $39;
   $fd$0 = $39;
   return ($fd$0|0);
  }
  else if ((label|0) == 10) {
   return ($fd$0|0);
  }
  break;
 }
 default: {
  $fd$0 = 0;
  return ($fd$0|0);
 }
 }
 return (0)|0;
}
function _cff_charset_cid_to_gindex($charset,$cid) {
 $charset = $charset|0;
 $cid = $cid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($charset)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($cid>>>0);
 if ($2) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $3 = ((($charset)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($cid<<1)|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $result$0 = $7;
 return ($result$0|0);
}
function _cff_font_load($library,$stream,$face_index,$font,$pure_cff) {
 $library = $library|0;
 $stream = $stream|0;
 $face_index = $face_index|0;
 $font = $font|0;
 $pure_cff = $pure_cff|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $fd_index = 0, $idx$03 = 0, $idx$12 = 0, $phitmp = 0, $string_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $error = sp + 64|0;
 $string_index = sp + 32|0;
 $fd_index = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 _memset(($font|0),0,2972)|0;
 ;HEAP32[$string_index>>2]=0|0;HEAP32[$string_index+4>>2]=0|0;HEAP32[$string_index+8>>2]=0|0;HEAP32[$string_index+12>>2]=0|0;HEAP32[$string_index+16>>2]=0|0;HEAP32[$string_index+20>>2]=0|0;HEAP32[$string_index+24>>2]=0|0;HEAP32[$string_index+28>>2]=0|0;
 HEAP32[$font>>2] = $stream;
 $2 = ((($font)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($font)) + 1324|0);
 $4 = (_FT_Stream_Pos($stream)|0);
 $5 = (_FT_Stream_ReadFields($stream,19884,$font)|0);
 HEAP32[$error>>2] = $5;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = ((($font)) + 16|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(1);
   if ($9) {
    $10 = ((($font)) + 18|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = $11&255;
    $13 = ($11&255)<(4);
    if (!($13)) {
     $14 = ((($font)) + 19|0);
     $15 = HEAP8[$14>>0]|0;
     $16 = ($15&255)>(4);
     if (!($16)) {
      $17 = (($12) + -4)|0;
      $18 = (_FT_Stream_Skip($stream,$17)|0);
      HEAP32[$error>>2] = $18;
      $19 = ($18|0)==(0);
      if (!($19)) {
       break;
      }
      $20 = ((($font)) + 20|0);
      $21 = (_cff_index_init($20,$stream,0)|0);
      HEAP32[$error>>2] = $21;
      $22 = ($21|0)==(0);
      if (!($22)) {
       break;
      }
      $23 = ((($font)) + 1208|0);
      $24 = (_cff_index_init($23,$stream,0)|0);
      HEAP32[$error>>2] = $24;
      $25 = ($24|0)==(0);
      if (!($25)) {
       break;
      }
      $26 = (_cff_index_init($string_index,$stream,1)|0);
      HEAP32[$error>>2] = $26;
      $27 = ($26|0)==(0);
      if (!($27)) {
       break;
      }
      $28 = ((($font)) + 84|0);
      $29 = (_cff_index_init($28,$stream,1)|0);
      HEAP32[$error>>2] = $29;
      $30 = ($29|0)==(0);
      if (!($30)) {
       break;
      }
      $31 = ((($font)) + 1316|0);
      $32 = ((($font)) + 1320|0);
      $33 = (_cff_index_get_pointers($string_index,$31,$32)|0);
      HEAP32[$error>>2] = $33;
      $34 = ($33|0)==(0);
      if (!($34)) {
       break;
      }
      $35 = ((($string_index)) + 8|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ((($font)) + 1312|0);
      HEAP32[$37>>2] = $36;
      $38 = ((($font)) + 28|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($font)) + 8|0);
      HEAP32[$40>>2] = $39;
      $41 = ($39|0)>($face_index|0);
      if (!($41)) {
       HEAP32[$error>>2] = 6;
      }
      $42 = ($face_index|0)<(0);
      if ($42) {
       break;
      }
      $43 = (_cff_subfont_load($3,$23,$face_index,$stream,$4,$library)|0);
      HEAP32[$error>>2] = $43;
      $44 = ($43|0)==(0);
      if (!($44)) {
       break;
      }
      $45 = ((($font)) + 1436|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = (($46) + ($4))|0;
      $48 = (_FT_Stream_Seek($stream,$47)|0);
      HEAP32[$error>>2] = $48;
      $49 = ($48|0)==(0);
      if (!($49)) {
       break;
      }
      $50 = ((($font)) + 1176|0);
      $51 = (_cff_index_init($50,$stream,0)|0);
      HEAP32[$error>>2] = $51;
      $52 = ($51|0)==(0);
      if (!($52)) {
       break;
      }
      $53 = ((($font)) + 1456|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ($54|0)==(65535);
      if ($55) {
       $95 = ((($font)) + 1896|0);
       HEAP32[$95>>2] = 0;
      } else {
       $56 = ((($font)) + 1488|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (($57) + ($4))|0;
       $59 = (_FT_Stream_Seek($stream,$58)|0);
       HEAP32[$error>>2] = $59;
       $60 = ($59|0)==(0);
       if (!($60)) {
        break;
       }
       $61 = (_cff_index_init($fd_index,$stream,0)|0);
       HEAP32[$error>>2] = $61;
       $62 = ($61|0)==(0);
       if (!($62)) {
        break;
       }
       $63 = ((($fd_index)) + 8|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = ($64>>>0)>(256);
       L25: do {
        if (!($65)) {
         $66 = ((($font)) + 1896|0);
         HEAP32[$66>>2] = $64;
         $67 = HEAP32[$63>>2]|0;
         $68 = (_ft_mem_realloc($1,572,0,$67,0,$error)|0);
         $69 = HEAP32[$error>>2]|0;
         $70 = ($69|0)==(0);
         if (!($70)) {
          break;
         }
         $71 = HEAP32[$63>>2]|0;
         $72 = ($71|0)==(0);
         do {
          if (!($72)) {
           $73 = HEAP32[$63>>2]|0;
           $idx$03 = 0;
           while(1) {
            $75 = (($68) + (($idx$03*572)|0)|0);
            $76 = (((($font)) + 1900|0) + ($idx$03<<2)|0);
            HEAP32[$76>>2] = $75;
            $77 = (($idx$03) + 1)|0;
            $78 = ($77>>>0)<($73>>>0);
            if ($78) {
             $idx$03 = $77;
            } else {
             break;
            }
           }
           $$pr = HEAP32[$63>>2]|0;
           $74 = ($$pr|0)==(0);
           if ($74) {
            break;
           } else {
            $idx$12 = 0;
           }
           while(1) {
            $82 = (((($font)) + 1900|0) + ($idx$12<<2)|0);
            $83 = HEAP32[$82>>2]|0;
            $84 = (_cff_subfont_load($83,$fd_index,$idx$12,$stream,$4,$library)|0);
            HEAP32[$error>>2] = $84;
            $85 = ($84|0)==(0);
            $81 = (($idx$12) + 1)|0;
            if (!($85)) {
             break L25;
            }
            $79 = HEAP32[$63>>2]|0;
            $80 = ($81>>>0)<($79>>>0);
            if ($80) {
             $idx$12 = $81;
            } else {
             break;
            }
           }
          }
         } while(0);
         $86 = ((($font)) + 2924|0);
         $87 = ((($font)) + 1184|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = ((($font)) + 1492|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = (($90) + ($4))|0;
         $92 = (_CFF_Load_FD_Select($86,$88,$stream,$91)|0);
         HEAP32[$error>>2] = $92;
        }
       } while(0);
       _cff_index_done($fd_index);
       $93 = HEAP32[$error>>2]|0;
       $94 = ($93|0)==(0);
       if (!($94)) {
        break;
       }
      }
      $96 = HEAP32[$45>>2]|0;
      $97 = ($96|0)==(0);
      if ($97) {
       HEAP32[$error>>2] = 3;
       break;
      }
      $98 = ((($font)) + 1184|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ((($font)) + 12|0);
      HEAP32[$100>>2] = $99;
      $101 = ((($font)) + 1308|0);
      $102 = (_cff_index_get_pointers($28,$101,0)|0);
      HEAP32[$error>>2] = $102;
      $103 = ($102|0)==(0);
      if (!($103)) {
       break;
      }
      $104 = HEAP32[$100>>2]|0;
      $105 = ($104|0)==(0);
      do {
       if (!($105)) {
        $106 = HEAP32[$53>>2]|0;
        $107 = ($106|0)==(65535);
        $108 = ($pure_cff<<24>>24)!=(0);
        $phitmp = $108&1;
        $109 = $107 ? 0 : $phitmp;
        $110 = ((($font)) + 1152|0);
        $111 = ((($font)) + 1428|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = (_cff_charset_load($110,$104,$stream,$4,$112,$109)|0);
        HEAP32[$error>>2] = $113;
        $114 = ($113|0)==(0);
        if (!($114)) {
         break L1;
        }
        $115 = HEAP32[$53>>2]|0;
        $116 = ($115|0)==(65535);
        if (!($116)) {
         break;
        }
        $117 = ((($font)) + 116|0);
        $118 = HEAP32[$100>>2]|0;
        $119 = ((($font)) + 1432|0);
        $120 = HEAP32[$119>>2]|0;
        $121 = (_cff_encoding_load($117,$110,$118,$stream,$4,$120)|0);
        HEAP32[$error>>2] = $121;
        $122 = ($121|0)==(0);
        if (!($122)) {
         break L1;
        }
       }
      } while(0);
      $123 = (_cff_index_get_name($font,$face_index)|0);
      $124 = ((($font)) + 1304|0);
      HEAP32[$124>>2] = $123;
      break;
     }
    }
   }
   HEAP32[$error>>2] = 2;
  }
 } while(0);
 _cff_index_done($string_index);
 $125 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($125|0);
}
function _cff_font_done($font) {
 $font = $font|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($font)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($font)) + 84|0);
 _cff_index_done($2);
 $3 = ((($font)) + 1208|0);
 _cff_index_done($3);
 $4 = ((($font)) + 20|0);
 _cff_index_done($4);
 $5 = ((($font)) + 1176|0);
 _cff_index_done($5);
 $6 = ((($font)) + 1896|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = HEAP32[$6>>2]|0;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $idx$01 = 0;
   while(1) {
    $11 = (((($font)) + 1900|0) + ($idx$01<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    _cff_subfont_done($1,$12);
    $13 = (($idx$01) + 1)|0;
    $14 = HEAP32[$6>>2]|0;
    $15 = ($13>>>0)<($14>>>0);
    if ($15) {
     $idx$01 = $13;
    } else {
     break;
    }
   }
  }
  $16 = ((($font)) + 1900|0);
  $17 = HEAP32[$16>>2]|0;
  _ft_mem_free($1,$17);
  HEAP32[$16>>2] = 0;
 }
 $18 = ((($font)) + 116|0);
 _cff_encoding_done($18);
 $19 = ((($font)) + 1152|0);
 $20 = HEAP32[$font>>2]|0;
 _cff_charset_done($19,$20);
 $21 = ((($font)) + 1324|0);
 _cff_subfont_done($1,$21);
 $22 = ((($font)) + 2924|0);
 $23 = HEAP32[$font>>2]|0;
 _CFF_Done_FD_Select($22,$23);
 $24 = ((($font)) + 2960|0);
 $25 = HEAP32[$24>>2]|0;
 _ft_mem_free($1,$25);
 HEAP32[$24>>2] = 0;
 $26 = ((($font)) + 1304|0);
 $27 = HEAP32[$26>>2]|0;
 _ft_mem_free($1,$27);
 HEAP32[$26>>2] = 0;
 $28 = ((($font)) + 1308|0);
 $29 = HEAP32[$28>>2]|0;
 _ft_mem_free($1,$29);
 HEAP32[$28>>2] = 0;
 $30 = ((($font)) + 1316|0);
 $31 = HEAP32[$30>>2]|0;
 _ft_mem_free($1,$31);
 HEAP32[$30>>2] = 0;
 $32 = ((($font)) + 1320|0);
 $33 = HEAP32[$32>>2]|0;
 _ft_mem_free($1,$33);
 HEAP32[$32>>2] = 0;
 return;
}
function _cff_index_read_offset($idx,$errorp) {
 $idx = $idx|0;
 $errorp = $errorp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nn$02 = 0, $result$01 = 0, $result$1 = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp = sp;
 $0 = HEAP32[$idx>>2]|0;
 $1 = ((($idx)) + 12|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (_FT_Stream_Read($0,$tmp,$3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP8[$1>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $result$1 = 0;
  } else {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $nn$02 = 0;$result$01 = 0;
   while(1) {
    $10 = $result$01 << 8;
    $11 = (($tmp) + ($nn$02)|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = $13 | $10;
    $15 = (($nn$02) + 1)|0;
    $16 = ($15|0)<($9|0);
    if ($16) {
     $nn$02 = $15;$result$01 = $14;
    } else {
     $result$1 = $14;
     break;
    }
   }
  }
 } else {
  $result$1 = 0;
 }
 HEAP32[$errorp>>2] = $4;
 STACKTOP = sp;return ($result$1|0);
}
function _cff_index_init($idx,$stream,$load) {
 $idx = $idx|0;
 $stream = $stream|0;
 $load = $load|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 ;HEAP32[$idx>>2]=0|0;HEAP32[$idx+4>>2]=0|0;HEAP32[$idx+8>>2]=0|0;HEAP32[$idx+12>>2]=0|0;HEAP32[$idx+16>>2]=0|0;HEAP32[$idx+20>>2]=0|0;HEAP32[$idx+24>>2]=0|0;HEAP32[$idx+28>>2]=0|0;
 HEAP32[$idx>>2] = $stream;
 $2 = (_FT_Stream_Pos($stream)|0);
 $3 = ((($idx)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = (_FT_Stream_ReadUShort($stream,$error)|0);
 $5 = HEAP32[$error>>2]|0;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $4&65535;
   $8 = ($4<<16>>16)==(0);
   do {
    if ($8) {
     $$pr = HEAP32[$error>>2]|0;
     $37 = $$pr;
    } else {
     $9 = (_FT_Stream_ReadChar($stream,$error)|0);
     $10 = HEAP32[$error>>2]|0;
     $11 = ($10|0)==(0);
     if (!($11)) {
      break L1;
     }
     $12 = $9&255;
     $13 = (($9) + -1)<<24>>24;
     $14 = ($13&255)>(3);
     if ($14) {
      HEAP32[$error>>2] = 8;
      break L1;
     }
     $15 = ((($idx)) + 8|0);
     HEAP32[$15>>2] = $7;
     $16 = ((($idx)) + 12|0);
     HEAP8[$16>>0] = $9;
     $17 = (($7) + 1)|0;
     $18 = Math_imul($12, $17)|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = (($18) + 3)|0;
     $21 = (($20) + ($19))|0;
     $22 = ((($idx)) + 16|0);
     HEAP32[$22>>2] = $21;
     $23 = Math_imul($12, $7)|0;
     $24 = (_FT_Stream_Skip($stream,$23)|0);
     HEAP32[$error>>2] = $24;
     $25 = ($24|0)==(0);
     if (!($25)) {
      break L1;
     }
     $26 = (_cff_index_read_offset($idx,$error)|0);
     $27 = HEAP32[$error>>2]|0;
     $28 = ($27|0)==(0);
     if (!($28)) {
      break L1;
     }
     $29 = ($26|0)==(0);
     if ($29) {
      HEAP32[$error>>2] = 8;
      break L1;
     }
     $30 = (($26) + -1)|0;
     $31 = ((($idx)) + 20|0);
     HEAP32[$31>>2] = $30;
     $32 = ($load<<24>>24)==(0);
     if ($32) {
      $35 = (_FT_Stream_Skip($stream,$30)|0);
      HEAP32[$error>>2] = $35;
      $37 = $35;
      break;
     } else {
      $33 = ((($idx)) + 28|0);
      $34 = (_FT_Stream_ExtractFrame($stream,$30,$33)|0);
      HEAP32[$error>>2] = $34;
      $37 = $34;
      break;
     }
    }
   } while(0);
   $36 = ($37|0)==(0);
   if ($36) {
    $40 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($40|0);
   }
  }
 } while(0);
 $38 = ((($idx)) + 24|0);
 $39 = HEAP32[$38>>2]|0;
 _ft_mem_free($1,$39);
 HEAP32[$38>>2] = 0;
 $40 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function _cff_index_get_pointers($idx,$table,$pool) {
 $idx = $idx|0;
 $table = $table|0;
 $pool = $pool|0;
 var $$ = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $cur_offset$03 = 0, $error = 0, $extra$04 = 0, $extra$1 = 0, $n$02 = 0, $new_bytes$0 = 0, $new_bytes$0$ = 0, $next_offset$0 = 0, $or$cond = 0, $or$cond1 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = HEAP32[$idx>>2]|0;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$table>>2] = 0;
 $3 = ((($idx)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (_cff_index_load_offsets($idx)|0);
  HEAP32[$error>>2] = $6;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $62 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($62|0);
  }
 }
 $8 = ((($idx)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $62 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($62|0);
 }
 $11 = (($9) + 1)|0;
 $12 = (_ft_mem_realloc($2,4,0,$11,0,$error)|0);
 $13 = HEAP32[$error>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $62 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($62|0);
 }
 $15 = ($pool|0)!=(0|0);
 if ($15) {
  $16 = ((($idx)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$8>>2]|0;
  $19 = (($18) + ($17))|0;
  $20 = (_ft_mem_alloc($2,$19,$error)|0);
  $21 = HEAP32[$error>>2]|0;
  $22 = ($21|0)==(0);
  if ($22) {
   $new_bytes$0 = $20;
  } else {
   $62 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($62|0);
  }
 } else {
  $new_bytes$0 = 0;
 }
 $23 = ((($idx)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$3>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + -1)|0;
 $28 = ((($idx)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27>>>0)>=($29>>>0);
 $$ = $30 ? 0 : $27;
 $new_bytes$0$ = $15 ? $new_bytes$0 : $24;
 $storemerge = (($new_bytes$0$) + ($$)|0);
 HEAP32[$12>>2] = $storemerge;
 $31 = HEAP32[$8>>2]|0;
 $32 = ($31|0)==(0);
 if (!($32)) {
  $42 = $31;$cur_offset$03 = $$;$extra$04 = 0;$n$02 = 1;
  while(1) {
   $33 = HEAP32[$3>>2]|0;
   $34 = (($33) + ($n$02<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + -1)|0;
   $37 = ($36|0)==(0);
   $38 = ($36>>>0)<($cur_offset$03>>>0);
   $or$cond = $37 | $38;
   if ($or$cond) {
    label = 10;
   } else {
    $39 = HEAP32[$28>>2]|0;
    $40 = ($36>>>0)>=($39>>>0);
    $41 = ($n$02>>>0)<($42>>>0);
    $or$cond1 = $41 & $40;
    if ($or$cond1) {
     label = 10;
    } else {
     $next_offset$0 = $36;
    }
   }
   if ((label|0) == 10) {
    label = 0;
    $next_offset$0 = $cur_offset$03;
   }
   if ($15) {
    $$sum = (($next_offset$0) + ($extra$04))|0;
    $45 = (($new_bytes$0) + ($$sum)|0);
    $46 = (($12) + ($n$02<<2)|0);
    HEAP32[$46>>2] = $45;
    $47 = ($next_offset$0|0)==($cur_offset$03|0);
    if ($47) {
     $extra$1 = $extra$04;
    } else {
     $48 = (($n$02) + -1)|0;
     $49 = (($12) + ($48<<2)|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (($24) + ($cur_offset$03)|0);
     $52 = $45;
     $53 = $50;
     $54 = (($52) - ($53))|0;
     _memcpy(($50|0),($51|0),($54|0))|0;
     $55 = HEAP32[$46>>2]|0;
     HEAP8[$55>>0] = 0;
     $56 = HEAP32[$46>>2]|0;
     $57 = ((($56)) + 1|0);
     HEAP32[$46>>2] = $57;
     $58 = (($extra$04) + 1)|0;
     $extra$1 = $58;
    }
   } else {
    $43 = (($24) + ($next_offset$0)|0);
    $44 = (($12) + ($n$02<<2)|0);
    HEAP32[$44>>2] = $43;
    $extra$1 = $extra$04;
   }
   $59 = (($n$02) + 1)|0;
   $60 = HEAP32[$8>>2]|0;
   $61 = ($59>>>0)>($60>>>0);
   if ($61) {
    break;
   } else {
    $42 = $60;$cur_offset$03 = $next_offset$0;$extra$04 = $extra$1;$n$02 = $59;
   }
  }
 }
 HEAP32[$table>>2] = $12;
 if (!($15)) {
  $62 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($62|0);
 }
 HEAP32[$pool>>2] = $new_bytes$0;
 $62 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($62|0);
}
function _cff_subfont_load($font,$idx,$font_index,$stream,$base_offset,$library) {
 $font = $font|0;
 $idx = $idx|0;
 $font_index = $font_index|0;
 $stream = $stream|0;
 $base_offset = $base_offset|0;
 $library = $library|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $dict = 0, $dict_len = 0, $error$2 = 0, $parser = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0;
 $parser = sp + 8|0;
 $dict = sp + 4|0;
 $dict_len = sp;
 HEAP32[$dict>>2] = 0;
 _cff_parser_init($parser,4096,$font,$library);
 _memset(($font|0),0,172)|0;
 $0 = ((($font)) + 32|0);
 HEAP32[$0>>2] = -6553600;
 $1 = ((($font)) + 36|0);
 HEAP32[$1>>2] = 3276800;
 $2 = ((($font)) + 44|0);
 HEAP32[$2>>2] = 2;
 $3 = ((($font)) + 48|0);
 HEAP32[$3>>2] = 65536;
 $4 = ((($font)) + 60|0);
 HEAP32[$4>>2] = 65536;
 $5 = ((($font)) + 156|0);
 HEAP32[$5>>2] = 8720;
 HEAP32[$font>>2] = 65535;
 $6 = ((($font)) + 4|0);
 HEAP32[$6>>2] = 65535;
 $7 = ((($font)) + 8|0);
 HEAP32[$7>>2] = 65535;
 $8 = ((($font)) + 12|0);
 HEAP32[$8>>2] = 65535;
 $9 = ((($font)) + 16|0);
 HEAP32[$9>>2] = 65535;
 $10 = ((($font)) + 20|0);
 HEAP32[$10>>2] = 65535;
 $11 = ((($font)) + 128|0);
 HEAP32[$11>>2] = 65535;
 $12 = ((($font)) + 132|0);
 HEAP32[$12>>2] = 65535;
 $13 = ((($font)) + 136|0);
 HEAP32[$13>>2] = 65535;
 $14 = ((($font)) + 172|0);
 HEAP32[$14>>2] = 65535;
 $15 = (_cff_index_access_element($idx,$font_index,$dict,$dict_len)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  _cff_index_forget_element($idx,$dict);
  $error$2 = $15;
  STACKTOP = sp;return ($error$2|0);
 }
 $17 = HEAP32[$dict>>2]|0;
 $18 = HEAP32[$dict_len>>2]|0;
 $19 = (($17) + ($18)|0);
 $20 = (_cff_parser_run($parser,$17,$19)|0);
 _cff_index_forget_element($idx,$dict);
 $21 = ($20|0)==(0);
 if (!($21)) {
  $error$2 = $20;
  STACKTOP = sp;return ($error$2|0);
 }
 $22 = HEAP32[$12>>2]|0;
 $23 = ($22|0)==(65535);
 if (!($23)) {
  $error$2 = 0;
  STACKTOP = sp;return ($error$2|0);
 }
 $24 = ((($font)) + 116|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0);
 do {
  if (!($26)) {
   $27 = ((($font)) + 120|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0);
   if (!($29)) {
    $30 = ((($font)) + 176|0);
    _memset(($30|0),0,360)|0;
    $31 = ((($font)) + 376|0);
    HEAP32[$31>>2] = 7;
    $32 = ((($font)) + 380|0);
    HEAP32[$32>>2] = 1;
    $33 = ((($font)) + 508|0);
    HEAP32[$33>>2] = -1;
    $34 = ((($font)) + 516|0);
    HEAP32[$34>>2] = 3932;
    $35 = ((($font)) + 372|0);
    HEAP32[$35>>2] = 2596864;
    _cff_parser_init($parser,8192,$30,$library);
    $36 = HEAP32[$24>>2]|0;
    $37 = (($36) + ($base_offset))|0;
    $38 = (_FT_Stream_Seek($stream,$37)|0);
    $39 = ($38|0)==(0);
    if (!($39)) {
     $error$2 = $38;
     STACKTOP = sp;return ($error$2|0);
    }
    $40 = HEAP32[$27>>2]|0;
    $41 = (_FT_Stream_EnterFrame($stream,$40)|0);
    $42 = ($41|0)==(0);
    if (!($42)) {
     $error$2 = $41;
     STACKTOP = sp;return ($error$2|0);
    }
    $43 = ((($stream)) + 32|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ((($stream)) + 36|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (_cff_parser_run($parser,$44,$46)|0);
    _FT_Stream_ExitFrame($stream);
    $48 = ($47|0)==(0);
    if ($48) {
     $49 = HEAP8[$30>>0]|0;
     $50 = $49&255;
     $51 = $50 & 254;
     $52 = $51&255;
     HEAP8[$30>>0] = $52;
     break;
    } else {
     $error$2 = $47;
     STACKTOP = sp;return ($error$2|0);
    }
   }
  }
 } while(0);
 $53 = ((($font)) + 524|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)==(0);
 if ($55) {
  $error$2 = 0;
  STACKTOP = sp;return ($error$2|0);
 }
 $56 = HEAP32[$24>>2]|0;
 $57 = (($54) + ($base_offset))|0;
 $58 = (($57) + ($56))|0;
 $59 = (_FT_Stream_Seek($stream,$58)|0);
 $60 = ($59|0)==(0);
 if (!($60)) {
  $error$2 = $59;
  STACKTOP = sp;return ($error$2|0);
 }
 $61 = ((($font)) + 536|0);
 $62 = (_cff_index_init($61,$stream,1)|0);
 $63 = ($62|0)==(0);
 if (!($63)) {
  $error$2 = $62;
  STACKTOP = sp;return ($error$2|0);
 }
 $64 = ((($font)) + 568|0);
 $65 = (_cff_index_get_pointers($61,$64,0)|0);
 $error$2 = $65;
 STACKTOP = sp;return ($error$2|0);
}
function _CFF_Load_FD_Select($fdselect,$num_glyphs,$stream,$offset) {
 $fdselect = $fdselect|0;
 $num_glyphs = $num_glyphs|0;
 $stream = $stream|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (_FT_Stream_Seek($stream,$offset)|0);
 HEAP32[$error>>2] = $0;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $2 = (_FT_Stream_ReadChar($stream,$error)|0);
   $3 = HEAP32[$error>>2]|0;
   $4 = ($3|0)==(0);
   if ($4) {
    HEAP8[$fdselect>>0] = $2;
    $5 = ((($fdselect)) + 20|0);
    HEAP32[$5>>2] = 0;
    $6 = $2&255;
    switch ($6|0) {
    case 0:  {
     $7 = ((($fdselect)) + 12|0);
     HEAP32[$7>>2] = $num_glyphs;
     break;
    }
    case 3:  {
     $8 = (_FT_Stream_ReadUShort($stream,$error)|0);
     $9 = HEAP32[$error>>2]|0;
     $10 = ($9|0)==(0);
     if (!($10)) {
      break L1;
     }
     $11 = $8&65535;
     $12 = ($11*3)|0;
     $13 = (($12) + 2)|0;
     $14 = ((($fdselect)) + 12|0);
     HEAP32[$14>>2] = $13;
     break;
    }
    default: {
     HEAP32[$error>>2] = 3;
     break L1;
    }
    }
    $15 = ((($fdselect)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($fdselect)) + 8|0);
    $18 = (_FT_Stream_ExtractFrame($stream,$16,$17)|0);
    HEAP32[$error>>2] = $18;
   }
  }
 } while(0);
 $19 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($19|0);
}
function _cff_index_done($idx) {
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$idx>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($idx)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _FT_Stream_ReleaseFrame($0,$4);
 }
 $7 = ((($idx)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 _ft_mem_free($3,$8);
 ;HEAP32[$idx>>2]=0|0;HEAP32[$idx+4>>2]=0|0;HEAP32[$idx+8>>2]=0|0;HEAP32[$idx+12>>2]=0|0;HEAP32[$idx+16>>2]=0|0;HEAP32[$idx+20>>2]=0|0;HEAP32[$idx+24>>2]=0|0;HEAP32[$idx+28>>2]=0|0;
 return;
}
function _cff_charset_load($charset,$num_glyphs,$stream,$base_offset,$offset,$invert) {
 $charset = $charset|0;
 $num_glyphs = $num_glyphs|0;
 $stream = $stream|0;
 $base_offset = $base_offset|0;
 $offset = $offset|0;
 $invert = $invert|0;
 var $$nleft$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $error = 0, $exitcond = 0, $exitcond10 = 0, $glyph_sid$03 = 0, $i$05 = 0, $j$01 = 0, $j$18 = 0, $j$2$lcssa = 0, $j$24 = 0, $nleft$0 = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = ($offset>>>0)>(2);
 L1: do {
  if ($2) {
   $3 = (($offset) + ($base_offset))|0;
   $4 = ((($charset)) + 4|0);
   HEAP32[$4>>2] = $3;
   $5 = (_FT_Stream_Seek($stream,$3)|0);
   HEAP32[$error>>2] = $5;
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = (_FT_Stream_ReadChar($stream,$error)|0);
    $8 = $7&255;
    HEAP32[$charset>>2] = $8;
    $9 = HEAP32[$error>>2]|0;
    $10 = ($9|0)==(0);
    if ($10) {
     $11 = (_ft_mem_realloc($1,2,0,$num_glyphs,0,$error)|0);
     $12 = ((($charset)) + 8|0);
     HEAP32[$12>>2] = $11;
     $13 = HEAP32[$error>>2]|0;
     $14 = ($13|0)==(0);
     if ($14) {
      HEAP16[$11>>1] = 0;
      $15 = HEAP32[$charset>>2]|0;
      switch ($15|0) {
      case 0:  {
       $17 = ($num_glyphs|0)==(0);
       if ($17) {
        label = 36;
        break L1;
       }
       $18 = $num_glyphs << 1;
       $19 = (($18) + -2)|0;
       $20 = (_FT_Stream_EnterFrame($stream,$19)|0);
       HEAP32[$error>>2] = $20;
       $21 = ($20|0)==(0);
       if (!($21)) {
        break L1;
       }
       $22 = ($num_glyphs>>>0)>(1);
       if ($22) {
        $j$01 = 1;
        while(1) {
         $23 = (_FT_Stream_GetUShort($stream)|0);
         $24 = HEAP32[$12>>2]|0;
         $25 = (($24) + ($j$01<<1)|0);
         HEAP16[$25>>1] = $23;
         $26 = (($j$01) + 1)|0;
         $exitcond = ($26|0)==($num_glyphs|0);
         if ($exitcond) {
          break;
         } else {
          $j$01 = $26;
         }
        }
       }
       _FT_Stream_ExitFrame($stream);
       label = 36;
       break L1;
       break;
      }
      case 2: case 1:  {
       $16 = ($num_glyphs>>>0)>(1);
       if ($16) {
        $j$18 = 1;
       } else {
        label = 36;
        break L1;
       }
       while(1) {
        $29 = (_FT_Stream_ReadUShort($stream,$error)|0);
        $30 = HEAP32[$error>>2]|0;
        $31 = ($30|0)==(0);
        if (!($31)) {
         break L1;
        }
        $32 = HEAP32[$charset>>2]|0;
        $33 = ($32|0)==(2);
        if ($33) {
         $34 = (_FT_Stream_ReadUShort($stream,$error)|0);
         $35 = $34&65535;
         $36 = HEAP32[$error>>2]|0;
         $37 = ($36|0)==(0);
         if ($37) {
          $nleft$0 = $35;
         } else {
          break L1;
         }
        } else {
         $38 = (_FT_Stream_ReadChar($stream,$error)|0);
         $39 = $38&255;
         $40 = HEAP32[$error>>2]|0;
         $41 = ($40|0)==(0);
         if ($41) {
          $nleft$0 = $39;
         } else {
          break L1;
         }
        }
        $42 = $29&65535;
        $43 = ($j$18>>>0)<($num_glyphs>>>0);
        if ($43) {
         $44 = $nleft$0 ^ 65535;
         $45 = ($42>>>0)>($44>>>0);
         $46 = $42 ^ 65535;
         $$nleft$0 = $45 ? $46 : $nleft$0;
         $47 = HEAP32[$12>>2]|0;
         $48 = (($j$18) - ($num_glyphs))|0;
         $49 = $$nleft$0 ^ -1;
         $50 = ($48>>>0)>($49>>>0);
         $umax = $50 ? $48 : $49;
         $51 = (0 - ($umax))|0;
         $glyph_sid$03 = $29;$i$05 = 0;$j$24 = $j$18;
         while(1) {
          $52 = (($47) + ($j$24<<1)|0);
          HEAP16[$52>>1] = $glyph_sid$03;
          $53 = (($i$05) + 1)|0;
          $54 = (($j$24) + 1)|0;
          $55 = (($glyph_sid$03) + 1)<<16>>16;
          $exitcond10 = ($53|0)==($51|0);
          if ($exitcond10) {
           break;
          } else {
           $glyph_sid$03 = $55;$i$05 = $53;$j$24 = $54;
          }
         }
         $27 = (($j$18) - ($umax))|0;
         $j$2$lcssa = $27;
        } else {
         $j$2$lcssa = $j$18;
        }
        $28 = ($j$2$lcssa>>>0)<($num_glyphs>>>0);
        if ($28) {
         $j$18 = $j$2$lcssa;
        } else {
         label = 36;
         break;
        }
       }
       break;
      }
      default: {
       HEAP32[$error>>2] = 3;
       break L1;
      }
      }
     }
    }
   }
  } else {
   $56 = ((($charset)) + 4|0);
   HEAP32[$56>>2] = $offset;
   switch ($offset|0) {
   case 0:  {
    $57 = ($num_glyphs>>>0)>(229);
    if ($57) {
     HEAP32[$error>>2] = 3;
     break L1;
    }
    $58 = (_ft_mem_realloc($1,2,0,$num_glyphs,0,$error)|0);
    $59 = ((($charset)) + 8|0);
    HEAP32[$59>>2] = $58;
    $60 = HEAP32[$error>>2]|0;
    $61 = ($60|0)==(0);
    if (!($61)) {
     break L1;
    }
    $62 = $num_glyphs << 1;
    _memcpy(($58|0),(20420|0),($62|0))|0;
    label = 36;
    break L1;
    break;
   }
   case 1:  {
    $63 = ($num_glyphs>>>0)>(166);
    if ($63) {
     HEAP32[$error>>2] = 3;
     break L1;
    }
    $64 = (_ft_mem_realloc($1,2,0,$num_glyphs,0,$error)|0);
    $65 = ((($charset)) + 8|0);
    HEAP32[$65>>2] = $64;
    $66 = HEAP32[$error>>2]|0;
    $67 = ($66|0)==(0);
    if (!($67)) {
     break L1;
    }
    $68 = $num_glyphs << 1;
    _memcpy(($64|0),(20878|0),($68|0))|0;
    label = 36;
    break L1;
    break;
   }
   case 2:  {
    $69 = ($num_glyphs>>>0)>(87);
    if ($69) {
     HEAP32[$error>>2] = 3;
     break L1;
    }
    $70 = (_ft_mem_realloc($1,2,0,$num_glyphs,0,$error)|0);
    $71 = ((($charset)) + 8|0);
    HEAP32[$71>>2] = $70;
    $72 = HEAP32[$error>>2]|0;
    $73 = ($72|0)==(0);
    if (!($73)) {
     break L1;
    }
    $74 = $num_glyphs << 1;
    _memcpy(($70|0),(21210|0),($74|0))|0;
    label = 36;
    break L1;
    break;
   }
   default: {
    HEAP32[$error>>2] = 3;
    break L1;
   }
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $75 = ($invert<<24>>24)==(0);
  if ($75) {
   $$pr = HEAP32[$error>>2]|0;
   $78 = $$pr;
  } else {
   $76 = (_cff_charset_compute_cids($charset,$num_glyphs,$1)|0);
   HEAP32[$error>>2] = $76;
   $78 = $76;
  }
  $77 = ($78|0)==(0);
  if ($77) {
   $83 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($83|0);
  }
 }
 $79 = ((($charset)) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 _ft_mem_free($1,$80);
 HEAP32[$79>>2] = 0;
 $81 = ((($charset)) + 12|0);
 $82 = HEAP32[$81>>2]|0;
 _ft_mem_free($1,$82);
 ;HEAP32[$charset>>2]=0|0;HEAP32[$charset+4>>2]=0|0;HEAP32[$charset+8>>2]=0|0;HEAP32[$charset+12>>2]=0|0;
 $83 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($83|0);
}
function _cff_encoding_load($encoding,$charset,$num_glyphs,$stream,$base_offset,$offset) {
 $encoding = $encoding|0;
 $charset = $charset|0;
 $num_glyphs = $num_glyphs|0;
 $stream = $stream|0;
 $base_offset = $base_offset|0;
 $offset = $offset|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $exitcond = 0;
 var $exitcond30 = 0, $exitcond31 = 0, $gindex$09 = 0, $gindex$09$lcssa = 0, $glyph_code$017 = 0, $i$022 = 0, $j$028 = 0, $j$114 = 0, $j$221 = 0, $j$310 = 0, $j$426 = 0, $k$018 = 0, $or$cond = 0, $or$cond37 = 0, $p$015 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($charset)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   HEAP32[$error>>2] = 3;
  } else {
   $j$028 = 0;
   while(1) {
    $3 = (((($encoding)) + 12|0) + ($j$028<<1)|0);
    HEAP16[$3>>1] = 0;
    $4 = (((($encoding)) + 524|0) + ($j$028<<1)|0);
    HEAP16[$4>>1] = 0;
    $5 = (($j$028) + 1)|0;
    $exitcond31 = ($5|0)==(256);
    if ($exitcond31) {
     break;
    } else {
     $j$028 = $5;
    }
   }
   $6 = ($offset>>>0)>(1);
   if (!($6)) {
    switch ($offset|0) {
    case 0:  {
     $98 = ((($encoding)) + 12|0);
     _memcpy(($98|0),(19372|0),512)|0;
     break;
    }
    case 1:  {
     $99 = ((($encoding)) + 12|0);
     _memcpy(($99|0),(19908|0),512)|0;
     break;
    }
    default: {
     HEAP32[$error>>2] = 3;
     break L1;
    }
    }
    $100 = ((($encoding)) + 8|0);
    HEAP32[$100>>2] = 0;
    $101 = ((($stream)) + 28|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = (_cff_charset_compute_cids($charset,$num_glyphs,$102)|0);
    HEAP32[$error>>2] = $103;
    $104 = ($103|0)==(0);
    if ($104) {
     $j$426 = 0;
    } else {
     break;
    }
    while(1) {
     $105 = (((($encoding)) + 12|0) + ($j$426<<1)|0);
     $106 = HEAP16[$105>>1]|0;
     $107 = ($106<<16>>16)==(0);
     if ($107) {
      label = 48;
     } else {
      $108 = $106&65535;
      $109 = (_cff_charset_cid_to_gindex($charset,$108)|0);
      $110 = ($109|0)==(0);
      if ($110) {
       label = 48;
      } else {
       $111 = $109&65535;
       $112 = (((($encoding)) + 524|0) + ($j$426<<1)|0);
       HEAP16[$112>>1] = $111;
       $113 = (($j$426) + 1)|0;
       HEAP32[$100>>2] = $113;
      }
     }
     if ((label|0) == 48) {
      label = 0;
      $114 = (((($encoding)) + 524|0) + ($j$426<<1)|0);
      HEAP16[$114>>1] = 0;
      HEAP16[$105>>1] = 0;
     }
     $115 = (($j$426) + 1)|0;
     $exitcond30 = ($115|0)==(256);
     if ($exitcond30) {
      break L1;
     } else {
      $j$426 = $115;
     }
    }
   }
   $7 = (($offset) + ($base_offset))|0;
   $8 = ((($encoding)) + 4|0);
   HEAP32[$8>>2] = $7;
   $9 = (_FT_Stream_Seek($stream,$7)|0);
   HEAP32[$error>>2] = $9;
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = (_FT_Stream_ReadChar($stream,$error)|0);
    $12 = $11&255;
    HEAP32[$encoding>>2] = $12;
    $13 = HEAP32[$error>>2]|0;
    $14 = ($13|0)==(0);
    if ($14) {
     $15 = (_FT_Stream_ReadChar($stream,$error)|0);
     $16 = $15&255;
     $17 = HEAP32[$error>>2]|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $19 = HEAP32[$encoding>>2]|0;
      $20 = $19 & 127;
      switch ($20|0) {
      case 0:  {
       $21 = (($16) + 1)|0;
       $22 = ((($encoding)) + 8|0);
       HEAP32[$22>>2] = $21;
       $23 = (_FT_Stream_EnterFrame($stream,$16)|0);
       HEAP32[$error>>2] = $23;
       $24 = ($23|0)==(0);
       if (!($24)) {
        break L1;
       }
       $25 = ($15<<24>>24)==(0);
       if (!($25)) {
        $26 = ((($stream)) + 32|0);
        $27 = HEAP32[$26>>2]|0;
        $j$114 = 1;$p$015 = $27;
        while(1) {
         $28 = ((($p$015)) + 1|0);
         $29 = HEAP8[$p$015>>0]|0;
         $30 = $29&255;
         $31 = ($j$114>>>0)<($num_glyphs>>>0);
         if ($31) {
          $32 = $j$114&65535;
          $33 = (((($encoding)) + 524|0) + ($30<<1)|0);
          HEAP16[$33>>1] = $32;
          $34 = HEAP32[$0>>2]|0;
          $35 = (($34) + ($j$114<<1)|0);
          $36 = HEAP16[$35>>1]|0;
          $37 = (((($encoding)) + 12|0) + ($30<<1)|0);
          HEAP16[$37>>1] = $36;
         }
         $38 = (($j$114) + 1)|0;
         $39 = ($38>>>0)>($16>>>0);
         if ($39) {
          break;
         } else {
          $j$114 = $38;$p$015 = $28;
         }
        }
       }
       _FT_Stream_ExitFrame($stream);
       break;
      }
      case 1:  {
       $40 = ((($encoding)) + 8|0);
       HEAP32[$40>>2] = 0;
       $41 = ($15<<24>>24)==(0);
       if (!($41)) {
        $i$022 = 1;$j$221 = 0;
        while(1) {
         $42 = (_FT_Stream_ReadChar($stream,$error)|0);
         $43 = $42&255;
         $44 = HEAP32[$error>>2]|0;
         $45 = ($44|0)==(0);
         if (!($45)) {
          break L1;
         }
         $46 = (_FT_Stream_ReadChar($stream,$error)|0);
         $47 = HEAP32[$error>>2]|0;
         $48 = ($47|0)==(0);
         if (!($48)) {
          break L1;
         }
         $49 = $46&255;
         $50 = (($49) + 1)|0;
         $51 = HEAP32[$40>>2]|0;
         $52 = ($50>>>0)>($51>>>0);
         if ($52) {
          HEAP32[$40>>2] = $50;
         }
         $53 = (($50) + ($i$022))|0;
         $54 = ($i$022>>>0)<($53>>>0);
         if ($54) {
          $55 = (($i$022) + 1)|0;
          $56 = $46&255;
          $57 = (($55) + ($56))|0;
          $glyph_code$017 = $43;$k$018 = $i$022;
          while(1) {
           $58 = ($k$018>>>0)<($num_glyphs>>>0);
           $59 = ($glyph_code$017>>>0)<(256);
           $or$cond = $59 & $58;
           if ($or$cond) {
            $60 = $k$018&65535;
            $61 = (((($encoding)) + 524|0) + ($glyph_code$017<<1)|0);
            HEAP16[$61>>1] = $60;
            $62 = HEAP32[$0>>2]|0;
            $63 = (($62) + ($k$018<<1)|0);
            $64 = HEAP16[$63>>1]|0;
            $65 = (((($encoding)) + 12|0) + ($glyph_code$017<<1)|0);
            HEAP16[$65>>1] = $64;
           }
           $66 = (($k$018) + 1)|0;
           $67 = (($glyph_code$017) + 1)|0;
           $exitcond = ($66|0)==($57|0);
           if ($exitcond) {
            break;
           } else {
            $glyph_code$017 = $67;$k$018 = $66;
           }
          }
         }
         $68 = (($j$221) + 1)|0;
         $69 = ($68>>>0)<($16>>>0);
         if ($69) {
          $i$022 = $53;$j$221 = $68;
         } else {
          break;
         }
        }
        $$pr = HEAP32[$40>>2]|0;
        $70 = ($$pr>>>0)>(256);
        if ($70) {
         HEAP32[$40>>2] = 256;
        }
       }
       break;
      }
      default: {
       HEAP32[$error>>2] = 3;
       break L1;
      }
      }
      $71 = HEAP32[$encoding>>2]|0;
      $72 = $71 & 128;
      $73 = ($72|0)==(0);
      if (!($73)) {
       $74 = (_FT_Stream_ReadChar($stream,$error)|0);
       $75 = $74&255;
       $76 = HEAP32[$error>>2]|0;
       $77 = ($76|0)!=(0);
       $78 = ($74<<24>>24)==(0);
       $or$cond37 = $77 | $78;
       if (!($or$cond37)) {
        $79 = ($num_glyphs|0)==(0);
        $j$310 = 0;
        while(1) {
         $80 = (_FT_Stream_ReadChar($stream,$error)|0);
         $81 = $80&255;
         $82 = HEAP32[$error>>2]|0;
         $83 = ($82|0)==(0);
         if (!($83)) {
          break L1;
         }
         $84 = (_FT_Stream_ReadUShort($stream,$error)|0);
         $85 = HEAP32[$error>>2]|0;
         $86 = ($85|0)==(0);
         if (!($86)) {
          break L1;
         }
         $87 = (((($encoding)) + 12|0) + ($81<<1)|0);
         HEAP16[$87>>1] = $84;
         L62: do {
          if (!($79)) {
           $88 = HEAP32[$0>>2]|0;
           $gindex$09 = 0;
           while(1) {
            $89 = (($88) + ($gindex$09<<1)|0);
            $90 = HEAP16[$89>>1]|0;
            $91 = ($90<<16>>16)==($84<<16>>16);
            if ($91) {
             $gindex$09$lcssa = $gindex$09;
             break;
            }
            $94 = (($gindex$09) + 1)|0;
            $95 = ($94>>>0)<($num_glyphs>>>0);
            if ($95) {
             $gindex$09 = $94;
            } else {
             break L62;
            }
           }
           $92 = $gindex$09$lcssa&65535;
           $93 = (((($encoding)) + 524|0) + ($81<<1)|0);
           HEAP16[$93>>1] = $92;
          }
         } while(0);
         $96 = (($j$310) + 1)|0;
         $97 = ($96>>>0)<($75>>>0);
         if ($97) {
          $j$310 = $96;
         } else {
          break;
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $116 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($116|0);
}
function _cff_subfont_done($memory,$subfont) {
 $memory = $memory|0;
 $subfont = $subfont|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($subfont|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($subfont)) + 536|0);
 _cff_index_done($1);
 $2 = ((($subfont)) + 568|0);
 $3 = HEAP32[$2>>2]|0;
 _ft_mem_free($memory,$3);
 HEAP32[$2>>2] = 0;
 return;
}
function _cff_encoding_done($encoding) {
 $encoding = $encoding|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$encoding>>2] = 0;
 $0 = ((($encoding)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($encoding)) + 8|0);
 HEAP32[$1>>2] = 0;
 return;
}
function _cff_charset_done($charset,$stream) {
 $charset = $charset|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 _cff_charset_free_cids($charset,$1);
 $2 = ((($charset)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _ft_mem_free($1,$3);
 HEAP32[$2>>2] = 0;
 HEAP32[$charset>>2] = 0;
 $4 = ((($charset)) + 4|0);
 HEAP32[$4>>2] = 0;
 return;
}
function _CFF_Done_FD_Select($fdselect,$stream) {
 $fdselect = $fdselect|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fdselect)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _FT_Stream_ReleaseFrame($stream,$0);
 }
 $3 = ((($fdselect)) + 12|0);
 HEAP32[$3>>2] = 0;
 HEAP8[$fdselect>>0] = 0;
 $4 = ((($fdselect)) + 4|0);
 HEAP32[$4>>2] = 0;
 return;
}
function _cff_charset_free_cids($charset,$memory) {
 $charset = $charset|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($charset)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 _ft_mem_free($memory,$1);
 HEAP32[$0>>2] = 0;
 $2 = ((($charset)) + 16|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _cff_charset_compute_cids($charset,$num_glyphs,$memory) {
 $charset = $charset|0;
 $num_glyphs = $num_glyphs|0;
 $memory = $memory|0;
 var $$max_cid$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $exitcond = 0, $i$04 = 0, $j$0 = 0, $j$02 = 0, $j$03 = 0, $max_cid$0$lcssa = 0, $max_cid$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($charset)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $27 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($27|0);
 }
 $3 = ($num_glyphs|0)==(0);
 if ($3) {
  $max_cid$0$lcssa = 0;
 } else {
  $4 = ((($charset)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $i$04 = 0;$max_cid$05 = 0;
  while(1) {
   $6 = (($5) + ($i$04<<1)|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = ($7&65535)>($max_cid$05&65535);
   $$max_cid$0 = $8 ? $7 : $max_cid$05;
   $9 = (($i$04) + 1)|0;
   $exitcond = ($9|0)==($num_glyphs|0);
   if ($exitcond) {
    $max_cid$0$lcssa = $$max_cid$0;
    break;
   } else {
    $i$04 = $9;$max_cid$05 = $$max_cid$0;
   }
  }
 }
 $10 = $max_cid$0$lcssa&65535;
 $11 = (($10) + 1)|0;
 $12 = (_ft_mem_realloc($memory,2,0,$11,0,$error)|0);
 $13 = ((($charset)) + 12|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$error>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $27 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($27|0);
 }
 $j$02 = (($num_glyphs) + -1)|0;
 $16 = ($j$02|0)>(-1);
 if ($16) {
  $17 = ((($charset)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$13>>2]|0;
  $j$03 = $j$02;
  while(1) {
   $20 = $j$03&65535;
   $21 = (($18) + ($j$03<<1)|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = $22&65535;
   $24 = (($19) + ($23<<1)|0);
   HEAP16[$24>>1] = $20;
   $j$0 = (($j$03) + -1)|0;
   $25 = ($j$0|0)>(-1);
   if ($25) {
    $j$03 = $j$0;
   } else {
    break;
   }
  }
 }
 HEAP32[$0>>2] = $10;
 $26 = ((($charset)) + 20|0);
 HEAP32[$26>>2] = $num_glyphs;
 $27 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($27|0);
}
function _cff_index_load_offsets($idx) {
 $idx = $idx|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $error = 0, $p$09 = 0, $p$112 = 0, $p$215 = 0, $p$37 = 0, $poff$010 = 0, $poff$113 = 0, $poff$216 = 0, $poff$38 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = HEAP32[$idx>>2]|0;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($idx)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  label = 16;
 } else {
  $6 = ((($idx)) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $9 = ((($idx)) + 12|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = (($4) + 1)|0;
   $12 = $10&255;
   $13 = Math_imul($12, $11)|0;
   $14 = (_ft_mem_realloc($2,4,0,$11,0,$error)|0);
   HEAP32[$6>>2] = $14;
   $15 = HEAP32[$error>>2]|0;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = ((($idx)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) + 3)|0;
    $20 = (_FT_Stream_Seek($0,$19)|0);
    HEAP32[$error>>2] = $20;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = (_FT_Stream_EnterFrame($0,$13)|0);
     HEAP32[$error>>2] = $22;
     $23 = ($22|0)==(0);
     if ($23) {
      $24 = HEAP32[$6>>2]|0;
      $25 = ((($0)) + 32|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + ($13)|0);
      switch ($12|0) {
      case 1:  {
       $30 = ($13|0)>(0);
       if ($30) {
        $p$09 = $26;$poff$010 = $24;
        while(1) {
         $32 = HEAP8[$p$09>>0]|0;
         $33 = $32&255;
         HEAP32[$poff$010>>2] = $33;
         $34 = ((($p$09)) + 1|0);
         $35 = ((($poff$010)) + 4|0);
         $36 = ($34>>>0)<($27>>>0);
         if ($36) {
          $p$09 = $34;$poff$010 = $35;
         } else {
          break;
         }
        }
       }
       break;
      }
      case 2:  {
       $29 = ($13|0)>(0);
       if ($29) {
        $p$112 = $26;$poff$113 = $24;
        while(1) {
         $37 = HEAP8[$p$112>>0]|0;
         $38 = $37&255;
         $39 = $38 << 8;
         $40 = ((($p$112)) + 1|0);
         $41 = HEAP8[$40>>0]|0;
         $42 = $41&255;
         $43 = $39 | $42;
         HEAP32[$poff$113>>2] = $43;
         $44 = ((($p$112)) + 2|0);
         $45 = ((($poff$113)) + 4|0);
         $46 = ($44>>>0)<($27>>>0);
         if ($46) {
          $p$112 = $44;$poff$113 = $45;
         } else {
          break;
         }
        }
       }
       break;
      }
      case 3:  {
       $28 = ($13|0)>(0);
       if ($28) {
        $p$215 = $26;$poff$216 = $24;
        while(1) {
         $47 = HEAP8[$p$215>>0]|0;
         $48 = $47 << 24 >> 24;
         $49 = $48 << 16;
         $50 = ((($p$215)) + 1|0);
         $51 = HEAP8[$50>>0]|0;
         $52 = $51&255;
         $53 = $52 << 8;
         $54 = $53 | $49;
         $55 = ((($p$215)) + 2|0);
         $56 = HEAP8[$55>>0]|0;
         $57 = $56&255;
         $58 = $54 | $57;
         HEAP32[$poff$216>>2] = $58;
         $59 = ((($p$215)) + 3|0);
         $60 = ((($poff$216)) + 4|0);
         $61 = ($59>>>0)<($27>>>0);
         if ($61) {
          $p$215 = $59;$poff$216 = $60;
         } else {
          break;
         }
        }
       }
       break;
      }
      default: {
       $31 = ($13|0)>(0);
       if ($31) {
        $p$37 = $26;$poff$38 = $24;
        while(1) {
         $62 = HEAP8[$p$37>>0]|0;
         $63 = $62&255;
         $64 = $63 << 24;
         $65 = ((($p$37)) + 1|0);
         $66 = HEAP8[$65>>0]|0;
         $67 = $66&255;
         $68 = $67 << 16;
         $69 = $68 | $64;
         $70 = ((($p$37)) + 2|0);
         $71 = HEAP8[$70>>0]|0;
         $72 = $71&255;
         $73 = $72 << 8;
         $74 = $69 | $73;
         $75 = ((($p$37)) + 3|0);
         $76 = HEAP8[$75>>0]|0;
         $77 = $76&255;
         $78 = $74 | $77;
         HEAP32[$poff$38>>2] = $78;
         $79 = ((($p$37)) + 4|0);
         $80 = ((($poff$38)) + 4|0);
         $81 = ($79>>>0)<($27>>>0);
         if ($81) {
          $p$37 = $79;$poff$38 = $80;
         } else {
          break;
         }
        }
       }
      }
      }
      _FT_Stream_ExitFrame($0);
      label = 16;
     }
    }
   }
  } else {
   label = 16;
  }
 }
 if ((label|0) == 16) {
  $$pr = HEAP32[$error>>2]|0;
  $82 = ($$pr|0)==(0);
  if ($82) {
   $85 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($85|0);
  }
 }
 $83 = ((($idx)) + 24|0);
 $84 = HEAP32[$83>>2]|0;
 _ft_mem_free($2,$84);
 HEAP32[$83>>2] = 0;
 $85 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($85|0);
}
function _cff_parser_init($parser,$code,$object,$library) {
 $parser = $parser|0;
 $code = $code|0;
 $object = $object|0;
 $library = $library|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($parser|0),0,412)|0;
 $0 = ((($parser)) + 16|0);
 $1 = ((($parser)) + 404|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($parser)) + 408|0);
 HEAP32[$2>>2] = $code;
 $3 = ((($parser)) + 412|0);
 HEAP32[$3>>2] = $object;
 HEAP32[$parser>>2] = $library;
 return;
}
function _cff_parser_run($parser,$start,$limit) {
 $parser = $parser|0;
 $start = $start|0;
 $limit = $limit|0;
 var $$ = 0, $$lcssa = 0, $$mask = 0, $$p$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $code$0 = 0, $data$017 = 0, $error$3 = 0, $field$013 = 0, $field$013$lcssa = 0, $num_args$114 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $p$0$pn = 0, $p$018 = 0;
 var $p$1 = 0, $p$2 = 0, $p$3 = 0, $q$016 = 0, $val$0 = 0, $val$115 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 16|0);
 $1 = ((($parser)) + 404|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($parser)) + 4|0);
 HEAP32[$2>>2] = $start;
 $3 = ((($parser)) + 8|0);
 HEAP32[$3>>2] = $limit;
 $4 = ((($parser)) + 12|0);
 HEAP32[$4>>2] = $start;
 $5 = ($start>>>0)<($limit>>>0);
 if (!($5)) {
  $error$3 = 0;
  return ($error$3|0);
 }
 $6 = $0;
 $7 = ((($parser)) + 408|0);
 $8 = ((($parser)) + 412|0);
 $p$018 = $start;
 L4: while(1) {
  $9 = HEAP8[$p$018>>0]|0;
  $10 = ($9&255)>(26);
  $11 = ($9<<24>>24)!=(31);
  $or$cond = $10 & $11;
  $12 = HEAP32[$1>>2]|0;
  $13 = $12;
  $14 = (($13) - ($6))|0;
  $15 = $14 >> 2;
  L6: do {
   if ($or$cond) {
    $16 = ($14|0)>(380);
    if ($16) {
     $error$3 = 6;
     label = 38;
     break L4;
    }
    $17 = ((($12)) + 4|0);
    HEAP32[$1>>2] = $17;
    HEAP32[$12>>2] = $p$018;
    switch ($9<<24>>24) {
    case 30:  {
     $p$0$pn = $p$018;
     while(1) {
      $p$1 = ((($p$0$pn)) + 1|0);
      $18 = ($p$1>>>0)<($limit>>>0);
      if (!($18)) {
       $error$3 = 0;
       label = 38;
       break L4;
      }
      $19 = HEAP8[$p$1>>0]|0;
      $20 = $19&255;
      $$mask = $20 & 240;
      $21 = ($$mask|0)==(240);
      $22 = $20 & 15;
      $23 = ($22|0)==(15);
      $or$cond5 = $21 | $23;
      if ($or$cond5) {
       $p$3 = $p$1;
       break;
      } else {
       $p$0$pn = $p$1;
      }
     }
     break;
    }
    case 28:  {
     $24 = ((($p$018)) + 2|0);
     $p$3 = $24;
     break L6;
     break;
    }
    case 29:  {
     $25 = ((($p$018)) + 4|0);
     $p$3 = $25;
     break L6;
     break;
    }
    default: {
     $26 = ($9&255)>(246);
     $27 = ((($p$018)) + 1|0);
     $$p$0 = $26 ? $27 : $p$018;
     $p$3 = $$p$0;
     break L6;
    }
    }
   } else {
    $28 = $9&255;
    HEAP32[$12>>2] = $p$018;
    $29 = ($9<<24>>24)==(12);
    if ($29) {
     $30 = ((($p$018)) + 1|0);
     $31 = ($30>>>0)<($limit>>>0);
     if (!($31)) {
      $error$3 = 6;
      label = 38;
      break L4;
     }
     $32 = HEAP8[$30>>0]|0;
     $33 = $32&255;
     $34 = $33 | 256;
     $code$0 = $34;$p$2 = $30;
    } else {
     $code$0 = $28;$p$2 = $p$018;
    }
    $35 = HEAP32[$7>>2]|0;
    $36 = $35 | $code$0;
    $84 = 4;$field$013 = 2128;
    while(1) {
     $37 = ((($field$013)) + 4|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($36|0);
     if ($39) {
      $$lcssa = $84;$field$013$lcssa = $field$013;
      label = 16;
      break;
     }
     $79 = ((($field$013)) + 28|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ($80|0)==(0);
     if ($81) {
      break;
     } else {
      $84 = $80;$field$013 = $79;
     }
    }
    L24: do {
     if ((label|0) == 16) {
      label = 0;
      $40 = HEAP32[$8>>2]|0;
      $41 = ((($field$013$lcssa)) + 8|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (($40) + ($42)|0);
      $44 = ($$lcssa|0)!=(6);
      $45 = ($15|0)==(0);
      $or$cond3 = $45 & $44;
      if ($or$cond3) {
       $error$3 = 6;
       label = 38;
       break L4;
      }
      switch ($$lcssa|0) {
      case 1: case 4: case 5:  {
       $46 = (_cff_parse_num($0)|0);
       $val$0 = $46;
       break;
      }
      case 2:  {
       $47 = (_cff_parse_fixed($0)|0);
       $val$0 = $47;
       break;
      }
      case 3:  {
       $48 = (_cff_parse_fixed_scaled($0,3)|0);
       $val$0 = $48;
       break;
      }
      case 6:  {
       $54 = ((($field$013$lcssa)) + 24|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = (($40) + ($55)|0);
       $57 = ((($field$013$lcssa)) + 20|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = ($15>>>0)>($58>>>0);
       $$ = $59 ? $58 : $15;
       $60 = $$&255;
       HEAP8[$56>>0] = $60;
       $61 = ($$|0)==(0);
       if ($61) {
        break L24;
       }
       $62 = ((($field$013$lcssa)) + 12|0);
       $data$017 = $0;$num_args$114 = $$;$q$016 = $43;$val$115 = 0;
       while(1) {
        $63 = ((($data$017)) + 4|0);
        $64 = (_cff_parse_num($data$017)|0);
        $65 = (($64) + ($val$115))|0;
        $66 = HEAP8[$62>>0]|0;
        $67 = $66&255;
        switch ($67|0) {
        case 1:  {
         $68 = $65&255;
         HEAP8[$q$016>>0] = $68;
         break;
        }
        case 2:  {
         $69 = $65&65535;
         HEAP16[$q$016>>1] = $69;
         break;
        }
        case 4:  {
         HEAP32[$q$016>>2] = $65;
         break;
        }
        default: {
         HEAP32[$q$016>>2] = $65;
        }
        }
        $70 = HEAP8[$62>>0]|0;
        $71 = $70&255;
        $72 = (($q$016) + ($71)|0);
        $73 = (($num_args$114) + -1)|0;
        $74 = ($73|0)==(0);
        if ($74) {
         break L24;
        } else {
         $data$017 = $63;$num_args$114 = $73;$q$016 = $72;$val$115 = $65;
        }
       }
       break;
      }
      default: {
       $75 = ((($field$013$lcssa)) + 16|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = (FUNCTION_TABLE_ii[$76 & 63]($parser)|0);
       $78 = ($77|0)==(0);
       if ($78) {
        break L24;
       } else {
        $error$3 = $77;
        label = 38;
        break L4;
       }
      }
      }
      $49 = ((($field$013$lcssa)) + 12|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = $50&255;
      switch ($51|0) {
      case 1:  {
       $52 = $val$0&255;
       HEAP8[$43>>0] = $52;
       break L24;
       break;
      }
      case 2:  {
       $53 = $val$0&65535;
       HEAP16[$43>>1] = $53;
       break L24;
       break;
      }
      case 4:  {
       HEAP32[$43>>2] = $val$0;
       break L24;
       break;
      }
      default: {
       HEAP32[$43>>2] = $val$0;
       break L24;
      }
      }
     }
    } while(0);
    HEAP32[$1>>2] = $0;
    $p$3 = $p$2;
   }
  } while(0);
  $82 = ((($p$3)) + 1|0);
  $83 = ($82>>>0)<($limit>>>0);
  if ($83) {
   $p$018 = $82;
  } else {
   $error$3 = 0;
   label = 38;
   break;
  }
 }
 if ((label|0) == 38) {
  return ($error$3|0);
 }
 return (0)|0;
}
function _cff_parse_num($d) {
 $d = $d|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$d>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(30);
 $3 = ((($d)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $5 = (_cff_parse_real($0,$4,0,0)|0);
  $6 = $5 >> 16;
  $8 = $6;
  return ($8|0);
 } else {
  $7 = (_cff_parse_integer($0,$4)|0);
  $8 = $7;
  return ($8|0);
 }
 return (0)|0;
}
function _cff_parse_fixed($d) {
 $d = $d|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$d>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(30);
 $3 = ((($d)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $5 = (_cff_parse_real($0,$4,0,0)|0);
  $8 = $5;
  return ($8|0);
 } else {
  $6 = (_cff_parse_integer($0,$4)|0);
  $7 = $6 << 16;
  $8 = $7;
  return ($8|0);
 }
 return (0)|0;
}
function _cff_parse_fixed_scaled($d,$scaling) {
 $d = $d|0;
 $scaling = $scaling|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$d>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(30);
 $3 = ((($d)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $5 = (_cff_parse_real($0,$4,$scaling,0)|0);
  $11 = $5;
  return ($11|0);
 } else {
  $6 = (_cff_parse_integer($0,$4)|0);
  $7 = (3584 + ($scaling<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $6 << 16;
  $10 = Math_imul($9, $8)|0;
  $11 = $10;
  return ($11|0);
 }
 return (0)|0;
}
function _cff_parse_real($start,$limit,$power_ten,$scaling) {
 $start = $start|0;
 $limit = $limit|0;
 $power_ten = $power_ten|0;
 $scaling = $scaling|0;
 var $$lcssa188 = 0, $$lcssa190 = 0, $$lcssa191 = 0, $$lcssa200 = 0, $$lcssa202 = 0, $$lcssa204 = 0, $$lcssa205 = 0, $$lcssa206 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $exponent$0 = 0, $exponent$0$ = 0, $exponent$0$lcssa184 = 0, $exponent$1 = 0, $exponent$2 = 0, $exponent_add$0$ph = 0, $exponent_add$0$ph20 = 0, $exponent_add$0$ph25 = 0, $exponent_add$0$ph25$lcssa208 = 0, $exponent_add$0$ph25$lcssa209 = 0, $exponent_add$1$ph = 0, $exponent_add$1$ph11 = 0, $exponent_add$1$ph11$lcssa193 = 0, $exponent_add$2 = 0, $fraction_length$0$ph = 0, $fraction_length$1 = 0, $fraction_length$2 = 0, $fraction_length$3 = 0, $integer_length$0$ph = 0, $integer_length$0$ph$lcssa213 = 0;
 var $nib$0 = 0, $nib$0$off = 0, $number$0$ph = 0, $number$0$ph$lcssa212 = 0, $number$1$ph = 0, $number$2 = 0, $number$3 = 0, $number$4 = 0, $number$5 = 0, $or$cond5 = 0, $p$0 = 0, $p$0$ph = 0, $p$0$ph22 = 0, $p$0$ph27 = 0, $p$1 = 0, $p$1$lcssa196 = 0, $p$1$lcssa197 = 0, $p$1$lcssa198 = 0, $p$2 = 0, $p$2$ph = 0;
 var $p$2$ph13 = 0, $p$3 = 0, $p$3$lcssa185 = 0, $p$3$lcssa186 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $phase$0 = 0, $phase$0$ph = 0, $phase$0$ph18 = 0, $phase$0$ph24 = 0, $phase$1 = 0, $phase$1$ph = 0, $phase$1$ph10 = 0, $phase$2 = 0, $phase$3 = 0, $result$0 = 0, $result$0$ = 0, $sign$0$ph = 0, $sign$0$ph19 = 0;
 var $sign$0$ph19$lcssa210 = 0, $sign$0$ph19$lcssa211 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($scaling|0)!=(0|0);
 if ($0) {
  HEAP32[$scaling>>2] = 0;
  $exponent_add$0$ph = 0;$integer_length$0$ph = 0;$number$0$ph = 0;$p$0$ph = $start;$phase$0$ph = 4;$sign$0$ph = 0;
 } else {
  $exponent_add$0$ph = 0;$integer_length$0$ph = 0;$number$0$ph = 0;$p$0$ph = $start;$phase$0$ph = 4;$sign$0$ph = 0;
 }
 L3: while(1) {
  $1 = ($number$0$ph|0)>(214748363);
  $exponent_add$0$ph20 = $exponent_add$0$ph;$p$0$ph22 = $p$0$ph;$phase$0$ph18 = $phase$0$ph;$sign$0$ph19 = $sign$0$ph;
  L5: while(1) {
   $exponent_add$0$ph25 = $exponent_add$0$ph20;$p$0$ph27 = $p$0$ph22;$phase$0$ph24 = $phase$0$ph18;
   while(1) {
    $p$0 = $p$0$ph27;$phase$0 = $phase$0$ph24;
    while(1) {
     $2 = ($phase$0|0)==(0);
     if ($2) {
      $p$1 = $p$0;
     } else {
      $3 = ((($p$0)) + 1|0);
      $4 = ($3>>>0)<($limit>>>0);
      if ($4) {
       $p$1 = $3;
      } else {
       label = 51;
       break L3;
      }
     }
     $5 = HEAP8[$p$1>>0]|0;
     $6 = $5&255;
     $7 = $6 >>> $phase$0;
     $8 = $7 & 15;
     $9 = (4 - ($phase$0))|0;
     $10 = ($8|0)==(14);
     if ($10) {
      $exponent_add$0$ph20 = $exponent_add$0$ph25;$p$0$ph22 = $p$1;$phase$0$ph18 = $9;$sign$0$ph19 = 1;
      continue L5;
     }
     $11 = ($8>>>0)>(9);
     if ($11) {
      $$lcssa200 = $8;$$lcssa204 = $9;$exponent_add$0$ph25$lcssa208 = $exponent_add$0$ph25;$integer_length$0$ph$lcssa213 = $integer_length$0$ph;$number$0$ph$lcssa212 = $number$0$ph;$p$1$lcssa196 = $p$1;$sign$0$ph19$lcssa210 = $sign$0$ph19;
      break L3;
     }
     if ($1) {
      $$lcssa205 = $9;$p$1$lcssa197 = $p$1;
      break;
     }
     $13 = $8 | $number$0$ph;
     $14 = ($13|0)==(0);
     if ($14) {
      $p$0 = $p$1;$phase$0 = $9;
     } else {
      $$lcssa202 = $8;$$lcssa206 = $9;$exponent_add$0$ph25$lcssa209 = $exponent_add$0$ph25;$p$1$lcssa198 = $p$1;$sign$0$ph19$lcssa211 = $sign$0$ph19;
      break L5;
     }
    }
    $12 = (($exponent_add$0$ph25) + 1)|0;
    $exponent_add$0$ph25 = $12;$p$0$ph27 = $p$1$lcssa197;$phase$0$ph24 = $$lcssa205;
   }
  }
  $15 = (($integer_length$0$ph) + 1)|0;
  $16 = ($number$0$ph*10)|0;
  $17 = (($$lcssa202) + ($16))|0;
  $exponent_add$0$ph = $exponent_add$0$ph25$lcssa209;$integer_length$0$ph = $15;$number$0$ph = $17;$p$0$ph = $p$1$lcssa198;$phase$0$ph = $$lcssa206;$sign$0$ph = $sign$0$ph19$lcssa211;
 }
 if ((label|0) == 51) {
  return 0;
 }
 $18 = ($$lcssa200|0)==(10);
 L22: do {
  if ($18) {
   $exponent_add$1$ph = $exponent_add$0$ph25$lcssa208;$fraction_length$0$ph = 0;$number$1$ph = $number$0$ph$lcssa212;$p$2$ph = $p$1$lcssa196;$phase$1$ph = $$lcssa204;
   L23: while(1) {
    $19 = ($number$1$ph|0)<(214748364);
    $20 = ($fraction_length$0$ph|0)<(9);
    $or$cond5 = $19 & $20;
    $exponent_add$1$ph11 = $exponent_add$1$ph;$p$2$ph13 = $p$2$ph;$phase$1$ph10 = $phase$1$ph;
    L25: while(1) {
     $p$2 = $p$2$ph13;$phase$1 = $phase$1$ph10;
     while(1) {
      $21 = ($phase$1|0)==(0);
      if ($21) {
       $p$3 = $p$2;
      } else {
       $22 = ((($p$2)) + 1|0);
       $23 = ($22>>>0)<($limit>>>0);
       if ($23) {
        $p$3 = $22;
       } else {
        break L23;
       }
      }
      $24 = HEAP8[$p$3>>0]|0;
      $25 = $24&255;
      $26 = $25 >>> $phase$1;
      $27 = $26 & 15;
      $28 = (4 - ($phase$1))|0;
      $29 = ($27>>>0)>(9);
      if ($29) {
       $exponent_add$2 = $exponent_add$1$ph11;$fraction_length$1 = $fraction_length$0$ph;$nib$0 = $27;$number$2 = $number$1$ph;$p$4 = $p$3;$phase$2 = $28;
       break L22;
      }
      $30 = $27 | $number$1$ph;
      $31 = ($30|0)==(0);
      if ($31) {
       $$lcssa190 = $28;$p$3$lcssa185 = $p$3;
       break;
      }
      if ($or$cond5) {
       $$lcssa188 = $27;$$lcssa191 = $28;$exponent_add$1$ph11$lcssa193 = $exponent_add$1$ph11;$p$3$lcssa186 = $p$3;
       break L25;
      } else {
       $p$2 = $p$3;$phase$1 = $28;
      }
     }
     $32 = (($exponent_add$1$ph11) + -1)|0;
     $exponent_add$1$ph11 = $32;$p$2$ph13 = $p$3$lcssa185;$phase$1$ph10 = $$lcssa190;
    }
    $33 = (($fraction_length$0$ph) + 1)|0;
    $34 = ($number$1$ph*10)|0;
    $35 = (($$lcssa188) + ($34))|0;
    $exponent_add$1$ph = $exponent_add$1$ph11$lcssa193;$fraction_length$0$ph = $33;$number$1$ph = $35;$p$2$ph = $p$3$lcssa186;$phase$1$ph = $$lcssa191;
   }
   return 0;
  } else {
   $exponent_add$2 = $exponent_add$0$ph25$lcssa208;$fraction_length$1 = 0;$nib$0 = $$lcssa200;$number$2 = $number$0$ph$lcssa212;$p$4 = $p$1$lcssa196;$phase$2 = $$lcssa204;
  }
 } while(0);
 $36 = ($nib$0|0)==(12);
 $nib$0$off = (($nib$0) + -11)|0;
 $37 = ($nib$0$off>>>0)<(2);
 do {
  if ($37) {
   $exponent$0 = 0;$p$5 = $p$4;$phase$3 = $phase$2;
   while(1) {
    $38 = ($phase$3|0)==(0);
    if ($38) {
     $p$6 = $p$5;
    } else {
     $39 = ((($p$5)) + 1|0);
     $40 = ($39>>>0)<($limit>>>0);
     if ($40) {
      $p$6 = $39;
     } else {
      label = 51;
      break;
     }
    }
    $41 = HEAP8[$p$6>>0]|0;
    $42 = $41&255;
    $43 = $42 >>> $phase$3;
    $44 = $43 & 15;
    $45 = ($44>>>0)>(9);
    if ($45) {
     $exponent$0$lcssa184 = $exponent$0;
     label = 29;
     break;
    }
    $46 = (4 - ($phase$3))|0;
    $47 = ($exponent$0*10)|0;
    $48 = (($44) + ($47))|0;
    $49 = ($48|0)>(1000);
    if ($49) {
     label = 51;
     break;
    } else {
     $exponent$0 = $48;$p$5 = $p$6;$phase$3 = $46;
    }
   }
   if ((label|0) == 29) {
    $50 = (0 - ($exponent$0$lcssa184))|0;
    $exponent$0$ = $36 ? $50 : $exponent$0$lcssa184;
    $exponent$1 = $exponent$0$;
    break;
   }
   else if ((label|0) == 51) {
    return 0;
   }
  } else {
   $exponent$1 = 0;
  }
 } while(0);
 $51 = (($exponent_add$2) + ($power_ten))|0;
 $52 = (($51) + ($exponent$1))|0;
 if (!($0)) {
  $85 = (($52) + ($integer_length$0$ph$lcssa213))|0;
  $86 = ($85|0)<(0);
  $87 = (0 - ($85))|0;
  $88 = $86 ? $87 : $85;
  $89 = ($88|0)>(5);
  if ($89) {
   return 0;
  }
  $90 = (($fraction_length$1) - ($52))|0;
  if ($86) {
   $91 = (3584 + ($87<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = (($number$2|0) / ($92|0))&-1;
   $94 = (($fraction_length$1) + ($integer_length$0$ph$lcssa213))|0;
   $fraction_length$2 = $94;$number$4 = $93;
  } else {
   $fraction_length$2 = $90;$number$4 = $number$2;
  }
  $95 = ($fraction_length$2|0)==(10);
  $96 = (($number$4|0) / 10)&-1;
  $number$5 = $95 ? $96 : $number$4;
  $97 = $95 << 31 >> 31;
  $fraction_length$3 = (($97) + ($fraction_length$2))|0;
  $98 = ($fraction_length$3|0)>(0);
  if ($98) {
   $99 = (3584 + ($fraction_length$3<<2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (($number$5|0) / ($100|0))&-1;
   $102 = ($101|0)>(32767);
   if ($102) {
    return 0;
   }
   $103 = (_FT_DivFix($number$5,$100)|0);
   $result$0 = $103;
   $110 = ($sign$0$ph19$lcssa210|0)==(0);
   $111 = (0 - ($result$0))|0;
   $result$0$ = $110 ? $result$0 : $111;
   return ($result$0$|0);
  } else {
   $104 = (0 - ($fraction_length$3))|0;
   $105 = (3584 + ($104<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = Math_imul($106, $number$5)|0;
   $108 = ($107|0)>(32767);
   if ($108) {
    return 0;
   }
   $109 = $107 << 16;
   $result$0 = $109;
   $110 = ($sign$0$ph19$lcssa210|0)==(0);
   $111 = (0 - ($result$0))|0;
   $result$0$ = $110 ? $result$0 : $111;
   return ($result$0$|0);
  }
 }
 $53 = (($fraction_length$1) + ($integer_length$0$ph$lcssa213))|0;
 $54 = (($52) + ($integer_length$0$ph$lcssa213))|0;
 $55 = ($53|0)<(6);
 if (!($55)) {
  $73 = (($53) + -5)|0;
  $74 = (3584 + ($73<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($number$2|0) / ($75|0))&-1;
  $77 = ($76|0)>(32767);
  if ($77) {
   $78 = (($53) + -4)|0;
   $79 = (3584 + ($78<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (_FT_DivFix($number$2,$80)|0);
   $82 = (($54) + -4)|0;
   HEAP32[$scaling>>2] = $82;
   $result$0 = $81;
   $110 = ($sign$0$ph19$lcssa210|0)==(0);
   $111 = (0 - ($result$0))|0;
   $result$0$ = $110 ? $result$0 : $111;
   return ($result$0$|0);
  } else {
   $83 = (_FT_DivFix($number$2,$75)|0);
   $84 = (($54) + -5)|0;
   HEAP32[$scaling>>2] = $84;
   $result$0 = $83;
   $110 = ($sign$0$ph19$lcssa210|0)==(0);
   $111 = (0 - ($result$0))|0;
   $result$0$ = $110 ? $result$0 : $111;
   return ($result$0$|0);
  }
 }
 $56 = ($number$2|0)>(32767);
 if ($56) {
  $57 = (_FT_DivFix($number$2,10)|0);
  $58 = (1 - ($53))|0;
  $59 = (($58) + ($54))|0;
  HEAP32[$scaling>>2] = $59;
  $result$0 = $57;
  $110 = ($sign$0$ph19$lcssa210|0)==(0);
  $111 = (0 - ($result$0))|0;
  $result$0$ = $110 ? $result$0 : $111;
  return ($result$0$|0);
 }
 $60 = ($54|0)>(0);
 if ($60) {
  $61 = ($54|0)<(5);
  $62 = $61 ? $54 : 5;
  $63 = (($54) - ($62))|0;
  $64 = (($62) - ($53))|0;
  $65 = (3584 + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = Math_imul($66, $number$2)|0;
  $68 = ($67|0)>(32767);
  if ($68) {
   $69 = (($67|0) / 10)&-1;
   $70 = (($63) + 1)|0;
   $exponent$2 = $70;$number$3 = $69;
  } else {
   $exponent$2 = $63;$number$3 = $67;
  }
 } else {
  $71 = (($54) - ($53))|0;
  $exponent$2 = $71;$number$3 = $number$2;
 }
 $72 = $number$3 << 16;
 HEAP32[$scaling>>2] = $exponent$2;
 $result$0 = $72;
 $110 = ($sign$0$ph19$lcssa210|0)==(0);
 $111 = (0 - ($result$0))|0;
 $result$0$ = $110 ? $result$0 : $111;
 return ($result$0$|0);
}
function _cff_parse_integer($start,$limit) {
 $start = $start|0;
 $limit = $limit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($start)) + 1|0);
 $1 = HEAP8[$start>>0]|0;
 $2 = $1&255;
 switch ($1<<24>>24) {
 case 28:  {
  $3 = ((($start)) + 3|0);
  $4 = ($3>>>0)>($limit>>>0);
  if ($4) {
   $val$0 = 0;
   return ($val$0|0);
  }
  $5 = HEAP8[$0>>0]|0;
  $6 = $5&255;
  $7 = $6 << 8;
  $8 = ((($start)) + 2|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $7 | $10;
  $sext = $11 << 16;
  $12 = $sext >> 16;
  $val$0 = $12;
  return ($val$0|0);
  break;
 }
 case 29:  {
  $13 = ((($start)) + 5|0);
  $14 = ($13>>>0)>($limit>>>0);
  if ($14) {
   $val$0 = 0;
   return ($val$0|0);
  }
  $15 = HEAP8[$0>>0]|0;
  $16 = $15&255;
  $17 = $16 << 24;
  $18 = ((($start)) + 2|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 << 16;
  $22 = $21 | $17;
  $23 = ((($start)) + 3|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $25 << 8;
  $27 = $22 | $26;
  $28 = ((($start)) + 4|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $27 | $30;
  $val$0 = $31;
  return ($val$0|0);
  break;
 }
 default: {
  $32 = ($1&255)<(247);
  if ($32) {
   $33 = (($2) + -139)|0;
   $val$0 = $33;
   return ($val$0|0);
  }
  $34 = ($1&255)<(251);
  $35 = ((($start)) + 2|0);
  $36 = ($35>>>0)>($limit>>>0);
  if ($34) {
   if ($36) {
    $val$0 = 0;
    return ($val$0|0);
   }
   $37 = $2 << 8;
   $38 = (($37) + -63232)|0;
   $39 = HEAP8[$0>>0]|0;
   $40 = $39&255;
   $41 = $40 | $38;
   $42 = (($41) + 108)|0;
   $val$0 = $42;
   return ($val$0|0);
  } else {
   if ($36) {
    $val$0 = 0;
    return ($val$0|0);
   }
   $43 = (251 - ($2))|0;
   $44 = $43 << 8;
   $45 = HEAP8[$0>>0]|0;
   $46 = $45&255;
   $47 = (($44) + -108)|0;
   $48 = (($47) - ($46))|0;
   $val$0 = $48;
   return ($val$0|0);
  }
 }
 }
 return (0)|0;
}
function _cff_parse_font_matrix($parser) {
 $parser = $parser|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $error$0 = 0, $scaling = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $scaling = sp;
 $0 = ((($parser)) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 72|0);
 $3 = ((($1)) + 68|0);
 $4 = ((($parser)) + 404|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($parser)) + 40|0);
 $7 = ($5>>>0)<($6>>>0);
 if ($7) {
  $error$0 = 161;
  STACKTOP = sp;return ($error$0|0);
 }
 $8 = ((($parser)) + 16|0);
 $9 = ((($1)) + 64|0);
 HEAP8[$9>>0] = 1;
 $10 = (_cff_parse_fixed_dynamic($8,$scaling)|0);
 $11 = ((($1)) + 48|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[$scaling>>2]|0;
 $13 = (0 - ($12))|0;
 HEAP32[$scaling>>2] = $13;
 $$off = (($12) + 9)|0;
 $14 = ($$off>>>0)>(9);
 if ($14) {
  HEAP32[$11>>2] = 65536;
  $15 = ((($1)) + 56|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($1)) + 52|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($1)) + 60|0);
  HEAP32[$17>>2] = 65536;
  HEAP32[$2>>2] = 0;
  $18 = ((($1)) + 76|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$3>>2] = 1;
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 } else {
  $19 = ((($parser)) + 20|0);
  $20 = ((($parser)) + 24|0);
  $21 = (_cff_parse_fixed_scaled($19,$13)|0);
  $22 = ((($1)) + 56|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($parser)) + 28|0);
  $24 = HEAP32[$scaling>>2]|0;
  $25 = (_cff_parse_fixed_scaled($20,$24)|0);
  $26 = ((($1)) + 52|0);
  HEAP32[$26>>2] = $25;
  $27 = ((($parser)) + 32|0);
  $28 = HEAP32[$scaling>>2]|0;
  $29 = (_cff_parse_fixed_scaled($23,$28)|0);
  $30 = ((($1)) + 60|0);
  HEAP32[$30>>2] = $29;
  $31 = ((($parser)) + 36|0);
  $32 = HEAP32[$scaling>>2]|0;
  $33 = (_cff_parse_fixed_scaled($27,$32)|0);
  HEAP32[$2>>2] = $33;
  $34 = HEAP32[$scaling>>2]|0;
  $35 = (_cff_parse_fixed_scaled($31,$34)|0);
  $36 = ((($1)) + 76|0);
  HEAP32[$36>>2] = $35;
  $37 = HEAP32[$scaling>>2]|0;
  $38 = (3584 + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$3>>2] = $39;
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 }
 return (0)|0;
}
function _cff_parse_font_bbox($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 404|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($parser)) + 32|0);
 $5 = ($3>>>0)<($4>>>0);
 if ($5) {
  $error$0 = 161;
  return ($error$0|0);
 }
 $6 = ((($parser)) + 16|0);
 $7 = ((($parser)) + 20|0);
 $8 = (_cff_parse_fixed($6)|0);
 $9 = (_FT_RoundFix($8)|0);
 $10 = ((($1)) + 84|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($parser)) + 24|0);
 $12 = (_cff_parse_fixed($7)|0);
 $13 = (_FT_RoundFix($12)|0);
 $14 = ((($1)) + 88|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($parser)) + 28|0);
 $16 = (_cff_parse_fixed($11)|0);
 $17 = (_FT_RoundFix($16)|0);
 $18 = ((($1)) + 92|0);
 HEAP32[$18>>2] = $17;
 $19 = (_cff_parse_fixed($15)|0);
 $20 = (_FT_RoundFix($19)|0);
 $21 = ((($1)) + 96|0);
 HEAP32[$21>>2] = $20;
 $error$0 = 0;
 return ($error$0|0);
}
function _cff_parse_private_dict($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 404|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($parser)) + 24|0);
 $5 = ($3>>>0)<($4>>>0);
 if ($5) {
  $error$0 = 161;
  return ($error$0|0);
 }
 $6 = ((($parser)) + 16|0);
 $7 = ((($parser)) + 20|0);
 $8 = (_cff_parse_num($6)|0);
 $9 = ((($1)) + 120|0);
 HEAP32[$9>>2] = $8;
 $10 = (_cff_parse_num($7)|0);
 $11 = ((($1)) + 116|0);
 HEAP32[$11>>2] = $10;
 $error$0 = 0;
 return ($error$0|0);
}
function _cff_parse_cid_ros($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 412|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 404|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($parser)) + 28|0);
 $5 = ($3>>>0)<($4>>>0);
 if ($5) {
  $error$0 = 161;
  return ($error$0|0);
 }
 $6 = ((($parser)) + 16|0);
 $7 = ((($parser)) + 20|0);
 $8 = (_cff_parse_num($6)|0);
 $9 = ((($1)) + 132|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($parser)) + 24|0);
 $11 = (_cff_parse_num($7)|0);
 $12 = ((($1)) + 136|0);
 HEAP32[$12>>2] = $11;
 $13 = (_cff_parse_num($10)|0);
 $14 = ((($1)) + 140|0);
 HEAP32[$14>>2] = $13;
 $error$0 = 0;
 return ($error$0|0);
}
function _cff_parse_fixed_dynamic($d,$scaling) {
 $d = $d|0;
 $scaling = $scaling|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $integer_length$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$d>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(30);
 $3 = ((($d)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $5 = (_cff_parse_real($0,$4,0,$scaling)|0);
  $$0 = $5;
  return ($$0|0);
 }
 $6 = (_cff_parse_integer($0,$4)|0);
 $7 = ($6|0)>(32767);
 if (!($7)) {
  HEAP32[$scaling>>2] = 0;
  $21 = $6 << 16;
  $$0 = $21;
  return ($$0|0);
 }
 $8 = ($6|0)<(100000);
 if ($8) {
  $integer_length$0$lcssa = 5;
 } else {
  $9 = ($6|0)<(1000000);
  if ($9) {
   $integer_length$0$lcssa = 6;
  } else {
   $22 = ($6|0)<(10000000);
   if ($22) {
    $integer_length$0$lcssa = 7;
   } else {
    $23 = ($6|0)<(100000000);
    if ($23) {
     $integer_length$0$lcssa = 8;
    } else {
     $24 = ($6|0)<(1000000000);
     $$ = $24 ? 9 : 10;
     $integer_length$0$lcssa = $$;
    }
   }
  }
 }
 $10 = (($integer_length$0$lcssa) + -5)|0;
 $11 = (3584 + ($10<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($6|0) / ($12|0))&-1;
 $14 = ($13|0)>(32767);
 if ($14) {
  $15 = (($integer_length$0$lcssa) + -4)|0;
  HEAP32[$scaling>>2] = $15;
  $16 = (3584 + ($15<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_FT_DivFix($6,$17)|0);
  $$0 = $18;
  return ($$0|0);
 } else {
  HEAP32[$scaling>>2] = $10;
  $19 = HEAP32[$11>>2]|0;
  $20 = (_FT_DivFix($6,$19)|0);
  $$0 = $20;
  return ($$0|0);
 }
 return (0)|0;
}
function _cff_decoder_init($decoder,$face,$size,$slot,$hinting,$hint_mode) {
 $decoder = $decoder|0;
 $face = $face|0;
 $size = $size|0;
 $slot = $slot|0;
 $hinting = $hinting|0;
 $hint_mode = $hint_mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 692|0);
 $1 = HEAP32[$0>>2]|0;
 _memset(($decoder|0),0,928)|0;
 _cff_builder_init($decoder,$face,$size,$slot,$hinting);
 $2 = ((($decoder)) + 76|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($1)) + 92|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($decoder)) + 892|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($1)) + 1308|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($decoder)) + 908|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 1368|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$5>>2]|0;
 $12 = (_cff_compute_bias($10,$11)|0);
 $13 = ((($decoder)) + 900|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($decoder)) + 920|0);
 HEAP32[$14>>2] = $hint_mode;
 return;
}
function _cff_decoder_prepare($decoder,$size,$glyph_index) {
 $decoder = $decoder|0;
 $size = $size|0;
 $glyph_index = $glyph_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $or$cond = 0, $sub$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 692|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 1324|0);
 $5 = ((($3)) + 1896|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $sub$0 = $4;
 } else {
  $8 = ((($3)) + 2924|0);
  $9 = (_cff_fd_select_get($8,$glyph_index)|0);
  $10 = $9&255;
  $11 = HEAP32[$5>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if (!($12)) {
   $error$0 = 3;
   return ($error$0|0);
  }
  $13 = (((($3)) + 1900|0) + ($10<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($decoder)) + 68|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  $18 = ($size|0)!=(0|0);
  $or$cond = $18 & $17;
  if ($or$cond) {
   $19 = ((($size)) + 40|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (((($20)) + 4|0) + ($10<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($decoder)) + 72|0);
   HEAP32[$23>>2] = $22;
   $sub$0 = $14;
  } else {
   $sub$0 = $14;
  }
 }
 $24 = ((($sub$0)) + 544|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($decoder)) + 888|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($sub$0)) + 568|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($decoder)) + 904|0);
 HEAP32[$29>>2] = $28;
 $30 = ((($decoder)) + 76|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($31)) + 1368|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$26>>2]|0;
 $35 = (_cff_compute_bias($33,$34)|0);
 $36 = ((($decoder)) + 896|0);
 HEAP32[$36>>2] = $35;
 $37 = ((($sub$0)) + 528|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($decoder)) + 744|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($sub$0)) + 532|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($decoder)) + 748|0);
 HEAP32[$42>>2] = $41;
 $error$0 = 0;
 return ($error$0|0);
}
function _cff_decoder_parse_charstrings($decoder,$charstring_base,$charstring_len) {
 $decoder = $decoder|0;
 $charstring_base = $charstring_base|0;
 $charstring_len = $charstring_len|0;
 var $$ = 0, $$0 = 0, $$95 = 0, $$96 = 0, $$97 = 0, $$98 = 0, $$dx$0 = 0, $$in = 0, $$lcssa = 0, $$lcssa1903 = 0, $$lcssa1904 = 0, $$lcssa1905 = 0, $$lcssa1906 = 0, $$lcssa1907 = 0, $$lcssa1908 = 0, $$lcssa1909 = 0, $$lcssa1910 = 0, $$lcssa1911 = 0, $$lcssa1912 = 0, $$lcssa1913 = 0;
 var $$lcssa1914 = 0, $$lcssa1915 = 0, $$lcssa1916 = 0, $$lcssa1917 = 0, $$lcssa1918 = 0, $$lcssa1919 = 0, $$lcssa1920 = 0, $$lcssa1921 = 0, $$lcssa1922 = 0, $$lcssa1923 = 0, $$lcssa1924 = 0, $$lcssa1925 = 0, $$lcssa1926 = 0, $$lcssa1927 = 0, $$lcssa1962 = 0, $$lcssa1963 = 0, $$lcssa1964 = 0, $$lcssa1965 = 0, $$lcssa1966 = 0, $$lcssa1967 = 0;
 var $$lcssa1968 = 0, $$lcssa1969 = 0, $$lcssa1970 = 0, $$lcssa1971 = 0, $$lcssa1972 = 0, $$lcssa1973 = 0, $$lcssa1974 = 0, $$lcssa1975 = 0, $$lcssa1976 = 0, $$lcssa1977 = 0, $$lcssa1978 = 0, $$lcssa1979 = 0, $$lcssa1980 = 0, $$lcssa1981 = 0, $$lcssa1982 = 0, $$lcssa1983 = 0, $$lcssa1984 = 0, $$lcssa1985 = 0, $$lcssa1986 = 0, $$lcssa1987 = 0;
 var $$lcssa1988 = 0, $$lcssa1989 = 0, $$lcssa1990 = 0, $$lcssa1991 = 0, $$lcssa1992 = 0, $$lcssa1993 = 0, $$lcssa1994 = 0, $$lcssa1995 = 0, $$lcssa1996 = 0, $$lcssa1997 = 0, $$lcssa1998 = 0, $$lcssa1999 = 0, $$lcssa2000 = 0, $$lcssa2001 = 0, $$lcssa2002 = 0, $$lcssa2003 = 0, $$lcssa2004 = 0, $$lcssa2005 = 0, $$lcssa2006 = 0, $$lcssa2007 = 0;
 var $$lcssa2008 = 0, $$lcssa2009 = 0, $$lcssa2010 = 0, $$lcssa2011 = 0, $$lcssa2012 = 0, $$lcssa2013 = 0, $$lcssa2014 = 0, $$lcssa2015 = 0, $$lcssa2016 = 0, $$lcssa2017 = 0, $$lcssa2018 = 0, $$lcssa2019 = 0, $$lcssa2020 = 0, $$lcssa2021 = 0, $$lcssa2022 = 0, $$lcssa2023 = 0, $$lcssa2024 = 0, $$lcssa2025 = 0, $$lcssa2026 = 0, $$lcssa2027 = 0;
 var $$lcssa2028 = 0, $$lcssa2029 = 0, $$lcssa2030 = 0, $$lcssa2031 = 0, $$lcssa2032 = 0, $$lcssa2033 = 0, $$lcssa2034 = 0, $$lcssa2035 = 0, $$lcssa2036 = 0, $$lcssa2037 = 0, $$lcssa2038 = 0, $$lcssa2039 = 0, $$lcssa2040 = 0, $$lcssa2041 = 0, $$lcssa2042 = 0, $$lcssa2043 = 0, $$lcssa2044 = 0, $$lcssa2045 = 0, $$lcssa2046 = 0, $$lcssa2047 = 0;
 var $$lcssa2048 = 0, $$lcssa2049 = 0, $$lcssa2050 = 0, $$lcssa2051 = 0, $$lcssa2052 = 0, $$lcssa2053 = 0, $$lcssa2054 = 0, $$lcssa2055 = 0, $$lcssa2056 = 0, $$lcssa2057 = 0, $$lcssa2058 = 0, $$lcssa2059 = 0, $$lcssa2060 = 0, $$lcssa2061 = 0, $$lcssa2062 = 0, $$lcssa2063 = 0, $$lcssa2064 = 0, $$lcssa2065 = 0, $$lcssa2066 = 0, $$lcssa2067 = 0;
 var $$lcssa2068 = 0, $$lcssa2069 = 0, $$lcssa2070 = 0, $$lcssa2071 = 0, $$lcssa2072 = 0, $$lcssa2073 = 0, $$lcssa2074 = 0, $$lcssa2075 = 0, $$lcssa2076 = 0, $$lcssa2077 = 0, $$lcssa2078 = 0, $$lcssa2079 = 0, $$lcssa2080 = 0, $$lcssa2081 = 0, $$lcssa2082 = 0, $$lcssa2083 = 0, $$lcssa2084 = 0, $$lcssa2085 = 0, $$lcssa2086 = 0, $$lcssa2087 = 0;
 var $$lcssa2088 = 0, $$lcssa2089 = 0, $$lcssa2090 = 0, $$lcssa2091 = 0, $$lcssa2092 = 0, $$lcssa2093 = 0, $$lcssa2094 = 0, $$lcssa2095 = 0, $$lcssa2096 = 0, $$lcssa2097 = 0, $$lcssa2098 = 0, $$lcssa2099 = 0, $$lcssa2100 = 0, $$lcssa2101 = 0, $$lcssa2102 = 0, $$lcssa2103 = 0, $$lcssa2104 = 0, $$lcssa2105 = 0, $$lcssa2106 = 0, $$lcssa2107 = 0;
 var $$lcssa2108 = 0, $$lcssa2109 = 0, $$lcssa2110 = 0, $$lcssa2111 = 0, $$lcssa2113 = 0, $$lcssa2114 = 0, $$lcssa2115 = 0, $$lcssa2116 = 0, $$lcssa2127 = 0, $$lcssa2128 = 0, $$lcssa2132 = 0, $$lcssa2133 = 0, $$lcssa2135 = 0, $$lcssa2139 = 0, $$lcssa400 = 0, $$lcssa401 = 0, $$neg104 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0;
 var $$sum1125 = 0, $$sum1126 = 0, $$sum1127 = 0, $$sum1128 = 0, $$sum1129 = 0, $$sum1130 = 0, $$sum1131 = 0, $$sum1132 = 0, $$sum1133 = 0, $$sum1134 = 0, $$sum1135 = 0, $$sum1136 = 0, $$sum1137 = 0, $$sum1138 = 0, $$sum1139 = 0, $$sum1140 = 0, $$sum1141 = 0, $$sum1142 = 0, $$sum1143 = 0, $$sum1144 = 0;
 var $$sum1145 = 0, $$sum1146 = 0, $$sum1147 = 0, $$sum1148 = 0, $$sum1149 = 0, $$sum1150 = 0, $$sum1151 = 0, $$sum1152 = 0, $$sum1153 = 0, $$sum1154 = 0, $$sum1155 = 0, $$sum1156 = 0, $$sum1157 = 0, $$sum1158 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum38 = 0;
 var $$sum39 = 0, $$sum40 = 0, $$sum42 = 0, $$sum43 = 0, $$sum44 = 0, $$sum45 = 0, $$sum46 = 0, $$sum47 = 0, $$sum48 = 0, $$sum49 = 0, $$sum50 = 0, $$sum51 = 0, $$sum52 = 0, $$sum53 = 0, $$sum54 = 0, $$sum55 = 0, $$sum56 = 0, $$sum57 = 0, $$sum58 = 0, $$sum59 = 0;
 var $$sum6 = 0, $$sum60 = 0, $$sum61 = 0, $$sum62 = 0, $$sum63 = 0, $$sum64 = 0, $$sum65 = 0, $$sum66 = 0, $$sum67 = 0, $$sum68 = 0, $$sum69 = 0, $$sum7 = 0, $$sum70 = 0, $$sum72 = 0, $$sum74 = 0, $$sum76 = 0, $$sum77 = 0, $$sum79 = 0, $$sum8 = 0, $$sum80 = 0;
 var $$sum82 = 0, $$sum84 = 0, $$sum86 = 0, $$sum865 = 0, $$sum866 = 0, $$sum88 = 0, $$sum89 = 0, $$sum9 = 0, $$sum91 = 0, $$sum93 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0;
 var $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0;
 var $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0;
 var $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0;
 var $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0;
 var $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0;
 var $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0;
 var $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0;
 var $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0;
 var $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0;
 var $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0;
 var $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0;
 var $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0;
 var $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0;
 var $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $args$0858 = 0, $args$12 = 0, $args$1852 = 0;
 var $args$2844 = 0, $args$3 = 0, $args$4838 = 0, $args$5 = 0, $args$6832 = 0, $args$7825 = 0, $args$8816 = 0, $args$9809 = 0, $dy$1 = 0, $i$0791 = 0, $i15$0786 = 0, $idx$0 = 0, $idx12$0795 = 0, $idx12$1789 = 0, $ip$0$be = 0, $ip$0$ph = 0, $ip$0419 = 0, $ip$1 = 0, $ip$2$ph = 0, $ip$2$ph$ph = 0;
 var $ip$3 = 0, $limit$0$ph = 0, $limit$1 = 0, $nargs1$0 = 0, $nargs2$0 = 0, $nargs4$0823 = 0, $num_args$0 = 0, $num_args$1 = 0, $num_curves$0808 = 0, $num_lines$0815 = 0, $op$0$ph = 0, $op$0$ph$ph = 0, $or$cond = 0, $phase$0851 = 0, $phase3$0824 = 0, $req_args$0 = 0, $req_args$0$lcssa2130 = 0, $req_args$0$not = 0, $req_args$0$not85 = 0, $req_args$0$not87 = 0;
 var $req_args$0$not90 = 0, $root$0 = 0, $scevgep$sum = 0, $seed = 0, $set_width_ok$0 = 0, $sext = 0, $shift$0 = 0, $storemerge = 0, $storemerge41 = 0, $sum = 0, $sum71 = 0, $sum73 = 0, $sum75 = 0, $sum78 = 0, $sum81 = 0, $sum83 = 0, $sum92 = 0, $sum94 = 0, $val$0 = 0, $val19$0 = 0;
 var $x$0$ph = 0, $x$10 = 0, $x$14 = 0, $x$16 = 0, $x$1860 = 0, $x$2854 = 0, $x$3 = 0, $x$4846 = 0, $x$5 = 0, $x$6840 = 0, $x$7834 = 0, $x$8827 = 0, $x$9 = 0, $y$0$ph = 0, $y$10 = 0, $y$14 = 0, $y$16 = 0, $y$1859 = 0, $y$2853 = 0, $y$3 = 0;
 var $y$4845 = 0, $y$5839 = 0, $y$6 = 0, $y$7833 = 0, $y$8826 = 0, $y$9 = 0, $zone$0$ph = 0, $zone$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $seed = sp;
 HEAP32[$0>>2] = $decoder;
 HEAP32[$1>>2] = $charstring_base;
 $2 = ((($decoder)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 1368|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($decoder)) + 756|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($7)) + 752|0);
 HEAP8[$8>>0] = 1;
 $9 = $seed;
 $10 = $0;
 $11 = $1;
 $12 = $11 ^ $10;
 $13 = $12 ^ $9;
 $14 = $13 >>> 10;
 $15 = $14 ^ $13;
 $16 = $13 >> 20;
 $17 = $15 ^ $16;
 $18 = $17 & 65535;
 $19 = ($18|0)==(0);
 $$ = $19 ? 29572 : $18;
 HEAP32[$seed>>2] = $$;
 $20 = HEAP32[$0>>2]|0;
 $21 = ((($20)) + 80|0);
 $22 = ((($20)) + 276|0);
 HEAP32[$22>>2] = $21;
 $23 = HEAP32[$0>>2]|0;
 $24 = ((($23)) + 280|0);
 $25 = ((($23)) + 676|0);
 HEAP32[$25>>2] = $24;
 $26 = HEAP32[$0>>2]|0;
 $27 = ((($26)) + 280|0);
 $28 = ((($26)) + 276|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($decoder)) + 68|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($decoder)) + 64|0);
 HEAP8[$32>>0] = 0;
 $33 = HEAP32[$1>>2]|0;
 HEAP32[$27>>2] = $33;
 $34 = HEAP32[$1>>2]|0;
 $35 = (($34) + ($charstring_len)|0);
 $36 = ((($26)) + 284|0);
 HEAP32[$36>>2] = $35;
 $37 = HEAP32[$27>>2]|0;
 $38 = ((($26)) + 288|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($decoder)) + 24|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($decoder)) + 28|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($31|0)!=(0|0);
 if ($43) {
  $44 = ((($31)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_vi[$45 & 127]($46);
 }
 $47 = $29;
 $48 = ($5|0)==(2);
 $$95 = $48 ? 0 : 16;
 $49 = ((($31)) + 12|0);
 $50 = $29;
 $51 = ((($31)) + 12|0);
 $52 = ((($31)) + 16|0);
 $53 = ((($decoder)) + 20|0);
 $54 = ((($31)) + 20|0);
 $ip$0$ph = $37;$limit$0$ph = $35;$x$0$ph = $40;$y$0$ph = $42;$zone$0$ph = $27;
 L4: while(1) {
  $55 = ($ip$0$ph>>>0)<($limit$0$ph>>>0);
  if ($55) {
   $ip$0419 = $ip$0$ph;
  } else {
   $$0 = 0;
   label = 252;
   break;
  }
  L6: while(1) {
   $56 = ((($ip$0419)) + 1|0);
   $57 = HEAP8[$ip$0419>>0]|0;
   $58 = $57&255;
   $59 = ($57&255)>(31);
   $60 = ($57<<24>>24)==(28);
   $or$cond = $59 | $60;
   L8: do {
    if ($or$cond) {
     do {
      if ($60) {
       $61 = ((($ip$0419)) + 2|0);
       $62 = ($61>>>0)<($limit$0$ph>>>0);
       if (!($62)) {
        $$0 = 3;
        label = 252;
        break L4;
       }
       $63 = HEAP8[$56>>0]|0;
       $64 = $63&255;
       $65 = $64 << 8;
       $66 = HEAP8[$61>>0]|0;
       $67 = $66&255;
       $68 = $65 | $67;
       $sext = $68 << 16;
       $69 = $sext >> 16;
       $70 = ((($ip$0419)) + 3|0);
       $ip$1 = $70;$shift$0 = 16;$val$0 = $69;
      } else {
       $71 = ($57&255)<(247);
       if ($71) {
        $72 = (($58) + -139)|0;
        $ip$1 = $56;$shift$0 = 16;$val$0 = $72;
        break;
       }
       $73 = ($57&255)<(251);
       if ($73) {
        $74 = ($56>>>0)<($limit$0$ph>>>0);
        if (!($74)) {
         $$0 = 3;
         label = 252;
         break L4;
        }
        $75 = $58 << 8;
        $76 = (($75) + -63232)|0;
        $77 = ((($ip$0419)) + 2|0);
        $78 = HEAP8[$56>>0]|0;
        $79 = $78&255;
        $80 = $79 | $76;
        $81 = (($80) + 108)|0;
        $ip$1 = $77;$shift$0 = 16;$val$0 = $81;
        break;
       }
       $82 = ($57<<24>>24)==(-1);
       if ($82) {
        $91 = ((($ip$0419)) + 4|0);
        $92 = ($91>>>0)<($limit$0$ph>>>0);
        if (!($92)) {
         $$0 = 3;
         label = 252;
         break L4;
        }
        $93 = HEAP8[$56>>0]|0;
        $94 = $93&255;
        $95 = $94 << 24;
        $96 = ((($ip$0419)) + 2|0);
        $97 = HEAP8[$96>>0]|0;
        $98 = $97&255;
        $99 = $98 << 16;
        $100 = $99 | $95;
        $101 = ((($ip$0419)) + 3|0);
        $102 = HEAP8[$101>>0]|0;
        $103 = $102&255;
        $104 = $103 << 8;
        $105 = $100 | $104;
        $106 = HEAP8[$91>>0]|0;
        $107 = $106&255;
        $108 = $105 | $107;
        $109 = ((($ip$0419)) + 5|0);
        $ip$1 = $109;$shift$0 = $$95;$val$0 = $108;
        break;
       } else {
        $83 = ($56>>>0)<($limit$0$ph>>>0);
        if (!($83)) {
         $$0 = 3;
         label = 252;
         break L4;
        }
        $84 = (251 - ($58))|0;
        $85 = $84 << 8;
        $86 = ((($ip$0419)) + 2|0);
        $87 = HEAP8[$56>>0]|0;
        $88 = $87&255;
        $89 = (($85) + -108)|0;
        $90 = (($89) - ($88))|0;
        $ip$1 = $86;$shift$0 = 16;$val$0 = $90;
        break;
       }
      }
     } while(0);
     $110 = HEAP32[$0>>2]|0;
     $111 = ((($110)) + 276|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $112;
     $114 = (($113) - ($47))|0;
     $115 = ($114|0)>(188);
     if ($115) {
      $$0 = 130;
      label = 252;
      break L4;
     }
     $116 = $val$0 << $shift$0;
     $117 = ((($112)) + 4|0);
     HEAP32[$111>>2] = $117;
     HEAP32[$112>>2] = $116;
     $ip$0$be = $ip$1;
    } else {
     $119 = HEAP32[$0>>2]|0;
     $120 = ((($119)) + 276|0);
     $121 = HEAP32[$120>>2]|0;
     switch ($58|0) {
     case 1:  {
      $$lcssa = $119;$$lcssa2020 = $121;$ip$2$ph$ph = $56;$op$0$ph$ph = 19;
      label = 83;
      break L6;
      break;
     }
     case 3:  {
      $$lcssa1903 = $56;$$lcssa1962 = $119;$$lcssa2021 = $121;
      label = 23;
      break L6;
      break;
     }
     case 4:  {
      $$lcssa1904 = $56;$$lcssa1963 = $119;$$lcssa2022 = $121;
      label = 24;
      break L6;
      break;
     }
     case 5:  {
      $$lcssa1905 = $56;$$lcssa1964 = $119;$$lcssa2023 = $121;
      label = 25;
      break L6;
      break;
     }
     case 6:  {
      $$lcssa1906 = $56;$$lcssa1965 = $119;$$lcssa2024 = $121;
      label = 26;
      break L6;
      break;
     }
     case 7:  {
      $$lcssa1907 = $56;$$lcssa1966 = $119;$$lcssa2025 = $121;
      label = 27;
      break L6;
      break;
     }
     case 8:  {
      $$lcssa1908 = $56;$$lcssa1967 = $119;$$lcssa2026 = $121;
      label = 28;
      break L6;
      break;
     }
     case 9:  {
      $$lcssa1909 = $56;$$lcssa1968 = $119;$$lcssa2027 = $121;
      label = 29;
      break L6;
      break;
     }
     case 10:  {
      $$lcssa1910 = $56;$$lcssa1969 = $119;$$lcssa2028 = $121;
      label = 30;
      break L6;
      break;
     }
     case 11:  {
      $$lcssa1911 = $56;$$lcssa1970 = $119;$$lcssa2029 = $121;
      label = 31;
      break L6;
      break;
     }
     case 13:  {
      $$lcssa1912 = $56;$$lcssa1971 = $119;$$lcssa2030 = $121;
      label = 67;
      break L6;
      break;
     }
     case 14:  {
      $$lcssa1913 = $56;$$lcssa1972 = $119;$$lcssa2031 = $121;
      label = 68;
      break L6;
      break;
     }
     case 16:  {
      $$lcssa1914 = $56;$$lcssa1973 = $119;$$lcssa2032 = $121;
      label = 69;
      break L6;
      break;
     }
     case 18:  {
      $$lcssa1915 = $56;$$lcssa1974 = $119;$$lcssa2033 = $121;
      label = 70;
      break L6;
      break;
     }
     case 19:  {
      $$lcssa1916 = $56;$$lcssa1975 = $119;$$lcssa2034 = $121;
      label = 71;
      break L6;
      break;
     }
     case 20:  {
      $$lcssa1917 = $56;$$lcssa1976 = $119;$$lcssa2035 = $121;
      label = 72;
      break L6;
      break;
     }
     case 21:  {
      $$lcssa1918 = $56;$$lcssa1977 = $119;$$lcssa2036 = $121;
      label = 73;
      break L6;
      break;
     }
     case 22:  {
      $$lcssa1919 = $56;$$lcssa1978 = $119;$$lcssa2037 = $121;
      label = 74;
      break L6;
      break;
     }
     case 23:  {
      $$lcssa1920 = $56;$$lcssa1979 = $119;$$lcssa2038 = $121;
      label = 75;
      break L6;
      break;
     }
     case 24:  {
      $$lcssa1921 = $56;$$lcssa1980 = $119;$$lcssa2039 = $121;
      label = 76;
      break L6;
      break;
     }
     case 25:  {
      $$lcssa1922 = $56;$$lcssa1981 = $119;$$lcssa2040 = $121;
      label = 77;
      break L6;
      break;
     }
     case 26:  {
      $$lcssa1923 = $56;$$lcssa1982 = $119;$$lcssa2041 = $121;
      label = 78;
      break L6;
      break;
     }
     case 27:  {
      $$lcssa1924 = $56;$$lcssa1983 = $119;$$lcssa2042 = $121;
      label = 79;
      break L6;
      break;
     }
     case 29:  {
      $$lcssa1925 = $56;$$lcssa1984 = $119;$$lcssa2043 = $121;
      label = 80;
      break L6;
      break;
     }
     case 30:  {
      $$lcssa1926 = $56;$$lcssa1985 = $119;$$lcssa2044 = $121;
      label = 81;
      break L6;
      break;
     }
     case 31:  {
      $$lcssa1927 = $56;$$lcssa1986 = $119;$$lcssa2045 = $121;
      label = 82;
      break L6;
      break;
     }
     case 12:  {
      break;
     }
     default: {
      $ip$0$be = $56;
      break L8;
     }
     }
     $158 = ($56>>>0)<($limit$0$ph>>>0);
     if (!($158)) {
      $$0 = 3;
      label = 252;
      break L4;
     }
     $159 = ((($ip$0419)) + 2|0);
     $160 = HEAP8[$56>>0]|0;
     $161 = $160&255;
     switch ($161|0) {
     case 0:  {
      $$lcssa = $119;$$lcssa2020 = $121;$ip$2$ph$ph = $159;$op$0$ph$ph = 25;
      label = 83;
      break L6;
      break;
     }
     case 1:  {
      $$lcssa1987 = $119;$$lcssa2046 = $121;$$lcssa2079 = $159;
      label = 34;
      break L6;
      break;
     }
     case 2:  {
      $$lcssa1988 = $119;$$lcssa2047 = $121;$$lcssa2080 = $159;
      label = 35;
      break L6;
      break;
     }
     case 3:  {
      $$lcssa1989 = $119;$$lcssa2048 = $121;$$lcssa2081 = $159;
      label = 36;
      break L6;
      break;
     }
     case 4:  {
      $$lcssa1990 = $119;$$lcssa2049 = $121;$$lcssa2082 = $159;
      label = 37;
      break L6;
      break;
     }
     case 5:  {
      $$lcssa1991 = $119;$$lcssa2050 = $121;$$lcssa2083 = $159;
      label = 38;
      break L6;
      break;
     }
     case 6:  {
      $$lcssa1992 = $119;$$lcssa2051 = $121;$$lcssa2084 = $159;
      label = 39;
      break L6;
      break;
     }
     case 7:  {
      $$lcssa1993 = $119;$$lcssa2052 = $121;$$lcssa2085 = $159;
      label = 40;
      break L6;
      break;
     }
     case 8:  {
      $$lcssa1994 = $119;$$lcssa2053 = $121;$$lcssa2086 = $159;
      label = 41;
      break L6;
      break;
     }
     case 9:  {
      $$lcssa1995 = $119;$$lcssa2054 = $121;$$lcssa2087 = $159;
      label = 42;
      break L6;
      break;
     }
     case 10:  {
      $$lcssa1996 = $119;$$lcssa2055 = $121;$$lcssa2088 = $159;
      label = 43;
      break L6;
      break;
     }
     case 11:  {
      $$lcssa1997 = $119;$$lcssa2056 = $121;$$lcssa2089 = $159;
      label = 44;
      break L6;
      break;
     }
     case 12:  {
      $$lcssa1998 = $119;$$lcssa2057 = $121;$$lcssa2090 = $159;
      label = 45;
      break L6;
      break;
     }
     case 13:  {
      $$lcssa1999 = $119;$$lcssa2058 = $121;$$lcssa2091 = $159;
      label = 46;
      break L6;
      break;
     }
     case 14:  {
      $$lcssa2000 = $119;$$lcssa2059 = $121;$$lcssa2092 = $159;
      label = 47;
      break L6;
      break;
     }
     case 15:  {
      $$lcssa2001 = $119;$$lcssa2060 = $121;$$lcssa2093 = $159;
      label = 48;
      break L6;
      break;
     }
     case 16:  {
      $$lcssa2002 = $119;$$lcssa2061 = $121;$$lcssa2094 = $159;
      label = 49;
      break L6;
      break;
     }
     case 17:  {
      $$lcssa2003 = $119;$$lcssa2062 = $121;$$lcssa2095 = $159;
      label = 50;
      break L6;
      break;
     }
     case 18:  {
      $$lcssa2004 = $119;$$lcssa2063 = $121;$$lcssa2096 = $159;
      label = 51;
      break L6;
      break;
     }
     case 20:  {
      $$lcssa2005 = $119;$$lcssa2064 = $121;$$lcssa2097 = $159;
      label = 52;
      break L6;
      break;
     }
     case 21:  {
      $$lcssa2006 = $119;$$lcssa2065 = $121;$$lcssa2098 = $159;
      label = 53;
      break L6;
      break;
     }
     case 22:  {
      $$lcssa2007 = $119;$$lcssa2066 = $121;$$lcssa2099 = $159;
      label = 54;
      break L6;
      break;
     }
     case 23:  {
      $$lcssa2008 = $119;$$lcssa2067 = $121;$$lcssa2100 = $159;
      label = 55;
      break L6;
      break;
     }
     case 24:  {
      $$lcssa2009 = $119;$$lcssa2068 = $121;$$lcssa2101 = $159;
      label = 56;
      break L6;
      break;
     }
     case 26:  {
      $$lcssa2010 = $119;$$lcssa2069 = $121;$$lcssa2102 = $159;
      label = 57;
      break L6;
      break;
     }
     case 27:  {
      $$lcssa2011 = $119;$$lcssa2070 = $121;$$lcssa2103 = $159;
      label = 58;
      break L6;
      break;
     }
     case 28:  {
      $$lcssa2012 = $119;$$lcssa2071 = $121;$$lcssa2104 = $159;
      label = 59;
      break L6;
      break;
     }
     case 29:  {
      $$lcssa2013 = $119;$$lcssa2072 = $121;$$lcssa2105 = $159;
      label = 60;
      break L6;
      break;
     }
     case 30:  {
      $$lcssa2014 = $119;$$lcssa2073 = $121;$$lcssa2106 = $159;
      label = 61;
      break L6;
      break;
     }
     case 33:  {
      $$lcssa2015 = $119;$$lcssa2074 = $121;$$lcssa2107 = $159;
      label = 62;
      break L6;
      break;
     }
     case 34:  {
      $$lcssa2016 = $119;$$lcssa2075 = $121;$$lcssa2108 = $159;
      label = 63;
      break L6;
      break;
     }
     case 35:  {
      $$lcssa2017 = $119;$$lcssa2076 = $121;$$lcssa2109 = $159;
      label = 64;
      break L6;
      break;
     }
     case 36:  {
      $$lcssa2018 = $119;$$lcssa2077 = $121;$$lcssa2110 = $159;
      label = 65;
      break L6;
      break;
     }
     case 37:  {
      $$lcssa2019 = $119;$$lcssa2078 = $121;$$lcssa2111 = $159;
      label = 66;
      break L6;
      break;
     }
     default: {
      $ip$0$be = $159;
     }
     }
    }
   } while(0);
   $118 = ($ip$0$be>>>0)<($limit$0$ph>>>0);
   if ($118) {
    $ip$0419 = $ip$0$be;
   } else {
    $$0 = 0;
    label = 252;
    break L4;
   }
  }
  switch (label|0) {
   case 23: {
    label = 0;
    $122 = ((($$lcssa1962)) + 80|0);
    $123 = $$lcssa2021;
    $124 = $122;
    $125 = (($123) - ($124))|0;
    $$in = $125;$397 = $$lcssa2021;$ip$2$ph = $$lcssa1903;$op$0$ph = 20;
    break;
   }
   case 24: {
    label = 0;
    $126 = ((($$lcssa1963)) + 80|0);
    $127 = $$lcssa2022;
    $128 = $126;
    $129 = (($127) - ($128))|0;
    $$in = $129;$397 = $$lcssa2022;$ip$2$ph = $$lcssa1904;$op$0$ph = 3;
    break;
   }
   case 25: {
    label = 0;
    $130 = ((($$lcssa1964)) + 80|0);
    $131 = $$lcssa2023;
    $132 = $130;
    $133 = (($131) - ($132))|0;
    $$in = $133;$397 = $$lcssa2023;$ip$2$ph = $$lcssa1905;$op$0$ph = 4;
    break;
   }
   case 26: {
    label = 0;
    $134 = ((($$lcssa1965)) + 80|0);
    $135 = $$lcssa2024;
    $136 = $134;
    $137 = (($135) - ($136))|0;
    $$in = $137;$397 = $$lcssa2024;$ip$2$ph = $$lcssa1906;$op$0$ph = 5;
    break;
   }
   case 27: {
    label = 0;
    $138 = ((($$lcssa1966)) + 80|0);
    $139 = $$lcssa2025;
    $140 = $138;
    $141 = (($139) - ($140))|0;
    $$in = $141;$397 = $$lcssa2025;$ip$2$ph = $$lcssa1907;$op$0$ph = 6;
    break;
   }
   case 28: {
    label = 0;
    $142 = ((($$lcssa1967)) + 80|0);
    $143 = $$lcssa2026;
    $144 = $142;
    $145 = (($143) - ($144))|0;
    $$in = $145;$397 = $$lcssa2026;$ip$2$ph = $$lcssa1908;$op$0$ph = 7;
    break;
   }
   case 29: {
    label = 0;
    $146 = ((($$lcssa1968)) + 80|0);
    $147 = $$lcssa2027;
    $148 = $146;
    $149 = (($147) - ($148))|0;
    $$in = $149;$397 = $$lcssa2027;$ip$2$ph = $$lcssa1909;$op$0$ph = 53;
    break;
   }
   case 30: {
    label = 0;
    $150 = ((($$lcssa1969)) + 80|0);
    $151 = $$lcssa2028;
    $152 = $150;
    $153 = (($151) - ($152))|0;
    $$in = $153;$397 = $$lcssa2028;$ip$2$ph = $$lcssa1910;$op$0$ph = 49;
    break;
   }
   case 31: {
    label = 0;
    $154 = ((($$lcssa1970)) + 80|0);
    $155 = $$lcssa2029;
    $156 = $154;
    $157 = (($155) - ($156))|0;
    $$in = $157;$397 = $$lcssa2029;$ip$2$ph = $$lcssa1911;$op$0$ph = 51;
    break;
   }
   case 34: {
    label = 0;
    $162 = ((($$lcssa1987)) + 80|0);
    $163 = $$lcssa2046;
    $164 = $162;
    $165 = (($163) - ($164))|0;
    $$in = $165;$397 = $$lcssa2046;$ip$2$ph = $$lcssa2079;$op$0$ph = 20;
    break;
   }
   case 35: {
    label = 0;
    $166 = ((($$lcssa1988)) + 80|0);
    $167 = $$lcssa2047;
    $168 = $166;
    $169 = (($167) - ($168))|0;
    $$in = $169;$397 = $$lcssa2047;$ip$2$ph = $$lcssa2080;$op$0$ph = 19;
    break;
   }
   case 36: {
    label = 0;
    $170 = ((($$lcssa1989)) + 80|0);
    $171 = $$lcssa2048;
    $172 = $170;
    $173 = (($171) - ($172))|0;
    $$in = $173;$397 = $$lcssa2048;$ip$2$ph = $$lcssa2081;$op$0$ph = 44;
    break;
   }
   case 37: {
    label = 0;
    $174 = ((($$lcssa1990)) + 80|0);
    $175 = $$lcssa2049;
    $176 = $174;
    $177 = (($175) - ($176))|0;
    $$in = $177;$397 = $$lcssa2049;$ip$2$ph = $$lcssa2082;$op$0$ph = 45;
    break;
   }
   case 38: {
    label = 0;
    $178 = ((($$lcssa1991)) + 80|0);
    $179 = $$lcssa2050;
    $180 = $178;
    $181 = (($179) - ($180))|0;
    $$in = $181;$397 = $$lcssa2050;$ip$2$ph = $$lcssa2083;$op$0$ph = 46;
    break;
   }
   case 39: {
    label = 0;
    $182 = ((($$lcssa1992)) + 80|0);
    $183 = $$lcssa2051;
    $184 = $182;
    $185 = (($183) - ($184))|0;
    $$in = $185;$397 = $$lcssa2051;$ip$2$ph = $$lcssa2084;$op$0$ph = 56;
    break;
   }
   case 40: {
    label = 0;
    $186 = ((($$lcssa1993)) + 80|0);
    $187 = $$lcssa2052;
    $188 = $186;
    $189 = (($187) - ($188))|0;
    $$in = $189;$397 = $$lcssa2052;$ip$2$ph = $$lcssa2085;$op$0$ph = 57;
    break;
   }
   case 41: {
    label = 0;
    $190 = ((($$lcssa1994)) + 80|0);
    $191 = $$lcssa2053;
    $192 = $190;
    $193 = (($191) - ($192))|0;
    $$in = $193;$397 = $$lcssa2053;$ip$2$ph = $$lcssa2086;$op$0$ph = 42;
    break;
   }
   case 42: {
    label = 0;
    $194 = ((($$lcssa1995)) + 80|0);
    $195 = $$lcssa2054;
    $196 = $194;
    $197 = (($195) - ($196))|0;
    $$in = $197;$397 = $$lcssa2054;$ip$2$ph = $$lcssa2087;$op$0$ph = 26;
    break;
   }
   case 43: {
    label = 0;
    $198 = ((($$lcssa1996)) + 80|0);
    $199 = $$lcssa2055;
    $200 = $198;
    $201 = (($199) - ($200))|0;
    $$in = $201;$397 = $$lcssa2055;$ip$2$ph = $$lcssa2088;$op$0$ph = 27;
    break;
   }
   case 44: {
    label = 0;
    $202 = ((($$lcssa1997)) + 80|0);
    $203 = $$lcssa2056;
    $204 = $202;
    $205 = (($203) - ($204))|0;
    $$in = $205;$397 = $$lcssa2056;$ip$2$ph = $$lcssa2089;$op$0$ph = 28;
    break;
   }
   case 45: {
    label = 0;
    $206 = ((($$lcssa1998)) + 80|0);
    $207 = $$lcssa2057;
    $208 = $206;
    $209 = (($207) - ($208))|0;
    $$in = $209;$397 = $$lcssa2057;$ip$2$ph = $$lcssa2090;$op$0$ph = 29;
    break;
   }
   case 46: {
    label = 0;
    $210 = ((($$lcssa1999)) + 80|0);
    $211 = $$lcssa2058;
    $212 = $210;
    $213 = (($211) - ($212))|0;
    $$in = $213;$397 = $$lcssa2058;$ip$2$ph = $$lcssa2091;$op$0$ph = 43;
    break;
   }
   case 47: {
    label = 0;
    $214 = ((($$lcssa2000)) + 80|0);
    $215 = $$lcssa2059;
    $216 = $214;
    $217 = (($215) - ($216))|0;
    $$in = $217;$397 = $$lcssa2059;$ip$2$ph = $$lcssa2092;$op$0$ph = 30;
    break;
   }
   case 48: {
    label = 0;
    $218 = ((($$lcssa2001)) + 80|0);
    $219 = $$lcssa2060;
    $220 = $218;
    $221 = (($219) - ($220))|0;
    $$in = $221;$397 = $$lcssa2060;$ip$2$ph = $$lcssa2093;$op$0$ph = 47;
    break;
   }
   case 49: {
    label = 0;
    $222 = ((($$lcssa2002)) + 80|0);
    $223 = $$lcssa2061;
    $224 = $222;
    $225 = (($223) - ($224))|0;
    $$in = $225;$397 = $$lcssa2061;$ip$2$ph = $$lcssa2094;$op$0$ph = 54;
    break;
   }
   case 50: {
    label = 0;
    $226 = ((($$lcssa2003)) + 80|0);
    $227 = $$lcssa2062;
    $228 = $226;
    $229 = (($227) - ($228))|0;
    $$in = $229;$397 = $$lcssa2062;$ip$2$ph = $$lcssa2095;$op$0$ph = 55;
    break;
   }
   case 51: {
    label = 0;
    $230 = ((($$lcssa2004)) + 80|0);
    $231 = $$lcssa2063;
    $232 = $230;
    $233 = (($231) - ($232))|0;
    $$in = $233;$397 = $$lcssa2063;$ip$2$ph = $$lcssa2096;$op$0$ph = 35;
    break;
   }
   case 52: {
    label = 0;
    $234 = ((($$lcssa2005)) + 80|0);
    $235 = $$lcssa2064;
    $236 = $234;
    $237 = (($235) - ($236))|0;
    $$in = $237;$397 = $$lcssa2064;$ip$2$ph = $$lcssa2097;$op$0$ph = 40;
    break;
   }
   case 53: {
    label = 0;
    $238 = ((($$lcssa2006)) + 80|0);
    $239 = $$lcssa2065;
    $240 = $238;
    $241 = (($239) - ($240))|0;
    $$in = $241;$397 = $$lcssa2065;$ip$2$ph = $$lcssa2098;$op$0$ph = 41;
    break;
   }
   case 54: {
    label = 0;
    $242 = ((($$lcssa2007)) + 80|0);
    $243 = $$lcssa2066;
    $244 = $242;
    $245 = (($243) - ($244))|0;
    $$in = $245;$397 = $$lcssa2066;$ip$2$ph = $$lcssa2099;$op$0$ph = 48;
    break;
   }
   case 55: {
    label = 0;
    $246 = ((($$lcssa2008)) + 80|0);
    $247 = $$lcssa2067;
    $248 = $246;
    $249 = (($247) - ($248))|0;
    $$in = $249;$397 = $$lcssa2067;$ip$2$ph = $$lcssa2100;$op$0$ph = 31;
    break;
   }
   case 56: {
    label = 0;
    $250 = ((($$lcssa2009)) + 80|0);
    $251 = $$lcssa2068;
    $252 = $250;
    $253 = (($251) - ($252))|0;
    $$in = $253;$397 = $$lcssa2068;$ip$2$ph = $$lcssa2101;$op$0$ph = 32;
    break;
   }
   case 57: {
    label = 0;
    $254 = ((($$lcssa2010)) + 80|0);
    $255 = $$lcssa2069;
    $256 = $254;
    $257 = (($255) - ($256))|0;
    $$in = $257;$397 = $$lcssa2069;$ip$2$ph = $$lcssa2102;$op$0$ph = 33;
    break;
   }
   case 58: {
    label = 0;
    $258 = ((($$lcssa2011)) + 80|0);
    $259 = $$lcssa2070;
    $260 = $258;
    $261 = (($259) - ($260))|0;
    $$in = $261;$397 = $$lcssa2070;$ip$2$ph = $$lcssa2103;$op$0$ph = 39;
    break;
   }
   case 59: {
    label = 0;
    $262 = ((($$lcssa2012)) + 80|0);
    $263 = $$lcssa2071;
    $264 = $262;
    $265 = (($263) - ($264))|0;
    $$in = $265;$397 = $$lcssa2071;$ip$2$ph = $$lcssa2104;$op$0$ph = 36;
    break;
   }
   case 60: {
    label = 0;
    $266 = ((($$lcssa2013)) + 80|0);
    $267 = $$lcssa2072;
    $268 = $266;
    $269 = (($267) - ($268))|0;
    $$in = $269;$397 = $$lcssa2072;$ip$2$ph = $$lcssa2105;$op$0$ph = 37;
    break;
   }
   case 61: {
    label = 0;
    $270 = ((($$lcssa2014)) + 80|0);
    $271 = $$lcssa2073;
    $272 = $270;
    $273 = (($271) - ($272))|0;
    $$in = $273;$397 = $$lcssa2073;$ip$2$ph = $$lcssa2106;$op$0$ph = 38;
    break;
   }
   case 62: {
    label = 0;
    $274 = ((($$lcssa2015)) + 80|0);
    $275 = $$lcssa2074;
    $276 = $274;
    $277 = (($275) - ($276))|0;
    $$in = $277;$397 = $$lcssa2074;$ip$2$ph = $$lcssa2107;$op$0$ph = 58;
    break;
   }
   case 63: {
    label = 0;
    $278 = ((($$lcssa2016)) + 80|0);
    $279 = $$lcssa2075;
    $280 = $278;
    $281 = (($279) - ($280))|0;
    $$in = $281;$397 = $$lcssa2075;$ip$2$ph = $$lcssa2108;$op$0$ph = 15;
    break;
   }
   case 64: {
    label = 0;
    $282 = ((($$lcssa2017)) + 80|0);
    $283 = $$lcssa2076;
    $284 = $282;
    $285 = (($283) - ($284))|0;
    $$in = $285;$397 = $$lcssa2076;$ip$2$ph = $$lcssa2109;$op$0$ph = 14;
    break;
   }
   case 65: {
    label = 0;
    $286 = ((($$lcssa2018)) + 80|0);
    $287 = $$lcssa2077;
    $288 = $286;
    $289 = (($287) - ($288))|0;
    $$in = $289;$397 = $$lcssa2077;$ip$2$ph = $$lcssa2110;$op$0$ph = 16;
    break;
   }
   case 66: {
    label = 0;
    $290 = ((($$lcssa2019)) + 80|0);
    $291 = $$lcssa2078;
    $292 = $290;
    $293 = (($291) - ($292))|0;
    $$in = $293;$397 = $$lcssa2078;$ip$2$ph = $$lcssa2111;$op$0$ph = 17;
    break;
   }
   case 67: {
    label = 0;
    $294 = ((($$lcssa1971)) + 80|0);
    $295 = $$lcssa2030;
    $296 = $294;
    $297 = (($295) - ($296))|0;
    $$in = $297;$397 = $$lcssa2030;$ip$2$ph = $$lcssa1912;$op$0$ph = 52;
    break;
   }
   case 68: {
    label = 0;
    $298 = ((($$lcssa1972)) + 80|0);
    $299 = $$lcssa2031;
    $300 = $298;
    $301 = (($299) - ($300))|0;
    $$in = $301;$397 = $$lcssa2031;$ip$2$ph = $$lcssa1913;$op$0$ph = 18;
    break;
   }
   case 69: {
    label = 0;
    $302 = ((($$lcssa1973)) + 80|0);
    $303 = $$lcssa2032;
    $304 = $302;
    $305 = (($303) - ($304))|0;
    $$in = $305;$397 = $$lcssa2032;$ip$2$ph = $$lcssa1914;$op$0$ph = 34;
    break;
   }
   case 70: {
    label = 0;
    $306 = ((($$lcssa1974)) + 80|0);
    $307 = $$lcssa2033;
    $308 = $306;
    $309 = (($307) - ($308))|0;
    $$in = $309;$397 = $$lcssa2033;$ip$2$ph = $$lcssa1915;$op$0$ph = 21;
    break;
   }
   case 71: {
    label = 0;
    $310 = ((($$lcssa1975)) + 80|0);
    $311 = $$lcssa2034;
    $312 = $310;
    $313 = (($311) - ($312))|0;
    $$in = $313;$397 = $$lcssa2034;$ip$2$ph = $$lcssa1916;$op$0$ph = 23;
    break;
   }
   case 72: {
    label = 0;
    $314 = ((($$lcssa1976)) + 80|0);
    $315 = $$lcssa2035;
    $316 = $314;
    $317 = (($315) - ($316))|0;
    $$in = $317;$397 = $$lcssa2035;$ip$2$ph = $$lcssa1917;$op$0$ph = 24;
    break;
   }
   case 73: {
    label = 0;
    $318 = ((($$lcssa1977)) + 80|0);
    $319 = $$lcssa2036;
    $320 = $318;
    $321 = (($319) - ($320))|0;
    $$in = $321;$397 = $$lcssa2036;$ip$2$ph = $$lcssa1918;$op$0$ph = 1;
    break;
   }
   case 74: {
    label = 0;
    $322 = ((($$lcssa1978)) + 80|0);
    $323 = $$lcssa2037;
    $324 = $322;
    $325 = (($323) - ($324))|0;
    $$in = $325;$397 = $$lcssa2037;$ip$2$ph = $$lcssa1919;$op$0$ph = 2;
    break;
   }
   case 75: {
    label = 0;
    $326 = ((($$lcssa1979)) + 80|0);
    $327 = $$lcssa2038;
    $328 = $326;
    $329 = (($327) - ($328))|0;
    $$in = $329;$397 = $$lcssa2038;$ip$2$ph = $$lcssa1920;$op$0$ph = 22;
    break;
   }
   case 76: {
    label = 0;
    $330 = ((($$lcssa1980)) + 80|0);
    $331 = $$lcssa2039;
    $332 = $330;
    $333 = (($331) - ($332))|0;
    $$in = $333;$397 = $$lcssa2039;$ip$2$ph = $$lcssa1921;$op$0$ph = 10;
    break;
   }
   case 77: {
    label = 0;
    $334 = ((($$lcssa1981)) + 80|0);
    $335 = $$lcssa2040;
    $336 = $334;
    $337 = (($335) - ($336))|0;
    $$in = $337;$397 = $$lcssa2040;$ip$2$ph = $$lcssa1922;$op$0$ph = 11;
    break;
   }
   case 78: {
    label = 0;
    $338 = ((($$lcssa1982)) + 80|0);
    $339 = $$lcssa2041;
    $340 = $338;
    $341 = (($339) - ($340))|0;
    $$in = $341;$397 = $$lcssa2041;$ip$2$ph = $$lcssa1923;$op$0$ph = 13;
    break;
   }
   case 79: {
    label = 0;
    $342 = ((($$lcssa1983)) + 80|0);
    $343 = $$lcssa2042;
    $344 = $342;
    $345 = (($343) - ($344))|0;
    $$in = $345;$397 = $$lcssa2042;$ip$2$ph = $$lcssa1924;$op$0$ph = 8;
    break;
   }
   case 80: {
    label = 0;
    $346 = ((($$lcssa1984)) + 80|0);
    $347 = $$lcssa2043;
    $348 = $346;
    $349 = (($347) - ($348))|0;
    $$in = $349;$397 = $$lcssa2043;$ip$2$ph = $$lcssa1925;$op$0$ph = 50;
    break;
   }
   case 81: {
    label = 0;
    $350 = ((($$lcssa1985)) + 80|0);
    $351 = $$lcssa2044;
    $352 = $350;
    $353 = (($351) - ($352))|0;
    $$in = $353;$397 = $$lcssa2044;$ip$2$ph = $$lcssa1926;$op$0$ph = 12;
    break;
   }
   case 82: {
    label = 0;
    $354 = ((($$lcssa1986)) + 80|0);
    $355 = $$lcssa2045;
    $356 = $354;
    $357 = (($355) - ($356))|0;
    $$in = $357;$397 = $$lcssa2045;$ip$2$ph = $$lcssa1927;$op$0$ph = 9;
    break;
   }
   case 83: {
    label = 0;
    $358 = ((($$lcssa)) + 80|0);
    $359 = $$lcssa2020;
    $360 = $358;
    $361 = (($359) - ($360))|0;
    $$in = $361;$397 = $$lcssa2020;$ip$2$ph = $ip$2$ph$ph;$op$0$ph = $op$0$ph$ph;
    break;
   }
  }
  $362 = $$in >> 2;
  $363 = (26599 + ($op$0$ph)|0);
  $364 = HEAP8[$363>>0]|0;
  $365 = $364&255;
  $366 = $365 & 128;
  $367 = ($366|0)==(0);
  if ($367) {
   $num_args$1 = $362;$req_args$0 = $365;
  } else {
   $368 = ($$in|0)>(0);
   L95: do {
    if ($368) {
     $369 = HEAP32[$0>>2]|0;
     $370 = ((($369)) + 752|0);
     $371 = HEAP8[$370>>0]|0;
     $372 = ($371<<24>>24)==(0);
     if ($372) {
      $num_args$0 = $362;
     } else {
      switch ($op$0$ph|0) {
      case 3: case 2:  {
       $373 = $362 & 2;
       $set_width_ok$0 = $373;
       break;
      }
      case 24: case 23: case 1: case 22: case 21: case 20: case 19:  {
       $374 = $362 & 1;
       $set_width_ok$0 = $374;
       break;
      }
      case 18:  {
       $375 = $362 & -5;
       $376 = ($375|0)==(1);
       $377 = $376&1;
       $set_width_ok$0 = $377;
       break;
      }
      default: {
       $num_args$0 = $362;
       break L95;
      }
      }
      $378 = ($set_width_ok$0|0)==(0);
      if ($378) {
       $num_args$0 = $362;
      } else {
       $379 = HEAP32[$0>>2]|0;
       $380 = ((($379)) + 748|0);
       $381 = HEAP32[$380>>2]|0;
       $382 = HEAP32[$29>>2]|0;
       $383 = $382 >> 16;
       $384 = (($383) + ($381))|0;
       $385 = ((($379)) + 744|0);
       HEAP32[$385>>2] = $384;
       $386 = HEAP32[$0>>2]|0;
       $387 = ((($386)) + 753|0);
       $388 = HEAP8[$387>>0]|0;
       $389 = ($388<<24>>24)==(0);
       if (!($389)) {
        $$0 = 0;
        label = 252;
        break L4;
       }
       $390 = (($362) + -1)|0;
       $num_args$0 = $390;
      }
     }
    } else {
     $num_args$0 = $362;
    }
   } while(0);
   $391 = HEAP32[$0>>2]|0;
   $392 = ((($391)) + 752|0);
   HEAP8[$392>>0] = 0;
   $num_args$1 = $num_args$0;$req_args$0 = 0;
  }
  $393 = $req_args$0 & 15;
  $394 = ($num_args$1|0)<($393|0);
  if ($394) {
   $$0 = 129;
   label = 252;
   break;
  }
  $395 = (0 - ($393))|0;
  $396 = (($397) + ($395<<2)|0);
  $398 = (($num_args$1) - ($393))|0;
  L108: do {
   switch ($op$0$ph|0) {
   case 56:  {
    $$lcssa2127 = $397;$$lcssa2132 = $393;$$lcssa2135 = $396;
    label = 183;
    break L4;
    break;
   }
   case 18:  {
    $$lcssa2128 = $397;$$lcssa2133 = $393;$$lcssa2139 = $398;$req_args$0$lcssa2130 = $req_args$0;
    label = 184;
    break L4;
    break;
   }
   case 22: case 21: case 20: case 19:  {
    if ($43) {
     $399 = HEAP32[$49>>2]|0;
     $400 = HEAP32[$31>>2]|0;
     $401 = ($op$0$ph|0)==(19);
     $402 = ($op$0$ph|0)==(21);
     $403 = $401 | $402;
     $404 = $403&1;
     $405 = (($398|0) / 2)&-1;
     $406 = $398 & -2;
     $sum94 = (($393) + ($406))|0;
     $$sum93 = (0 - ($sum94))|0;
     $407 = (($397) + ($$sum93<<2)|0);
     FUNCTION_TABLE_viiii[$399 & 15]($400,$404,$405,$407);
    }
    $408 = (($398|0) / 2)&-1;
    $409 = HEAP32[$0>>2]|0;
    $410 = ((($409)) + 756|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = (($411) + ($408))|0;
    HEAP32[$410>>2] = $412;
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 24: case 23:  {
    $413 = ($398|0)>(0);
    if ($413) {
     if ($43) {
      $414 = HEAP32[$51>>2]|0;
      $415 = HEAP32[$31>>2]|0;
      $416 = (($398|0) / 2)&-1;
      $417 = $398 & -2;
      $sum92 = (($393) + ($417))|0;
      $$sum91 = (0 - ($sum92))|0;
      $418 = (($397) + ($$sum91<<2)|0);
      FUNCTION_TABLE_viiii[$414 & 15]($415,0,$416,$418);
     }
     $419 = (($398|0) / 2)&-1;
     $420 = HEAP32[$0>>2]|0;
     $421 = ((($420)) + 756|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = (($422) + ($419))|0;
     HEAP32[$421>>2] = $423;
    }
    $424 = HEAP32[$0>>2]|0;
    $425 = ((($424)) + 756|0);
    $426 = HEAP32[$425>>2]|0;
    $427 = (($426) + 7)|0;
    $428 = $427 >> 3;
    $429 = (($ip$2$ph) + ($428)|0);
    $430 = ($429>>>0)<($limit$0$ph>>>0);
    if (!($430)) {
     $$0 = 3;
     label = 252;
     break L4;
    }
    do {
     if ($43) {
      $431 = ($op$0$ph|0)==(23);
      if ($431) {
       $432 = HEAP32[$52>>2]|0;
       $433 = HEAP32[$31>>2]|0;
       $434 = HEAP32[$53>>2]|0;
       $435 = ((($434)) + 2|0);
       $436 = HEAP16[$435>>1]|0;
       $437 = $436 << 16 >> 16;
       FUNCTION_TABLE_viiii[$432 & 15]($433,$437,$426,$ip$2$ph);
       break;
      } else {
       $438 = HEAP32[$54>>2]|0;
       $439 = HEAP32[$31>>2]|0;
       FUNCTION_TABLE_viii[$438 & 31]($439,$426,$ip$2$ph);
       break;
      }
     }
    } while(0);
    $440 = HEAP32[$0>>2]|0;
    $441 = ((($440)) + 756|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = (($442) + 7)|0;
    $444 = $443 >> 3;
    $445 = (($ip$2$ph) + ($444)|0);
    $args$12 = $29;$ip$3 = $445;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 1:  {
    _cff_builder_close_contour($decoder);
    HEAP8[$32>>0] = 0;
    $$sum88 = (-2 - ($393))|0;
    $446 = (($397) + ($$sum88<<2)|0);
    $447 = HEAP32[$446>>2]|0;
    $448 = (($447) + ($x$0$ph))|0;
    $req_args$0$not90 = $req_args$0 | -16;
    $$sum89 = $req_args$0$not90 ^ 15;
    $449 = (($397) + ($$sum89<<2)|0);
    $450 = HEAP32[$449>>2]|0;
    $451 = (($450) + ($y$0$ph))|0;
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $448;$y$16 = $451;$zone$1 = $zone$0$ph;
    break;
   }
   case 3:  {
    _cff_builder_close_contour($decoder);
    HEAP8[$32>>0] = 0;
    $req_args$0$not87 = $req_args$0 | -16;
    $$sum86 = $req_args$0$not87 ^ 15;
    $452 = (($397) + ($$sum86<<2)|0);
    $453 = HEAP32[$452>>2]|0;
    $454 = (($453) + ($y$0$ph))|0;
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $454;$zone$1 = $zone$0$ph;
    break;
   }
   case 2:  {
    _cff_builder_close_contour($decoder);
    HEAP8[$32>>0] = 0;
    $req_args$0$not85 = $req_args$0 | -16;
    $$sum84 = $req_args$0$not85 ^ 15;
    $455 = (($397) + ($$sum84<<2)|0);
    $456 = HEAP32[$455>>2]|0;
    $457 = (($456) + ($x$0$ph))|0;
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $457;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 4:  {
    $458 = (_cff_builder_start_point($decoder,$x$0$ph,$y$0$ph)|0);
    $459 = ($458|0)==(0);
    if (!($459)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $460 = (($398|0) / 2)&-1;
    $461 = (_check_points($decoder,$460)|0);
    $462 = ($461|0)==(0);
    if (!($462)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $463 = ($398|0)<(2);
    if ($463) {
     $$0 = 129;
     label = 252;
     break L4;
    }
    $464 = $398 & -2;
    $sum83 = (($393) + ($464))|0;
    $$sum82 = (0 - ($sum83))|0;
    $465 = (($397) + ($$sum82<<2)|0);
    $466 = HEAP32[$0>>2]|0;
    $467 = ((($466)) + 276|0);
    $468 = HEAP32[$467>>2]|0;
    $469 = ($465>>>0)<($468>>>0);
    if ($469) {
     $args$0858 = $465;$x$1860 = $x$0$ph;$y$1859 = $y$0$ph;
     while(1) {
      $470 = HEAP32[$args$0858>>2]|0;
      $471 = (($470) + ($x$1860))|0;
      $472 = ((($args$0858)) + 4|0);
      $473 = HEAP32[$472>>2]|0;
      $474 = (($473) + ($y$1859))|0;
      _cff_builder_add_point($decoder,$471,$474,1);
      $475 = ((($args$0858)) + 8|0);
      $476 = HEAP32[$0>>2]|0;
      $477 = ((($476)) + 276|0);
      $478 = HEAP32[$477>>2]|0;
      $479 = ($475>>>0)<($478>>>0);
      if ($479) {
       $args$0858 = $475;$x$1860 = $471;$y$1859 = $474;
      } else {
       $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $471;$y$16 = $474;$zone$1 = $zone$0$ph;
       break;
      }
     }
    } else {
     $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    }
    break;
   }
   case 6: case 5:  {
    $480 = ($op$0$ph|0)==(5);
    $481 = $480&1;
    $482 = ($398|0)<(0);
    if ($482) {
     $$0 = 129;
     label = 252;
     break L4;
    }
    $483 = ($num_args$1|0)==($393|0);
    if ($483) {
     $args$12 = $396;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    } else {
     $484 = (_cff_builder_start_point($decoder,$x$0$ph,$y$0$ph)|0);
     $485 = ($484|0)==(0);
     if (!($485)) {
      $$0 = 0;
      label = 252;
      break L4;
     }
     $486 = (_check_points($decoder,$398)|0);
     $487 = ($486|0)==(0);
     if (!($487)) {
      $$0 = 0;
      label = 252;
      break L4;
     }
     $488 = HEAP32[$0>>2]|0;
     $489 = ((($488)) + 276|0);
     $490 = HEAP32[$489>>2]|0;
     $491 = ($29>>>0)<($490>>>0);
     if ($491) {
      $args$1852 = $29;$phase$0851 = $481;$x$2854 = $x$0$ph;$y$2853 = $y$0$ph;
      while(1) {
       $492 = ($phase$0851|0)==(0);
       $493 = HEAP32[$args$1852>>2]|0;
       $494 = $492 ? $493 : 0;
       $y$3 = (($494) + ($y$2853))|0;
       $495 = $492 ? 0 : $493;
       $x$3 = (($495) + ($x$2854))|0;
       $496 = (_cff_builder_add_point1($decoder,$x$3,$y$3)|0);
       $497 = ($496|0)==(0);
       if (!($497)) {
        $$0 = 0;
        label = 252;
        break L4;
       }
       $498 = ((($args$1852)) + 4|0);
       $499 = $phase$0851 ^ 1;
       $500 = HEAP32[$0>>2]|0;
       $501 = ((($500)) + 276|0);
       $502 = HEAP32[$501>>2]|0;
       $503 = ($498>>>0)<($502>>>0);
       if ($503) {
        $args$1852 = $498;$phase$0851 = $499;$x$2854 = $x$3;$y$2853 = $y$3;
       } else {
        $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$3;$y$16 = $y$3;$zone$1 = $zone$0$ph;
        break;
       }
      }
     } else {
      $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
     }
    }
    break;
   }
   case 7:  {
    $504 = ($398|0)<(6);
    if ($504) {
     $$0 = 129;
     label = 252;
     break L4;
    }
    $505 = (($398|0) % 6)&-1;
    $506 = (($398) - ($505))|0;
    $507 = (_cff_builder_start_point($decoder,$x$0$ph,$y$0$ph)|0);
    $508 = ($507|0)==(0);
    if (!($508)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $509 = (($506|0) / 2)&-1;
    $510 = (_check_points($decoder,$509)|0);
    $511 = ($510|0)==(0);
    if (!($511)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $sum81 = (($393) + ($506))|0;
    $$sum80 = (0 - ($sum81))|0;
    $512 = (($397) + ($$sum80<<2)|0);
    $513 = HEAP32[$0>>2]|0;
    $514 = ((($513)) + 276|0);
    $515 = HEAP32[$514>>2]|0;
    $516 = ($512>>>0)<($515>>>0);
    if ($516) {
     $args$2844 = $512;$x$4846 = $x$0$ph;$y$4845 = $y$0$ph;
     while(1) {
      $517 = HEAP32[$args$2844>>2]|0;
      $518 = (($517) + ($x$4846))|0;
      $519 = ((($args$2844)) + 4|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = (($520) + ($y$4845))|0;
      _cff_builder_add_point($decoder,$518,$521,0);
      $522 = ((($args$2844)) + 8|0);
      $523 = HEAP32[$522>>2]|0;
      $524 = (($523) + ($518))|0;
      $525 = ((($args$2844)) + 12|0);
      $526 = HEAP32[$525>>2]|0;
      $527 = (($526) + ($521))|0;
      _cff_builder_add_point($decoder,$524,$527,0);
      $528 = ((($args$2844)) + 16|0);
      $529 = HEAP32[$528>>2]|0;
      $530 = (($529) + ($524))|0;
      $531 = ((($args$2844)) + 20|0);
      $532 = HEAP32[$531>>2]|0;
      $533 = (($532) + ($527))|0;
      _cff_builder_add_point($decoder,$530,$533,1);
      $534 = ((($args$2844)) + 24|0);
      $535 = HEAP32[$0>>2]|0;
      $536 = ((($535)) + 276|0);
      $537 = HEAP32[$536>>2]|0;
      $538 = ($534>>>0)<($537>>>0);
      if ($538) {
       $args$2844 = $534;$x$4846 = $530;$y$4845 = $533;
      } else {
       $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $530;$y$16 = $533;$zone$1 = $zone$0$ph;
       break;
      }
     }
    } else {
     $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    }
    break;
   }
   case 13:  {
    $539 = ($398|0)<(4);
    if ($539) {
     $$0 = 129;
     label = 252;
     break L4;
    }
    $540 = $398 & -3;
    $541 = (_cff_builder_start_point($decoder,$x$0$ph,$y$0$ph)|0);
    $542 = ($541|0)==(0);
    if (!($542)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $sum78 = (($540) + ($393))|0;
    $$sum77 = (0 - ($sum78))|0;
    $543 = (($397) + ($$sum77<<2)|0);
    $544 = $398 & 1;
    $545 = ($544|0)==(0);
    if ($545) {
     $args$3 = $543;$nargs1$0 = $540;$x$5 = $x$0$ph;
    } else {
     $546 = HEAP32[$543>>2]|0;
     $547 = (($546) + ($x$0$ph))|0;
     $$sum79 = (1 - ($sum78))|0;
     $548 = (($397) + ($$sum79<<2)|0);
     $549 = (($540) + -1)|0;
     $args$3 = $548;$nargs1$0 = $549;$x$5 = $547;
    }
    $550 = (($nargs1$0|0) / 4)&-1;
    $551 = ($550*3)|0;
    $552 = (_check_points($decoder,$551)|0);
    $553 = ($552|0)==(0);
    if (!($553)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $554 = HEAP32[$0>>2]|0;
    $555 = ((($554)) + 276|0);
    $556 = HEAP32[$555>>2]|0;
    $557 = ($args$3>>>0)<($556>>>0);
    if ($557) {
     $args$4838 = $args$3;$x$6840 = $x$5;$y$5839 = $y$0$ph;
     while(1) {
      $558 = HEAP32[$args$4838>>2]|0;
      $559 = (($558) + ($y$5839))|0;
      _cff_builder_add_point($decoder,$x$6840,$559,0);
      $560 = ((($args$4838)) + 4|0);
      $561 = HEAP32[$560>>2]|0;
      $562 = (($561) + ($x$6840))|0;
      $563 = ((($args$4838)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = (($564) + ($559))|0;
      _cff_builder_add_point($decoder,$562,$565,0);
      $566 = ((($args$4838)) + 12|0);
      $567 = HEAP32[$566>>2]|0;
      $568 = (($567) + ($565))|0;
      _cff_builder_add_point($decoder,$562,$568,1);
      $569 = ((($args$4838)) + 16|0);
      $570 = HEAP32[$0>>2]|0;
      $571 = ((($570)) + 276|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($569>>>0)<($572>>>0);
      if ($573) {
       $args$4838 = $569;$x$6840 = $562;$y$5839 = $568;
      } else {
       $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $562;$y$16 = $568;$zone$1 = $zone$0$ph;
       break;
      }
     }
    } else {
     $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$5;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    }
    break;
   }
   case 8:  {
    $574 = ($398|0)<(4);
    if ($574) {
     $$0 = 129;
     label = 252;
     break L4;
    }
    $575 = $398 & -3;
    $576 = (_cff_builder_start_point($decoder,$x$0$ph,$y$0$ph)|0);
    $577 = ($576|0)==(0);
    if (!($577)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $sum75 = (($575) + ($393))|0;
    $$sum74 = (0 - ($sum75))|0;
    $578 = (($397) + ($$sum74<<2)|0);
    $579 = $398 & 1;
    $580 = ($579|0)==(0);
    if ($580) {
     $args$5 = $578;$nargs2$0 = $575;$y$6 = $y$0$ph;
    } else {
     $581 = HEAP32[$578>>2]|0;
     $582 = (($581) + ($y$0$ph))|0;
     $$sum76 = (1 - ($sum75))|0;
     $583 = (($397) + ($$sum76<<2)|0);
     $584 = (($575) + -1)|0;
     $args$5 = $583;$nargs2$0 = $584;$y$6 = $582;
    }
    $585 = (($nargs2$0|0) / 4)&-1;
    $586 = ($585*3)|0;
    $587 = (_check_points($decoder,$586)|0);
    $588 = ($587|0)==(0);
    if (!($588)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $589 = HEAP32[$0>>2]|0;
    $590 = ((($589)) + 276|0);
    $591 = HEAP32[$590>>2]|0;
    $592 = ($args$5>>>0)<($591>>>0);
    if ($592) {
     $args$6832 = $args$5;$x$7834 = $x$0$ph;$y$7833 = $y$6;
     while(1) {
      $593 = HEAP32[$args$6832>>2]|0;
      $594 = (($593) + ($x$7834))|0;
      _cff_builder_add_point($decoder,$594,$y$7833,0);
      $595 = ((($args$6832)) + 4|0);
      $596 = HEAP32[$595>>2]|0;
      $597 = (($596) + ($594))|0;
      $598 = ((($args$6832)) + 8|0);
      $599 = HEAP32[$598>>2]|0;
      $600 = (($599) + ($y$7833))|0;
      _cff_builder_add_point($decoder,$597,$600,0);
      $601 = ((($args$6832)) + 12|0);
      $602 = HEAP32[$601>>2]|0;
      $603 = (($602) + ($597))|0;
      _cff_builder_add_point($decoder,$603,$600,1);
      $604 = ((($args$6832)) + 16|0);
      $605 = HEAP32[$0>>2]|0;
      $606 = ((($605)) + 276|0);
      $607 = HEAP32[$606>>2]|0;
      $608 = ($604>>>0)<($607>>>0);
      if ($608) {
       $args$6832 = $604;$x$7834 = $603;$y$7833 = $600;
      } else {
       $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $603;$y$16 = $600;$zone$1 = $zone$0$ph;
       break;
      }
     }
    } else {
     $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$6;$zone$1 = $zone$0$ph;
    }
    break;
   }
   case 9: case 12:  {
    $609 = (_cff_builder_start_point($decoder,$x$0$ph,$y$0$ph)|0);
    $610 = ($609|0)==(0);
    if (!($610)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $611 = ($398|0)<(4);
    if ($611) {
     $$0 = 129;
     label = 252;
     break L4;
    }
    $612 = $398 & -3;
    $613 = (($612|0) / 4)&-1;
    $614 = ($613*3)|0;
    $615 = (_check_points($decoder,$614)|0);
    $616 = ($615|0)==(0);
    if (!($616)) {
     $$0 = 129;
     label = 252;
     break L4;
    }
    $617 = ($612|0)>(3);
    if ($617) {
     $618 = ($op$0$ph|0)==(9);
     $619 = $618&1;
     $sum73 = (($393) + ($612))|0;
     $$sum72 = (0 - ($sum73))|0;
     $620 = (($397) + ($$sum72<<2)|0);
     $args$7825 = $620;$nargs4$0823 = $612;$phase3$0824 = $619;$x$8827 = $x$0$ph;$y$8826 = $y$0$ph;
     while(1) {
      $621 = (($nargs4$0823) + -4)|0;
      $622 = ($phase3$0824|0)==(0);
      $623 = HEAP32[$args$7825>>2]|0;
      if ($622) {
       $638 = (($623) + ($y$8826))|0;
       _cff_builder_add_point($decoder,$x$8827,$638,0);
       $639 = ((($args$7825)) + 4|0);
       $640 = HEAP32[$639>>2]|0;
       $641 = (($640) + ($x$8827))|0;
       $642 = ((($args$7825)) + 8|0);
       $643 = HEAP32[$642>>2]|0;
       $644 = (($643) + ($638))|0;
       _cff_builder_add_point($decoder,$641,$644,0);
       $645 = ((($args$7825)) + 12|0);
       $646 = HEAP32[$645>>2]|0;
       $647 = (($646) + ($641))|0;
       $648 = ($621|0)==(1);
       if ($648) {
        $649 = ((($args$7825)) + 16|0);
        $650 = HEAP32[$649>>2]|0;
        $651 = (($650) + ($644))|0;
        $y$9 = $651;
       } else {
        $y$9 = $644;
       }
       _cff_builder_add_point($decoder,$647,$y$9,1);
       $x$10 = $647;$y$10 = $y$9;
      } else {
       $624 = (($623) + ($x$8827))|0;
       _cff_builder_add_point($decoder,$624,$y$8826,0);
       $625 = ((($args$7825)) + 4|0);
       $626 = HEAP32[$625>>2]|0;
       $627 = (($626) + ($624))|0;
       $628 = ((($args$7825)) + 8|0);
       $629 = HEAP32[$628>>2]|0;
       $630 = (($629) + ($y$8826))|0;
       _cff_builder_add_point($decoder,$627,$630,0);
       $631 = ((($args$7825)) + 12|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = (($632) + ($630))|0;
       $634 = ($621|0)==(1);
       if ($634) {
        $635 = ((($args$7825)) + 16|0);
        $636 = HEAP32[$635>>2]|0;
        $637 = (($636) + ($627))|0;
        $x$9 = $637;
       } else {
        $x$9 = $627;
       }
       _cff_builder_add_point($decoder,$x$9,$633,1);
       $x$10 = $x$9;$y$10 = $633;
      }
      $652 = ((($args$7825)) + 16|0);
      $653 = $phase3$0824 ^ 1;
      $654 = ($621|0)>(3);
      if ($654) {
       $args$7825 = $652;$nargs4$0823 = $621;$phase3$0824 = $653;$x$8827 = $x$10;$y$8826 = $y$10;
      } else {
       $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$10;$y$16 = $y$10;$zone$1 = $zone$0$ph;
       break;
      }
     }
    } else {
     $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    }
    break;
   }
   case 11:  {
    $655 = ($398|0)<(8);
    if ($655) {
     $$0 = 129;
     label = 252;
     break L4;
    }
    $656 = $398 & -2;
    $657 = (($656) + -6)|0;
    $658 = (($657|0) / 2)&-1;
    $659 = (_cff_builder_start_point($decoder,$x$0$ph,$y$0$ph)|0);
    $660 = ($659|0)==(0);
    if (!($660)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $661 = (($658) + 3)|0;
    $662 = (_check_points($decoder,$661)|0);
    $663 = ($662|0)==(0);
    if (!($663)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $sum71 = (($393) + ($656))|0;
    $$sum70 = (0 - ($sum71))|0;
    $664 = (($397) + ($$sum70<<2)|0);
    $665 = ($657|0)>(1);
    $666 = HEAP32[$664>>2]|0;
    $667 = (($666) + ($x$0$ph))|0;
    $$sum866 = (1 - ($sum71))|0;
    $668 = (($397) + ($$sum866<<2)|0);
    $669 = HEAP32[$668>>2]|0;
    $670 = (($669) + ($y$0$ph))|0;
    if ($665) {
     $671 = $658 << 1;
     $672 = (($671) + -4)|0;
     $673 = $req_args$0 & 15;
     $674 = (($672) - ($673))|0;
     $675 = (($num_args$1) - ($673))|0;
     $676 = $675 & -2;
     $677 = (($674) - ($676))|0;
     $678 = $667;$679 = $670;$args$8816 = $664;$num_lines$0815 = $658;
     while(1) {
      _cff_builder_add_point($decoder,$678,$679,1);
      $680 = ((($args$8816)) + 8|0);
      $681 = (($num_lines$0815) + -1)|0;
      $682 = ($num_lines$0815|0)>(1);
      $683 = HEAP32[$680>>2]|0;
      $684 = (($683) + ($678))|0;
      $685 = ((($args$8816)) + 12|0);
      $686 = HEAP32[$685>>2]|0;
      $687 = (($686) + ($679))|0;
      if ($682) {
       $678 = $684;$679 = $687;$args$8816 = $680;$num_lines$0815 = $681;
      } else {
       $$lcssa2115 = $684;$$lcssa2116 = $687;
       break;
      }
     }
     $scevgep$sum = (($677) + 4)|0;
     $$lcssa400 = $$lcssa2115;$$lcssa401 = $$lcssa2116;$688 = $scevgep$sum;
    } else {
     $$lcssa400 = $667;$$lcssa401 = $670;$688 = $$sum70;
    }
    _cff_builder_add_point($decoder,$$lcssa400,$$lcssa401,0);
    $$sum1155 = (($688) + 2)|0;
    $689 = (($397) + ($$sum1155<<2)|0);
    $690 = HEAP32[$689>>2]|0;
    $691 = (($690) + ($$lcssa400))|0;
    $$sum1156 = (($688) + 3)|0;
    $692 = (($397) + ($$sum1156<<2)|0);
    $693 = HEAP32[$692>>2]|0;
    $694 = (($693) + ($$lcssa401))|0;
    _cff_builder_add_point($decoder,$691,$694,0);
    $$sum1157 = (($688) + 4)|0;
    $695 = (($397) + ($$sum1157<<2)|0);
    $696 = HEAP32[$695>>2]|0;
    $697 = (($696) + ($691))|0;
    $$sum1158 = (($688) + 5)|0;
    $698 = (($397) + ($$sum1158<<2)|0);
    $699 = HEAP32[$698>>2]|0;
    $700 = (($699) + ($694))|0;
    _cff_builder_add_point($decoder,$697,$700,1);
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $697;$y$16 = $700;$zone$1 = $zone$0$ph;
    break;
   }
   case 10:  {
    $701 = ($398|0)<(8);
    if ($701) {
     $$0 = 129;
     label = 252;
     break L4;
    }
    $702 = (($398) + -2)|0;
    $703 = (($702|0) % 6)&-1;
    $704 = (($702|0) / 6)&-1;
    $705 = (_cff_builder_start_point($decoder,$x$0$ph,$y$0$ph)|0);
    $706 = ($705|0)==(0);
    if (!($706)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $707 = ($704*3)|0;
    $708 = (($707) + 2)|0;
    $709 = (_check_points($decoder,$708)|0);
    $710 = ($709|0)==(0);
    if (!($710)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $$neg104 = (2 - ($398))|0;
    $711 = (-2 - ($393))|0;
    $712 = (($711) + ($$neg104))|0;
    $$sum69 = (($712) + ($703))|0;
    $713 = (($397) + ($$sum69<<2)|0);
    $714 = HEAP32[$713>>2]|0;
    $715 = (($714) + ($x$0$ph))|0;
    $$sum865 = (($$sum69) + 1)|0;
    $716 = (($397) + ($$sum865<<2)|0);
    $717 = HEAP32[$716>>2]|0;
    $718 = (($717) + ($y$0$ph))|0;
    $719 = $715;$720 = $718;$args$9809 = $713;$num_curves$0808 = $704;
    while(1) {
     _cff_builder_add_point($decoder,$719,$720,0);
     $721 = ((($args$9809)) + 8|0);
     $722 = HEAP32[$721>>2]|0;
     $723 = (($722) + ($719))|0;
     $724 = ((($args$9809)) + 12|0);
     $725 = HEAP32[$724>>2]|0;
     $726 = (($725) + ($720))|0;
     _cff_builder_add_point($decoder,$723,$726,0);
     $727 = ((($args$9809)) + 16|0);
     $728 = HEAP32[$727>>2]|0;
     $729 = (($728) + ($723))|0;
     $730 = ((($args$9809)) + 20|0);
     $731 = HEAP32[$730>>2]|0;
     $732 = (($731) + ($726))|0;
     _cff_builder_add_point($decoder,$729,$732,1);
     $733 = ((($args$9809)) + 24|0);
     $734 = (($num_curves$0808) + -1)|0;
     $735 = ($num_curves$0808|0)>(1);
     $736 = HEAP32[$733>>2]|0;
     $737 = (($736) + ($729))|0;
     $738 = ((($args$9809)) + 28|0);
     $739 = HEAP32[$738>>2]|0;
     $740 = (($739) + ($732))|0;
     if ($735) {
      $719 = $737;$720 = $740;$args$9809 = $733;$num_curves$0808 = $734;
     } else {
      $$lcssa2113 = $737;$$lcssa2114 = $740;
      break;
     }
    }
    _cff_builder_add_point($decoder,$$lcssa2113,$$lcssa2114,1);
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $$lcssa2113;$y$16 = $$lcssa2114;$zone$1 = $zone$0$ph;
    break;
   }
   case 16:  {
    $741 = (_cff_builder_start_point($decoder,$x$0$ph,$y$0$ph)|0);
    $742 = ($741|0)==(0);
    if (!($742)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $743 = (_check_points($decoder,6)|0);
    $744 = ($743|0)==(0);
    if (!($744)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $745 = HEAP32[$396>>2]|0;
    $746 = (($745) + ($x$0$ph))|0;
    $$sum61 = (1 - ($393))|0;
    $747 = (($397) + ($$sum61<<2)|0);
    $748 = HEAP32[$747>>2]|0;
    $749 = (($748) + ($y$0$ph))|0;
    _cff_builder_add_point($decoder,$746,$749,0);
    $$sum62 = (2 - ($393))|0;
    $750 = (($397) + ($$sum62<<2)|0);
    $751 = HEAP32[$750>>2]|0;
    $752 = (($751) + ($746))|0;
    $$sum63 = (3 - ($393))|0;
    $753 = (($397) + ($$sum63<<2)|0);
    $754 = HEAP32[$753>>2]|0;
    $755 = (($754) + ($749))|0;
    _cff_builder_add_point($decoder,$752,$755,0);
    $$sum64 = (4 - ($393))|0;
    $756 = (($397) + ($$sum64<<2)|0);
    $757 = HEAP32[$756>>2]|0;
    $758 = (($757) + ($752))|0;
    _cff_builder_add_point($decoder,$758,$755,1);
    $$sum65 = (5 - ($393))|0;
    $759 = (($397) + ($$sum65<<2)|0);
    $760 = HEAP32[$759>>2]|0;
    $761 = (($760) + ($758))|0;
    _cff_builder_add_point($decoder,$761,$755,0);
    $$sum66 = (6 - ($393))|0;
    $762 = (($397) + ($$sum66<<2)|0);
    $763 = HEAP32[$762>>2]|0;
    $764 = (($763) + ($761))|0;
    $$sum67 = (7 - ($393))|0;
    $765 = (($397) + ($$sum67<<2)|0);
    $766 = HEAP32[$765>>2]|0;
    $767 = (($766) + ($755))|0;
    _cff_builder_add_point($decoder,$764,$767,0);
    $$sum68 = (8 - ($393))|0;
    $768 = (($397) + ($$sum68<<2)|0);
    $769 = HEAP32[$768>>2]|0;
    $770 = (($769) + ($764))|0;
    _cff_builder_add_point($decoder,$770,$y$0$ph,1);
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $770;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 15:  {
    $771 = (_cff_builder_start_point($decoder,$x$0$ph,$y$0$ph)|0);
    $772 = ($771|0)==(0);
    if (!($772)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $773 = (_check_points($decoder,6)|0);
    $774 = ($773|0)==(0);
    if (!($774)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $775 = HEAP32[$396>>2]|0;
    $776 = (($775) + ($x$0$ph))|0;
    _cff_builder_add_point($decoder,$776,$y$0$ph,0);
    $$sum55 = (1 - ($393))|0;
    $777 = (($397) + ($$sum55<<2)|0);
    $778 = HEAP32[$777>>2]|0;
    $779 = (($778) + ($776))|0;
    $$sum56 = (2 - ($393))|0;
    $780 = (($397) + ($$sum56<<2)|0);
    $781 = HEAP32[$780>>2]|0;
    $782 = (($781) + ($y$0$ph))|0;
    _cff_builder_add_point($decoder,$779,$782,0);
    $$sum57 = (3 - ($393))|0;
    $783 = (($397) + ($$sum57<<2)|0);
    $784 = HEAP32[$783>>2]|0;
    $785 = (($784) + ($779))|0;
    _cff_builder_add_point($decoder,$785,$782,1);
    $$sum58 = (4 - ($393))|0;
    $786 = (($397) + ($$sum58<<2)|0);
    $787 = HEAP32[$786>>2]|0;
    $788 = (($787) + ($785))|0;
    _cff_builder_add_point($decoder,$788,$782,0);
    $$sum59 = (5 - ($393))|0;
    $789 = (($397) + ($$sum59<<2)|0);
    $790 = HEAP32[$789>>2]|0;
    $791 = (($790) + ($788))|0;
    _cff_builder_add_point($decoder,$791,$y$0$ph,0);
    $$sum60 = (6 - ($393))|0;
    $792 = (($397) + ($$sum60<<2)|0);
    $793 = HEAP32[$792>>2]|0;
    $794 = (($793) + ($791))|0;
    _cff_builder_add_point($decoder,$794,$y$0$ph,1);
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $794;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 17:  {
    $795 = (_cff_builder_start_point($decoder,$x$0$ph,$y$0$ph)|0);
    $796 = ($795|0)==(0);
    if (!($796)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $797 = (_check_points($decoder,6)|0);
    $798 = ($797|0)==(0);
    if (!($798)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $799 = HEAP32[$396>>2]|0;
    $$sum1136 = (1 - ($393))|0;
    $800 = (($397) + ($$sum1136<<2)|0);
    $801 = HEAP32[$800>>2]|0;
    $$sum1137 = (2 - ($393))|0;
    $802 = (($397) + ($$sum1137<<2)|0);
    $803 = HEAP32[$802>>2]|0;
    $804 = (($803) + ($799))|0;
    $$sum1138 = (($$sum1137) + 1)|0;
    $805 = (($397) + ($$sum1138<<2)|0);
    $806 = HEAP32[$805>>2]|0;
    $807 = (($806) + ($801))|0;
    $$sum1139 = (($$sum1137) + 2)|0;
    $808 = (($397) + ($$sum1139<<2)|0);
    $809 = HEAP32[$808>>2]|0;
    $810 = (($809) + ($804))|0;
    $$sum1140 = (($$sum1137) + 3)|0;
    $811 = (($397) + ($$sum1140<<2)|0);
    $812 = HEAP32[$811>>2]|0;
    $813 = (($812) + ($807))|0;
    $$sum1141 = (($$sum1137) + 4)|0;
    $814 = (($397) + ($$sum1141<<2)|0);
    $815 = HEAP32[$814>>2]|0;
    $816 = (($815) + ($810))|0;
    $$sum1142 = (($$sum1137) + 5)|0;
    $817 = (($397) + ($$sum1142<<2)|0);
    $818 = HEAP32[$817>>2]|0;
    $819 = (($818) + ($813))|0;
    $$sum1143 = (($$sum1137) + 6)|0;
    $820 = (($397) + ($$sum1143<<2)|0);
    $821 = HEAP32[$820>>2]|0;
    $822 = (($821) + ($816))|0;
    $$sum1144 = (($$sum1137) + 7)|0;
    $823 = (($397) + ($$sum1144<<2)|0);
    $824 = HEAP32[$823>>2]|0;
    $825 = (($824) + ($819))|0;
    $826 = HEAP32[$396>>2]|0;
    $827 = (($826) + ($x$0$ph))|0;
    $828 = ($825|0)<(0);
    $829 = (0 - ($825))|0;
    $dy$1 = $828 ? $829 : $825;
    $830 = (0 - ($822))|0;
    $$sum1145 = (1 - ($393))|0;
    $831 = (($397) + ($$sum1145<<2)|0);
    $832 = HEAP32[$831>>2]|0;
    $833 = (($832) + ($y$0$ph))|0;
    _cff_builder_add_point($decoder,$827,$833,0);
    $$sum1146 = (2 - ($393))|0;
    $834 = (($397) + ($$sum1146<<2)|0);
    $835 = HEAP32[$834>>2]|0;
    $836 = (($835) + ($827))|0;
    $$sum1147 = (($$sum1146) + 1)|0;
    $837 = (($397) + ($$sum1147<<2)|0);
    $838 = HEAP32[$837>>2]|0;
    $839 = (($838) + ($833))|0;
    _cff_builder_add_point($decoder,$836,$839,0);
    $$sum1148 = (($$sum1146) + 2)|0;
    $840 = (($397) + ($$sum1148<<2)|0);
    $841 = HEAP32[$840>>2]|0;
    $842 = (($841) + ($836))|0;
    $$sum1149 = (($$sum1146) + 3)|0;
    $843 = (($397) + ($$sum1149<<2)|0);
    $844 = HEAP32[$843>>2]|0;
    $845 = (($844) + ($839))|0;
    _cff_builder_add_point($decoder,$842,$845,1);
    $$sum1150 = (($$sum1146) + 4)|0;
    $846 = (($397) + ($$sum1150<<2)|0);
    $847 = HEAP32[$846>>2]|0;
    $848 = (($847) + ($842))|0;
    $$sum1151 = (($$sum1146) + 5)|0;
    $849 = (($397) + ($$sum1151<<2)|0);
    $850 = HEAP32[$849>>2]|0;
    $851 = (($850) + ($845))|0;
    _cff_builder_add_point($decoder,$848,$851,0);
    $$sum1152 = (($$sum1146) + 6)|0;
    $852 = (($397) + ($$sum1152<<2)|0);
    $853 = HEAP32[$852>>2]|0;
    $854 = (($853) + ($848))|0;
    $$sum1153 = (($$sum1146) + 7)|0;
    $855 = (($397) + ($$sum1153<<2)|0);
    $856 = HEAP32[$855>>2]|0;
    $857 = (($856) + ($851))|0;
    _cff_builder_add_point($decoder,$854,$857,0);
    $$sum1154 = (($$sum1146) + 8)|0;
    $858 = (($397) + ($$sum1154<<2)|0);
    $859 = HEAP32[$858>>2]|0;
    $860 = (($859) + ($854))|0;
    $861 = ($822|0)<(0);
    $$dx$0 = $861 ? $830 : $822;
    $862 = ($$dx$0|0)>($dy$1|0);
    $863 = (($859) + ($857))|0;
    $y$14 = $862 ? $y$0$ph : $863;
    $x$14 = $862 ? $860 : $x$0$ph;
    _cff_builder_add_point($decoder,$x$14,$y$14,1);
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$14;$y$16 = $y$14;$zone$1 = $zone$0$ph;
    break;
   }
   case 14:  {
    $864 = (_cff_builder_start_point($decoder,$x$0$ph,$y$0$ph)|0);
    $865 = ($864|0)==(0);
    if (!($865)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $866 = (_check_points($decoder,6)|0);
    $867 = ($866|0)==(0);
    if (!($867)) {
     $$0 = 0;
     label = 252;
     break L4;
    }
    $868 = HEAP32[$396>>2]|0;
    $869 = (($868) + ($x$0$ph))|0;
    $$sum1125 = (1 - ($393))|0;
    $870 = (($397) + ($$sum1125<<2)|0);
    $871 = HEAP32[$870>>2]|0;
    $872 = (($871) + ($y$0$ph))|0;
    _cff_builder_add_point($decoder,$869,$872,0);
    $$sum1126 = (2 - ($393))|0;
    $873 = (($397) + ($$sum1126<<2)|0);
    $874 = HEAP32[$873>>2]|0;
    $875 = (($874) + ($869))|0;
    $$sum1127 = (($$sum1126) + 1)|0;
    $876 = (($397) + ($$sum1127<<2)|0);
    $877 = HEAP32[$876>>2]|0;
    $878 = (($877) + ($872))|0;
    _cff_builder_add_point($decoder,$875,$878,0);
    $$sum1128 = (($$sum1126) + 2)|0;
    $879 = (($397) + ($$sum1128<<2)|0);
    $880 = HEAP32[$879>>2]|0;
    $881 = (($880) + ($875))|0;
    $$sum1129 = (($$sum1126) + 3)|0;
    $882 = (($397) + ($$sum1129<<2)|0);
    $883 = HEAP32[$882>>2]|0;
    $884 = (($883) + ($878))|0;
    _cff_builder_add_point($decoder,$881,$884,1);
    $$sum1130 = (($$sum1126) + 4)|0;
    $885 = (($397) + ($$sum1130<<2)|0);
    $886 = HEAP32[$885>>2]|0;
    $887 = (($886) + ($881))|0;
    $$sum1131 = (($$sum1126) + 5)|0;
    $888 = (($397) + ($$sum1131<<2)|0);
    $889 = HEAP32[$888>>2]|0;
    $890 = (($889) + ($884))|0;
    _cff_builder_add_point($decoder,$887,$890,0);
    $$sum1132 = (($$sum1126) + 6)|0;
    $891 = (($397) + ($$sum1132<<2)|0);
    $892 = HEAP32[$891>>2]|0;
    $893 = (($892) + ($887))|0;
    $$sum1133 = (($$sum1126) + 7)|0;
    $894 = (($397) + ($$sum1133<<2)|0);
    $895 = HEAP32[$894>>2]|0;
    $896 = (($895) + ($890))|0;
    _cff_builder_add_point($decoder,$893,$896,0);
    $$sum1134 = (($$sum1126) + 8)|0;
    $897 = (($397) + ($$sum1134<<2)|0);
    $898 = HEAP32[$897>>2]|0;
    $899 = (($898) + ($893))|0;
    $$sum1135 = (($$sum1126) + 9)|0;
    $900 = (($397) + ($$sum1135<<2)|0);
    $901 = HEAP32[$900>>2]|0;
    $902 = (($901) + ($896))|0;
    _cff_builder_add_point($decoder,$899,$902,1);
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $899;$y$16 = $902;$zone$1 = $zone$0$ph;
    break;
   }
   case 26:  {
    $956 = HEAP32[$396>>2]|0;
    $957 = ($956|0)<(0);
    if ($957) {
     $958 = (0 - ($956))|0;
     HEAP32[$396>>2] = $958;
    }
    $$sum46 = (1 - ($393))|0;
    $959 = (($397) + ($$sum46<<2)|0);
    $args$12 = $959;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 27:  {
    $$sum45 = (1 - ($393))|0;
    $960 = (($397) + ($$sum45<<2)|0);
    $961 = HEAP32[$960>>2]|0;
    $962 = HEAP32[$396>>2]|0;
    $963 = (($962) + ($961))|0;
    HEAP32[$396>>2] = $963;
    $args$12 = $960;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 28:  {
    $$sum44 = (1 - ($393))|0;
    $964 = (($397) + ($$sum44<<2)|0);
    $965 = HEAP32[$964>>2]|0;
    $966 = HEAP32[$396>>2]|0;
    $967 = (($966) - ($965))|0;
    HEAP32[$396>>2] = $967;
    $args$12 = $964;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 29:  {
    $968 = HEAP32[$396>>2]|0;
    $$sum43 = (1 - ($393))|0;
    $969 = (($397) + ($$sum43<<2)|0);
    $970 = HEAP32[$969>>2]|0;
    $971 = (_FT_DivFix($968,$970)|0);
    HEAP32[$396>>2] = $971;
    $args$12 = $969;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 30:  {
    $972 = HEAP32[$396>>2]|0;
    $973 = (0 - ($972))|0;
    HEAP32[$396>>2] = $973;
    $$sum42 = (1 - ($393))|0;
    $974 = (($397) + ($$sum42<<2)|0);
    $args$12 = $974;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 31:  {
    $975 = HEAP32[$seed>>2]|0;
    $976 = ($975|0)>(32767);
    $977 = $976&1;
    $$96 = (($977) + ($975))|0;
    HEAP32[$396>>2] = $$96;
    $978 = HEAP32[$seed>>2]|0;
    $979 = (65536 - ($978))|0;
    $980 = (_FT_MulFix($978,$979)|0);
    $981 = ($980|0)==(0);
    $982 = (($980) + 10355)|0;
    $storemerge41 = $981 ? $982 : $980;
    HEAP32[$seed>>2] = $storemerge41;
    $$sum40 = (1 - ($393))|0;
    $983 = (($397) + ($$sum40<<2)|0);
    $args$12 = $983;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 32:  {
    $984 = HEAP32[$396>>2]|0;
    $$sum39 = (1 - ($393))|0;
    $985 = (($397) + ($$sum39<<2)|0);
    $986 = HEAP32[$985>>2]|0;
    $987 = (_FT_MulFix($984,$986)|0);
    HEAP32[$396>>2] = $987;
    $args$12 = $985;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 33:  {
    $988 = HEAP32[$396>>2]|0;
    $989 = ($988|0)>(0);
    if ($989) {
     $root$0 = $988;
     while(1) {
      $990 = HEAP32[$396>>2]|0;
      $991 = (_FT_DivFix($990,$root$0)|0);
      $992 = (($root$0) + 1)|0;
      $993 = (($992) + ($991))|0;
      $994 = $993 >> 1;
      $995 = ($994|0)==($root$0|0);
      if ($995) {
       $storemerge = $994;
       break;
      } else {
       $root$0 = $994;
      }
     }
    } else {
     $storemerge = 0;
    }
    HEAP32[$396>>2] = $storemerge;
    $$sum38 = (1 - ($393))|0;
    $996 = (($397) + ($$sum38<<2)|0);
    $args$12 = $996;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 25: case 35:  {
    $args$12 = $396;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 36:  {
    $997 = HEAP32[$396>>2]|0;
    $$sum36 = (1 - ($393))|0;
    $998 = (($397) + ($$sum36<<2)|0);
    $999 = HEAP32[$998>>2]|0;
    HEAP32[$396>>2] = $999;
    HEAP32[$998>>2] = $997;
    $$sum37 = (2 - ($393))|0;
    $1000 = (($397) + ($$sum37<<2)|0);
    $args$12 = $1000;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 37:  {
    $1001 = HEAP32[$396>>2]|0;
    $1002 = $1001 >> 16;
    $1003 = ($1002|0)<(0);
    if ($1003) {
     $idx$0 = 0;
    } else {
     $1004 = (($398) + -2)|0;
     $1005 = ($1002|0)>($1004|0);
     $$97 = $1005 ? $1004 : $1002;
     $idx$0 = $$97;
    }
    $1006 = $idx$0 ^ -1;
    $$sum34 = (($1006) - ($393))|0;
    $1007 = (($397) + ($$sum34<<2)|0);
    $1008 = HEAP32[$1007>>2]|0;
    HEAP32[$396>>2] = $1008;
    $$sum35 = (1 - ($393))|0;
    $1009 = (($397) + ($$sum35<<2)|0);
    $args$12 = $1009;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 38:  {
    $1010 = HEAP32[$396>>2]|0;
    $1011 = $1010 >> 16;
    $$sum25 = (1 - ($393))|0;
    $1012 = (($397) + ($$sum25<<2)|0);
    $1013 = HEAP32[$1012>>2]|0;
    $1014 = $1013 >> 16;
    $1015 = ($1011|0)<(1);
    $$98 = $1015 ? 1 : $1011;
    $sum = (($$98) + ($393))|0;
    $$sum26 = (0 - ($sum))|0;
    $1016 = (($397) + ($$sum26<<2)|0);
    $1017 = ($1016>>>0)<($29>>>0);
    if ($1017) {
     $$0 = 129;
     label = 252;
     break L4;
    }
    $1018 = ($1014|0)>(-1);
    if (!($1018)) {
     $1019 = (($$98) + -1)|0;
     $1020 = ($$98|0)>(1);
     $$sum28 = (($1019) - ($sum))|0;
     $1021 = (($397) + ($$sum28<<2)|0);
     $idx12$1789 = $1014;
     while(1) {
      $1036 = HEAP32[$1016>>2]|0;
      if ($1020) {
       $i15$0786 = 0;
       while(1) {
        $1037 = (($i15$0786) + 1)|0;
        $$sum29 = (($1037) - ($sum))|0;
        $1038 = (($397) + ($$sum29<<2)|0);
        $1039 = HEAP32[$1038>>2]|0;
        $$sum30 = (($i15$0786) - ($sum))|0;
        $1040 = (($397) + ($$sum30<<2)|0);
        HEAP32[$1040>>2] = $1039;
        $1041 = ($1037|0)<($1019|0);
        if ($1041) {
         $i15$0786 = $1037;
        } else {
         break;
        }
       }
      }
      HEAP32[$1021>>2] = $1036;
      $1042 = (($idx12$1789) + 1)|0;
      $1043 = ($idx12$1789|0)<(-1);
      if ($1043) {
       $idx12$1789 = $1042;
      } else {
       $args$12 = $396;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
       break L108;
      }
     }
    }
    $1022 = ($1014|0)>(0);
    if ($1022) {
     $1023 = (($$98) + -1)|0;
     $$sum31 = (($1023) - ($sum))|0;
     $1024 = (($397) + ($$sum31<<2)|0);
     $1025 = (($$98) + -2)|0;
     $1026 = ($1025|0)>(-1);
     $1027 = (1 - ($sum))|0;
     $idx12$0795 = $1014;
     while(1) {
      $1028 = HEAP32[$1024>>2]|0;
      if ($1026) {
       $i$0791 = $1025;
       while(1) {
        $$sum32 = (($i$0791) - ($sum))|0;
        $1029 = (($397) + ($$sum32<<2)|0);
        $1030 = HEAP32[$1029>>2]|0;
        $$sum33 = (($1027) + ($i$0791))|0;
        $1031 = (($397) + ($$sum33<<2)|0);
        HEAP32[$1031>>2] = $1030;
        $1032 = (($i$0791) + -1)|0;
        $1033 = ($i$0791|0)>(0);
        if ($1033) {
         $i$0791 = $1032;
        } else {
         break;
        }
       }
      }
      HEAP32[$1016>>2] = $1028;
      $1034 = (($idx12$0795) + -1)|0;
      $1035 = ($idx12$0795|0)>(1);
      if ($1035) {
       $idx12$0795 = $1034;
      } else {
       $args$12 = $396;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
       break;
      }
     }
    } else {
     $args$12 = $396;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    }
    break;
   }
   case 39:  {
    $1044 = HEAP32[$396>>2]|0;
    $$sum23 = (1 - ($393))|0;
    $1045 = (($397) + ($$sum23<<2)|0);
    HEAP32[$1045>>2] = $1044;
    $$sum24 = (2 - ($393))|0;
    $1046 = (($397) + ($$sum24<<2)|0);
    $args$12 = $1046;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 40:  {
    $$sum22 = (1 - ($393))|0;
    $1047 = (($397) + ($$sum22<<2)|0);
    $1048 = HEAP32[$1047>>2]|0;
    $1049 = $1048 >> 16;
    $1050 = ($1049>>>0)<(32);
    if ($1050) {
     $1051 = HEAP32[$396>>2]|0;
     $1052 = HEAP32[$0>>2]|0;
     $1053 = (((($1052)) + 760|0) + ($1049<<2)|0);
     HEAP32[$1053>>2] = $1051;
     $args$12 = $396;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    } else {
     $args$12 = $396;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    }
    break;
   }
   case 41:  {
    $1054 = HEAP32[$396>>2]|0;
    $1055 = $1054 >> 16;
    $1056 = ($1055>>>0)<(32);
    if ($1056) {
     $1057 = HEAP32[$0>>2]|0;
     $1058 = (((($1057)) + 760|0) + ($1055<<2)|0);
     $1059 = HEAP32[$1058>>2]|0;
     $val19$0 = $1059;
    } else {
     $val19$0 = 0;
    }
    HEAP32[$396>>2] = $val19$0;
    $$sum21 = (1 - ($393))|0;
    $1060 = (($397) + ($$sum21<<2)|0);
    $args$12 = $1060;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 51:  {
    $1226 = HEAP32[$0>>2]|0;
    $1227 = ((($1226)) + 676|0);
    $1228 = HEAP32[$1227>>2]|0;
    $1229 = ((($1226)) + 280|0);
    $1230 = ($1228>>>0)>($1229>>>0);
    if (!($1230)) {
     $$0 = 3;
     label = 252;
     break L4;
    }
    $1231 = ((($1228)) + -12|0);
    HEAP32[$1227>>2] = $1231;
    $1232 = HEAP32[$0>>2]|0;
    $1233 = ((($1232)) + 676|0);
    $1234 = HEAP32[$1233>>2]|0;
    $1235 = ((($1234)) + 8|0);
    $1236 = HEAP32[$1235>>2]|0;
    $1237 = ((($1234)) + 4|0);
    $1238 = HEAP32[$1237>>2]|0;
    $args$12 = $396;$ip$3 = $1236;$limit$1 = $1238;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $1234;
    break;
   }
   case 50:  {
    $1188 = HEAP32[$396>>2]|0;
    $1189 = $1188 >> 16;
    $1190 = HEAP32[$0>>2]|0;
    $1191 = ((($1190)) + 900|0);
    $1192 = HEAP32[$1191>>2]|0;
    $1193 = (($1192) + ($1189))|0;
    $1194 = ((($1190)) + 892|0);
    $1195 = HEAP32[$1194>>2]|0;
    $1196 = ($1193>>>0)<($1195>>>0);
    if (!($1196)) {
     $$0 = 3;
     label = 252;
     break L4;
    }
    $1197 = ((($1190)) + 280|0);
    $1198 = $zone$0$ph;
    $1199 = $1197;
    $1200 = (($1198) - ($1199))|0;
    $1201 = ($1200|0)>(372);
    if ($1201) {
     $$0 = 3;
     label = 252;
     break L4;
    }
    $1202 = ((($zone$0$ph)) + 8|0);
    HEAP32[$1202>>2] = $ip$2$ph;
    $1203 = ((($zone$0$ph)) + 12|0);
    $1204 = HEAP32[$0>>2]|0;
    $1205 = ((($1204)) + 908|0);
    $1206 = HEAP32[$1205>>2]|0;
    $1207 = (($1206) + ($1193<<2)|0);
    $1208 = HEAP32[$1207>>2]|0;
    HEAP32[$1203>>2] = $1208;
    $1209 = (($1193) + 1)|0;
    $1210 = HEAP32[$0>>2]|0;
    $1211 = ((($1210)) + 908|0);
    $1212 = HEAP32[$1211>>2]|0;
    $1213 = (($1212) + ($1209<<2)|0);
    $1214 = HEAP32[$1213>>2]|0;
    $1215 = ((($zone$0$ph)) + 16|0);
    HEAP32[$1215>>2] = $1214;
    $1216 = HEAP32[$1203>>2]|0;
    $1217 = ((($zone$0$ph)) + 20|0);
    HEAP32[$1217>>2] = $1216;
    $1218 = HEAP32[$1203>>2]|0;
    $1219 = ($1218|0)==(0|0);
    if ($1219) {
     $$0 = 3;
     label = 252;
     break L4;
    }
    $1220 = HEAP32[$1215>>2]|0;
    $1221 = ($1220|0)==($1218|0);
    if ($1221) {
     $$0 = 3;
     label = 252;
     break L4;
    }
    $1222 = HEAP32[$0>>2]|0;
    $1223 = ((($1222)) + 676|0);
    HEAP32[$1223>>2] = $1203;
    $1224 = HEAP32[$1203>>2]|0;
    $1225 = HEAP32[$1215>>2]|0;
    $args$12 = $396;$ip$3 = $1224;$limit$1 = $1225;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $1203;
    break;
   }
   case 53:  {
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 52:  {
    $1061 = HEAP32[$0>>2]|0;
    $1062 = ((($1061)) + 748|0);
    $1063 = HEAP32[$1062>>2]|0;
    $$sum20 = (1 - ($393))|0;
    $1064 = (($397) + ($$sum20<<2)|0);
    $1065 = HEAP32[$1064>>2]|0;
    $1066 = $1065 >> 16;
    $1067 = (($1066) + ($1063))|0;
    $1068 = ((($1061)) + 744|0);
    HEAP32[$1068>>2] = $1067;
    $1069 = HEAP32[$396>>2]|0;
    $1070 = HEAP32[$0>>2]|0;
    $1071 = ((($1070)) + 32|0);
    HEAP32[$1071>>2] = $1069;
    $1072 = HEAP32[$0>>2]|0;
    $1073 = ((($1072)) + 36|0);
    HEAP32[$1073>>2] = 0;
    $1074 = HEAP32[$0>>2]|0;
    $1075 = ((($1074)) + 24|0);
    $1076 = HEAP32[$1075>>2]|0;
    $1077 = HEAP32[$396>>2]|0;
    $1078 = (($1077) + ($1076))|0;
    $1079 = ((($1074)) + 28|0);
    $1080 = HEAP32[$1079>>2]|0;
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $1078;$y$16 = $1080;$zone$1 = $zone$0$ph;
    break;
   }
   case 57:  {
    $1081 = HEAP32[$0>>2]|0;
    $1082 = ((($1081)) + 748|0);
    $1083 = HEAP32[$1082>>2]|0;
    $$sum18 = (2 - ($393))|0;
    $1084 = (($397) + ($$sum18<<2)|0);
    $1085 = HEAP32[$1084>>2]|0;
    $1086 = $1085 >> 16;
    $1087 = (($1086) + ($1083))|0;
    $1088 = ((($1081)) + 744|0);
    HEAP32[$1088>>2] = $1087;
    $1089 = HEAP32[$396>>2]|0;
    $1090 = HEAP32[$0>>2]|0;
    $1091 = ((($1090)) + 32|0);
    HEAP32[$1091>>2] = $1089;
    $$sum19 = (1 - ($393))|0;
    $1092 = (($397) + ($$sum19<<2)|0);
    $1093 = HEAP32[$1092>>2]|0;
    $1094 = HEAP32[$0>>2]|0;
    $1095 = ((($1094)) + 36|0);
    HEAP32[$1095>>2] = $1093;
    $1096 = HEAP32[$0>>2]|0;
    $1097 = ((($1096)) + 24|0);
    $1098 = HEAP32[$1097>>2]|0;
    $1099 = HEAP32[$396>>2]|0;
    $1100 = (($1099) + ($1098))|0;
    $1101 = ((($1096)) + 28|0);
    $1102 = HEAP32[$1101>>2]|0;
    $1103 = HEAP32[$1092>>2]|0;
    $1104 = (($1103) + ($1102))|0;
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $1100;$y$16 = $1104;$zone$1 = $zone$0$ph;
    break;
   }
   case 58:  {
    $1105 = HEAP32[$0>>2]|0;
    $1106 = ((($1105)) + 24|0);
    $1107 = HEAP32[$1106>>2]|0;
    $1108 = HEAP32[$396>>2]|0;
    $1109 = (($1108) + ($1107))|0;
    $1110 = ((($1105)) + 28|0);
    $1111 = HEAP32[$1110>>2]|0;
    $$sum17 = (1 - ($393))|0;
    $1112 = (($397) + ($$sum17<<2)|0);
    $1113 = HEAP32[$1112>>2]|0;
    $1114 = (($1113) + ($1111))|0;
    $args$12 = $29;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $1109;$y$16 = $1114;$zone$1 = $zone$0$ph;
    break;
   }
   case 54:  {
    $$sum15 = (-2 - ($393))|0;
    $1115 = (($397) + ($$sum15<<2)|0);
    $1116 = HEAP32[$1115>>2]|0;
    $1117 = $1116 >> 16;
    $1118 = (-2 - ($393))|0;
    $$sum16 = (($1118) - ($1117))|0;
    $1119 = (($397) + ($$sum16<<2)|0);
    $1120 = ($1119>>>0)<($29>>>0);
    if ($1120) {
     $$0 = 129;
     label = 252;
     break L4;
    } else {
     $args$12 = $1119;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    }
    break;
   }
   case 55:  {
    $$sum14 = (1 - ($393))|0;
    $1121 = (($397) + ($$sum14<<2)|0);
    $args$12 = $1121;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 44:  {
    $1122 = HEAP32[$396>>2]|0;
    $1123 = ($1122|0)==(0);
    if ($1123) {
     $1128 = 0;
    } else {
     $$sum13 = (1 - ($393))|0;
     $1124 = (($397) + ($$sum13<<2)|0);
     $1125 = HEAP32[$1124>>2]|0;
     $1126 = ($1125|0)!=(0);
     $1128 = $1126;
    }
    $1127 = $1128 ? 65536 : 0;
    HEAP32[$396>>2] = $1127;
    $$sum12 = (1 - ($393))|0;
    $1129 = (($397) + ($$sum12<<2)|0);
    $args$12 = $1129;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 45:  {
    $1130 = HEAP32[$396>>2]|0;
    $1131 = ($1130|0)==(0);
    if ($1131) {
     $$sum10 = (1 - ($393))|0;
     $1132 = (($397) + ($$sum10<<2)|0);
     $1133 = HEAP32[$1132>>2]|0;
     $1134 = ($1133|0)!=(0);
     $1136 = $1134;
    } else {
     $1136 = 1;
    }
    $1135 = $1136 ? 65536 : 0;
    HEAP32[$396>>2] = $1135;
    $$sum11 = (1 - ($393))|0;
    $1137 = (($397) + ($$sum11<<2)|0);
    $args$12 = $1137;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 47:  {
    $1138 = HEAP32[$396>>2]|0;
    $1139 = ($1138|0)==(0);
    $1140 = $1139 ? 65536 : 0;
    HEAP32[$396>>2] = $1140;
    $$sum9 = (1 - ($393))|0;
    $1141 = (($397) + ($$sum9<<2)|0);
    $args$12 = $1141;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 48:  {
    $$sum = (2 - ($393))|0;
    $1142 = (($397) + ($$sum<<2)|0);
    $1143 = HEAP32[$1142>>2]|0;
    $$sum6 = (3 - ($393))|0;
    $1144 = (($397) + ($$sum6<<2)|0);
    $1145 = HEAP32[$1144>>2]|0;
    $1146 = ($1143|0)>($1145|0);
    if ($1146) {
     $$sum7 = (1 - ($393))|0;
     $1147 = (($397) + ($$sum7<<2)|0);
     $1148 = HEAP32[$1147>>2]|0;
     HEAP32[$396>>2] = $1148;
    }
    $$sum8 = (1 - ($393))|0;
    $1149 = (($397) + ($$sum8<<2)|0);
    $args$12 = $1149;$ip$3 = $ip$2$ph;$limit$1 = $limit$0$ph;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $zone$0$ph;
    break;
   }
   case 49:  {
    $1150 = HEAP32[$396>>2]|0;
    $1151 = $1150 >> 16;
    $1152 = HEAP32[$0>>2]|0;
    $1153 = ((($1152)) + 896|0);
    $1154 = HEAP32[$1153>>2]|0;
    $1155 = (($1154) + ($1151))|0;
    $1156 = ((($1152)) + 888|0);
    $1157 = HEAP32[$1156>>2]|0;
    $1158 = ($1155>>>0)<($1157>>>0);
    if (!($1158)) {
     $$0 = 3;
     label = 252;
     break L4;
    }
    $1159 = ((($1152)) + 280|0);
    $1160 = $zone$0$ph;
    $1161 = $1159;
    $1162 = (($1160) - ($1161))|0;
    $1163 = ($1162|0)>(372);
    if ($1163) {
     $$0 = 3;
     label = 252;
     break L4;
    }
    $1164 = ((($zone$0$ph)) + 8|0);
    HEAP32[$1164>>2] = $ip$2$ph;
    $1165 = ((($zone$0$ph)) + 12|0);
    $1166 = HEAP32[$0>>2]|0;
    $1167 = ((($1166)) + 904|0);
    $1168 = HEAP32[$1167>>2]|0;
    $1169 = (($1168) + ($1155<<2)|0);
    $1170 = HEAP32[$1169>>2]|0;
    HEAP32[$1165>>2] = $1170;
    $1171 = (($1155) + 1)|0;
    $1172 = HEAP32[$0>>2]|0;
    $1173 = ((($1172)) + 904|0);
    $1174 = HEAP32[$1173>>2]|0;
    $1175 = (($1174) + ($1171<<2)|0);
    $1176 = HEAP32[$1175>>2]|0;
    $1177 = ((($zone$0$ph)) + 16|0);
    HEAP32[$1177>>2] = $1176;
    $1178 = HEAP32[$1165>>2]|0;
    $1179 = ((($zone$0$ph)) + 20|0);
    HEAP32[$1179>>2] = $1178;
    $1180 = HEAP32[$1165>>2]|0;
    $1181 = ($1180|0)==(0|0);
    if ($1181) {
     $$0 = 3;
     label = 252;
     break L4;
    }
    $1182 = HEAP32[$1177>>2]|0;
    $1183 = ($1182|0)==($1180|0);
    if ($1183) {
     $$0 = 3;
     label = 252;
     break L4;
    }
    $1184 = HEAP32[$0>>2]|0;
    $1185 = ((($1184)) + 676|0);
    HEAP32[$1185>>2] = $1165;
    $1186 = HEAP32[$1165>>2]|0;
    $1187 = HEAP32[$1177>>2]|0;
    $args$12 = $396;$ip$3 = $1186;$limit$1 = $1187;$x$16 = $x$0$ph;$y$16 = $y$0$ph;$zone$1 = $1165;
    break;
   }
   default: {
    $$0 = 7;
    label = 252;
    break L4;
   }
   }
  } while(0);
  $1239 = HEAP32[$0>>2]|0;
  $1240 = ((($1239)) + 276|0);
  HEAP32[$1240>>2] = $args$12;
  $1241 = HEAP32[$0>>2]|0;
  $1242 = ((($1241)) + 276|0);
  $1243 = HEAP32[$1242>>2]|0;
  $1244 = $1243;
  $1245 = (($1244) - ($50))|0;
  $1246 = ($1245|0)>(188);
  if ($1246) {
   $$0 = 130;
   label = 252;
   break;
  } else {
   $ip$0$ph = $ip$3;$limit$0$ph = $limit$1;$x$0$ph = $x$16;$y$0$ph = $y$16;$zone$0$ph = $zone$1;
  }
 }
 if ((label|0) == 183) {
  $903 = HEAP32[$0>>2]|0;
  $904 = HEAP32[$$lcssa2135>>2]|0;
  $$sum51 = (1 - ($$lcssa2132))|0;
  $905 = (($$lcssa2127) + ($$sum51<<2)|0);
  $906 = HEAP32[$905>>2]|0;
  $$sum52 = (2 - ($$lcssa2132))|0;
  $907 = (($$lcssa2127) + ($$sum52<<2)|0);
  $908 = HEAP32[$907>>2]|0;
  $$sum53 = (3 - ($$lcssa2132))|0;
  $909 = (($$lcssa2127) + ($$sum53<<2)|0);
  $910 = HEAP32[$909>>2]|0;
  $911 = $910 >> 16;
  $$sum54 = (4 - ($$lcssa2132))|0;
  $912 = (($$lcssa2127) + ($$sum54<<2)|0);
  $913 = HEAP32[$912>>2]|0;
  $914 = $913 >> 16;
  $915 = (_cff_operator_seac($903,$904,$906,$908,$911,$914)|0);
  $916 = ((($decoder)) + 12|0);
  $917 = HEAP32[$916>>2]|0;
  _FT_GlyphLoader_Add($917);
  $$0 = $915;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 184) {
  $918 = ($$lcssa2139|0)>(3);
  if ($918) {
   $919 = HEAP32[$0>>2]|0;
   $920 = ((($919)) + 744|0);
   $921 = HEAP32[$920>>2]|0;
   $$sum47 = (-4 - ($$lcssa2133))|0;
   $922 = (($$lcssa2128) + ($$sum47<<2)|0);
   $923 = HEAP32[$922>>2]|0;
   $$sum48 = (-3 - ($$lcssa2133))|0;
   $924 = (($$lcssa2128) + ($$sum48<<2)|0);
   $925 = HEAP32[$924>>2]|0;
   $$sum49 = (-2 - ($$lcssa2133))|0;
   $926 = (($$lcssa2128) + ($$sum49<<2)|0);
   $927 = HEAP32[$926>>2]|0;
   $928 = $927 >> 16;
   $req_args$0$not = $req_args$0$lcssa2130 | -16;
   $$sum50 = $req_args$0$not ^ 15;
   $929 = (($$lcssa2128) + ($$sum50<<2)|0);
   $930 = HEAP32[$929>>2]|0;
   $931 = $930 >> 16;
   $932 = (_cff_operator_seac($919,0,$923,$925,$928,$931)|0);
   $933 = HEAP32[$0>>2]|0;
   $934 = ((($933)) + 744|0);
   HEAP32[$934>>2] = $921;
   $$0 = $932;
   STACKTOP = sp;return ($$0|0);
  }
  _cff_builder_close_contour($decoder);
  do {
   if ($43) {
    $935 = ((($31)) + 8|0);
    $936 = HEAP32[$935>>2]|0;
    $937 = HEAP32[$31>>2]|0;
    $938 = ((($decoder)) + 20|0);
    $939 = HEAP32[$938>>2]|0;
    $940 = ((($939)) + 2|0);
    $941 = HEAP16[$940>>1]|0;
    $942 = $941 << 16 >> 16;
    $943 = (FUNCTION_TABLE_iii[$936 & 255]($937,$942)|0);
    $944 = ($943|0)==(0);
    if ($944) {
     $945 = ((($31)) + 24|0);
     $946 = HEAP32[$945>>2]|0;
     $947 = HEAP32[$31>>2]|0;
     $948 = HEAP32[$938>>2]|0;
     $949 = ((($decoder)) + 72|0);
     $950 = HEAP32[$949>>2]|0;
     $951 = HEAP32[$0>>2]|0;
     $952 = ((($951)) + 920|0);
     $953 = HEAP32[$952>>2]|0;
     (FUNCTION_TABLE_iiiii[$946 & 63]($947,$948,$950,$953)|0);
     break;
    } else {
     $$0 = 3;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $954 = ((($decoder)) + 12|0);
  $955 = HEAP32[$954>>2]|0;
  _FT_GlyphLoader_Add($955);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 252) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _cff_slot_load($glyph,$size,$glyph_index,$load_flags) {
 $glyph = $glyph|0;
 $size = $size|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 var $$0 = 0, $$01 = 0, $$not = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $advance = 0, $cbox = 0, $charstring = 0, $charstring_len = 0, $decoder = 0, $fd_index$0 = 0, $font_matrix = 0, $font_offset$sroa$0$0 = 0, $font_offset$sroa$6$0 = 0, $force_scaling$0 = 0, $load_flags$ = 0, $metrics = 0, $metrics1 = 0;
 var $n$015 = 0, $or$cond = 0, $or$cond7 = 0, $vec$016 = 0, $vertAdvance = 0, $vertBearingY = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0;
 $decoder = sp + 64|0;
 $font_matrix = sp + 48|0;
 $metrics = sp + 1000|0;
 $charstring = sp + 44|0;
 $charstring_len = sp + 40|0;
 $metrics1 = sp + 24|0;
 $cbox = sp + 8|0;
 $advance = sp;
 $vertBearingY = sp + 994|0;
 $vertAdvance = sp + 992|0;
 $0 = ((($glyph)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 692|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 1456|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(65535);
 if ($6) {
  label = 5;
 } else {
  $7 = ((($3)) + 1152|0);
  $8 = ((($3)) + 1164|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   label = 5;
  } else {
   $11 = ($glyph_index|0)==(0);
   if ($11) {
    $$01 = 0;
   } else {
    $12 = (_cff_charset_cid_to_gindex($7,$glyph_index)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 6;
     STACKTOP = sp;return ($$0|0);
    } else {
     $$01 = $12;
    }
   }
  }
 }
 if ((label|0) == 5) {
  $14 = ((($3)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15>>>0)>($glyph_index>>>0);
  if ($16) {
   $$01 = $glyph_index;
  } else {
   $$0 = 6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $17 = $load_flags & 1024;
 $18 = ($17|0)==(0);
 $19 = $load_flags | 3;
 $load_flags$ = $18 ? $load_flags : $19;
 $20 = ((($glyph)) + 164|0);
 HEAP32[$20>>2] = 65536;
 $21 = ((($glyph)) + 168|0);
 HEAP32[$21>>2] = 65536;
 $22 = ($size|0)!=(0|0);
 if ($22) {
  $23 = ((($size)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$20>>2] = $24;
  $25 = ((($size)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$21>>2] = $26;
  $27 = HEAP32[$size>>2]|0;
  $28 = ((($27)) + 532|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($27)) + 104|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($size)) + 44|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(-1);
  if (!($34)) {
   $35 = ((($29)) + 140|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0|0);
   $38 = $load_flags$ & 8;
   $39 = ($38|0)==(0);
   $or$cond = $39 & $37;
   if ($or$cond) {
    $40 = ((($29)) + 104|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($glyph)) + 76|0);
    $43 = (FUNCTION_TABLE_iiiiiiii[$41 & 1]($1,$33,$$01,$load_flags$,$31,$42,$metrics)|0);
    $44 = ($43|0)==(0);
    if ($44) {
     $45 = ((($glyph)) + 110|0);
     HEAP16[$45>>1] = 0;
     $46 = ((($glyph)) + 108|0);
     HEAP16[$46>>1] = 0;
     $47 = ((($metrics)) + 1|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $48&255;
     $50 = $49 << 6;
     $51 = ((($glyph)) + 24|0);
     HEAP32[$51>>2] = $50;
     $52 = HEAP8[$metrics>>0]|0;
     $53 = $52&255;
     $54 = $53 << 6;
     $55 = ((($glyph)) + 28|0);
     HEAP32[$55>>2] = $54;
     $56 = ((($metrics)) + 2|0);
     $57 = HEAP8[$56>>0]|0;
     $58 = $57 << 24 >> 24;
     $59 = $58 << 6;
     $60 = ((($glyph)) + 32|0);
     HEAP32[$60>>2] = $59;
     $61 = ((($metrics)) + 3|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = $63 << 6;
     $65 = ((($glyph)) + 36|0);
     HEAP32[$65>>2] = $64;
     $66 = ((($metrics)) + 4|0);
     $67 = HEAP8[$66>>0]|0;
     $68 = $67&255;
     $69 = $68 << 6;
     $70 = ((($glyph)) + 40|0);
     HEAP32[$70>>2] = $69;
     $71 = ((($metrics)) + 5|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72 << 24 >> 24;
     $74 = $73 << 6;
     $75 = ((($glyph)) + 44|0);
     HEAP32[$75>>2] = $74;
     $76 = ((($metrics)) + 6|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77 << 24 >> 24;
     $79 = $78 << 6;
     $80 = ((($glyph)) + 48|0);
     HEAP32[$80>>2] = $79;
     $81 = ((($metrics)) + 7|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 << 6;
     $85 = ((($glyph)) + 52|0);
     HEAP32[$85>>2] = $84;
     $86 = ((($glyph)) + 72|0);
     HEAP32[$86>>2] = 1651078259;
     $87 = $load_flags$ & 16;
     $88 = ($87|0)==(0);
     if ($88) {
      $95 = HEAP8[$56>>0]|0;
      $96 = $95 << 24 >> 24;
      $97 = ((($glyph)) + 100|0);
      HEAP32[$97>>2] = $96;
      $98 = HEAP8[$61>>0]|0;
      $99 = $98 << 24 >> 24;
      $100 = ((($glyph)) + 104|0);
      HEAP32[$100>>2] = $99;
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     } else {
      $89 = HEAP8[$71>>0]|0;
      $90 = $89 << 24 >> 24;
      $91 = ((($glyph)) + 100|0);
      HEAP32[$91>>2] = $90;
      $92 = HEAP8[$76>>0]|0;
      $93 = $92 << 24 >> 24;
      $94 = ((($glyph)) + 104|0);
      HEAP32[$94>>2] = $93;
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  }
 }
 $101 = $load_flags$ & 16384;
 $102 = ($101|0)==(0);
 if (!($102)) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $103 = ((($3)) + 1896|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)==(0);
 if ($105) {
  $131 = ((($3)) + 1372|0);
  ;HEAP32[$font_matrix>>2]=HEAP32[$131>>2]|0;HEAP32[$font_matrix+4>>2]=HEAP32[$131+4>>2]|0;HEAP32[$font_matrix+8>>2]=HEAP32[$131+8>>2]|0;HEAP32[$font_matrix+12>>2]=HEAP32[$131+12>>2]|0;
  $132 = ((($3)) + 1396|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ((($3)) + 1400|0);
  $135 = HEAP32[$134>>2]|0;
  $font_offset$sroa$0$0 = $133;$font_offset$sroa$6$0 = $135;$force_scaling$0 = 0;
 } else {
  $106 = ((($3)) + 2924|0);
  $107 = (_cff_fd_select_get($106,$$01)|0);
  $108 = $107&255;
  $109 = HEAP32[$103>>2]|0;
  $110 = ($108>>>0)<($109>>>0);
  $111 = (($109) + 255)|0;
  $112 = $111&255;
  $fd_index$0 = $110 ? $107 : $112;
  $113 = ((($3)) + 1392|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $fd_index$0&255;
  $116 = (((($3)) + 1900|0) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ((($117)) + 68|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($117)) + 48|0);
  ;HEAP32[$font_matrix>>2]=HEAP32[$120>>2]|0;HEAP32[$font_matrix+4>>2]=HEAP32[$120+4>>2]|0;HEAP32[$font_matrix+8>>2]=HEAP32[$120+8>>2]|0;HEAP32[$font_matrix+12>>2]=HEAP32[$120+12>>2]|0;
  $121 = HEAP32[$116>>2]|0;
  $122 = ((($121)) + 72|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ((($121)) + 76|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($114|0)==($119|0);
  if ($126) {
   $font_offset$sroa$0$0 = $123;$font_offset$sroa$6$0 = $125;$force_scaling$0 = 0;
  } else {
   $127 = HEAP32[$20>>2]|0;
   $128 = (_FT_MulDiv($127,$114,$119)|0);
   HEAP32[$20>>2] = $128;
   $129 = HEAP32[$21>>2]|0;
   $130 = (_FT_MulDiv($129,$114,$119)|0);
   HEAP32[$21>>2] = $130;
   $font_offset$sroa$0$0 = $123;$font_offset$sroa$6$0 = $125;$force_scaling$0 = 1;
  }
 }
 $136 = ((($glyph)) + 108|0);
 $137 = ((($glyph)) + 110|0);
 HEAP16[$137>>1] = 0;
 HEAP16[$136>>1] = 0;
 $138 = $load_flags$ & 1;
 $139 = $load_flags$ & 3;
 $140 = ($139|0)==(0);
 $141 = $140&1;
 $142 = ((($glyph)) + 72|0);
 HEAP32[$142>>2] = 1869968492;
 $143 = $load_flags$ >>> 16;
 $144 = $143 & 15;
 _cff_decoder_init($decoder,$1,$size,$glyph,$141,$144);
 $145 = $load_flags$ & 256;
 $146 = ($145|0)==(0);
 if (!($146)) {
  $147 = ((($decoder)) + 753|0);
  HEAP8[$147>>0] = 1;
 }
 $148 = $load_flags$ & 1024;
 $149 = ((($decoder)) + 66|0);
 HEAP8[$149>>0] = 0;
 $150 = (_cff_get_glyph_data($1,$$01,$charstring,$charstring_len)|0);
 $151 = ($150|0)==(0);
 if (!($151)) {
  $$0 = $150;
  STACKTOP = sp;return ($$0|0);
 }
 $152 = (_cff_decoder_prepare($decoder,$size,$$01)|0);
 $153 = ($152|0)==(0);
 if (!($153)) {
  $$0 = $152;
  STACKTOP = sp;return ($$0|0);
 }
 $154 = HEAP32[$charstring>>2]|0;
 $155 = HEAP32[$charstring_len>>2]|0;
 $156 = (_cff_decoder_parse_charstrings($decoder,$154,$155)|0);
 $157 = HEAP32[$charstring_len>>2]|0;
 _cff_free_glyph_data($1,$charstring,$157);
 $158 = ($156|0)==(0);
 if (!($158)) {
  $$0 = $156;
  STACKTOP = sp;return ($$0|0);
 }
 $159 = ((($1)) + 128|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ((($160)) + 52|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)==(0|0);
 if ($163) {
  $166 = ((($3)) + 1200|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($167|0)==(0|0);
  if (!($168)) {
   $169 = ((($3)) + 1204|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($167) + ($$01<<2)|0);
   $172 = HEAP32[$171>>2]|0;
   $$sum = (($172) + -1)|0;
   $173 = (($170) + ($$sum)|0);
   $174 = ((($glyph)) + 136|0);
   HEAP32[$174>>2] = $173;
   $175 = HEAP32[$charstring_len>>2]|0;
   $176 = ((($glyph)) + 140|0);
   HEAP32[$176>>2] = $175;
  }
 } else {
  $164 = ((($glyph)) + 136|0);
  HEAP32[$164>>2] = 0;
  $165 = ((($glyph)) + 140|0);
  HEAP32[$165>>2] = 0;
 }
 _cff_builder_done($decoder);
 $177 = ((($1)) + 128|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = ((($178)) + 52|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = ($180|0)==(0|0);
 if (!($181)) {
  $182 = HEAP32[$180>>2]|0;
  $183 = ((($182)) + 8|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = ($184|0)==(0|0);
  if (!($185)) {
   $186 = ((($decoder)) + 32|0);
   $187 = HEAP32[$186>>2]|0;
   HEAP32[$metrics1>>2] = $187;
   $188 = ((($metrics1)) + 4|0);
   HEAP32[$188>>2] = 0;
   $189 = ((($decoder)) + 40|0);
   $190 = HEAP32[$189>>2]|0;
   $191 = ((($metrics1)) + 8|0);
   HEAP32[$191>>2] = $190;
   $192 = ((($decoder)) + 44|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = ((($metrics1)) + 12|0);
   HEAP32[$194>>2] = $193;
   $195 = HEAP32[$177>>2]|0;
   $196 = ((($195)) + 52|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = HEAP32[$197>>2]|0;
   $199 = ((($198)) + 8|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ((($197)) + 4|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = (FUNCTION_TABLE_iiiii[$200 & 63]($202,$$01,0,$metrics1)|0);
   $204 = HEAP32[$metrics1>>2]|0;
   HEAP32[$186>>2] = $204;
   $205 = HEAP32[$191>>2]|0;
   HEAP32[$189>>2] = $205;
   $206 = HEAP32[$194>>2]|0;
   HEAP32[$192>>2] = $206;
   $207 = ($203|0)==(0);
   if (!($207)) {
    $$0 = $203;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $208 = ($148|0)==(0);
 if (!($208)) {
  $209 = ((($glyph)) + 156|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = ((($decoder)) + 32|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = ((($glyph)) + 32|0);
  HEAP32[$213>>2] = $212;
  $214 = ((($decoder)) + 744|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = ((($glyph)) + 40|0);
  HEAP32[$216>>2] = $215;
  $217 = ((($210)) + 12|0);
  ;HEAP32[$217>>2]=HEAP32[$font_matrix>>2]|0;HEAP32[$217+4>>2]=HEAP32[$font_matrix+4>>2]|0;HEAP32[$217+8>>2]=HEAP32[$font_matrix+8>>2]|0;HEAP32[$217+12>>2]=HEAP32[$font_matrix+12>>2]|0;
  $218 = ((($210)) + 28|0);
  HEAP32[$218>>2] = $font_offset$sroa$0$0;
  $219 = ((($210)) + 32|0);
  HEAP32[$219>>2] = $font_offset$sroa$6$0;
  $220 = ((($210)) + 8|0);
  HEAP8[$220>>0] = 1;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $221 = ((($glyph)) + 24|0);
 $222 = ((($decoder)) + 744|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = ((($glyph)) + 40|0);
 HEAP32[$224>>2] = $223;
 $225 = HEAP32[$222>>2]|0;
 $226 = ((($glyph)) + 56|0);
 HEAP32[$226>>2] = $225;
 $227 = ((($glyph)) + 156|0);
 $228 = HEAP32[$227>>2]|0;
 $229 = ((($228)) + 8|0);
 HEAP8[$229>>0] = 0;
 $230 = ((($1)) + 296|0);
 $231 = HEAP8[$230>>0]|0;
 $232 = ($231<<24>>24)==(0);
 if ($232) {
  label = 36;
 } else {
  $233 = ((($1)) + 334|0);
  $234 = HEAP16[$233>>1]|0;
  $235 = ($234<<16>>16)==(0);
  if ($235) {
   label = 36;
  } else {
   $236 = ((($1)) + 336|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = ($237|0)==(0|0);
   if ($238) {
    label = 36;
   } else {
    HEAP16[$vertBearingY>>1] = 0;
    HEAP16[$vertAdvance>>1] = 0;
    $239 = ((($1)) + 532|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = ((($240)) + 156|0);
    $242 = HEAP32[$241>>2]|0;
    (FUNCTION_TABLE_iiiiii[$242 & 63]($1,1,$$01,$vertBearingY,$vertAdvance)|0);
    $243 = HEAP16[$vertBearingY>>1]|0;
    $244 = $243 << 16 >> 16;
    $245 = ((($glyph)) + 48|0);
    HEAP32[$245>>2] = $244;
    $246 = HEAP16[$vertAdvance>>1]|0;
    $247 = $246&65535;
    $248 = ((($glyph)) + 52|0);
    HEAP32[$248>>2] = $247;
    $342 = 1;
   }
  }
 }
 do {
  if ((label|0) == 36) {
   $249 = ((($1)) + 368|0);
   $250 = HEAP16[$249>>1]|0;
   $251 = ($250<<16>>16)==(-1);
   if ($251) {
    $260 = ((($1)) + 220|0);
    $261 = HEAP16[$260>>1]|0;
    $262 = $261 << 16 >> 16;
    $263 = ((($1)) + 222|0);
    $264 = HEAP16[$263>>1]|0;
    $265 = $264 << 16 >> 16;
    $266 = (($262) - ($265))|0;
    $267 = ((($glyph)) + 52|0);
    HEAP32[$267>>2] = $266;
    $342 = 0;
    break;
   } else {
    $252 = ((($1)) + 438|0);
    $253 = HEAP16[$252>>1]|0;
    $254 = $253 << 16 >> 16;
    $255 = ((($1)) + 440|0);
    $256 = HEAP16[$255>>1]|0;
    $257 = $256 << 16 >> 16;
    $258 = (($254) - ($257))|0;
    $259 = ((($glyph)) + 52|0);
    HEAP32[$259>>2] = $258;
    $342 = 0;
    break;
   }
  }
 } while(0);
 $268 = ((($glyph)) + 52|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = ((($glyph)) + 60|0);
 HEAP32[$270>>2] = $269;
 HEAP32[$142>>2] = 1869968492;
 $271 = ((($glyph)) + 124|0);
 HEAP32[$271>>2] = 0;
 if ($22) {
  $272 = ((($size)) + 14|0);
  $273 = HEAP16[$272>>1]|0;
  $274 = ($273&65535)<(24);
  if ($274) {
   HEAP32[$271>>2] = 256;
  }
 }
 $275 = HEAP32[$271>>2]|0;
 $276 = $275 | 4;
 HEAP32[$271>>2] = $276;
 $277 = HEAP32[$font_matrix>>2]|0;
 $278 = ($277|0)==(65536);
 if ($278) {
  $279 = ((($font_matrix)) + 12|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = ($280|0)==(65536);
  if ($281) {
   $282 = ((($font_matrix)) + 4|0);
   $283 = HEAP32[$282>>2]|0;
   $284 = ($283|0)==(0);
   if ($284) {
    $285 = ((($font_matrix)) + 8|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = ($286|0)==(0);
    if (!($287)) {
     label = 46;
    }
   } else {
    label = 46;
   }
  } else {
   label = 46;
  }
 } else {
  label = 46;
 }
 if ((label|0) == 46) {
  _FT_Outline_Transform($136,$font_matrix);
 }
 $288 = $font_offset$sroa$6$0 | $font_offset$sroa$0$0;
 $289 = ($288|0)==(0);
 if (!($289)) {
  _FT_Outline_Translate($136,$font_offset$sroa$0$0,$font_offset$sroa$6$0);
 }
 $290 = HEAP32[$224>>2]|0;
 HEAP32[$advance>>2] = $290;
 $291 = ((($advance)) + 4|0);
 HEAP32[$291>>2] = 0;
 _FT_Vector_Transform($advance,$font_matrix);
 $292 = HEAP32[$advance>>2]|0;
 $293 = (($292) + ($font_offset$sroa$0$0))|0;
 HEAP32[$224>>2] = $293;
 HEAP32[$advance>>2] = 0;
 $294 = HEAP32[$268>>2]|0;
 HEAP32[$291>>2] = $294;
 _FT_Vector_Transform($advance,$font_matrix);
 $295 = HEAP32[$291>>2]|0;
 $296 = (($295) + ($font_offset$sroa$6$0))|0;
 HEAP32[$268>>2] = $296;
 $$not = ($138|0)!=(0);
 $297 = ($force_scaling$0|0)==(0);
 $or$cond7 = $$not & $297;
 if (!($or$cond7)) {
  $298 = ((($glyph)) + 112|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[$20>>2]|0;
  $301 = HEAP32[$21>>2]|0;
  if ($140) {
   $302 = ((($decoder)) + 68|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = ($303|0)==(0|0);
   if ($304) {
    label = 52;
   }
  } else {
   label = 52;
  }
  if ((label|0) == 52) {
   $305 = HEAP16[$137>>1]|0;
   $306 = ($305<<16>>16)>(0);
   if ($306) {
    $307 = $305 << 16 >> 16;
    $n$015 = $307;$vec$016 = $299;
    while(1) {
     $308 = HEAP32[$vec$016>>2]|0;
     $309 = (_FT_MulFix($308,$300)|0);
     HEAP32[$vec$016>>2] = $309;
     $310 = ((($vec$016)) + 4|0);
     $311 = HEAP32[$310>>2]|0;
     $312 = (_FT_MulFix($311,$301)|0);
     HEAP32[$310>>2] = $312;
     $313 = (($n$015) + -1)|0;
     $314 = ((($vec$016)) + 8|0);
     $315 = ($n$015|0)>(1);
     if ($315) {
      $n$015 = $313;$vec$016 = $314;
     } else {
      break;
     }
    }
   }
  }
  $316 = HEAP32[$224>>2]|0;
  $317 = (_FT_MulFix($316,$300)|0);
  HEAP32[$224>>2] = $317;
  $318 = HEAP32[$268>>2]|0;
  $319 = (_FT_MulFix($318,$301)|0);
  HEAP32[$268>>2] = $319;
 }
 _FT_Outline_Get_CBox($136,$cbox);
 $320 = ((($cbox)) + 8|0);
 $321 = HEAP32[$320>>2]|0;
 $322 = HEAP32[$cbox>>2]|0;
 $323 = (($321) - ($322))|0;
 HEAP32[$221>>2] = $323;
 $324 = ((($cbox)) + 12|0);
 $325 = HEAP32[$324>>2]|0;
 $326 = ((($cbox)) + 4|0);
 $327 = HEAP32[$326>>2]|0;
 $328 = (($325) - ($327))|0;
 $329 = ((($glyph)) + 28|0);
 HEAP32[$329>>2] = $328;
 $330 = HEAP32[$cbox>>2]|0;
 $331 = ((($glyph)) + 32|0);
 HEAP32[$331>>2] = $330;
 $332 = HEAP32[$324>>2]|0;
 $333 = ((($glyph)) + 36|0);
 HEAP32[$333>>2] = $332;
 if ($342) {
  $334 = HEAP32[$331>>2]|0;
  $335 = HEAP32[$224>>2]|0;
  $336 = (($335|0) / 2)&-1;
  $337 = (($334) - ($336))|0;
  $338 = ((($glyph)) + 44|0);
  HEAP32[$338>>2] = $337;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $339 = $load_flags$ & 16;
 $340 = ($339|0)==(0);
 if ($340) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $341 = HEAP32[$268>>2]|0;
 _ft_synthesize_vertical_metrics($221,$341);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _cff_builder_init($builder,$face,$size,$glyph,$hinting) {
 $builder = $builder|0;
 $face = $face|0;
 $size = $size|0;
 $glyph = $glyph|0;
 $hinting = $hinting|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($builder)) + 64|0);
 HEAP8[$0>>0] = 0;
 $1 = ((($builder)) + 65|0);
 HEAP8[$1>>0] = 1;
 $2 = ((($builder)) + 4|0);
 HEAP32[$2>>2] = $face;
 $3 = ((($builder)) + 8|0);
 HEAP32[$3>>2] = $glyph;
 $4 = ((($face)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$builder>>2] = $5;
 $6 = ($glyph|0)==(0|0);
 if (!($6)) {
  $7 = ((($glyph)) + 156|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($builder)) + 12|0);
  HEAP32[$10>>2] = $9;
  $11 = ((($9)) + 20|0);
  $12 = ((($builder)) + 16|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($9)) + 56|0);
  $14 = ((($builder)) + 20|0);
  HEAP32[$14>>2] = $13;
  _FT_GlyphLoader_Rewind($9);
  $15 = ((($builder)) + 72|0);
  HEAP32[$15>>2] = 0;
  $16 = ((($builder)) + 68|0);
  HEAP32[$16>>2] = 0;
  $17 = ($hinting<<24>>24)!=(0);
  $18 = ($size|0)!=(0|0);
  $or$cond = $18 & $17;
  if ($or$cond) {
   $19 = ((($size)) + 40|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$15>>2] = $21;
   $22 = HEAP32[$7>>2]|0;
   $23 = ((($22)) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$16>>2] = $24;
  }
 }
 $25 = ((($builder)) + 24|0);
 ;HEAP32[$25>>2]=0|0;HEAP32[$25+4>>2]=0|0;HEAP32[$25+8>>2]=0|0;HEAP32[$25+12>>2]=0|0;HEAP32[$25+16>>2]=0|0;HEAP32[$25+20>>2]=0|0;
 return;
}
function _cff_compute_bias($in_charstring_type,$num_subrs) {
 $in_charstring_type = $in_charstring_type|0;
 $num_subrs = $num_subrs|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($in_charstring_type|0)==(1);
 if ($0) {
  $result$0 = 0;
 } else {
  $1 = ($num_subrs>>>0)<(1240);
  if ($1) {
   $result$0 = 107;
  } else {
   $2 = ($num_subrs>>>0)<(33900);
   $$ = $2 ? 1131 : 32768;
   $result$0 = $$;
  }
 }
 return ($result$0|0);
}
function _cff_builder_close_contour($builder) {
 $builder = $builder|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($builder)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP16[$1>>1]|0;
 $4 = ($3<<16>>16)<(2);
 if ($4) {
  $23 = 0;
 } else {
  $5 = $3 << 16 >> 16;
  $6 = (($5) + -2)|0;
  $7 = ((($1)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($6<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = (($11) + 1)|0;
  $23 = $12;
 }
 $13 = ((($1)) + 2|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ($14<<16>>16)>(1);
 if ($15) {
  $16 = $14 << 16 >> 16;
  $17 = ((($1)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $$sum = (($16) + -1)|0;
  $19 = ((($1)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($$sum)|0);
  $22 = (($18) + ($23<<3)|0);
  $24 = HEAP32[$22>>2]|0;
  $25 = (($18) + ($$sum<<3)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($24|0)==($26|0);
  if ($27) {
   $28 = (((($18) + ($23<<3)|0)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (((($18) + ($$sum<<3)|0)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($29|0)==($31|0);
   if ($32) {
    $33 = HEAP8[$21>>0]|0;
    $34 = ($33<<24>>24)==(1);
    if ($34) {
     $35 = (($14) + -1)<<16>>16;
     HEAP16[$13>>1] = $35;
    }
   }
  }
 }
 $36 = HEAP16[$1>>1]|0;
 $37 = $36 << 16 >> 16;
 $38 = ($36<<16>>16)>(0);
 if (!($38)) {
  return;
 }
 $39 = HEAP16[$13>>1]|0;
 $40 = $39 << 16 >> 16;
 $41 = (($40) + -1)|0;
 $42 = ($23|0)==($41|0);
 if ($42) {
  $43 = (($36) + -1)<<16>>16;
  HEAP16[$1>>1] = $43;
  $44 = HEAP16[$13>>1]|0;
  $45 = (($44) + -1)<<16>>16;
  HEAP16[$13>>1] = $45;
  return;
 } else {
  $46 = $41&65535;
  $47 = (($37) + -1)|0;
  $48 = ((($1)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($47<<1)|0);
  HEAP16[$50>>1] = $46;
  return;
 }
}
function _cff_builder_start_point($builder,$x,$y) {
 $builder = $builder|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($builder)) + 64|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $error$0 = 0;
  return ($error$0|0);
 }
 HEAP8[$0>>0] = 1;
 $3 = (_cff_builder_add_contour($builder)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $error$0 = $3;
  return ($error$0|0);
 }
 $5 = (_cff_builder_add_point1($builder,$x,$y)|0);
 $error$0 = $5;
 return ($error$0|0);
}
function _check_points($builder,$count) {
 $builder = $builder|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count|0)==(0);
 if ($0) {
  $15 = 0;
  return ($15|0);
 }
 $1 = ((($builder)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 22|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = ((($2)) + 58|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($count))|0;
 $10 = (($9) + ($8))|0;
 $11 = ((($2)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if (!($13)) {
  $15 = 0;
  return ($15|0);
 }
 $14 = (_FT_GlyphLoader_CheckPoints($2,$count,0)|0);
 $15 = $14;
 return ($15|0);
}
function _cff_builder_add_point($builder,$x,$y,$flag) {
 $builder = $builder|0;
 $x = $x|0;
 $y = $y|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($builder)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($builder)) + 65|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $19 = ((($1)) + 2|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = (($20) + 1)<<16>>16;
  HEAP16[$19>>1] = $21;
  return;
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 2|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9)|0);
 $13 = $x >> 16;
 $14 = (($6) + ($9<<3)|0);
 HEAP32[$14>>2] = $13;
 $15 = $y >> 16;
 $16 = (((($6) + ($9<<3)|0)) + 4|0);
 HEAP32[$16>>2] = $15;
 $17 = ($flag<<24>>24)!=(0);
 $18 = $17 ? 1 : 2;
 HEAP8[$12>>0] = $18;
 $19 = ((($1)) + 2|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = (($20) + 1)<<16>>16;
 HEAP16[$19>>1] = $21;
 return;
}
function _cff_builder_add_point1($builder,$x,$y) {
 $builder = $builder|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_points($builder,1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  return ($0|0);
 }
 _cff_builder_add_point($builder,$x,$y,1);
 return ($0|0);
}
function _cff_operator_seac($decoder,$asb,$adx,$ady,$bchar,$achar) {
 $decoder = $decoder|0;
 $asb = $asb|0;
 $adx = $adx|0;
 $ady = $ady|0;
 $bchar = $bchar|0;
 $achar = $achar|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $achar_index$0 = 0, $bchar_index$0 = 0, $charstring = 0, $charstring_len = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $charstring = sp + 4|0;
 $charstring_len = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($decoder)) + 924|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $$0 = 160;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($decoder)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($adx))|0;
 $8 = ((($decoder)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($ady))|0;
 $11 = ((($1)) + 128|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $16 = ((($1)) + 692|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_cff_lookup_glyph_by_stdcharcode($17,$bchar)|0);
  $19 = (_cff_lookup_glyph_by_stdcharcode($17,$achar)|0);
  $achar_index$0 = $19;$bchar_index$0 = $18;
 } else {
  $achar_index$0 = $achar;$bchar_index$0 = $bchar;
 }
 $20 = $bchar_index$0 | $achar_index$0;
 $21 = ($20|0)<(0);
 if ($21) {
  $$0 = 160;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ((($decoder)) + 66|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(0);
 do {
  if (!($24)) {
   $25 = ((($decoder)) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 156|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[$28>>2]|0;
   $30 = (_FT_GlyphLoader_CheckSubGlyphs($29,2)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    $32 = ((($29)) + 88|0);
    $33 = HEAP32[$32>>2]|0;
    HEAP32[$33>>2] = $bchar_index$0;
    $34 = ((($33)) + 4|0);
    HEAP16[$34>>1] = 514;
    $35 = ((($33)) + 8|0);
    HEAP32[$35>>2] = 0;
    $36 = ((($33)) + 12|0);
    HEAP32[$36>>2] = 0;
    $37 = ((($33)) + 32|0);
    HEAP32[$37>>2] = $achar_index$0;
    $38 = ((($33)) + 36|0);
    HEAP16[$38>>1] = 2;
    $39 = $7 >> 16;
    $40 = ((($33)) + 40|0);
    HEAP32[$40>>2] = $39;
    $41 = $10 >> 16;
    $42 = ((($33)) + 44|0);
    HEAP32[$42>>2] = $41;
    $43 = ((($26)) + 128|0);
    HEAP32[$43>>2] = 2;
    $44 = ((($29)) + 52|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($26)) + 132|0);
    HEAP32[$46>>2] = $45;
    $47 = ((($26)) + 72|0);
    HEAP32[$47>>2] = 1668246896;
    $48 = ((($29)) + 84|0);
    HEAP32[$48>>2] = 2;
    break;
   } else {
    $$0 = $30;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $49 = ((($decoder)) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 _FT_GlyphLoader_Prepare($50);
 $51 = (_cff_get_glyph_data($1,$bchar_index$0,$charstring,$charstring_len)|0);
 $52 = ($51|0)==(0);
 if ($52) {
  HEAP8[$2>>0] = 1;
  $53 = HEAP32[$charstring>>2]|0;
  $54 = HEAP32[$charstring_len>>2]|0;
  $55 = (_cff_decoder_parse_charstrings($decoder,$53,$54)|0);
  HEAP8[$2>>0] = 0;
  $56 = HEAP32[$charstring_len>>2]|0;
  _cff_free_glyph_data($1,$charstring,$56);
  $57 = ($55|0)==(0);
  if (!($57)) {
   $$0 = $55;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $58 = $5;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + 4)|0;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = ((($decoder)) + 40|0);
 $65 = $64;
 $66 = $65;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($65) + 4)|0;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = ((($decoder)) + 744|0);
 $72 = HEAP32[$71>>2]|0;
 HEAP32[$5>>2] = 0;
 HEAP32[$8>>2] = 0;
 $73 = (($7) - ($asb))|0;
 $74 = ((($decoder)) + 24|0);
 HEAP32[$74>>2] = $73;
 $75 = ((($decoder)) + 28|0);
 HEAP32[$75>>2] = $10;
 $76 = (_cff_get_glyph_data($1,$achar_index$0,$charstring,$charstring_len)|0);
 $77 = ($76|0)==(0);
 if ($77) {
  HEAP8[$2>>0] = 1;
  $78 = HEAP32[$charstring>>2]|0;
  $79 = HEAP32[$charstring_len>>2]|0;
  $80 = (_cff_decoder_parse_charstrings($decoder,$78,$79)|0);
  HEAP8[$2>>0] = 0;
  $81 = HEAP32[$charstring_len>>2]|0;
  _cff_free_glyph_data($1,$charstring,$81);
  $82 = ($80|0)==(0);
  if ($82) {
   $error$0 = 0;
  } else {
   $$0 = $80;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $error$0 = $76;
 }
 $83 = $5;
 $84 = $83;
 HEAP32[$84>>2] = $60;
 $85 = (($83) + 4)|0;
 $86 = $85;
 HEAP32[$86>>2] = $63;
 $87 = $64;
 $88 = $87;
 HEAP32[$88>>2] = $67;
 $89 = (($87) + 4)|0;
 $90 = $89;
 HEAP32[$90>>2] = $70;
 HEAP32[$71>>2] = $72;
 HEAP32[$74>>2] = 0;
 HEAP32[$75>>2] = 0;
 $$0 = $error$0;
 STACKTOP = sp;return ($$0|0);
}
function _cff_get_glyph_data($face,$glyph_index,$pointer,$length) {
 $face = $face|0;
 $glyph_index = $glyph_index|0;
 $pointer = $pointer|0;
 $length = $length|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $data = sp;
 $0 = ((($face)) + 128|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $13 = ((($face)) + 692|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 1176|0);
  $16 = (_cff_index_access_element($15,$glyph_index,$pointer,$length)|0);
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 } else {
  $5 = HEAP32[$3>>2]|0;
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($3)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$6 & 127]($8,$glyph_index,$data)|0);
  $10 = HEAP32[$data>>2]|0;
  HEAP32[$pointer>>2] = $10;
  $11 = ((($data)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$length>>2] = $12;
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _cff_free_glyph_data($face,$pointer,$length) {
 $face = $face|0;
 $pointer = $pointer|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $data = sp;
 $0 = ((($face)) + 128|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $15 = ((($face)) + 692|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 1176|0);
  _cff_index_forget_element($17,$pointer);
  STACKTOP = sp;return;
 } else {
  $5 = HEAP32[$pointer>>2]|0;
  HEAP32[$data>>2] = $5;
  $6 = ((($data)) + 4|0);
  HEAP32[$6>>2] = $length;
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($9)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vii[$12 & 31]($14,$data);
  STACKTOP = sp;return;
 }
}
function _cff_builder_done($builder) {
 $builder = $builder|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($builder)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($1)) + 108|0);
 $4 = ((($builder)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 ;HEAP32[$3>>2]=HEAP32[$5>>2]|0;HEAP32[$3+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$5+16>>2]|0;
 return;
}
function _cff_lookup_glyph_by_stdcharcode($cff,$charcode) {
 $cff = $cff|0;
 $charcode = $charcode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cff)) + 1160|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 $3 = ($charcode>>>0)>(255);
 $or$cond = $3 | $2;
 if ($or$cond) {
  $$0 = -1;
  return ($$0|0);
 }
 $4 = (_cff_get_standard_encoding($charcode)|0);
 $5 = ((($cff)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = -1;
  return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $n$02 = 0;
 while(1) {
  $9 = (($8) + ($n$02<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = ($10<<16>>16)==($4<<16>>16);
  if ($11) {
   $$0 = $n$02;
   label = 6;
   break;
  }
  $12 = (($n$02) + 1)|0;
  $13 = HEAP32[$5>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $n$02 = $12;
  } else {
   $$0 = -1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function _cff_builder_add_contour($builder) {
 $builder = $builder|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($builder)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($builder)) + 65|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = HEAP16[$1>>1]|0;
  $6 = (($5) + 1)<<16>>16;
  HEAP16[$1>>1] = $6;
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($builder)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 20|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = ((($8)) + 56|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = (($11) + 1)|0;
 $16 = (($15) + ($14))|0;
 $17 = ((($8)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16>>>0)>($18>>>0);
 if ($19) {
  $20 = (_FT_GlyphLoader_CheckPoints($8,0,1)|0);
  $21 = ($20|0)==(0);
  if (!($21)) {
   $$0 = $20;
   return ($$0|0);
  }
 }
 $22 = HEAP16[$1>>1]|0;
 $23 = ($22<<16>>16)>(0);
 if ($23) {
  $24 = $22 << 16 >> 16;
  $25 = ((($1)) + 2|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26&65535;
  $28 = (($27) + 65535)|0;
  $29 = $28&65535;
  $30 = (($24) + -1)|0;
  $31 = ((($1)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + ($30<<1)|0);
  HEAP16[$33>>1] = $29;
 }
 $34 = HEAP16[$1>>1]|0;
 $35 = (($34) + 1)<<16>>16;
 HEAP16[$1>>1] = $35;
 $$0 = 0;
 return ($$0|0);
}
function _af_autofitter_load_glyph($module,$slot,$size,$glyph_index,$load_flags) {
 $module = $module|0;
 $slot = $slot|0;
 $size = $size|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($module)) + 12|0);
 $1 = ((($slot)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_af_loader_load_glyph($0,$2,$glyph_index,$load_flags)|0);
 return ($3|0);
}
function _af_autofitter_init($module) {
 $module = $module|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($module)) + 12|0);
 $1 = ((($module)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (_af_loader_init($0,$3)|0);
 return ($4|0);
}
function _af_autofitter_done($module) {
 $module = $module|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($module)) + 12|0);
 _af_loader_done($0);
 return;
}
function _af_face_globals_new($face,$aglobals) {
 $face = $face|0;
 $aglobals = $aglobals|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $globals$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 28)|0;
 $5 = (_ft_mem_alloc($1,$4,$error)|0);
 $6 = HEAP32[$error>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$5>>2] = $face;
  $8 = HEAP32[$2>>2]|0;
  $9 = ((($5)) + 4|0);
  HEAP32[$9>>2] = $8;
  $10 = ((($5)) + 28|0);
  $11 = ((($5)) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = (_af_face_globals_compute_script_coverage($5)|0);
  HEAP32[$error>>2] = $12;
  $13 = ($12|0)==(0);
  if ($13) {
   $globals$0 = $5;
  } else {
   _af_face_globals_free($5);
   $globals$0 = 0;
  }
 } else {
  $globals$0 = $5;
 }
 HEAP32[$aglobals>>2] = $globals$0;
 $14 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function _af_face_globals_free($globals) {
 $globals = $globals|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($globals|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$globals>>2]|0;
 $2 = ((($1)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($globals)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = HEAP32[(5028)>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   FUNCTION_TABLE_vi[$7 & 127]($5);
  }
  $9 = HEAP32[$4>>2]|0;
  _ft_mem_free($3,$9);
  HEAP32[$4>>2] = 0;
 }
 $10 = ((($globals)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = HEAP32[(5156)>>2]|0;
  $14 = ($13|0)==(0|0);
  if (!($14)) {
   FUNCTION_TABLE_vi[$13 & 127]($11);
  }
  $15 = HEAP32[$10>>2]|0;
  _ft_mem_free($3,$15);
  HEAP32[$10>>2] = 0;
 }
 $16 = ((($globals)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  $19 = HEAP32[(3716)>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   FUNCTION_TABLE_vi[$19 & 127]($17);
  }
  $21 = HEAP32[$16>>2]|0;
  _ft_mem_free($3,$21);
  HEAP32[$16>>2] = 0;
 }
 $22 = ((($globals)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  $25 = HEAP32[(5060)>>2]|0;
  $26 = ($25|0)==(0|0);
  if (!($26)) {
   FUNCTION_TABLE_vi[$25 & 127]($23);
  }
  $27 = HEAP32[$22>>2]|0;
  _ft_mem_free($3,$27);
  HEAP32[$22>>2] = 0;
 }
 $28 = ((($globals)) + 4|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($globals)) + 8|0);
 HEAP32[$29>>2] = 0;
 HEAP32[$globals>>2] = 0;
 _ft_mem_free($3,$globals);
 return;
}
function _af_face_globals_get_metrics($globals,$gindex,$options,$ametrics) {
 $globals = $globals|0;
 $gindex = $gindex|0;
 $options = $options|0;
 $ametrics = $ametrics|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0;
 var $gidx$0 = 0, $metrics$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = $options & 15;
 HEAP32[$error>>2] = 0;
 $1 = ((($globals)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)>($gindex>>>0);
 do {
  if ($3) {
   $4 = ($0|0)==(0);
   $5 = (($0) + 1)|0;
   $6 = ($5>>>0)>(4);
   $or$cond = $4 | $6;
   if ($or$cond) {
    $7 = ((($globals)) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($8) + ($gindex)|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = $10&255;
    $12 = $11 & 127;
    $gidx$0 = $12;
   } else {
    $gidx$0 = $0;
   }
   $13 = (3676 + ($gidx$0<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = HEAP32[$14>>2]|0;
   $16 = (((($globals)) + 12|0) + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   if ($18) {
    $19 = HEAP32[$globals>>2]|0;
    $20 = ((($19)) + 100|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($14)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (_ft_mem_alloc($21,$23,$error)|0);
    $25 = HEAP32[$error>>2]|0;
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP32[$24>>2] = $14;
     $27 = ((($14)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(0|0);
     if (!($29)) {
      $30 = HEAP32[$globals>>2]|0;
      $31 = (FUNCTION_TABLE_iii[$28 & 255]($24,$30)|0);
      HEAP32[$error>>2] = $31;
      $32 = ($31|0)==(0);
      if (!($32)) {
       $33 = ((($14)) + 20|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = ($34|0)==(0|0);
       if (!($35)) {
        FUNCTION_TABLE_vi[$34 & 127]($24);
       }
       _ft_mem_free($21,$24);
       $metrics$0 = 0;
       break;
      }
     }
     $36 = HEAP32[$14>>2]|0;
     $37 = (((($globals)) + 12|0) + ($36<<2)|0);
     HEAP32[$37>>2] = $24;
     $metrics$0 = $24;
    } else {
     $metrics$0 = $24;
    }
   } else {
    $metrics$0 = $17;
   }
  } else {
   HEAP32[$error>>2] = 6;
   $metrics$0 = 0;
  }
 } while(0);
 HEAP32[$ametrics>>2] = $metrics$0;
 $38 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($38|0);
}
function _af_face_globals_is_digit($globals,$gindex) {
 $globals = $globals|0;
 $gindex = $gindex|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($globals)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($gindex>>>0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($globals)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($gindex)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 & 128;
 $9 = $8&255;
 $$0 = $9;
 return ($$0|0);
}
function _af_face_globals_compute_script_coverage($globals) {
 $globals = $globals|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $exitcond = 0, $gindex = 0, $i$06 = 0, $nn$05 = 0, $range$010 = 0, $ss$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $gindex = sp;
 $0 = HEAP32[$globals>>2]|0;
 $1 = ((($0)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($globals)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($globals)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _memset(($4|0),127,($6|0))|0;
 $7 = (_FT_Select_Charmap($0,1970170211)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $ss$012 = 0;
  while(1) {
   $9 = (3676 + ($ss$012<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $14 = HEAP32[$12>>2]|0;
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = $ss$012&255;
     $17 = $ss$012&255;
     $18 = $14;$range$010 = $12;
     while(1) {
      $19 = (_FT_Get_Char_Index($0,$18)|0);
      HEAP32[$gindex>>2] = $19;
      $20 = ($19|0)==(0);
      if (!($20)) {
       $21 = HEAP32[$5>>2]|0;
       $22 = ($19>>>0)<($21>>>0);
       if ($22) {
        $23 = (($4) + ($19)|0);
        $24 = HEAP8[$23>>0]|0;
        $25 = ($24<<24>>24)==(127);
        if ($25) {
         HEAP8[$23>>0] = $16;
        }
       }
      }
      $26 = ((($range$010)) + 4|0);
      $27 = (_FT_Get_Next_Char($0,$18,$gindex)|0);
      $28 = HEAP32[$gindex>>2]|0;
      $29 = ($28|0)==(0);
      L14: do {
       if (!($29)) {
        $32 = $27;$35 = $28;
        while(1) {
         $30 = HEAP32[$26>>2]|0;
         $31 = ($32>>>0)>($30>>>0);
         if ($31) {
          break L14;
         }
         $33 = HEAP32[$5>>2]|0;
         $34 = ($35>>>0)<($33>>>0);
         if ($34) {
          $36 = (($4) + ($35)|0);
          $37 = HEAP8[$36>>0]|0;
          $38 = ($37<<24>>24)==(127);
          if ($38) {
           HEAP8[$36>>0] = $17;
          }
         }
         $39 = (_FT_Get_Next_Char($0,$32,$gindex)|0);
         $40 = HEAP32[$gindex>>2]|0;
         $41 = ($40|0)==(0);
         if ($41) {
          break;
         } else {
          $32 = $39;$35 = $40;
         }
        }
       }
      } while(0);
      $42 = ((($range$010)) + 8|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($43|0)==(0);
      if ($44) {
       break;
      } else {
       $18 = $43;$range$010 = $42;
      }
     }
    }
   }
   $45 = (($ss$012) + 1)|0;
   $46 = ($45|0)==(4);
   if ($46) {
    $i$06 = 48;
    break;
   } else {
    $ss$012 = $45;
   }
  }
  while(1) {
   $47 = (_FT_Get_Char_Index($0,$i$06)|0);
   $48 = ($47|0)==(0);
   if (!($48)) {
    $49 = HEAP32[$5>>2]|0;
    $50 = ($47>>>0)<($49>>>0);
    if ($50) {
     $51 = (($4) + ($47)|0);
     $52 = HEAP8[$51>>0]|0;
     $53 = $52&255;
     $54 = $53 | 128;
     $55 = $54&255;
     HEAP8[$51>>0] = $55;
    }
   }
   $56 = (($i$06) + 1)|0;
   $exitcond = ($56|0)==(58);
   if ($exitcond) {
    $error$0 = $7;
    break;
   } else {
    $i$06 = $56;
   }
  }
 } else {
  $error$0 = 0;
 }
 $57 = HEAP32[$5>>2]|0;
 $58 = ($57|0)>(0);
 if ($58) {
  $nn$05 = 0;
 } else {
  (_FT_Set_Charmap($0,$2)|0);
  STACKTOP = sp;return ($error$0|0);
 }
 while(1) {
  $59 = (($4) + ($nn$05)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $61 & 127;
  $63 = ($62|0)==(127);
  if ($63) {
   $64 = $61 & 128;
   $65 = $64 | 2;
   $66 = $65&255;
   HEAP8[$59>>0] = $66;
  }
  $67 = (($nn$05) + 1)|0;
  $68 = HEAP32[$5>>2]|0;
  $69 = ($67|0)<($68|0);
  if ($69) {
   $nn$05 = $67;
  } else {
   break;
  }
 }
 (_FT_Set_Charmap($0,$2)|0);
 STACKTOP = sp;return ($error$0|0);
}
function _af_cjk_metrics_init_widths($metrics,$face,$charcode) {
 $metrics = $metrics|0;
 $face = $face|0;
 $charcode = $charcode|0;
 var $$ = 0, $$$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dummy = 0, $hints = 0;
 var $num_widths$0$lcssa = 0, $num_widths$0$lcssa$1 = 0, $num_widths$04 = 0, $num_widths$04$1 = 0, $num_widths$1 = 0, $num_widths$1$1 = 0, $or$cond = 0, $or$cond$1 = 0, $seg$03 = 0, $seg$03$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 848|0;
 $hints = sp + 720|0;
 $dummy = sp;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 _af_glyph_hints_init($hints,$1);
 $2 = ((($metrics)) + 48|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($metrics)) + 388|0);
 HEAP32[$3>>2] = 0;
 $4 = (_FT_Get_Char_Index($face,$charcode)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = (_FT_Load_Glyph($face,$4,1)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = ((($face)) + 84|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 110|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = ($11<<16>>16)<(1);
   if (!($12)) {
    _memset(($dummy|0),0,720)|0;
    $13 = ((($metrics)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($dummy)) + 36|0);
    HEAP32[$15>>2] = $14;
    $16 = ((($dummy)) + 8|0);
    HEAP32[$16>>2] = 65536;
    $17 = ((($dummy)) + 12|0);
    HEAP32[$17>>2] = 65536;
    $18 = ((($dummy)) + 16|0);
    HEAP32[$18>>2] = 0;
    $19 = ((($dummy)) + 20|0);
    HEAP32[$19>>2] = 0;
    $20 = ((($dummy)) + 4|0);
    HEAP32[$20>>2] = $face;
    $21 = ((($dummy)) + 24|0);
    HEAP32[$21>>2] = 0;
    $22 = ((($dummy)) + 28|0);
    HEAP32[$22>>2] = 0;
    _af_glyph_hints_rescale($hints,$dummy);
    $23 = HEAP32[$8>>2]|0;
    $24 = ((($23)) + 108|0);
    $25 = (_af_glyph_hints_reload($hints,$24)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     $27 = (_af_latin_hints_compute_segments($hints,0)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      _af_latin_hints_link_segments($hints,0);
      $29 = ((($hints)) + 52|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ((($hints)) + 44|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($30) + (($32*48)|0)|0);
      $34 = ($32|0)>(0);
      if ($34) {
       $num_widths$04 = 0;$seg$03 = $30;
       while(1) {
        $35 = ((($seg$03)) + 20|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = ($36|0)==(0|0);
        if ($37) {
         $num_widths$1 = $num_widths$04;
        } else {
         $38 = ((($36)) + 20|0);
         $39 = HEAP32[$38>>2]|0;
         $40 = ($39|0)==($seg$03|0);
         $41 = ($36>>>0)>($seg$03>>>0);
         $or$cond = $41 & $40;
         if ($or$cond) {
          $42 = ((($seg$03)) + 2|0);
          $43 = HEAP16[$42>>1]|0;
          $44 = $43 << 16 >> 16;
          $45 = ((($36)) + 2|0);
          $46 = HEAP16[$45>>1]|0;
          $47 = $46 << 16 >> 16;
          $48 = (($44) - ($47))|0;
          $49 = ($num_widths$04>>>0)<(16);
          if ($49) {
           $50 = ($48|0)<(0);
           $51 = (0 - ($48))|0;
           $$ = $50 ? $51 : $48;
           $52 = (($num_widths$04) + 1)|0;
           $53 = (((($metrics)) + 52|0) + (($num_widths$04*12)|0)|0);
           HEAP32[$53>>2] = $$;
           $num_widths$1 = $52;
          } else {
           $num_widths$1 = $num_widths$04;
          }
         } else {
          $num_widths$1 = $num_widths$04;
         }
        }
        $54 = ((($seg$03)) + 48|0);
        $55 = ($54>>>0)<($33>>>0);
        if ($55) {
         $num_widths$04 = $num_widths$1;$seg$03 = $54;
        } else {
         $num_widths$0$lcssa = $num_widths$1;
         break;
        }
       }
      } else {
       $num_widths$0$lcssa = 0;
      }
      $56 = ((($metrics)) + 52|0);
      _af_sort_widths($num_widths$0$lcssa,$56);
      $57 = ((($metrics)) + 48|0);
      HEAP32[$57>>2] = $num_widths$0$lcssa;
      $58 = (_af_latin_hints_compute_segments($hints,1)|0);
      $59 = ($58|0)==(0);
      if ($59) {
       _af_latin_hints_link_segments($hints,1);
       $87 = ((($hints)) + 80|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = ((($hints)) + 72|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = (($88) + (($90*48)|0)|0);
       $92 = ($90|0)>(0);
       if ($92) {
        $num_widths$04$1 = 0;$seg$03$1 = $88;
        while(1) {
         $93 = ((($seg$03$1)) + 20|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = ($94|0)==(0|0);
         if ($95) {
          $num_widths$1$1 = $num_widths$04$1;
         } else {
          $96 = ((($94)) + 20|0);
          $97 = HEAP32[$96>>2]|0;
          $98 = ($97|0)==($seg$03$1|0);
          $99 = ($94>>>0)>($seg$03$1>>>0);
          $or$cond$1 = $99 & $98;
          if ($or$cond$1) {
           $100 = ((($seg$03$1)) + 2|0);
           $101 = HEAP16[$100>>1]|0;
           $102 = $101 << 16 >> 16;
           $103 = ((($94)) + 2|0);
           $104 = HEAP16[$103>>1]|0;
           $105 = $104 << 16 >> 16;
           $106 = (($102) - ($105))|0;
           $107 = ($num_widths$04$1>>>0)<(16);
           if ($107) {
            $108 = ($106|0)<(0);
            $109 = (0 - ($106))|0;
            $$$1 = $108 ? $109 : $106;
            $110 = (($num_widths$04$1) + 1)|0;
            $111 = (((($metrics)) + 392|0) + (($num_widths$04$1*12)|0)|0);
            HEAP32[$111>>2] = $$$1;
            $num_widths$1$1 = $110;
           } else {
            $num_widths$1$1 = $num_widths$04$1;
           }
          } else {
           $num_widths$1$1 = $num_widths$04$1;
          }
         }
         $112 = ((($seg$03$1)) + 48|0);
         $113 = ($112>>>0)<($91>>>0);
         if ($113) {
          $num_widths$04$1 = $num_widths$1$1;$seg$03$1 = $112;
         } else {
          $num_widths$0$lcssa$1 = $num_widths$1$1;
          break;
         }
        }
       } else {
        $num_widths$0$lcssa$1 = 0;
       }
       $114 = ((($metrics)) + 392|0);
       _af_sort_widths($num_widths$0$lcssa$1,$114);
       $115 = ((($metrics)) + 388|0);
       HEAP32[$115>>2] = $num_widths$0$lcssa$1;
      }
     }
    }
   }
  }
 }
 $60 = ((($metrics)) + 36|0);
 $61 = ((($metrics)) + 48|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==(0);
 if ($63) {
  $66 = HEAP32[$60>>2]|0;
  $67 = ($66*50)|0;
  $68 = (($67|0) / 2048)&-1;
  $70 = $68;
 } else {
  $64 = ((($metrics)) + 52|0);
  $65 = HEAP32[$64>>2]|0;
  $70 = $65;
 }
 $69 = (($70|0) / 5)&-1;
 $71 = ((($metrics)) + 244|0);
 HEAP32[$71>>2] = $69;
 $72 = ((($metrics)) + 248|0);
 HEAP32[$72>>2] = $70;
 $73 = ((($metrics)) + 252|0);
 HEAP8[$73>>0] = 0;
 $74 = ((($metrics)) + 388|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)==(0);
 if ($76) {
  $79 = HEAP32[$60>>2]|0;
  $80 = ($79*50)|0;
  $81 = (($80|0) / 2048)&-1;
  $83 = $81;
  $82 = (($83|0) / 5)&-1;
  $84 = ((($metrics)) + 584|0);
  HEAP32[$84>>2] = $82;
  $85 = ((($metrics)) + 588|0);
  HEAP32[$85>>2] = $83;
  $86 = ((($metrics)) + 592|0);
  HEAP8[$86>>0] = 0;
  _af_glyph_hints_done($hints);
  STACKTOP = sp;return;
 } else {
  $77 = ((($metrics)) + 392|0);
  $78 = HEAP32[$77>>2]|0;
  $83 = $78;
  $82 = (($83|0) / 5)&-1;
  $84 = ((($metrics)) + 584|0);
  HEAP32[$84>>2] = $82;
  $85 = ((($metrics)) + 588|0);
  HEAP32[$85>>2] = $83;
  $86 = ((($metrics)) + 592|0);
  HEAP8[$86>>0] = 0;
  _af_glyph_hints_done($hints);
  STACKTOP = sp;return;
 }
}
function _af_cjk_metrics_check_digits($metrics,$face) {
 $metrics = $metrics|0;
 $face = $face|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $advance = 0, $i$03 = 0, $old_advance$02 = 0, $old_advance$1 = 0, $same_width$0 = 0, $started$01 = 0, $started$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $advance = sp;
 $i$03 = 48;$old_advance$02 = 0;$started$01 = 0;
 while(1) {
  $0 = (_FT_Get_Char_Index($face,$i$03)|0);
  $1 = ($0|0)==(0);
  if ($1) {
   $old_advance$1 = $old_advance$02;$started$1 = $started$01;
  } else {
   $2 = (_FT_Get_Advance($face,$0,2051,$advance)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    $4 = ($started$01<<24>>24)==(0);
    $5 = HEAP32[$advance>>2]|0;
    if ($4) {
     $old_advance$1 = $5;$started$1 = 1;
    } else {
     $6 = ($5|0)==($old_advance$02|0);
     if ($6) {
      $old_advance$1 = $old_advance$02;$started$1 = $started$01;
     } else {
      $same_width$0 = 0;
      break;
     }
    }
   } else {
    $old_advance$1 = $old_advance$02;$started$1 = $started$01;
   }
  }
  $7 = (($i$03) + 1)|0;
  $8 = ($7>>>0)<(58);
  if ($8) {
   $i$03 = $7;$old_advance$02 = $old_advance$1;$started$01 = $started$1;
  } else {
   $same_width$0 = 1;
   break;
  }
 }
 $9 = ((($metrics)) + 32|0);
 HEAP8[$9>>0] = $same_width$0;
 STACKTOP = sp;return;
}
function _af_cjk_metrics_init($metrics,$face) {
 $metrics = $metrics|0;
 $face = $face|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 68|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($metrics)) + 36|0);
 HEAP32[$5>>2] = $4;
 $6 = (_FT_Select_Charmap($face,1970170211)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  _af_cjk_metrics_init_widths($metrics,$face,30000);
  _af_cjk_metrics_init_blues($metrics,$face);
  _af_cjk_metrics_check_digits($metrics,$face);
  (_FT_Set_Charmap($face,$1)|0);
  return 0;
 } else {
  HEAP32[$0>>2] = 0;
  (_FT_Set_Charmap($face,$1)|0);
  return 0;
 }
 return (0)|0;
}
function _af_cjk_metrics_scale($metrics,$scaler) {
 $metrics = $metrics|0;
 $scaler = $scaler|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($metrics)) + 4|0);
 ;HEAP32[$0>>2]=HEAP32[$scaler>>2]|0;HEAP32[$0+4>>2]=HEAP32[$scaler+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$scaler+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$scaler+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$scaler+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$scaler+20>>2]|0;HEAP32[$0+24>>2]=HEAP32[$scaler+24>>2]|0;
 _af_cjk_metrics_scale_dim($metrics,$scaler,0);
 _af_cjk_metrics_scale_dim($metrics,$scaler,1);
 return;
}
function _af_cjk_hints_compute_blue_edges($hints,$metrics,$dim) {
 $hints = $hints|0;
 $metrics = $metrics|0;
 $dim = $dim|0;
 var $$ = 0, $$1 = 0, $$best_dist$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $bb$04 = 0, $best_blue$02 = 0, $best_blue$1 = 0, $best_blue$1$lcssa = 0, $best_dist$03 = 0, $best_dist$1 = 0, $compare$0 = 0, $compare$0$best_blue$0 = 0, $edge$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*48)|0)|0);
 $5 = (((($metrics)) + 40|0) + (($dim*340)|0)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($metrics)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8>>>0) / 40)&-1;
 $10 = (_FT_MulFix($9,$6)|0);
 $11 = ($10|0)>(32);
 $$ = $11 ? 32 : $10;
 $12 = ($3|0)>(0);
 if (!($12)) {
  return;
 }
 $13 = (((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 216|0);
 $14 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 24|0);
 $edge$05 = $1;
 while(1) {
  $15 = HEAP32[$13>>2]|0;
  $16 = ($15|0)==(0);
  if (!($16)) {
   $17 = ((($edge$05)) + 13|0);
   $bb$04 = 0;$best_blue$02 = 0;$best_dist$03 = $$;
   while(1) {
    $18 = ((((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 220|0) + (($bb$04*28)|0)|0);
    $19 = ((((((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 220|0) + (($bb$04*28)|0)|0)) + 24|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20 & 1;
    $22 = ($21|0)==(0);
    if ($22) {
     $best_blue$1 = $best_blue$02;$best_dist$1 = $best_dist$03;
    } else {
     $23 = $20 & 6;
     $24 = ($23|0)!=(0);
     $25 = HEAP8[$17>>0]|0;
     $26 = $25 << 24 >> 24;
     $27 = HEAP32[$14>>2]|0;
     $28 = ($26|0)==($27|0);
     $29 = $24 ^ $28;
     if ($29) {
      $30 = HEAP16[$edge$05>>1]|0;
      $31 = $30 << 16 >> 16;
      $32 = HEAP32[$18>>2]|0;
      $33 = (($31) - ($32))|0;
      $34 = ($33|0)<(0);
      $35 = (0 - ($33))|0;
      $36 = $34 ? $35 : $33;
      $37 = ((((((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 220|0) + (($bb$04*28)|0)|0)) + 12|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (($31) - ($38))|0;
      $40 = ($39|0)<(0);
      $41 = (0 - ($39))|0;
      $42 = $40 ? $41 : $39;
      $43 = ($36|0)>($42|0);
      $compare$0 = $43 ? $37 : $18;
      $44 = HEAP32[$compare$0>>2]|0;
      $45 = (($31) - ($44))|0;
      $46 = ($45|0)<(0);
      $47 = (0 - ($45))|0;
      $$1 = $46 ? $47 : $45;
      $48 = (_FT_MulFix($$1,$6)|0);
      $49 = ($48|0)<($best_dist$03|0);
      $compare$0$best_blue$0 = $49 ? $compare$0 : $best_blue$02;
      $$best_dist$0 = $49 ? $48 : $best_dist$03;
      $best_blue$1 = $compare$0$best_blue$0;$best_dist$1 = $$best_dist$0;
     } else {
      $best_blue$1 = $best_blue$02;$best_dist$1 = $best_dist$03;
     }
    }
    $50 = (($bb$04) + 1)|0;
    $51 = HEAP32[$13>>2]|0;
    $52 = ($50>>>0)<($51>>>0);
    if ($52) {
     $bb$04 = $50;$best_blue$02 = $best_blue$1;$best_dist$03 = $best_dist$1;
    } else {
     $best_blue$1$lcssa = $best_blue$1;
     break;
    }
   }
   $53 = ($best_blue$1$lcssa|0)==(0|0);
   if (!($53)) {
    $54 = ((($edge$05)) + 20|0);
    HEAP32[$54>>2] = $best_blue$1$lcssa;
   }
  }
  $55 = ((($edge$05)) + 48|0);
  $56 = ($55>>>0)<($4>>>0);
  if ($56) {
   $edge$05 = $55;
  } else {
   break;
  }
 }
 return;
}
function _af_cjk_hints_init($hints,$metrics) {
 $hints = $hints|0;
 $metrics = $metrics|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond3 = 0, $other_flags$1 = 0, $other_flags$1$ = 0, $other_flags$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _af_glyph_hints_rescale($hints,$metrics);
 $0 = ((($metrics)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($hints)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($metrics)) + 44|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($hints)) + 8|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($metrics)) + 380|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($hints)) + 12|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($metrics)) + 384|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($hints)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($metrics)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($hints)) + 100|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13|0)==(2);
 $17 = $13 & -2;
 $18 = ($17|0)==(2);
 $$ = $18&1;
 $19 = ($13|0)==(4);
 $or$cond3 = $16 | $19;
 $20 = $$ | 2;
 $other_flags$1 = $or$cond3 ? $20 : $$;
 $21 = ($13|0)==(1);
 $22 = $other_flags$1 | 4;
 $other_flags$1$ = $21 ? $other_flags$1 : $22;
 $23 = $other_flags$1$ | 8;
 $other_flags$3 = $16 ? $23 : $other_flags$1$;
 $24 = $15 | 4;
 HEAP32[$14>>2] = $24;
 $25 = ((($hints)) + 104|0);
 HEAP32[$25>>2] = $other_flags$3;
 return 0;
}
function _af_cjk_hints_apply($hints,$outline,$metrics) {
 $hints = $hints|0;
 $outline = $outline|0;
 $metrics = $metrics|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $dim$01 = 0, $error$2 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_af_glyph_hints_reload($hints,$outline)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $error$2 = $0;
  return ($error$2|0);
 }
 $2 = ((($hints)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = (_af_cjk_hints_detect_features($hints,0)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    _af_cjk_hints_compute_blue_edges($hints,$metrics,0);
    break;
   } else {
    $error$2 = $6;
    return ($error$2|0);
   }
  }
 } while(0);
 $8 = HEAP32[$2>>2]|0;
 $9 = $8 & 2;
 $10 = ($9|0)==(0);
 do {
  if ($10) {
   $11 = (_af_cjk_hints_detect_features($hints,1)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    _af_cjk_hints_compute_blue_edges($hints,$metrics,1);
    $dim$01 = 0;
    break;
   } else {
    $error$2 = $11;
    return ($error$2|0);
   }
  } else {
   $dim$01 = 0;
  }
 } while(0);
 L15: while(1) {
  switch ($dim$01|0) {
  case 0:  {
   $13 = HEAP32[$2>>2]|0;
   $14 = $13 & 1;
   $15 = ($14|0)==(0);
   if ($15) {
    label = 11;
   } else {
    $dim$01 = 1;
    continue L15;
   }
   break;
  }
  case 1:  {
   $16 = HEAP32[$2>>2]|0;
   $17 = $16 & 2;
   $18 = ($17|0)==(0);
   if ($18) {
    label = 11;
   } else {
    break L15;
   }
   break;
  }
  default: {
  }
  }
  if ((label|0) == 11) {
   label = 0;
   _af_cjk_hint_edges($hints,$dim$01);
   _af_cjk_align_edge_points($hints,$dim$01);
   _af_glyph_hints_align_strong_points($hints,$dim$01);
   _af_glyph_hints_align_weak_points($hints,$dim$01);
  }
  $19 = (($dim$01) + 1)|0;
  $exitcond = ($19|0)==(2);
  if ($exitcond) {
   break;
  } else {
   $dim$01 = $19;
  }
 }
 _af_glyph_hints_save($hints,$outline);
 $error$2 = 0;
 return ($error$2|0);
}
function _af_cjk_metrics_init_blues($metrics,$face) {
 $metrics = $metrics|0;
 $face = $face|0;
 var $$ = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb$053 = 0, $best_point$035 = 0, $best_point$128 = 0, $best_point$2 = 0, $best_point$321 = 0, $best_point$4 = 0, $best_point$514 = 0, $best_point$6 = 0;
 var $best_point$79 = 0, $best_point$8 = 0, $best_point$9 = 0, $best_pos$0$lcssa = 0, $best_pos$034 = 0, $best_pos$127 = 0, $best_pos$2 = 0, $best_pos$320 = 0, $best_pos$4 = 0, $best_pos$513 = 0, $best_pos$6 = 0, $best_pos$78 = 0, $best_pos$8 = 0, $best_pos$9 = 0, $exitcond = 0, $exitcond57 = 0, $fill_type$050 = 0, $fills = 0, $first$037 = 0, $flats = 0;
 var $nn$036 = 0, $num_fills$052 = 0, $num_fills$1$lcssa = 0, $num_fills$1$lcssa$lcssa = 0, $num_fills$142 = 0, $num_fills$2 = 0, $num_flats$051 = 0, $num_flats$1$lcssa = 0, $num_flats$1$lcssa$lcssa = 0, $num_flats$141 = 0, $num_flats$2 = 0, $p$040 = 0, $pp$029 = 0, $pp$122 = 0, $pp$215 = 0, $pp$310 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $fills = sp + 128|0;
 $flats = sp;
 $0 = ((($face)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 110|0);
 $3 = ((($1)) + 112|0);
 $4 = ((($1)) + 108|0);
 $5 = ((($1)) + 120|0);
 $bb$053 = 0;
 L1: while(1) {
  $fill_type$050 = 0;$num_fills$052 = 0;$num_flats$051 = 0;
  while(1) {
   $6 = ((((3984 + ($bb$053<<8)|0) + ($fill_type$050<<7)|0)) + 128|0);
   $7 = ($fill_type$050|0)==(0);
   $8 = ((3984 + ($bb$053<<8)|0) + ($fill_type$050<<7)|0);
   $num_fills$142 = $num_fills$052;$num_flats$141 = $num_flats$051;$p$040 = $8;
   while(1) {
    $9 = HEAP32[$p$040>>2]|0;
    $10 = ($9|0)==(0);
    if ($10) {
     $num_fills$1$lcssa = $num_fills$142;$num_flats$1$lcssa = $num_flats$141;
     break;
    }
    $11 = (_FT_Get_Char_Index($face,$9)|0);
    $12 = ($11|0)==(0);
    do {
     if ($12) {
      $num_fills$2 = $num_fills$142;$num_flats$2 = $num_flats$141;
     } else {
      $13 = (_FT_Load_Glyph($face,$11,1)|0);
      $14 = ($13|0)==(0);
      if ($14) {
       $15 = HEAP16[$2>>1]|0;
       $16 = ($15<<16>>16)<(1);
       if ($16) {
        $num_fills$2 = $num_fills$142;$num_flats$2 = $num_flats$141;
       } else {
        $17 = HEAP32[$3>>2]|0;
        $18 = HEAP16[$4>>1]|0;
        $19 = ($18<<16>>16)>(0);
        if ($19) {
         $20 = HEAP32[$5>>2]|0;
         $21 = HEAP16[$4>>1]|0;
         $22 = $21 << 16 >> 16;
         $best_point$035 = -1;$best_pos$034 = 0;$first$037 = 0;$nn$036 = 0;
         while(1) {
          $23 = (($20) + ($nn$036<<1)|0);
          $24 = HEAP16[$23>>1]|0;
          $25 = $24 << 16 >> 16;
          $26 = ($25|0)>($first$037|0);
          L16: do {
           if ($26) {
            switch ($bb$053|0) {
            case 0:  {
             $30 = ($first$037|0)>($25|0);
             if ($30) {
              $best_point$9 = $best_point$035;$best_pos$9 = $best_pos$034;
              break L16;
             } else {
              $best_point$128 = $best_point$035;$best_pos$127 = $best_pos$034;$pp$029 = $first$037;
             }
             while(1) {
              $31 = ($best_point$128|0)<(0);
              if ($31) {
               label = 18;
              } else {
               $32 = (((($17) + ($pp$029<<3)|0)) + 4|0);
               $33 = HEAP32[$32>>2]|0;
               $34 = ($33|0)>($best_pos$127|0);
               if ($34) {
                label = 18;
               } else {
                $best_point$2 = $best_point$128;$best_pos$2 = $best_pos$127;
               }
              }
              if ((label|0) == 18) {
               label = 0;
               $35 = (((($17) + ($pp$029<<3)|0)) + 4|0);
               $36 = HEAP32[$35>>2]|0;
               $best_point$2 = $pp$029;$best_pos$2 = $36;
              }
              $37 = (($pp$029) + 1)|0;
              $38 = ($pp$029|0)<($25|0);
              if ($38) {
               $best_point$128 = $best_point$2;$best_pos$127 = $best_pos$2;$pp$029 = $37;
              } else {
               $best_point$9 = $best_point$2;$best_pos$9 = $best_pos$2;
               break;
              }
             }
             break;
            }
            case 1:  {
             $29 = ($first$037|0)>($25|0);
             if ($29) {
              $best_point$9 = $best_point$035;$best_pos$9 = $best_pos$034;
              break L16;
             } else {
              $best_point$321 = $best_point$035;$best_pos$320 = $best_pos$034;$pp$122 = $first$037;
             }
             while(1) {
              $39 = ($best_point$321|0)<(0);
              if ($39) {
               label = 22;
              } else {
               $40 = (((($17) + ($pp$122<<3)|0)) + 4|0);
               $41 = HEAP32[$40>>2]|0;
               $42 = ($41|0)<($best_pos$320|0);
               if ($42) {
                label = 22;
               } else {
                $best_point$4 = $best_point$321;$best_pos$4 = $best_pos$320;
               }
              }
              if ((label|0) == 22) {
               label = 0;
               $43 = (((($17) + ($pp$122<<3)|0)) + 4|0);
               $44 = HEAP32[$43>>2]|0;
               $best_point$4 = $pp$122;$best_pos$4 = $44;
              }
              $45 = (($pp$122) + 1)|0;
              $46 = ($pp$122|0)<($25|0);
              if ($46) {
               $best_point$321 = $best_point$4;$best_pos$320 = $best_pos$4;$pp$122 = $45;
              } else {
               $best_point$9 = $best_point$4;$best_pos$9 = $best_pos$4;
               break;
              }
             }
             break;
            }
            case 2:  {
             $28 = ($first$037|0)>($25|0);
             if ($28) {
              $best_point$9 = $best_point$035;$best_pos$9 = $best_pos$034;
              break L16;
             } else {
              $best_point$514 = $best_point$035;$best_pos$513 = $best_pos$034;$pp$215 = $first$037;
             }
             while(1) {
              $47 = ($best_point$514|0)<(0);
              if ($47) {
               label = 26;
              } else {
               $48 = (($17) + ($pp$215<<3)|0);
               $49 = HEAP32[$48>>2]|0;
               $50 = ($49|0)<($best_pos$513|0);
               if ($50) {
                label = 26;
               } else {
                $best_point$6 = $best_point$514;$best_pos$6 = $best_pos$513;
               }
              }
              if ((label|0) == 26) {
               label = 0;
               $51 = (($17) + ($pp$215<<3)|0);
               $52 = HEAP32[$51>>2]|0;
               $best_point$6 = $pp$215;$best_pos$6 = $52;
              }
              $53 = (($pp$215) + 1)|0;
              $54 = ($pp$215|0)<($25|0);
              if ($54) {
               $best_point$514 = $best_point$6;$best_pos$513 = $best_pos$6;$pp$215 = $53;
              } else {
               $best_point$9 = $best_point$6;$best_pos$9 = $best_pos$6;
               break;
              }
             }
             break;
            }
            case 3:  {
             $27 = ($first$037|0)>($25|0);
             if ($27) {
              $best_point$9 = $best_point$035;$best_pos$9 = $best_pos$034;
              break L16;
             } else {
              $best_point$79 = $best_point$035;$best_pos$78 = $best_pos$034;$pp$310 = $first$037;
             }
             while(1) {
              $55 = ($best_point$79|0)<(0);
              if ($55) {
               label = 30;
              } else {
               $56 = (($17) + ($pp$310<<3)|0);
               $57 = HEAP32[$56>>2]|0;
               $58 = ($57|0)>($best_pos$78|0);
               if ($58) {
                label = 30;
               } else {
                $best_point$8 = $best_point$79;$best_pos$8 = $best_pos$78;
               }
              }
              if ((label|0) == 30) {
               label = 0;
               $59 = (($17) + ($pp$310<<3)|0);
               $60 = HEAP32[$59>>2]|0;
               $best_point$8 = $pp$310;$best_pos$8 = $60;
              }
              $61 = (($pp$310) + 1)|0;
              $62 = ($pp$310|0)<($25|0);
              if ($62) {
               $best_point$79 = $best_point$8;$best_pos$78 = $best_pos$8;$pp$310 = $61;
              } else {
               $best_point$9 = $best_point$8;$best_pos$9 = $best_pos$8;
               break;
              }
             }
             break;
            }
            default: {
             $best_point$9 = $best_point$035;$best_pos$9 = $best_pos$034;
             break L16;
            }
            }
           } else {
            $best_point$9 = $best_point$035;$best_pos$9 = $best_pos$034;
           }
          } while(0);
          $63 = (($25) + 1)|0;
          $64 = (($nn$036) + 1)|0;
          $65 = ($64|0)<($22|0);
          if ($65) {
           $best_point$035 = $best_point$9;$best_pos$034 = $best_pos$9;$first$037 = $63;$nn$036 = $64;
          } else {
           $best_pos$0$lcssa = $best_pos$9;
           break;
          }
         }
        } else {
         $best_pos$0$lcssa = 0;
        }
        if ($7) {
         $66 = (($num_fills$142) + 1)|0;
         $67 = (($fills) + ($num_fills$142<<2)|0);
         HEAP32[$67>>2] = $best_pos$0$lcssa;
         $num_fills$2 = $66;$num_flats$2 = $num_flats$141;
         break;
        } else {
         $68 = (($num_flats$141) + 1)|0;
         $69 = (($flats) + ($num_flats$141<<2)|0);
         HEAP32[$69>>2] = $best_pos$0$lcssa;
         $num_fills$2 = $num_fills$142;$num_flats$2 = $68;
         break;
        }
       }
      } else {
       $num_fills$2 = $num_fills$142;$num_flats$2 = $num_flats$141;
      }
     }
    } while(0);
    $70 = ((($p$040)) + 4|0);
    $71 = ($70>>>0)<($6>>>0);
    if ($71) {
     $num_fills$142 = $num_fills$2;$num_flats$141 = $num_flats$2;$p$040 = $70;
    } else {
     $num_fills$1$lcssa = $num_fills$2;$num_flats$1$lcssa = $num_flats$2;
     break;
    }
   }
   $72 = (($fill_type$050) + 1)|0;
   $exitcond = ($72|0)==(2);
   if ($exitcond) {
    $num_fills$1$lcssa$lcssa = $num_fills$1$lcssa;$num_flats$1$lcssa$lcssa = $num_flats$1$lcssa;
    break;
   } else {
    $fill_type$050 = $72;$num_fills$052 = $num_fills$1$lcssa;$num_flats$051 = $num_flats$1$lcssa;
   }
  }
  $73 = ($num_fills$1$lcssa$lcssa|0)==(0);
  $74 = $num_fills$1$lcssa$lcssa | $num_flats$1$lcssa$lcssa;
  $75 = ($74|0)==(0);
  do {
   if (!($75)) {
    $76 = ($num_flats$1$lcssa$lcssa|0)==(0);
    _af_sort_pos($num_flats$1$lcssa$lcssa,$flats);
    _af_sort_pos($num_fills$1$lcssa$lcssa,$fills);
    $77 = ($bb$053|0)==(0);
    $78 = ($bb$053>>>0)<(2);
    $$ = $78&1;
    $79 = (((((($metrics)) + 40|0) + (($$*340)|0)|0)) + 216|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ((((((($metrics)) + 40|0) + (($$*340)|0)|0)) + 220|0) + (($80*28)|0)|0);
    $82 = ((((((((($metrics)) + 40|0) + (($$*340)|0)|0)) + 220|0) + (($80*28)|0)|0)) + 12|0);
    $83 = (($80) + 1)|0;
    HEAP32[$79>>2] = $83;
    do {
     if ($76) {
      $84 = (($num_fills$1$lcssa$lcssa|0) / 2)&-1;
      $85 = (($fills) + ($84<<2)|0);
      $86 = HEAP32[$85>>2]|0;
      HEAP32[$81>>2] = $86;
      $87 = HEAP32[$85>>2]|0;
      HEAP32[$82>>2] = $87;
     } else {
      if ($73) {
       $88 = (($num_flats$1$lcssa$lcssa|0) / 2)&-1;
       $89 = (($flats) + ($88<<2)|0);
       $90 = HEAP32[$89>>2]|0;
       HEAP32[$81>>2] = $90;
       $91 = HEAP32[$89>>2]|0;
       HEAP32[$82>>2] = $91;
       break;
      } else {
       $92 = (($num_fills$1$lcssa$lcssa|0) / 2)&-1;
       $93 = (($fills) + ($92<<2)|0);
       $94 = HEAP32[$93>>2]|0;
       HEAP32[$81>>2] = $94;
       $95 = (($num_flats$1$lcssa$lcssa|0) / 2)&-1;
       $96 = (($flats) + ($95<<2)|0);
       $97 = HEAP32[$96>>2]|0;
       HEAP32[$82>>2] = $97;
       break;
      }
     }
    } while(0);
    $98 = HEAP32[$82>>2]|0;
    $99 = HEAP32[$81>>2]|0;
    $100 = ($98|0)==($99|0);
    if (!($100)) {
     $101 = ($98|0)<($99|0);
     $102 = ($bb$053|0)==(3);
     $103 = $77 | $102;
     $104 = $103 ^ $101;
     if ($104) {
      $105 = (($99) + ($98))|0;
      $106 = (($105|0) / 2)&-1;
      HEAP32[$81>>2] = $106;
      HEAP32[$82>>2] = $106;
     }
    }
    $107 = ((((((((($metrics)) + 40|0) + (($$*340)|0)|0)) + 220|0) + (($80*28)|0)|0)) + 24|0);
    HEAP32[$107>>2] = 0;
    if ($77) {
     HEAP32[$107>>2] = 2;
     $bb$053 = 1;
     continue L1;
    } else {
     $108 = ($bb$053|0)==(3);
     if ($108) {
      $$lcssa = $107;
      break L1;
     } else {
      break;
     }
    }
   }
  } while(0);
  $109 = (($bb$053) + 1)|0;
  $exitcond57 = ($109|0)==(4);
  if ($exitcond57) {
   label = 52;
   break;
  } else {
   $bb$053 = $109;
  }
 }
 if ((label|0) == 52) {
  STACKTOP = sp;return;
 }
 HEAP32[$$lcssa>>2] = 4;
 STACKTOP = sp;return;
}
function _af_cjk_metrics_scale_dim($metrics,$scaler,$dim) {
 $metrics = $metrics|0;
 $scaler = $scaler|0;
 $dim = $dim|0;
 var $$ = 0, $$delta2$1 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $delta$0 = 0, $delta$0$in = 0, $delta2$1 = 0, $nn$02 = 0, $scale$0 = 0, $scale$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dim|0)==(0);
 $1 = ((($scaler)) + 4|0);
 $2 = ((($scaler)) + 12|0);
 $3 = ((($scaler)) + 8|0);
 $4 = ((($scaler)) + 16|0);
 $delta$0$in = $0 ? $2 : $4;
 $scale$0$in = $0 ? $1 : $3;
 $scale$0 = HEAP32[$scale$0$in>>2]|0;
 $delta$0 = HEAP32[$delta$0$in>>2]|0;
 $5 = (((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 332|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($scale$0|0);
 if ($7) {
  $8 = (((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 336|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($delta$0|0);
  if ($10) {
   return;
  }
 }
 HEAP32[$5>>2] = $scale$0;
 $11 = (((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 336|0);
 HEAP32[$11>>2] = $delta$0;
 $12 = (((($metrics)) + 40|0) + (($dim*340)|0)|0);
 HEAP32[$12>>2] = $scale$0;
 $13 = (((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 4|0);
 HEAP32[$13>>2] = $delta$0;
 $14 = (((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 216|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  return;
 } else {
  $nn$02 = 0;
 }
 while(1) {
  $17 = ((((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 220|0) + (($nn$02*28)|0)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_FT_MulFix($18,$scale$0)|0);
  $20 = (($19) + ($delta$0))|0;
  $21 = ((((((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 220|0) + (($nn$02*28)|0)|0)) + 4|0);
  HEAP32[$21>>2] = $20;
  $22 = ((((((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 220|0) + (($nn$02*28)|0)|0)) + 8|0);
  HEAP32[$22>>2] = $20;
  $23 = ((((((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 220|0) + (($nn$02*28)|0)|0)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_FT_MulFix($24,$scale$0)|0);
  $26 = (($25) + ($delta$0))|0;
  $27 = ((((((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 220|0) + (($nn$02*28)|0)|0)) + 16|0);
  HEAP32[$27>>2] = $26;
  $28 = ((((((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 220|0) + (($nn$02*28)|0)|0)) + 20|0);
  HEAP32[$28>>2] = $26;
  $29 = ((((((((($metrics)) + 40|0) + (($dim*340)|0)|0)) + 220|0) + (($nn$02*28)|0)|0)) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 & -2;
  HEAP32[$29>>2] = $31;
  $32 = HEAP32[$17>>2]|0;
  $33 = HEAP32[$23>>2]|0;
  $34 = (($32) - ($33))|0;
  $35 = (_FT_MulFix($34,$scale$0)|0);
  $$off = (($35) + 48)|0;
  $36 = ($$off>>>0)<(97);
  if ($36) {
   $37 = HEAP32[$21>>2]|0;
   $38 = (($37) + 32)|0;
   $39 = $38 & -64;
   HEAP32[$22>>2] = $39;
   $40 = (_FT_DivFix($39,$scale$0)|0);
   $41 = HEAP32[$23>>2]|0;
   $42 = (($40) - ($41))|0;
   $43 = ($42|0)<(0);
   $44 = (0 - ($42))|0;
   $$ = $43 ? $44 : $42;
   $45 = (_FT_MulFix($$,$scale$0)|0);
   $46 = ($45|0)<(32);
   $47 = (($45) + 32)|0;
   $48 = $47 & -64;
   $delta2$1 = $46 ? 0 : $48;
   $49 = (0 - ($delta2$1))|0;
   $$delta2$1 = $43 ? $49 : $delta2$1;
   $50 = HEAP32[$22>>2]|0;
   $51 = (($50) - ($$delta2$1))|0;
   HEAP32[$28>>2] = $51;
   $52 = HEAP32[$29>>2]|0;
   $53 = $52 | 1;
   HEAP32[$29>>2] = $53;
  }
  $54 = (($nn$02) + 1)|0;
  $55 = HEAP32[$14>>2]|0;
  $56 = ($54>>>0)<($55>>>0);
  if ($56) {
   $nn$02 = $54;
  } else {
   break;
  }
 }
 return;
}
function _af_cjk_hints_detect_features($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $0 = 0, $1 = 0, $2 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_af_cjk_hints_compute_segments($hints,$dim)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $error$0 = $0;
  return ($error$0|0);
 }
 _af_cjk_hints_link_segments($hints,$dim);
 $2 = (_af_cjk_hints_compute_edges($hints,$dim)|0);
 $error$0 = $2;
 return ($error$0|0);
}
function _af_cjk_hint_edges($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $$ = 0, $$8 = 0, $$edge$0 = 0, $$idx = 0, $$lcssa = 0, $$lcssa80 = 0, $$lcssa83 = 0, $$lcssa85 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $after$0 = 0, $after$0$lcssa = 0, $after$082 = 0, $anchor$044 = 0, $anchor$1 = 0;
 var $anchor$1$lcssa = 0, $anchor$238 = 0, $anchor$3 = 0, $before$0 = 0, $before$0$lcssa = 0, $blue$0$ph10 = 0, $brmerge = 0, $delta$037 = 0, $delta$1 = 0, $delta$2 = 0, $edge$0$anchor$0 = 0, $edge$045 = 0, $edge$139 = 0, $edge$232 = 0, $edge$329 = 0, $edge1$0$ph = 0, $edge12$0 = 0, $edge2$0$ph11 = 0, $has_last_stem$035 = 0, $has_last_stem$1 = 0;
 var $last_stem_pos$036 = 0, $last_stem_pos$1 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond64 = 0, $or$cond65 = 0, $skipped$0$lcssa = 0, $skipped$034 = 0, $skipped$1 = 0, $skipped$231 = 0, $skipped$3 = 0, $skipped$3$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*48)|0)|0);
 $5 = ($3|0)>(0);
 if ($5) {
  $anchor$044 = 0;$edge$045 = $1;
  while(1) {
   $8 = ((($edge$045)) + 12|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 & 4;
   $11 = ($10<<24>>24)==(0);
   do {
    if ($11) {
     $12 = ((($edge$045)) + 20|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($edge$045)) + 24|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($13|0)==(0|0);
     if ($16) {
      $17 = ($15|0)==(0|0);
      if ($17) {
       $anchor$1 = $anchor$044;
       break;
      }
      $18 = ((($15)) + 20|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = ($19|0)==(0|0);
      $$ = $20 ? $13 : $19;
      $$edge$0 = $20 ? $15 : $edge$045;
      if ($20) {
       $anchor$1 = $anchor$044;
       break;
      } else {
       $blue$0$ph10 = $$;$edge1$0$ph = $15;$edge2$0$ph11 = $$edge$0;
      }
     } else {
      $blue$0$ph10 = $13;$edge1$0$ph = $edge$045;$edge2$0$ph11 = $15;
     }
     $21 = ((($blue$0$ph10)) + 8|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($edge1$0$ph)) + 8|0);
     HEAP32[$23>>2] = $22;
     $24 = ((($edge1$0$ph)) + 12|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25&255;
     $27 = $26 | 4;
     $28 = $27&255;
     HEAP8[$24>>0] = $28;
     $29 = ($edge2$0$ph11|0)==(0|0);
     if (!($29)) {
      $30 = ((($edge2$0$ph11)) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==(0|0);
      if ($32) {
       _af_cjk_align_linked_edge($hints,$dim,$edge1$0$ph,$edge2$0$ph11);
       $33 = ((($edge2$0$ph11)) + 12|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $36 = $35 | 4;
       $37 = $36&255;
       HEAP8[$33>>0] = $37;
      }
     }
     $38 = ($anchor$044|0)==(0|0);
     $edge$0$anchor$0 = $38 ? $edge$045 : $anchor$044;
     $anchor$1 = $edge$0$anchor$0;
    } else {
     $anchor$1 = $anchor$044;
    }
   } while(0);
   $39 = ((($edge$045)) + 48|0);
   $40 = ($39>>>0)<($4>>>0);
   if ($40) {
    $anchor$044 = $anchor$1;$edge$045 = $39;
   } else {
    $anchor$1$lcssa = $anchor$1;
    break;
   }
  }
  $6 = ($3|0)>(0);
  if ($6) {
   $7 = ($dim|0)==(1);
   $anchor$238 = $anchor$1$lcssa;$delta$037 = 0;$edge$139 = $1;$has_last_stem$035 = 0;$last_stem_pos$036 = 0;$skipped$034 = 0;
   while(1) {
    $41 = ((($edge$139)) + 12|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42 & 4;
    $44 = ($43<<24>>24)==(0);
    L19: do {
     if ($44) {
      $45 = ((($edge$139)) + 24|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46|0)==(0|0);
      if ($47) {
       $48 = (($skipped$034) + 1)|0;
       $anchor$3 = $anchor$238;$delta$2 = $delta$037;$has_last_stem$1 = $has_last_stem$035;$last_stem_pos$1 = $last_stem_pos$036;$skipped$1 = $48;
       break;
      }
      $49 = ($has_last_stem$035<<24>>24)==(0);
      do {
       if (!($49)) {
        $50 = ((($edge$139)) + 8|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = (($last_stem_pos$036) + 64)|0;
        $53 = ($51|0)<($52|0);
        if (!($53)) {
         $54 = ((($46)) + 8|0);
         $55 = HEAP32[$54>>2]|0;
         $56 = ($55|0)<($52|0);
         if (!($56)) {
          break;
         }
        }
        $57 = (($skipped$034) + 1)|0;
        $anchor$3 = $anchor$238;$delta$2 = $delta$037;$has_last_stem$1 = $has_last_stem$035;$last_stem_pos$1 = $last_stem_pos$036;$skipped$1 = $57;
        break L19;
       }
      } while(0);
      $58 = ((($46)) + 20|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ($59|0)==(0|0);
      if (!($60)) {
       _af_cjk_align_linked_edge($hints,$dim,$46,$edge$139);
       $61 = HEAP8[$41>>0]|0;
       $62 = $61&255;
       $63 = $62 | 4;
       $64 = $63&255;
       HEAP8[$41>>0] = $64;
       $anchor$3 = $anchor$238;$delta$2 = $delta$037;$has_last_stem$1 = $has_last_stem$035;$last_stem_pos$1 = $last_stem_pos$036;$skipped$1 = $skipped$034;
       break;
      }
      $65 = ($46>>>0)<($edge$139>>>0);
      if ($65) {
       _af_cjk_align_linked_edge($hints,$dim,$46,$edge$139);
       $66 = HEAP8[$41>>0]|0;
       $67 = $66&255;
       $68 = $67 | 4;
       $69 = $68&255;
       HEAP8[$41>>0] = $69;
       $70 = ((($edge$139)) + 8|0);
       $71 = HEAP32[$70>>2]|0;
       $anchor$3 = $anchor$238;$delta$2 = $delta$037;$has_last_stem$1 = 1;$last_stem_pos$1 = $71;$skipped$1 = $skipped$034;
       break;
      }
      $72 = ($anchor$238|0)!=(0|0);
      $or$cond = $7 | $72;
      if ($or$cond) {
       (_af_hint_normal_stem($hints,$edge$139,$46,$delta$037,$dim)|0);
       $delta$1 = $delta$037;
      } else {
       $73 = (_af_hint_normal_stem($hints,$edge$139,$46,0,0)|0);
       $delta$1 = $73;
      }
      $74 = HEAP8[$41>>0]|0;
      $75 = $74&255;
      $76 = $75 | 4;
      $77 = $76&255;
      HEAP8[$41>>0] = $77;
      $78 = ((($46)) + 12|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = $79&255;
      $81 = $80 | 4;
      $82 = $81&255;
      HEAP8[$78>>0] = $82;
      $83 = ((($46)) + 8|0);
      $84 = HEAP32[$83>>2]|0;
      $anchor$3 = $edge$139;$delta$2 = $delta$1;$has_last_stem$1 = 1;$last_stem_pos$1 = $84;$skipped$1 = $skipped$034;
     } else {
      $anchor$3 = $anchor$238;$delta$2 = $delta$037;$has_last_stem$1 = $has_last_stem$035;$last_stem_pos$1 = $last_stem_pos$036;$skipped$1 = $skipped$034;
     }
    } while(0);
    $85 = ((($edge$139)) + 48|0);
    $86 = ($85>>>0)<($4>>>0);
    if ($86) {
     $anchor$238 = $anchor$3;$delta$037 = $delta$2;$edge$139 = $85;$has_last_stem$035 = $has_last_stem$1;$last_stem_pos$036 = $last_stem_pos$1;$skipped$034 = $skipped$1;
    } else {
     $skipped$0$lcssa = $skipped$1;
     break;
    }
   }
  } else {
   $skipped$0$lcssa = 0;
  }
 } else {
  $skipped$0$lcssa = 0;
 }
 $$idx = ($3*48)|0;
 $87 = ($dim|0)==(0);
 L42: do {
  if ($87) {
   $88 = ($$idx|0)==(576);
   switch ($$idx|0) {
   case 288:  {
    $110 = 3;$115 = 5;$91 = 2;$97 = 4;$edge12$0 = $1;
    break;
   }
   case 576:  {
    $89 = ((($1)) + 48|0);
    $110 = 6;$115 = 10;$91 = 5;$97 = 9;$edge12$0 = $89;
    break;
   }
   default: {
    break L42;
   }
   }
   $90 = (((($1) + (($91*48)|0)|0)) + 4|0);
   $92 = HEAP32[$90>>2]|0;
   $93 = ((($edge12$0)) + 4|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($92) - ($94))|0;
   $96 = (((($1) + (($97*48)|0)|0)) + 4|0);
   $98 = HEAP32[$96>>2]|0;
   $99 = (($92) - ($98))|0;
   $100 = (($99) + ($95))|0;
   $101 = ($100|0)<(0);
   $102 = (0 - ($100))|0;
   $$8 = $101 ? $102 : $100;
   $103 = ((($edge12$0)) + 24|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ((($edge12$0)) + 48|0);
   $106 = ($104|0)==($105|0);
   if ($106) {
    $107 = (((($1) + (($91*48)|0)|0)) + 24|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($1) + (($110*48)|0)|0);
    $111 = ($108|0)==($109|0);
    if ($111) {
     $112 = (((($1) + (($97*48)|0)|0)) + 24|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = (($1) + (($115*48)|0)|0);
     $116 = ($113|0)==($114|0);
     $117 = ($$8|0)<(8);
     $or$cond5 = $117 & $116;
     if ($or$cond5) {
      $118 = (((($1) + (($97*48)|0)|0)) + 8|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = (((($1) + (($91*48)|0)|0)) + 8|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $121 << 1;
      $123 = ((($edge12$0)) + 8|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = (($122) - ($124))|0;
      $126 = (($119) - ($125))|0;
      HEAP32[$118>>2] = $125;
      $127 = HEAP32[$112>>2]|0;
      $128 = ($127|0)==(0|0);
      if (!($128)) {
       $129 = ((($127)) + 8|0);
       $130 = HEAP32[$129>>2]|0;
       $131 = (($130) - ($126))|0;
       HEAP32[$129>>2] = $131;
      }
      if ($88) {
       $132 = ((($1)) + 392|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = (($133) - ($126))|0;
       HEAP32[$132>>2] = $134;
       $135 = ((($1)) + 536|0);
       $136 = HEAP32[$135>>2]|0;
       $137 = (($136) - ($126))|0;
       HEAP32[$135>>2] = $137;
      }
      $138 = (((($1) + (($97*48)|0)|0)) + 12|0);
      $139 = HEAP8[$138>>0]|0;
      $140 = $139&255;
      $141 = $140 | 4;
      $142 = $141&255;
      HEAP8[$138>>0] = $142;
      $143 = HEAP32[$112>>2]|0;
      $144 = ($143|0)==(0|0);
      if (!($144)) {
       $145 = ((($143)) + 12|0);
       $146 = HEAP8[$145>>0]|0;
       $147 = $146&255;
       $148 = $147 | 4;
       $149 = $148&255;
       HEAP8[$145>>0] = $149;
      }
     }
    }
   }
  }
 } while(0);
 $150 = ($skipped$0$lcssa|0)!=(0);
 $151 = ($3|0)>(0);
 $or$cond64 = $150 & $151;
 if ($or$cond64) {
  $edge$232 = $1;$skipped$231 = $skipped$0$lcssa;
 } else {
  return;
 }
 while(1) {
  $152 = ((($edge$232)) + 12|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = $153 & 4;
  $155 = ($154<<24>>24)==(0);
  if ($155) {
   $156 = ((($edge$232)) + 28|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($157|0)==(0|0);
   if ($158) {
    $skipped$3 = $skipped$231;
   } else {
    _af_cjk_align_serif_edge($157,$edge$232);
    $159 = HEAP8[$152>>0]|0;
    $160 = $159&255;
    $161 = $160 | 4;
    $162 = $161&255;
    HEAP8[$152>>0] = $162;
    $163 = (($skipped$231) + -1)|0;
    $skipped$3 = $163;
   }
  } else {
   $skipped$3 = $skipped$231;
  }
  $164 = ((($edge$232)) + 48|0);
  $165 = ($164>>>0)<($4>>>0);
  if ($165) {
   $edge$232 = $164;$skipped$231 = $skipped$3;
  } else {
   $skipped$3$lcssa = $skipped$3;
   break;
  }
 }
 $166 = ($skipped$3$lcssa|0)!=(0);
 $167 = ($3|0)>(0);
 $or$cond65 = $166 & $167;
 if ($or$cond65) {
  $edge$329 = $1;
 } else {
  return;
 }
 while(1) {
  $168 = ((($edge$329)) + 12|0);
  $169 = HEAP8[$168>>0]|0;
  $170 = $169 & 4;
  $171 = ($170<<24>>24)==(0);
  do {
   if ($171) {
    $before$0 = $edge$329;
    while(1) {
     $172 = ((($before$0)) + -48|0);
     $173 = ($172>>>0)>=($1>>>0);
     if (!($173)) {
      $$lcssa = $172;$$lcssa80 = $173;$before$0$lcssa = $before$0;
      break;
     }
     $174 = ((($before$0)) + -36|0);
     $175 = HEAP8[$174>>0]|0;
     $176 = $175 & 4;
     $177 = ($176<<24>>24)==(0);
     if ($177) {
      $before$0 = $172;
     } else {
      $$lcssa = $172;$$lcssa80 = $173;$before$0$lcssa = $before$0;
      break;
     }
    }
    $after$0 = $edge$329;
    while(1) {
     $178 = ((($after$0)) + 48|0);
     $179 = ($178>>>0)<($4>>>0);
     if (!($179)) {
      $$lcssa83 = $178;$$lcssa85 = $179;$after$0$lcssa = $after$0;
      label = 53;
      break;
     }
     $180 = ((($after$0)) + 60|0);
     $181 = HEAP8[$180>>0]|0;
     $182 = $181 & 4;
     $183 = ($182<<24>>24)==(0);
     if ($183) {
      $after$0 = $178;
     } else {
      $185 = $178;$206 = $179;$after$082 = $after$0;
      break;
     }
    }
    if ((label|0) == 53) {
     label = 0;
     $brmerge = $$lcssa80 | $$lcssa85;
     if ($brmerge) {
      $185 = $$lcssa83;$206 = $$lcssa85;$after$082 = $after$0$lcssa;
     } else {
      break;
     }
    }
    $184 = ($$lcssa>>>0)<($1>>>0);
    if ($184) {
     _af_cjk_align_serif_edge($185,$edge$329);
     break;
    }
    if (!($206)) {
     _af_cjk_align_serif_edge($$lcssa,$edge$329);
     break;
    }
    $186 = HEAP16[$185>>1]|0;
    $187 = HEAP16[$$lcssa>>1]|0;
    $188 = $187 << 16 >> 16;
    $189 = ($186<<16>>16)==($187<<16>>16);
    $190 = ((($before$0$lcssa)) + -40|0);
    $191 = HEAP32[$190>>2]|0;
    if ($189) {
     $192 = ((($edge$329)) + 8|0);
     HEAP32[$192>>2] = $191;
     break;
    } else {
     $193 = $186 << 16 >> 16;
     $194 = HEAP16[$edge$329>>1]|0;
     $195 = $194 << 16 >> 16;
     $196 = (($195) - ($188))|0;
     $197 = ((($after$082)) + 56|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = (($198) - ($191))|0;
     $200 = (($193) - ($188))|0;
     $201 = (_FT_MulDiv($196,$199,$200)|0);
     $202 = (($201) + ($191))|0;
     $203 = ((($edge$329)) + 8|0);
     HEAP32[$203>>2] = $202;
     break;
    }
   }
  } while(0);
  $204 = ((($edge$329)) + 48|0);
  $205 = ($204>>>0)<($4>>>0);
  if ($205) {
   $edge$329 = $204;
  } else {
   break;
  }
 }
 return;
}
function _af_cjk_align_edge_points($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $$ = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $edge$02 = 0, $phitmp = 0, $point$0 = 0, $point$0$in = 0, $point1$0 = 0, $point1$0$in = 0, $seg$0 = 0, $seg$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*48)|0)|0);
 $5 = ($dim|0)==(0);
 if ($5) {
  $6 = ((($hints)) + 104|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 1;
  $$ = $8&255;
  $15 = $$;
 } else {
  $9 = ($dim|0)==(1);
  if ($9) {
   $10 = ((($hints)) + 104|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $11 >>> 1;
   $$lobit = $12 & 1;
   $phitmp = $$lobit&255;
   $15 = $phitmp;
  } else {
   $15 = 0;
  }
 }
 $13 = ($3|0)>(0);
 if (!($13)) {
  return;
 }
 $14 = ($15<<24>>24)==(0);
 $edge$02 = $1;
 while(1) {
  $16 = ((($edge$02)) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($edge$02)) + 8|0);
  if ($14) {
   $39 = HEAP32[$18>>2]|0;
   $40 = ((($edge$02)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) - ($41))|0;
   $seg$1 = $17;
   while(1) {
    $43 = ((($seg$1)) + 40|0);
    $44 = ((($seg$1)) + 44|0);
    $point1$0$in = $43;
    while(1) {
     $point1$0 = HEAP32[$point1$0$in>>2]|0;
     if ($5) {
      $45 = ((($point1$0)) + 16|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = (($46) + ($42))|0;
      HEAP32[$45>>2] = $47;
      $48 = HEAP16[$point1$0>>1]|0;
      $49 = $48&65535;
      $50 = $49 | 64;
      $51 = $50&65535;
      HEAP16[$point1$0>>1] = $51;
     } else {
      $52 = ((($point1$0)) + 20|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (($53) + ($42))|0;
      HEAP32[$52>>2] = $54;
      $55 = HEAP16[$point1$0>>1]|0;
      $56 = $55&65535;
      $57 = $56 | 128;
      $58 = $57&65535;
      HEAP16[$point1$0>>1] = $58;
     }
     $59 = HEAP32[$44>>2]|0;
     $60 = ($point1$0|0)==($59|0);
     $61 = ((($point1$0)) + 32|0);
     if ($60) {
      break;
     } else {
      $point1$0$in = $61;
     }
    }
    $62 = ((($seg$1)) + 16|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = HEAP32[$16>>2]|0;
    $65 = ($63|0)==($64|0);
    if ($65) {
     break;
    } else {
     $seg$1 = $63;
    }
   }
  } else {
   $seg$0 = $17;
   while(1) {
    $19 = ((($seg$0)) + 40|0);
    $20 = ((($seg$0)) + 44|0);
    $point$0$in = $19;
    while(1) {
     $point$0 = HEAP32[$point$0$in>>2]|0;
     $21 = HEAP32[$18>>2]|0;
     if ($5) {
      $22 = ((($point$0)) + 16|0);
      HEAP32[$22>>2] = $21;
      $23 = HEAP16[$point$0>>1]|0;
      $24 = $23&65535;
      $25 = $24 | 64;
      $26 = $25&65535;
      HEAP16[$point$0>>1] = $26;
     } else {
      $27 = ((($point$0)) + 20|0);
      HEAP32[$27>>2] = $21;
      $28 = HEAP16[$point$0>>1]|0;
      $29 = $28&65535;
      $30 = $29 | 128;
      $31 = $30&65535;
      HEAP16[$point$0>>1] = $31;
     }
     $32 = HEAP32[$20>>2]|0;
     $33 = ($point$0|0)==($32|0);
     $34 = ((($point$0)) + 32|0);
     if ($33) {
      break;
     } else {
      $point$0$in = $34;
     }
    }
    $35 = ((($seg$0)) + 16|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$16>>2]|0;
    $38 = ($36|0)==($37|0);
    if ($38) {
     break;
    } else {
     $seg$0 = $36;
    }
   }
  }
  $66 = ((($edge$02)) + 48|0);
  $67 = ($66>>>0)<($4>>>0);
  if ($67) {
   $edge$02 = $66;
  } else {
   break;
  }
 }
 return;
}
function _af_cjk_align_linked_edge($hints,$dim,$base_edge,$stem_edge) {
 $hints = $hints|0;
 $dim = $dim|0;
 $base_edge = $base_edge|0;
 $stem_edge = $stem_edge|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stem_edge)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($base_edge)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = (_af_cjk_compute_stem_width($hints,$dim,$4)|0);
 $6 = ((($base_edge)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5))|0;
 $9 = ((($stem_edge)) + 8|0);
 HEAP32[$9>>2] = $8;
 return;
}
function _af_hint_normal_stem($hints,$edge,$edge2,$anchor,$dim) {
 $hints = $hints|0;
 $edge = $edge|0;
 $edge2 = $edge2|0;
 $anchor = $anchor|0;
 $dim = $dim|0;
 var $$ = 0, $$2 = 0, $$7 = 0, $$8 = 0, $$delta$0 = 0, $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0;
 var $9 = 0, $delta$0 = 0, $delta$1 = 0, $offset$0 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond4 = 0, $or$cond5 = 0, $or$cond6 = 0, $threshold$0 = 0, $u_off2$0 = 0, $u_off2$0$$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hints)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 4;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $4 = ((($edge)) + 12|0);
   $5 = HEAP8[$4>>0]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if (!($7)) {
    $8 = ((($edge2)) + 12|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 & 1;
    $11 = ($10<<24>>24)==(0);
    if (!($11)) {
     $12 = ($dim|0)==(1);
     $$ = $12 ? 55 : 49;
     $threshold$0 = $$;
     break;
    }
   }
   $13 = ($dim|0)==(1);
   $$2 = $13 ? 61 : 59;
   $threshold$0 = $$2;
  } else {
   $threshold$0 = 64;
  }
 } while(0);
 $14 = ((($edge2)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($edge)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) - ($17))|0;
 $19 = (_af_cjk_compute_stem_width($hints,$dim,$18)|0);
 $20 = (($17) + ($15))|0;
 $21 = (($20|0) / 2)&-1;
 $22 = (($21) + ($anchor))|0;
 $$neg = (($19|0) / -2)&-1;
 $23 = (($22) + ($$neg))|0;
 $24 = (($23) + ($19))|0;
 $25 = $23 & 63;
 $26 = $24 & 63;
 $27 = (64 - ($25))|0;
 $28 = (64 - ($26))|0;
 $29 = ($25|0)==(0);
 $30 = ($26|0)==(0);
 $or$cond = $29 | $30;
 do {
  if ($or$cond) {
   $delta$0 = 0;
  } else {
   $31 = ($19|0)>($threshold$0|0);
   if (!($31)) {
    $32 = ($26|0)<($19|0);
    if (!($32)) {
     $delta$0 = 0;
     break;
    }
    $33 = ($27>>>0)>($26>>>0);
    $34 = (0 - ($26))|0;
    $$8 = $33 ? $34 : $27;
    $delta$0 = $$8;
    break;
   }
   $35 = ($threshold$0>>>0)<(64);
   if ($35) {
    $36 = ($25>>>0)<($threshold$0>>>0);
    $37 = ($threshold$0>>>0)>($27>>>0);
    $or$cond3 = $36 & $37;
    $38 = ($threshold$0>>>0)>($26>>>0);
    $or$cond4 = $38 & $or$cond3;
    $39 = ($28>>>0)<($threshold$0>>>0);
    $or$cond5 = $39 & $or$cond4;
    if (!($or$cond5)) {
     $delta$0 = 0;
     break;
    }
   }
   $40 = $19 & 63;
   $41 = ($40>>>0)<(32);
   if ($41) {
    $42 = ($27>>>0)>($40>>>0);
    $43 = ($26>>>0)>($40>>>0);
    $or$cond6 = $42 & $43;
    if ($or$cond6) {
     $offset$0 = $40;
    } else {
     $delta$0 = 0;
     break;
    }
   } else {
    $44 = (64 - ($threshold$0))|0;
    $offset$0 = $44;
   }
   $45 = (($threshold$0) - ($27))|0;
   $46 = (($27) - ($offset$0))|0;
   $47 = (($threshold$0) - ($26))|0;
   $48 = (($26) - ($offset$0))|0;
   $49 = ($45|0)>($46|0);
   $50 = (0 - ($45))|0;
   $$7 = $49 ? $46 : $50;
   $51 = ($48|0)>($47|0);
   $52 = (0 - ($48))|0;
   $u_off2$0 = $51 ? $47 : $52;
   $53 = ($$7|0)<(0);
   $54 = (0 - ($$7))|0;
   $55 = $53 ? $54 : $$7;
   $56 = ($u_off2$0|0)<(0);
   $57 = (0 - ($u_off2$0))|0;
   $58 = $56 ? $57 : $u_off2$0;
   $59 = ($55|0)>($58|0);
   $u_off2$0$$7 = $59 ? $u_off2$0 : $$7;
   $delta$0 = $u_off2$0$$7;
  }
 } while(0);
 $60 = HEAP32[$0>>2]|0;
 $61 = $60 & 4;
 $62 = ($61|0)==(0);
 if ($62) {
  $63 = ($delta$0|0)>(14);
  if ($63) {
   $delta$1 = 14;
  } else {
   $64 = ($delta$0|0)<(-14);
   $$delta$0 = $64 ? -14 : $delta$0;
   $delta$1 = $$delta$0;
  }
 } else {
  $delta$1 = $delta$0;
 }
 $65 = (($delta$1) + ($23))|0;
 $66 = HEAP32[$16>>2]|0;
 $67 = HEAP32[$14>>2]|0;
 $68 = ($66|0)<($67|0);
 if ($68) {
  $69 = ((($edge)) + 8|0);
  HEAP32[$69>>2] = $65;
  $70 = (($65) + ($19))|0;
  $71 = ((($edge2)) + 8|0);
  HEAP32[$71>>2] = $70;
  return ($delta$1|0);
 } else {
  $72 = (($65) + ($19))|0;
  $73 = ((($edge)) + 8|0);
  HEAP32[$73>>2] = $72;
  $74 = ((($edge2)) + 8|0);
  HEAP32[$74>>2] = $65;
  return ($delta$1|0);
 }
 return (0)|0;
}
function _af_cjk_align_serif_edge($base,$serif) {
 $base = $base|0;
 $serif = $serif|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($base)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($serif)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($base)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($1))|0;
 $7 = (($6) - ($5))|0;
 $8 = ((($serif)) + 8|0);
 HEAP32[$8>>2] = $7;
 return;
}
function _af_cjk_compute_stem_width($hints,$dim,$width) {
 $hints = $hints|0;
 $dim = $dim|0;
 $width = $width|0;
 var $$ = 0, $$$width = 0, $$0 = 0, $$off = 0, $$width = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dist$1 = 0, $dist$1$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hints)) + 108|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($dim|0)==(1);
 $3 = ((($hints)) + 104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = $width;
  return ($$0|0);
 }
 $7 = ($width|0)<(0);
 $8 = (0 - ($width))|0;
 $$width = $7 ? $8 : $width;
 if ($2) {
  $9 = $4 & 2;
  $10 = ($9|0)==(0);
  if ($10) {
   label = 5;
  } else {
   label = 15;
  }
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = $11 & 1;
  $13 = ($12|0)==(0);
  if ($13) {
   label = 5;
  } else {
   label = 15;
  }
 }
 do {
  if ((label|0) == 5) {
   $14 = (((((($1)) + 40|0) + (($dim*340)|0)|0)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = (((((($1)) + 40|0) + (($dim*340)|0)|0)) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($$width) - ($18))|0;
    $20 = ($19|0)<(0);
    $21 = (0 - ($19))|0;
    $22 = $20 ? $21 : $19;
    $23 = ($22|0)<(40);
    if ($23) {
     $24 = ($18|0)<(48);
     $$ = $24 ? 48 : $18;
     $dist$1 = $$;
     break;
    }
   }
   $25 = ($$width|0)<(54);
   if ($25) {
    $26 = (54 - ($$width))|0;
    $27 = (($26|0) / 2)&-1;
    $28 = (($27) + ($$width))|0;
    $dist$1 = $28;
    break;
   }
   $29 = ($$width|0)<(192);
   if ($29) {
    $30 = $$width & 63;
    $31 = $$width & -64;
    $32 = ($30>>>0)<(10);
    if ($32) {
     $dist$1 = $$width;
    } else {
     $33 = ($30>>>0)<(22);
     if ($33) {
      $34 = $31 | 10;
      $dist$1 = $34;
      break;
     } else {
      $$off = (($30) + -42)|0;
      $35 = ($$off>>>0)<(12);
      $36 = $31 | 54;
      $$$width = $35 ? $36 : $$width;
      $dist$1 = $$$width;
      break;
     }
    }
   } else {
    $dist$1 = $$width;
   }
  }
  else if ((label|0) == 15) {
   $37 = (((((($1)) + 40|0) + (($dim*340)|0)|0)) + 12|0);
   $38 = (((((($1)) + 40|0) + (($dim*340)|0)|0)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (_af_cjk_snap_width($37,$39,$$width)|0);
   if ($2) {
    $41 = ($40|0)>(63);
    if (!($41)) {
     $dist$1 = 64;
     break;
    }
    $42 = (($40) + 16)|0;
    $43 = $42 & -64;
    $dist$1 = $43;
    break;
   }
   $44 = HEAP32[$3>>2]|0;
   $45 = $44 & 8;
   $46 = ($45|0)==(0);
   if (!($46)) {
    $47 = ($40|0)<(64);
    if ($47) {
     $dist$1 = 64;
     break;
    }
    $48 = (($40) + 32)|0;
    $49 = $48 & -64;
    $dist$1 = $49;
    break;
   }
   $50 = ($40|0)<(48);
   if ($50) {
    $51 = (($40) + 64)|0;
    $52 = $51 >> 1;
    $dist$1 = $52;
    break;
   }
   $53 = ($40|0)<(128);
   if ($53) {
    $54 = (($40) + 22)|0;
    $55 = $54 & -64;
    $dist$1 = $55;
    break;
   } else {
    $56 = (($40) + 32)|0;
    $57 = $56 & -64;
    $dist$1 = $57;
    break;
   }
  }
 } while(0);
 $58 = ($width|0)>(-1);
 $59 = (0 - ($dist$1))|0;
 $dist$1$ = $58 ? $dist$1 : $59;
 $$0 = $dist$1$;
 return ($$0|0);
}
function _af_cjk_snap_width($widths,$count,$width) {
 $widths = $widths|0;
 $count = $count|0;
 $width = $width|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $best$02 = 0;
 var $best$1 = 0, $exitcond = 0, $n$04 = 0, $reference$0$lcssa5 = 0, $reference$0$width = 0, $reference$0$width1 = 0, $reference$03 = 0, $reference$1 = 0, $reference$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count|0)>(0);
 if ($0) {
  $best$02 = 98;$n$04 = 0;$reference$03 = $width;
 } else {
  $1 = (($width) + 32)|0;
  $2 = $1 & -64;
  $14 = $2;$reference$0$lcssa5 = $width;
  $13 = $14 | 48;
  $15 = ($13|0)>($width|0);
  $reference$0$width = $15 ? $reference$0$lcssa5 : $width;
  return ($reference$0$width|0);
 }
 while(1) {
  $3 = (((($widths) + (($n$04*12)|0)|0)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($width) - ($4))|0;
  $6 = ($5|0)<(0);
  $7 = (0 - ($5))|0;
  $$ = $6 ? $7 : $5;
  $8 = ($$|0)<($best$02|0);
  $best$1 = $8 ? $$ : $best$02;
  $reference$1 = $8 ? $4 : $reference$03;
  $9 = (($n$04) + 1)|0;
  $exitcond = ($9|0)==($count|0);
  if ($exitcond) {
   $reference$1$lcssa = $reference$1;
   break;
  } else {
   $best$02 = $best$1;$n$04 = $9;$reference$03 = $reference$1;
  }
 }
 $10 = (($reference$1$lcssa) + 32)|0;
 $11 = $10 & -64;
 $12 = ($reference$1$lcssa|0)>($width|0);
 if ($12) {
  $16 = (($11) + -48)|0;
  $17 = ($16|0)<($width|0);
  $reference$0$width1 = $17 ? $reference$1$lcssa : $width;
  return ($reference$0$width1|0);
 } else {
  $14 = $11;$reference$0$lcssa5 = $reference$1$lcssa;
  $13 = $14 | 48;
  $15 = ($13|0)>($width|0);
  $reference$0$width = $15 ? $reference$0$lcssa5 : $width;
  return ($reference$0$width|0);
 }
 return (0)|0;
}
function _af_cjk_hints_compute_segments($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f0$03 = 0, $pt$02 = 0, $seg$05 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($hints)) + 44|0) + (($dim*28)|0)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*48)|0)|0);
 $5 = (_af_latin_hints_compute_segments($hints,$dim)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = $5;
  return ($$0|0);
 }
 $7 = ($3|0)>(0);
 if ($7) {
  $seg$05 = $1;
 } else {
  $$0 = 0;
  return ($$0|0);
 }
 while(1) {
  $8 = ((($seg$05)) + 40|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($seg$05)) + 44|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP16[$9>>1]|0;
  $13 = HEAP8[$seg$05>>0]|0;
  $14 = $13&255;
  $15 = $14 & 254;
  $16 = $15&255;
  HEAP8[$seg$05>>0] = $16;
  $17 = ($9|0)==($11|0);
  L8: do {
   if (!($17)) {
    $18 = $12&65535;
    $19 = $18 & 3;
    $f0$03 = $19;$pt$02 = $9;
    while(1) {
     $20 = ((($pt$02)) + 32|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = HEAP16[$21>>1]|0;
     $23 = $22&65535;
     $24 = $23 & 3;
     $25 = $24 | $f0$03;
     $26 = ($25|0)==(0);
     if ($26) {
      break L8;
     }
     $27 = ($21|0)==($11|0);
     if ($27) {
      $29 = HEAP8[$seg$05>>0]|0;
      $30 = $29&255;
      $31 = $30 | 1;
      $32 = $31&255;
      HEAP8[$seg$05>>0] = $32;
     }
     $28 = ($21|0)==($11|0);
     if ($28) {
      break;
     } else {
      $f0$03 = $24;$pt$02 = $21;
     }
    }
   }
  } while(0);
  $33 = ((($seg$05)) + 48|0);
  $34 = ($33>>>0)<($4>>>0);
  if ($34) {
   $seg$05 = $33;
  } else {
   $$0 = 0;
   break;
  }
 }
 return ($$0|0);
}
function _af_cjk_hints_link_segments($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $$ = 0, $$$v = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $max$0 = 0, $max$0$v = 0, $or$cond = 0, $or$cond1 = 0, $or$cond3 = 0, $seg$011 = 0, $seg1$024 = 0, $seg1$117 = 0, $seg1$210 = 0, $seg2$021 = 0, $seg2$113 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($hints)) + 44|0) + (($dim*28)|0)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*48)|0)|0);
 $5 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($hints)) + 108|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10|0) / 256)&-1;
 $12 = ($dim|0)==(0);
 $13 = ((($hints)) + 4|0);
 $14 = ((($hints)) + 12|0);
 $$in = $12 ? $13 : $14;
 $15 = HEAP32[$$in>>2]|0;
 $16 = (_FT_DivFix(192,$15)|0);
 $17 = ($3|0)>(0);
 if ($17) {
  $seg1$024 = $1;
 } else {
  return;
 }
 while(1) {
  $19 = ((($seg1$024)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($seg1$024)) + 44|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($20|0)==($22|0);
  if (!($23)) {
   $24 = ((($seg1$024)) + 1|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 << 24 >> 24;
   $27 = ($26|0)==($6|0);
   if ($27) {
    $28 = ((($seg1$024)) + 2|0);
    $29 = ((($seg1$024)) + 4|0);
    $30 = ((($seg1$024)) + 6|0);
    $31 = ((($seg1$024)) + 32|0);
    $32 = ((($seg1$024)) + 36|0);
    $33 = ((($seg1$024)) + 20|0);
    $34 = ((($seg1$024)) + 36|0);
    $seg2$021 = $1;
    while(1) {
     $35 = ($seg2$021|0)==($seg1$024|0);
     do {
      if (!($35)) {
       $36 = HEAP8[$24>>0]|0;
       $37 = $36 << 24 >> 24;
       $38 = ((($seg2$021)) + 1|0);
       $39 = HEAP8[$38>>0]|0;
       $40 = $39 << 24 >> 24;
       $41 = (0 - ($40))|0;
       $42 = ($37|0)==($41|0);
       if ($42) {
        $43 = ((($seg2$021)) + 2|0);
        $44 = HEAP16[$43>>1]|0;
        $45 = $44 << 16 >> 16;
        $46 = HEAP16[$28>>1]|0;
        $47 = $46 << 16 >> 16;
        $48 = (($45) - ($47))|0;
        $49 = ($48|0)<(0);
        if (!($49)) {
         $50 = HEAP16[$29>>1]|0;
         $51 = HEAP16[$30>>1]|0;
         $52 = ((($seg2$021)) + 4|0);
         $53 = HEAP16[$52>>1]|0;
         $54 = ($50<<16>>16)<($53<<16>>16);
         $$$v = $54 ? $53 : $50;
         $$ = $$$v << 16 >> 16;
         $55 = ((($seg2$021)) + 6|0);
         $56 = HEAP16[$55>>1]|0;
         $57 = ($51<<16>>16)>($56<<16>>16);
         $max$0$v = $57 ? $56 : $51;
         $max$0 = $max$0$v << 16 >> 16;
         $58 = (($max$0) - ($$))|0;
         $59 = ($58|0)<($11|0);
         if (!($59)) {
          $60 = $48 << 3;
          $61 = HEAP32[$31>>2]|0;
          $62 = ($61*9)|0;
          $63 = ($60|0)<($62|0);
          do {
           if ($63) {
            $64 = ($61*7)|0;
            $65 = ($60|0)<($64|0);
            if (!($65)) {
             $66 = HEAP32[$34>>2]|0;
             $67 = ($66|0)<($58|0);
             if (!($67)) {
              break;
             }
            }
            HEAP32[$31>>2] = $48;
            HEAP32[$32>>2] = $58;
            HEAP32[$33>>2] = $seg2$021;
           }
          } while(0);
          $68 = ((($seg2$021)) + 32|0);
          $69 = HEAP32[$68>>2]|0;
          $70 = ($69*9)|0;
          $71 = ($60|0)<($70|0);
          if ($71) {
           $72 = ($69*7)|0;
           $73 = ($60|0)<($72|0);
           if (!($73)) {
            $74 = ((($seg2$021)) + 36|0);
            $75 = HEAP32[$74>>2]|0;
            $76 = ($75|0)<($58|0);
            if (!($76)) {
             break;
            }
           }
           HEAP32[$68>>2] = $48;
           $77 = ((($seg2$021)) + 36|0);
           HEAP32[$77>>2] = $58;
           $78 = ((($seg2$021)) + 20|0);
           HEAP32[$78>>2] = $seg1$024;
          }
         }
        }
       }
      }
     } while(0);
     $79 = ((($seg2$021)) + 48|0);
     $80 = ($79>>>0)<($4>>>0);
     if ($80) {
      $seg2$021 = $79;
     } else {
      break;
     }
    }
   }
  }
  $81 = ((($seg1$024)) + 48|0);
  $82 = ($81>>>0)<($4>>>0);
  if ($82) {
   $seg1$024 = $81;
  } else {
   break;
  }
 }
 $18 = ($3|0)>(0);
 if ($18) {
  $seg1$117 = $1;
 } else {
  return;
 }
 while(1) {
  $84 = ((($seg1$117)) + 20|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  L32: do {
   if (!($86)) {
    $87 = ((($85)) + 20|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==($seg1$117|0);
    if ($89) {
     $90 = ((($85)) + 2|0);
     $91 = HEAP16[$90>>1]|0;
     $92 = ((($seg1$117)) + 2|0);
     $93 = HEAP16[$92>>1]|0;
     $94 = ($91<<16>>16)>($93<<16>>16);
     if ($94) {
      $95 = ((($seg1$117)) + 32|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = ($96|0)<($16|0);
      if ($97) {
       $98 = HEAP16[$92>>1]|0;
       $99 = ((($seg1$117)) + 36|0);
       $seg2$113 = $1;
       while(1) {
        $100 = ((($seg2$113)) + 2|0);
        $101 = HEAP16[$100>>1]|0;
        $102 = ($101<<16>>16)>($98<<16>>16);
        $103 = ($seg1$117|0)==($seg2$113|0);
        $or$cond = $103 | $102;
        if (!($or$cond)) {
         $104 = ((($seg2$113)) + 20|0);
         $105 = HEAP32[$104>>2]|0;
         $106 = ($105|0)==(0|0);
         if (!($106)) {
          $107 = ((($105)) + 20|0);
          $108 = HEAP32[$107>>2]|0;
          $109 = ($108|0)==($seg2$113|0);
          if ($109) {
           $110 = ((($105)) + 2|0);
           $111 = HEAP16[$110>>1]|0;
           $112 = HEAP16[$90>>1]|0;
           $113 = ($111<<16>>16)<($112<<16>>16);
           if (!($113)) {
            $114 = ($98<<16>>16)==($101<<16>>16);
            $115 = ($112<<16>>16)==($111<<16>>16);
            $or$cond1 = $114 & $115;
            if (!($or$cond1)) {
             $116 = ((($seg2$113)) + 32|0);
             $117 = HEAP32[$116>>2]|0;
             $118 = HEAP32[$95>>2]|0;
             $119 = ($117|0)>($118|0);
             $120 = $118 << 2;
             $121 = ($120|0)>($117|0);
             $or$cond3 = $119 & $121;
             if ($or$cond3) {
              $122 = HEAP32[$99>>2]|0;
              $123 = ((($seg2$113)) + 36|0);
              $124 = HEAP32[$123>>2]|0;
              $125 = ($124*3)|0;
              $126 = ($122|0)<($125|0);
              if ($126) {
               break;
              } else {
               $seg$011 = $1;
              }
              while(1) {
               $127 = ((($seg$011)) + 20|0);
               $128 = HEAP32[$127>>2]|0;
               $129 = ($128|0)==($seg2$113|0);
               do {
                if ($129) {
                 HEAP32[$127>>2] = 0;
                 $130 = ((($seg$011)) + 24|0);
                 HEAP32[$130>>2] = $85;
                } else {
                 $131 = ($128|0)==($105|0);
                 if (!($131)) {
                  break;
                 }
                 HEAP32[$127>>2] = 0;
                 $132 = ((($seg$011)) + 24|0);
                 HEAP32[$132>>2] = $seg1$117;
                }
               } while(0);
               $133 = ((($seg$011)) + 48|0);
               $134 = ($133>>>0)<($4>>>0);
               if ($134) {
                $seg$011 = $133;
               } else {
                break;
               }
              }
             }
            }
           }
          }
         }
        }
        $135 = ((($seg2$113)) + 48|0);
        $136 = ($135>>>0)<($4>>>0);
        if ($136) {
         $seg2$113 = $135;
        } else {
         break L32;
        }
       }
       HEAP32[$87>>2] = 0;
       HEAP32[$84>>2] = 0;
      }
     }
    }
   }
  } while(0);
  $137 = ((($seg1$117)) + 48|0);
  $138 = ($137>>>0)<($4>>>0);
  if ($138) {
   $seg1$117 = $137;
  } else {
   break;
  }
 }
 $83 = ($3|0)>(0);
 if ($83) {
  $seg1$210 = $1;
 } else {
  return;
 }
 while(1) {
  $139 = ((($seg1$210)) + 20|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = ($140|0)==(0|0);
  do {
   if (!($141)) {
    $142 = ((($140)) + 28|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = (($143) + 1)|0;
    HEAP32[$142>>2] = $144;
    $145 = ((($140)) + 20|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==($seg1$210|0);
    if (!($147)) {
     HEAP32[$139>>2] = 0;
     $148 = ((($140)) + 32|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)<($16|0);
     if (!($150)) {
      $151 = ((($seg1$210)) + 32|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = $149 << 2;
      $154 = ($152|0)<($153|0);
      if (!($154)) {
       $157 = HEAP32[$142>>2]|0;
       $158 = (($157) + -1)|0;
       HEAP32[$142>>2] = $158;
       break;
      }
     }
     $155 = HEAP32[$145>>2]|0;
     $156 = ((($seg1$210)) + 24|0);
     HEAP32[$156>>2] = $155;
    }
   }
  } while(0);
  $159 = ((($seg1$210)) + 48|0);
  $160 = ($159>>>0)<($4>>>0);
  if ($160) {
   $seg1$210 = $159;
  } else {
   break;
  }
 }
 return;
}
function _af_cjk_hints_compute_edges($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$5 = 0, $$in = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $best$014 = 0, $best$1 = 0, $brmerge = 0, $dist2$0 = 0, $dist2$1 = 0, $dist2$2 = 0, $edge1 = 0, $edge2$011 = 0, $edge2$110 = 0, $edge23$0 = 0, $edge23$1 = 0;
 var $edge_distance_threshold$0 = 0, $ee$013 = 0, $error$2 = 0, $found$015 = 0, $found$1 = 0, $found$1$lcssa = 0, $is_round$0 = 0, $is_round$1 = 0, $is_round$1$lcssa = 0, $is_straight$0 = 0, $is_straight$1 = 0, $is_straight$1$lcssa = 0, $or$cond = 0, $or$cond4 = 0, $seg$017 = 0, $seg$1 = 0, $seg$2 = 0, $seg1$0 = 0, $seg2$0 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $edge1 = sp;
 $0 = (((($hints)) + 44|0) + (($dim*28)|0)|0);
 $1 = HEAP32[$hints>>2]|0;
 $2 = ((($hints)) + 108|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) + (($6*48)|0)|0);
 $8 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ($dim|0)==(0);
 $10 = ((($hints)) + 4|0);
 $11 = ((($hints)) + 12|0);
 $$in = $9 ? $10 : $11;
 $12 = HEAP32[$$in>>2]|0;
 $13 = (((((($3)) + 40|0) + (($dim*340)|0)|0)) + 204|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_FT_MulFix($14,$12)|0);
 $16 = ($15|0)>(16);
 if ($16) {
  $17 = (_FT_DivFix(16,$12)|0);
  $edge_distance_threshold$0 = $17;
 } else {
  $18 = HEAP32[$13>>2]|0;
  $edge_distance_threshold$0 = $18;
 }
 $19 = ($6|0)>(0);
 L5: do {
  if ($19) {
   $20 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 20|0);
   $seg$017 = $5;
   while(1) {
    $21 = HEAP32[$8>>2]|0;
    $22 = ($21|0)>(0);
    if ($22) {
     $23 = HEAP32[$20>>2]|0;
     $24 = ((($seg$017)) + 1|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = ((($seg$017)) + 2|0);
     $27 = ((($seg$017)) + 20|0);
     $28 = HEAP32[$8>>2]|0;
     $best$014 = 65535;$ee$013 = 0;$found$015 = 0;
     while(1) {
      $29 = (($23) + (($ee$013*48)|0)|0);
      $30 = (((($23) + (($ee$013*48)|0)|0)) + 13|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = ($31<<24>>24)==($25<<24>>24);
      do {
       if ($32) {
        $33 = HEAP16[$26>>1]|0;
        $34 = $33 << 16 >> 16;
        $35 = HEAP16[$29>>1]|0;
        $36 = $35 << 16 >> 16;
        $37 = (($34) - ($36))|0;
        $38 = ($37|0)<(0);
        $39 = (0 - ($37))|0;
        $$ = $38 ? $39 : $37;
        $40 = ($$|0)<($edge_distance_threshold$0|0);
        $41 = ($$|0)<($best$014|0);
        $or$cond = $40 & $41;
        if ($or$cond) {
         $42 = HEAP32[$27>>2]|0;
         $43 = ($42|0)==(0|0);
         if (!($43)) {
          $44 = (((($23) + (($ee$013*48)|0)|0)) + 40|0);
          $45 = HEAP32[$44>>2]|0;
          $46 = ((($42)) + 2|0);
          $dist2$0 = 0;$seg1$0 = $45;
          while(1) {
           $47 = ((($seg1$0)) + 20|0);
           $48 = HEAP32[$47>>2]|0;
           $49 = ($48|0)==(0|0);
           if ($49) {
            $dist2$1 = $dist2$0;
           } else {
            $50 = HEAP16[$46>>1]|0;
            $51 = $50 << 16 >> 16;
            $52 = ((($48)) + 2|0);
            $53 = HEAP16[$52>>1]|0;
            $54 = $53 << 16 >> 16;
            $55 = ($50<<16>>16)>($53<<16>>16);
            $56 = (($51) - ($54))|0;
            $57 = (($54) - ($51))|0;
            $58 = $55 ? $56 : $57;
            $59 = ($58|0)<($edge_distance_threshold$0|0);
            if ($59) {
             $dist2$1 = $58;
            } else {
             $dist2$2 = $58;
             break;
            }
           }
           $60 = ((($seg1$0)) + 16|0);
           $61 = HEAP32[$60>>2]|0;
           $62 = HEAP32[$44>>2]|0;
           $63 = ($61|0)==($62|0);
           if ($63) {
            $dist2$2 = $dist2$1;
            break;
           } else {
            $dist2$0 = $dist2$1;$seg1$0 = $61;
           }
          }
          $64 = ($dist2$2|0)<($edge_distance_threshold$0|0);
          if (!($64)) {
           $best$1 = $best$014;$found$1 = $found$015;
           break;
          }
         }
         $best$1 = $$;$found$1 = $29;
        } else {
         $best$1 = $best$014;$found$1 = $found$015;
        }
       } else {
        $best$1 = $best$014;$found$1 = $found$015;
       }
      } while(0);
      $65 = (($ee$013) + 1)|0;
      $66 = ($65|0)<($28|0);
      if ($66) {
       $best$014 = $best$1;$ee$013 = $65;$found$015 = $found$1;
      } else {
       $found$1$lcssa = $found$1;
       break;
      }
     }
     $67 = ($found$1$lcssa|0)==(0|0);
     if ($67) {
      label = 19;
     } else {
      $94 = ((($found$1$lcssa)) + 40|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ((($seg$017)) + 16|0);
      HEAP32[$96>>2] = $95;
      $97 = ((($found$1$lcssa)) + 44|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ((($98)) + 16|0);
      HEAP32[$99>>2] = $seg$017;
      HEAP32[$97>>2] = $seg$017;
     }
    } else {
     label = 19;
    }
    if ((label|0) == 19) {
     label = 0;
     $68 = ((($seg$017)) + 2|0);
     $69 = HEAP16[$68>>1]|0;
     $70 = $69 << 16 >> 16;
     $71 = ((($seg$017)) + 1|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72 << 24 >> 24;
     $74 = (_af_axis_hints_new_edge($0,$70,$73,$1,$edge1)|0);
     $75 = ($74|0)==(0);
     if (!($75)) {
      $error$2 = $74;
      break;
     }
     $76 = HEAP32[$edge1>>2]|0;
     dest=$76; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
     $77 = HEAP32[$edge1>>2]|0;
     $78 = ((($77)) + 40|0);
     HEAP32[$78>>2] = $seg$017;
     $79 = HEAP32[$edge1>>2]|0;
     $80 = ((($79)) + 44|0);
     HEAP32[$80>>2] = $seg$017;
     $81 = HEAP16[$68>>1]|0;
     $82 = HEAP32[$edge1>>2]|0;
     HEAP16[$82>>1] = $81;
     $83 = HEAP16[$68>>1]|0;
     $84 = $83 << 16 >> 16;
     $85 = (_FT_MulFix($84,$12)|0);
     $86 = HEAP32[$edge1>>2]|0;
     $87 = ((($86)) + 8|0);
     HEAP32[$87>>2] = $85;
     $88 = HEAP32[$edge1>>2]|0;
     $89 = ((($88)) + 4|0);
     HEAP32[$89>>2] = $85;
     $90 = ((($seg$017)) + 16|0);
     HEAP32[$90>>2] = $seg$017;
     $91 = HEAP8[$71>>0]|0;
     $92 = HEAP32[$edge1>>2]|0;
     $93 = ((($92)) + 13|0);
     HEAP8[$93>>0] = $91;
    }
    $100 = ((($seg$017)) + 48|0);
    $101 = ($100>>>0)<($7>>>0);
    if ($101) {
     $seg$017 = $100;
    } else {
     break L5;
    }
   }
   STACKTOP = sp;return ($error$2|0);
  }
 } while(0);
 $102 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 20|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[$8>>2]|0;
 $105 = (($103) + (($104*48)|0)|0);
 $106 = ($104|0)>(0);
 if ($106) {
  $edge2$011 = $103;
 } else {
  $error$2 = 0;
  STACKTOP = sp;return ($error$2|0);
 }
 while(1) {
  $108 = ((($edge2$011)) + 40|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109|0)==(0|0);
  if (!($110)) {
   $111 = HEAP32[$108>>2]|0;
   $seg$1 = $109;
   while(1) {
    $112 = ((($seg$1)) + 12|0);
    HEAP32[$112>>2] = $edge2$011;
    $113 = ((($seg$1)) + 16|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114|0)==($111|0);
    if ($115) {
     break;
    } else {
     $seg$1 = $114;
    }
   }
  }
  $116 = ((($edge2$011)) + 48|0);
  $117 = ($116>>>0)<($105>>>0);
  if ($117) {
   $edge2$011 = $116;
  } else {
   break;
  }
 }
 $107 = ($104|0)>(0);
 if ($107) {
  $edge2$110 = $103;
 } else {
  $error$2 = 0;
  STACKTOP = sp;return ($error$2|0);
 }
 while(1) {
  $118 = ((($edge2$110)) + 40|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($edge2$110)) + 24|0);
  $121 = ((($edge2$110)) + 28|0);
  $is_round$0 = 0;$is_straight$0 = 0;$seg$2 = $119;
  while(1) {
   $122 = HEAP8[$seg$2>>0]|0;
   $123 = $122 & 1;
   $124 = $123 ^ 1;
   $125 = $124&255;
   $126 = $125 ^ 1;
   $is_round$1 = (($126) + ($is_round$0))|0;
   $127 = $123 ^ 1;
   $128 = $127&255;
   $is_straight$1 = (($128) + ($is_straight$0))|0;
   $129 = ((($seg$2)) + 24|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ($130|0)==(0|0);
   if ($131) {
    $137 = 0;
   } else {
    $132 = ((($130)) + 12|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($133|0)!=($edge2$110|0);
    $137 = $134;
   }
   $135 = ((($seg$2)) + 20|0);
   $136 = HEAP32[$135>>2]|0;
   $$not = ($136|0)!=(0|0);
   $brmerge = $137 | $$not;
   do {
    if ($brmerge) {
     $$1 = $137 ? $121 : $120;
     $$2 = $137 ? $129 : $135;
     $seg2$0 = HEAP32[$$2>>2]|0;
     $edge23$0 = HEAP32[$$1>>2]|0;
     $138 = ($edge23$0|0)==(0|0);
     if ($138) {
      $159 = ((($seg2$0)) + 12|0);
      $160 = HEAP32[$159>>2]|0;
      $edge23$1 = $160;
     } else {
      $139 = HEAP16[$edge2$110>>1]|0;
      $140 = $139 << 16 >> 16;
      $141 = HEAP16[$edge23$0>>1]|0;
      $142 = $141 << 16 >> 16;
      $143 = (($140) - ($142))|0;
      $144 = ($143|0)<(0);
      $145 = (0 - ($143))|0;
      $$3 = $144 ? $145 : $143;
      $146 = ((($seg$2)) + 2|0);
      $147 = HEAP16[$146>>1]|0;
      $148 = $147 << 16 >> 16;
      $149 = ((($seg2$0)) + 2|0);
      $150 = HEAP16[$149>>1]|0;
      $151 = $150 << 16 >> 16;
      $152 = ($147<<16>>16)>($150<<16>>16);
      $153 = (($148) - ($151))|0;
      $154 = (($151) - ($148))|0;
      $155 = $152 ? $153 : $154;
      $156 = ($155|0)<($$3|0);
      if ($156) {
       $157 = ((($seg2$0)) + 12|0);
       $158 = HEAP32[$157>>2]|0;
       $edge23$1 = $158;
      } else {
       $edge23$1 = $edge23$0;
      }
     }
     if ($137) {
      HEAP32[$121>>2] = $edge23$1;
      $161 = ((($edge23$1)) + 12|0);
      $162 = HEAP8[$161>>0]|0;
      $163 = $162&255;
      $164 = $163 | 2;
      $165 = $164&255;
      HEAP8[$161>>0] = $165;
      break;
     } else {
      HEAP32[$120>>2] = $edge23$1;
      break;
     }
    }
   } while(0);
   $166 = ((($seg$2)) + 16|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = HEAP32[$118>>2]|0;
   $169 = ($167|0)==($168|0);
   if ($169) {
    $is_round$1$lcssa = $is_round$1;$is_straight$1$lcssa = $is_straight$1;
    break;
   } else {
    $is_round$0 = $is_round$1;$is_straight$0 = $is_straight$1;$seg$2 = $167;
   }
  }
  $170 = ((($edge2$110)) + 12|0);
  $171 = ($is_round$1$lcssa|0)<(1);
  $172 = ($is_round$1$lcssa|0)<($is_straight$1$lcssa|0);
  $or$cond4 = $171 | $172;
  $173 = $or$cond4&1;
  $$5 = $173 ^ 1;
  HEAP8[$170>>0] = $$5;
  $174 = ((($edge2$110)) + 28|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ($175|0)==(0|0);
  if (!($176)) {
   $177 = ((($edge2$110)) + 24|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = ($178|0)==(0|0);
   if (!($179)) {
    HEAP32[$174>>2] = 0;
   }
  }
  $180 = ((($edge2$110)) + 48|0);
  $181 = ($180>>>0)<($105>>>0);
  if ($181) {
   $edge2$110 = $180;
  } else {
   $error$2 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($error$2|0);
}
function _af_axis_hints_new_segment($axis,$memory,$asegment) {
 $axis = $axis|0;
 $memory = $memory|0;
 $asegment = $asegment|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $error = 0, $new_max$0 = 0, $or$cond = 0, $segment$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = HEAP32[$axis>>2]|0;
 $1 = ((($axis)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)<($2|0);
 do {
  if ($3) {
   label = 6;
  } else {
   $4 = ($2|0)>(44739241);
   if ($4) {
    HEAP32[$error>>2] = 64;
    $segment$0 = 0;
    break;
   }
   $5 = $2 >> 2;
   $6 = (($2) + 4)|0;
   $7 = (($6) + ($5))|0;
   $8 = ($5|0)<(-4);
   $9 = ($7|0)>(44739242);
   $or$cond = $8 | $9;
   $new_max$0 = $or$cond ? 44739242 : $7;
   $10 = ((($axis)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_ft_mem_realloc($memory,48,$2,$new_max$0,$11,$error)|0);
   HEAP32[$10>>2] = $12;
   $13 = HEAP32[$error>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    HEAP32[$1>>2] = $new_max$0;
    label = 6;
   } else {
    $segment$0 = 0;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $15 = ((($axis)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$axis>>2]|0;
  $18 = (($17) + 1)|0;
  HEAP32[$axis>>2] = $18;
  $19 = (($16) + (($17*48)|0)|0);
  $segment$0 = $19;
 }
 HEAP32[$asegment>>2] = $segment$0;
 $20 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($20|0);
}
function _af_axis_hints_new_edge($axis,$fpos,$dir,$memory,$aedge) {
 $axis = $axis|0;
 $fpos = $fpos|0;
 $dir = $dir|0;
 $memory = $memory|0;
 $aedge = $aedge|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $edge$0$lcssa = 0, $edge$01 = 0, $edge$1 = 0;
 var $error = 0, $new_max$0 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($axis)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($axis)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 do {
  if ($4) {
   $19 = $1;
  } else {
   $5 = ($3|0)>(44739241);
   if ($5) {
    HEAP32[$error>>2] = 64;
    $edge$1 = 0;
    HEAP32[$aedge>>2] = $edge$1;
    $35 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($35|0);
   }
   $6 = $3 >> 2;
   $7 = (($3) + 4)|0;
   $8 = (($7) + ($6))|0;
   $9 = ($6|0)<(-4);
   $10 = ($8|0)>(44739242);
   $or$cond = $9 | $10;
   $new_max$0 = $or$cond ? 44739242 : $8;
   $11 = ((($axis)) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_ft_mem_realloc($memory,48,$3,$new_max$0,$12,$error)|0);
   HEAP32[$11>>2] = $13;
   $14 = HEAP32[$error>>2]|0;
   $15 = ($14|0)==(0);
   if ($15) {
    HEAP32[$2>>2] = $new_max$0;
    $$pr = HEAP32[$0>>2]|0;
    $19 = $$pr;
    break;
   } else {
    $edge$1 = 0;
    HEAP32[$aedge>>2] = $edge$1;
    $35 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($35|0);
   }
  }
 } while(0);
 $16 = ((($axis)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + (($19*48)|0)|0);
 $20 = ((($axis)) + 24|0);
 $21 = ($19|0)>(0);
 L11: do {
  if ($21) {
   $edge$01 = $18;
   while(1) {
    $22 = ((($edge$01)) + -48|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = $23 << 16 >> 16;
    $25 = ($24|0)<($fpos|0);
    if ($25) {
     $edge$0$lcssa = $edge$01;
     break L11;
    }
    $26 = ($24|0)==($fpos|0);
    if ($26) {
     $27 = HEAP32[$20>>2]|0;
     $28 = ($27|0)==($dir|0);
     if ($28) {
      $edge$0$lcssa = $edge$01;
      break L11;
     }
    }
    dest=$edge$01; src=$22; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $29 = ($22>>>0)>($17>>>0);
    if ($29) {
     $edge$01 = $22;
    } else {
     $edge$0$lcssa = $22;
     break;
    }
   }
  } else {
   $edge$0$lcssa = $18;
  }
 } while(0);
 $30 = HEAP32[$0>>2]|0;
 $31 = (($30) + 1)|0;
 HEAP32[$0>>2] = $31;
 dest=$edge$0$lcssa; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $32 = $fpos&65535;
 HEAP16[$edge$0$lcssa>>1] = $32;
 $33 = $dir&255;
 $34 = ((($edge$0$lcssa)) + 13|0);
 HEAP8[$34>>0] = $33;
 $edge$1 = $edge$0$lcssa;
 HEAP32[$aedge>>2] = $edge$1;
 $35 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($35|0);
}
function _af_direction_compute($dx,$dy) {
 $dx = $dx|0;
 $dy = $dy|0;
 var $$ = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dir$0 = 0, $dir$0$ = 0, $dx$dy = 0, $dx$dy1 = 0, $dy$ = 0, $dy$dx = 0, $ll$0 = 0;
 var $ss$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dy|0)<($dx|0);
 $1 = (0 - ($dx))|0;
 $2 = ($dy|0)>=($1|0);
 if ($0) {
  $dx$dy1 = $2 ? $dx : $dy;
  $dy$dx = $2 ? $dy : $dx;
  $$2 = $2 ? 1 : -2;
  $dir$0 = $$2;$ll$0 = $dx$dy1;$ss$0 = $dy$dx;
 } else {
  $dy$ = $2 ? $dy : $1;
  $dx$dy = $2 ? $dx : $dy;
  $$ = $2 ? 2 : -1;
  $dir$0 = $$;$ll$0 = $dy$;$ss$0 = $dx$dy;
 }
 $3 = ($ss$0*14)|0;
 $4 = ($ll$0|0)<(0);
 $5 = (0 - ($ll$0))|0;
 $6 = $4 ? $5 : $ll$0;
 $7 = ($ss$0|0)<(0);
 $8 = (0 - ($3))|0;
 $9 = $7 ? $8 : $3;
 $10 = ($6|0)>($9|0);
 $dir$0$ = $10 ? $dir$0 : 4;
 return ($dir$0$|0);
}
function _af_glyph_hints_init($hints,$memory) {
 $hints = $hints|0;
 $memory = $memory|0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$hints; stop=dest+120|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$hints>>2] = $memory;
 return;
}
function _af_glyph_hints_done($hints) {
 $hints = $hints|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($hints|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$hints>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($hints)) + 44|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($hints)) + 48|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($hints)) + 52|0);
 $6 = HEAP32[$5>>2]|0;
 _ft_mem_free($1,$6);
 HEAP32[$5>>2] = 0;
 $7 = ((($hints)) + 56|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($hints)) + 60|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($hints)) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 _ft_mem_free($1,$10);
 HEAP32[$9>>2] = 0;
 $11 = ((($hints)) + 72|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($hints)) + 76|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($hints)) + 80|0);
 $14 = HEAP32[$13>>2]|0;
 _ft_mem_free($1,$14);
 HEAP32[$13>>2] = 0;
 $15 = ((($hints)) + 84|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($hints)) + 88|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($hints)) + 92|0);
 $18 = HEAP32[$17>>2]|0;
 _ft_mem_free($1,$18);
 HEAP32[$17>>2] = 0;
 $19 = ((($hints)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 _ft_mem_free($1,$20);
 HEAP32[$19>>2] = 0;
 $21 = ((($hints)) + 32|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($hints)) + 36|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($hints)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 _ft_mem_free($1,$24);
 HEAP32[$23>>2] = 0;
 $25 = ((($hints)) + 24|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($hints)) + 20|0);
 HEAP32[$26>>2] = 0;
 HEAP32[$hints>>2] = 0;
 return;
}
function _af_glyph_hints_rescale($hints,$metrics) {
 $hints = $hints|0;
 $metrics = $metrics|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hints)) + 108|0);
 HEAP32[$0>>2] = $metrics;
 $1 = ((($metrics)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($hints)) + 100|0);
 HEAP32[$3>>2] = $2;
 return;
}
function _af_glyph_hints_reload($hints,$outline) {
 $hints = $hints|0;
 $outline = $outline|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $contour$07 = 0, $contour_index$014 = 0, $contour_index$1 = 0, $end$012 = 0;
 var $end$1 = 0, $end1$08 = 0, $error = 0, $first$02 = 0, $first$1 = 0, $idx$09 = 0, $in_dir$05 = 0, $in_dir$1 = 0, $in_x$03 = 0, $in_x$1 = 0, $in_y$04 = 0, $in_y$1 = 0, $point$016 = 0, $point$16 = 0, $prev$013 = 0, $prev$1 = 0, $sext = 0, $sext1 = 0, $tag$011 = 0, $vec$015 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($hints)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($hints)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($hints)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($hints)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$hints>>2]|0;
 $9 = ((($hints)) + 24|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($hints)) + 36|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($hints)) + 44|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($hints)) + 56|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($hints)) + 72|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($hints)) + 84|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP16[$outline>>1]|0;
 $16 = $15 << 16 >> 16;
 $17 = ((($hints)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16>>>0)>($18>>>0);
 do {
  if ($19) {
   $20 = (($16) + 3)|0;
   $21 = $20 & -4;
   $22 = ((($hints)) + 40|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_ft_mem_realloc($8,4,$18,$21,$23,$error)|0);
   HEAP32[$22>>2] = $24;
   $25 = HEAP32[$error>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    HEAP32[$17>>2] = $21;
    break;
   } else {
    $175 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($175|0);
   }
  }
 } while(0);
 $27 = ((($outline)) + 2|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28 << 16 >> 16;
 $30 = (($29) + 2)|0;
 $31 = ((($hints)) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30>>>0)>($32>>>0);
 do {
  if ($33) {
   $34 = (($29) + 11)|0;
   $35 = $34 & -8;
   $36 = ((($hints)) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (_ft_mem_realloc($8,40,$32,$35,$37,$error)|0);
   HEAP32[$36>>2] = $38;
   $39 = HEAP32[$error>>2]|0;
   $40 = ($39|0)==(0);
   if ($40) {
    HEAP32[$31>>2] = $35;
    break;
   } else {
    $175 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($175|0);
   }
  }
 } while(0);
 $41 = HEAP16[$27>>1]|0;
 $42 = $41 << 16 >> 16;
 HEAP32[$9>>2] = $42;
 $43 = HEAP16[$outline>>1]|0;
 $44 = $43 << 16 >> 16;
 HEAP32[$10>>2] = $44;
 $45 = ((($hints)) + 68|0);
 HEAP32[$45>>2] = 2;
 $46 = ((($hints)) + 96|0);
 HEAP32[$46>>2] = -1;
 $47 = (_FT_Outline_Get_Orientation($outline)|0);
 $48 = ($47|0)==(1);
 if ($48) {
  HEAP32[$45>>2] = -2;
  HEAP32[$46>>2] = 1;
 }
 HEAP32[$0>>2] = $1;
 HEAP32[$2>>2] = $3;
 HEAP32[$4>>2] = $5;
 HEAP32[$6>>2] = $7;
 $49 = ((($hints)) + 112|0);
 HEAP32[$49>>2] = 0;
 $50 = ((($hints)) + 116|0);
 HEAP32[$50>>2] = 0;
 $51 = ((($hints)) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = HEAP32[$9>>2]|0;
 $54 = ($53|0)==(0);
 if ($54) {
  $175 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($175|0);
 }
 $55 = (($52) + (($53*40)|0)|0);
 $56 = ((($outline)) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP16[$57>>1]|0;
 $59 = $58 << 16 >> 16;
 $60 = (($52) + (($59*40)|0)|0);
 $61 = ($53|0)>(0);
 L19: do {
  if ($61) {
   $62 = ((($outline)) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($outline)) + 4|0);
   $65 = HEAP32[$64>>2]|0;
   $contour_index$014 = 0;$end$012 = $60;$point$016 = $52;$prev$013 = $60;$tag$011 = $63;$vec$015 = $65;
   while(1) {
    $66 = HEAP32[$vec$015>>2]|0;
    $67 = $66&65535;
    $68 = ((($point$016)) + 12|0);
    HEAP16[$68>>1] = $67;
    $69 = ((($vec$015)) + 4|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $70&65535;
    $72 = ((($point$016)) + 14|0);
    HEAP16[$72>>1] = $71;
    $73 = HEAP32[$vec$015>>2]|0;
    $74 = (_FT_MulFix($73,$1)|0);
    $75 = (($74) + ($5))|0;
    $76 = ((($point$016)) + 16|0);
    HEAP32[$76>>2] = $75;
    $77 = ((($point$016)) + 4|0);
    HEAP32[$77>>2] = $75;
    $78 = HEAP32[$69>>2]|0;
    $79 = (_FT_MulFix($78,$3)|0);
    $80 = (($79) + ($7))|0;
    $81 = ((($point$016)) + 20|0);
    HEAP32[$81>>2] = $80;
    $82 = ((($point$016)) + 8|0);
    HEAP32[$82>>2] = $80;
    $83 = HEAP8[$tag$011>>0]|0;
    $84 = $83&255;
    $85 = $84 & 3;
    switch ($85|0) {
    case 0:  {
     HEAP16[$point$016>>1] = 1;
     break;
    }
    case 2:  {
     HEAP16[$point$016>>1] = 2;
     break;
    }
    default: {
     HEAP16[$point$016>>1] = 0;
    }
    }
    $86 = ((($point$016)) + 36|0);
    HEAP32[$86>>2] = $prev$013;
    $87 = ((($prev$013)) + 32|0);
    HEAP32[$87>>2] = $point$016;
    $88 = ($point$016|0)==($end$012|0);
    if ($88) {
     $89 = (($contour_index$014) + 1)|0;
     $90 = HEAP16[$outline>>1]|0;
     $91 = $90 << 16 >> 16;
     $92 = ($89|0)<($91|0);
     if ($92) {
      $93 = HEAP32[$56>>2]|0;
      $94 = (($93) + ($89<<1)|0);
      $95 = HEAP16[$94>>1]|0;
      $96 = $95 << 16 >> 16;
      $97 = (($52) + (($96*40)|0)|0);
      $contour_index$1 = $89;$end$1 = $97;$prev$1 = $97;
     } else {
      $contour_index$1 = $89;$end$1 = $end$012;$prev$1 = $point$016;
     }
    } else {
     $contour_index$1 = $contour_index$014;$end$1 = $end$012;$prev$1 = $point$016;
    }
    $98 = ((($point$016)) + 40|0);
    $99 = ((($vec$015)) + 8|0);
    $100 = ((($tag$011)) + 1|0);
    $101 = ($98>>>0)<($55>>>0);
    if ($101) {
     $contour_index$014 = $contour_index$1;$end$012 = $end$1;$point$016 = $98;$prev$013 = $prev$1;$tag$011 = $100;$vec$015 = $99;
    } else {
     break L19;
    }
   }
  }
 } while(0);
 $102 = ((($hints)) + 40|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = HEAP32[$10>>2]|0;
 $105 = (($103) + ($104<<2)|0);
 $106 = ($104|0)>(0);
 if ($106) {
  $107 = HEAP32[$56>>2]|0;
  $contour$07 = $103;$end1$08 = $107;$idx$09 = 0;
  while(1) {
   $sext1 = $idx$09 << 16;
   $109 = $sext1 >> 16;
   $110 = (($52) + (($109*40)|0)|0);
   HEAP32[$contour$07>>2] = $110;
   $111 = HEAP16[$end1$08>>1]|0;
   $112 = $111 << 16 >> 16;
   $113 = (($112) + 1)|0;
   $114 = ((($contour$07)) + 4|0);
   $115 = ((($end1$08)) + 2|0);
   $116 = ($114>>>0)<($105>>>0);
   if ($116) {
    $contour$07 = $114;$end1$08 = $115;$idx$09 = $113;
   } else {
    break;
   }
  }
 }
 $108 = ($53|0)>(0);
 if ($108) {
  $first$02 = $52;$in_dir$05 = 4;$in_x$03 = 0;$in_y$04 = 0;$point$16 = $52;
 } else {
  $175 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($175|0);
 }
 while(1) {
  $117 = ($point$16|0)==($first$02|0);
  if ($117) {
   $118 = ((($first$02)) + 36|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ((($first$02)) + 12|0);
   $121 = HEAP16[$120>>1]|0;
   $122 = $121 << 16 >> 16;
   $123 = ((($119)) + 12|0);
   $124 = HEAP16[$123>>1]|0;
   $125 = $124 << 16 >> 16;
   $126 = (($122) - ($125))|0;
   $127 = ((($first$02)) + 14|0);
   $128 = HEAP16[$127>>1]|0;
   $129 = $128 << 16 >> 16;
   $130 = ((($119)) + 14|0);
   $131 = HEAP16[$130>>1]|0;
   $132 = $131 << 16 >> 16;
   $133 = (($129) - ($132))|0;
   $134 = (_af_direction_compute($126,$133)|0);
   $135 = ((($119)) + 40|0);
   $first$1 = $135;$in_dir$1 = $134;$in_x$1 = $126;$in_y$1 = $133;
  } else {
   $first$1 = $first$02;$in_dir$1 = $in_dir$05;$in_x$1 = $in_x$03;$in_y$1 = $in_y$04;
  }
  $136 = $in_dir$1&255;
  $137 = ((($point$16)) + 2|0);
  HEAP8[$137>>0] = $136;
  $138 = ((($point$16)) + 32|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ((($139)) + 12|0);
  $141 = HEAP16[$140>>1]|0;
  $142 = $141 << 16 >> 16;
  $143 = ((($point$16)) + 12|0);
  $144 = HEAP16[$143>>1]|0;
  $145 = $144 << 16 >> 16;
  $146 = (($142) - ($145))|0;
  $147 = ((($139)) + 14|0);
  $148 = HEAP16[$147>>1]|0;
  $149 = $148 << 16 >> 16;
  $150 = ((($point$16)) + 14|0);
  $151 = HEAP16[$150>>1]|0;
  $152 = $151 << 16 >> 16;
  $153 = (($149) - ($152))|0;
  $154 = (_af_direction_compute($146,$153)|0);
  $155 = $154&255;
  $156 = ((($point$16)) + 3|0);
  HEAP8[$156>>0] = $155;
  $157 = HEAP16[$point$16>>1]|0;
  $158 = $157 & 3;
  $159 = ($158<<16>>16)==(0);
  do {
   if ($159) {
    $sext = $154 << 24;
    $164 = $sext >> 24;
    $165 = HEAP8[$137>>0]|0;
    $166 = $165 << 24 >> 24;
    $167 = ($164|0)==($166|0);
    if (!($167)) {
     $171 = (0 - ($164))|0;
     $172 = ($166|0)==($171|0);
     if ($172) {
      label = 27;
      break;
     } else {
      break;
     }
    }
    $168 = ($164|0)==(4);
    if ($168) {
     $169 = (_ft_corner_is_flat($in_x$1,$in_y$1,$146,$153)|0);
     $170 = ($169|0)==(0);
     if (!($170)) {
      label = 27;
     }
    } else {
     label = 27;
    }
   } else {
    label = 27;
   }
  } while(0);
  if ((label|0) == 27) {
   label = 0;
   $160 = HEAP16[$point$16>>1]|0;
   $161 = $160&65535;
   $162 = $161 | 256;
   $163 = $162&65535;
   HEAP16[$point$16>>1] = $163;
  }
  $173 = ((($point$16)) + 40|0);
  $174 = ($173>>>0)<($55>>>0);
  if ($174) {
   $first$02 = $first$1;$in_dir$05 = $154;$in_x$03 = $146;$in_y$04 = $153;$point$16 = $173;
  } else {
   break;
  }
 }
 $175 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($175|0);
}
function _af_glyph_hints_save($hints,$outline) {
 $hints = $hints|0;
 $outline = $outline|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $point$01 = 0, $tag$03 = 0, $vec$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hints)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($hints)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*40)|0)|0);
 $5 = ($3|0)>(0);
 if (!($5)) {
  return;
 }
 $6 = ((($outline)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($outline)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $point$01 = $1;$tag$03 = $7;$vec$02 = $9;
 while(1) {
  $10 = ((($point$01)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$vec$02>>2] = $11;
  $12 = ((($point$01)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($vec$02)) + 4|0);
  HEAP32[$14>>2] = $13;
  $15 = HEAP16[$point$01>>1]|0;
  $16 = $15&65535;
  $17 = $16 & 1;
  $18 = ($17|0)==(0);
  do {
   if ($18) {
    $19 = $16 & 2;
    $20 = ($19|0)==(0);
    if ($20) {
     HEAP8[$tag$03>>0] = 1;
     break;
    } else {
     HEAP8[$tag$03>>0] = 2;
     break;
    }
   } else {
    HEAP8[$tag$03>>0] = 0;
   }
  } while(0);
  $21 = ((($point$01)) + 40|0);
  $22 = ((($vec$02)) + 8|0);
  $23 = ((($tag$03)) + 1|0);
  $24 = ($21>>>0)<($4>>>0);
  if ($24) {
   $point$01 = $21;$tag$03 = $23;$vec$02 = $22;
  } else {
   break;
  }
 }
 return;
}
function _af_glyph_hints_align_edge_points($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $point$0 = 0, $point$0$in = 0, $point2$0 = 0, $point2$0$in = 0, $seg$05 = 0, $seg$16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($hints)) + 44|0) + (($dim*28)|0)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*48)|0)|0);
 $5 = ($dim|0)==(0);
 $6 = ($3|0)>(0);
 if ($5) {
  if ($6) {
   $seg$05 = $1;
  } else {
   return;
  }
  while(1) {
   $7 = ((($seg$05)) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    $10 = ((($seg$05)) + 40|0);
    $11 = ((($seg$05)) + 44|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($8)) + 8|0);
    $point$0$in = $10;
    while(1) {
     $point$0 = HEAP32[$point$0$in>>2]|0;
     $14 = HEAP32[$13>>2]|0;
     $15 = ((($point$0)) + 16|0);
     HEAP32[$15>>2] = $14;
     $16 = HEAP16[$point$0>>1]|0;
     $17 = $16&65535;
     $18 = $17 | 64;
     $19 = $18&65535;
     HEAP16[$point$0>>1] = $19;
     $20 = ($point$0|0)==($12|0);
     $21 = ((($point$0)) + 32|0);
     if ($20) {
      break;
     } else {
      $point$0$in = $21;
     }
    }
   }
   $22 = ((($seg$05)) + 48|0);
   $23 = ($22>>>0)<($4>>>0);
   if ($23) {
    $seg$05 = $22;
   } else {
    break;
   }
  }
  return;
 } else {
  if ($6) {
   $seg$16 = $1;
  } else {
   return;
  }
  while(1) {
   $24 = ((($seg$16)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    $27 = ((($seg$16)) + 40|0);
    $28 = ((($seg$16)) + 44|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($25)) + 8|0);
    $point2$0$in = $27;
    while(1) {
     $point2$0 = HEAP32[$point2$0$in>>2]|0;
     $31 = HEAP32[$30>>2]|0;
     $32 = ((($point2$0)) + 20|0);
     HEAP32[$32>>2] = $31;
     $33 = HEAP16[$point2$0>>1]|0;
     $34 = $33&65535;
     $35 = $34 | 128;
     $36 = $35&65535;
     HEAP16[$point2$0>>1] = $36;
     $37 = ($point2$0|0)==($29|0);
     $38 = ((($point2$0)) + 32|0);
     if ($37) {
      break;
     } else {
      $point2$0$in = $38;
     }
    }
   }
   $39 = ((($seg$16)) + 48|0);
   $40 = ($39>>>0)<($4>>>0);
   if ($40) {
    $seg$16 = $39;
   } else {
    break;
   }
  }
  return;
 }
}
function _af_glyph_hints_align_strong_points($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $$ = 0, $$idx = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $$lcssa33 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $max$0 = 0, $max$0$lcssa32 = 0, $max$0$ph = 0, $min$0$ph = 0, $min$1 = 0, $nn$0$lcssa = 0, $nn$011 = 0, $or$cond = 0, $or$cond25 = 0;
 var $ou$0 = 0, $ou$0$in = 0, $point$014 = 0, $u$0 = 0, $u$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hints)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($hints)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*40)|0)|0);
 $5 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($dim|0)==(0);
 $$ = $9 ? 64 : 128;
 $10 = ($8|0)>(0);
 $11 = ($3|0)>(0);
 $or$cond25 = $10 & $11;
 if (!($or$cond25)) {
  return;
 }
 $12 = ($dim|0)==(1);
 $$sum = (($8) + -1)|0;
 $13 = (($6) + (($$sum*48)|0)|0);
 $$idx = ($8*48)|0;
 $14 = (($$idx|0) / 48)&-1;
 $15 = ($$idx|0)<(432);
 $16 = ($$idx|0)>(0);
 $17 = (((($6) + (($$sum*48)|0)|0)) + 8|0);
 $18 = (((($6) + (($$sum*48)|0)|0)) + 4|0);
 $19 = ((($6)) + 8|0);
 $20 = ((($6)) + 4|0);
 $point$014 = $1;
 while(1) {
  $21 = HEAP16[$point$014>>1]|0;
  $22 = $21&65535;
  $23 = $22 & $$;
  $24 = ($23|0)!=(0);
  $25 = $22 & 768;
  $26 = ($25|0)==(256);
  $or$cond = $24 | $26;
  if (!($or$cond)) {
   if ($12) {
    $27 = ((($point$014)) + 14|0);
    $28 = HEAP16[$27>>1]|0;
    $29 = $28 << 16 >> 16;
    $30 = ((($point$014)) + 8|0);
    $ou$0$in = $30;$u$0 = $29;
   } else {
    $31 = ((($point$014)) + 12|0);
    $32 = HEAP16[$31>>1]|0;
    $33 = $32 << 16 >> 16;
    $34 = ((($point$014)) + 4|0);
    $ou$0$in = $34;$u$0 = $33;
   }
   $ou$0 = HEAP32[$ou$0$in>>2]|0;
   $35 = HEAP16[$6>>1]|0;
   $36 = $35 << 16 >> 16;
   $37 = ($36|0)<($u$0|0);
   L12: do {
    if ($37) {
     $42 = HEAP16[$13>>1]|0;
     $43 = $42 << 16 >> 16;
     $44 = ($u$0|0)<($43|0);
     if (!($44)) {
      $45 = HEAP32[$17>>2]|0;
      $46 = HEAP32[$18>>2]|0;
      $47 = (($45) + ($ou$0))|0;
      $48 = (($47) - ($46))|0;
      $u$1 = $48;
      break;
     }
     L17: do {
      if ($15) {
       L19: do {
        if ($16) {
         $nn$011 = 0;
         while(1) {
          $49 = (($6) + (($nn$011*48)|0)|0);
          $50 = HEAP16[$49>>1]|0;
          $51 = $50 << 16 >> 16;
          $52 = ($51|0)<($u$0|0);
          if (!($52)) {
           $nn$0$lcssa = $nn$011;
           break L19;
          }
          $53 = (($nn$011) + 1)|0;
          $54 = ($53|0)<($14|0);
          if ($54) {
           $nn$011 = $53;
          } else {
           $nn$0$lcssa = $53;
           break;
          }
         }
        } else {
         $nn$0$lcssa = 0;
        }
       } while(0);
       $55 = (($6) + (($nn$0$lcssa*48)|0)|0);
       $56 = HEAP16[$55>>1]|0;
       $57 = $56 << 16 >> 16;
       $58 = ($57|0)==($u$0|0);
       if ($58) {
        $59 = (((($6) + (($nn$0$lcssa*48)|0)|0)) + 8|0);
        $60 = HEAP32[$59>>2]|0;
        $u$1 = $60;
        break L12;
       } else {
        $min$1 = $nn$0$lcssa;
       }
      } else {
       $max$0$ph = $14;$min$0$ph = 0;
       while(1) {
        $max$0 = $max$0$ph;
        while(1) {
         $61 = ($min$0$ph|0)<($max$0|0);
         if (!($61)) {
          $min$1 = $min$0$ph;
          break L17;
         }
         $62 = (($max$0) + ($min$0$ph))|0;
         $63 = $62 >> 1;
         $64 = (($6) + (($63*48)|0)|0);
         $65 = HEAP16[$64>>1]|0;
         $66 = $65 << 16 >> 16;
         $67 = ($u$0|0)<($66|0);
         if ($67) {
          $max$0 = $63;
         } else {
          $$lcssa = $63;$$lcssa33 = $66;$max$0$lcssa32 = $max$0;
          break;
         }
        }
        $68 = ($u$0|0)>($$lcssa33|0);
        if (!($68)) {
         $$lcssa$lcssa = $$lcssa;
         break;
        }
        $69 = (($$lcssa) + 1)|0;
        $max$0$ph = $max$0$lcssa32;$min$0$ph = $69;
       }
       $70 = (((($6) + (($$lcssa$lcssa*48)|0)|0)) + 8|0);
       $71 = HEAP32[$70>>2]|0;
       $u$1 = $71;
       break L12;
      }
     } while(0);
     $$sum1 = (($min$1) + -1)|0;
     $72 = (($6) + (($$sum1*48)|0)|0);
     $73 = (((($6) + (($$sum1*48)|0)|0)) + 16|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($74|0)==(0);
     if ($75) {
      $76 = (((($6) + (($min$1*48)|0)|0)) + 8|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (((($6) + (($$sum1*48)|0)|0)) + 8|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) - ($79))|0;
      $81 = (($6) + (($min$1*48)|0)|0);
      $82 = HEAP16[$81>>1]|0;
      $83 = $82 << 16 >> 16;
      $84 = HEAP16[$72>>1]|0;
      $85 = $84 << 16 >> 16;
      $86 = (($83) - ($85))|0;
      $87 = (_FT_DivFix($80,$86)|0);
      HEAP32[$73>>2] = $87;
     }
     $88 = (((($6) + (($$sum1*48)|0)|0)) + 8|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = HEAP16[$72>>1]|0;
     $91 = $90 << 16 >> 16;
     $92 = (($u$0) - ($91))|0;
     $93 = HEAP32[$73>>2]|0;
     $94 = (_FT_MulFix($92,$93)|0);
     $95 = (($94) + ($89))|0;
     $u$1 = $95;
    } else {
     $38 = HEAP32[$19>>2]|0;
     $39 = HEAP32[$20>>2]|0;
     $40 = (($38) + ($ou$0))|0;
     $41 = (($40) - ($39))|0;
     $u$1 = $41;
    }
   } while(0);
   if ($9) {
    $96 = ((($point$014)) + 16|0);
    HEAP32[$96>>2] = $u$1;
   } else {
    $97 = ((($point$014)) + 20|0);
    HEAP32[$97>>2] = $u$1;
   }
   $98 = HEAP16[$point$014>>1]|0;
   $99 = $98&65535;
   $100 = $99 | $$;
   $101 = $100&65535;
   HEAP16[$point$014>>1] = $101;
  }
  $102 = ((($point$014)) + 40|0);
  $103 = ($102>>>0)<($4>>>0);
  if ($103) {
   $point$014 = $102;
  } else {
   break;
  }
 }
 return;
}
function _af_glyph_hints_align_weak_points($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $$lcssa = 0, $$ph = 0, $$ph86 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $49$phi = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $contour$025 = 0, $point$029 = 0, $point$131 = 0;
 var $point$216 = 0, $point$216$lcssa = 0, $point$3 = 0, $point$382 = 0, $point$418 = 0, $point$418$lcssa = 0, $point$513 = 0, $point$614 = 0, $touch_flag$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hints)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($hints)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*40)|0)|0);
 $5 = ((($hints)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($hints)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + ($8<<2)|0);
 $10 = ($dim|0)==(0);
 $11 = ($3|0)>(0);
 if ($10) {
  if ($11) {
   $point$029 = $1;
   while(1) {
    $12 = ((($point$029)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($point$029)) + 24|0);
    HEAP32[$14>>2] = $13;
    $15 = ((($point$029)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($point$029)) + 28|0);
    HEAP32[$17>>2] = $16;
    $18 = ((($point$029)) + 40|0);
    $19 = ($18>>>0)<($4>>>0);
    if ($19) {
     $point$029 = $18;
    } else {
     $touch_flag$0 = 64;
     break;
    }
   }
  } else {
   $touch_flag$0 = 64;
  }
 } else {
  if ($11) {
   $point$131 = $1;
   while(1) {
    $20 = ((($point$131)) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($point$131)) + 24|0);
    HEAP32[$22>>2] = $21;
    $23 = ((($point$131)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($point$131)) + 28|0);
    HEAP32[$25>>2] = $24;
    $26 = ((($point$131)) + 40|0);
    $27 = ($26>>>0)<($4>>>0);
    if ($27) {
     $point$131 = $26;
    } else {
     $touch_flag$0 = 128;
     break;
    }
   }
  } else {
   $touch_flag$0 = 128;
  }
 }
 $28 = ($8|0)>(0);
 if ($28) {
  $contour$025 = $6;
  while(1) {
   $29 = HEAP32[$contour$025>>2]|0;
   $30 = ((($29)) + 36|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($29>>>0)>($31>>>0);
   L12: do {
    if (!($32)) {
     $point$216 = $29;
     while(1) {
      $33 = HEAP16[$point$216>>1]|0;
      $34 = $33&65535;
      $35 = $34 & $touch_flag$0;
      $36 = ($35|0)==(0);
      if (!($36)) {
       $point$216$lcssa = $point$216;
       break;
      }
      $37 = ((($point$216)) + 40|0);
      $38 = ($37>>>0)>($31>>>0);
      if ($38) {
       break L12;
      } else {
       $point$216 = $37;
      }
     }
     $point$3 = $point$216$lcssa;
     L17: while(1) {
      $39 = ($point$3>>>0)<($31>>>0);
      if ($39) {
       $41 = ((($point$3)) + 40|0);
       $42 = HEAP16[$41>>1]|0;
       $43 = $42&65535;
       $44 = $43 & $touch_flag$0;
       $45 = ($44|0)==(0);
       $46 = ((($point$3)) + 40|0);
       if ($45) {
        $$ph = $46;
       } else {
        $point$3 = $46;
        continue;
       }
      } else {
       $40 = ((($point$3)) + 40|0);
       $$ph = $40;
      }
      $47 = ($$ph>>>0)>($31>>>0);
      if ($47) {
       $$ph86 = $$ph;$72 = $39;$point$382 = $point$3;
       break;
      } else {
       $49 = $point$3;$point$418 = $$ph;
      }
      while(1) {
       $48 = ((($49)) + 40|0);
       $50 = HEAP16[$48>>1]|0;
       $51 = $50&65535;
       $52 = $51 & $touch_flag$0;
       $53 = ($52|0)==(0);
       if (!($53)) {
        $$lcssa = $49;$point$418$lcssa = $point$418;
        break;
       }
       $54 = ((($point$418)) + 40|0);
       $55 = ($54>>>0)>($31>>>0);
       if ($55) {
        $$ph86 = $$ph;$72 = $39;$point$382 = $point$3;
        break L17;
       } else {
        $49$phi = $point$418;$point$418 = $54;$49 = $49$phi;
       }
      }
      _af_iup_interp($$ph,$$lcssa,$point$3,$point$418$lcssa);
      $point$3 = $point$418$lcssa;
     }
     $56 = ($point$382|0)==($point$216$lcssa|0);
     if ($56) {
      _af_iup_shift($29,$31,$point$216$lcssa);
      break;
     }
     if ($72) {
      _af_iup_interp($$ph86,$31,$point$382,$point$216$lcssa);
     }
     $57 = ($point$216$lcssa>>>0)>($1>>>0);
     if ($57) {
      $58 = ((($point$216$lcssa)) + -40|0);
      _af_iup_interp($29,$58,$point$382,$point$216$lcssa);
     }
    }
   } while(0);
   $59 = ((($contour$025)) + 4|0);
   $60 = ($59>>>0)<($9>>>0);
   if ($60) {
    $contour$025 = $59;
   } else {
    break;
   }
  }
 }
 $61 = ($3|0)>(0);
 if ($10) {
  if ($61) {
   $point$513 = $1;
  } else {
   return;
  }
  while(1) {
   $62 = ((($point$513)) + 24|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ((($point$513)) + 16|0);
   HEAP32[$64>>2] = $63;
   $65 = ((($point$513)) + 40|0);
   $66 = ($65>>>0)<($4>>>0);
   if ($66) {
    $point$513 = $65;
   } else {
    break;
   }
  }
  return;
 } else {
  if ($61) {
   $point$614 = $1;
  } else {
   return;
  }
  while(1) {
   $67 = ((($point$614)) + 24|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($point$614)) + 20|0);
   HEAP32[$69>>2] = $68;
   $70 = ((($point$614)) + 40|0);
   $71 = ($70>>>0)<($4>>>0);
   if ($71) {
    $point$614 = $70;
   } else {
    break;
   }
  }
  return;
 }
}
function _af_iup_interp($p1,$p2,$ref1,$ref2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 $ref1 = $ref1|0;
 $ref2 = $ref2|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$05 = 0, $p$16 = 0, $p$28 = 0, $u$0 = 0, $u$1 = 0, $u$2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ref1)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ref2)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($ref1)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($1))|0;
 $7 = ((($ref2)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($3))|0;
 $10 = ($p1>>>0)>($p2>>>0);
 if ($10) {
  return;
 }
 $11 = ($3|0)==($1|0);
 if ($11) {
  $12 = ($p1>>>0)>($p2>>>0);
  if ($12) {
   return;
  } else {
   $p$05 = $p1;
  }
  while(1) {
   $13 = ((($p$05)) + 28|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)>($1|0);
   $$ = $15 ? $9 : $6;
   $u$0 = (($$) + ($14))|0;
   $16 = ((($p$05)) + 24|0);
   HEAP32[$16>>2] = $u$0;
   $17 = ((($p$05)) + 40|0);
   $18 = ($17>>>0)>($p2>>>0);
   if ($18) {
    break;
   } else {
    $p$05 = $17;
   }
  }
  return;
 }
 $19 = ($3|0)>($1|0);
 $20 = ($p1>>>0)>($p2>>>0);
 if ($19) {
  if ($20) {
   return;
  }
  $22 = (($3) - ($1))|0;
  $p$16 = $p1;
  while(1) {
   $23 = ((($p$16)) + 28|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)>($1|0);
   do {
    if ($25) {
     $27 = ($24|0)<($3|0);
     if ($27) {
      $29 = HEAP32[$4>>2]|0;
      $30 = (($24) - ($1))|0;
      $31 = HEAP32[$7>>2]|0;
      $32 = (($31) - ($29))|0;
      $33 = (_FT_MulDiv($30,$32,$22)|0);
      $34 = (($33) + ($29))|0;
      $u$1 = $34;
      break;
     } else {
      $28 = (($24) + ($9))|0;
      $u$1 = $28;
      break;
     }
    } else {
     $26 = (($24) + ($6))|0;
     $u$1 = $26;
    }
   } while(0);
   $35 = ((($p$16)) + 24|0);
   HEAP32[$35>>2] = $u$1;
   $36 = ((($p$16)) + 40|0);
   $37 = ($36>>>0)>($p2>>>0);
   if ($37) {
    break;
   } else {
    $p$16 = $36;
   }
  }
  return;
 } else {
  if ($20) {
   return;
  }
  $21 = (($3) - ($1))|0;
  $p$28 = $p1;
  while(1) {
   $38 = ((($p$28)) + 28|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)>($3|0);
   do {
    if ($40) {
     $42 = ($39|0)<($1|0);
     if ($42) {
      $44 = HEAP32[$4>>2]|0;
      $45 = (($39) - ($1))|0;
      $46 = HEAP32[$7>>2]|0;
      $47 = (($46) - ($44))|0;
      $48 = (_FT_MulDiv($45,$47,$21)|0);
      $49 = (($48) + ($44))|0;
      $u$2 = $49;
      break;
     } else {
      $43 = (($39) + ($6))|0;
      $u$2 = $43;
      break;
     }
    } else {
     $41 = (($39) + ($9))|0;
     $u$2 = $41;
    }
   } while(0);
   $50 = ((($p$28)) + 24|0);
   HEAP32[$50>>2] = $u$2;
   $51 = ((($p$28)) + 40|0);
   $52 = ($51>>>0)>($p2>>>0);
   if ($52) {
    break;
   } else {
    $p$28 = $51;
   }
  }
  return;
 }
}
function _af_iup_shift($p1,$p2,$ref) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 $ref = $ref|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$05 = 0;
 var $p$1 = 0, $p$12 = 0, $p$14 = 0, $ref$pn3 = 0, $ref$pn3$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ref)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($ref)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($1|0)==($3|0);
 if ($5) {
  return;
 }
 $6 = ($p1>>>0)<($ref>>>0);
 if ($6) {
  $p$05 = $p1;
  while(1) {
   $8 = ((($p$05)) + 28|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + ($4))|0;
   $11 = ((($p$05)) + 24|0);
   HEAP32[$11>>2] = $10;
   $12 = ((($p$05)) + 40|0);
   $13 = ($12>>>0)<($ref>>>0);
   if ($13) {
    $p$05 = $12;
   } else {
    break;
   }
  }
 }
 $p$12 = ((($ref)) + 40|0);
 $7 = ($p$12>>>0)>($p2>>>0);
 if ($7) {
  return;
 } else {
  $p$14 = $p$12;$ref$pn3 = $ref;
 }
 while(1) {
  $14 = ((($ref$pn3)) + 68|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($4))|0;
  $17 = ((($ref$pn3)) + 64|0);
  HEAP32[$17>>2] = $16;
  $p$1 = ((($p$14)) + 40|0);
  $18 = ($p$1>>>0)>($p2>>>0);
  if ($18) {
   break;
  } else {
   $ref$pn3$phi = $p$14;$p$14 = $p$1;$ref$pn3 = $ref$pn3$phi;
  }
 }
 return;
}
function _FT_Get_Advance($face,$gindex,$flags,$padvance) {
 $face = $face|0;
 $gindex = $gindex|0;
 $flags = $flags|0;
 $padvance = $padvance|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $$0 = 35;
  return ($$0|0);
 }
 $1 = ((($face)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)>($gindex>>>0);
 if (!($3)) {
  $$0 = 16;
  return ($$0|0);
 }
 $4 = ((($face)) + 96|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 92|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 L7: do {
  if (!($10)) {
   $11 = $flags & 3;
   $12 = ($11|0)!=(0);
   $13 = $flags & 983040;
   $14 = ($13|0)==(65536);
   $or$cond = $12 | $14;
   if ($or$cond) {
    $15 = (FUNCTION_TABLE_iiiiii[$9 & 63]($face,$gindex,1,$flags,$padvance)|0);
    switch ($15|0) {
    case 7:  {
     break L7;
     break;
    }
    case 0:  {
     break;
    }
    default: {
     $$0 = $15;
     return ($$0|0);
    }
    }
    $16 = (__ft_face_scale_advances($face,$padvance,1,$flags)|0);
    $$0 = $16;
    return ($$0|0);
   }
  }
 } while(0);
 $17 = (_FT_Get_Advances($face,$gindex,1,$flags,$padvance)|0);
 $$0 = $17;
 return ($$0|0);
}
function _FT_Get_Advances($face,$start,$count,$flags,$padvances) {
 $face = $face|0;
 $start = $start|0;
 $count = $count|0;
 $flags = $flags|0;
 $padvances = $padvances|0;
 var $$0 = 0, $$sink = 0, $$sink$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $nn$04 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $$0 = 35;
  return ($$0|0);
 }
 $1 = ((($face)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($count) + ($start))|0;
 $4 = ($2>>>0)<=($start>>>0);
 $5 = ($3>>>0)<($start>>>0);
 $or$cond = $5 | $4;
 $6 = ($3>>>0)>($2>>>0);
 $or$cond1 = $6 | $or$cond;
 if ($or$cond1) {
  $$0 = 16;
  return ($$0|0);
 }
 $7 = ($count|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($face)) + 96|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 92|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 L10: do {
  if (!($14)) {
   $15 = $flags & 3;
   $16 = ($15|0)!=(0);
   $17 = $flags & 983040;
   $18 = ($17|0)==(65536);
   $or$cond3 = $16 | $18;
   if ($or$cond3) {
    $19 = (FUNCTION_TABLE_iiiiii[$13 & 63]($face,$start,$count,$flags,$padvances)|0);
    switch ($19|0) {
    case 7:  {
     break L10;
     break;
    }
    case 0:  {
     break;
    }
    default: {
     $$0 = $19;
     return ($$0|0);
    }
    }
    $20 = (__ft_face_scale_advances($face,$padvances,$count,$flags)|0);
    $$0 = $20;
    return ($$0|0);
   }
  }
 } while(0);
 $21 = $flags & 536870912;
 $22 = ($21|0)==(0);
 if (!($22)) {
  $$0 = 7;
  return ($$0|0);
 }
 $23 = $flags | 256;
 $24 = $flags & 16;
 $25 = ($24|0)==(0);
 $26 = ((($face)) + 84|0);
 $nn$04 = 0;
 while(1) {
  $27 = (($nn$04) + ($start))|0;
  $28 = (_FT_Load_Glyph($face,$27,$23)|0);
  $29 = ($28|0)==(0);
  if (!($29)) {
   $$0 = $28;
   label = 12;
   break;
  }
  $30 = HEAP32[$26>>2]|0;
  $31 = ((($30)) + 68|0);
  $32 = ((($30)) + 64|0);
  $$sink$in = $25 ? $32 : $31;
  $$sink = HEAP32[$$sink$in>>2]|0;
  $33 = $$sink << 10;
  $34 = (($padvances) + ($nn$04<<2)|0);
  HEAP32[$34>>2] = $33;
  $35 = (($nn$04) + 1)|0;
  $36 = ($35>>>0)<($count>>>0);
  if ($36) {
   $nn$04 = $35;
  } else {
   $$0 = 0;
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  return ($$0|0);
 }
 return (0)|0;
}
function __ft_face_scale_advances($face,$advances,$count,$flags) {
 $face = $face|0;
 $advances = $advances|0;
 $count = $count|0;
 $flags = $flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $nn$01 = 0, $scale$0 = 0, $scale$0$in = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $flags & 1;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($face)) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 36;
  return ($$0|0);
 }
 $5 = $flags & 16;
 $6 = ($5|0)==(0);
 $7 = ((($3)) + 20|0);
 $8 = ((($3)) + 16|0);
 $scale$0$in = $6 ? $8 : $7;
 $scale$0 = HEAP32[$scale$0$in>>2]|0;
 $9 = ($count|0)==(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $nn$01 = 0;
 }
 while(1) {
  $10 = (($advances) + ($nn$01<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_FT_MulDiv($11,$scale$0,64)|0);
  HEAP32[$10>>2] = $12;
  $13 = (($nn$01) + 1)|0;
  $exitcond = ($13|0)==($count|0);
  if ($exitcond) {
   $$0 = 0;
   break;
  } else {
   $nn$01 = $13;
  }
 }
 return ($$0|0);
}
function _af_dummy_hints_init($hints,$metrics) {
 $hints = $hints|0;
 $metrics = $metrics|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _af_glyph_hints_rescale($hints,$metrics);
 return 0;
}
function _af_dummy_hints_apply($hints,$outline) {
 $hints = $hints|0;
 $outline = $outline|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _af_indic_metrics_init($metrics,$face) {
 $metrics = $metrics|0;
 $face = $face|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 68|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($metrics)) + 36|0);
 HEAP32[$5>>2] = $4;
 $6 = (_FT_Select_Charmap($face,1970170211)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  _af_cjk_metrics_init_widths($metrics,$face,30000);
  _af_cjk_metrics_check_digits($metrics,$face);
  (_FT_Set_Charmap($face,$1)|0);
  return 0;
 } else {
  HEAP32[$0>>2] = 0;
  (_FT_Set_Charmap($face,$1)|0);
  return 0;
 }
 return (0)|0;
}
function _af_indic_metrics_scale($metrics,$scaler) {
 $metrics = $metrics|0;
 $scaler = $scaler|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _af_cjk_metrics_scale($metrics,$scaler);
 return;
}
function _af_indic_hints_init($hints,$metrics) {
 $hints = $hints|0;
 $metrics = $metrics|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_af_cjk_hints_init($hints,$metrics)|0);
 return ($0|0);
}
function _af_indic_hints_apply($hints,$outline,$metrics) {
 $hints = $hints|0;
 $outline = $outline|0;
 $metrics = $metrics|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_af_cjk_hints_apply($hints,$outline,$metrics)|0);
 return ($0|0);
}
function _af_latin_metrics_init_widths($metrics,$face,$charcode) {
 $metrics = $metrics|0;
 $face = $face|0;
 $charcode = $charcode|0;
 var $$ = 0, $$$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dummy = 0, $hints = 0;
 var $num_widths$0$lcssa = 0, $num_widths$0$lcssa$1 = 0, $num_widths$04 = 0, $num_widths$04$1 = 0, $num_widths$1 = 0, $num_widths$1$1 = 0, $or$cond = 0, $or$cond$1 = 0, $seg$03 = 0, $seg$03$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 960|0;
 $hints = sp + 832|0;
 $dummy = sp;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 _af_glyph_hints_init($hints,$1);
 $2 = ((($metrics)) + 48|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($metrics)) + 444|0);
 HEAP32[$3>>2] = 0;
 $4 = (_FT_Get_Char_Index($face,$charcode)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = (_FT_Load_Glyph($face,$4,1)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = ((($face)) + 84|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 110|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = ($11<<16>>16)<(1);
   if (!($12)) {
    _memset(($dummy|0),0,832)|0;
    $13 = ((($metrics)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($dummy)) + 36|0);
    HEAP32[$15>>2] = $14;
    $16 = ((($dummy)) + 8|0);
    HEAP32[$16>>2] = 65536;
    $17 = ((($dummy)) + 12|0);
    HEAP32[$17>>2] = 65536;
    $18 = ((($dummy)) + 16|0);
    HEAP32[$18>>2] = 0;
    $19 = ((($dummy)) + 20|0);
    HEAP32[$19>>2] = 0;
    $20 = ((($dummy)) + 4|0);
    HEAP32[$20>>2] = $face;
    $21 = ((($dummy)) + 24|0);
    HEAP32[$21>>2] = 0;
    $22 = ((($dummy)) + 28|0);
    HEAP32[$22>>2] = 0;
    _af_glyph_hints_rescale($hints,$dummy);
    $23 = HEAP32[$8>>2]|0;
    $24 = ((($23)) + 108|0);
    $25 = (_af_glyph_hints_reload($hints,$24)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     $27 = (_af_latin_hints_compute_segments($hints,0)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      _af_latin_hints_link_segments($hints,0);
      $29 = ((($hints)) + 52|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ((($hints)) + 44|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($30) + (($32*48)|0)|0);
      $34 = ($32|0)>(0);
      if ($34) {
       $num_widths$04 = 0;$seg$03 = $30;
       while(1) {
        $35 = ((($seg$03)) + 20|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = ($36|0)==(0|0);
        if ($37) {
         $num_widths$1 = $num_widths$04;
        } else {
         $38 = ((($36)) + 20|0);
         $39 = HEAP32[$38>>2]|0;
         $40 = ($39|0)==($seg$03|0);
         $41 = ($36>>>0)>($seg$03>>>0);
         $or$cond = $41 & $40;
         if ($or$cond) {
          $42 = ((($seg$03)) + 2|0);
          $43 = HEAP16[$42>>1]|0;
          $44 = $43 << 16 >> 16;
          $45 = ((($36)) + 2|0);
          $46 = HEAP16[$45>>1]|0;
          $47 = $46 << 16 >> 16;
          $48 = (($44) - ($47))|0;
          $49 = ($num_widths$04>>>0)<(16);
          if ($49) {
           $50 = ($48|0)<(0);
           $51 = (0 - ($48))|0;
           $$ = $50 ? $51 : $48;
           $52 = (($num_widths$04) + 1)|0;
           $53 = (((($metrics)) + 52|0) + (($num_widths$04*12)|0)|0);
           HEAP32[$53>>2] = $$;
           $num_widths$1 = $52;
          } else {
           $num_widths$1 = $num_widths$04;
          }
         } else {
          $num_widths$1 = $num_widths$04;
         }
        }
        $54 = ((($seg$03)) + 48|0);
        $55 = ($54>>>0)<($33>>>0);
        if ($55) {
         $num_widths$04 = $num_widths$1;$seg$03 = $54;
        } else {
         $num_widths$0$lcssa = $num_widths$1;
         break;
        }
       }
      } else {
       $num_widths$0$lcssa = 0;
      }
      $56 = ((($metrics)) + 52|0);
      _af_sort_widths($num_widths$0$lcssa,$56);
      $57 = ((($metrics)) + 48|0);
      HEAP32[$57>>2] = $num_widths$0$lcssa;
      $58 = (_af_latin_hints_compute_segments($hints,1)|0);
      $59 = ($58|0)==(0);
      if ($59) {
       _af_latin_hints_link_segments($hints,1);
       $87 = ((($hints)) + 80|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = ((($hints)) + 72|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = (($88) + (($90*48)|0)|0);
       $92 = ($90|0)>(0);
       if ($92) {
        $num_widths$04$1 = 0;$seg$03$1 = $88;
        while(1) {
         $93 = ((($seg$03$1)) + 20|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = ($94|0)==(0|0);
         if ($95) {
          $num_widths$1$1 = $num_widths$04$1;
         } else {
          $96 = ((($94)) + 20|0);
          $97 = HEAP32[$96>>2]|0;
          $98 = ($97|0)==($seg$03$1|0);
          $99 = ($94>>>0)>($seg$03$1>>>0);
          $or$cond$1 = $99 & $98;
          if ($or$cond$1) {
           $100 = ((($seg$03$1)) + 2|0);
           $101 = HEAP16[$100>>1]|0;
           $102 = $101 << 16 >> 16;
           $103 = ((($94)) + 2|0);
           $104 = HEAP16[$103>>1]|0;
           $105 = $104 << 16 >> 16;
           $106 = (($102) - ($105))|0;
           $107 = ($num_widths$04$1>>>0)<(16);
           if ($107) {
            $108 = ($106|0)<(0);
            $109 = (0 - ($106))|0;
            $$$1 = $108 ? $109 : $106;
            $110 = (($num_widths$04$1) + 1)|0;
            $111 = (((($metrics)) + 448|0) + (($num_widths$04$1*12)|0)|0);
            HEAP32[$111>>2] = $$$1;
            $num_widths$1$1 = $110;
           } else {
            $num_widths$1$1 = $num_widths$04$1;
           }
          } else {
           $num_widths$1$1 = $num_widths$04$1;
          }
         }
         $112 = ((($seg$03$1)) + 48|0);
         $113 = ($112>>>0)<($91>>>0);
         if ($113) {
          $num_widths$04$1 = $num_widths$1$1;$seg$03$1 = $112;
         } else {
          $num_widths$0$lcssa$1 = $num_widths$1$1;
          break;
         }
        }
       } else {
        $num_widths$0$lcssa$1 = 0;
       }
       $114 = ((($metrics)) + 448|0);
       _af_sort_widths($num_widths$0$lcssa$1,$114);
       $115 = ((($metrics)) + 444|0);
       HEAP32[$115>>2] = $num_widths$0$lcssa$1;
      }
     }
    }
   }
  }
 }
 $60 = ((($metrics)) + 36|0);
 $61 = ((($metrics)) + 48|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)==(0);
 if ($63) {
  $66 = HEAP32[$60>>2]|0;
  $67 = ($66*50)|0;
  $68 = (($67|0) / 2048)&-1;
  $70 = $68;
 } else {
  $64 = ((($metrics)) + 52|0);
  $65 = HEAP32[$64>>2]|0;
  $70 = $65;
 }
 $69 = (($70|0) / 5)&-1;
 $71 = ((($metrics)) + 244|0);
 HEAP32[$71>>2] = $69;
 $72 = ((($metrics)) + 248|0);
 HEAP32[$72>>2] = $70;
 $73 = ((($metrics)) + 252|0);
 HEAP8[$73>>0] = 0;
 $74 = ((($metrics)) + 444|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)==(0);
 if ($76) {
  $79 = HEAP32[$60>>2]|0;
  $80 = ($79*50)|0;
  $81 = (($80|0) / 2048)&-1;
  $83 = $81;
  $82 = (($83|0) / 5)&-1;
  $84 = ((($metrics)) + 640|0);
  HEAP32[$84>>2] = $82;
  $85 = ((($metrics)) + 644|0);
  HEAP32[$85>>2] = $83;
  $86 = ((($metrics)) + 648|0);
  HEAP8[$86>>0] = 0;
  _af_glyph_hints_done($hints);
  STACKTOP = sp;return;
 } else {
  $77 = ((($metrics)) + 448|0);
  $78 = HEAP32[$77>>2]|0;
  $83 = $78;
  $82 = (($83|0) / 5)&-1;
  $84 = ((($metrics)) + 640|0);
  HEAP32[$84>>2] = $82;
  $85 = ((($metrics)) + 644|0);
  HEAP32[$85>>2] = $83;
  $86 = ((($metrics)) + 648|0);
  HEAP8[$86>>0] = 0;
  _af_glyph_hints_done($hints);
  STACKTOP = sp;return;
 }
}
function _af_latin_hints_compute_segments($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $$ = 0, $$lcssa = 0, $$min_pos$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $contour$014 = 0, $error$4 = 0;
 var $max_pos$0 = 0, $max_pos$1 = 0, $max_pos$2 = 0, $max_pos$3 = 0, $max_pos$4 = 0, $min_pos$0 = 0, $min_pos$3 = 0, $min_pos$4 = 0, $on_edge$0 = 0, $on_edge$1 = 0, $on_edge$2 = 0, $or$cond = 0, $passed$0 = 0, $passed$1 = 0, $point$016 = 0, $point1$018 = 0, $point3$0 = 0, $point3$1 = 0, $point3$2 = 0, $seg0$sroa$5 = 0;
 var $seg0$sroa$6 = 0, $segment = 0, $segment_dir$013 = 0, $segment_dir$1 = 0, $segment_dir$2 = 0, $segment_dir$3 = 0, $storemerge12 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $segment = sp + 12|0;
 $seg0$sroa$5 = sp + 16|0;
 $seg0$sroa$6 = sp;
 $0 = (((($hints)) + 44|0) + (($dim*28)|0)|0);
 $1 = HEAP32[$hints>>2]|0;
 HEAP32[$segment>>2] = 0;
 $2 = ((($hints)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($hints)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($5<<2)|0);
 dest=$seg0$sroa$5; stop=dest+31|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 ;HEAP32[$seg0$sroa$6>>2]=0|0;HEAP32[$seg0$sroa$6+4>>2]=0|0;HEAP32[$seg0$sroa$6+8>>2]=0|0;
 $7 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(0);
 $10 = (0 - ($8))|0;
 $11 = $9 ? $10 : $8;
 HEAP32[$0>>2] = 0;
 $12 = ($dim|0)==(0);
 $13 = ((($hints)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($hints)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + (($16*40)|0)|0);
 $18 = ($16|0)>(0);
 if ($12) {
  if ($18) {
   $point$016 = $14;
   while(1) {
    $20 = ((($point$016)) + 12|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21 << 16 >> 16;
    $23 = ((($point$016)) + 24|0);
    HEAP32[$23>>2] = $22;
    $24 = ((($point$016)) + 14|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = $25 << 16 >> 16;
    $27 = ((($point$016)) + 28|0);
    HEAP32[$27>>2] = $26;
    $28 = ((($point$016)) + 40|0);
    $29 = ($28>>>0)<($17>>>0);
    if ($29) {
     $point$016 = $28;
    } else {
     break;
    }
   }
  }
 } else {
  if ($18) {
   $point1$018 = $14;
   while(1) {
    $30 = ((($point1$018)) + 14|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = $31 << 16 >> 16;
    $33 = ((($point1$018)) + 24|0);
    HEAP32[$33>>2] = $32;
    $34 = ((($point1$018)) + 12|0);
    $35 = HEAP16[$34>>1]|0;
    $36 = $35 << 16 >> 16;
    $37 = ((($point1$018)) + 28|0);
    HEAP32[$37>>2] = $36;
    $38 = ((($point1$018)) + 40|0);
    $39 = ($38>>>0)<($17>>>0);
    if ($39) {
     $point1$018 = $38;
    } else {
     break;
    }
   }
  }
 }
 $19 = ($5|0)>(0);
 L9: do {
  if ($19) {
   $contour$014 = $3;$segment_dir$013 = $11;
   L10: while(1) {
    $40 = HEAP32[$contour$014>>2]|0;
    $41 = ((($40)) + 36|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($40|0)==($42|0);
    L12: do {
     if ($43) {
      $segment_dir$3 = $segment_dir$013;
     } else {
      $44 = ((($42)) + 3|0);
      $45 = HEAP8[$44>>0]|0;
      $46 = $45 << 24 >> 24;
      $47 = ($45<<24>>24)<(0);
      $48 = (0 - ($46))|0;
      $49 = $47 ? $48 : $46;
      $50 = ($49|0)==($11|0);
      L14: do {
       if ($50) {
        $51 = ((($40)) + 3|0);
        $52 = HEAP8[$51>>0]|0;
        $53 = $52 << 24 >> 24;
        $54 = ($52<<24>>24)<(0);
        $55 = (0 - ($53))|0;
        $56 = $54 ? $55 : $53;
        $57 = ($56|0)==($11|0);
        if ($57) {
         $point3$0 = $40;
         while(1) {
          $58 = ((($point3$0)) + 36|0);
          $59 = HEAP32[$58>>2]|0;
          $60 = ((($59)) + 3|0);
          $61 = HEAP8[$60>>0]|0;
          $62 = $61 << 24 >> 24;
          $63 = ($61<<24>>24)<(0);
          $64 = (0 - ($62))|0;
          $65 = $63 ? $64 : $62;
          $66 = ($65|0)==($11|0);
          if (!($66)) {
           $$lcssa = $59;
           break;
          }
          $69 = ($59|0)==($40|0);
          if ($69) {
           $point3$1 = $59;
           break L14;
          } else {
           $point3$0 = $59;
          }
         }
         $67 = ((($$lcssa)) + 32|0);
         $68 = HEAP32[$67>>2]|0;
         $point3$1 = $68;
        } else {
         $point3$1 = $40;
        }
       } else {
        $point3$1 = $40;
       }
      } while(0);
      $max_pos$0 = -32000;$min_pos$0 = 32000;$on_edge$0 = 0;$passed$0 = 0;$point3$2 = $point3$1;$segment_dir$1 = $segment_dir$013;
      while(1) {
       $70 = ($on_edge$0|0)==(0);
       if ($70) {
        $max_pos$3 = $max_pos$0;$min_pos$3 = $min_pos$0;$on_edge$1 = 0;
       } else {
        $71 = ((($point3$2)) + 24|0);
        $72 = HEAP32[$71>>2]|0;
        $73 = ($72|0)<($min_pos$0|0);
        $$min_pos$0 = $73 ? $72 : $min_pos$0;
        $74 = ($72|0)>($max_pos$0|0);
        $max_pos$1 = $74 ? $72 : $max_pos$0;
        $75 = ((($point3$2)) + 3|0);
        $76 = HEAP8[$75>>0]|0;
        $77 = $76 << 24 >> 24;
        $78 = ($77|0)!=($segment_dir$1|0);
        $79 = ($point3$2|0)==($point3$1|0);
        $or$cond = $79 | $78;
        if ($or$cond) {
         $80 = HEAP32[$segment>>2]|0;
         $81 = ((($80)) + 44|0);
         HEAP32[$81>>2] = $point3$2;
         $82 = (($$min_pos$0) + ($max_pos$1))|0;
         $83 = $82 >>> 1;
         $84 = $83&65535;
         $85 = HEAP32[$segment>>2]|0;
         $86 = ((($85)) + 2|0);
         HEAP16[$86>>1] = $84;
         $87 = HEAP32[$segment>>2]|0;
         $88 = ((($87)) + 40|0);
         $89 = HEAP32[$88>>2]|0;
         $90 = HEAP16[$89>>1]|0;
         $91 = HEAP16[$point3$2>>1]|0;
         $92 = $91 | $90;
         $93 = $92 & 3;
         $94 = ($93<<16>>16)==(0);
         if (!($94)) {
          $95 = HEAP8[$87>>0]|0;
          $96 = $95&255;
          $97 = $96 | 1;
          $98 = $97&255;
          HEAP8[$87>>0] = $98;
         }
         $99 = ((($point3$2)) + 28|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = HEAP32[$segment>>2]|0;
         $102 = ((($101)) + 40|0);
         $103 = HEAP32[$102>>2]|0;
         $104 = ((($103)) + 28|0);
         $105 = HEAP32[$104>>2]|0;
         $106 = ($105|0)<($100|0);
         $$ = $106 ? $105 : $100;
         $107 = ($105|0)>($100|0);
         $max_pos$2 = $107 ? $105 : $100;
         $108 = $$&65535;
         $109 = ((($101)) + 4|0);
         HEAP16[$109>>1] = $108;
         $110 = $max_pos$2&65535;
         $111 = HEAP32[$segment>>2]|0;
         $112 = ((($111)) + 6|0);
         HEAP16[$112>>1] = $110;
         $113 = HEAP32[$segment>>2]|0;
         $114 = ((($113)) + 6|0);
         $115 = HEAP16[$114>>1]|0;
         $116 = $115&65535;
         $117 = ((($113)) + 4|0);
         $118 = HEAP16[$117>>1]|0;
         $119 = $118&65535;
         $120 = (($116) - ($119))|0;
         $121 = $120&65535;
         $122 = ((($113)) + 8|0);
         HEAP16[$122>>1] = $121;
         HEAP32[$segment>>2] = 0;
         $max_pos$3 = $max_pos$2;$min_pos$3 = $$;$on_edge$1 = 0;
        } else {
         $max_pos$3 = $max_pos$1;$min_pos$3 = $$min_pos$0;$on_edge$1 = $on_edge$0;
        }
       }
       $123 = ($point3$2|0)==($point3$1|0);
       if ($123) {
        $124 = ($passed$0<<24>>24)==(0);
        if ($124) {
         $passed$1 = 1;
        } else {
         $segment_dir$3 = $segment_dir$1;
         break L12;
        }
       } else {
        $passed$1 = $passed$0;
       }
       $125 = ($on_edge$1|0)==(0);
       if ($125) {
        $126 = ((($point3$2)) + 3|0);
        $127 = HEAP8[$126>>0]|0;
        $128 = $127 << 24 >> 24;
        $129 = ($127<<24>>24)<(0);
        $130 = (0 - ($128))|0;
        $131 = $129 ? $130 : $128;
        $132 = ($131|0)==($11|0);
        if ($132) {
         $133 = (_af_axis_hints_new_segment($0,$1,$segment)|0);
         $134 = ($133|0)==(0);
         if (!($134)) {
          $error$4 = $133;
          break L10;
         }
         $135 = HEAP32[$segment>>2]|0;
         HEAP8[$135>>0] = 0;
         $136 = ((($135)) + 1|0);
         dest=$136; src=$seg0$sroa$5; stop=dest+31|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
         $137 = ((($135)) + 32|0);
         HEAP32[$137>>2] = 32000;
         $138 = ((($135)) + 36|0);
         ;HEAP32[$138>>2]=HEAP32[$seg0$sroa$6>>2]|0;HEAP32[$138+4>>2]=HEAP32[$seg0$sroa$6+4>>2]|0;HEAP32[$138+8>>2]=HEAP32[$seg0$sroa$6+8>>2]|0;
         $139 = HEAP32[$segment>>2]|0;
         $140 = ((($139)) + 1|0);
         HEAP8[$140>>0] = $127;
         $141 = ((($point3$2)) + 24|0);
         $142 = HEAP32[$141>>2]|0;
         $143 = HEAP32[$segment>>2]|0;
         $144 = ((($143)) + 40|0);
         HEAP32[$144>>2] = $point3$2;
         $145 = HEAP32[$segment>>2]|0;
         $146 = ((($145)) + 44|0);
         HEAP32[$146>>2] = $point3$2;
         $max_pos$4 = $142;$min_pos$4 = $142;$on_edge$2 = 1;$segment_dir$2 = $128;
        } else {
         $max_pos$4 = $max_pos$3;$min_pos$4 = $min_pos$3;$on_edge$2 = 0;$segment_dir$2 = $segment_dir$1;
        }
       } else {
        $max_pos$4 = $max_pos$3;$min_pos$4 = $min_pos$3;$on_edge$2 = $on_edge$1;$segment_dir$2 = $segment_dir$1;
       }
       $147 = ((($point3$2)) + 32|0);
       $148 = HEAP32[$147>>2]|0;
       $max_pos$0 = $max_pos$4;$min_pos$0 = $min_pos$4;$on_edge$0 = $on_edge$2;$passed$0 = $passed$1;$point3$2 = $148;$segment_dir$1 = $segment_dir$2;
      }
     }
    } while(0);
    $149 = ((($contour$014)) + 4|0);
    $150 = ($149>>>0)<($6>>>0);
    if ($150) {
     $contour$014 = $149;$segment_dir$013 = $segment_dir$3;
    } else {
     break L9;
    }
   }
   STACKTOP = sp;return ($error$4|0);
  }
 } while(0);
 $151 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 8|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = HEAP32[$0>>2]|0;
 $154 = (($152) + (($153*48)|0)|0);
 HEAP32[$segment>>2] = $152;
 $155 = ($153|0)>(0);
 if ($155) {
  $storemerge12 = $152;
 } else {
  $error$4 = 0;
  STACKTOP = sp;return ($error$4|0);
 }
 while(1) {
  $156 = ((($storemerge12)) + 40|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ((($storemerge12)) + 44|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ((($157)) + 28|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ((($159)) + 28|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = ($157|0)==($159|0);
  do {
   if (!($164)) {
    $165 = ($161|0)<($163|0);
    $166 = ((($157)) + 36|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ((($167)) + 28|0);
    $169 = HEAP32[$168>>2]|0;
    if ($165) {
     $170 = ($161|0)>($169|0);
     if ($170) {
      $171 = ((($storemerge12)) + 8|0);
      $172 = HEAP16[$171>>1]|0;
      $173 = $172&65535;
      $174 = (($161) - ($169))|0;
      $175 = $174 >>> 1;
      $176 = (($173) + ($175))|0;
      $177 = $176&65535;
      HEAP16[$171>>1] = $177;
     }
     $178 = ((($159)) + 32|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = ((($179)) + 28|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = ($181|0)>($163|0);
     if (!($182)) {
      break;
     }
     $183 = HEAP32[$segment>>2]|0;
     $184 = ((($183)) + 8|0);
     $185 = HEAP16[$184>>1]|0;
     $186 = $185&65535;
     $187 = (($181) - ($163))|0;
     $188 = $187 >>> 1;
     $189 = (($186) + ($188))|0;
     $190 = $189&65535;
     HEAP16[$184>>1] = $190;
     break;
    } else {
     $191 = ($169|0)>($161|0);
     if ($191) {
      $192 = ((($storemerge12)) + 8|0);
      $193 = HEAP16[$192>>1]|0;
      $194 = $193&65535;
      $195 = (($169) - ($161))|0;
      $196 = $195 >>> 1;
      $197 = (($194) + ($196))|0;
      $198 = $197&65535;
      HEAP16[$192>>1] = $198;
     }
     $199 = ((($159)) + 32|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = ((($200)) + 28|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($163|0)>($202|0);
     if (!($203)) {
      break;
     }
     $204 = HEAP32[$segment>>2]|0;
     $205 = ((($204)) + 8|0);
     $206 = HEAP16[$205>>1]|0;
     $207 = $206&65535;
     $208 = (($163) - ($202))|0;
     $209 = $208 >>> 1;
     $210 = (($207) + ($209))|0;
     $211 = $210&65535;
     HEAP16[$205>>1] = $211;
     break;
    }
   }
  } while(0);
  $212 = HEAP32[$segment>>2]|0;
  $213 = ((($212)) + 48|0);
  HEAP32[$segment>>2] = $213;
  $214 = ($213>>>0)<($154>>>0);
  if ($214) {
   $storemerge12 = $213;
  } else {
   $error$4 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($error$4|0);
}
function _af_latin_hints_link_segments($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $$ = 0, $$1 = 0, $$1$v = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0;
 var $9 = 0, $max$0 = 0, $max$0$v = 0, $or$cond = 0, $seg1$06 = 0, $seg1$13 = 0, $seg2$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($hints)) + 44|0) + (($dim*28)|0)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*48)|0)|0);
 $5 = ((($hints)) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8|0) / 256)&-1;
 $$off = (($8) + 255)|0;
 $10 = ($$off>>>0)<(511);
 $$ = $10 ? 1 : $9;
 $11 = ($8*6000)|0;
 $12 = (($11|0) / 2048)&-1;
 $13 = ($3|0)>(0);
 if (!($13)) {
  return;
 }
 $14 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $seg1$06 = $1;
 while(1) {
  $17 = ((($seg1$06)) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==($15|0);
  if ($20) {
   $21 = ((($seg1$06)) + 40|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($seg1$06)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($22|0)==($24|0);
   if (!($25)) {
    $26 = ((($seg1$06)) + 2|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = HEAP8[$17>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ((($seg1$06)) + 4|0);
    $31 = ((($seg1$06)) + 6|0);
    $32 = $27 << 16 >> 16;
    $33 = ((($seg1$06)) + 32|0);
    $34 = ((($seg1$06)) + 20|0);
    $seg2$04 = $1;
    while(1) {
     $35 = ((($seg2$04)) + 2|0);
     $36 = HEAP16[$35>>1]|0;
     $37 = ((($seg2$04)) + 1|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38 << 24 >> 24;
     $40 = (0 - ($39))|0;
     $41 = ($29|0)==($40|0);
     $42 = ($36<<16>>16)>($27<<16>>16);
     $or$cond = $42 & $41;
     if ($or$cond) {
      $43 = HEAP16[$30>>1]|0;
      $44 = HEAP16[$31>>1]|0;
      $45 = ((($seg2$04)) + 4|0);
      $46 = HEAP16[$45>>1]|0;
      $47 = ($43<<16>>16)<($46<<16>>16);
      $$1$v = $47 ? $46 : $43;
      $$1 = $$1$v << 16 >> 16;
      $48 = ((($seg2$04)) + 6|0);
      $49 = HEAP16[$48>>1]|0;
      $50 = ($44<<16>>16)>($49<<16>>16);
      $max$0$v = $50 ? $49 : $44;
      $max$0 = $max$0$v << 16 >> 16;
      $51 = (($max$0) - ($$1))|0;
      $52 = ($51|0)<($$|0);
      if (!($52)) {
       $53 = $36 << 16 >> 16;
       $54 = (($53) - ($32))|0;
       $55 = (($12|0) / ($51|0))&-1;
       $56 = (($55) + ($54))|0;
       $57 = HEAP32[$33>>2]|0;
       $58 = ($56|0)<($57|0);
       if ($58) {
        HEAP32[$33>>2] = $56;
        HEAP32[$34>>2] = $seg2$04;
       }
       $59 = ((($seg2$04)) + 32|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($56|0)<($60|0);
       if ($61) {
        HEAP32[$59>>2] = $56;
        $62 = ((($seg2$04)) + 20|0);
        HEAP32[$62>>2] = $seg1$06;
       }
      }
     }
     $63 = ((($seg2$04)) + 48|0);
     $64 = ($63>>>0)<($4>>>0);
     if ($64) {
      $seg2$04 = $63;
     } else {
      break;
     }
    }
   }
  }
  $65 = ((($seg1$06)) + 48|0);
  $66 = ($65>>>0)<($4>>>0);
  if ($66) {
   $seg1$06 = $65;
  } else {
   break;
  }
 }
 $16 = ($3|0)>(0);
 if ($16) {
  $seg1$13 = $1;
 } else {
  return;
 }
 while(1) {
  $67 = ((($seg1$13)) + 20|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)==(0|0);
  if (!($69)) {
   $70 = ((($68)) + 20|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)==($seg1$13|0);
   if (!($72)) {
    HEAP32[$67>>2] = 0;
    $73 = HEAP32[$70>>2]|0;
    $74 = ((($seg1$13)) + 24|0);
    HEAP32[$74>>2] = $73;
   }
  }
  $75 = ((($seg1$13)) + 48|0);
  $76 = ($75>>>0)<($4>>>0);
  if ($76) {
   $seg1$13 = $75;
  } else {
   break;
  }
 }
 return;
}
function _af_latin_metrics_check_digits($metrics,$face) {
 $metrics = $metrics|0;
 $face = $face|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $advance = 0, $i$03 = 0, $old_advance$02 = 0, $old_advance$1 = 0, $same_width$0 = 0, $started$01 = 0, $started$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $advance = sp;
 $i$03 = 48;$old_advance$02 = 0;$started$01 = 0;
 while(1) {
  $0 = (_FT_Get_Char_Index($face,$i$03)|0);
  $1 = ($0|0)==(0);
  if ($1) {
   $old_advance$1 = $old_advance$02;$started$1 = $started$01;
  } else {
   $2 = (_FT_Get_Advance($face,$0,2051,$advance)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    $4 = ($started$01<<24>>24)==(0);
    $5 = HEAP32[$advance>>2]|0;
    if ($4) {
     $old_advance$1 = $5;$started$1 = 1;
    } else {
     $6 = ($5|0)==($old_advance$02|0);
     if ($6) {
      $old_advance$1 = $old_advance$02;$started$1 = $started$01;
     } else {
      $same_width$0 = 0;
      break;
     }
    }
   } else {
    $old_advance$1 = $old_advance$02;$started$1 = $started$01;
   }
  }
  $7 = (($i$03) + 1)|0;
  $8 = ($7>>>0)<(58);
  if ($8) {
   $i$03 = $7;$old_advance$02 = $old_advance$1;$started$01 = $started$1;
  } else {
   $same_width$0 = 1;
   break;
  }
 }
 $9 = ((($metrics)) + 32|0);
 HEAP8[$9>>0] = $same_width$0;
 STACKTOP = sp;return;
}
function _af_latin_metrics_init($metrics,$face) {
 $metrics = $metrics|0;
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 68|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($metrics)) + 36|0);
 HEAP32[$5>>2] = $4;
 $6 = (_FT_Select_Charmap($face,1970170211)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = (_FT_Select_Charmap($face,1634889070)|0);
  $9 = ($8|0)==(0);
  if (!($9)) {
   $10 = (_FT_Select_Charmap($face,1094995778)|0);
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = (_FT_Select_Charmap($face,1818326065)|0);
    $13 = ($12|0)==(0);
    if (!($13)) {
     (_FT_Set_Charmap($face,$1)|0);
     return 0;
    }
   }
  }
 }
 _af_latin_metrics_init_widths($metrics,$face,111);
 _af_latin_metrics_init_blues($metrics,$face);
 _af_latin_metrics_check_digits($metrics,$face);
 (_FT_Set_Charmap($face,$1)|0);
 return 0;
}
function _af_latin_metrics_scale($metrics,$scaler) {
 $metrics = $metrics|0;
 $scaler = $scaler|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($scaler)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($metrics)) + 4|0);
 $3 = ((($metrics)) + 24|0);
 HEAP32[$3>>2] = $1;
 $4 = HEAP32[$scaler>>2]|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($scaler)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($metrics)) + 28|0);
 HEAP32[$7>>2] = $6;
 _af_latin_metrics_scale_dim($metrics,$scaler,0);
 _af_latin_metrics_scale_dim($metrics,$scaler,1);
 return;
}
function _af_latin_hints_compute_edges($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0, $$in = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $brmerge = 0, $edge1 = 0, $edge2$016 = 0, $edge2$115 = 0, $edge23$0 = 0, $edge23$1 = 0, $ee$018 = 0, $ee$018$lcssa = 0, $error$2 = 0, $is_round$0 = 0, $is_round$1 = 0, $is_round$1$lcssa = 0, $is_straight$0 = 0, $is_straight$1 = 0, $is_straight$1$lcssa = 0, $not$ = 0, $or$cond = 0, $or$cond29 = 0, $seg$020 = 0, $seg$1 = 0;
 var $seg$2 = 0, $seg2$0 = 0, $seg_delta$0 = 0, $segment_length_threshold$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $edge1 = sp;
 $0 = (((($hints)) + 44|0) + (($dim*28)|0)|0);
 $1 = HEAP32[$hints>>2]|0;
 $2 = ((($hints)) + 108|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) + (($6*48)|0)|0);
 $8 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ($dim|0)==(0);
 $10 = ((($hints)) + 4|0);
 $11 = ((($hints)) + 12|0);
 $$in = $9 ? $10 : $11;
 $12 = HEAP32[$$in>>2]|0;
 if ($9) {
  $13 = HEAP32[$11>>2]|0;
  $14 = (_FT_DivFix(64,$13)|0);
  $segment_length_threshold$0 = $14;
 } else {
  $segment_length_threshold$0 = 0;
 }
 $15 = (((((($3)) + 40|0) + (($dim*396)|0)|0)) + 204|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_FT_MulFix($16,$12)|0);
 $18 = ($17|0)>(16);
 $$ = $18 ? 16 : $17;
 $19 = (_FT_DivFix($$,$12)|0);
 $20 = ($6|0)>(0);
 L4: do {
  if ($20) {
   $21 = ($segment_length_threshold$0*3)|0;
   $22 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 20|0);
   $seg$020 = $5;
   L6: while(1) {
    $23 = ((($seg$020)) + 8|0);
    $24 = HEAP16[$23>>1]|0;
    $25 = $24 << 16 >> 16;
    $26 = ($25|0)<($segment_length_threshold$0|0);
    L8: do {
     if (!($26)) {
      $27 = ((($seg$020)) + 24|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)!=(0|0);
      $30 = $25 << 1;
      $31 = ($30|0)<($21|0);
      $or$cond29 = $29 & $31;
      if (!($or$cond29)) {
       $32 = HEAP32[$8>>2]|0;
       $33 = ($32|0)>(0);
       L11: do {
        if ($33) {
         $34 = HEAP32[$22>>2]|0;
         $35 = ((($seg$020)) + 2|0);
         $36 = HEAP16[$35>>1]|0;
         $37 = $36 << 16 >> 16;
         $38 = ((($seg$020)) + 1|0);
         $ee$018 = 0;
         while(1) {
          $39 = (($34) + (($ee$018*48)|0)|0);
          $40 = HEAP16[$39>>1]|0;
          $41 = $40 << 16 >> 16;
          $42 = (($37) - ($41))|0;
          $43 = ($42|0)<(0);
          $44 = (0 - ($42))|0;
          $$1 = $43 ? $44 : $42;
          $45 = ($$1|0)<($19|0);
          if ($45) {
           $46 = (((($34) + (($ee$018*48)|0)|0)) + 13|0);
           $47 = HEAP8[$46>>0]|0;
           $48 = HEAP8[$38>>0]|0;
           $49 = ($47<<24>>24)==($48<<24>>24);
           if ($49) {
            $ee$018$lcssa = $ee$018;
            break;
           }
          }
          $50 = (($ee$018) + 1)|0;
          $51 = HEAP32[$8>>2]|0;
          $52 = ($50|0)<($51|0);
          if ($52) {
           $ee$018 = $50;
          } else {
           break L11;
          }
         }
         $81 = (((($34) + (($ee$018$lcssa*48)|0)|0)) + 40|0);
         $82 = HEAP32[$81>>2]|0;
         $83 = ((($seg$020)) + 16|0);
         HEAP32[$83>>2] = $82;
         $84 = (((($34) + (($ee$018$lcssa*48)|0)|0)) + 44|0);
         $85 = HEAP32[$84>>2]|0;
         $86 = ((($85)) + 16|0);
         HEAP32[$86>>2] = $seg$020;
         HEAP32[$84>>2] = $seg$020;
         break L8;
        }
       } while(0);
       $53 = ((($seg$020)) + 2|0);
       $54 = HEAP16[$53>>1]|0;
       $55 = $54 << 16 >> 16;
       $56 = ((($seg$020)) + 1|0);
       $57 = HEAP8[$56>>0]|0;
       $58 = $57 << 24 >> 24;
       $59 = (_af_axis_hints_new_edge($0,$55,$58,$1,$edge1)|0);
       $60 = ($59|0)==(0);
       if (!($60)) {
        $error$2 = $59;
        break L6;
       }
       $61 = HEAP32[$edge1>>2]|0;
       dest=$61; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
       $62 = HEAP32[$edge1>>2]|0;
       $63 = ((($62)) + 40|0);
       HEAP32[$63>>2] = $seg$020;
       $64 = HEAP32[$edge1>>2]|0;
       $65 = ((($64)) + 44|0);
       HEAP32[$65>>2] = $seg$020;
       $66 = HEAP8[$56>>0]|0;
       $67 = HEAP32[$edge1>>2]|0;
       $68 = ((($67)) + 13|0);
       HEAP8[$68>>0] = $66;
       $69 = HEAP16[$53>>1]|0;
       $70 = HEAP32[$edge1>>2]|0;
       HEAP16[$70>>1] = $69;
       $71 = HEAP16[$53>>1]|0;
       $72 = $71 << 16 >> 16;
       $73 = (_FT_MulFix($72,$12)|0);
       $74 = HEAP32[$edge1>>2]|0;
       $75 = ((($74)) + 4|0);
       HEAP32[$75>>2] = $73;
       $76 = HEAP32[$edge1>>2]|0;
       $77 = ((($76)) + 4|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ((($76)) + 8|0);
       HEAP32[$79>>2] = $78;
       $80 = ((($seg$020)) + 16|0);
       HEAP32[$80>>2] = $seg$020;
      }
     }
    } while(0);
    $87 = ((($seg$020)) + 48|0);
    $88 = ($87>>>0)<($7>>>0);
    if ($88) {
     $seg$020 = $87;
    } else {
     break L4;
    }
   }
   STACKTOP = sp;return ($error$2|0);
  }
 } while(0);
 $89 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 20|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = HEAP32[$8>>2]|0;
 $92 = (($90) + (($91*48)|0)|0);
 $93 = ($91|0)>(0);
 if ($93) {
  $edge2$016 = $90;
 } else {
  $error$2 = 0;
  STACKTOP = sp;return ($error$2|0);
 }
 while(1) {
  $95 = ((($edge2$016)) + 40|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($96|0)==(0|0);
  if (!($97)) {
   $98 = HEAP32[$95>>2]|0;
   $seg$1 = $96;
   while(1) {
    $99 = ((($seg$1)) + 12|0);
    HEAP32[$99>>2] = $edge2$016;
    $100 = ((($seg$1)) + 16|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)==($98|0);
    if ($102) {
     break;
    } else {
     $seg$1 = $101;
    }
   }
  }
  $103 = ((($edge2$016)) + 48|0);
  $104 = ($103>>>0)<($92>>>0);
  if ($104) {
   $edge2$016 = $103;
  } else {
   break;
  }
 }
 $94 = ($91|0)>(0);
 if ($94) {
  $edge2$115 = $90;
 } else {
  $error$2 = 0;
  STACKTOP = sp;return ($error$2|0);
 }
 while(1) {
  $105 = ((($edge2$115)) + 40|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ((($edge2$115)) + 24|0);
  $108 = ((($edge2$115)) + 28|0);
  $is_round$0 = 0;$is_straight$0 = 0;$seg$2 = $106;
  while(1) {
   $109 = HEAP8[$seg$2>>0]|0;
   $110 = $109 & 1;
   $111 = $110 ^ 1;
   $112 = $111&255;
   $113 = $112 ^ 1;
   $is_round$1 = (($113) + ($is_round$0))|0;
   $114 = $110 ^ 1;
   $115 = $114&255;
   $is_straight$1 = (($115) + ($is_straight$0))|0;
   $116 = ((($seg$2)) + 24|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ($117|0)==(0|0);
   if ($118) {
    $127 = 0;
   } else {
    $119 = ((($117)) + 12|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ($120|0)!=($edge2$115|0);
    $not$ = ($120|0)!=(0|0);
    $$2 = $121 & $not$;
    $127 = $$2;
   }
   $122 = ((($seg$2)) + 20|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = ($123|0)==(0|0);
   if ($124) {
    if ($127) {
     label = 28;
    }
   } else {
    $125 = ((($123)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $$not = ($126|0)!=(0|0);
    $brmerge = $127 | $$not;
    if ($brmerge) {
     label = 28;
    }
   }
   do {
    if ((label|0) == 28) {
     label = 0;
     $$3 = $127 ? $108 : $107;
     $$4 = $127 ? $116 : $122;
     $seg2$0 = HEAP32[$$4>>2]|0;
     $edge23$0 = HEAP32[$$3>>2]|0;
     $128 = ($edge23$0|0)==(0|0);
     if ($128) {
      $148 = ((($seg2$0)) + 12|0);
      $149 = HEAP32[$148>>2]|0;
      $edge23$1 = $149;
     } else {
      $129 = HEAP16[$edge2$115>>1]|0;
      $130 = $129 << 16 >> 16;
      $131 = HEAP16[$edge23$0>>1]|0;
      $132 = $131 << 16 >> 16;
      $133 = (($130) - ($132))|0;
      $134 = ($133|0)<(0);
      $135 = (0 - ($133))|0;
      $$5 = $134 ? $135 : $133;
      $136 = ((($seg$2)) + 2|0);
      $137 = HEAP16[$136>>1]|0;
      $138 = $137 << 16 >> 16;
      $139 = ((($seg2$0)) + 2|0);
      $140 = HEAP16[$139>>1]|0;
      $141 = $140 << 16 >> 16;
      $142 = (($138) - ($141))|0;
      $143 = ($142|0)<(0);
      $144 = (0 - ($142))|0;
      $seg_delta$0 = $143 ? $144 : $142;
      $145 = ($seg_delta$0|0)<($$5|0);
      if ($145) {
       $146 = ((($seg2$0)) + 12|0);
       $147 = HEAP32[$146>>2]|0;
       $edge23$1 = $147;
      } else {
       $edge23$1 = $edge23$0;
      }
     }
     if ($127) {
      HEAP32[$108>>2] = $edge23$1;
      $150 = ((($edge23$1)) + 12|0);
      $151 = HEAP8[$150>>0]|0;
      $152 = $151&255;
      $153 = $152 | 2;
      $154 = $153&255;
      HEAP8[$150>>0] = $154;
      break;
     } else {
      HEAP32[$107>>2] = $edge23$1;
      break;
     }
    }
   } while(0);
   $155 = ((($seg$2)) + 16|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = HEAP32[$105>>2]|0;
   $158 = ($156|0)==($157|0);
   if ($158) {
    $is_round$1$lcssa = $is_round$1;$is_straight$1$lcssa = $is_straight$1;
    break;
   } else {
    $is_round$0 = $is_round$1;$is_straight$0 = $is_straight$1;$seg$2 = $156;
   }
  }
  $159 = ((($edge2$115)) + 12|0);
  $160 = ($is_round$1$lcssa|0)<(1);
  $161 = ($is_round$1$lcssa|0)<($is_straight$1$lcssa|0);
  $or$cond = $160 | $161;
  $162 = $or$cond&1;
  $$6 = $162 ^ 1;
  HEAP8[$159>>0] = $$6;
  $163 = ((($edge2$115)) + 28|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ($164|0)==(0|0);
  if (!($165)) {
   $166 = ((($edge2$115)) + 24|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = ($167|0)==(0|0);
   if (!($168)) {
    HEAP32[$163>>2] = 0;
   }
  }
  $169 = ((($edge2$115)) + 48|0);
  $170 = ($169>>>0)<($92>>>0);
  if ($170) {
   $edge2$115 = $169;
  } else {
   $error$2 = 0;
   break;
  }
 }
 STACKTOP = sp;return ($error$2|0);
}
function _af_latin_hints_detect_features($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $0 = 0, $1 = 0, $2 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_af_latin_hints_compute_segments($hints,$dim)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $error$0 = $0;
  return ($error$0|0);
 }
 _af_latin_hints_link_segments($hints,$dim);
 $2 = (_af_latin_hints_compute_edges($hints,$dim)|0);
 $error$0 = $2;
 return ($error$0|0);
}
function _af_latin_hints_compute_blue_edges($hints,$metrics) {
 $hints = $hints|0;
 $metrics = $metrics|0;
 var $$ = 0, $$2 = 0, $$3 = 0, $$best_blue$1 = 0, $$best_dist$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $bb$06 = 0, $best_blue$05 = 0, $best_blue$1 = 0, $best_blue$2 = 0, $best_blue$2$lcssa = 0, $best_dist$04 = 0, $best_dist$1 = 0, $best_dist$2 = 0, $edge$07 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hints)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($hints)) + 84|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*48)|0)|0);
 $5 = ((($metrics)) + 436|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3|0)>(0);
 if (!($7)) {
  return;
 }
 $8 = ((($metrics)) + 36|0);
 $9 = ((($hints)) + 96|0);
 $edge$07 = $1;
 while(1) {
  $10 = HEAP32[$8>>2]|0;
  $11 = (($10>>>0) / 40)&-1;
  $12 = (_FT_MulFix($11,$6)|0);
  $13 = ($12|0)>(32);
  $$ = $13 ? 32 : $12;
  $14 = ((($edge$07)) + 13|0);
  $15 = ((($edge$07)) + 12|0);
  $bb$06 = 0;$best_blue$05 = 0;$best_dist$04 = $$;
  while(1) {
   $16 = (((($metrics)) + 656|0) + (($bb$06*28)|0)|0);
   $17 = (((((($metrics)) + 656|0) + (($bb$06*28)|0)|0)) + 24|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & 1;
   $20 = ($19|0)==(0);
   if ($20) {
    $best_blue$2 = $best_blue$05;$best_dist$2 = $best_dist$04;
   } else {
    $21 = HEAP8[$14>>0]|0;
    $22 = $21 << 24 >> 24;
    $23 = HEAP32[$9>>2]|0;
    $24 = ($22|0)==($23|0);
    $25 = $18 & 2;
    $26 = ($25|0)!=(0);
    $27 = $26 ^ $24;
    if ($27) {
     $28 = HEAP16[$edge$07>>1]|0;
     $29 = $28 << 16 >> 16;
     $30 = HEAP32[$16>>2]|0;
     $31 = (($29) - ($30))|0;
     $32 = ($31|0)<(0);
     $33 = (0 - ($31))|0;
     $$2 = $32 ? $33 : $31;
     $34 = (_FT_MulFix($$2,$6)|0);
     $35 = ($34|0)<($best_dist$04|0);
     $best_dist$1 = $35 ? $34 : $best_dist$04;
     $best_blue$1 = $35 ? $16 : $best_blue$05;
     $36 = HEAP8[$15>>0]|0;
     $37 = $36 & 1;
     $38 = ($37<<24>>24)!=(0);
     $39 = ($34|0)!=(0);
     $or$cond = $39 & $38;
     if ($or$cond) {
      $40 = HEAP16[$edge$07>>1]|0;
      $41 = $40 << 16 >> 16;
      $42 = HEAP32[$16>>2]|0;
      $43 = ($41|0)<($42|0);
      $44 = $26 ^ $43;
      if ($44) {
       $45 = (((((($metrics)) + 656|0) + (($bb$06*28)|0)|0)) + 12|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = (($41) - ($46))|0;
       $48 = ($47|0)<(0);
       $49 = (0 - ($47))|0;
       $$3 = $48 ? $49 : $47;
       $50 = (_FT_MulFix($$3,$6)|0);
       $51 = ($50|0)<($best_dist$1|0);
       $$best_dist$1 = $51 ? $50 : $best_dist$1;
       $$best_blue$1 = $51 ? $45 : $best_blue$1;
       $best_blue$2 = $$best_blue$1;$best_dist$2 = $$best_dist$1;
      } else {
       $best_blue$2 = $best_blue$1;$best_dist$2 = $best_dist$1;
      }
     } else {
      $best_blue$2 = $best_blue$1;$best_dist$2 = $best_dist$1;
     }
    } else {
     $best_blue$2 = $best_blue$05;$best_dist$2 = $best_dist$04;
    }
   }
   $52 = (($bb$06) + 1)|0;
   $exitcond = ($52|0)==(6);
   if ($exitcond) {
    $best_blue$2$lcssa = $best_blue$2;
    break;
   } else {
    $bb$06 = $52;$best_blue$05 = $best_blue$2;$best_dist$04 = $best_dist$2;
   }
  }
  $53 = ($best_blue$2$lcssa|0)==(0|0);
  if (!($53)) {
   $54 = ((($edge$07)) + 20|0);
   HEAP32[$54>>2] = $best_blue$2$lcssa;
  }
  $55 = ((($edge$07)) + 48|0);
  $56 = ($55>>>0)<($4>>>0);
  if ($56) {
   $edge$07 = $55;
  } else {
   break;
  }
 }
 return;
}
function _af_latin_hint_edges($hints,$dim) {
 $hints = $hints|0;
 $dim = $dim|0;
 var $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$edge$0 = 0, $$idx = 0, $$lcssa = 0, $$lcssa73 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $after$0 = 0, $after$0$lcssa71 = 0, $anchor$041 = 0, $anchor$1 = 0, $anchor$3$lcssa = 0, $anchor$3$ph = 0, $anchor$336 = 0, $anchor$4 = 0, $anchor$531 = 0, $anchor$6 = 0, $anchor$7 = 0, $before$0 = 0, $before$0$lcssa = 0, $blue$0$ph19 = 0, $brmerge$demorgan = 0, $cur_pos15$0 = 0, $delta1$0 = 0;
 var $delta2$1 = 0, $edge$0$anchor$0 = 0, $edge$042 = 0, $edge$137 = 0, $edge$2$pn = 0, $edge$2$pn$lcssa = 0, $edge$2$pn4 = 0, $edge$2$pn4$lcssa70 = 0, $edge$232 = 0, $edge1$0$ph = 0, $edge18$0 = 0, $edge2$0$ph18 = 0, $error2$0 = 0, $has_serifs$0$lcssa = 0, $has_serifs$035 = 0, $has_serifs$1 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond16 = 0;
 var $or$cond3$not = 0, $or$cond61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((((($hints)) + 44|0) + (($dim*28)|0)|0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*48)|0)|0);
 $5 = ($dim|0)==(1);
 if ($5) {
  $6 = ($3|0)>(0);
  if ($6) {
   $anchor$041 = 0;$edge$042 = $1;
  } else {
   return;
  }
  while(1) {
   $8 = ((($edge$042)) + 12|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 & 4;
   $11 = ($10<<24>>24)==(0);
   do {
    if ($11) {
     $12 = ((($edge$042)) + 20|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ((($edge$042)) + 24|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($13|0)==(0|0);
     if ($16) {
      $17 = ($15|0)==(0|0);
      if ($17) {
       $anchor$1 = $anchor$041;
       break;
      }
      $18 = ((($15)) + 20|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = ($19|0)==(0|0);
      $$edge$0 = $20 ? $15 : $edge$042;
      $$5 = $20 ? $13 : $19;
      if ($20) {
       $anchor$1 = $anchor$041;
       break;
      } else {
       $blue$0$ph19 = $$5;$edge1$0$ph = $15;$edge2$0$ph18 = $$edge$0;
      }
     } else {
      $blue$0$ph19 = $13;$edge1$0$ph = $edge$042;$edge2$0$ph18 = $15;
     }
     $21 = ((($blue$0$ph19)) + 8|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ((($edge1$0$ph)) + 8|0);
     HEAP32[$23>>2] = $22;
     $24 = ((($edge1$0$ph)) + 12|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25&255;
     $27 = $26 | 4;
     $28 = $27&255;
     HEAP8[$24>>0] = $28;
     $29 = ($edge2$0$ph18|0)==(0|0);
     if (!($29)) {
      $30 = ((($edge2$0$ph18)) + 20|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==(0|0);
      if ($32) {
       _af_latin_align_linked_edge($hints,$dim,$edge1$0$ph,$edge2$0$ph18);
       $33 = ((($edge2$0$ph18)) + 12|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $36 = $35 | 4;
       $37 = $36&255;
       HEAP8[$33>>0] = $37;
      }
     }
     $38 = ($anchor$041|0)==(0|0);
     $edge$0$anchor$0 = $38 ? $edge$042 : $anchor$041;
     $anchor$1 = $edge$0$anchor$0;
    } else {
     $anchor$1 = $anchor$041;
    }
   } while(0);
   $39 = ((($edge$042)) + 48|0);
   $40 = ($39>>>0)<($4>>>0);
   if ($40) {
    $anchor$041 = $anchor$1;$edge$042 = $39;
   } else {
    $anchor$3$ph = $anchor$1;
    break;
   }
  }
 } else {
  $anchor$3$ph = 0;
 }
 $7 = ($3|0)>(0);
 if ($7) {
  $anchor$336 = $anchor$3$ph;$edge$137 = $1;$has_serifs$035 = 0;
  while(1) {
   $41 = ((($edge$137)) + 12|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = $43 & 4;
   $45 = ($44|0)==(0);
   do {
    if ($45) {
     $46 = ((($edge$137)) + 24|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47|0)==(0|0);
     if ($48) {
      $49 = (($has_serifs$035) + 1)|0;
      $anchor$4 = $anchor$336;$has_serifs$1 = $49;
      break;
     }
     $50 = ((($47)) + 20|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==(0|0);
     if (!($52)) {
      _af_latin_align_linked_edge($hints,$dim,$47,$edge$137);
      $53 = HEAP8[$41>>0]|0;
      $54 = $53&255;
      $55 = $54 | 4;
      $56 = $55&255;
      HEAP8[$41>>0] = $56;
      $anchor$4 = $anchor$336;$has_serifs$1 = $has_serifs$035;
      break;
     }
     $57 = ($anchor$336|0)==(0|0);
     if ($57) {
      $58 = ((($47)) + 4|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ((($edge$137)) + 4|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (($59) - ($61))|0;
      $63 = ((($47)) + 12|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = $64&255;
      $66 = (_af_latin_compute_stem_width($hints,$dim,$62,$43,$65)|0);
      $67 = ($66|0)<(65);
      $68 = ($66|0)<(96);
      if ($68) {
       $$7 = $67 ? 32 : 26;
       $$6 = $67 ? 32 : 38;
       $69 = $62 >> 1;
       $70 = (($69) + ($61))|0;
       $71 = (($70) + 32)|0;
       $72 = $71 & -64;
       $73 = (($72) - ($$6))|0;
       $74 = (($70) - ($73))|0;
       $75 = ($74|0)<(0);
       $76 = (0 - ($74))|0;
       $$8 = $75 ? $76 : $74;
       $77 = $72 | $$7;
       $78 = (($70) - ($77))|0;
       $79 = ($78|0)<(0);
       $80 = (0 - ($78))|0;
       $error2$0 = $79 ? $80 : $78;
       $81 = ($$8|0)<($error2$0|0);
       $$9 = $81 ? $73 : $77;
       $82 = (($66|0) / 2)&-1;
       $83 = (($$9) - ($82))|0;
       $84 = ((($edge$137)) + 8|0);
       HEAP32[$84>>2] = $83;
       $85 = (($83) + ($66))|0;
       $86 = ((($47)) + 8|0);
       HEAP32[$86>>2] = $85;
      } else {
       $87 = (($61) + 32)|0;
       $88 = $87 & -64;
       $89 = ((($edge$137)) + 8|0);
       HEAP32[$89>>2] = $88;
      }
      $90 = HEAP8[$41>>0]|0;
      $91 = $90&255;
      $92 = $91 | 4;
      $93 = $92&255;
      HEAP8[$41>>0] = $93;
      _af_latin_align_linked_edge($hints,$dim,$edge$137,$47);
      $anchor$4 = $edge$137;$has_serifs$1 = $has_serifs$035;
      break;
     }
     $94 = ((($anchor$336)) + 8|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ((($edge$137)) + 4|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($anchor$336)) + 4|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($97) - ($99))|0;
     $101 = (($100) + ($95))|0;
     $102 = ((($47)) + 4|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = (($103) - ($97))|0;
     $105 = $104 >> 1;
     $106 = (($105) + ($101))|0;
     $107 = ((($47)) + 12|0);
     $108 = HEAP8[$107>>0]|0;
     $109 = $108&255;
     $110 = (_af_latin_compute_stem_width($hints,$dim,$104,$43,$109)|0);
     $111 = $109 & 4;
     $112 = ($111|0)==(0);
     do {
      if ($112) {
       $117 = ($110|0)<(96);
       if ($117) {
        $118 = (($106) + 32)|0;
        $119 = $118 & -64;
        $120 = ($110|0)<(65);
        $$10 = $120 ? 32 : 38;
        $$11 = $120 ? 32 : 26;
        $121 = (($119) - ($$10))|0;
        $122 = (($106) - ($121))|0;
        $123 = ($122|0)<(0);
        $124 = (0 - ($122))|0;
        $delta1$0 = $123 ? $124 : $122;
        $125 = $119 | $$11;
        $126 = (($106) - ($125))|0;
        $127 = ($126|0)<(0);
        $128 = (0 - ($126))|0;
        $$12 = $127 ? $128 : $126;
        $129 = ($delta1$0|0)<($$12|0);
        $cur_pos15$0 = $129 ? $121 : $125;
        $130 = (($110|0) / 2)&-1;
        $131 = (($cur_pos15$0) - ($130))|0;
        $132 = ((($edge$137)) + 8|0);
        HEAP32[$132>>2] = $131;
        $133 = (($130) + ($cur_pos15$0))|0;
        $134 = ((($47)) + 8|0);
        HEAP32[$134>>2] = $133;
        break;
       } else {
        $135 = (($101) + 32)|0;
        $136 = $135 & -64;
        $137 = $110 >> 1;
        $138 = (($136) + ($137))|0;
        $139 = (($138) - ($106))|0;
        $140 = ($139|0)<(0);
        $141 = (0 - ($139))|0;
        $$13 = $140 ? $141 : $139;
        $142 = (($104) + 32)|0;
        $143 = (($142) + ($101))|0;
        $144 = $143 & -64;
        $145 = (($144) - ($110))|0;
        $146 = (($137) - ($106))|0;
        $147 = (($146) + ($145))|0;
        $148 = ($147|0)<(0);
        $149 = (0 - ($147))|0;
        $delta2$1 = $148 ? $149 : $147;
        $150 = ($$13|0)<($delta2$1|0);
        $151 = $150 ? $136 : $145;
        $152 = ((($edge$137)) + 8|0);
        HEAP32[$152>>2] = $151;
        $153 = (($151) + ($110))|0;
        $154 = ((($47)) + 8|0);
        HEAP32[$154>>2] = $153;
        break;
       }
      } else {
       $113 = ((($47)) + 8|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = (($114) - ($110))|0;
       $116 = ((($edge$137)) + 8|0);
       HEAP32[$116>>2] = $115;
      }
     } while(0);
     $155 = HEAP8[$41>>0]|0;
     $156 = $155&255;
     $157 = $156 | 4;
     $158 = $157&255;
     HEAP8[$41>>0] = $158;
     $159 = HEAP8[$107>>0]|0;
     $160 = $159&255;
     $161 = $160 | 4;
     $162 = $161&255;
     HEAP8[$107>>0] = $162;
     $163 = ($edge$137>>>0)>($1>>>0);
     if ($163) {
      $164 = ((($edge$137)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ((($edge$137)) + -40|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($165|0)<($167|0);
      if ($168) {
       HEAP32[$164>>2] = $167;
       $anchor$4 = $anchor$336;$has_serifs$1 = $has_serifs$035;
      } else {
       $anchor$4 = $anchor$336;$has_serifs$1 = $has_serifs$035;
      }
     } else {
      $anchor$4 = $anchor$336;$has_serifs$1 = $has_serifs$035;
     }
    } else {
     $anchor$4 = $anchor$336;$has_serifs$1 = $has_serifs$035;
    }
   } while(0);
   $169 = ((($edge$137)) + 48|0);
   $170 = ($169>>>0)<($4>>>0);
   if ($170) {
    $anchor$336 = $anchor$4;$edge$137 = $169;$has_serifs$035 = $has_serifs$1;
   } else {
    $anchor$3$lcssa = $anchor$4;$has_serifs$0$lcssa = $has_serifs$1;
    break;
   }
  }
 } else {
  $anchor$3$lcssa = $anchor$3$ph;$has_serifs$0$lcssa = 0;
 }
 $$idx = ($3*48)|0;
 $171 = ($dim|0)==(0);
 L48: do {
  if ($171) {
   $172 = ($$idx|0)==(576);
   switch ($$idx|0) {
   case 288:  {
    $175 = 2;$181 = 4;$edge18$0 = $1;
    break;
   }
   case 576:  {
    $173 = ((($1)) + 48|0);
    $175 = 5;$181 = 9;$edge18$0 = $173;
    break;
   }
   default: {
    break L48;
   }
   }
   $174 = (((($1) + (($175*48)|0)|0)) + 4|0);
   $176 = HEAP32[$174>>2]|0;
   $177 = ((($edge18$0)) + 4|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($176) - ($178))|0;
   $180 = (((($1) + (($181*48)|0)|0)) + 4|0);
   $182 = HEAP32[$180>>2]|0;
   $183 = (($176) - ($182))|0;
   $184 = (($183) + ($179))|0;
   $185 = ($184|0)<(0);
   $186 = (0 - ($184))|0;
   $$14 = $185 ? $186 : $184;
   $187 = ($$14|0)<(8);
   if ($187) {
    $188 = (((($1) + (($181*48)|0)|0)) + 8|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (((($1) + (($175*48)|0)|0)) + 8|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = $191 << 1;
    $193 = ((($edge18$0)) + 8|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = (($192) - ($194))|0;
    $196 = (($189) - ($195))|0;
    HEAP32[$188>>2] = $195;
    $197 = (((($1) + (($181*48)|0)|0)) + 24|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = ($198|0)==(0|0);
    if (!($199)) {
     $200 = ((($198)) + 8|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (($201) - ($196))|0;
     HEAP32[$200>>2] = $202;
    }
    if ($172) {
     $203 = ((($1)) + 392|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = (($204) - ($196))|0;
     HEAP32[$203>>2] = $205;
     $206 = ((($1)) + 536|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) - ($196))|0;
     HEAP32[$206>>2] = $208;
    }
    $209 = (((($1) + (($181*48)|0)|0)) + 12|0);
    $210 = HEAP8[$209>>0]|0;
    $211 = $210&255;
    $212 = $211 | 4;
    $213 = $212&255;
    HEAP8[$209>>0] = $213;
    $214 = HEAP32[$197>>2]|0;
    $215 = ($214|0)==(0|0);
    if (!($215)) {
     $216 = ((($214)) + 12|0);
     $217 = HEAP8[$216>>0]|0;
     $218 = $217&255;
     $219 = $218 | 4;
     $220 = $219&255;
     HEAP8[$216>>0] = $220;
    }
   }
  }
 } while(0);
 $notlhs = ($has_serifs$0$lcssa|0)!=(0);
 $notrhs = ($anchor$3$lcssa|0)==(0|0);
 $or$cond3$not = $notrhs | $notlhs;
 $221 = ($3|0)>(0);
 $or$cond61 = $or$cond3$not & $221;
 if ($or$cond61) {
  $anchor$531 = $anchor$3$lcssa;$edge$232 = $1;
 } else {
  return;
 }
 while(1) {
  $222 = ((($edge$232)) + 12|0);
  $223 = HEAP8[$222>>0]|0;
  $224 = $223 & 4;
  $225 = ($224<<24>>24)==(0);
  if ($225) {
   $226 = ((($edge$232)) + 28|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = ($227|0)==(0|0);
   if ($228) {
    label = 47;
   } else {
    $229 = ((($227)) + 4|0);
    $230 = HEAP32[$229>>2]|0;
    $231 = ((($edge$232)) + 4|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = (($230) - ($232))|0;
    $234 = ($233|0)<(0);
    $235 = (0 - ($233))|0;
    $$15 = $234 ? $235 : $233;
    $236 = ($$15|0)<(80);
    if ($236) {
     $237 = HEAP32[$226>>2]|0;
     _af_latin_align_serif_edge($237,$edge$232);
     $anchor$6 = $anchor$531;
    } else {
     label = 47;
    }
   }
   do {
    if ((label|0) == 47) {
     label = 0;
     $238 = ($anchor$531|0)==(0|0);
     if ($238) {
      $239 = ((($edge$232)) + 4|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = (($240) + 32)|0;
      $242 = $241 & -64;
      $243 = ((($edge$232)) + 8|0);
      HEAP32[$243>>2] = $242;
      $anchor$6 = $edge$232;
      break;
     } else {
      $edge$2$pn = $edge$232;
     }
     while(1) {
      $before$0 = ((($edge$2$pn)) + -48|0);
      $244 = ($before$0>>>0)>=($1>>>0);
      if (!($244)) {
       $$lcssa = $244;$before$0$lcssa = $before$0;$edge$2$pn$lcssa = $edge$2$pn;
       break;
      }
      $245 = ((($edge$2$pn)) + -36|0);
      $246 = HEAP8[$245>>0]|0;
      $247 = $246 & 4;
      $248 = ($247<<24>>24)==(0);
      if ($248) {
       $edge$2$pn = $before$0;
      } else {
       $$lcssa = $244;$before$0$lcssa = $before$0;$edge$2$pn$lcssa = $edge$2$pn;
       break;
      }
     }
     $edge$2$pn4 = $edge$232;
     while(1) {
      $after$0 = ((($edge$2$pn4)) + 48|0);
      $249 = ($after$0>>>0)<($4>>>0);
      if (!($249)) {
       break;
      }
      $250 = ((($edge$2$pn4)) + 60|0);
      $251 = HEAP8[$250>>0]|0;
      $252 = $251 & 4;
      $253 = ($252<<24>>24)==(0);
      if ($253) {
       $edge$2$pn4 = $after$0;
      } else {
       $$lcssa73 = $249;$after$0$lcssa71 = $after$0;$edge$2$pn4$lcssa70 = $edge$2$pn4;
       label = 54;
       break;
      }
     }
     if ((label|0) == 54) {
      label = 0;
      $254 = ($before$0$lcssa>>>0)<($edge$232>>>0);
      $or$cond = $$lcssa & $254;
      $brmerge$demorgan = $or$cond & $$lcssa73;
      $255 = ($after$0$lcssa71>>>0)>($edge$232>>>0);
      $or$cond16 = $255 & $brmerge$demorgan;
      if ($or$cond16) {
       $256 = ((($edge$2$pn4$lcssa70)) + 52|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = ((($edge$2$pn$lcssa)) + -44|0);
       $259 = HEAP32[$258>>2]|0;
       $260 = ($257|0)==($259|0);
       $261 = ((($edge$2$pn$lcssa)) + -40|0);
       $262 = HEAP32[$261>>2]|0;
       if ($260) {
        $263 = ((($edge$232)) + 8|0);
        HEAP32[$263>>2] = $262;
        $anchor$6 = $anchor$531;
        break;
       } else {
        $264 = ((($edge$232)) + 4|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = (($265) - ($259))|0;
        $267 = ((($edge$2$pn4$lcssa70)) + 56|0);
        $268 = HEAP32[$267>>2]|0;
        $269 = (($268) - ($262))|0;
        $270 = (($257) - ($259))|0;
        $271 = (_FT_MulDiv($266,$269,$270)|0);
        $272 = (($271) + ($262))|0;
        $273 = ((($edge$232)) + 8|0);
        HEAP32[$273>>2] = $272;
        $anchor$6 = $anchor$531;
        break;
       }
      }
     }
     $274 = ((($anchor$531)) + 8|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = ((($edge$232)) + 4|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ((($anchor$531)) + 4|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = (($277) + 16)|0;
     $281 = (($280) - ($279))|0;
     $282 = $281 & -32;
     $283 = (($282) + ($275))|0;
     $284 = ((($edge$232)) + 8|0);
     HEAP32[$284>>2] = $283;
     $anchor$6 = $anchor$531;
    }
   } while(0);
   $285 = HEAP8[$222>>0]|0;
   $286 = $285&255;
   $287 = $286 | 4;
   $288 = $287&255;
   HEAP8[$222>>0] = $288;
   $289 = ($edge$232>>>0)>($1>>>0);
   if ($289) {
    $290 = ((($edge$232)) + 8|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = ((($edge$232)) + -40|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = ($291|0)<($293|0);
    if ($294) {
     HEAP32[$290>>2] = $293;
    }
   }
   $295 = ((($edge$232)) + 48|0);
   $296 = ($295>>>0)<($4>>>0);
   if ($296) {
    $297 = ((($edge$232)) + 60|0);
    $298 = HEAP8[$297>>0]|0;
    $299 = $298 & 4;
    $300 = ($299<<24>>24)==(0);
    if ($300) {
     $anchor$7 = $anchor$6;
    } else {
     $301 = ((($edge$232)) + 8|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = ((($edge$232)) + 56|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = ($302|0)>($304|0);
     if ($305) {
      HEAP32[$301>>2] = $304;
      $anchor$7 = $anchor$6;
     } else {
      $anchor$7 = $anchor$6;
     }
    }
   } else {
    $anchor$7 = $anchor$6;
   }
  } else {
   $anchor$7 = $anchor$531;
  }
  $306 = ((($edge$232)) + 48|0);
  $307 = ($306>>>0)<($4>>>0);
  if ($307) {
   $anchor$531 = $anchor$7;$edge$232 = $306;
  } else {
   break;
  }
 }
 return;
}
function _af_latin_metrics_init_blues($metrics,$face) {
 $metrics = $metrics|0;
 $face = $face|0;
 var $$ = 0, $$off = 0, $$off16 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bb$059 = 0, $best_first$0$first$0 = 0, $best_first$035 = 0, $best_first$1 = 0, $best_first$1$lcssa = 0;
 var $best_last$0$ = 0, $best_last$036 = 0, $best_last$1 = 0, $best_last$1$lcssa = 0, $best_point$037 = 0, $best_point$123 = 0, $best_point$2 = 0, $best_point$328 = 0, $best_point$4 = 0, $best_point$5 = 0, $best_point$6 = 0, $best_point$6$lcssa = 0, $best_y$0$lcssa64 = 0, $best_y$042 = 0, $best_y$124 = 0, $best_y$2 = 0, $best_y$329 = 0, $best_y$4 = 0, $best_y$5 = 0, $best_y$6 = 0;
 var $best_y$6$lcssa = 0, $exitcond = 0, $first$040 = 0, $flats = 0, $next$0 = 0, $next$1 = 0, $next$1$lcssa = 0, $nn$039 = 0, $num_flats$0$lcssa = 0, $num_flats$051 = 0, $num_flats$1 = 0, $num_rounds$0$lcssa = 0, $num_rounds$050 = 0, $num_rounds$1 = 0, $or$cond = 0, $or$cond17 = 0, $p$049 = 0, $pp$025 = 0, $pp$130 = 0, $prev$0 = 0;
 var $prev$1 = 0, $prev$1$lcssa = 0, $rounds = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $flats = sp + 48|0;
 $rounds = sp;
 $0 = ((($face)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($metrics)) + 652|0);
 $3 = ((($1)) + 110|0);
 $4 = ((($1)) + 112|0);
 $5 = ((($1)) + 108|0);
 $6 = ((($1)) + 116|0);
 $7 = ((($1)) + 120|0);
 $bb$059 = 0;
 while(1) {
  $8 = (((26669 + (($bb$059*13)|0)|0)) + 12|0);
  $9 = (26669 + (($bb$059*13)|0)|0);
  $num_flats$051 = 0;$num_rounds$050 = 0;$p$049 = $9;
  while(1) {
   $10 = HEAP8[$p$049>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $num_flats$0$lcssa = $num_flats$051;$num_rounds$0$lcssa = $num_rounds$050;
    break;
   }
   $12 = $10 << 24 >> 24;
   $13 = (_FT_Get_Char_Index($face,$12)|0);
   $14 = ($13|0)==(0);
   L6: do {
    if ($14) {
     $num_flats$1 = $num_flats$051;$num_rounds$1 = $num_rounds$050;
    } else {
     $15 = (_FT_Load_Glyph($face,$13,1)|0);
     $16 = ($15|0)==(0);
     if ($16) {
      $17 = HEAP16[$3>>1]|0;
      $18 = ($17<<16>>16)<(1);
      if ($18) {
       $num_flats$1 = $num_flats$051;$num_rounds$1 = $num_rounds$050;
      } else {
       $19 = HEAP32[$4>>2]|0;
       $20 = HEAP16[$5>>1]|0;
       $21 = ($20<<16>>16)>(0);
       do {
        if ($21) {
         $22 = HEAP32[$7>>2]|0;
         $23 = HEAP16[$5>>1]|0;
         $24 = $23 << 16 >> 16;
         $best_first$035 = 0;$best_last$036 = 0;$best_point$037 = -1;$best_y$042 = 0;$first$040 = 0;$nn$039 = 0;
         while(1) {
          $25 = (($22) + ($nn$039<<1)|0);
          $26 = HEAP16[$25>>1]|0;
          $27 = $26 << 16 >> 16;
          $28 = ($27|0)>($first$040|0);
          if ($28) {
           switch ($bb$059|0) {
           case 0: case 2: case 3:  {
            $29 = ($first$040|0)>($27|0);
            if ($29) {
             $best_point$5 = $best_point$037;$best_y$5 = $best_y$042;
            } else {
             $best_point$123 = $best_point$037;$best_y$124 = $best_y$042;$pp$025 = $first$040;
             while(1) {
              $31 = ($best_point$123|0)<(0);
              if ($31) {
               label = 15;
              } else {
               $32 = (((($19) + ($pp$025<<3)|0)) + 4|0);
               $33 = HEAP32[$32>>2]|0;
               $34 = ($33|0)>($best_y$124|0);
               if ($34) {
                label = 15;
               } else {
                $best_point$2 = $best_point$123;$best_y$2 = $best_y$124;
               }
              }
              if ((label|0) == 15) {
               label = 0;
               $35 = (((($19) + ($pp$025<<3)|0)) + 4|0);
               $36 = HEAP32[$35>>2]|0;
               $best_point$2 = $pp$025;$best_y$2 = $36;
              }
              $37 = (($pp$025) + 1)|0;
              $38 = ($pp$025|0)<($27|0);
              if ($38) {
               $best_point$123 = $best_point$2;$best_y$124 = $best_y$2;$pp$025 = $37;
              } else {
               $best_point$5 = $best_point$2;$best_y$5 = $best_y$2;
               break;
              }
             }
            }
            break;
           }
           default: {
            $30 = ($first$040|0)>($27|0);
            if ($30) {
             $best_point$5 = $best_point$037;$best_y$5 = $best_y$042;
            } else {
             $best_point$328 = $best_point$037;$best_y$329 = $best_y$042;$pp$130 = $first$040;
             while(1) {
              $39 = ($best_point$328|0)<(0);
              if ($39) {
               label = 19;
              } else {
               $40 = (((($19) + ($pp$130<<3)|0)) + 4|0);
               $41 = HEAP32[$40>>2]|0;
               $42 = ($41|0)<($best_y$329|0);
               if ($42) {
                label = 19;
               } else {
                $best_point$4 = $best_point$328;$best_y$4 = $best_y$329;
               }
              }
              if ((label|0) == 19) {
               label = 0;
               $43 = (((($19) + ($pp$130<<3)|0)) + 4|0);
               $44 = HEAP32[$43>>2]|0;
               $best_point$4 = $pp$130;$best_y$4 = $44;
              }
              $45 = (($pp$130) + 1)|0;
              $46 = ($pp$130|0)<($27|0);
              if ($46) {
               $best_point$328 = $best_point$4;$best_y$329 = $best_y$4;$pp$130 = $45;
              } else {
               $best_point$5 = $best_point$4;$best_y$5 = $best_y$4;
               break;
              }
             }
            }
           }
           }
           $47 = ($best_point$5|0)==($best_point$037|0);
           $best_first$0$first$0 = $47 ? $best_first$035 : $first$040;
           $best_last$0$ = $47 ? $best_last$036 : $27;
           $best_first$1 = $best_first$0$first$0;$best_last$1 = $best_last$0$;$best_point$6 = $best_point$5;$best_y$6 = $best_y$5;
          } else {
           $best_first$1 = $best_first$035;$best_last$1 = $best_last$036;$best_point$6 = $best_point$037;$best_y$6 = $best_y$042;
          }
          $48 = (($27) + 1)|0;
          $49 = (($nn$039) + 1)|0;
          $50 = ($49|0)<($24|0);
          if ($50) {
           $best_first$035 = $best_first$1;$best_last$036 = $best_last$1;$best_point$037 = $best_point$6;$best_y$042 = $best_y$6;$first$040 = $48;$nn$039 = $49;
          } else {
           $best_first$1$lcssa = $best_first$1;$best_last$1$lcssa = $best_last$1;$best_point$6$lcssa = $best_point$6;$best_y$6$lcssa = $best_y$6;
           break;
          }
         }
         $51 = ($best_point$6$lcssa|0)>(-1);
         if ($51) {
          $52 = (5 - ($best_y$6$lcssa))|0;
          $prev$0 = $best_point$6$lcssa;
          while(1) {
           $53 = ($prev$0|0)>($best_first$1$lcssa|0);
           $54 = (($prev$0) + -1)|0;
           $prev$1 = $53 ? $54 : $best_last$1$lcssa;
           $55 = (((($19) + ($prev$1<<3)|0)) + 4|0);
           $56 = HEAP32[$55>>2]|0;
           $$off = (($52) + ($56))|0;
           $57 = ($$off>>>0)>(10);
           $58 = ($prev$1|0)==($best_point$6$lcssa|0);
           $or$cond = $58 | $57;
           if ($or$cond) {
            $prev$1$lcssa = $prev$1;
            break;
           } else {
            $prev$0 = $prev$1;
           }
          }
          $59 = (5 - ($best_y$6$lcssa))|0;
          $next$0 = $best_point$6$lcssa;
          while(1) {
           $60 = ($next$0|0)<($best_last$1$lcssa|0);
           $61 = (($next$0) + 1)|0;
           $next$1 = $60 ? $61 : $best_first$1$lcssa;
           $62 = (((($19) + ($next$1<<3)|0)) + 4|0);
           $63 = HEAP32[$62>>2]|0;
           $$off16 = (($59) + ($63))|0;
           $64 = ($$off16>>>0)>(10);
           $65 = ($next$1|0)==($best_point$6$lcssa|0);
           $or$cond17 = $65 | $64;
           if ($or$cond17) {
            $next$1$lcssa = $next$1;
            break;
           } else {
            $next$0 = $next$1;
           }
          }
          $66 = HEAP32[$6>>2]|0;
          $67 = (($66) + ($prev$1$lcssa)|0);
          $68 = HEAP8[$67>>0]|0;
          $69 = $68 & 3;
          $70 = ($69<<24>>24)==(1);
          if ($70) {
           $71 = (($66) + ($next$1$lcssa)|0);
           $72 = HEAP8[$71>>0]|0;
           $73 = $72 & 3;
           $74 = ($73<<24>>24)==(1);
           if ($74) {
            $best_y$0$lcssa64 = $best_y$6$lcssa;
            break;
           }
          }
          $75 = (($num_rounds$050) + 1)|0;
          $76 = (($rounds) + ($num_rounds$050<<2)|0);
          HEAP32[$76>>2] = $best_y$6$lcssa;
          $num_flats$1 = $num_flats$051;$num_rounds$1 = $75;
          break L6;
         } else {
          $best_y$0$lcssa64 = $best_y$6$lcssa;
         }
        } else {
         $best_y$0$lcssa64 = 0;
        }
       } while(0);
       $77 = (($num_flats$051) + 1)|0;
       $78 = (($flats) + ($num_flats$051<<2)|0);
       HEAP32[$78>>2] = $best_y$0$lcssa64;
       $num_flats$1 = $77;$num_rounds$1 = $num_rounds$050;
      }
     } else {
      $num_flats$1 = $num_flats$051;$num_rounds$1 = $num_rounds$050;
     }
    }
   } while(0);
   $79 = ((($p$049)) + 1|0);
   $80 = ($79>>>0)<($8>>>0);
   if ($80) {
    $num_flats$051 = $num_flats$1;$num_rounds$050 = $num_rounds$1;$p$049 = $79;
   } else {
    $num_flats$0$lcssa = $num_flats$1;$num_rounds$0$lcssa = $num_rounds$1;
    break;
   }
  }
  $81 = ($num_rounds$0$lcssa|0)==(0);
  $82 = $num_flats$0$lcssa | $num_rounds$0$lcssa;
  $83 = ($82|0)==(0);
  if (!($83)) {
   $84 = ($num_flats$0$lcssa|0)==(0);
   _af_sort_pos($num_rounds$0$lcssa,$rounds);
   _af_sort_pos($num_flats$0$lcssa,$flats);
   $85 = HEAP32[$2>>2]|0;
   $86 = (((($metrics)) + 656|0) + (($85*28)|0)|0);
   $87 = (((((($metrics)) + 656|0) + (($85*28)|0)|0)) + 12|0);
   $88 = (($85) + 1)|0;
   HEAP32[$2>>2] = $88;
   do {
    if ($84) {
     $89 = (($num_rounds$0$lcssa|0) / 2)&-1;
     $90 = (($rounds) + ($89<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     HEAP32[$87>>2] = $91;
     HEAP32[$86>>2] = $91;
    } else {
     $92 = (($num_flats$0$lcssa|0) / 2)&-1;
     $93 = (($flats) + ($92<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     if ($81) {
      HEAP32[$87>>2] = $94;
      HEAP32[$86>>2] = $94;
      break;
     } else {
      HEAP32[$86>>2] = $94;
      $95 = (($num_rounds$0$lcssa|0) / 2)&-1;
      $96 = (($rounds) + ($95<<2)|0);
      $97 = HEAP32[$96>>2]|0;
      HEAP32[$87>>2] = $97;
      break;
     }
    }
   } while(0);
   $98 = HEAP32[$87>>2]|0;
   $99 = HEAP32[$86>>2]|0;
   $100 = ($98|0)==($99|0);
   if (!($100)) {
    $101 = ($98|0)>($99|0);
    $102 = $bb$059 & -3;
    $103 = ($102|0)==(0);
    $104 = ($bb$059|0)==(3);
    $$ = $104 | $103;
    $105 = $$ ^ $101;
    if ($105) {
     $106 = (($99) + ($98))|0;
     $107 = (($106|0) / 2)&-1;
     HEAP32[$87>>2] = $107;
     HEAP32[$86>>2] = $107;
    }
   }
   $108 = (((((($metrics)) + 656|0) + (($85*28)|0)|0)) + 24|0);
   $109 = ($bb$059|0)==(3);
   switch ($bb$059|0) {
   case 0: case 2: case 3:  {
    $storemerge = 2;
    break;
   }
   default: {
    $storemerge = 0;
   }
   }
   HEAP32[$108>>2] = $storemerge;
   if ($109) {
    $110 = $storemerge | 4;
    HEAP32[$108>>2] = $110;
    $bb$059 = 4;
    continue;
   }
  }
  $111 = (($bb$059) + 1)|0;
  $exitcond = ($111|0)==(6);
  if ($exitcond) {
   break;
  } else {
   $bb$059 = $111;
  }
 }
 STACKTOP = sp;return;
}
function _af_latin_metrics_scale_dim($metrics,$scaler,$dim) {
 $metrics = $metrics|0;
 $scaler = $scaler|0;
 $dim = $dim|0;
 var $$ = 0, $$4 = 0, $$delta2$1 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $delta$0 = 0, $delta$0$in = 0, $delta2$1 = 0, $nn$010 = 0;
 var $nn$010$lcssa = 0, $nn$18 = 0, $nn$27 = 0, $or$cond3 = 0, $scale$0 = 0, $scale$0$in = 0, $scale$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dim|0)==(0);
 $1 = ((($scaler)) + 4|0);
 $2 = ((($scaler)) + 12|0);
 $3 = ((($scaler)) + 8|0);
 $4 = ((($scaler)) + 16|0);
 $delta$0$in = $0 ? $2 : $4;
 $scale$0$in = $0 ? $1 : $3;
 $scale$0 = HEAP32[$scale$0$in>>2]|0;
 $delta$0 = HEAP32[$delta$0$in>>2]|0;
 $5 = (((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 388|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($scale$0|0);
 if ($7) {
  $8 = (((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 392|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($delta$0|0);
  if ($10) {
   return;
  }
 }
 HEAP32[$5>>2] = $scale$0;
 $11 = (((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 392|0);
 HEAP32[$11>>2] = $delta$0;
 $12 = ((($metrics)) + 652|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 L5: do {
  if ($14) {
   $scale$1 = $scale$0;
  } else {
   $nn$010 = 0;
   while(1) {
    $15 = (((((($metrics)) + 656|0) + (($nn$010*28)|0)|0)) + 24|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 & 4;
    $18 = ($17|0)==(0);
    if (!($18)) {
     $nn$010$lcssa = $nn$010;
     break;
    }
    $19 = (($nn$010) + 1)|0;
    $20 = HEAP32[$12>>2]|0;
    $21 = ($19>>>0)<($20>>>0);
    if ($21) {
     $nn$010 = $19;
    } else {
     $scale$1 = $scale$0;
     break L5;
    }
   }
   $22 = (((((($metrics)) + 656|0) + (($nn$010$lcssa*28)|0)|0)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$3>>2]|0;
   $25 = (_FT_MulFix($23,$24)|0);
   $26 = (($25) + 40)|0;
   $27 = $26 & -64;
   $28 = ($25|0)!=($27|0);
   $29 = ($dim|0)==(1);
   $or$cond3 = $29 & $28;
   if ($or$cond3) {
    $30 = (_FT_MulDiv($scale$0,$27,$25)|0);
    $scale$1 = $30;
   } else {
    $scale$1 = $scale$0;
   }
  }
 } while(0);
 $31 = (((($metrics)) + 40|0) + (($dim*396)|0)|0);
 HEAP32[$31>>2] = $scale$1;
 $32 = (((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 4|0);
 HEAP32[$32>>2] = $delta$0;
 if ($0) {
  $33 = ((($metrics)) + 8|0);
  HEAP32[$33>>2] = $scale$1;
  $34 = ((($metrics)) + 16|0);
  HEAP32[$34>>2] = $delta$0;
 } else {
  $35 = ((($metrics)) + 12|0);
  HEAP32[$35>>2] = $scale$1;
  $36 = ((($metrics)) + 20|0);
  HEAP32[$36>>2] = $delta$0;
 }
 $37 = (((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0);
 if (!($39)) {
  $nn$18 = 0;
  while(1) {
   $40 = ((((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 12|0) + (($nn$18*12)|0)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (_FT_MulFix($41,$scale$1)|0);
   $43 = ((((((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 12|0) + (($nn$18*12)|0)|0)) + 4|0);
   HEAP32[$43>>2] = $42;
   $44 = ((((((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 12|0) + (($nn$18*12)|0)|0)) + 8|0);
   HEAP32[$44>>2] = $42;
   $45 = (($nn$18) + 1)|0;
   $46 = HEAP32[$37>>2]|0;
   $47 = ($45>>>0)<($46>>>0);
   if ($47) {
    $nn$18 = $45;
   } else {
    break;
   }
  }
 }
 $48 = (((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 208|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (_FT_MulFix($49,$scale$1)|0);
 $51 = ($50|0)<(40);
 $52 = $51&1;
 $53 = (((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 212|0);
 HEAP8[$53>>0] = $52;
 $54 = ($dim|0)==(1);
 if (!($54)) {
  return;
 }
 $55 = (((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 216|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)==(0);
 if ($57) {
  return;
 }
 $58 = ($delta$0|0)<(48);
 $$4 = $58 ? 32 : 64;
 $nn$27 = 0;
 while(1) {
  $59 = ((((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 220|0) + (($nn$27*28)|0)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (_FT_MulFix($60,$scale$1)|0);
  $62 = (($61) + ($delta$0))|0;
  $63 = ((((((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 220|0) + (($nn$27*28)|0)|0)) + 4|0);
  HEAP32[$63>>2] = $62;
  $64 = ((((((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 220|0) + (($nn$27*28)|0)|0)) + 8|0);
  HEAP32[$64>>2] = $62;
  $65 = ((((((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 220|0) + (($nn$27*28)|0)|0)) + 12|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (_FT_MulFix($66,$scale$1)|0);
  $68 = (($67) + ($delta$0))|0;
  $69 = ((((((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 220|0) + (($nn$27*28)|0)|0)) + 16|0);
  HEAP32[$69>>2] = $68;
  $70 = ((((((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 220|0) + (($nn$27*28)|0)|0)) + 20|0);
  HEAP32[$70>>2] = $68;
  $71 = ((((((((($metrics)) + 40|0) + (($dim*396)|0)|0)) + 220|0) + (($nn$27*28)|0)|0)) + 24|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $72 & -2;
  HEAP32[$71>>2] = $73;
  $74 = HEAP32[$59>>2]|0;
  $75 = HEAP32[$65>>2]|0;
  $76 = (($74) - ($75))|0;
  $77 = (_FT_MulFix($76,$scale$1)|0);
  $$off = (($77) + 48)|0;
  $78 = ($$off>>>0)<(97);
  if ($78) {
   $79 = ($77|0)<(0);
   $80 = (0 - ($77))|0;
   $$ = $79 ? $80 : $77;
   $81 = ($$|0)<(32);
   $delta2$1 = $81 ? 0 : $$4;
   $82 = (0 - ($delta2$1))|0;
   $$delta2$1 = $79 ? $82 : $delta2$1;
   $83 = HEAP32[$63>>2]|0;
   $84 = (($83) + 32)|0;
   $85 = $84 & -64;
   HEAP32[$64>>2] = $85;
   $86 = (($85) - ($$delta2$1))|0;
   HEAP32[$70>>2] = $86;
   $87 = HEAP32[$71>>2]|0;
   $88 = $87 | 1;
   HEAP32[$71>>2] = $88;
  }
  $89 = (($nn$27) + 1)|0;
  $90 = HEAP32[$55>>2]|0;
  $91 = ($89>>>0)<($90>>>0);
  if ($91) {
   $nn$27 = $89;
  } else {
   break;
  }
 }
 return;
}
function _af_latin_align_linked_edge($hints,$dim,$base_edge,$stem_edge) {
 $hints = $hints|0;
 $dim = $dim|0;
 $base_edge = $base_edge|0;
 $stem_edge = $stem_edge|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stem_edge)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($base_edge)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 $5 = ((($base_edge)) + 12|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ((($stem_edge)) + 12|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (_af_latin_compute_stem_width($hints,$dim,$4,$7,$10)|0);
 $12 = ((($base_edge)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($11))|0;
 $15 = ((($stem_edge)) + 8|0);
 HEAP32[$15>>2] = $14;
 return;
}
function _af_latin_compute_stem_width($hints,$dim,$width,$base_flags,$stem_flags) {
 $hints = $hints|0;
 $dim = $dim|0;
 $width = $width|0;
 $base_flags = $base_flags|0;
 $stem_flags = $stem_flags|0;
 var $$ = 0, $$$width = 0, $$$width5 = 0, $$0 = 0, $$6 = 0, $$7 = 0, $$dist$1 = 0, $$width = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $8 = 0, $9 = 0, $dist$1 = 0, $dist$2 = 0, $dist$2$ = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hints)) + 108|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($dim|0)==(1);
 $3 = ((($hints)) + 104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = $width;
  return ($$0|0);
 }
 $7 = (((((($1)) + 40|0) + (($dim*396)|0)|0)) + 212|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  $$0 = $width;
  return ($$0|0);
 }
 $10 = ($width|0)<(0);
 $11 = (0 - ($width))|0;
 $$width = $10 ? $11 : $width;
 if ($2) {
  $12 = $4 & 2;
  $13 = ($12|0)==(0);
  if ($13) {
   $17 = $stem_flags & 2;
   $18 = ($17|0)!=(0);
   $or$cond = $2 & $18;
   $19 = ($$width|0)<(192);
   $or$cond3 = $19 & $or$cond;
   if ($or$cond3) {
    $dist$2 = $$width;
   } else {
    label = 7;
   }
  } else {
   label = 16;
  }
 } else {
  $14 = HEAP32[$3>>2]|0;
  $15 = $14 & 1;
  $16 = ($15|0)==(0);
  if ($16) {
   label = 7;
  } else {
   label = 16;
  }
 }
 do {
  if ((label|0) == 7) {
   $20 = $base_flags & 1;
   $21 = ($20|0)==(0);
   $22 = ($$width|0)<(80);
   $$$width = $22 ? 64 : $$width;
   $23 = ($$width|0)<(56);
   $$$width5 = $23 ? 56 : $$width;
   $dist$1 = $21 ? $$$width5 : $$$width;
   $24 = (((((($1)) + 40|0) + (($dim*396)|0)|0)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    $dist$2 = $dist$1;
   } else {
    $27 = (((((($1)) + 40|0) + (($dim*396)|0)|0)) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($dist$1) - ($28))|0;
    $30 = ($29|0)<(0);
    $31 = (0 - ($29))|0;
    $$6 = $30 ? $31 : $29;
    $32 = ($$6|0)<(40);
    if ($32) {
     $33 = ($28|0)<(48);
     $$ = $33 ? 48 : $28;
     $dist$2 = $$;
     break;
    }
    $34 = ($dist$1|0)<(192);
    if (!($34)) {
     $42 = (($dist$1) + 32)|0;
     $43 = $42 & -64;
     $dist$2 = $43;
     break;
    }
    $35 = $dist$1 & 63;
    $36 = $dist$1 & -64;
    $37 = ($35>>>0)<(10);
    if ($37) {
     $dist$2 = $dist$1;
    } else {
     $38 = ($35>>>0)<(32);
     if ($38) {
      $39 = $36 | 10;
      $dist$2 = $39;
      break;
     } else {
      $40 = ($35>>>0)<(54);
      $41 = $36 | 54;
      $$dist$1 = $40 ? $41 : $dist$1;
      $dist$2 = $$dist$1;
      break;
     }
    }
   }
  }
  else if ((label|0) == 16) {
   $44 = (((((($1)) + 40|0) + (($dim*396)|0)|0)) + 12|0);
   $45 = (((((($1)) + 40|0) + (($dim*396)|0)|0)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (_af_latin_snap_width($44,$46,$$width)|0);
   if ($2) {
    $48 = ($47|0)>(63);
    if (!($48)) {
     $dist$2 = 64;
     break;
    }
    $49 = (($47) + 16)|0;
    $50 = $49 & -64;
    $dist$2 = $50;
    break;
   }
   $51 = HEAP32[$3>>2]|0;
   $52 = $51 & 8;
   $53 = ($52|0)==(0);
   if (!($53)) {
    $54 = ($47|0)<(64);
    if ($54) {
     $dist$2 = 64;
     break;
    }
    $55 = (($47) + 32)|0;
    $56 = $55 & -64;
    $dist$2 = $56;
    break;
   }
   $57 = ($47|0)<(48);
   if ($57) {
    $58 = (($47) + 64)|0;
    $59 = $58 >> 1;
    $dist$2 = $59;
    break;
   }
   $60 = ($47|0)<(128);
   if (!($60)) {
    $70 = (($47) + 32)|0;
    $71 = $70 & -64;
    $dist$2 = $71;
    break;
   }
   $61 = (($47) + 22)|0;
   $62 = $61 & -64;
   $63 = (($62) - ($$width))|0;
   $64 = ($63|0)<(0);
   $65 = (0 - ($63))|0;
   $$7 = $64 ? $65 : $63;
   $66 = ($$7|0)>(15);
   if ($66) {
    $67 = ($$width|0)<(48);
    if ($67) {
     $68 = (($$width) + 64)|0;
     $69 = $68 >> 1;
     $dist$2 = $69;
    } else {
     $dist$2 = $$width;
    }
   } else {
    $dist$2 = $62;
   }
  }
 } while(0);
 $72 = ($width|0)>(-1);
 $73 = (0 - ($dist$2))|0;
 $dist$2$ = $72 ? $dist$2 : $73;
 $$0 = $dist$2$;
 return ($$0|0);
}
function _af_latin_align_serif_edge($base,$serif) {
 $base = $base|0;
 $serif = $serif|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($base)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($serif)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($base)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($1))|0;
 $7 = (($6) - ($5))|0;
 $8 = ((($serif)) + 8|0);
 HEAP32[$8>>2] = $7;
 return;
}
function _af_latin_hints_init($hints,$metrics) {
 $hints = $hints|0;
 $metrics = $metrics|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond3 = 0, $other_flags$1 = 0, $other_flags$1$ = 0, $other_flags$3 = 0, $scaler_flags$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($metrics)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 _af_glyph_hints_rescale($hints,$metrics);
 $2 = ((($metrics)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($hints)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($metrics)) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($hints)) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($metrics)) + 436|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($hints)) + 12|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($metrics)) + 440|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($hints)) + 16|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($metrics)) + 24|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($hints)) + 100|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($15|0)==(2);
 $19 = $15 & -2;
 $20 = ($19|0)==(2);
 $$ = $20&1;
 $21 = ($15|0)==(4);
 $or$cond3 = $18 | $21;
 $22 = $$ | 2;
 $other_flags$1 = $or$cond3 ? $22 : $$;
 $23 = ($15|0)==(1);
 $24 = $other_flags$1 | 4;
 $other_flags$1$ = $23 ? $other_flags$1 : $24;
 $25 = $other_flags$1$ | 8;
 $other_flags$3 = $18 ? $25 : $other_flags$1$;
 if (!($23)) {
  $26 = ((($1)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & 1;
  $29 = ($28|0)==(0);
  if ($29) {
   $scaler_flags$0 = $17;
   HEAP32[$16>>2] = $scaler_flags$0;
   $31 = ((($hints)) + 104|0);
   HEAP32[$31>>2] = $other_flags$3;
   return 0;
  }
 }
 $30 = $17 | 1;
 $scaler_flags$0 = $30;
 HEAP32[$16>>2] = $scaler_flags$0;
 $31 = ((($hints)) + 104|0);
 HEAP32[$31>>2] = $other_flags$3;
 return 0;
}
function _af_latin_hints_apply($hints,$outline,$metrics) {
 $hints = $hints|0;
 $outline = $outline|0;
 $metrics = $metrics|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_af_glyph_hints_reload($hints,$outline)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $error$2 = $0;
  return ($error$2|0);
 }
 $2 = ((($hints)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (_af_latin_hints_detect_features($hints,0)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $error$2 = $6;
   return ($error$2|0);
  }
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = $8 & 2;
 $10 = ($9|0)==(0);
 do {
  if ($10) {
   $11 = (_af_latin_hints_detect_features($hints,1)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    _af_latin_hints_compute_blue_edges($hints,$metrics);
    break;
   } else {
    $error$2 = $11;
    return ($error$2|0);
   }
  }
 } while(0);
 $13 = HEAP32[$2>>2]|0;
 $14 = $13 & 1;
 $15 = ($14|0)==(0);
 if ($15) {
  _af_latin_hint_edges($hints,0);
  _af_glyph_hints_align_edge_points($hints,0);
  _af_glyph_hints_align_strong_points($hints,0);
  _af_glyph_hints_align_weak_points($hints,0);
 }
 $16 = HEAP32[$2>>2]|0;
 $17 = $16 & 2;
 $18 = ($17|0)==(0);
 if ($18) {
  _af_latin_hint_edges($hints,1);
  _af_glyph_hints_align_edge_points($hints,1);
  _af_glyph_hints_align_strong_points($hints,1);
  _af_glyph_hints_align_weak_points($hints,1);
 }
 _af_glyph_hints_save($hints,$outline);
 $error$2 = 0;
 return ($error$2|0);
}
function _af_latin_snap_width($widths,$count,$width) {
 $widths = $widths|0;
 $count = $count|0;
 $width = $width|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $best$02 = 0;
 var $best$1 = 0, $exitcond = 0, $n$04 = 0, $reference$0$lcssa5 = 0, $reference$0$width = 0, $reference$0$width1 = 0, $reference$03 = 0, $reference$1 = 0, $reference$1$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count|0)>(0);
 if ($0) {
  $best$02 = 98;$n$04 = 0;$reference$03 = $width;
 } else {
  $1 = (($width) + 32)|0;
  $2 = $1 & -64;
  $14 = $2;$reference$0$lcssa5 = $width;
  $13 = $14 | 48;
  $15 = ($13|0)>($width|0);
  $reference$0$width = $15 ? $reference$0$lcssa5 : $width;
  return ($reference$0$width|0);
 }
 while(1) {
  $3 = (((($widths) + (($n$04*12)|0)|0)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($width) - ($4))|0;
  $6 = ($5|0)<(0);
  $7 = (0 - ($5))|0;
  $$ = $6 ? $7 : $5;
  $8 = ($$|0)<($best$02|0);
  $best$1 = $8 ? $$ : $best$02;
  $reference$1 = $8 ? $4 : $reference$03;
  $9 = (($n$04) + 1)|0;
  $exitcond = ($9|0)==($count|0);
  if ($exitcond) {
   $reference$1$lcssa = $reference$1;
   break;
  } else {
   $best$02 = $best$1;$n$04 = $9;$reference$03 = $reference$1;
  }
 }
 $10 = (($reference$1$lcssa) + 32)|0;
 $11 = $10 & -64;
 $12 = ($reference$1$lcssa|0)>($width|0);
 if ($12) {
  $16 = (($11) + -48)|0;
  $17 = ($16|0)<($width|0);
  $reference$0$width1 = $17 ? $reference$1$lcssa : $width;
  return ($reference$0$width1|0);
 } else {
  $14 = $11;$reference$0$lcssa5 = $reference$1$lcssa;
  $13 = $14 | 48;
  $15 = ($13|0)>($width|0);
  $reference$0$width = $15 ? $reference$0$lcssa5 : $width;
  return ($reference$0$width|0);
 }
 return (0)|0;
}
function _af_loader_init($loader,$memory) {
 $loader = $loader|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($loader|0),0,180)|0;
 $0 = ((($loader)) + 12|0);
 _af_glyph_hints_init($0,$memory);
 $1 = ((($loader)) + 8|0);
 $2 = (_FT_GlyphLoader_New($memory,$1)|0);
 return ($2|0);
}
function _af_loader_reset($loader,$face) {
 $loader = $loader|0;
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$loader>>2] = $face;
 $0 = ((($face)) + 116|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($loader)) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($loader)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _FT_GlyphLoader_Rewind($4);
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $7 = (_af_face_globals_new($face,$2)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $error$0 = $7;
  return ($error$0|0);
 }
 $9 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $9;
 $10 = ((($face)) + 120|0);
 HEAP32[$10>>2] = 55;
 $error$0 = 0;
 return ($error$0|0);
}
function _af_loader_done($loader) {
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 12|0);
 _af_glyph_hints_done($0);
 HEAP32[$loader>>2] = 0;
 $1 = ((($loader)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($loader)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _FT_GlyphLoader_Done($3);
 HEAP32[$2>>2] = 0;
 return;
}
function _af_loader_load_glyph($loader,$face,$gindex,$load_flags) {
 $loader = $loader|0;
 $face = $face|0;
 $gindex = $gindex|0;
 $load_flags = $load_flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $metrics = 0, $scaler = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $scaler = sp + 4|0;
 $metrics = sp;
 $0 = ((($face)) + 88|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$scaler>>2]=0|0;HEAP32[$scaler+4>>2]=0|0;HEAP32[$scaler+8>>2]=0|0;HEAP32[$scaler+12>>2]=0|0;HEAP32[$scaler+16>>2]=0|0;HEAP32[$scaler+20>>2]=0|0;
 HEAP32[$scaler>>2] = $face;
 $3 = ((($1)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($scaler)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($scaler)) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($1)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($scaler)) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($scaler)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = $load_flags >>> 16;
 $12 = $11 & 15;
 $13 = ((($scaler)) + 20|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($scaler)) + 24|0);
 HEAP32[$14>>2] = 0;
 $15 = (_af_loader_reset($loader,$face)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ((($loader)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (_af_face_globals_get_metrics($18,$gindex,0,$metrics)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = HEAP32[$metrics>>2]|0;
 $22 = ((($loader)) + 132|0);
 HEAP32[$22>>2] = $21;
 $23 = HEAP32[$metrics>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if ($27) {
  $28 = ((($23)) + 4|0);
  ;HEAP32[$28>>2]=HEAP32[$scaler>>2]|0;HEAP32[$28+4>>2]=HEAP32[$scaler+4>>2]|0;HEAP32[$28+8>>2]=HEAP32[$scaler+8>>2]|0;HEAP32[$28+12>>2]=HEAP32[$scaler+12>>2]|0;HEAP32[$28+16>>2]=HEAP32[$scaler+16>>2]|0;HEAP32[$28+20>>2]=HEAP32[$scaler+20>>2]|0;HEAP32[$28+24>>2]=HEAP32[$scaler+24>>2]|0;
 } else {
  FUNCTION_TABLE_vii[$26 & 31]($23,$scaler);
 }
 $29 = $load_flags & -2054;
 $30 = $29 | 2049;
 $31 = HEAP32[$metrics>>2]|0;
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if (!($35)) {
  $36 = ((($loader)) + 12|0);
  $37 = (FUNCTION_TABLE_iii[$34 & 255]($36,$31)|0);
  $38 = ($37|0)==(0);
  if (!($38)) {
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $39 = (_af_loader_load_g($loader,$scaler,$gindex,$30,0)|0);
 $$0 = $39;
 STACKTOP = sp;return ($$0|0);
}
function _af_loader_load_g($loader,$scaler,$glyph_index,$load_flags,$depth) {
 $loader = $loader|0;
 $scaler = $scaler|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 $depth = $depth|0;
 var $$ = 0, $$sum = 0, $$sum6 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bbox = 0, $cur$013 = 0, $dummy = 0, $error$1 = 0, $error$2 = 0, $inverse = 0, $nn$014 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond9 = 0, $pp2x_uh$0 = 0, $switch$split2D = 0, $vvector = 0, $x$0 = 0, $y$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $inverse = sp + 48|0;
 $dummy = sp + 24|0;
 $bbox = sp + 8|0;
 $vvector = sp;
 $0 = HEAP32[$loader>>2]|0;
 $1 = ((($loader)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($loader)) + 132|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($loader)) + 12|0);
 $6 = ((($0)) + 84|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 156|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $load_flags | 8192;
 $11 = (_FT_Load_Glyph($0,$glyph_index,$10)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $error$2 = $11;
  STACKTOP = sp;return ($error$2|0);
 }
 $13 = ((($9)) + 8|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ((($loader)) + 136|0);
 HEAP8[$15>>0] = $14;
 $16 = ($14<<24>>24)==(0);
 if (!($16)) {
  $17 = ((($loader)) + 140|0);
  $18 = ((($9)) + 12|0);
  ;HEAP32[$17>>2]=HEAP32[$18>>2]|0;HEAP32[$17+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$17+12>>2]=HEAP32[$18+12>>2]|0;
  $19 = ((($loader)) + 156|0);
  $20 = ((($9)) + 28|0);
  $21 = $20;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $19;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $26;
  ;HEAP32[$inverse>>2]=HEAP32[$17>>2]|0;HEAP32[$inverse+4>>2]=HEAP32[$17+4>>2]|0;HEAP32[$inverse+8>>2]=HEAP32[$17+8>>2]|0;HEAP32[$inverse+12>>2]=HEAP32[$17+12>>2]|0;
  (_FT_Matrix_Invert($inverse)|0);
  _FT_Vector_Transform($19,$inverse);
 }
 $31 = ((($7)) + 72|0);
 $32 = HEAP32[$31>>2]|0;
 $switch$split2D = ($32|0)<(1869968492);
 L7: do {
  if ($switch$split2D) {
   switch ($32|0) {
   case 1668246896:  {
    break;
   }
   default: {
    $error$1 = 7;
    break L7;
   }
   }
   $201 = ((($7)) + 128|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = ((($2)) + 20|0);
   $204 = ((($2)) + 22|0);
   $205 = HEAP16[$204>>1]|0;
   $206 = $205 << 16 >> 16;
   $207 = (_FT_GlyphLoader_CheckSubGlyphs($2,$202)|0);
   $208 = ($207|0)==(0);
   if (!($208)) {
    $error$2 = $207;
    STACKTOP = sp;return ($error$2|0);
   }
   $209 = ((($2)) + 88|0);
   $210 = HEAP32[$209>>2]|0;
   $211 = ((($7)) + 132|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = $202 << 5;
   _memcpy(($210|0),($212|0),($213|0))|0;
   $214 = ((($2)) + 84|0);
   HEAP32[$214>>2] = $202;
   $215 = ((($2)) + 48|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ($202|0)==(0);
   if ($217) {
    $error$1 = 0;
   } else {
    $218 = ((($2)) + 52|0);
    $219 = ((($loader)) + 164|0);
    $220 = ((($loader)) + 172|0);
    $221 = (($depth) + 1)|0;
    $222 = ((($2)) + 24|0);
    $223 = ((($dummy)) + 4|0);
    $224 = ((($dummy)) + 2|0);
    $225 = ((($loader)) + 16|0);
    $226 = ((($loader)) + 20|0);
    $227 = ((($loader)) + 24|0);
    $228 = ((($loader)) + 28|0);
    $229 = ((($2)) + 24|0);
    $nn$014 = 0;
    while(1) {
     $230 = HEAP32[$218>>2]|0;
     $$sum = (($nn$014) + ($216))|0;
     $231 = $219;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = (($231) + 4)|0;
     $235 = $234;
     $236 = HEAP32[$235>>2]|0;
     $237 = $220;
     $238 = $237;
     $239 = HEAP32[$238>>2]|0;
     $240 = (($237) + 4)|0;
     $241 = $240;
     $242 = HEAP32[$241>>2]|0;
     $243 = HEAP16[$204>>1]|0;
     $244 = $243 << 16 >> 16;
     $245 = (($230) + ($$sum<<5)|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = (_af_loader_load_g($loader,$scaler,$246,$load_flags,$221)|0);
     $248 = ($247|0)==(0);
     if (!($248)) {
      $error$2 = $247;
      label = 55;
      break;
     }
     $249 = HEAP32[$218>>2]|0;
     $250 = (((($249) + ($$sum<<5)|0)) + 4|0);
     $251 = HEAP16[$250>>1]|0;
     $252 = $251 & 512;
     $253 = ($252<<16>>16)==(0);
     if ($253) {
      $254 = $219;
      $255 = $254;
      HEAP32[$255>>2] = $233;
      $256 = (($254) + 4)|0;
      $257 = $256;
      HEAP32[$257>>2] = $236;
      $258 = $220;
      $259 = $258;
      HEAP32[$259>>2] = $239;
      $260 = (($258) + 4)|0;
      $261 = $260;
      HEAP32[$261>>2] = $242;
     }
     $262 = HEAP16[$204>>1]|0;
     $263 = $262 << 16 >> 16;
     $264 = (($263) - ($244))|0;
     $265 = HEAP16[$250>>1]|0;
     $266 = $265 & 200;
     $267 = ($266<<16>>16)==(0);
     if (!($267)) {
      $268 = HEAP32[$229>>2]|0;
      $269 = (($268) + ($263<<3)|0);
      $270 = ($262<<16>>16)>($243<<16>>16);
      if ($270) {
       $271 = (($268) + ($244<<3)|0);
       $272 = (((($249) + ($$sum<<5)|0)) + 16|0);
       $cur$013 = $271;
       while(1) {
        _FT_Vector_Transform($cur$013,$272);
        $273 = ((($cur$013)) + 8|0);
        $274 = ($273>>>0)<($269>>>0);
        if ($274) {
         $cur$013 = $273;
        } else {
         break;
        }
       }
      }
     }
     $275 = HEAP16[$250>>1]|0;
     $276 = $275 & 2;
     $277 = ($276<<16>>16)==(0);
     $278 = (((($249) + ($$sum<<5)|0)) + 8|0);
     $279 = HEAP32[$278>>2]|0;
     if ($277) {
      $280 = (((($249) + ($$sum<<5)|0)) + 12|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = (($279) + ($206))|0;
      $283 = ($282>>>0)<($244>>>0);
      $284 = ($281>>>0)<($264>>>0);
      $or$cond9 = $283 & $284;
      if (!($or$cond9)) {
       $error$2 = 21;
       label = 55;
       break;
      }
      $285 = HEAP32[$222>>2]|0;
      $286 = (($244) + ($206))|0;
      $$sum6 = (($286) + ($281))|0;
      $287 = (($285) + ($282<<3)|0);
      $288 = HEAP32[$287>>2]|0;
      $289 = (($285) + ($$sum6<<3)|0);
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) - ($290))|0;
      $292 = (((($285) + ($282<<3)|0)) + 4|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = (((($285) + ($$sum6<<3)|0)) + 4|0);
      $295 = HEAP32[$294>>2]|0;
      $296 = (($293) - ($295))|0;
      $x$0 = $291;$y$0 = $296;
     } else {
      $297 = HEAP32[$225>>2]|0;
      $298 = (_FT_MulFix($279,$297)|0);
      $299 = HEAP32[$226>>2]|0;
      $300 = (((($249) + ($$sum<<5)|0)) + 12|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = HEAP32[$227>>2]|0;
      $303 = (_FT_MulFix($301,$302)|0);
      $304 = HEAP32[$228>>2]|0;
      $305 = (($298) + 32)|0;
      $306 = (($305) + ($299))|0;
      $307 = $306 & -64;
      $308 = (($303) + 32)|0;
      $309 = (($308) + ($304))|0;
      $310 = $309 & -64;
      $x$0 = $307;$y$0 = $310;
     }
     ;HEAP32[$dummy>>2]=HEAP32[$203>>2]|0;HEAP32[$dummy+4>>2]=HEAP32[$203+4>>2]|0;HEAP32[$dummy+8>>2]=HEAP32[$203+8>>2]|0;HEAP32[$dummy+12>>2]=HEAP32[$203+12>>2]|0;HEAP32[$dummy+16>>2]=HEAP32[$203+16>>2]|0;
     $311 = HEAP32[$223>>2]|0;
     $312 = (($311) + ($244<<3)|0);
     HEAP32[$223>>2] = $312;
     $313 = $264&65535;
     HEAP16[$224>>1] = $313;
     _FT_Outline_Translate($dummy,$x$0,$y$0);
     $314 = (($nn$014) + 1)|0;
     $315 = ($314>>>0)<($202>>>0);
     if ($315) {
      $nn$014 = $314;
     } else {
      $error$1 = $247;
      break L7;
     }
    }
    if ((label|0) == 55) {
     STACKTOP = sp;return ($error$2|0);
    }
   }
  } else {
   switch ($32|0) {
   case 1869968492:  {
    break;
   }
   default: {
    $error$1 = 7;
    break L7;
   }
   }
   $33 = HEAP8[$15>>0]|0;
   $34 = ($33<<24>>24)==(0);
   if (!($34)) {
    $35 = ((($7)) + 108|0);
    $36 = ((($loader)) + 156|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($loader)) + 160|0);
    $39 = HEAP32[$38>>2]|0;
    _FT_Outline_Translate($35,$37,$39);
   }
   $40 = ((($7)) + 108|0);
   $41 = ((($7)) + 110|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $42 << 16 >> 16;
   $44 = (($43) + 4)|0;
   $45 = ($44|0)==(0);
   if ($45) {
    label = 9;
   } else {
    $46 = ((($2)) + 22|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = $47 << 16 >> 16;
    $49 = ((($2)) + 58|0);
    $50 = HEAP16[$49>>1]|0;
    $51 = $50 << 16 >> 16;
    $52 = (($48) + ($44))|0;
    $53 = (($52) + ($51))|0;
    $54 = ((($2)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($53>>>0)>($55>>>0);
    if ($56) {
     label = 11;
    } else {
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $57 = HEAP16[$40>>1]|0;
    $58 = ($57<<16>>16)==(0);
    if (!($58)) {
     $59 = $57 << 16 >> 16;
     $60 = ((($2)) + 20|0);
     $61 = HEAP16[$60>>1]|0;
     $62 = $61 << 16 >> 16;
     $63 = ((($2)) + 56|0);
     $64 = HEAP16[$63>>1]|0;
     $65 = $64 << 16 >> 16;
     $66 = (($62) + ($59))|0;
     $67 = (($66) + ($65))|0;
     $68 = ((($2)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($67>>>0)>($69>>>0);
     if ($70) {
      label = 11;
     }
    }
   }
   if ((label|0) == 11) {
    $71 = HEAP16[$41>>1]|0;
    $72 = $71 << 16 >> 16;
    $73 = (($72) + 4)|0;
    $74 = HEAP16[$40>>1]|0;
    $75 = $74 << 16 >> 16;
    $76 = (_FT_GlyphLoader_CheckPoints($2,$73,$75)|0);
    $77 = ($76|0)==(0);
    if (!($77)) {
     $error$2 = $76;
     STACKTOP = sp;return ($error$2|0);
    }
   }
   $78 = ((($2)) + 56|0);
   $79 = ((($2)) + 60|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ((($7)) + 112|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = HEAP16[$41>>1]|0;
   $84 = $83 << 16 >> 16;
   $85 = $84 << 3;
   _memcpy(($80|0),($82|0),($85|0))|0;
   $86 = ((($2)) + 68|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ((($7)) + 120|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = HEAP16[$40>>1]|0;
   $91 = $90 << 16 >> 16;
   $92 = $91 << 1;
   _memcpy(($87|0),($89|0),($92|0))|0;
   $93 = ((($2)) + 64|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ((($7)) + 116|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = HEAP16[$41>>1]|0;
   $98 = $97 << 16 >> 16;
   _memcpy(($94|0),($96|0),($98|0))|0;
   $99 = HEAP16[$41>>1]|0;
   $100 = ((($2)) + 58|0);
   HEAP16[$100>>1] = $99;
   $101 = HEAP16[$40>>1]|0;
   HEAP16[$78>>1] = $101;
   $102 = ((($loader)) + 20|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ((($loader)) + 164|0);
   HEAP32[$104>>2] = $103;
   $105 = ((($loader)) + 28|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ((($loader)) + 168|0);
   HEAP32[$107>>2] = $106;
   $108 = ((($7)) + 40|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ((($loader)) + 16|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (_FT_MulFix($109,$111)|0);
   $113 = HEAP32[$102>>2]|0;
   $114 = (($113) + ($112))|0;
   $115 = ((($loader)) + 172|0);
   HEAP32[$115>>2] = $114;
   $116 = HEAP32[$105>>2]|0;
   $117 = ((($loader)) + 176|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP16[$41>>1]|0;
   $119 = ($118<<16>>16)==(0);
   if ($119) {
    $error$1 = 0;
   } else {
    $120 = HEAP32[$4>>2]|0;
    $121 = ((($120)) + 28|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     FUNCTION_TABLE_viii[$122 & 31]($5,$78,$4);
    }
    $124 = ((($scaler)) + 20|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ($125|0)==(1);
    do {
     if ($126) {
      $183 = HEAP32[$104>>2]|0;
      $184 = HEAP32[$115>>2]|0;
      $185 = ((($loader)) + 124|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (($183) + 32)|0;
      $188 = (($187) + ($186))|0;
      $189 = $188 & -64;
      HEAP32[$104>>2] = $189;
      $190 = ((($loader)) + 128|0);
      $191 = HEAP32[$190>>2]|0;
      $192 = (($184) + 32)|0;
      $193 = (($192) + ($191))|0;
      $194 = $193 & -64;
      HEAP32[$115>>2] = $194;
      $195 = HEAP32[$104>>2]|0;
      $196 = (($195) - ($183))|0;
      $197 = ((($7)) + 144|0);
      HEAP32[$197>>2] = $196;
      $198 = HEAP32[$115>>2]|0;
      $199 = (($198) - ($184))|0;
      $200 = ((($7)) + 148|0);
      HEAP32[$200>>2] = $199;
     } else {
      $127 = ((($loader)) + 76|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = ((($loader)) + 68|0);
      $130 = HEAP32[$129>>2]|0;
      $$sum8 = (($130) + -1)|0;
      $131 = ($130|0)>(1);
      if ($131) {
       $132 = ((($loader)) + 112|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = $133 & 4;
       $135 = ($134|0)==(0);
       if ($135) {
        $136 = HEAP32[$115>>2]|0;
        $137 = (((($128) + (($$sum8*48)|0)|0)) + 4|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = (($136) - ($138))|0;
        $140 = ((($128)) + 4|0);
        $141 = HEAP32[$140>>2]|0;
        $142 = ((($128)) + 8|0);
        $143 = HEAP32[$142>>2]|0;
        $144 = (($143) - ($141))|0;
        $145 = (((($128) + (($$sum8*48)|0)|0)) + 8|0);
        $146 = HEAP32[$145>>2]|0;
        $147 = (($146) + ($139))|0;
        $148 = ($141|0)<(24);
        $149 = (($144) + -8)|0;
        $$ = $148 ? $149 : $144;
        $150 = ($139|0)<(24);
        $151 = (($147) + 8)|0;
        $pp2x_uh$0 = $150 ? $151 : $147;
        $152 = (($$) + 32)|0;
        $153 = $152 & -64;
        HEAP32[$104>>2] = $153;
        $154 = (($pp2x_uh$0) + 32)|0;
        $155 = $154 & -64;
        HEAP32[$115>>2] = $155;
        $156 = HEAP32[$104>>2]|0;
        $157 = ($156|0)>=($143|0);
        $158 = ($141|0)>(0);
        $or$cond = $158 & $157;
        if ($or$cond) {
         $159 = (($156) + -64)|0;
         HEAP32[$104>>2] = $159;
        }
        $160 = HEAP32[$115>>2]|0;
        $161 = HEAP32[$145>>2]|0;
        $162 = ($160|0)<=($161|0);
        $163 = ($139|0)>(0);
        $or$cond3 = $163 & $162;
        if ($or$cond3) {
         $164 = (($160) + 64)|0;
         HEAP32[$115>>2] = $164;
        }
        $165 = HEAP32[$104>>2]|0;
        $166 = (($165) - ($$))|0;
        $167 = ((($7)) + 144|0);
        HEAP32[$167>>2] = $166;
        $168 = HEAP32[$115>>2]|0;
        $169 = (($168) - ($pp2x_uh$0))|0;
        $170 = ((($7)) + 148|0);
        HEAP32[$170>>2] = $169;
        break;
       }
      }
      $171 = HEAP32[$104>>2]|0;
      $172 = HEAP32[$115>>2]|0;
      $173 = (($171) + 32)|0;
      $174 = $173 & -64;
      HEAP32[$104>>2] = $174;
      $175 = (($172) + 32)|0;
      $176 = $175 & -64;
      HEAP32[$115>>2] = $176;
      $177 = HEAP32[$104>>2]|0;
      $178 = (($177) - ($171))|0;
      $179 = ((($7)) + 144|0);
      HEAP32[$179>>2] = $178;
      $180 = HEAP32[$115>>2]|0;
      $181 = (($180) - ($172))|0;
      $182 = ((($7)) + 148|0);
      HEAP32[$182>>2] = $181;
     }
    } while(0);
    _FT_GlyphLoader_Add($2);
    $error$1 = 0;
   }
  }
 } while(0);
 $316 = ($depth|0)==(0);
 if (!($316)) {
  $error$2 = $error$1;
  STACKTOP = sp;return ($error$2|0);
 }
 $317 = ((($7)) + 44|0);
 $318 = HEAP32[$317>>2]|0;
 $319 = ((($7)) + 32|0);
 $320 = HEAP32[$319>>2]|0;
 $321 = (($318) - ($320))|0;
 HEAP32[$vvector>>2] = $321;
 $322 = ((($7)) + 48|0);
 $323 = HEAP32[$322>>2]|0;
 $324 = ((($7)) + 36|0);
 $325 = HEAP32[$324>>2]|0;
 $326 = (($323) - ($325))|0;
 $327 = ((($vvector)) + 4|0);
 HEAP32[$327>>2] = $326;
 $328 = HEAP32[$vvector>>2]|0;
 $329 = ((($4)) + 8|0);
 $330 = HEAP32[$329>>2]|0;
 $331 = (_FT_MulFix($328,$330)|0);
 HEAP32[$vvector>>2] = $331;
 $332 = HEAP32[$327>>2]|0;
 $333 = ((($4)) + 12|0);
 $334 = HEAP32[$333>>2]|0;
 $335 = (_FT_MulFix($332,$334)|0);
 HEAP32[$327>>2] = $335;
 $336 = HEAP8[$15>>0]|0;
 $337 = ($336<<24>>24)==(0);
 if (!($337)) {
  $338 = ((($2)) + 20|0);
  $339 = ((($loader)) + 140|0);
  _FT_Outline_Transform($338,$339);
  _FT_Vector_Transform($vvector,$339);
 }
 $340 = ((($loader)) + 164|0);
 $341 = HEAP32[$340>>2]|0;
 $342 = ($341|0)==(0);
 if (!($342)) {
  $343 = ((($2)) + 20|0);
  $344 = (0 - ($341))|0;
  _FT_Outline_Translate($343,$344,0);
 }
 $345 = ((($2)) + 20|0);
 _FT_Outline_Get_CBox($345,$bbox);
 $346 = HEAP32[$bbox>>2]|0;
 $347 = $346 & -64;
 HEAP32[$bbox>>2] = $347;
 $348 = ((($bbox)) + 4|0);
 $349 = HEAP32[$348>>2]|0;
 $350 = $349 & -64;
 HEAP32[$348>>2] = $350;
 $351 = ((($bbox)) + 8|0);
 $352 = HEAP32[$351>>2]|0;
 $353 = (($352) + 63)|0;
 $354 = $353 & -64;
 HEAP32[$351>>2] = $354;
 $355 = ((($bbox)) + 12|0);
 $356 = HEAP32[$355>>2]|0;
 $357 = (($356) + 63)|0;
 $358 = $357 & -64;
 HEAP32[$355>>2] = $358;
 $359 = HEAP32[$351>>2]|0;
 $360 = HEAP32[$bbox>>2]|0;
 $361 = (($359) - ($360))|0;
 $362 = ((($7)) + 24|0);
 HEAP32[$362>>2] = $361;
 $363 = HEAP32[$355>>2]|0;
 $364 = HEAP32[$348>>2]|0;
 $365 = (($363) - ($364))|0;
 $366 = ((($7)) + 28|0);
 HEAP32[$366>>2] = $365;
 $367 = HEAP32[$bbox>>2]|0;
 HEAP32[$319>>2] = $367;
 $368 = HEAP32[$355>>2]|0;
 HEAP32[$324>>2] = $368;
 $369 = HEAP32[$bbox>>2]|0;
 $370 = HEAP32[$vvector>>2]|0;
 $371 = (($370) + ($369))|0;
 $372 = $371 & -64;
 HEAP32[$317>>2] = $372;
 $373 = HEAP32[$355>>2]|0;
 $374 = HEAP32[$327>>2]|0;
 $375 = (($374) + ($373))|0;
 $376 = $375 & -64;
 HEAP32[$322>>2] = $376;
 $377 = ((($scaler)) + 20|0);
 $378 = HEAP32[$377>>2]|0;
 $379 = ($378|0)==(1);
 do {
  if ($379) {
   label = 51;
  } else {
   $380 = ((($7)) + 4|0);
   $381 = HEAP32[$380>>2]|0;
   $382 = ((($381)) + 8|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = $383 & 4;
   $385 = ($384|0)==(0);
   if ($385) {
    $386 = ((($loader)) + 4|0);
    $387 = HEAP32[$386>>2]|0;
    $388 = (_af_face_globals_is_digit($387,$glyph_index)|0);
    $389 = ($388<<24>>24)==(0);
    if ($389) {
     label = 51;
     break;
    }
    $390 = ((($4)) + 32|0);
    $391 = HEAP8[$390>>0]|0;
    $392 = ($391<<24>>24)==(0);
    if ($392) {
     label = 51;
     break;
    }
   }
   $393 = ((($7)) + 40|0);
   $394 = HEAP32[$393>>2]|0;
   $395 = HEAP32[$329>>2]|0;
   $396 = (_FT_MulFix($394,$395)|0);
   HEAP32[$393>>2] = $396;
   $397 = ((($7)) + 144|0);
   HEAP32[$397>>2] = 0;
   $398 = ((($7)) + 148|0);
   HEAP32[$398>>2] = 0;
  }
 } while(0);
 if ((label|0) == 51) {
  $399 = ((($7)) + 40|0);
  $400 = HEAP32[$399>>2]|0;
  $401 = ($400|0)==(0);
  if (!($401)) {
   $402 = ((($loader)) + 172|0);
   $403 = HEAP32[$402>>2]|0;
   $404 = HEAP32[$340>>2]|0;
   $405 = (($403) - ($404))|0;
   HEAP32[$399>>2] = $405;
  }
 }
 $406 = ((($7)) + 52|0);
 $407 = HEAP32[$406>>2]|0;
 $408 = HEAP32[$333>>2]|0;
 $409 = (_FT_MulFix($407,$408)|0);
 HEAP32[$406>>2] = $409;
 $410 = ((($7)) + 40|0);
 $411 = HEAP32[$410>>2]|0;
 $412 = (($411) + 32)|0;
 $413 = $412 & -64;
 HEAP32[$410>>2] = $413;
 $414 = HEAP32[$406>>2]|0;
 $415 = (($414) + 32)|0;
 $416 = $415 & -64;
 HEAP32[$406>>2] = $416;
 $417 = HEAP32[$9>>2]|0;
 _FT_GlyphLoader_Rewind($417);
 $418 = HEAP32[$9>>2]|0;
 $419 = (_FT_GlyphLoader_CopyPoints($418,$2)|0);
 $420 = ($419|0)==(0);
 if (!($420)) {
  $error$2 = $419;
  STACKTOP = sp;return ($error$2|0);
 }
 $421 = HEAP32[$9>>2]|0;
 $422 = ((($421)) + 20|0);
 $423 = HEAP16[$422>>1]|0;
 $424 = ((($7)) + 108|0);
 HEAP16[$424>>1] = $423;
 $425 = HEAP32[$9>>2]|0;
 $426 = ((($425)) + 22|0);
 $427 = HEAP16[$426>>1]|0;
 $428 = ((($7)) + 110|0);
 HEAP16[$428>>1] = $427;
 $429 = HEAP32[$9>>2]|0;
 $430 = ((($429)) + 24|0);
 $431 = HEAP32[$430>>2]|0;
 $432 = ((($7)) + 112|0);
 HEAP32[$432>>2] = $431;
 $433 = HEAP32[$9>>2]|0;
 $434 = ((($433)) + 28|0);
 $435 = HEAP32[$434>>2]|0;
 $436 = ((($7)) + 116|0);
 HEAP32[$436>>2] = $435;
 $437 = HEAP32[$9>>2]|0;
 $438 = ((($437)) + 32|0);
 $439 = HEAP32[$438>>2]|0;
 $440 = ((($7)) + 120|0);
 HEAP32[$440>>2] = $439;
 HEAP32[$31>>2] = 1869968492;
 $error$2 = 0;
 STACKTOP = sp;return ($error$2|0);
}
function _af_sort_pos($count,$table) {
 $count = $count|0;
 $table = $table|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $i$03 = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count>>>0)>(1);
 if ($0) {
  $i$03 = 1;
 } else {
  return;
 }
 while(1) {
  $j$01 = $i$03;
  while(1) {
   $1 = (($table) + ($j$01<<2)|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (($j$01) + -1)|0;
   $4 = (($table) + ($3<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($2|0)>($5|0);
   if ($6) {
    break;
   }
   HEAP32[$1>>2] = $5;
   HEAP32[$4>>2] = $2;
   $7 = ($3|0)==(0);
   if ($7) {
    break;
   } else {
    $j$01 = $3;
   }
  }
  $8 = (($i$03) + 1)|0;
  $exitcond = ($8|0)==($count|0);
  if ($exitcond) {
   break;
  } else {
   $i$03 = $8;
  }
 }
 return;
}
function _af_sort_widths($count,$table) {
 $count = $count|0;
 $table = $table|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, $i$03 = 0, $j$01 = 0, $swap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $swap = sp;
 $0 = ($count>>>0)>(1);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $i$03 = 1;
 while(1) {
  $j$01 = $i$03;
  while(1) {
   $1 = (($table) + (($j$01*12)|0)|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = (($j$01) + -1)|0;
   $4 = (($table) + (($3*12)|0)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($2|0)>($5|0);
   if ($6) {
    break;
   }
   ;HEAP32[$swap>>2]=HEAP32[$1>>2]|0;HEAP32[$swap+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$swap+8>>2]=HEAP32[$1+8>>2]|0;
   ;HEAP32[$1>>2]=HEAP32[$4>>2]|0;HEAP32[$1+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$4+8>>2]|0;
   ;HEAP32[$4>>2]=HEAP32[$swap>>2]|0;HEAP32[$4+4>>2]=HEAP32[$swap+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$swap+8>>2]|0;
   $7 = ($3|0)==(0);
   if ($7) {
    break;
   } else {
    $j$01 = $3;
   }
  }
  $8 = (($i$03) + 1)|0;
  $exitcond = ($8|0)==($count|0);
  if ($exitcond) {
   break;
  } else {
   $i$03 = $8;
  }
 }
 STACKTOP = sp;return;
}
function _ft_raster1_init($render) {
 $render = $render|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($render)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($render)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($render)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 164|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 168|0);
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_viii[$7 & 31]($9,$11,$13);
 return 0;
}
function _ft_raster1_render($render,$slot,$mode,$origin) {
 $render = $render|0;
 $slot = $slot|0;
 $mode = $mode|0;
 $origin = $origin|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $cbox = 0, $error = 0, $params = 0, $pitch$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $error = sp + 16|0;
 $cbox = sp;
 $params = sp + 24|0;
 $0 = ((($slot)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($render)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 do {
  if ($4) {
   $5 = ($mode|0)==(2);
   $6 = ((($render)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   if ($5) {
    $9 = ($7|0)==(5444|0);
    if ($9) {
     $$0 = 19;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $8 = ($7|0)==(5384|0);
    if ($8) {
     $$0 = 19;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $10 = ((($slot)) + 108|0);
   $11 = ($origin|0)==(0|0);
   if (!($11)) {
    $12 = HEAP32[$origin>>2]|0;
    $13 = ((($origin)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    _FT_Outline_Translate($10,$12,$14);
   }
   _FT_Outline_Get_CBox($10,$cbox);
   $15 = HEAP32[$cbox>>2]|0;
   $16 = (($15) + 32)|0;
   $17 = $16 & -64;
   HEAP32[$cbox>>2] = $17;
   $18 = ((($cbox)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 32)|0;
   $21 = $20 & -64;
   HEAP32[$18>>2] = $21;
   $22 = ((($cbox)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 32)|0;
   $25 = $24 & -64;
   HEAP32[$22>>2] = $25;
   $26 = ((($cbox)) + 12|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 32)|0;
   $29 = $28 & -64;
   HEAP32[$26>>2] = $29;
   $30 = HEAP32[$22>>2]|0;
   $31 = HEAP32[$cbox>>2]|0;
   $32 = (($30) - ($31))|0;
   $33 = $32 >> 6;
   $34 = HEAP32[$18>>2]|0;
   $35 = (($29) - ($34))|0;
   $36 = $35 >> 6;
   $37 = $36 | $33;
   $38 = ($37>>>0)>(65535);
   if ($38) {
    HEAP32[$error>>2] = 6;
    break;
   }
   $39 = ((($slot)) + 76|0);
   $40 = ((($render)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($slot)) + 156|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 & 1;
   $47 = ($46|0)==(0);
   if (!($47)) {
    $48 = ((($slot)) + 88|0);
    $49 = HEAP32[$48>>2]|0;
    _ft_mem_free($41,$49);
    HEAP32[$48>>2] = 0;
    $50 = HEAP32[$42>>2]|0;
    $51 = ((($50)) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $52 & -2;
    HEAP32[$51>>2] = $53;
   }
   $54 = $mode & 2;
   $55 = ($54|0)==(0);
   if ($55) {
    $56 = (($33) + 3)|0;
    $57 = $56 & -4;
    $58 = ((($slot)) + 94|0);
    HEAP8[$58>>0] = 2;
    $59 = ((($slot)) + 92|0);
    HEAP16[$59>>1] = 256;
    $pitch$0 = $57;
   } else {
    $60 = (($33) + 15)|0;
    $61 = $60 >>> 4;
    $62 = $61 << 1;
    $63 = ((($slot)) + 94|0);
    HEAP8[$63>>0] = 1;
    $pitch$0 = $62;
   }
   $64 = ((($slot)) + 80|0);
   HEAP32[$64>>2] = $33;
   HEAP32[$39>>2] = $36;
   $65 = ((($slot)) + 84|0);
   HEAP32[$65>>2] = $pitch$0;
   $66 = (_ft_mem_realloc($41,$36,0,$pitch$0,0,$error)|0);
   $67 = ((($slot)) + 88|0);
   HEAP32[$67>>2] = $66;
   $68 = HEAP32[$error>>2]|0;
   $69 = ($68|0)==(0);
   if ($69) {
    $70 = HEAP32[$42>>2]|0;
    $71 = ((($70)) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $72 | 1;
    HEAP32[$71>>2] = $73;
    $74 = HEAP32[$cbox>>2]|0;
    $75 = (0 - ($74))|0;
    $76 = HEAP32[$18>>2]|0;
    $77 = (0 - ($76))|0;
    _FT_Outline_Translate($10,$75,$77);
    HEAP32[$params>>2] = $39;
    $78 = ((($params)) + 4|0);
    HEAP32[$78>>2] = $10;
    $79 = ((($params)) + 8|0);
    $80 = ((($slot)) + 94|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ($81<<24>>24)==(2);
    $$ = $82&1;
    HEAP32[$79>>2] = $$;
    $83 = ((($render)) + 56|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ((($render)) + 52|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (FUNCTION_TABLE_iii[$84 & 255]($86,$params)|0);
    HEAP32[$error>>2] = $87;
    $88 = HEAP32[$cbox>>2]|0;
    $89 = HEAP32[$18>>2]|0;
    _FT_Outline_Translate($10,$88,$89);
    $90 = HEAP32[$error>>2]|0;
    $91 = ($90|0)==(0);
    if ($91) {
     HEAP32[$0>>2] = 1651078259;
     $92 = HEAP32[$cbox>>2]|0;
     $93 = $92 >> 6;
     $94 = ((($slot)) + 100|0);
     HEAP32[$94>>2] = $93;
     $95 = HEAP32[$26>>2]|0;
     $96 = $95 >> 6;
     $97 = ((($slot)) + 104|0);
     HEAP32[$97>>2] = $96;
    }
   }
  } else {
   HEAP32[$error>>2] = 6;
  }
 } while(0);
 $98 = HEAP32[$error>>2]|0;
 $$0 = $98;
 STACKTOP = sp;return ($$0|0);
}
function _ft_raster1_transform($render,$slot,$matrix,$delta) {
 $render = $render|0;
 $slot = $slot|0;
 $matrix = $matrix|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($slot)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($render)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $5 = ($matrix|0)==(0|0);
 if (!($5)) {
  $6 = ((($slot)) + 108|0);
  _FT_Outline_Transform($6,$matrix);
 }
 $7 = ($delta|0)==(0|0);
 if ($7) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $8 = ((($slot)) + 108|0);
 $9 = HEAP32[$delta>>2]|0;
 $10 = ((($delta)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 _FT_Outline_Translate($8,$9,$11);
 $error$0 = 0;
 return ($error$0|0);
}
function _ft_raster1_get_cbox($render,$slot,$cbox) {
 $render = $render|0;
 $slot = $slot|0;
 $cbox = $cbox|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$cbox>>2]=0|0;HEAP32[$cbox+4>>2]=0|0;HEAP32[$cbox+8>>2]=0|0;HEAP32[$cbox+12>>2]=0|0;
 $0 = ((($slot)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($render)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  return;
 }
 $5 = ((($slot)) + 108|0);
 _FT_Outline_Get_CBox($5,$cbox);
 return;
}
function _ft_raster1_set_mode($render,$mode_tag,$data) {
 $render = $render|0;
 $mode_tag = $mode_tag|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($render)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($render)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$5 & 127]($7,$mode_tag,$data)|0);
 return ($8|0);
}
function _ft_smooth_init($render) {
 $render = $render|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($render)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($render)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($render)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 164|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($1)) + 168|0);
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_viii[$7 & 31]($9,$11,$13);
 return 0;
}
function _ft_smooth_render($render,$slot,$mode,$origin) {
 $render = $render|0;
 $slot = $slot|0;
 $mode = $mode|0;
 $origin = $origin|0;
 var $$mode = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mode|0)==(1);
 $$mode = $0 ? 0 : $mode;
 $1 = (_ft_smooth_render_generic($render,$slot,$$mode,$origin,0)|0);
 return ($1|0);
}
function _ft_smooth_transform($render,$slot,$matrix,$delta) {
 $render = $render|0;
 $slot = $slot|0;
 $matrix = $matrix|0;
 $delta = $delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($slot)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($render)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $5 = ($matrix|0)==(0|0);
 if (!($5)) {
  $6 = ((($slot)) + 108|0);
  _FT_Outline_Transform($6,$matrix);
 }
 $7 = ($delta|0)==(0|0);
 if ($7) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $8 = ((($slot)) + 108|0);
 $9 = HEAP32[$delta>>2]|0;
 $10 = ((($delta)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 _FT_Outline_Translate($8,$9,$11);
 $error$0 = 0;
 return ($error$0|0);
}
function _ft_smooth_get_cbox($render,$slot,$cbox) {
 $render = $render|0;
 $slot = $slot|0;
 $cbox = $cbox|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$cbox>>2]=0|0;HEAP32[$cbox+4>>2]=0|0;HEAP32[$cbox+8>>2]=0|0;HEAP32[$cbox+12>>2]=0|0;
 $0 = ((($slot)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($render)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if (!($4)) {
  return;
 }
 $5 = ((($slot)) + 108|0);
 _FT_Outline_Get_CBox($5,$cbox);
 return;
}
function _ft_smooth_set_mode($render,$mode_tag,$data) {
 $render = $render|0;
 $mode_tag = $mode_tag|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($render)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($render)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$5 & 127]($7,$mode_tag,$data)|0);
 return ($8|0);
}
function _ft_smooth_render_lcd($render,$slot,$mode,$origin) {
 $render = $render|0;
 $slot = $slot|0;
 $mode = $mode|0;
 $origin = $origin|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_smooth_render_generic($render,$slot,$mode,$origin,3)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  return ($0|0);
 }
 $2 = ((($slot)) + 94|0);
 HEAP8[$2>>0] = 5;
 return ($0|0);
}
function _ft_smooth_render_lcd_v($render,$slot,$mode,$origin) {
 $render = $render|0;
 $slot = $slot|0;
 $mode = $mode|0;
 $origin = $origin|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_smooth_render_generic($render,$slot,$mode,$origin,4)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  return ($0|0);
 }
 $2 = ((($slot)) + 94|0);
 HEAP8[$2>>0] = 6;
 return ($0|0);
}
function _ft_smooth_render_generic($render,$slot,$mode,$origin,$required_mode) {
 $render = $render|0;
 $slot = $slot|0;
 $mode = $mode|0;
 $origin = $origin|0;
 $required_mode = $required_mode|0;
 var $$ = 0, $$0 = 0, $$not = 0, $$sum = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cbox = 0, $end$013 = 0, $error = 0, $hh$016 = 0, $hh1$011 = 0, $line$015 = 0, $or$cond = 0;
 var $or$cond19 = 0, $params = 0, $pitch$0 = 0, $read$09 = 0, $width$0 = 0, $write$010 = 0, $xx$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $error = sp + 16|0;
 $cbox = sp;
 $params = sp + 24|0;
 $0 = ($mode|0)==(3);
 $1 = ($mode|0)==(4);
 $2 = ((($slot)) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($render)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  $7 = ($mode|0)==($required_mode|0);
  if (!($7)) {
   $$0 = 19;
   STACKTOP = sp;return ($$0|0);
  }
  $8 = ((($slot)) + 108|0);
  $9 = ($origin|0)==(0|0);
  if (!($9)) {
   $10 = HEAP32[$origin>>2]|0;
   $11 = ((($origin)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   _FT_Outline_Translate($8,$10,$12);
  }
  _FT_Outline_Get_CBox($8,$cbox);
  $13 = HEAP32[$cbox>>2]|0;
  $14 = $13 & -64;
  HEAP32[$cbox>>2] = $14;
  $15 = ((($cbox)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & -64;
  HEAP32[$15>>2] = $17;
  $18 = ((($cbox)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 63)|0;
  $21 = $20 & -64;
  HEAP32[$18>>2] = $21;
  $22 = ((($cbox)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 63)|0;
  $25 = $24 & -64;
  HEAP32[$22>>2] = $25;
  $26 = HEAP32[$cbox>>2]|0;
  $27 = ($26|0)<(0);
  if ($27) {
   $28 = HEAP32[$18>>2]|0;
   $29 = (($26) + 2147483647)|0;
   $30 = ($28|0)>($29|0);
   if ($30) {
    $$0 = 98;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $31 = HEAP32[$18>>2]|0;
  $32 = HEAP32[$cbox>>2]|0;
  $33 = (($31) - ($32))|0;
  $34 = $33 >> 6;
  $35 = HEAP32[$15>>2]|0;
  $36 = ($35|0)<(0);
  if ($36) {
   $37 = HEAP32[$22>>2]|0;
   $38 = (($35) + 2147483647)|0;
   $39 = ($37|0)>($38|0);
   if ($39) {
    $$0 = 98;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $40 = HEAP32[$22>>2]|0;
  $41 = HEAP32[$15>>2]|0;
  $42 = (($40) - ($41))|0;
  $43 = $42 >> 6;
  $44 = ((($slot)) + 76|0);
  $45 = ((($render)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($slot)) + 156|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50 & 1;
  $52 = ($51|0)==(0);
  if (!($52)) {
   $53 = ((($slot)) + 88|0);
   $54 = HEAP32[$53>>2]|0;
   _ft_mem_free($46,$54);
   HEAP32[$53>>2] = 0;
   $55 = HEAP32[$47>>2]|0;
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
  }
  if ($0) {
   $59 = ($34*3)|0;
   $60 = (($59) + 3)|0;
   $61 = $60 & -4;
   $pitch$0 = $61;$width$0 = $59;
  } else {
   $pitch$0 = $34;$width$0 = $34;
  }
  $62 = ($43*3)|0;
  $$ = $1 ? $62 : $43;
  $63 = HEAP32[$cbox>>2]|0;
  $64 = HEAP32[$15>>2]|0;
  $65 = $63 >> 6;
  $66 = HEAP32[$22>>2]|0;
  $67 = $66 >> 6;
  $68 = ($width$0|0)>(32767);
  $69 = ($$|0)>(32767);
  $or$cond = $69 | $68;
  if ($or$cond) {
   $$0 = 98;
   STACKTOP = sp;return ($$0|0);
  }
  $70 = ((($slot)) + 94|0);
  HEAP8[$70>>0] = 2;
  $71 = ((($slot)) + 92|0);
  HEAP16[$71>>1] = 256;
  $72 = ((($slot)) + 80|0);
  HEAP32[$72>>2] = $width$0;
  HEAP32[$44>>2] = $$;
  $73 = ((($slot)) + 84|0);
  HEAP32[$73>>2] = $pitch$0;
  $74 = (0 - ($63))|0;
  $75 = (0 - ($64))|0;
  _FT_Outline_Translate($8,$74,$75);
  $76 = Math_imul($pitch$0, $$)|0;
  $77 = (_ft_mem_alloc($46,$76,$error)|0);
  $78 = ((($slot)) + 88|0);
  HEAP32[$78>>2] = $77;
  $79 = HEAP32[$error>>2]|0;
  $80 = ($79|0)==(0);
  if ($80) {
   $81 = HEAP32[$47>>2]|0;
   $82 = ((($81)) + 4|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $83 | 1;
   HEAP32[$82>>2] = $84;
   HEAP32[$params>>2] = $44;
   $85 = ((($params)) + 4|0);
   HEAP32[$85>>2] = $8;
   $86 = ((($params)) + 8|0);
   HEAP32[$86>>2] = 1;
   $87 = ((($render)) + 56|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ((($render)) + 52|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (FUNCTION_TABLE_iii[$88 & 255]($90,$params)|0);
   HEAP32[$error>>2] = $91;
   $$not = $0 ^ 1;
   $92 = ($43|0)==(0);
   $or$cond19 = $92 | $$not;
   if (!($or$cond19)) {
    $93 = HEAP32[$78>>2]|0;
    $94 = ($34|0)==(0);
    $hh$016 = $43;$line$015 = $93;
    while(1) {
     if (!($94)) {
      $95 = (($line$015) + ($width$0)|0);
      $end$013 = $95;$xx$012 = $34;
      while(1) {
       $96 = (($xx$012) + -1)|0;
       $97 = (($line$015) + ($96)|0);
       $98 = HEAP8[$97>>0]|0;
       $99 = ((($end$013)) + -3|0);
       HEAP8[$99>>0] = $98;
       $100 = ((($end$013)) + -2|0);
       HEAP8[$100>>0] = $98;
       $101 = ((($end$013)) + -1|0);
       HEAP8[$101>>0] = $98;
       $102 = ($96|0)==(0);
       if ($102) {
        break;
       } else {
        $end$013 = $99;$xx$012 = $96;
       }
      }
     }
     $103 = (($hh$016) + -1)|0;
     $104 = (($line$015) + ($pitch$0)|0);
     $105 = ($103|0)==(0);
     if ($105) {
      break;
     } else {
      $hh$016 = $103;$line$015 = $104;
     }
    }
   }
   if ($1) {
    $106 = HEAP32[$78>>2]|0;
    $107 = ($43|0)==(0);
    if (!($107)) {
     $108 = (($$) - ($43))|0;
     $109 = Math_imul($pitch$0, $108)|0;
     $110 = (($106) + ($109)|0);
     $$sum = $pitch$0 << 1;
     $$sum6 = ($pitch$0*3)|0;
     $hh1$011 = $43;$read$09 = $110;$write$010 = $106;
     while(1) {
      _memcpy(($write$010|0),($read$09|0),($pitch$0|0))|0;
      $111 = (($write$010) + ($pitch$0)|0);
      _memcpy(($111|0),($read$09|0),($pitch$0|0))|0;
      $112 = (($write$010) + ($$sum)|0);
      _memcpy(($112|0),($read$09|0),($pitch$0|0))|0;
      $113 = (($write$010) + ($$sum6)|0);
      $114 = (($read$09) + ($pitch$0)|0);
      $115 = (($hh1$011) + -1)|0;
      $116 = ($115|0)==(0);
      if ($116) {
       break;
      } else {
       $hh1$011 = $115;$read$09 = $114;$write$010 = $113;
      }
     }
    }
   }
   _FT_Outline_Translate($8,$63,$64);
   $117 = HEAP32[$error>>2]|0;
   $118 = ($117|0)==(0);
   if ($118) {
    HEAP32[$2>>2] = 1651078259;
    $119 = ((($slot)) + 100|0);
    HEAP32[$119>>2] = $65;
    $120 = ((($slot)) + 104|0);
    HEAP32[$120>>2] = $67;
   }
  }
  $121 = ($origin|0)==(0|0);
  if (!($121)) {
   $122 = HEAP32[$origin>>2]|0;
   $123 = (0 - ($122))|0;
   $124 = ((($origin)) + 4|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (0 - ($125))|0;
   _FT_Outline_Translate($8,$123,$126);
  }
 } else {
  HEAP32[$error>>2] = 6;
 }
 $127 = HEAP32[$error>>2]|0;
 $$0 = $127;
 STACKTOP = sp;return ($$0|0);
}
function _gray_raster_new($memory,$araster) {
 $memory = $memory|0;
 $araster = $araster|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$araster>>2] = 0;
 $0 = (_ft_mem_alloc($memory,20,$error)|0);
 $1 = HEAP32[$error>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($0)) + 12|0);
  HEAP32[$3>>2] = $memory;
  HEAP32[$araster>>2] = $0;
 }
 $4 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _gray_raster_reset($raster,$pool_base,$pool_size) {
 $raster = $raster|0;
 $pool_base = $pool_base|0;
 $pool_size = $pool_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($raster|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ($pool_base|0)!=(0|0);
 $2 = ($pool_size|0)>(3475);
 $or$cond = $1 & $2;
 if ($or$cond) {
  $3 = ((($raster)) + 16|0);
  HEAP32[$3>>2] = $pool_base;
  $4 = ((($pool_base)) + 1440|0);
  HEAP32[$raster>>2] = $4;
  $5 = (($pool_size) + -1440)|0;
  $6 = $5 & -16;
  $7 = ((($raster)) + 4|0);
  HEAP32[$7>>2] = $6;
  $8 = $5 >>> 7;
  $9 = ((($raster)) + 8|0);
  HEAP32[$9>>2] = $8;
  return;
 } else {
  HEAP32[$raster>>2] = 0;
  $10 = ((($raster)) + 4|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($raster)) + 16|0);
  HEAP32[$11>>2] = 0;
  return;
 }
}
function _gray_raster_render($raster,$params) {
 $raster = $raster|0;
 $params = $params|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($params)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$params>>2]|0;
 $3 = ($raster|0)==(0|0);
 if ($3) {
  $$0 = 6;
  return ($$0|0);
 }
 $4 = HEAP32[$raster>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 6;
  return ($$0|0);
 }
 $6 = ((($raster)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 6;
  return ($$0|0);
 }
 $9 = ($1|0)==(0|0);
 if ($9) {
  $$0 = 20;
  return ($$0|0);
 }
 $10 = ((($1)) + 2|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = ($11<<16>>16)==(0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 $14 = HEAP16[$1>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = ($14<<16>>16)<(1);
 if ($16) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = ((($1)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $$0 = 20;
  return ($$0|0);
 }
 $20 = ((($1)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $$0 = 20;
  return ($$0|0);
 }
 $23 = (($15) + -1)|0;
 $24 = (($18) + ($23<<1)|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = (($26) + 1)|0;
 $28 = ($12|0)==($27|0);
 if (!($28)) {
  $$0 = 20;
  return ($$0|0);
 }
 $29 = ((($raster)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($params)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & 2;
 $34 = ($33|0)==(0);
 if ($34) {
  $35 = ($2|0)==(0|0);
  if ($35) {
   $$0 = 6;
   return ($$0|0);
  }
  $36 = ((($2)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0);
  if ($38) {
   $$0 = 0;
   return ($$0|0);
  }
  $39 = HEAP32[$2>>2]|0;
  $40 = ($39|0)==(0);
  if ($40) {
   $$0 = 0;
   return ($$0|0);
  }
  $41 = ((($2)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0|0);
  if ($43) {
   $$0 = 6;
   return ($$0|0);
  }
 }
 $44 = HEAP32[$31>>2]|0;
 $45 = $44 & 1;
 $46 = ($45|0)==(0);
 if ($46) {
  $$0 = 19;
  return ($$0|0);
 }
 $47 = $44 & 2;
 $48 = ($47|0)==(0);
 do {
  if ($48) {
   $49 = ((($30)) + 1024|0);
   HEAP32[$49>>2] = 0;
   $50 = ((($30)) + 1028|0);
   HEAP32[$50>>2] = 0;
   $51 = ((($2)) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($30)) + 1032|0);
   HEAP32[$53>>2] = $52;
   $54 = HEAP32[$2>>2]|0;
   $55 = ((($30)) + 1036|0);
   HEAP32[$55>>2] = $54;
  } else {
   $56 = $44 & 4;
   $57 = ($56|0)==(0);
   $58 = ((($30)) + 1024|0);
   if ($57) {
    HEAP32[$58>>2] = -32768;
    $60 = ((($30)) + 1028|0);
    HEAP32[$60>>2] = -32768;
    $61 = ((($30)) + 1032|0);
    HEAP32[$61>>2] = 32767;
    $62 = ((($30)) + 1036|0);
    HEAP32[$62>>2] = 32767;
    break;
   } else {
    $59 = ((($params)) + 32|0);
    ;HEAP32[$58>>2]=HEAP32[$59>>2]|0;HEAP32[$58+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$58+8>>2]=HEAP32[$59+8>>2]|0;HEAP32[$58+12>>2]=HEAP32[$59+12>>2]|0;
    break;
   }
  }
 } while(0);
 $63 = HEAP32[$raster>>2]|0;
 $64 = HEAP32[$6>>2]|0;
 _gray_init_cells($30,$63,$64);
 $65 = ((($30)) + 980|0);
 ;HEAP32[$65>>2]=HEAP32[$1>>2]|0;HEAP32[$65+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$65+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$65+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$65+16>>2]=HEAP32[$1+16>>2]|0;
 $66 = ((($30)) + 52|0);
 HEAP32[$66>>2] = 0;
 $67 = ((($30)) + 40|0);
 HEAP32[$67>>2] = 1;
 $68 = ((($raster)) + 8|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($30)) + 1248|0);
 HEAP32[$70>>2] = $69;
 $71 = ((($30)) + 1232|0);
 HEAP32[$71>>2] = 0;
 $72 = HEAP32[$31>>2]|0;
 $73 = $72 & 2;
 $74 = ($73|0)==(0);
 if ($74) {
  $81 = ((($30)) + 1000|0);
  ;HEAP32[$81>>2]=HEAP32[$2>>2]|0;HEAP32[$81+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$81+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$81+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$81+20>>2]=HEAP32[$2+20>>2]|0;
  $82 = ((($30)) + 1236|0);
  HEAP32[$82>>2] = 4;
  $83 = ((($30)) + 1240|0);
  HEAP32[$83>>2] = $30;
 } else {
  $75 = ((($params)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($30)) + 1236|0);
  HEAP32[$77>>2] = $76;
  $78 = ((($params)) + 28|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($30)) + 1240|0);
  HEAP32[$80>>2] = $79;
 }
 $84 = (_gray_convert_glyph($30)|0);
 $$0 = $84;
 return ($$0|0);
}
function _gray_raster_done($raster) {
 $raster = $raster|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($raster)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 _ft_mem_free($1,$raster);
 return;
}
function _gray_init_cells($worker,$buffer,$byte_size) {
 $worker = $worker|0;
 $buffer = $buffer|0;
 $byte_size = $byte_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 1412|0);
 HEAP32[$0>>2] = $buffer;
 $1 = ((($worker)) + 1416|0);
 HEAP32[$1>>2] = $byte_size;
 $2 = ((($worker)) + 1420|0);
 HEAP32[$2>>2] = $buffer;
 $3 = ((($worker)) + 44|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($worker)) + 48|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($worker)) + 52|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($worker)) + 32|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($worker)) + 36|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($worker)) + 40|0);
 HEAP32[$8>>2] = 1;
 return;
}
function _gray_render_span($y,$count,$spans,$worker) {
 $y = $y|0;
 $count = $count|0;
 $spans = $spans|0;
 $worker = $worker|0;
 var $$018 = 0, $$09 = 0, $$pn = 0, $$pn16 = 0, $$sum = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$ph$sum = 0, $p$0$ph$sum10 = 0, $p$0$ph$sum11 = 0, $p$0$ph$sum12 = 0, $p$0$ph$sum13 = 0, $p$0$ph$sum14 = 0, $p$0$ph$sum15 = 0, $q$0 = 0, $q$1 = 0, $q$2 = 0, $q$3 = 0, $q$4 = 0, $q$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 1012|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($worker)) + 1008|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = Math_imul($3, $y)|0;
 $5 = ($3|0)>(-1);
 if ($5) {
  $6 = ((($worker)) + 1000|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + -1)|0;
  $9 = Math_imul($8, $3)|0;
  $$pn16 = $9;
 } else {
  $$pn16 = 0;
 }
 $$pn = (($$pn16) - ($4))|0;
 $10 = ($count|0)>(0);
 if ($10) {
  $$018 = $spans;$$09 = $count;
 } else {
  return;
 }
 while(1) {
  $11 = ((($$018)) + 4|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(0);
  L8: do {
   if (!($13)) {
    $14 = ((($$018)) + 2|0);
    $15 = HEAP16[$14>>1]|0;
    $16 = $15&65535;
    $17 = ($15&65535)>(7);
    $18 = HEAP16[$$018>>1]|0;
    $19 = $18 << 16 >> 16;
    $p$0$ph$sum = (($$pn) + ($19))|0;
    $20 = (($1) + ($p$0$ph$sum)|0);
    if ($17) {
     _memset(($20|0),($12|0),($16|0))|0;
     break;
    }
    switch ($16|0) {
    case 7:  {
     $$sum = (($19) + 1)|0;
     $p$0$ph$sum15 = (($$pn) + ($$sum))|0;
     $21 = (($1) + ($p$0$ph$sum15)|0);
     HEAP8[$20>>0] = $12;
     $22 = $$sum;$q$0 = $21;
     label = 9;
     break;
    }
    case 6:  {
     $22 = $19;$q$0 = $20;
     label = 9;
     break;
    }
    case 5:  {
     $24 = $19;$q$1 = $20;
     label = 10;
     break;
    }
    case 4:  {
     $26 = $19;$q$2 = $20;
     label = 11;
     break;
    }
    case 3:  {
     $28 = $19;$q$3 = $20;
     label = 12;
     break;
    }
    case 2:  {
     $30 = $19;$q$4 = $20;
     label = 13;
     break;
    }
    case 1:  {
     $q$5 = $20;
     break;
    }
    default: {
     break L8;
    }
    }
    if ((label|0) == 9) {
     label = 0;
     $$sum3 = (($22) + 1)|0;
     $p$0$ph$sum14 = (($$pn) + ($$sum3))|0;
     $23 = (($1) + ($p$0$ph$sum14)|0);
     HEAP8[$q$0>>0] = $12;
     $24 = $$sum3;$q$1 = $23;
     label = 10;
    }
    if ((label|0) == 10) {
     label = 0;
     $$sum4 = (($24) + 1)|0;
     $p$0$ph$sum13 = (($$pn) + ($$sum4))|0;
     $25 = (($1) + ($p$0$ph$sum13)|0);
     HEAP8[$q$1>>0] = $12;
     $26 = $$sum4;$q$2 = $25;
     label = 11;
    }
    if ((label|0) == 11) {
     label = 0;
     $$sum5 = (($26) + 1)|0;
     $p$0$ph$sum12 = (($$pn) + ($$sum5))|0;
     $27 = (($1) + ($p$0$ph$sum12)|0);
     HEAP8[$q$2>>0] = $12;
     $28 = $$sum5;$q$3 = $27;
     label = 12;
    }
    if ((label|0) == 12) {
     label = 0;
     $$sum6 = (($28) + 1)|0;
     $p$0$ph$sum11 = (($$pn) + ($$sum6))|0;
     $29 = (($1) + ($p$0$ph$sum11)|0);
     HEAP8[$q$3>>0] = $12;
     $30 = $$sum6;$q$4 = $29;
     label = 13;
    }
    if ((label|0) == 13) {
     label = 0;
     $$sum7 = (($30) + 1)|0;
     $p$0$ph$sum10 = (($$pn) + ($$sum7))|0;
     $31 = (($1) + ($p$0$ph$sum10)|0);
     HEAP8[$q$4>>0] = $12;
     $q$5 = $31;
    }
    HEAP8[$q$5>>0] = $12;
   }
  } while(0);
  $32 = (($$09) + -1)|0;
  $33 = ((($$018)) + 6|0);
  $34 = ($$09|0)>(1);
  if ($34) {
   $$018 = $33;$$09 = $32;
  } else {
   break;
  }
 }
 return;
}
function _gray_convert_glyph($worker) {
 $worker = $worker|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $band = 0, $bands = 0, $cell_start$0 = 0, $max = 0;
 var $max_y = 0, $min = 0, $n = 0, $num_bands = 0, $yindex$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $bands = sp + 24|0;
 $band = sp + 20|0;
 $n = sp + 16|0;
 $num_bands = sp + 12|0;
 $min = sp + 8|0;
 $max = sp + 4|0;
 $max_y = sp;
 _gray_compute_cbox($worker);
 $0 = ((($worker)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($worker)) + 1024|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)>($3|0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($worker)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($worker)) + 1032|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)<($8|0);
 if (!($9)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($worker)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($worker)) + 1028|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11|0)>($13|0);
 if (!($14)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ((($worker)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($worker)) + 1036|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16|0)<($18|0);
 if (!($19)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = ($6|0)<($3|0);
 if ($20) {
  HEAP32[$5>>2] = $3;
 }
 $21 = HEAP32[$15>>2]|0;
 $22 = HEAP32[$12>>2]|0;
 $23 = ($21|0)<($22|0);
 if ($23) {
  HEAP32[$15>>2] = $22;
 }
 $24 = HEAP32[$0>>2]|0;
 $25 = HEAP32[$7>>2]|0;
 $26 = ($24|0)>($25|0);
 if ($26) {
  HEAP32[$0>>2] = $25;
 }
 $27 = HEAP32[$10>>2]|0;
 $28 = HEAP32[$17>>2]|0;
 $29 = ($27|0)>($28|0);
 if ($29) {
  HEAP32[$10>>2] = $28;
 }
 $30 = HEAP32[$0>>2]|0;
 $31 = HEAP32[$5>>2]|0;
 $32 = (($30) - ($31))|0;
 $33 = ((($worker)) + 24|0);
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$10>>2]|0;
 $35 = HEAP32[$15>>2]|0;
 $36 = (($34) - ($35))|0;
 $37 = ((($worker)) + 28|0);
 HEAP32[$37>>2] = $36;
 $38 = HEAP32[$10>>2]|0;
 $39 = HEAP32[$15>>2]|0;
 $40 = (($38) - ($39))|0;
 $41 = ((($worker)) + 1248|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40|0) / ($42|0))&-1;
 HEAP32[$num_bands>>2] = $43;
 $44 = HEAP32[$num_bands>>2]|0;
 $45 = ($44|0)==(0);
 if ($45) {
  HEAP32[$num_bands>>2] = 1;
 }
 $46 = HEAP32[$num_bands>>2]|0;
 $47 = ($46|0)>(38);
 if ($47) {
  HEAP32[$num_bands>>2] = 39;
 }
 $48 = ((($worker)) + 1252|0);
 HEAP32[$48>>2] = 0;
 $49 = HEAP32[$15>>2]|0;
 HEAP32[$min>>2] = $49;
 $50 = HEAP32[$10>>2]|0;
 HEAP32[$max_y>>2] = $50;
 HEAP32[$n>>2] = 0;
 $51 = HEAP32[$n>>2]|0;
 $52 = HEAP32[$num_bands>>2]|0;
 $53 = ($51|0)<($52|0);
 L31: do {
  if ($53) {
   $54 = ((($bands)) + 4|0);
   $55 = ((($worker)) + 1412|0);
   $56 = ((($worker)) + 1420|0);
   $57 = ((($worker)) + 1424|0);
   $58 = ((($worker)) + 1416|0);
   $59 = ((($worker)) + 44|0);
   $60 = ((($worker)) + 48|0);
   $61 = ((($worker)) + 52|0);
   $62 = ((($worker)) + 40|0);
   L33: while(1) {
    $63 = HEAP32[$min>>2]|0;
    $64 = HEAP32[$41>>2]|0;
    $65 = (($64) + ($63))|0;
    HEAP32[$max>>2] = $65;
    $66 = HEAP32[$n>>2]|0;
    $67 = HEAP32[$num_bands>>2]|0;
    $68 = (($67) + -1)|0;
    $69 = ($66|0)==($68|0);
    if ($69) {
     label = 21;
    } else {
     $70 = HEAP32[$max>>2]|0;
     $71 = HEAP32[$max_y>>2]|0;
     $72 = ($70|0)>($71|0);
     if ($72) {
      label = 21;
     }
    }
    if ((label|0) == 21) {
     label = 0;
     $73 = HEAP32[$max_y>>2]|0;
     HEAP32[$max>>2] = $73;
    }
    $74 = HEAP32[$min>>2]|0;
    HEAP32[$bands>>2] = $74;
    $75 = HEAP32[$max>>2]|0;
    HEAP32[$54>>2] = $75;
    HEAP32[$band>>2] = $bands;
    $76 = HEAP32[$band>>2]|0;
    $77 = ($76>>>0)<($bands>>>0);
    if (!($77)) {
     while(1) {
      $78 = HEAP32[$55>>2]|0;
      HEAP32[$56>>2] = $78;
      $79 = HEAP32[$band>>2]|0;
      $80 = ((($79)) + 4|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = HEAP32[$band>>2]|0;
      $83 = HEAP32[$82>>2]|0;
      $84 = (($81) - ($83))|0;
      HEAP32[$57>>2] = $84;
      $85 = $84 << 2;
      $86 = $85 & 12;
      $87 = ($86|0)==(0);
      $88 = (16 - ($86))|0;
      $89 = $87 ? 0 : $88;
      $cell_start$0 = (($89) + ($85))|0;
      $90 = HEAP32[$58>>2]|0;
      $91 = $90 & -16;
      $92 = HEAP32[$55>>2]|0;
      $93 = (($92) + ($cell_start$0)|0);
      HEAP32[$59>>2] = $93;
      $94 = ($91|0)>($cell_start$0|0);
      L43: do {
       if ($94) {
        $95 = (($91) - ($cell_start$0))|0;
        $96 = $95 >> 4;
        HEAP32[$60>>2] = $96;
        $97 = ($95|0)<(32);
        if ($97) {
         label = 31;
        } else {
         $98 = HEAP32[$57>>2]|0;
         $99 = ($98|0)>(0);
         if ($99) {
          $100 = HEAP32[$57>>2]|0;
          $yindex$02 = 0;
          while(1) {
           $101 = HEAP32[$56>>2]|0;
           $102 = (($101) + ($yindex$02<<2)|0);
           HEAP32[$102>>2] = 0;
           $103 = (($yindex$02) + 1)|0;
           $104 = ($103|0)<($100|0);
           if ($104) {
            $yindex$02 = $103;
           } else {
            break;
           }
          }
         }
         HEAP32[$61>>2] = 0;
         HEAP32[$62>>2] = 1;
         $105 = HEAP32[$band>>2]|0;
         $106 = HEAP32[$105>>2]|0;
         HEAP32[$15>>2] = $106;
         $107 = HEAP32[$band>>2]|0;
         $108 = ((($107)) + 4|0);
         $109 = HEAP32[$108>>2]|0;
         HEAP32[$10>>2] = $109;
         $110 = HEAP32[$band>>2]|0;
         $111 = ((($110)) + 4|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = HEAP32[$band>>2]|0;
         $114 = HEAP32[$113>>2]|0;
         $115 = (($112) - ($114))|0;
         HEAP32[$37>>2] = $115;
         $116 = (_gray_convert_glyph_inner($worker)|0);
         switch ($116|0) {
         case 64:  {
          label = 31;
          break L43;
          break;
         }
         case 0:  {
          break;
         }
         default: {
          $$0 = 1;
          label = 39;
          break L33;
         }
         }
         _gray_sweep($worker);
         $117 = HEAP32[$band>>2]|0;
         $118 = ((($117)) + -8|0);
         HEAP32[$band>>2] = $118;
        }
       } else {
        label = 31;
       }
      } while(0);
      if ((label|0) == 31) {
       label = 0;
       $121 = HEAP32[$band>>2]|0;
       $122 = HEAP32[$121>>2]|0;
       $123 = HEAP32[$band>>2]|0;
       $124 = ((($123)) + 4|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = (($125) - ($122))|0;
       $127 = $126 >> 1;
       $128 = (($127) + ($122))|0;
       $129 = ($127|0)==(0);
       if ($129) {
        $$0 = 1;
        label = 39;
        break L33;
       }
       $130 = (($122) - ($125))|0;
       $131 = HEAP32[$41>>2]|0;
       $132 = ($130|0)<($131|0);
       if (!($132)) {
        $133 = HEAP32[$48>>2]|0;
        $134 = (($133) + 1)|0;
        HEAP32[$48>>2] = $134;
       }
       $135 = HEAP32[$band>>2]|0;
       $136 = ((($135)) + 8|0);
       HEAP32[$136>>2] = $122;
       $137 = HEAP32[$band>>2]|0;
       $138 = ((($137)) + 12|0);
       HEAP32[$138>>2] = $128;
       $139 = HEAP32[$band>>2]|0;
       HEAP32[$139>>2] = $128;
       $140 = HEAP32[$band>>2]|0;
       $141 = ((($140)) + 4|0);
       HEAP32[$141>>2] = $125;
       $142 = HEAP32[$band>>2]|0;
       $143 = ((($142)) + 8|0);
       HEAP32[$band>>2] = $143;
      }
      $119 = HEAP32[$band>>2]|0;
      $120 = ($119>>>0)<($bands>>>0);
      if ($120) {
       break;
      }
     }
    }
    $144 = HEAP32[$n>>2]|0;
    $145 = (($144) + 1)|0;
    HEAP32[$n>>2] = $145;
    $146 = HEAP32[$max>>2]|0;
    HEAP32[$min>>2] = $146;
    $147 = HEAP32[$n>>2]|0;
    $148 = HEAP32[$num_bands>>2]|0;
    $149 = ($147|0)<($148|0);
    if (!($149)) {
     break L31;
    }
   }
   if ((label|0) == 39) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $150 = HEAP32[$48>>2]|0;
 $151 = ($150|0)>(8);
 if (!($151)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $152 = HEAP32[$41>>2]|0;
 $153 = ($152|0)>(16);
 if (!($153)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $154 = (($152|0) / 2)&-1;
 HEAP32[$41>>2] = $154;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _gray_compute_cbox($worker) {
 $worker = $worker|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $17$phi = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vec$0 = 0, $vec$01 = 0, $vec$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 984|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($worker)) + 982|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = (($1) + ($4<<3)|0);
 $6 = ($3<<16>>16)<(1);
 if ($6) {
  $7 = ((($worker)) + 8|0);
  ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;
  return;
 }
 $8 = HEAP32[$1>>2]|0;
 $9 = ((($worker)) + 12|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($worker)) + 8|0);
 HEAP32[$10>>2] = $8;
 $11 = ((($1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($worker)) + 20|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($worker)) + 16|0);
 HEAP32[$14>>2] = $12;
 $15 = ($3<<16>>16)>(1);
 if ($15) {
  $vec$01 = ((($1)) + 8|0);
  $17 = $1;$vec$03 = $vec$01;
  while(1) {
   $16 = ((($17)) + 8|0);
   $18 = HEAP32[$16>>2]|0;
   $19 = ((($17)) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$10>>2]|0;
   $22 = ($18|0)<($21|0);
   if ($22) {
    HEAP32[$10>>2] = $18;
   }
   $23 = HEAP32[$9>>2]|0;
   $24 = ($18|0)>($23|0);
   if ($24) {
    HEAP32[$9>>2] = $18;
   }
   $25 = HEAP32[$14>>2]|0;
   $26 = ($20|0)<($25|0);
   if ($26) {
    HEAP32[$14>>2] = $20;
   }
   $27 = HEAP32[$13>>2]|0;
   $28 = ($20|0)>($27|0);
   if ($28) {
    HEAP32[$13>>2] = $20;
   }
   $vec$0 = ((($vec$03)) + 8|0);
   $29 = ($vec$0>>>0)<($5>>>0);
   if ($29) {
    $17$phi = $vec$03;$vec$03 = $vec$0;$17 = $17$phi;
   } else {
    break;
   }
  }
 }
 $30 = HEAP32[$10>>2]|0;
 $31 = $30 >> 6;
 HEAP32[$10>>2] = $31;
 $32 = HEAP32[$14>>2]|0;
 $33 = $32 >> 6;
 HEAP32[$14>>2] = $33;
 $34 = HEAP32[$9>>2]|0;
 $35 = (($34) + 63)|0;
 $36 = $35 >> 6;
 HEAP32[$9>>2] = $36;
 $37 = HEAP32[$13>>2]|0;
 $38 = (($37) + 63)|0;
 $39 = $38 >> 6;
 HEAP32[$13>>2] = $39;
 return;
}
function _gray_convert_glyph_inner($worker) {
 $worker = $worker|0;
 var $$reg2mem9$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, $cond2 = 0, $error = 0, _setjmpTable = 0;
 var _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($worker)) + 1256|0);
 _setjmpTable = _saveSetjmp($0,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
 __THREW__ = 0;
 $1 = __THREW__; __THREW__ = 0;
 if ((($1|0) != 0) & ((threwValue|0) != 0)) { $2 = _testSetjmp(HEAP32[$1>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($2|0) == 0) { _longjmp($1|0, threwValue|0); } tempRet0 = (threwValue); } else { $2 = -1; };
 $3 = tempRet0;
 $cond = ($2|0)==(1);
 if ($cond) {
  $$reg2mem9$0 = $3;
 } else {
  $$reg2mem9$0 = 0;
 }
 while(1) {
  $4 = ($$reg2mem9$0|0)==(0);
  if (!($4)) {
   label = 7;
   break;
  }
  $5 = ((($worker)) + 980|0);
  __THREW__ = 0;
  $6 = (invoke_iiii(47,($5|0),(5708|0),($worker|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = (threwValue); } else { $8 = -1; };
  $9 = tempRet0;
  $cond1 = ($8|0)==(1);
  if ($cond1) {
   $$reg2mem9$0 = $9;
   continue;
  }
  HEAP32[$error>>2] = $6;
  __THREW__ = 0;
  invoke_vi(56,($worker|0));
  $10 = __THREW__; __THREW__ = 0;
  if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = (threwValue); } else { $11 = -1; };
  $12 = tempRet0;
  $cond2 = ($11|0)==(1);
  if ($cond2) {
   $$reg2mem9$0 = $12;
  } else {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $13 = HEAP32[$error>>2]|0;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($13|0);
 }
 else if ((label|0) == 7) {
  HEAP32[$error>>2] = 64;
  $13 = HEAP32[$error>>2]|0;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _gray_sweep($worker) {
 $worker = $worker|0;
 var $$lcssa = 0, $$lcssa14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell$0 = 0, $cell$01 = 0, $cell$04 = 0, $cover$02 = 0, $or$cond = 0, $x$03 = 0, $yindex$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = ((($worker)) + 1232|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($worker)) + 1424|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = ((($worker)) + 1420|0);
  $8 = ((($worker)) + 24|0);
  $yindex$06 = 0;
  while(1) {
   $9 = HEAP32[$7>>2]|0;
   $10 = (($9) + ($yindex$06<<2)|0);
   $cell$01 = HEAP32[$10>>2]|0;
   $11 = ($cell$01|0)==(0|0);
   if (!($11)) {
    $cell$04 = $cell$01;$cover$02 = 0;$x$03 = 0;
    while(1) {
     $12 = HEAP32[$cell$04>>2]|0;
     $13 = ($12|0)>($x$03|0);
     $14 = ($cover$02|0)!=(0);
     $or$cond = $14 & $13;
     if ($or$cond) {
      $15 = $cover$02 << 9;
      $16 = (($12) - ($x$03))|0;
      _gray_hline($worker,$x$03,$yindex$06,$15,$16);
     }
     $17 = ((($cell$04)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($18) + ($cover$02))|0;
     $20 = $19 << 9;
     $21 = ((($cell$04)) + 8|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($20) - ($22))|0;
     $24 = ($20|0)==($22|0);
     if (!($24)) {
      $25 = HEAP32[$cell$04>>2]|0;
      $26 = ($25|0)>(-1);
      if ($26) {
       _gray_hline($worker,$25,$yindex$06,$23,1);
      }
     }
     $27 = HEAP32[$cell$04>>2]|0;
     $28 = (($27) + 1)|0;
     $29 = ((($cell$04)) + 12|0);
     $cell$0 = HEAP32[$29>>2]|0;
     $30 = ($cell$0|0)==(0|0);
     if ($30) {
      $$lcssa = $19;$$lcssa14 = $28;
      break;
     } else {
      $cell$04 = $cell$0;$cover$02 = $19;$x$03 = $28;
     }
    }
    $31 = ($$lcssa|0)==(0);
    if (!($31)) {
     $32 = $$lcssa << 9;
     $33 = HEAP32[$8>>2]|0;
     $34 = (($33) - ($$lcssa14))|0;
     _gray_hline($worker,$$lcssa14,$yindex$06,$32,$34);
    }
   }
   $35 = (($yindex$06) + 1)|0;
   $36 = HEAP32[$4>>2]|0;
   $37 = ($35|0)<($36|0);
   if ($37) {
    $yindex$06 = $35;
   } else {
    break;
   }
  }
 }
 $38 = ((($worker)) + 1236|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0|0);
 if ($40) {
  return;
 }
 $41 = HEAP32[$3>>2]|0;
 $42 = ($41|0)>(0);
 if (!($42)) {
  return;
 }
 $43 = ((($worker)) + 1244|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($worker)) + 1040|0);
 $46 = ((($worker)) + 1240|0);
 $47 = HEAP32[$46>>2]|0;
 FUNCTION_TABLE_viiii[$39 & 15]($44,$41,$45,$47);
 return;
}
function _gray_hline($worker,$x,$y,$area,$acount) {
 $worker = $worker|0;
 $x = $x|0;
 $y = $y|0;
 $area = $area|0;
 $acount = $acount|0;
 var $$ = 0, $$$5 = 0, $$12 = 0, $$5 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coverage$1 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $area >> 9;
 $1 = ($0|0)<(0);
 $2 = (0 - ($0))|0;
 $$5 = $1 ? $2 : $0;
 $3 = ((($worker)) + 996|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 2;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $11 = ($$5|0)>(255);
   $$$5 = $11 ? 255 : $$5;
   $coverage$1 = $$$5;
  } else {
   $7 = $$5 & 511;
   $8 = ($7>>>0)>(256);
   if ($8) {
    $9 = (512 - ($7))|0;
    $coverage$1 = $9;
    break;
   } else {
    $10 = ($7|0)==(256);
    $$12 = $10 ? 255 : $7;
    $coverage$1 = $$12;
    break;
   }
  }
 } while(0);
 $12 = ((($worker)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($y))|0;
 $15 = ((($worker)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($x))|0;
 $18 = ($17|0)<(32767);
 $$ = $18 ? $17 : 32767;
 $19 = ($coverage$1|0)==(0);
 if ($19) {
  return;
 }
 $20 = ((($worker)) + 1232|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($worker)) + 1040|0);
 $$sum = (($21) + -1)|0;
 $23 = ($21|0)>(0);
 if ($23) {
  $24 = ((($worker)) + 1244|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==($14|0);
  if ($26) {
   $27 = (((($worker)) + 1040|0) + (($$sum*6)|0)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = $28 << 16 >> 16;
   $30 = (((((($worker)) + 1040|0) + (($$sum*6)|0)|0)) + 2|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = $31&65535;
   $33 = (($32) + ($29))|0;
   $34 = ($33|0)==($$|0);
   if ($34) {
    $35 = (((((($worker)) + 1040|0) + (($$sum*6)|0)|0)) + 4|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = ($37|0)==($coverage$1|0);
    if ($38) {
     $39 = (($32) + ($acount))|0;
     $40 = $39&65535;
     HEAP16[$30>>1] = $40;
     return;
    }
   }
  }
 }
 $41 = ((($worker)) + 1244|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=($14|0);
 $44 = ($21|0)>(31);
 $or$cond = $44 | $43;
 if ($or$cond) {
  $45 = ((($worker)) + 1236|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)!=(0|0);
  $or$cond3 = $23 & $47;
  if ($or$cond3) {
   $48 = ((($worker)) + 1240|0);
   $49 = HEAP32[$48>>2]|0;
   FUNCTION_TABLE_viiii[$46 & 15]($42,$21,$22,$49);
  }
  HEAP32[$20>>2] = 0;
  HEAP32[$41>>2] = $14;
  $52 = 0;
 } else {
  $52 = $21;
 }
 $50 = $$&65535;
 $51 = (((($worker)) + 1040|0) + (($52*6)|0)|0);
 HEAP16[$51>>1] = $50;
 $53 = $acount&65535;
 $54 = (((((($worker)) + 1040|0) + (($52*6)|0)|0)) + 2|0);
 HEAP16[$54>>1] = $53;
 $55 = $coverage$1&255;
 $56 = (((((($worker)) + 1040|0) + (($52*6)|0)|0)) + 4|0);
 HEAP8[$56>>0] = $55;
 $57 = HEAP32[$20>>2]|0;
 $58 = (($57) + 1)|0;
 HEAP32[$20>>2] = $58;
 return;
}
function _gray_record_cell($worker) {
 $worker = $worker|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  return;
 }
 $3 = ((($worker)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($worker)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | $4;
 $8 = ($7|0)==(0);
 if ($8) {
  return;
 }
 $9 = (_gray_find_cell($worker)|0);
 $10 = HEAP32[$3>>2]|0;
 $11 = ((($9)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($10))|0;
 HEAP32[$11>>2] = $13;
 $14 = HEAP32[$5>>2]|0;
 $15 = ((($9)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($14))|0;
 HEAP32[$15>>2] = $17;
 return;
}
function _gray_find_cell($worker) {
 $worker = $worker|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell$0 = 0, $pcell$0$lcssa = 0, $pcell$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$worker>>2]|0;
 $1 = ((($worker)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)>($2|0);
 $$ = $3 ? $2 : $0;
 $4 = ((($worker)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($worker)) + 1420|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 L1: do {
  if ($10) {
   $pcell$0$lcssa = $8;
  } else {
   $12 = $9;$pcell$03 = $8;
   while(1) {
    $11 = HEAP32[$12>>2]|0;
    $13 = ($11|0)>($$|0);
    if ($13) {
     $pcell$0$lcssa = $pcell$03;
     break L1;
    }
    $14 = ($11|0)==($$|0);
    if ($14) {
     $cell$0 = $12;
     break;
    }
    $15 = ((($12)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(0|0);
    if ($17) {
     $pcell$0$lcssa = $15;
     break L1;
    } else {
     $12 = $16;$pcell$03 = $15;
    }
   }
   return ($cell$0|0);
  }
 } while(0);
 $18 = ((($worker)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($worker)) + 48|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($19|0)<($21|0);
 if (!($22)) {
  $23 = ((($worker)) + 1256|0);
  _longjmp(($23|0),1);
  // unreachable;
 }
 $24 = ((($worker)) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($19) + 1)|0;
 HEAP32[$18>>2] = $26;
 $27 = (($25) + ($19<<4)|0);
 HEAP32[$27>>2] = $$;
 $28 = (((($25) + ($19<<4)|0)) + 8|0);
 HEAP32[$28>>2] = 0;
 $29 = (((($25) + ($19<<4)|0)) + 4|0);
 HEAP32[$29>>2] = 0;
 $30 = HEAP32[$pcell$0$lcssa>>2]|0;
 $31 = (((($25) + ($19<<4)|0)) + 12|0);
 HEAP32[$31>>2] = $30;
 HEAP32[$pcell$0$lcssa>>2] = $27;
 $cell$0 = $27;
 return ($cell$0|0);
}
function _gray_move_to($to,$worker) {
 $to = $to|0;
 $worker = $worker|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _gray_record_cell($worker);
 $0 = HEAP32[$to>>2]|0;
 $1 = $0 << 2;
 $2 = ((($to)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 2;
 $5 = $1 >> 8;
 $6 = $4 >> 8;
 _gray_start_cell($worker,$5,$6);
 $7 = ((($worker)) + 64|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($worker)) + 68|0);
 HEAP32[$8>>2] = $4;
 return 0;
}
function _gray_line_to($to,$worker) {
 $to = $to|0;
 $worker = $worker|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$to>>2]|0;
 $1 = $0 << 2;
 $2 = ((($to)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 2;
 _gray_render_line($worker,$1,$4);
 return 0;
}
function _gray_conic_to($control,$to,$worker) {
 $control = $control|0;
 $to = $to|0;
 $worker = $worker|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _gray_render_conic($worker,$control,$to);
 return 0;
}
function _gray_cubic_to($control1,$control2,$to,$worker) {
 $control1 = $control1|0;
 $control2 = $control2|0;
 $to = $to|0;
 $worker = $worker|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _gray_render_cubic($worker,$control1,$control2,$to);
 return 0;
}
function _gray_render_cubic($worker,$control1,$control2,$to) {
 $worker = $worker|0;
 $control1 = $control1|0;
 $control2 = $control2|0;
 $to = $to|0;
 var $$ = 0, $$$ = 0, $$$$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arc$0 = 0, $arc$1 = 0, $max$0 = 0, $max$1 = 0, $max$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 76|0);
 $1 = HEAP32[$to>>2]|0;
 $2 = $1 << 2;
 HEAP32[$0>>2] = $2;
 $3 = ((($to)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << 2;
 $6 = ((($worker)) + 80|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$control2>>2]|0;
 $8 = $7 << 2;
 $9 = ((($worker)) + 84|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($control2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 << 2;
 $13 = ((($worker)) + 88|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$control1>>2]|0;
 $15 = $14 << 2;
 $16 = ((($worker)) + 92|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($control1)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 << 2;
 $20 = ((($worker)) + 96|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($worker)) + 64|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($worker)) + 100|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($worker)) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($worker)) + 104|0);
 HEAP32[$26>>2] = $25;
 $27 = HEAP32[$6>>2]|0;
 $28 = HEAP32[$13>>2]|0;
 $29 = ($28|0)<($27|0);
 $$ = $29 ? $28 : $27;
 $30 = ($28|0)>($27|0);
 $max$0 = $30 ? $28 : $27;
 $31 = HEAP32[$20>>2]|0;
 $32 = ($31|0)<($$|0);
 $$$ = $32 ? $31 : $$;
 $33 = ($31|0)>($max$0|0);
 $max$1 = $33 ? $31 : $max$0;
 $34 = ($25|0)<($$$|0);
 $$$$ = $34 ? $25 : $$$;
 $35 = $$$$ >> 8;
 $36 = ((($worker)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35|0)<($37|0);
 if ($38) {
  $39 = ($25|0)>($max$1|0);
  $max$2 = $39 ? $25 : $max$1;
  $40 = $max$2 >> 8;
  $41 = ((($worker)) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($40|0)<($42|0);
  if ($43) {
   $arc$1 = $0;
   label = 14;
  } else {
   $arc$0 = $0;
  }
 } else {
  $arc$1 = $0;
  label = 14;
 }
 while(1) {
  if ((label|0) == 14) {
   label = 0;
   $120 = HEAP32[$arc$1>>2]|0;
   $121 = ((($arc$1)) + 4|0);
   $122 = HEAP32[$121>>2]|0;
   _gray_render_line($worker,$120,$122);
   $123 = ($arc$1|0)==($0|0);
   if ($123) {
    break;
   }
   $124 = ((($arc$1)) + -24|0);
   $arc$0 = $124;
  }
  $44 = ((($arc$0)) + 24|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$arc$0>>2]|0;
  $47 = (($45) - ($46))|0;
  $48 = ((($arc$0)) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ((($arc$0)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) - ($51))|0;
  $53 = ($47|0)<(0);
  $54 = (0 - ($47))|0;
  $55 = $53 ? $54 : $47;
  $56 = ($52|0)<(0);
  $57 = (0 - ($52))|0;
  $58 = $56 ? $57 : $52;
  $59 = ($55|0)>($58|0);
  if ($59) {
   $60 = ($55*236)|0;
   $61 = ($58*97)|0;
   $62 = (($61) + ($60))|0;
   $67 = $62;
  } else {
   $63 = ($55*97)|0;
   $64 = ($58*236)|0;
   $65 = (($64) + ($63))|0;
   $67 = $65;
  }
  $66 = $67 >> 8;
  $68 = ($66|0)>(32767);
  if (!($68)) {
   $69 = ($66*42)|0;
   $70 = ((($arc$0)) + 8|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = HEAP32[$arc$0>>2]|0;
   $73 = (($71) - ($72))|0;
   $74 = ((($arc$0)) + 12|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = HEAP32[$50>>2]|0;
   $77 = (($75) - ($76))|0;
   $78 = Math_imul($73, $52)|0;
   $79 = Math_imul($77, $47)|0;
   $80 = (($78) - ($79))|0;
   $81 = ($80|0)<(0);
   $82 = (0 - ($80))|0;
   $83 = $81 ? $82 : $80;
   $84 = ($83|0)>($69|0);
   if (!($84)) {
    $85 = ((($arc$0)) + 16|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) - ($72))|0;
    $88 = ((($arc$0)) + 20|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) - ($76))|0;
    $91 = Math_imul($87, $52)|0;
    $92 = Math_imul($90, $47)|0;
    $93 = (($91) - ($92))|0;
    $94 = ($93|0)<(0);
    $95 = (0 - ($93))|0;
    $96 = $94 ? $95 : $93;
    $97 = ($96|0)>($69|0);
    if (!($97)) {
     $98 = Math_imul($77, $52)|0;
     $99 = Math_imul($73, $47)|0;
     $100 = (($98) + ($99))|0;
     $101 = ($100|0)<(0);
     if (!($101)) {
      $102 = Math_imul($90, $52)|0;
      $103 = Math_imul($87, $47)|0;
      $104 = (($102) + ($103))|0;
      $105 = ($104|0)<(0);
      if (!($105)) {
       $106 = HEAP32[$48>>2]|0;
       $107 = (($106) - ($75))|0;
       $108 = Math_imul($107, $52)|0;
       $109 = HEAP32[$44>>2]|0;
       $110 = (($109) - ($71))|0;
       $111 = Math_imul($110, $47)|0;
       $112 = (($111) + ($108))|0;
       $113 = ($112|0)<(0);
       if (!($113)) {
        $114 = (($106) - ($89))|0;
        $115 = Math_imul($114, $52)|0;
        $116 = (($109) - ($86))|0;
        $117 = Math_imul($116, $47)|0;
        $118 = (($117) + ($115))|0;
        $119 = ($118|0)<(0);
        if (!($119)) {
         $arc$1 = $arc$0;
         label = 14;
         continue;
        }
       }
      }
     }
    }
   }
  }
  _gray_split_cubic($arc$0);
  $arc$0 = $44;
 }
 return;
}
function _gray_split_cubic($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($base)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($base)) + 48|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($base)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($base)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$base>>2]|0;
 $8 = (($7) + ($4))|0;
 $9 = (($8|0) / 2)&-1;
 HEAP32[$3>>2] = $9;
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + ($6))|0;
 $12 = (($11|0) / 2)&-1;
 $13 = ((($base)) + 40|0);
 HEAP32[$13>>2] = $12;
 $14 = (($6) + ($4))|0;
 $15 = (($14|0) / 2)&-1;
 $16 = (($15) + ($9))|0;
 $17 = (($16|0) / 2)&-1;
 HEAP32[$5>>2] = $17;
 $18 = (($15) + ($12))|0;
 $19 = (($18|0) / 2)&-1;
 $20 = ((($base)) + 32|0);
 HEAP32[$20>>2] = $19;
 $21 = (($19) + ($17))|0;
 $22 = (($21|0) / 2)&-1;
 HEAP32[$0>>2] = $22;
 $23 = ((($base)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($base)) + 52|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($base)) + 12|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($base)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($base)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($27))|0;
 $33 = (($32|0) / 2)&-1;
 HEAP32[$26>>2] = $33;
 $34 = HEAP32[$23>>2]|0;
 $35 = (($34) + ($29))|0;
 $36 = (($35|0) / 2)&-1;
 $37 = ((($base)) + 44|0);
 HEAP32[$37>>2] = $36;
 $38 = (($29) + ($27))|0;
 $39 = (($38|0) / 2)&-1;
 $40 = (($39) + ($33))|0;
 $41 = (($40|0) / 2)&-1;
 HEAP32[$28>>2] = $41;
 $42 = (($39) + ($36))|0;
 $43 = (($42|0) / 2)&-1;
 $44 = ((($base)) + 36|0);
 HEAP32[$44>>2] = $43;
 $45 = (($43) + ($41))|0;
 $46 = (($45|0) / 2)&-1;
 HEAP32[$23>>2] = $46;
 return;
}
function _gray_render_line($worker,$to_x,$to_y) {
 $worker = $worker|0;
 $to_x = $to_x|0;
 $to_y = $to_y|0;
 var $$ = 0, $$1 = 0, $$4 = 0, $$7 = 0, $$lobit = 0, $$lobit8 = 0, $$lobit9 = 0, $$lobit9$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $delta$0 = 0, $delta$1 = 0, $ey1$010 = 0;
 var $ey1$113 = 0, $ey1$2 = 0, $lift$0 = 0, $mod$0 = 0, $mod$112 = 0, $mod$2 = 0, $p$0 = 0, $rem$0 = 0, $x$011 = 0, $x$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $to_y >> 8;
 $4 = ((($worker)) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($1))|0;
 $7 = $3 << 8;
 $8 = (($to_y) - ($7))|0;
 $9 = ((($worker)) + 64|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($to_x) - ($10))|0;
 $12 = (($to_y) - ($5))|0;
 $13 = ($2|0)>($3|0);
 $$ = $13 ? $3 : $2;
 $14 = ((($worker)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($$|0)<($15|0);
 if (!($16)) {
  HEAP32[$9>>2] = $to_x;
  HEAP32[$4>>2] = $to_y;
  HEAP32[$0>>2] = $7;
  return;
 }
 $$1 = $13 ? $2 : $3;
 $17 = ((($worker)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($$1|0)<($18|0);
 if ($19) {
  HEAP32[$9>>2] = $to_x;
  HEAP32[$4>>2] = $to_y;
  HEAP32[$0>>2] = $7;
  return;
 }
 $20 = ($2|0)==($3|0);
 if ($20) {
  _gray_render_scanline($worker,$2,$10,$6,$to_x,$8);
  HEAP32[$9>>2] = $to_x;
  HEAP32[$4>>2] = $to_y;
  HEAP32[$0>>2] = $7;
  return;
 }
 $21 = ($10|0)==($to_x|0);
 if ($21) {
  $22 = $10 >> 8;
  $23 = $22 << 8;
  $24 = (($10) - ($23))|0;
  $25 = $24 << 1;
  $26 = $12 >> 31;
  $27 = (($26) + 256)|0;
  $28 = $27 & -256;
  $29 = $12 >> 31;
  $30 = $29 | 1;
  $31 = (($28) - ($6))|0;
  $32 = Math_imul($25, $31)|0;
  $33 = ((($worker)) + 32|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($32))|0;
  HEAP32[$33>>2] = $35;
  $36 = ((($worker)) + 36|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($31))|0;
  HEAP32[$36>>2] = $38;
  $39 = (($30) + ($2))|0;
  _gray_set_cell($worker,$22,$39);
  $40 = $28 << 1;
  $41 = (($40) + -256)|0;
  $42 = Math_imul($41, $25)|0;
  $43 = ($39|0)==($3|0);
  if (!($43)) {
   $ey1$010 = $39;
   while(1) {
    $44 = HEAP32[$33>>2]|0;
    $45 = (($44) + ($42))|0;
    HEAP32[$33>>2] = $45;
    $46 = HEAP32[$36>>2]|0;
    $47 = (($46) + ($41))|0;
    HEAP32[$36>>2] = $47;
    $48 = (($ey1$010) + ($30))|0;
    _gray_set_cell($worker,$22,$48);
    $49 = ($48|0)==($3|0);
    if ($49) {
     break;
    } else {
     $ey1$010 = $48;
    }
   }
  }
  $50 = (($8) + -256)|0;
  $51 = (($50) + ($28))|0;
  $52 = Math_imul($25, $51)|0;
  $53 = HEAP32[$33>>2]|0;
  $54 = (($53) + ($52))|0;
  HEAP32[$33>>2] = $54;
  $55 = HEAP32[$36>>2]|0;
  $56 = (($55) + ($51))|0;
  HEAP32[$36>>2] = $56;
  HEAP32[$9>>2] = $to_x;
  HEAP32[$4>>2] = $to_y;
  HEAP32[$0>>2] = $7;
  return;
 }
 $57 = (256 - ($6))|0;
 $58 = ($12|0)<(0);
 $59 = (0 - ($12))|0;
 $$4 = $58 ? $6 : $57;
 $60 = $12 >> 31;
 $61 = (($60) + 256)|0;
 $62 = $61 & -256;
 $63 = $12 >> 31;
 $64 = $63 | 1;
 $$7 = $58 ? $59 : $12;
 $p$0 = Math_imul($$4, $11)|0;
 $65 = (($p$0|0) / ($$7|0))&-1;
 $66 = (($p$0|0) % ($$7|0))&-1;
 $$lobit = $66 >> 31;
 $delta$0 = (($65) + ($10))|0;
 $67 = (($delta$0) + ($$lobit))|0;
 _gray_render_scanline($worker,$2,$10,$6,$67,$62);
 $68 = (($64) + ($2))|0;
 $69 = $67 >> 8;
 _gray_set_cell($worker,$69,$68);
 $70 = ($68|0)==($3|0);
 if ($70) {
  $ey1$2 = $68;$x$1 = $67;
 } else {
  $71 = $11 << 8;
  $72 = (($71|0) / ($$7|0))&-1;
  $73 = (($71|0) % ($$7|0))&-1;
  $74 = ($73|0)<(0);
  $75 = $74 ? $$7 : 0;
  $rem$0 = (($75) + ($73))|0;
  $$lobit8 = $73 >> 31;
  $lift$0 = (($$lobit8) + ($72))|0;
  $76 = ($68|0)==($3|0);
  if ($76) {
   $ey1$2 = $68;$x$1 = $67;
  } else {
   $mod$0 = (($66) - ($$7))|0;
   $77 = ($66|0)<(0);
   $78 = $77 ? $$7 : 0;
   $79 = (($mod$0) + ($78))|0;
   $80 = (256 - ($62))|0;
   $ey1$113 = $68;$mod$112 = $79;$x$011 = $67;
   while(1) {
    $81 = (($rem$0) + ($mod$112))|0;
    $82 = ($81|0)>(-1);
    $$lobit9 = $81 >>> 31;
    $$lobit9$not = $$lobit9 ^ 1;
    $83 = $82 ? $$7 : 0;
    $mod$2 = (($81) - ($83))|0;
    $delta$1 = (($lift$0) + ($x$011))|0;
    $84 = (($delta$1) + ($$lobit9$not))|0;
    _gray_render_scanline($worker,$ey1$113,$x$011,$80,$84,$62);
    $85 = (($ey1$113) + ($64))|0;
    $86 = $84 >> 8;
    _gray_set_cell($worker,$86,$85);
    $87 = ($85|0)==($3|0);
    if ($87) {
     $ey1$2 = $85;$x$1 = $84;
     break;
    } else {
     $ey1$113 = $85;$mod$112 = $mod$2;$x$011 = $84;
    }
   }
  }
 }
 $88 = (256 - ($62))|0;
 _gray_render_scanline($worker,$ey1$2,$x$1,$88,$to_x,$8);
 HEAP32[$9>>2] = $to_x;
 HEAP32[$4>>2] = $to_y;
 HEAP32[$0>>2] = $7;
 return;
}
function _gray_render_scanline($worker,$ey,$x1,$y1,$x2,$y2) {
 $worker = $worker|0;
 $ey = $ey|0;
 $x1 = $x1|0;
 $y1 = $y1|0;
 $x2 = $x2|0;
 $y2 = $y2|0;
 var $$ = 0, $$09 = 0, $$1 = 0, $$3 = 0, $$lobit = 0, $$lobit5 = 0, $$lobit6 = 0, $$lobit6$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $delta$0 = 0, $delta$1 = 0;
 var $ex1$08 = 0, $lift$0 = 0, $mod$0 = 0, $mod$110 = 0, $mod$2 = 0, $p$0 = 0, $rem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($x2) - ($x1))|0;
 $1 = $x1 >> 8;
 $2 = $x2 >> 8;
 $3 = $1 << 8;
 $4 = (($x1) - ($3))|0;
 $5 = $2 << 8;
 $6 = (($x2) - ($5))|0;
 $7 = ($y2|0)==($y1|0);
 if ($7) {
  _gray_set_cell($worker,$2,$ey);
  return;
 }
 $8 = ($1|0)==($2|0);
 if ($8) {
  $9 = (($y2) - ($y1))|0;
  $10 = (($6) + ($4))|0;
  $11 = Math_imul($10, $9)|0;
  $12 = ((($worker)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($11))|0;
  HEAP32[$12>>2] = $14;
  $15 = ((($worker)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($9))|0;
  HEAP32[$15>>2] = $17;
  return;
 }
 $18 = (256 - ($4))|0;
 $19 = (($y2) - ($y1))|0;
 $20 = ($0|0)<(0);
 $21 = (0 - ($0))|0;
 $$ = $20 ? $4 : $18;
 $22 = $0 >> 31;
 $23 = (($22) + 256)|0;
 $24 = $23 & -256;
 $$3 = $20 ? $21 : $0;
 $25 = $0 >> 31;
 $26 = $25 | 1;
 $p$0 = Math_imul($$, $19)|0;
 $27 = (($p$0|0) / ($$3|0))&-1;
 $28 = (($p$0|0) % ($$3|0))&-1;
 $$lobit = $28 >> 31;
 $delta$0 = (($$lobit) + ($27))|0;
 $29 = (($24) + ($4))|0;
 $30 = Math_imul($delta$0, $29)|0;
 $31 = ((($worker)) + 32|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + ($32))|0;
 HEAP32[$31>>2] = $33;
 $34 = ((($worker)) + 36|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + ($delta$0))|0;
 HEAP32[$34>>2] = $36;
 $37 = (($26) + ($1))|0;
 _gray_set_cell($worker,$37,$ey);
 $38 = (($delta$0) + ($y1))|0;
 $39 = ($37|0)==($2|0);
 if ($39) {
  $$1 = $38;
 } else {
  $40 = (($delta$0) + ($y2))|0;
  $41 = (($40) - ($38))|0;
  $42 = $41 << 8;
  $43 = (($42|0) / ($$3|0))&-1;
  $44 = (($42|0) % ($$3|0))&-1;
  $45 = ($44|0)<(0);
  $$lobit5 = $44 >> 31;
  $lift$0 = (($$lobit5) + ($43))|0;
  $46 = $45 ? $$3 : 0;
  $rem$0 = (($46) + ($44))|0;
  $47 = ($37|0)==($2|0);
  if ($47) {
   $$1 = $38;
  } else {
   $mod$0 = (($28) - ($$3))|0;
   $48 = ($28|0)<(0);
   $49 = $48 ? $$3 : 0;
   $50 = (($mod$0) + ($49))|0;
   $$09 = $38;$ex1$08 = $37;$mod$110 = $50;
   while(1) {
    $51 = (($rem$0) + ($mod$110))|0;
    $52 = ($51|0)>(-1);
    $$lobit6 = $51 >>> 31;
    $$lobit6$not = $$lobit6 ^ 1;
    $delta$1 = (($lift$0) + ($$lobit6$not))|0;
    $53 = $52 ? $$3 : 0;
    $mod$2 = (($51) - ($53))|0;
    $54 = $delta$1 << 8;
    $55 = HEAP32[$31>>2]|0;
    $56 = (($55) + ($54))|0;
    HEAP32[$31>>2] = $56;
    $57 = HEAP32[$34>>2]|0;
    $58 = (($57) + ($delta$1))|0;
    HEAP32[$34>>2] = $58;
    $59 = (($delta$1) + ($$09))|0;
    $60 = (($ex1$08) + ($26))|0;
    _gray_set_cell($worker,$60,$ey);
    $61 = ($60|0)==($2|0);
    if ($61) {
     $$1 = $59;
     break;
    } else {
     $$09 = $59;$ex1$08 = $60;$mod$110 = $mod$2;
    }
   }
  }
 }
 $62 = (($y2) - ($$1))|0;
 $63 = (($6) + 256)|0;
 $64 = (($63) - ($24))|0;
 $65 = Math_imul($62, $64)|0;
 $66 = HEAP32[$31>>2]|0;
 $67 = (($65) + ($66))|0;
 HEAP32[$31>>2] = $67;
 $68 = HEAP32[$34>>2]|0;
 $69 = (($68) + ($62))|0;
 HEAP32[$34>>2] = $69;
 return;
}
function _gray_set_cell($worker,$ex,$ey) {
 $worker = $worker|0;
 $ex = $ex|0;
 $ey = $ey|0;
 var $$ = 0, $$ex = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ey) - ($1))|0;
 $3 = ((($worker)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<($ex|0);
 $$ex = $5 ? $4 : $ex;
 $6 = ((($worker)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($$ex) - ($7))|0;
 $9 = ($8|0)>(-1);
 $$ = $9 ? $8 : -1;
 $10 = HEAP32[$worker>>2]|0;
 $11 = ($$|0)==($10|0);
 if ($11) {
  $12 = ((($worker)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($2|0)==($13|0);
  if (!($14)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $15 = ((($worker)) + 40|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0);
  if ($17) {
   _gray_record_cell($worker);
  }
  $18 = ((($worker)) + 32|0);
  HEAP32[$18>>2] = 0;
  $19 = ((($worker)) + 36|0);
  HEAP32[$19>>2] = 0;
 }
 HEAP32[$worker>>2] = $$;
 $20 = ((($worker)) + 4|0);
 HEAP32[$20>>2] = $2;
 $21 = ((($worker)) + 28|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($2>>>0)<($22>>>0);
 if (!($23)) {
  $28 = 1;
  $27 = $28&1;
  $29 = ((($worker)) + 40|0);
  HEAP32[$29>>2] = $27;
  return;
 }
 $24 = ((($worker)) + 24|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($$|0)>=($25|0);
 $28 = $26;
 $27 = $28&1;
 $29 = ((($worker)) + 40|0);
 HEAP32[$29>>2] = $27;
 return;
}
function _gray_render_conic($worker,$control,$to) {
 $worker = $worker|0;
 $control = $control|0;
 $to = $to|0;
 var $$ = 0, $$$1 = 0, $$1 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $arc$0 = 0, $arc$1 = 0, $arc$2 = 0, $dx$1 = 0, $level$0 = 0, $max$0 = 0, $max$1 = 0, $top$0 = 0;
 var $top$1 = 0, $top$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 852|0);
 $1 = ((($worker)) + 76|0);
 $2 = HEAP32[$to>>2]|0;
 $3 = $2 << 2;
 HEAP32[$1>>2] = $3;
 $4 = ((($to)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 2;
 $7 = ((($worker)) + 80|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$control>>2]|0;
 $9 = $8 << 2;
 $10 = ((($worker)) + 84|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($control)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 << 2;
 $14 = ((($worker)) + 88|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($worker)) + 64|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($worker)) + 92|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($worker)) + 68|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($worker)) + 96|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$17>>2]|0;
 $22 = HEAP32[$1>>2]|0;
 $23 = (($22) + ($21))|0;
 $24 = HEAP32[$10>>2]|0;
 $25 = $24 << 1;
 $26 = (($23) - ($25))|0;
 $27 = ($26|0)<(0);
 $28 = (0 - ($26))|0;
 $29 = $27 ? $28 : $26;
 $30 = HEAP32[$7>>2]|0;
 $31 = (($30) + ($19))|0;
 $32 = HEAP32[$14>>2]|0;
 $33 = $32 << 1;
 $34 = (($31) - ($33))|0;
 $35 = ($34|0)<(0);
 $36 = (0 - ($34))|0;
 $37 = $35 ? $36 : $34;
 $38 = ($29|0)<($37|0);
 $$ = $38 ? $37 : $29;
 $39 = ($$|0)<(64);
 if ($39) {
  $arc$1 = $1;$top$1 = 0;
  label = 8;
 } else {
  $40 = ($32|0)<($30|0);
  $$1 = $40 ? $32 : $30;
  $41 = ($32|0)>($30|0);
  $max$0 = $41 ? $32 : $30;
  $42 = ($19|0)<($$1|0);
  $$$1 = $42 ? $19 : $$1;
  $43 = $$$1 >> 8;
  $44 = ((($worker)) + 20|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)<($45|0);
  if ($46) {
   $47 = ($19|0)>($max$0|0);
   $max$1 = $47 ? $19 : $max$0;
   $48 = $max$1 >> 8;
   $49 = ((($worker)) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48|0)<($50|0);
   if ($51) {
    $arc$1 = $1;$top$1 = 0;
    label = 8;
   } else {
    $dx$1 = $$;$level$0 = 0;
    while(1) {
     $52 = $dx$1 >> 2;
     $53 = (($level$0) + 1)|0;
     $54 = ($52|0)>(64);
     if ($54) {
      $dx$1 = $52;$level$0 = $53;
     } else {
      $$lcssa = $53;
      break;
     }
    }
    HEAP32[$0>>2] = $$lcssa;
    $arc$0 = $1;$top$0 = 0;
    label = 6;
   }
  } else {
   $arc$1 = $1;$top$1 = 0;
   label = 8;
  }
 }
 while(1) {
  if ((label|0) == 6) {
   label = 0;
   $55 = (((($worker)) + 852|0) + ($top$0<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)>(0);
   if (!($57)) {
    $arc$1 = $arc$0;$top$1 = $top$0;
    label = 8;
    continue;
   }
   _gray_split_conic($arc$0);
   $58 = ((($arc$0)) + 16|0);
   $59 = (($top$0) + 1)|0;
   $60 = (($56) + -1)|0;
   HEAP32[$55>>2] = $60;
   $61 = (((($worker)) + 852|0) + ($59<<2)|0);
   HEAP32[$61>>2] = $60;
   $arc$2 = $58;$top$2 = $59;
  }
  else if ((label|0) == 8) {
   label = 0;
   $62 = HEAP32[$arc$1>>2]|0;
   $63 = ((($arc$1)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   _gray_render_line($worker,$62,$64);
   $65 = (($top$1) + -1)|0;
   $66 = ((($arc$1)) + -16|0);
   $arc$2 = $66;$top$2 = $65;
  }
  $67 = ($top$2|0)>(-1);
  if ($67) {
   $arc$0 = $arc$2;$top$0 = $top$2;
   label = 6;
  } else {
   break;
  }
 }
 return;
}
function _gray_split_conic($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($base)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($base)) + 32|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($base)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($4))|0;
 $7 = (($6|0) / 2)&-1;
 $8 = ((($base)) + 24|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$base>>2]|0;
 $10 = (($9) + ($4))|0;
 $11 = (($10|0) / 2)&-1;
 HEAP32[$3>>2] = $11;
 $12 = (($11) + ($7))|0;
 $13 = (($12|0) / 2)&-1;
 HEAP32[$0>>2] = $13;
 $14 = ((($base)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($base)) + 36|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($base)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$14>>2]|0;
 $20 = (($19) + ($18))|0;
 $21 = (($20|0) / 2)&-1;
 $22 = ((($base)) + 28|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($base)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($18))|0;
 $26 = (($25|0) / 2)&-1;
 HEAP32[$17>>2] = $26;
 $27 = (($26) + ($21))|0;
 $28 = (($27|0) / 2)&-1;
 HEAP32[$14>>2] = $28;
 return;
}
function _gray_start_cell($worker,$ex,$ey) {
 $worker = $worker|0;
 $ex = $ex|0;
 $ey = $ey|0;
 var $$1 = 0, $$ex = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<($ex|0);
 $$ex = $2 ? $1 : $ex;
 $3 = ((($worker)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($$ex|0)<($4|0);
 $6 = (($4) + -1)|0;
 $$1 = $5 ? $6 : $$ex;
 $7 = ((($worker)) + 32|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($worker)) + 36|0);
 HEAP32[$8>>2] = 0;
 $9 = HEAP32[$3>>2]|0;
 $10 = (($$1) - ($9))|0;
 HEAP32[$worker>>2] = $10;
 $11 = ((($worker)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($ey) - ($12))|0;
 $14 = ((($worker)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = $ey << 8;
 $16 = ((($worker)) + 72|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($worker)) + 40|0);
 HEAP32[$17>>2] = 0;
 _gray_set_cell($worker,$$1,$ey);
 return;
}
function _Render_Glyph($worker) {
 $worker = $worker|0;
 var $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 144|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 256;
 _Set_High_Precision($worker,$2);
 $3 = ((($worker)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($worker)) + 24|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$0>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = $6 & 16;
  $11 = ((($worker)) + 180|0);
  $12 = $10&255;
  $13 = ($12&255) >>> 2;
  HEAP8[$11>>0] = $13;
  $14 = HEAP32[$0>>2]|0;
  $15 = $14 & 32;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = $13&255;
   $18 = $17 | 1;
   $19 = $18&255;
   HEAP8[$11>>0] = $19;
  }
 } else {
  $9 = ((($worker)) + 180|0);
  HEAP8[$9>>0] = 2;
 }
 $20 = HEAP32[$0>>2]|0;
 $21 = $20 >>> 9;
 $$lobit = $21 & 1;
 $22 = $$lobit ^ 1;
 $23 = $22&255;
 $24 = ((($worker)) + 181|0);
 HEAP8[$24>>0] = $23;
 $25 = ((($worker)) + 164|0);
 HEAP32[$25>>2] = 9;
 $26 = ((($worker)) + 168|0);
 HEAP32[$26>>2] = 1;
 $27 = ((($worker)) + 172|0);
 HEAP32[$27>>2] = 2;
 $28 = ((($worker)) + 176|0);
 HEAP32[$28>>2] = 57;
 $29 = ((($worker)) + 1024|0);
 HEAP32[$29>>2] = 0;
 $30 = ((($worker)) + 960|0);
 HEAP16[$30>>1] = 0;
 $31 = ((($worker)) + 104|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 65535)|0;
 $34 = $33&65535;
 $35 = ((($worker)) + 962|0);
 HEAP16[$35>>1] = $34;
 $36 = ((($worker)) + 108|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37&65535;
 $39 = ((($worker)) + 56|0);
 HEAP16[$39>>1] = $38;
 $40 = ((($worker)) + 116|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($worker)) + 60|0);
 HEAP32[$42>>2] = $41;
 $43 = (_Render_Single_Pass($worker,0)|0);
 $44 = ($43|0)==(0);
 if (!($44)) {
  $$0 = $43;
  return ($$0|0);
 }
 $45 = HEAP8[$24>>0]|0;
 $46 = ($45<<24>>24)==(0);
 if (!($46)) {
  $47 = ((($worker)) + 180|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = ($48<<24>>24)==(2);
  if (!($49)) {
   HEAP32[$25>>2] = 10;
   HEAP32[$26>>2] = 3;
   HEAP32[$27>>2] = 4;
   HEAP32[$28>>2] = 58;
   HEAP32[$29>>2] = 0;
   HEAP16[$30>>1] = 0;
   $50 = HEAP32[$36>>2]|0;
   $51 = (($50) + 65535)|0;
   $52 = $51&65535;
   HEAP16[$35>>1] = $52;
   $53 = (_Render_Single_Pass($worker,1)|0);
   $54 = ($53|0)==(0);
   if (!($54)) {
    $$0 = $53;
    return ($$0|0);
   }
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function _Set_High_Precision($worker,$High) {
 $worker = $worker|0;
 $High = $High|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($High|0)==(0);
 if ($0) {
  HEAP32[$worker>>2] = 6;
  $3 = ((($worker)) + 16|0);
  HEAP32[$3>>2] = 32;
  $4 = ((($worker)) + 20|0);
  HEAP32[$4>>2] = 2;
 } else {
  HEAP32[$worker>>2] = 12;
  $1 = ((($worker)) + 16|0);
  HEAP32[$1>>2] = 256;
  $2 = ((($worker)) + 20|0);
  HEAP32[$2>>2] = 30;
 }
 $5 = HEAP32[$worker>>2]|0;
 $6 = 1 << $5;
 $7 = ((($worker)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (($6|0) / 2)&-1;
 $9 = ((($worker)) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$worker>>2]|0;
 $11 = (($10) + -6)|0;
 $12 = ((($worker)) + 12|0);
 HEAP32[$12>>2] = $11;
 return;
}
function _Vertical_Sweep_Init($worker,$min,$max) {
 $worker = $worker|0;
 $min = $min|0;
 $max = $max|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (0 - ($1))|0;
 $3 = $2&65535;
 $4 = ((($worker)) + 156|0);
 HEAP16[$4>>1] = $3;
 $5 = HEAP16[$min>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = (0 - ($1))|0;
 $8 = Math_imul($6, $7)|0;
 $9 = ((($worker)) + 148|0);
 HEAP32[$9>>2] = $8;
 $10 = ($1|0)>(0);
 if (!($10)) {
  $16 = ((($worker)) + 158|0);
  HEAP16[$16>>1] = 0;
  $17 = ((($worker)) + 160|0);
  HEAP16[$17>>1] = 0;
  return;
 }
 $11 = ((($worker)) + 104|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -1)|0;
 $14 = Math_imul($13, $1)|0;
 $15 = (($14) + ($8))|0;
 HEAP32[$9>>2] = $15;
 $16 = ((($worker)) + 158|0);
 HEAP16[$16>>1] = 0;
 $17 = ((($worker)) + 160|0);
 HEAP16[$17>>1] = 0;
 return;
}
function _Vertical_Sweep_Span($worker,$y,$x1,$x2,$left,$right) {
 $worker = $worker|0;
 $y = $y|0;
 $x1 = $x1|0;
 $x2 = $x2|0;
 $left = $left|0;
 $right = $right|0;
 var $$ = 0, $$sum = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $e2$0 = 0, $e2$1 = 0, $scevgep3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (0 - ($1))|0;
 $3 = (($x1) + -1)|0;
 $4 = (($3) + ($1))|0;
 $5 = $4 & $2;
 $6 = HEAP32[$worker>>2]|0;
 $7 = $5 >> $6;
 $8 = (($x2) - ($x1))|0;
 $9 = (($8) - ($1))|0;
 $10 = ((($worker)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9|0)>($11|0);
 $13 = $2 & $x2;
 $14 = $13 >> $6;
 $e2$0 = $12 ? $14 : $7;
 $15 = ($e2$0|0)>(-1);
 if (!($15)) {
  return;
 }
 $16 = ((($worker)) + 56|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = ($7|0)<($18|0);
 if (!($19)) {
  return;
 }
 $20 = ($7|0)<(0);
 $$ = $20 ? 0 : $7;
 $21 = ($e2$0|0)<($18|0);
 $22 = (($18) + -1)|0;
 $e2$1 = $21 ? $e2$0 : $22;
 $23 = $$ << 13;
 $24 = $23 >> 16;
 $25 = $e2$1 << 13;
 $26 = $25 >> 16;
 $27 = $$ & 7;
 $28 = 255 >>> $27;
 $29 = $e2$1 & 7;
 $30 = 127 >>> $29;
 $31 = $30 ^ 255;
 $32 = ((($worker)) + 158|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33 << 16 >> 16;
 $35 = ($34|0)>($24|0);
 if ($35) {
  $36 = $24&65535;
  HEAP16[$32>>1] = $36;
 }
 $37 = ((($worker)) + 160|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38 << 16 >> 16;
 $40 = ($39|0)<($26|0);
 if ($40) {
  $41 = $26&65535;
  HEAP16[$37>>1] = $41;
 }
 $42 = ((($worker)) + 60|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($worker)) + 148|0);
 $45 = HEAP32[$44>>2]|0;
 $$sum = (($45) + ($24))|0;
 $46 = (($43) + ($$sum)|0);
 $47 = (($26) - ($24))|0;
 $48 = ($47|0)>(0);
 if (!($48)) {
  $66 = $31 & $28;
  $67 = HEAP8[$46>>0]|0;
  $68 = $67&255;
  $69 = $68 | $66;
  $70 = $69&255;
  HEAP8[$46>>0] = $70;
  return;
 }
 $49 = HEAP8[$46>>0]|0;
 $50 = $49&255;
 $51 = $50 | $28;
 $52 = $51&255;
 HEAP8[$46>>0] = $52;
 $53 = ($47|0)>(1);
 if ($53) {
  $54 = (($45) + ($24))|0;
  $55 = (($54) + 1)|0;
  $scevgep3 = (($43) + ($55)|0);
  $56 = (($26) + -1)|0;
  $57 = (($56) - ($24))|0;
  _memset(($scevgep3|0),-1,($57|0))|0;
  $58 = (($45) + ($26))|0;
  $59 = (($58) + -1)|0;
  $60 = $59;
 } else {
  $60 = $$sum;
 }
 $$sum4 = (($60) + 1)|0;
 $61 = (($43) + ($$sum4)|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62&255;
 $64 = $63 | $31;
 $65 = $64&255;
 HEAP8[$61>>0] = $65;
 return;
}
function _Vertical_Sweep_Drop($worker,$y,$x1,$x2,$left,$right) {
 $worker = $worker|0;
 $y = $y|0;
 $x1 = $x1|0;
 $x2 = $x2|0;
 $left = $left|0;
 $right = $right|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pxl$0 = 0, $pxl$0$ = 0, $pxl$1 = 0;
 var $pxl$2 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($x1) + -1)|0;
 $3 = (($2) + ($1))|0;
 $4 = (0 - ($1))|0;
 $5 = $3 & $4;
 $6 = $4 & $x2;
 $7 = ($5|0)>($6|0);
 if ($7) {
  $8 = ((($left)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 7;
  $11 = (($6) + ($1))|0;
  $12 = ($5|0)==($11|0);
  if (!($12)) {
   return;
  }
  switch ($10|0) {
  case 0:  {
   $pxl$0 = $6;
   break;
  }
  case 4:  {
   $13 = (($x1) + -1)|0;
   $14 = (($13) + ($x2))|0;
   $15 = (($14|0) / 2)&-1;
   $16 = ((($worker)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + ($15))|0;
   $19 = $18 & $4;
   $pxl$0 = $19;
   break;
  }
  case 5: case 1:  {
   $20 = ((($left)) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==($right|0);
   if ($22) {
    $23 = ((($left)) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)<(1);
    if ($25) {
     $26 = HEAP32[$8>>2]|0;
     $27 = $26 & 16;
     $28 = ($27|0)==(0);
     if ($28) {
      return;
     }
     $29 = (($x2) - ($x1))|0;
     $30 = ((($worker)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($29|0)<($31|0);
     if ($32) {
      return;
     }
    }
   }
   $33 = ((($right)) + 28|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==($left|0);
   if ($35) {
    $36 = ((($left)) + 20|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $y << 16 >> 16;
    $39 = ($37|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$8>>2]|0;
     $41 = $40 & 32;
     $42 = ($41|0)==(0);
     if ($42) {
      return;
     }
     $43 = (($x2) - ($x1))|0;
     $44 = ((($worker)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($43|0)<($45|0);
     if ($46) {
      return;
     }
    }
   }
   $47 = ($10|0)==(1);
   if ($47) {
    $pxl$0 = $6;
   } else {
    $48 = (($x1) + -1)|0;
    $49 = (($48) + ($x2))|0;
    $50 = (($49|0) / 2)&-1;
    $51 = ((($worker)) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + ($50))|0;
    $54 = HEAP32[$0>>2]|0;
    $55 = (0 - ($54))|0;
    $56 = $53 & $55;
    $pxl$0 = $56;
   }
   break;
  }
  default: {
   return;
  }
  }
  $57 = ($pxl$0|0)<(0);
  if ($57) {
   $pxl$1 = $5;
  } else {
   $58 = HEAP32[$worker>>2]|0;
   $59 = $pxl$0 >> $58;
   $60 = ((($worker)) + 56|0);
   $61 = HEAP16[$60>>1]|0;
   $62 = $61&65535;
   $63 = ($59|0)<($62|0);
   $pxl$0$ = $63 ? $pxl$0 : $6;
   $pxl$1 = $pxl$0$;
  }
  $64 = ($pxl$1|0)==($5|0);
  $65 = $64 ? $6 : $5;
  $66 = HEAP32[$worker>>2]|0;
  $67 = $65 >> $66;
  $68 = $67 & 7;
  $69 = ($67|0)>(-1);
  if ($69) {
   $70 = ((($worker)) + 56|0);
   $71 = HEAP16[$70>>1]|0;
   $72 = $71&65535;
   $73 = ($67|0)<($72|0);
   if ($73) {
    $74 = ((($worker)) + 148|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $67 << 13;
    $77 = $76 >> 16;
    $78 = (($75) + ($77))|0;
    $79 = ((($worker)) + 60|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80) + ($78)|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = 128 >>> $68;
    $85 = $83 & $84;
    $86 = ($85|0)==(0);
    if ($86) {
     $pxl$2 = $pxl$1;
    } else {
     return;
    }
   } else {
    $pxl$2 = $pxl$1;
   }
  } else {
   $pxl$2 = $pxl$1;
  }
 } else {
  $pxl$2 = $5;
 }
 $87 = HEAP32[$worker>>2]|0;
 $88 = $pxl$2 >> $87;
 $89 = ($88|0)>(-1);
 if (!($89)) {
  return;
 }
 $90 = ((($worker)) + 56|0);
 $91 = HEAP16[$90>>1]|0;
 $92 = $91&65535;
 $93 = ($88|0)<($92|0);
 if (!($93)) {
  return;
 }
 $94 = $88 >>> 3;
 $95 = $94&65535;
 $96 = $88 & 7;
 $97 = ((($worker)) + 158|0);
 $98 = HEAP16[$97>>1]|0;
 $99 = $98 << 16 >> 16;
 $sext = $94 << 16;
 $100 = $sext >> 16;
 $101 = ($99|0)>($100|0);
 if ($101) {
  HEAP16[$97>>1] = $95;
 }
 $102 = ((($worker)) + 160|0);
 $103 = HEAP16[$102>>1]|0;
 $104 = $103 << 16 >> 16;
 $105 = ($104|0)<($100|0);
 if ($105) {
  HEAP16[$102>>1] = $95;
 }
 $106 = 128 >>> $96;
 $107 = ((($worker)) + 148|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + ($100))|0;
 $110 = ((($worker)) + 60|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = (($111) + ($109)|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113&255;
 $115 = $114 | $106;
 $116 = $115&255;
 HEAP8[$112>>0] = $116;
 return;
}
function _Vertical_Sweep_Step($worker) {
 $worker = $worker|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 156|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ((($worker)) + 148|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2))|0;
 HEAP32[$3>>2] = $5;
 return;
}
function _Render_Single_Pass($worker,$flipped) {
 $worker = $worker|0;
 $flipped = $flipped|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 1024|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($worker)) + 4|0);
 $4 = ((($worker)) + 80|0);
 $5 = ((($worker)) + 76|0);
 $6 = ((($worker)) + 28|0);
 $7 = ((($worker)) + 40|0);
 $8 = ((($worker)) + 44|0);
 $9 = $flipped << 24 >> 24;
 $10 = ((($worker)) + 92|0);
 $12 = $1;
 while(1) {
  $11 = (((((($worker)) + 960|0) + ($12<<2)|0)) + 2|0);
  $13 = HEAP16[$11>>1]|0;
  $14 = $13 << 16 >> 16;
  $15 = HEAP32[$3>>2]|0;
  $16 = Math_imul($14, $15)|0;
  HEAP32[$4>>2] = $16;
  $17 = HEAP32[$0>>2]|0;
  $18 = (((($worker)) + 960|0) + ($17<<2)|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = HEAP32[$3>>2]|0;
  $22 = Math_imul($20, $21)|0;
  HEAP32[$5>>2] = $22;
  $23 = HEAP32[$6>>2]|0;
  HEAP32[$7>>2] = $23;
  HEAP32[$8>>2] = 0;
  $24 = (_Convert_Glyph($worker,$9)|0);
  $25 = ($24<<24>>24)==(0);
  if ($25) {
   $51 = HEAP32[$10>>2]|0;
   $52 = ($51|0)==(0|0);
   if (!($52)) {
    $53 = (_Draw_Sweep($worker)|0);
    $54 = ($53<<24>>24)==(0);
    if (!($54)) {
     label = 10;
     break;
    }
   }
   $56 = HEAP32[$0>>2]|0;
   $57 = (($56) + -1)|0;
   $storemerge = $57;
  } else {
   $26 = HEAP32[$8>>2]|0;
   $27 = ($26|0)==(98);
   if (!($27)) {
    $$0 = 1;
    label = 13;
    break;
   }
   HEAP32[$8>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = (((($worker)) + 960|0) + ($28<<2)|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = (((((($worker)) + 960|0) + ($28<<2)|0)) + 2|0);
   $32 = HEAP16[$31>>1]|0;
   $33 = $30 << 16 >> 16;
   $34 = $32 << 16 >> 16;
   $35 = (($34) + ($33))|0;
   $36 = (($35|0) / 2)&-1;
   $37 = ($28|0)>(6);
   $38 = ($36|0)<($33|0);
   $or$cond = $37 | $38;
   if ($or$cond) {
    label = 6;
    break;
   }
   $39 = $36&65535;
   $40 = (($28) + 1)|0;
   $41 = (((($worker)) + 960|0) + ($40<<2)|0);
   HEAP16[$41>>1] = $39;
   $42 = HEAP32[$0>>2]|0;
   $43 = (($42) + 1)|0;
   $44 = (((((($worker)) + 960|0) + ($43<<2)|0)) + 2|0);
   HEAP16[$44>>1] = $32;
   $45 = (($36) + 65535)|0;
   $46 = $45&65535;
   $47 = HEAP32[$0>>2]|0;
   $48 = (((((($worker)) + 960|0) + ($47<<2)|0)) + 2|0);
   HEAP16[$48>>1] = $46;
   $49 = HEAP32[$0>>2]|0;
   $50 = (($49) + 1)|0;
   $storemerge = $50;
  }
  HEAP32[$0>>2] = $storemerge;
  $58 = ($storemerge|0)>(-1);
  if ($58) {
   $12 = $storemerge;
  } else {
   $$0 = 0;
   label = 13;
   break;
  }
 }
 if ((label|0) == 6) {
  HEAP32[$0>>2] = 0;
  HEAP32[$8>>2] = 20;
  $$0 = 20;
  return ($$0|0);
 }
 else if ((label|0) == 10) {
  $55 = HEAP32[$8>>2]|0;
  $$0 = $55;
  return ($$0|0);
 }
 else if ((label|0) == 13) {
  return ($$0|0);
 }
 return (0)|0;
}
function _Horizontal_Sweep_Init($worker,$min,$max) {
 $worker = $worker|0;
 $min = $min|0;
 $max = $max|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _Horizontal_Sweep_Span($worker,$y,$x1,$x2,$left,$right) {
 $worker = $worker|0;
 $y = $y|0;
 $x1 = $x1|0;
 $x2 = $x2|0;
 $left = $left|0;
 $right = $right|0;
 var $$sum = 0, $$sum1 = 0, $$sum1$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($x2) - ($x1))|0;
 $1 = ((($worker)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0|0)<($2|0);
 if (!($3)) {
  return;
 }
 $4 = (($x1) + -1)|0;
 $5 = (($4) + ($2))|0;
 $6 = (0 - ($2))|0;
 $7 = $5 & $6;
 $8 = $6 & $x2;
 $9 = ($7|0)==($8|0);
 if (!($9)) {
  return;
 }
 $10 = ((($worker)) + 60|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $y << 16 >> 16;
 $13 = $12 >> 3;
 $14 = $12 & 7;
 $15 = 128 >>> $14;
 $16 = HEAP32[$worker>>2]|0;
 $17 = $7 >> $16;
 $18 = ($17|0)>(-1);
 if (!($18)) {
  return;
 }
 $19 = ((($worker)) + 104|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)<($20|0);
 if (!($21)) {
  return;
 }
 $22 = ((($worker)) + 112|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = Math_imul($23, $17)|0;
 $$sum = (($13) - ($24))|0;
 $25 = ($23|0)>(0);
 if ($25) {
  $26 = (($20) + -1)|0;
  $27 = Math_imul($23, $26)|0;
  $$sum1 = (($$sum) + ($27))|0;
  $$sum1$pn = $$sum1;
 } else {
  $$sum1$pn = $$sum;
 }
 $p$0 = (($11) + ($$sum1$pn)|0);
 $28 = HEAP8[$p$0>>0]|0;
 $29 = $28&255;
 $30 = $29 | $15;
 $31 = $30&255;
 HEAP8[$p$0>>0] = $31;
 return;
}
function _Horizontal_Sweep_Drop($worker,$y,$x1,$x2,$left,$right) {
 $worker = $worker|0;
 $y = $y|0;
 $x1 = $x1|0;
 $x2 = $x2|0;
 $left = $left|0;
 $right = $right|0;
 var $$sum = 0, $$sum1 = 0, $$sum1$pn = 0, $$sum2 = 0, $$sum3 = 0, $$sum3$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits$0 = 0, $bits$1 = 0, $pxl$0 = 0, $pxl$0$ = 0;
 var $pxl$1 = 0, $pxl$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($x1) + -1)|0;
 $3 = (($2) + ($1))|0;
 $4 = (0 - ($1))|0;
 $5 = $3 & $4;
 $6 = $4 & $x2;
 $7 = ($5|0)>($6|0);
 if ($7) {
  $8 = ((($left)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 7;
  $11 = (($6) + ($1))|0;
  $12 = ($5|0)==($11|0);
  if (!($12)) {
   return;
  }
  switch ($10|0) {
  case 0:  {
   $pxl$0 = $6;
   break;
  }
  case 4:  {
   $13 = (($x1) + -1)|0;
   $14 = (($13) + ($x2))|0;
   $15 = (($14|0) / 2)&-1;
   $16 = ((($worker)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + ($15))|0;
   $19 = $18 & $4;
   $pxl$0 = $19;
   break;
  }
  case 5: case 1:  {
   $20 = ((($left)) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==($right|0);
   if ($22) {
    $23 = ((($left)) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)<(1);
    if ($25) {
     $26 = HEAP32[$8>>2]|0;
     $27 = $26 & 16;
     $28 = ($27|0)==(0);
     if ($28) {
      return;
     }
     $29 = (($x2) - ($x1))|0;
     $30 = ((($worker)) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($29|0)<($31|0);
     if ($32) {
      return;
     }
    }
   }
   $33 = ((($right)) + 28|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==($left|0);
   if ($35) {
    $36 = ((($left)) + 20|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $y << 16 >> 16;
    $39 = ($37|0)==($38|0);
    if ($39) {
     $40 = HEAP32[$8>>2]|0;
     $41 = $40 & 32;
     $42 = ($41|0)==(0);
     if ($42) {
      return;
     }
     $43 = (($x2) - ($x1))|0;
     $44 = ((($worker)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($43|0)<($45|0);
     if ($46) {
      return;
     }
    }
   }
   $47 = ($10|0)==(1);
   if ($47) {
    $pxl$0 = $6;
   } else {
    $48 = (($x1) + -1)|0;
    $49 = (($48) + ($x2))|0;
    $50 = (($49|0) / 2)&-1;
    $51 = ((($worker)) + 8|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + ($50))|0;
    $54 = HEAP32[$0>>2]|0;
    $55 = (0 - ($54))|0;
    $56 = $53 & $55;
    $pxl$0 = $56;
   }
   break;
  }
  default: {
   return;
  }
  }
  $57 = ($pxl$0|0)<(0);
  if ($57) {
   $pxl$1 = $5;
  } else {
   $58 = HEAP32[$worker>>2]|0;
   $59 = $pxl$0 >> $58;
   $60 = ((($worker)) + 104|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)<($61|0);
   $pxl$0$ = $62 ? $pxl$0 : $6;
   $pxl$1 = $pxl$0$;
  }
  $63 = ($pxl$1|0)==($5|0);
  $64 = $63 ? $6 : $5;
  $65 = HEAP32[$worker>>2]|0;
  $66 = $64 >> $65;
  $67 = ((($worker)) + 60|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $y << 16 >> 16;
  $70 = $69 >> 3;
  $71 = $69 & 7;
  $72 = 128 >>> $71;
  $73 = ((($worker)) + 104|0);
  $74 = ((($worker)) + 112|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = Math_imul($66, $75)|0;
  $$sum2 = (($70) - ($76))|0;
  $77 = ($75|0)>(0);
  if ($77) {
   $78 = HEAP32[$73>>2]|0;
   $79 = (($78) + -1)|0;
   $80 = Math_imul($79, $75)|0;
   $$sum3 = (($80) + ($$sum2))|0;
   $$sum3$pn = $$sum3;
  } else {
   $$sum3$pn = $$sum2;
  }
  $bits$0 = (($68) + ($$sum3$pn)|0);
  $81 = ($66|0)>(-1);
  if ($81) {
   $82 = HEAP32[$73>>2]|0;
   $83 = ($66|0)<($82|0);
   if ($83) {
    $84 = HEAP8[$bits$0>>0]|0;
    $85 = $84&255;
    $86 = $72 & $85;
    $87 = ($86|0)==(0);
    if ($87) {
     $pxl$2 = $pxl$1;
    } else {
     return;
    }
   } else {
    $pxl$2 = $pxl$1;
   }
  } else {
   $pxl$2 = $pxl$1;
  }
 } else {
  $pxl$2 = $5;
 }
 $88 = ((($worker)) + 60|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $y << 16 >> 16;
 $91 = $90 >> 3;
 $92 = $90 & 7;
 $93 = 128 >>> $92;
 $94 = HEAP32[$worker>>2]|0;
 $95 = $pxl$2 >> $94;
 $96 = ($95|0)>(-1);
 if (!($96)) {
  return;
 }
 $97 = ((($worker)) + 104|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($95|0)<($98|0);
 if (!($99)) {
  return;
 }
 $100 = ((($worker)) + 112|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = Math_imul($101, $95)|0;
 $$sum = (($91) - ($102))|0;
 $103 = ($101|0)>(0);
 if ($103) {
  $104 = (($98) + -1)|0;
  $105 = Math_imul($101, $104)|0;
  $$sum1 = (($$sum) + ($105))|0;
  $$sum1$pn = $$sum1;
 } else {
  $$sum1$pn = $$sum;
 }
 $bits$1 = (($89) + ($$sum1$pn)|0);
 $106 = HEAP8[$bits$1>>0]|0;
 $107 = $106&255;
 $108 = $107 | $93;
 $109 = $108&255;
 HEAP8[$bits$1>>0] = $109;
 return;
}
function _Horizontal_Sweep_Step($worker) {
 $worker = $worker|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _ft_black_new($memory,$araster) {
 $memory = $memory|0;
 $araster = $araster|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$araster>>2] = 0;
 $0 = (_ft_mem_alloc($memory,24,$error)|0);
 $1 = HEAP32[$error>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($0)) + 8|0);
  HEAP32[$3>>2] = $memory;
  HEAP32[$araster>>2] = $0;
 }
 $4 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _ft_black_reset($raster,$pool_base,$pool_size) {
 $raster = $raster|0;
 $pool_base = $pool_base|0;
 $pool_size = $pool_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($raster|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ($pool_base|0)!=(0|0);
 $2 = ($pool_size|0)>(3075);
 $or$cond = $1 & $2;
 if ($or$cond) {
  $3 = ((($pool_base)) + 1032|0);
  HEAP32[$raster>>2] = $3;
  $4 = (($pool_size) + -1032)|0;
  $5 = ((($raster)) + 4|0);
  HEAP32[$5>>2] = $4;
  $6 = ((($raster)) + 12|0);
  HEAP32[$6>>2] = $pool_base;
  return;
 } else {
  HEAP32[$raster>>2] = 0;
  $7 = ((($raster)) + 4|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($raster)) + 12|0);
  HEAP32[$8>>2] = 0;
  return;
 }
}
function _ft_black_set_mode($raster,$mode,$palette) {
 $raster = $raster|0;
 $mode = $mode|0;
 $palette = $palette|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _ft_black_render($raster,$params) {
 $raster = $raster|0;
 $params = $params|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($params)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$params>>2]|0;
 $3 = ($raster|0)==(0|0);
 if ($3) {
  $$0 = 96;
  return ($$0|0);
 }
 $4 = HEAP32[$raster>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 96;
  return ($$0|0);
 }
 $6 = ((($raster)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 96;
  return ($$0|0);
 }
 $9 = ($1|0)==(0|0);
 if ($9) {
  $$0 = 20;
  return ($$0|0);
 }
 $10 = ((($1)) + 2|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = ($11<<16>>16)==(0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 $14 = HEAP16[$1>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = ($14<<16>>16)<(1);
 if ($16) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = ((($1)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $$0 = 20;
  return ($$0|0);
 }
 $20 = ((($1)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $$0 = 20;
  return ($$0|0);
 }
 $23 = (($15) + -1)|0;
 $24 = (($18) + ($23<<1)|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = (($26) + 1)|0;
 $28 = ($12|0)==($27|0);
 if (!($28)) {
  $$0 = 20;
  return ($$0|0);
 }
 $29 = ((($raster)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($params)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $32 & 2;
 $34 = ($33|0)==(0);
 if (!($34)) {
  $$0 = 19;
  return ($$0|0);
 }
 $35 = ($2|0)==(0|0);
 if ($35) {
  $$0 = 20;
  return ($$0|0);
 }
 $36 = ((($2)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  $$0 = 0;
  return ($$0|0);
 }
 $39 = HEAP32[$2>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  $$0 = 0;
  return ($$0|0);
 }
 $41 = ((($2)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if ($43) {
  $$0 = 20;
  return ($$0|0);
 }
 $44 = ((($30)) + 128|0);
 ;HEAP32[$44>>2]=HEAP32[$1>>2]|0;HEAP32[$44+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$44+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$44+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$44+16>>2]=HEAP32[$1+16>>2]|0;
 $45 = ((($30)) + 104|0);
 ;HEAP32[$45>>2]=HEAP32[$2>>2]|0;HEAP32[$45+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$45+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$45+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$45+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$45+20>>2]=HEAP32[$2+20>>2]|0;
 $46 = HEAP32[$raster>>2]|0;
 $47 = ((($30)) + 28|0);
 HEAP32[$47>>2] = $46;
 $48 = HEAP32[$6>>2]|0;
 $49 = $48 >>> 2;
 $50 = (($46) + ($49<<2)|0);
 $51 = ((($30)) + 32|0);
 HEAP32[$51>>2] = $50;
 $52 = HEAP32[$31>>2]|0;
 $53 = $52 & 1;
 $54 = ($53|0)==(0);
 if (!($54)) {
  $$0 = 19;
  return ($$0|0);
 }
 $55 = (_Render_Glyph($30)|0);
 $$0 = $55;
 return ($$0|0);
}
function _ft_black_done($raster) {
 $raster = $raster|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($raster)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 _ft_mem_free($1,$raster);
 return;
}
function _Convert_Glyph($worker,$flipped) {
 $worker = $worker|0;
 $flipped = $flipped|0;
 var $$0 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $i$01 = 0, $not$ = 0, $o$0 = 0, $o$0$in = 0, $start$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 92|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($worker)) + 87|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($worker)) + 86|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($worker)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + -32|0);
 $6 = ((($worker)) + 36|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($worker)) + 48|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($worker)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($worker)) + 88|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$8>>2]|0;
 $12 = ((($9)) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($worker)) + 84|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($worker)) + 128|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ($15<<16>>16)>(0);
 L1: do {
  if ($16) {
   $17 = ((($worker)) + 100|0);
   $18 = ((($worker)) + 96|0);
   $19 = ((($worker)) + 140|0);
   $20 = ((($worker)) + 72|0);
   $21 = ((($worker)) + 4|0);
   $22 = ((($worker)) + 76|0);
   $23 = ((($worker)) + 80|0);
   $24 = ((($worker)) + 8|0);
   $25 = ((($worker)) + 8|0);
   $i$01 = 0;$start$02 = 0;
   while(1) {
    HEAP32[$17>>2] = 0;
    HEAP32[$18>>2] = 0;
    $26 = $start$02&65535;
    $27 = HEAP32[$19>>2]|0;
    $28 = (($27) + ($i$01<<1)|0);
    $29 = HEAP16[$28>>1]|0;
    $30 = (_Decompose_Curve($worker,$26,$29,$flipped)|0);
    $31 = ($30<<24>>24)==(0);
    if (!($31)) {
     $$0 = 1;
     label = 19;
     break;
    }
    $32 = HEAP32[$19>>2]|0;
    $33 = (($32) + ($i$01<<1)|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = $34 << 16 >> 16;
    $36 = (($35) + 1)|0;
    $37 = HEAP32[$20>>2]|0;
    $38 = HEAP32[$21>>2]|0;
    $39 = (($38) + -1)|0;
    $40 = $39 & $37;
    $41 = ($40|0)==(0);
    if ($41) {
     $42 = HEAP32[$22>>2]|0;
     $43 = ($37|0)<($42|0);
     if (!($43)) {
      $44 = HEAP32[$23>>2]|0;
      $45 = ($37|0)>($44|0);
      if (!($45)) {
       $46 = HEAP32[$18>>2]|0;
       $47 = ($46|0)==(0|0);
       if (!($47)) {
        $48 = ((($46)) + 12|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = HEAP32[$10>>2]|0;
        $51 = ((($50)) + 12|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = $52 ^ $49;
        $54 = $53 & 8;
        $55 = ($54|0)==(0);
        if ($55) {
         $56 = HEAP32[$8>>2]|0;
         $57 = ((($56)) + -4|0);
         HEAP32[$8>>2] = $57;
        }
       }
      }
     }
    }
    $58 = HEAP32[$10>>2]|0;
    $59 = ((($58)) + 12|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $60 & 8;
    $62 = ($61|0)==(0);
    $63 = HEAP32[$20>>2]|0;
    $64 = HEAP32[$21>>2]|0;
    if ($62) {
     $68 = (($63) + -1)|0;
     $69 = (($68) + ($64))|0;
     $70 = (0 - ($64))|0;
     $71 = $69 & $70;
     $72 = (($71) - ($63))|0;
     $73 = HEAP32[$24>>2]|0;
     $74 = ($72|0)>=($73|0);
     $o$0$in = $74;
    } else {
     $$not = (($64) + -1)|0;
     $65 = $$not & $63;
     $66 = HEAP32[$25>>2]|0;
     $67 = ($65|0)>=($66|0);
     $o$0$in = $67;
    }
    $o$0 = $o$0$in&1;
    $75 = (_End_Profile($worker,$o$0)|0);
    $76 = ($75<<24>>24)==(0);
    if (!($76)) {
     $$0 = 1;
     label = 19;
     break;
    }
    $77 = HEAP32[$18>>2]|0;
    $78 = ($77|0)==(0|0);
    if (!($78)) {
     $79 = ((($58)) + 28|0);
     HEAP32[$79>>2] = $77;
    }
    $80 = (($i$01) + 1)|0;
    $81 = HEAP16[$14>>1]|0;
    $82 = $81 << 16 >> 16;
    $83 = ($80|0)<($82|0);
    if ($83) {
     $i$01 = $80;$start$02 = $36;
    } else {
     break L1;
    }
   }
   if ((label|0) == 19) {
    return ($$0|0);
   }
  }
 } while(0);
 $84 = (_Finalize_Profile_Table($worker)|0);
 $85 = ($84<<24>>24)==(0);
 if (!($85)) {
  $$0 = 1;
  return ($$0|0);
 }
 $86 = HEAP32[$8>>2]|0;
 $87 = HEAP32[$6>>2]|0;
 $not$ = ($86>>>0)>=($87>>>0);
 $88 = $not$&1;
 $$0 = $88;
 return ($$0|0);
}
function _Draw_Sweep($worker) {
 $worker = $worker|0;
 var $$ = 0, $$0 = 0, $$4 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $P$043 = 0, $P$1 = 0, $P$138 = 0, $P$139 = 0, $P$232 = 0, $P$315 = 0, $P$414 = 0, $P_Left$0 = 0, $P_Left$017 = 0, $P_Left$020 = 0, $P_Left$1 = 0, $P_Left$124 = 0, $P_Left$126 = 0, $P_Right$021 = 0, $P_Right$021$in = 0, $P_Right$127 = 0, $P_Right$127$in = 0, $draw_left = 0;
 var $draw_right = 0, $dropouts$019 = 0, $dropouts$1 = 0, $dropouts$1$lcssa = 0, $max_Y = 0, $min_Y = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $sext = 0, $sext1 = 0, $sext2 = 0, $sext3 = 0, $waiting = 0, $y$0 = 0, $y$0$ph = 0, $y$1$lcssa = 0, $y$129 = 0, $y$236 = 0, $y_height$0 = 0;
 var $y_height$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $min_Y = sp + 14|0;
 $max_Y = sp + 12|0;
 $waiting = sp + 8|0;
 $draw_left = sp + 4|0;
 $draw_right = sp;
 _Init_Linked($waiting);
 _Init_Linked($draw_left);
 _Init_Linked($draw_right);
 $0 = ((($worker)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($worker)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$worker>>2]|0;
 $5 = $3 >> $4;
 $6 = $5&65535;
 HEAP16[$max_Y>>1] = $6;
 $7 = ((($worker)) + 80|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$worker>>2]|0;
 $10 = $8 >> $9;
 $11 = $10&65535;
 HEAP16[$min_Y>>1] = $11;
 $12 = ($1|0)==(0|0);
 if (!($12)) {
  $P$043 = $1;
  while(1) {
   $13 = ((($P$043)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($P$043)) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($P$043)) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($16) + 65535)|0;
   $20 = (($19) + ($18))|0;
   $21 = $20&65535;
   $22 = HEAP16[$min_Y>>1]|0;
   $23 = $22 << 16 >> 16;
   $sext2 = $16 << 16;
   $24 = $sext2 >> 16;
   $25 = ($23|0)>($24|0);
   if ($25) {
    $26 = $16&65535;
    HEAP16[$min_Y>>1] = $26;
   }
   $27 = HEAP16[$max_Y>>1]|0;
   $28 = $27 << 16 >> 16;
   $sext3 = $20 << 16;
   $29 = $sext3 >> 16;
   $30 = ($28|0)<($29|0);
   if ($30) {
    HEAP16[$max_Y>>1] = $21;
   }
   HEAP32[$P$043>>2] = 0;
   _InsNew($waiting,$P$043);
   $31 = ($14|0)==(0|0);
   if ($31) {
    break;
   } else {
    $P$043 = $14;
   }
  }
 }
 $32 = ((($worker)) + 48|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 if ($34) {
  $35 = ((($worker)) + 44|0);
  HEAP32[$35>>2] = 20;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = ((($worker)) + 164|0);
 $37 = HEAP32[$36>>2]|0;
 FUNCTION_TABLE_viii[$37 & 31]($worker,$min_Y,$max_Y);
 $P$138 = HEAP32[$waiting>>2]|0;
 $38 = ($P$138|0)==(0|0);
 if (!($38)) {
  $39 = HEAP16[$min_Y>>1]|0;
  $40 = $39&65535;
  $P$139 = $P$138;
  while(1) {
   $41 = ((($P$139)) + 20|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) - ($40))|0;
   $44 = $43 & 65535;
   $45 = ((($P$139)) + 24|0);
   HEAP32[$45>>2] = $44;
   $46 = ((($P$139)) + 4|0);
   $P$1 = HEAP32[$46>>2]|0;
   $47 = ($P$1|0)==(0|0);
   if ($47) {
    break;
   } else {
    $P$139 = $P$1;
   }
  }
 }
 $48 = HEAP16[$min_Y>>1]|0;
 $49 = HEAP32[$32>>2]|0;
 $50 = ($49|0)>(0);
 if ($50) {
  $51 = (0 - ($49))|0;
  $52 = ((($worker)) + 32|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($51<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $48 << 16 >> 16;
  $57 = ($55|0)==($56|0);
  if ($57) {
   $58 = (($49) + -1)|0;
   HEAP32[$32>>2] = $58;
   $60 = $58;$y$0 = $48;$y_height$0 = 0;
  } else {
   $y$0$ph = $48;$y_height$0$ph = 0;
   label = 15;
  }
 } else {
  $60 = $49;$y$0 = $48;$y_height$0 = 0;
 }
 L23: while(1) {
  if ((label|0) == 15) {
   label = 0;
   $$pr = HEAP32[$32>>2]|0;
   $60 = $$pr;$y$0 = $y$0$ph;$y_height$0 = $y_height$0$ph;
  }
  $59 = ($60|0)>(0);
  if (!($59)) {
   break;
  }
  $64 = HEAP32[$waiting>>2]|0;
  $65 = ($64|0)==(0|0);
  if (!($65)) {
   $sext1 = $y_height$0 << 16;
   $66 = $sext1 >> 16;
   $P$232 = $64;
   while(1) {
    $67 = ((($P$232)) + 4|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((($P$232)) + 24|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) - ($66))|0;
    HEAP32[$69>>2] = $71;
    $72 = ($70|0)==($66|0);
    do {
     if ($72) {
      _DelOld($waiting,$P$232);
      $73 = ((($P$232)) + 12|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = $74 & 8;
      $76 = ($75|0)==(0);
      if ($76) {
       _InsNew($draw_right,$P$232);
       break;
      } else {
       _InsNew($draw_left,$P$232);
       break;
      }
     }
    } while(0);
    $77 = ($68|0)==(0|0);
    if ($77) {
     break;
    } else {
     $P$232 = $68;
    }
   }
  }
  _Sort($draw_left);
  _Sort($draw_right);
  $78 = HEAP32[$32>>2]|0;
  $79 = (($78) + -1)|0;
  HEAP32[$32>>2] = $79;
  $80 = (0 - ($78))|0;
  $81 = ((($worker)) + 32|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + ($80<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $sext = $84 << 16;
  $85 = $sext >> 16;
  $86 = $y$0&65535;
  $87 = (($85) - ($86))|0;
  $88 = $y$0 << 16 >> 16;
  $89 = ($88|0)<($85|0);
  if ($89) {
   $90 = ((($worker)) + 176|0);
   $91 = ((($worker)) + 172|0);
   $92 = ((($worker)) + 4|0);
   $93 = ((($worker)) + 168|0);
   $y$129 = $y$0;
   while(1) {
    $P_Left$017 = HEAP32[$draw_left>>2]|0;
    $94 = ($P_Left$017|0)==(0|0);
    if (!($94)) {
     $P_Left$020 = $P_Left$017;$P_Right$021$in = $draw_right;$dropouts$019 = 0;
     while(1) {
      $P_Right$021 = HEAP32[$P_Right$021$in>>2]|0;
      $95 = HEAP32[$P_Left$020>>2]|0;
      $96 = HEAP32[$P_Right$021>>2]|0;
      $97 = ($95|0)>($96|0);
      $$ = $97 ? $96 : $95;
      $$4 = $97 ? $95 : $96;
      $98 = HEAP32[$92>>2]|0;
      $99 = (0 - ($98))|0;
      $100 = $$ & $99;
      $101 = (($98) + -1)|0;
      $102 = (($101) + ($$4))|0;
      $103 = $102 & $99;
      $104 = (($$4) - ($$))|0;
      $105 = ($104|0)>($98|0);
      $106 = ($100|0)==($$|0);
      $or$cond = $105 | $106;
      $107 = ($103|0)==($$4|0);
      $or$cond5 = $or$cond | $107;
      if ($or$cond5) {
       label = 33;
      } else {
       $108 = ($100|0)>($103|0);
       $109 = (($100) + ($98))|0;
       $110 = ($103|0)==($109|0);
       $or$cond7 = $108 | $110;
       if ($or$cond7) {
        $111 = ((($P_Left$020)) + 12|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = $112 & 7;
        $114 = ($113|0)==(2);
        if ($114) {
         $dropouts$1 = $dropouts$019;
        } else {
         HEAP32[$P_Left$020>>2] = $$;
         HEAP32[$P_Right$021>>2] = $$4;
         $115 = ((($P_Left$020)) + 24|0);
         HEAP32[$115>>2] = 1;
         $116 = (($dropouts$019) + 1)<<16>>16;
         $dropouts$1 = $116;
        }
       } else {
        label = 33;
       }
      }
      if ((label|0) == 33) {
       label = 0;
       $117 = HEAP32[$93>>2]|0;
       FUNCTION_TABLE_viiiiii[$117 & 7]($worker,$y$129,$$,$$4,$P_Left$020,$P_Right$021);
       $dropouts$1 = $dropouts$019;
      }
      $118 = ((($P_Left$020)) + 4|0);
      $119 = ((($P_Right$021)) + 4|0);
      $P_Left$0 = HEAP32[$118>>2]|0;
      $120 = ($P_Left$0|0)==(0|0);
      if ($120) {
       $dropouts$1$lcssa = $dropouts$1;
       break;
      } else {
       $P_Left$020 = $P_Left$0;$P_Right$021$in = $119;$dropouts$019 = $dropouts$1;
      }
     }
     $121 = ($dropouts$1$lcssa<<16>>16)>(0);
     if ($121) {
      $P_Left$124 = HEAP32[$draw_left>>2]|0;
      $122 = ($P_Left$124|0)==(0|0);
      if (!($122)) {
       $P_Left$126 = $P_Left$124;$P_Right$127$in = $draw_right;
       while(1) {
        $P_Right$127 = HEAP32[$P_Right$127$in>>2]|0;
        $149 = ((($P_Left$126)) + 24|0);
        $150 = HEAP32[$149>>2]|0;
        $151 = ($150|0)==(0);
        if (!($151)) {
         HEAP32[$149>>2] = 0;
         $152 = HEAP32[$91>>2]|0;
         $153 = HEAP32[$P_Left$126>>2]|0;
         $154 = HEAP32[$P_Right$127>>2]|0;
         FUNCTION_TABLE_viiiiii[$152 & 7]($worker,$y$129,$153,$154,$P_Left$126,$P_Right$127);
        }
        $155 = ((($P_Left$126)) + 4|0);
        $156 = ((($P_Right$127)) + 4|0);
        $P_Left$1 = HEAP32[$155>>2]|0;
        $157 = ($P_Left$1|0)==(0|0);
        if ($157) {
         break;
        } else {
         $P_Left$126 = $P_Left$1;$P_Right$127$in = $156;
        }
       }
      }
     }
    }
    $123 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vi[$123 & 127]($worker);
    $124 = (($y$129) + 1)<<16>>16;
    $125 = $124 << 16 >> 16;
    $126 = ($125|0)<($85|0);
    if ($126) {
     _Sort($draw_left);
     _Sort($draw_right);
    }
    $127 = $124 << 16 >> 16;
    $128 = ($127|0)<($85|0);
    if ($128) {
     $y$129 = $124;
    } else {
     $y$1$lcssa = $124;
     break;
    }
   }
  } else {
   $y$1$lcssa = $y$0;
  }
  $129 = HEAP32[$draw_left>>2]|0;
  $130 = ($129|0)==(0|0);
  if (!($130)) {
   $P$315 = $129;
   while(1) {
    $131 = ((($P$315)) + 4|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = ((($P$315)) + 16|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = ($134|0)==(0);
    if ($135) {
     _DelOld($draw_left,$P$315);
    }
    $136 = ($132|0)==(0|0);
    if ($136) {
     break;
    } else {
     $P$315 = $132;
    }
   }
  }
  $137 = HEAP32[$draw_right>>2]|0;
  $138 = ($137|0)==(0|0);
  if ($138) {
   $y$0$ph = $y$1$lcssa;$y_height$0$ph = $87;
   label = 15;
   continue;
  } else {
   $P$414 = $137;
  }
  while(1) {
   $139 = ((($P$414)) + 4|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = ((($P$414)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)==(0);
   if ($143) {
    _DelOld($draw_right,$P$414);
   }
   $144 = ($140|0)==(0|0);
   if ($144) {
    $y$0$ph = $y$1$lcssa;$y_height$0$ph = $87;
    label = 15;
    continue L23;
   } else {
    $P$414 = $140;
   }
  }
 }
 $61 = HEAP16[$max_Y>>1]|0;
 $62 = ($y$0<<16>>16)>($61<<16>>16);
 if ($62) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = ((($worker)) + 176|0);
 $y$236 = $y$0;
 while(1) {
  $145 = HEAP32[$63>>2]|0;
  FUNCTION_TABLE_vi[$145 & 127]($worker);
  $146 = (($y$236) + 1)<<16>>16;
  $147 = HEAP16[$max_Y>>1]|0;
  $148 = ($146<<16>>16)>($147<<16>>16);
  if ($148) {
   $$0 = 0;
   break;
  } else {
   $y$236 = $146;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _Init_Linked($l) {
 $l = $l|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$l>>2] = 0;
 return;
}
function _InsNew($list,$profile) {
 $list = $list|0;
 $profile = $profile|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $current$0 = 0, $current$0$in$lcssa = 0, $current$0$in2 = 0, $current$0$lcssa = 0, $current$01 = 0, $current$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$profile>>2]|0;
 $current$01 = HEAP32[$list>>2]|0;
 $1 = ($current$01|0)==(0|0);
 L1: do {
  if ($1) {
   $current$0$in$lcssa = $list;$current$0$lcssa = 0;
  } else {
   $current$0$in2 = $list;$current$03 = $current$01;
   while(1) {
    $2 = HEAP32[$current$03>>2]|0;
    $3 = ($0|0)<($2|0);
    if ($3) {
     $current$0$in$lcssa = $current$0$in2;$current$0$lcssa = $current$03;
     break L1;
    }
    $4 = ((($current$03)) + 4|0);
    $current$0 = HEAP32[$4>>2]|0;
    $5 = ($current$0|0)==(0|0);
    if ($5) {
     $current$0$in$lcssa = $4;$current$0$lcssa = 0;
     break;
    } else {
     $current$0$in2 = $4;$current$03 = $current$0;
    }
   }
  }
 } while(0);
 $6 = ((($profile)) + 4|0);
 HEAP32[$6>>2] = $current$0$lcssa;
 HEAP32[$current$0$in$lcssa>>2] = $profile;
 return;
}
function _DelOld($list,$profile) {
 $list = $list|0;
 $profile = $profile|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $current$0 = 0, $old$0 = 0, $old$0$lcssa6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $old$0 = $list;
 while(1) {
  $current$0 = HEAP32[$old$0>>2]|0;
  $0 = ($current$0|0)==(0|0);
  if ($0) {
   label = 5;
   break;
  }
  $1 = ($current$0|0)==($profile|0);
  $2 = ((($current$0)) + 4|0);
  if ($1) {
   $$lcssa = $2;$old$0$lcssa6 = $old$0;
   break;
  } else {
   $old$0 = $2;
  }
 }
 if ((label|0) == 5) {
  return;
 }
 $3 = HEAP32[$$lcssa>>2]|0;
 HEAP32[$old$0$lcssa6>>2] = $3;
 return;
}
function _Sort($list) {
 $list = $list|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $current$0 = 0, $current$07 = 0, $current$08 = 0, $current$1$be = 0, $current$14 = 0, $next$0 = 0, $next$0$in = 0, $next$0$in1 = 0, $next$0$in5 = 0, $next$02 = 0, $next$06 = 0, $old$0$be = 0, $old$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $current$07 = HEAP32[$list>>2]|0;
 $0 = ($current$07|0)==(0|0);
 if ($0) {
  return;
 } else {
  $current$08 = $current$07;
 }
 while(1) {
  $1 = ((($current$08)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  HEAP32[$current$08>>2] = $3;
  $4 = ((($current$08)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 >>> 2;
  $7 = $6 & 2;
  $8 = (($7) + -1)|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = (($9) + ($8<<2)|0);
  HEAP32[$1>>2] = $10;
  $11 = ((($current$08)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + -1)|0;
  HEAP32[$11>>2] = $13;
  $14 = ((($current$08)) + 4|0);
  $current$0 = HEAP32[$14>>2]|0;
  $15 = ($current$0|0)==(0|0);
  if ($15) {
   break;
  } else {
   $current$08 = $current$0;
  }
 }
 $$pr = HEAP32[$list>>2]|0;
 $16 = ($$pr|0)==(0|0);
 if ($16) {
  return;
 }
 $next$0$in1 = ((($$pr)) + 4|0);
 $next$02 = HEAP32[$next$0$in1>>2]|0;
 $17 = ($next$02|0)==(0|0);
 if ($17) {
  return;
 } else {
  $current$14 = $$pr;$next$0$in5 = $next$0$in1;$next$06 = $next$02;$old$03 = $list;
 }
 while(1) {
  $18 = HEAP32[$current$14>>2]|0;
  $19 = HEAP32[$next$06>>2]|0;
  $20 = ($18|0)>($19|0);
  if ($20) {
   HEAP32[$old$03>>2] = $next$06;
   $21 = ((($next$06)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$next$0$in5>>2] = $22;
   HEAP32[$21>>2] = $current$14;
   $23 = HEAP32[$list>>2]|0;
   $current$1$be = $23;$old$0$be = $list;
  } else {
   $current$1$be = $next$06;$old$0$be = $next$0$in5;
  }
  $next$0$in = ((($current$1$be)) + 4|0);
  $next$0 = HEAP32[$next$0$in>>2]|0;
  $24 = ($next$0|0)==(0|0);
  if ($24) {
   break;
  } else {
   $current$14 = $current$1$be;$next$0$in5 = $next$0$in;$next$06 = $next$0;$old$03 = $old$0$be;
  }
 }
 return;
}
function _Decompose_Curve($worker,$first,$last,$flipped) {
 $worker = $worker|0;
 $first = $first|0;
 $last = $last|0;
 $flipped = $flipped|0;
 var $$ = 0, $$0 = 0, $$10 = 0, $$10$lcssa109 = 0, $$11 = 0, $$11$lcssa111 = 0, $$12 = 0, $$12$lcssa = 0, $$13 = 0, $$13$lcssa = 0, $$14 = 0, $$14$lcssa = 0, $$15 = 0, $$15$lcssa = 0, $$16 = 0, $$17 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$6 = 0;
 var $$7 = 0, $$8 = 0, $$9 = 0, $$lcssa105 = 0, $$lcssa107 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $88$phi = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $limit$0 = 0, $limit$1 = 0, $point$0 = 0, $point$1$be = 0, $point$136 = 0, $point$2 = 0, $tags$0 = 0, $tags$1$be = 0;
 var $tags$135 = 0, $tags$2 = 0, $v_control$sroa$0$0 = 0, $v_control$sroa$0$0$lcssa = 0, $v_control$sroa$0$0$lcssa100 = 0, $v_control$sroa$9$0 = 0, $v_control$sroa$9$0$lcssa = 0, $v_control$sroa$9$0$lcssa103 = 0, $v_start$sroa$0$1 = 0, $v_start$sroa$0$2 = 0, $v_start$sroa$12$1 = 0, $v_start$sroa$12$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 132|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $last&65535;
 $3 = (($1) + ($2<<3)|0);
 $4 = $first&65535;
 $5 = (($1) + ($4<<3)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($worker)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $6 << $8;
 $10 = ((($worker)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) - ($11))|0;
 $13 = (((($1) + ($4<<3)|0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 << $8;
 $16 = (($15) - ($11))|0;
 $17 = HEAP32[$3>>2]|0;
 $18 = $17 << $8;
 $19 = (($18) - ($11))|0;
 $20 = (((($1) + ($2<<3)|0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 << $8;
 $23 = (($22) - ($11))|0;
 $24 = ($flipped|0)!=(0);
 $$ = $24 ? $16 : $12;
 $$3 = $24 ? $12 : $16;
 $$4 = $24 ? $23 : $19;
 $$5 = $24 ? $19 : $23;
 $25 = ((($worker)) + 136|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($4)|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 & 4;
 $30 = ($29<<24>>24)==(0);
 if (!($30)) {
  $31 = ($28&255) >>> 5;
  $32 = ((($worker)) + 180|0);
  HEAP8[$32>>0] = $31;
 }
 $33 = HEAP8[$27>>0]|0;
 $34 = $33&255;
 $35 = $34 & 3;
 switch ($35|0) {
 case 2:  {
  label = 24;
  break;
 }
 case 0:  {
  $36 = HEAP32[$25>>2]|0;
  $37 = (($36) + ($2)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38 & 3;
  $40 = ($39<<24>>24)==(1);
  if ($40) {
   $$sum2 = (($2) + -1)|0;
   $41 = (($1) + ($$sum2<<3)|0);
   $limit$0 = $41;$v_start$sroa$0$1 = $$4;$v_start$sroa$12$1 = $$5;
  } else {
   $42 = (($$4) + ($$))|0;
   $43 = (($42|0) / 2)&-1;
   $44 = (($$5) + ($$3))|0;
   $45 = (($44|0) / 2)&-1;
   $limit$0 = $3;$v_start$sroa$0$1 = $43;$v_start$sroa$12$1 = $45;
  }
  $$sum = (($4) + -1)|0;
  $46 = (($1) + ($$sum<<3)|0);
  $47 = (($26) + ($$sum)|0);
  $limit$1 = $limit$0;$point$0 = $46;$tags$0 = $47;$v_start$sroa$0$2 = $v_start$sroa$0$1;$v_start$sroa$12$2 = $v_start$sroa$12$1;
  label = 8;
  break;
 }
 default: {
  $limit$1 = $3;$point$0 = $5;$tags$0 = $27;$v_start$sroa$0$2 = $$;$v_start$sroa$12$2 = $$3;
  label = 8;
 }
 }
 L10: do {
  if ((label|0) == 8) {
   $48 = ((($worker)) + 68|0);
   HEAP32[$48>>2] = $v_start$sroa$0$2;
   $49 = ((($worker)) + 72|0);
   HEAP32[$49>>2] = $v_start$sroa$12$2;
   $50 = ($point$0>>>0)<($limit$1>>>0);
   L12: do {
    if ($50) {
     $point$136 = $point$0;$tags$135 = $tags$0;
     L13: while(1) {
      $51 = ((($point$136)) + 8|0);
      $52 = ((($tags$135)) + 1|0);
      $53 = HEAP8[$52>>0]|0;
      $54 = $53&255;
      $55 = $54 & 3;
      switch ($55|0) {
      case 1:  {
       $56 = HEAP32[$51>>2]|0;
       $57 = HEAP32[$7>>2]|0;
       $58 = $56 << $57;
       $59 = HEAP32[$10>>2]|0;
       $60 = (($58) - ($59))|0;
       $61 = ((($point$136)) + 12|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = $62 << $57;
       $64 = (($63) - ($59))|0;
       $$6 = $24 ? $64 : $60;
       $$7 = $24 ? $60 : $64;
       $65 = (_Line_To($worker,$$6,$$7)|0);
       $66 = ($65<<24>>24)==(0);
       if ($66) {
        $point$1$be = $51;$tags$1$be = $52;
       } else {
        break L10;
       }
       break;
      }
      case 0:  {
       $67 = HEAP32[$51>>2]|0;
       $68 = HEAP32[$7>>2]|0;
       $69 = $67 << $68;
       $70 = HEAP32[$10>>2]|0;
       $71 = (($69) - ($70))|0;
       $72 = ((($point$136)) + 12|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = $73 << $68;
       $75 = (($74) - ($70))|0;
       $$8 = $24 ? $75 : $71;
       $$9 = $24 ? $71 : $75;
       $88 = $point$136;$point$2 = $51;$tags$2 = $52;$v_control$sroa$0$0 = $$8;$v_control$sroa$9$0 = $$9;
       L22: while(1) {
        $76 = ($point$2>>>0)<($limit$1>>>0);
        if (!($76)) {
         $v_control$sroa$0$0$lcssa = $v_control$sroa$0$0;$v_control$sroa$9$0$lcssa = $v_control$sroa$9$0;
         label = 17;
         break L13;
        }
        $77 = ((($point$2)) + 8|0);
        $78 = ((($tags$2)) + 1|0);
        $79 = HEAP8[$78>>0]|0;
        $80 = $79&255;
        $81 = $80 & 3;
        $82 = HEAP32[$77>>2]|0;
        $83 = HEAP32[$7>>2]|0;
        $84 = $82 << $83;
        $85 = HEAP32[$10>>2]|0;
        $86 = (($84) - ($85))|0;
        $87 = ((($88)) + 20|0);
        $89 = HEAP32[$87>>2]|0;
        $90 = $89 << $83;
        $91 = (($90) - ($85))|0;
        $$10 = $24 ? $91 : $86;
        $$11 = $24 ? $86 : $91;
        switch ($81|0) {
        case 1:  {
         $$10$lcssa109 = $$10;$$11$lcssa111 = $$11;$$lcssa105 = $77;$$lcssa107 = $78;$v_control$sroa$0$0$lcssa100 = $v_control$sroa$0$0;$v_control$sroa$9$0$lcssa103 = $v_control$sroa$9$0;
         break L22;
         break;
        }
        case 0:  {
         break;
        }
        default: {
         label = 24;
         break L10;
        }
        }
        $95 = (($$10) + ($v_control$sroa$0$0))|0;
        $96 = (($95|0) / 2)&-1;
        $97 = (($$11) + ($v_control$sroa$9$0))|0;
        $98 = (($97|0) / 2)&-1;
        $99 = (_Conic_To($worker,$v_control$sroa$0$0,$v_control$sroa$9$0,$96,$98)|0);
        $100 = ($99<<24>>24)==(0);
        if ($100) {
         $88$phi = $point$2;$point$2 = $77;$tags$2 = $78;$v_control$sroa$0$0 = $$10;$v_control$sroa$9$0 = $$11;$88 = $88$phi;
        } else {
         break L10;
        }
       }
       $92 = (_Conic_To($worker,$v_control$sroa$0$0$lcssa100,$v_control$sroa$9$0$lcssa103,$$10$lcssa109,$$11$lcssa111)|0);
       $93 = ($92<<24>>24)==(0);
       if ($93) {
        $point$1$be = $$lcssa105;$tags$1$be = $$lcssa107;
       } else {
        break L10;
       }
       break;
      }
      default: {
       $103 = ((($point$136)) + 16|0);
       $104 = ($103>>>0)>($limit$1>>>0);
       if ($104) {
        label = 24;
        break L10;
       }
       $105 = ((($tags$135)) + 2|0);
       $106 = HEAP8[$105>>0]|0;
       $107 = $106 & 3;
       $108 = ($107<<24>>24)==(2);
       if (!($108)) {
        label = 24;
        break L10;
       }
       $109 = ((($point$136)) + 24|0);
       $110 = ((($point$136)) + 8|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = HEAP32[$7>>2]|0;
       $113 = $111 << $112;
       $114 = HEAP32[$10>>2]|0;
       $115 = (($113) - ($114))|0;
       $116 = ((($point$136)) + 12|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = $117 << $112;
       $119 = (($118) - ($114))|0;
       $120 = ((($point$136)) + 16|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = $121 << $112;
       $123 = (($122) - ($114))|0;
       $124 = ((($point$136)) + 20|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = $125 << $112;
       $127 = (($126) - ($114))|0;
       $$12 = $24 ? $119 : $115;
       $$13 = $24 ? $115 : $119;
       $$14 = $24 ? $127 : $123;
       $$15 = $24 ? $123 : $127;
       $128 = ($109>>>0)>($limit$1>>>0);
       if ($128) {
        $$12$lcssa = $$12;$$13$lcssa = $$13;$$14$lcssa = $$14;$$15$lcssa = $$15;
        label = 22;
        break L13;
       }
       $129 = ((($tags$135)) + 3|0);
       $130 = HEAP32[$109>>2]|0;
       $131 = $130 << $112;
       $132 = (($131) - ($114))|0;
       $133 = ((($point$136)) + 28|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = $134 << $112;
       $136 = (($135) - ($114))|0;
       $$16 = $24 ? $136 : $132;
       $$17 = $24 ? $132 : $136;
       $137 = (_Cubic_To($worker,$$12,$$13,$$14,$$15,$$16,$$17)|0);
       $138 = ($137<<24>>24)==(0);
       if ($138) {
        $point$1$be = $109;$tags$1$be = $129;
       } else {
        break L10;
       }
      }
      }
      $94 = ($point$1$be>>>0)<($limit$1>>>0);
      if ($94) {
       $point$136 = $point$1$be;$tags$135 = $tags$1$be;
      } else {
       break L12;
      }
     }
     if ((label|0) == 17) {
      $101 = (_Conic_To($worker,$v_control$sroa$0$0$lcssa,$v_control$sroa$9$0$lcssa,$v_start$sroa$0$2,$v_start$sroa$12$2)|0);
      $102 = ($101<<24>>24)==(0);
      if ($102) {
       $$0 = 0;
      } else {
       break L10;
      }
      return ($$0|0);
     }
     else if ((label|0) == 22) {
      $139 = (_Cubic_To($worker,$$12$lcssa,$$13$lcssa,$$14$lcssa,$$15$lcssa,$v_start$sroa$0$2,$v_start$sroa$12$2)|0);
      $140 = ($139<<24>>24)==(0);
      if ($140) {
       $$0 = 0;
      } else {
       break L10;
      }
      return ($$0|0);
     }
    }
   } while(0);
   $141 = (_Line_To($worker,$v_start$sroa$0$2,$v_start$sroa$12$2)|0);
   $142 = ($141<<24>>24)==(0);
   if ($142) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 } while(0);
 if ((label|0) == 24) {
  $143 = ((($worker)) + 44|0);
  HEAP32[$143>>2] = 20;
 }
 $$0 = 1;
 return ($$0|0);
}
function _End_Profile($worker,$overshoot) {
 $worker = $worker|0;
 $overshoot = $overshoot|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($worker)) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = ($8|0)<(0);
 if ($10) {
  $11 = ((($worker)) + 44|0);
  HEAP32[$11>>2] = 99;
  $$0 = 1;
  return ($$0|0);
 }
 $12 = ($8|0)>(0);
 if ($12) {
  $13 = ((($3)) + 16|0);
  HEAP32[$13>>2] = $9;
  $14 = ($overshoot<<24>>24)==(0);
  do {
   if (!($14)) {
    $15 = HEAP32[$2>>2]|0;
    $16 = ((($15)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 & 8;
    $19 = ($18|0)==(0);
    if ($19) {
     $21 = $17 | 32;
     HEAP32[$16>>2] = $21;
     break;
    } else {
     $20 = $17 | 16;
     HEAP32[$16>>2] = $20;
     break;
    }
   }
  } while(0);
  $22 = HEAP32[$2>>2]|0;
  $23 = HEAP32[$0>>2]|0;
  HEAP32[$2>>2] = $23;
  $24 = HEAP32[$0>>2]|0;
  $25 = ((($24)) + 32|0);
  HEAP32[$0>>2] = $25;
  $26 = HEAP32[$2>>2]|0;
  $27 = ((($26)) + 16|0);
  HEAP32[$27>>2] = 0;
  $28 = HEAP32[$0>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  $30 = ((($29)) + 8|0);
  HEAP32[$30>>2] = $28;
  $31 = HEAP32[$2>>2]|0;
  $32 = ((($22)) + 28|0);
  HEAP32[$32>>2] = $31;
  $33 = ((($worker)) + 84|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = (($34) + 1)<<16>>16;
  HEAP16[$33>>1] = $35;
 }
 $36 = HEAP32[$0>>2]|0;
 $37 = ((($worker)) + 36|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($36>>>0)<($38>>>0);
 if ($39) {
  $41 = ((($worker)) + 87|0);
  HEAP8[$41>>0] = 0;
  $$0 = 0;
  return ($$0|0);
 } else {
  $40 = ((($worker)) + 44|0);
  HEAP32[$40>>2] = 98;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _Finalize_Profile_Table($worker) {
 $worker = $worker|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $bottom$0 = 0, $n$02 = 0, $or$cond = 0, $p$03 = 0, $top$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 84|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ((($worker)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1&65535)>(1);
 $5 = ($3|0)!=(0|0);
 $or$cond = $4 & $5;
 if (!($or$cond)) {
  HEAP32[$2>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ($1<<16>>16)==(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $n$02 = $1;$p$03 = $3;
 }
 while(1) {
  $7 = ($n$02&65535)>(1);
  if ($7) {
   $8 = ((($p$03)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($p$03)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + ($11<<2)|0);
   $13 = ((($p$03)) + 4|0);
   HEAP32[$13>>2] = $12;
  } else {
   $14 = ((($p$03)) + 4|0);
   HEAP32[$14>>2] = 0;
  }
  $15 = ((($p$03)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 8;
  $18 = ($17|0)==(0);
  $19 = ((($p$03)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($p$03)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  if ($18) {
   $25 = (($20) - ($22))|0;
   $26 = (($25) + 1)|0;
   HEAP32[$19>>2] = $26;
   $27 = HEAP32[$21>>2]|0;
   $28 = (($27) + -1)|0;
   $29 = ((($p$03)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + ($28<<2)|0);
   HEAP32[$29>>2] = $31;
   $bottom$0 = $26;$top$0 = $20;
  } else {
   $23 = (($20) + -1)|0;
   $24 = (($23) + ($22))|0;
   $bottom$0 = $20;$top$0 = $24;
  }
  $32 = (_Insert_Y_Turn($worker,$bottom$0)|0);
  $33 = ($32<<24>>24)==(0);
  if (!($33)) {
   $$0 = 1;
   label = 13;
   break;
  }
  $34 = (($top$0) + 1)|0;
  $35 = (_Insert_Y_Turn($worker,$34)|0);
  $36 = ($35<<24>>24)==(0);
  if (!($36)) {
   $$0 = 1;
   label = 13;
   break;
  }
  $37 = ((($p$03)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($n$02) + -1)<<16>>16;
  $40 = ($39<<16>>16)==(0);
  if ($40) {
   $$0 = 0;
   label = 13;
   break;
  } else {
   $n$02 = $39;$p$03 = $38;
  }
 }
 if ((label|0) == 13) {
  return ($$0|0);
 }
 return (0)|0;
}
function _Insert_Y_Turn($worker,$y) {
 $worker = $worker|0;
 $y = $y|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$117 = 0, $$lcssa = 0, $$lcssa39 = 0, $$lcssa40 = 0, $$old1 = 0, $$op = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $n$0$in = 0;
 var $n$0$in$lcssa36 = 0, $n$0$lcssa37 = 0, $n$1 = 0, $n$2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($worker)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $n$0$in = $1;
 while(1) {
  $n$0 = (($n$0$in) + -1)|0;
  $4 = ($n$0$in|0)>(0);
  if (!($4)) {
   $$1 = $y;$n$2 = $n$0;
   label = 8;
   break;
  }
  $$sum4 = (($n$0) - ($1))|0;
  $5 = (($3) + ($$sum4<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)>($y|0);
  if ($7) {
   $n$0$in = $n$0;
  } else {
   $$lcssa39 = $4;$$lcssa40 = $6;$n$0$in$lcssa36 = $n$0$in;$n$0$lcssa37 = $n$0;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$lcssa40|0)<($y|0);
  $or$cond = $$lcssa39 & $8;
  if ($or$cond) {
   $9 = (0 - ($n$0$in$lcssa36))|0;
   $10 = ($9|0)>(-1);
   $$02 = $y;$n$1 = $n$0$lcssa37;
   while(1) {
    $$sum3 = (($n$1) - ($1))|0;
    $11 = (($3) + ($$sum3<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    HEAP32[$11>>2] = $$02;
    $13 = (($n$1) + -1)|0;
    $$old1 = ($n$1|0)>(0);
    if ($$old1) {
     $$02 = $12;$n$1 = $13;
    } else {
     $$lcssa = $12;
     break;
    }
   }
   $$op = (($n$0$in$lcssa36) + -2)|0;
   if ($10) {
    $$1 = $$lcssa;$n$2 = $$op;
    label = 8;
   } else {
    $$117 = $$lcssa;
   }
  } else {
   $$1 = $y;$n$2 = $n$0$lcssa37;
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $14 = ($n$2|0)<(0);
  if ($14) {
   $$117 = $$1;
  } else {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $15 = ((($worker)) + 36|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + -4|0);
 HEAP32[$15>>2] = $17;
 $18 = ((($worker)) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17>>>0)>($19>>>0);
 if ($20) {
  $22 = HEAP32[$0>>2]|0;
  $23 = (($22) + 1)|0;
  HEAP32[$0>>2] = $23;
  $24 = $22 ^ -1;
  $25 = HEAP32[$2>>2]|0;
  $26 = (($25) + ($24<<2)|0);
  HEAP32[$26>>2] = $$117;
  $$0 = 0;
  return ($$0|0);
 } else {
  $21 = ((($worker)) + 44|0);
  HEAP32[$21>>2] = 98;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _Line_To($worker,$x,$y) {
 $worker = $worker|0;
 $x = $x|0;
 $y = $y|0;
 var $$0 = 0, $$not = 0, $$not1 = 0, $$not2 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 L1: do {
  switch ($1|0) {
  case 0:  {
   $2 = ((($worker)) + 72|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)<($y|0);
   if ($4) {
    $5 = ((($worker)) + 4|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (($3) + -1)|0;
    $8 = (($7) + ($6))|0;
    $9 = (0 - ($6))|0;
    $10 = $8 & $9;
    $11 = (($10) - ($3))|0;
    $12 = ((($worker)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)>=($13|0);
    $15 = $14&1;
    $16 = (_New_Profile($worker,1,$15)|0);
    $17 = ($16<<24>>24)==(0);
    if ($17) {
     label = 12;
     break L1;
    } else {
     $$0 = 1;
    }
    return ($$0|0);
   }
   $18 = ($3|0)>($y|0);
   if ($18) {
    $19 = ((($worker)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $$not2 = (($20) + -1)|0;
    $21 = $$not2 & $3;
    $22 = ((($worker)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($21|0)>=($23|0);
    $25 = $24&1;
    $26 = (_New_Profile($worker,2,$25)|0);
    $27 = ($26<<24>>24)==(0);
    if ($27) {
     label = 12;
    } else {
     $$0 = 1;
     return ($$0|0);
    }
   } else {
    label = 12;
   }
   break;
  }
  case 1:  {
   $28 = ((($worker)) + 72|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)>($y|0);
   if ($30) {
    $31 = ((($worker)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $$not = (($32) + -1)|0;
    $33 = $$not & $29;
    $34 = ((($worker)) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)>=($35|0);
    $37 = $36&1;
    $38 = (_End_Profile($worker,$37)|0);
    $39 = ($38<<24>>24)==(0);
    if (!($39)) {
     $$0 = 1;
     return ($$0|0);
    }
    $40 = HEAP32[$28>>2]|0;
    $41 = HEAP32[$31>>2]|0;
    $$not1 = (($41) + -1)|0;
    $42 = $$not1 & $40;
    $43 = HEAP32[$34>>2]|0;
    $44 = ($42|0)>=($43|0);
    $45 = $44&1;
    $46 = (_New_Profile($worker,2,$45)|0);
    $47 = ($46<<24>>24)==(0);
    if ($47) {
     label = 12;
    } else {
     $$0 = 1;
     return ($$0|0);
    }
   } else {
    label = 12;
   }
   break;
  }
  case 2:  {
   $48 = ((($worker)) + 72|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)<($y|0);
   if ($50) {
    $51 = ((($worker)) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($49) + -1)|0;
    $54 = (($53) + ($52))|0;
    $55 = (0 - ($52))|0;
    $56 = $54 & $55;
    $57 = (($56) - ($49))|0;
    $58 = ((($worker)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($57|0)>=($59|0);
    $61 = $60&1;
    $62 = (_End_Profile($worker,$61)|0);
    $63 = ($62<<24>>24)==(0);
    if (!($63)) {
     $$0 = 1;
     return ($$0|0);
    }
    $64 = HEAP32[$48>>2]|0;
    $65 = HEAP32[$51>>2]|0;
    $66 = (($64) + -1)|0;
    $67 = (($66) + ($65))|0;
    $68 = (0 - ($65))|0;
    $69 = $67 & $68;
    $70 = (($69) - ($64))|0;
    $71 = HEAP32[$58>>2]|0;
    $72 = ($70|0)>=($71|0);
    $73 = $72&1;
    $74 = (_New_Profile($worker,1,$73)|0);
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     label = 12;
    } else {
     $$0 = 1;
     return ($$0|0);
    }
   } else {
    label = 12;
   }
   break;
  }
  default: {
   $76 = $1;
  }
  }
 } while(0);
 if ((label|0) == 12) {
  $$pr = HEAP32[$0>>2]|0;
  $76 = $$pr;
 }
 switch ($76|0) {
 case 1:  {
  $77 = ((($worker)) + 68|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($worker)) + 72|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($worker)) + 76|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ((($worker)) + 80|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (_Line_Up($worker,$78,$80,$x,$y,$82,$84)|0);
  $86 = ($85<<24>>24)==(0);
  if (!($86)) {
   $$0 = 1;
   return ($$0|0);
  }
  break;
 }
 case 2:  {
  $87 = ((($worker)) + 68|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ((($worker)) + 72|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($worker)) + 76|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ((($worker)) + 80|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (_Line_Down($worker,$88,$90,$x,$y,$92,$94)|0);
  $96 = ($95<<24>>24)==(0);
  if (!($96)) {
   $$0 = 1;
   return ($$0|0);
  }
  break;
 }
 default: {
 }
 }
 $97 = ((($worker)) + 68|0);
 HEAP32[$97>>2] = $x;
 $98 = ((($worker)) + 72|0);
 HEAP32[$98>>2] = $y;
 $$0 = 0;
 return ($$0|0);
}
function _Conic_To($worker,$cx,$cy,$x,$y) {
 $worker = $worker|0;
 $cx = $cx|0;
 $cy = $cy|0;
 $x = $x|0;
 $y = $y|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$lcssa12 = 0, $$lcssa13 = 0, $$not = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 184|0);
 $1 = ((($worker)) + 52|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($worker)) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($worker)) + 200|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($worker)) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 20|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 8|0);
 HEAP32[$10>>2] = $cx;
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($11)) + 12|0);
 HEAP32[$12>>2] = $cy;
 $13 = HEAP32[$1>>2]|0;
 HEAP32[$13>>2] = $x;
 $14 = HEAP32[$1>>2]|0;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = $y;
 $16 = ((($worker)) + 100|0);
 $17 = ((($worker)) + 76|0);
 $18 = ((($worker)) + 80|0);
 $19 = ((($worker)) + 4|0);
 $20 = ((($worker)) + 8|0);
 $21 = ((($worker)) + 8|0);
 L1: while(1) {
  $22 = HEAP32[$1>>2]|0;
  $23 = ((($22)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($22)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($22)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = HEAP32[$22>>2]|0;
  $30 = ($24|0)>($28|0);
  $$ = $30 ? $24 : $28;
  $$1 = $30 ? $28 : $24;
  $31 = ($26|0)<($$1|0);
  $32 = ($26|0)>($$|0);
  $or$cond = $31 | $32;
  do {
   if ($or$cond) {
    _Split_Conic($22);
    $33 = HEAP32[$1>>2]|0;
    $34 = ((($33)) + 16|0);
    HEAP32[$1>>2] = $34;
   } else {
    $35 = ($24|0)==($28|0);
    if ($35) {
     $36 = ((($22)) + -16|0);
     HEAP32[$1>>2] = $36;
     break;
    }
    $37 = ($24|0)<($28|0);
    $38 = $37 ? 1 : 2;
    $39 = HEAP32[$16>>2]|0;
    $40 = ($39|0)==($38|0);
    if (!($40)) {
     $41 = HEAP32[$19>>2]|0;
     if ($37) {
      $42 = (($24) + -1)|0;
      $43 = (($42) + ($41))|0;
      $44 = (0 - ($41))|0;
      $45 = $43 & $44;
      $46 = (($45) - ($24))|0;
      $47 = HEAP32[$20>>2]|0;
      $48 = ($46|0)>=($47|0);
      $$sink = $48;
     } else {
      $$not = (($41) + -1)|0;
      $49 = $$not & $24;
      $50 = HEAP32[$21>>2]|0;
      $51 = ($49|0)>=($50|0);
      $$sink = $51;
     }
     $52 = $$sink&1;
     $53 = HEAP32[$16>>2]|0;
     $54 = ($53|0)==(0);
     if (!($54)) {
      $55 = (_End_Profile($worker,$52)|0);
      $56 = ($55<<24>>24)==(0);
      if (!($56)) {
       $$0 = 1;
       label = 18;
       break L1;
      }
     }
     $57 = (_New_Profile($worker,$38,$52)|0);
     $58 = ($57<<24>>24)==(0);
     if (!($58)) {
      $$0 = 1;
      label = 18;
      break L1;
     }
    }
    $59 = HEAP32[$17>>2]|0;
    $60 = HEAP32[$18>>2]|0;
    if ($37) {
     $61 = (_Bezier_Up($worker,2,59,$59,$60)|0);
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      break;
     } else {
      $$0 = 1;
      label = 18;
      break L1;
     }
    } else {
     $63 = (_Bezier_Down($worker,2,59,$59,$60)|0);
     $64 = ($63<<24>>24)==(0);
     if ($64) {
      break;
     } else {
      $$0 = 1;
      label = 18;
      break L1;
     }
    }
   }
  } while(0);
  $65 = HEAP32[$1>>2]|0;
  $66 = ($65>>>0)<($0>>>0);
  if ($66) {
   $$lcssa12 = $28;$$lcssa13 = $29;
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  HEAP32[$2>>2] = $$lcssa13;
  HEAP32[$5>>2] = $$lcssa12;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 18) {
  return ($$0|0);
 }
 return (0)|0;
}
function _Cubic_To($worker,$cx1,$cy1,$cx2,$cy2,$x,$y) {
 $worker = $worker|0;
 $cx1 = $cx1|0;
 $cy1 = $cy1|0;
 $cx2 = $cx2|0;
 $cy2 = $cy2|0;
 $x = $x|0;
 $y = $y|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$lcssa12 = 0, $$lcssa13 = 0, $$not = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $ymax2$0 = 0, $ymin2$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 184|0);
 $1 = ((($worker)) + 52|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($worker)) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($worker)) + 208|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($worker)) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 28|0);
 HEAP32[$8>>2] = $6;
 $9 = HEAP32[$1>>2]|0;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = $cx1;
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($11)) + 20|0);
 HEAP32[$12>>2] = $cy1;
 $13 = HEAP32[$1>>2]|0;
 $14 = ((($13)) + 8|0);
 HEAP32[$14>>2] = $cx2;
 $15 = HEAP32[$1>>2]|0;
 $16 = ((($15)) + 12|0);
 HEAP32[$16>>2] = $cy2;
 $17 = HEAP32[$1>>2]|0;
 HEAP32[$17>>2] = $x;
 $18 = HEAP32[$1>>2]|0;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = $y;
 $20 = ((($worker)) + 100|0);
 $21 = ((($worker)) + 76|0);
 $22 = ((($worker)) + 80|0);
 $23 = ((($worker)) + 4|0);
 $24 = ((($worker)) + 8|0);
 $25 = ((($worker)) + 8|0);
 L1: while(1) {
  $26 = HEAP32[$1>>2]|0;
  $27 = ((($26)) + 28|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($26)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($26)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($26)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$26>>2]|0;
  $36 = ($28|0)<=($34|0);
  $$ = $36 ? $34 : $28;
  $$1 = $36 ? $28 : $34;
  $37 = ($30|0)>($32|0);
  $ymin2$0 = $37 ? $32 : $30;
  $ymax2$0 = $37 ? $30 : $32;
  $38 = ($ymin2$0|0)<($$1|0);
  $39 = ($ymax2$0|0)>($$|0);
  $or$cond = $38 | $39;
  do {
   if ($or$cond) {
    _Split_Cubic($26);
    $40 = HEAP32[$1>>2]|0;
    $41 = ((($40)) + 24|0);
    HEAP32[$1>>2] = $41;
   } else {
    $42 = ($28|0)==($34|0);
    if ($42) {
     $43 = ((($26)) + -24|0);
     HEAP32[$1>>2] = $43;
     break;
    }
    $44 = $36 ? 1 : 2;
    $45 = HEAP32[$20>>2]|0;
    $46 = ($45|0)==($44|0);
    if (!($46)) {
     $47 = HEAP32[$23>>2]|0;
     if ($36) {
      $48 = (($28) + -1)|0;
      $49 = (($48) + ($47))|0;
      $50 = (0 - ($47))|0;
      $51 = $49 & $50;
      $52 = (($51) - ($28))|0;
      $53 = HEAP32[$24>>2]|0;
      $54 = ($52|0)>=($53|0);
      $$sink = $54;
     } else {
      $$not = (($47) + -1)|0;
      $55 = $$not & $28;
      $56 = HEAP32[$25>>2]|0;
      $57 = ($55|0)>=($56|0);
      $$sink = $57;
     }
     $58 = $$sink&1;
     $59 = HEAP32[$20>>2]|0;
     $60 = ($59|0)==(0);
     if (!($60)) {
      $61 = (_End_Profile($worker,$58)|0);
      $62 = ($61<<24>>24)==(0);
      if (!($62)) {
       $$0 = 1;
       label = 18;
       break L1;
      }
     }
     $63 = (_New_Profile($worker,$44,$58)|0);
     $64 = ($63<<24>>24)==(0);
     if (!($64)) {
      $$0 = 1;
      label = 18;
      break L1;
     }
    }
    $65 = HEAP32[$21>>2]|0;
    $66 = HEAP32[$22>>2]|0;
    if ($36) {
     $67 = (_Bezier_Up($worker,3,60,$65,$66)|0);
     $68 = ($67<<24>>24)==(0);
     if ($68) {
      break;
     } else {
      $$0 = 1;
      label = 18;
      break L1;
     }
    } else {
     $69 = (_Bezier_Down($worker,3,60,$65,$66)|0);
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      break;
     } else {
      $$0 = 1;
      label = 18;
      break L1;
     }
    }
   }
  } while(0);
  $71 = HEAP32[$1>>2]|0;
  $72 = ($71>>>0)<($0>>>0);
  if ($72) {
   $$lcssa12 = $34;$$lcssa13 = $35;
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  HEAP32[$2>>2] = $$lcssa13;
  HEAP32[$5>>2] = $$lcssa12;
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 18) {
  return ($$0|0);
 }
 return (0)|0;
}
function _Split_Cubic($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($base)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($base)) + 48|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($base)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($base)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$base>>2]|0;
 $8 = (($4) + 1)|0;
 $9 = (($8) + ($7))|0;
 $10 = $9 >> 1;
 HEAP32[$3>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 $12 = (($6) + 1)|0;
 $13 = (($12) + ($11))|0;
 $14 = $13 >> 1;
 $15 = ((($base)) + 40|0);
 HEAP32[$15>>2] = $14;
 $16 = (($4) + 1)|0;
 $17 = (($16) + ($6))|0;
 $18 = $17 >> 1;
 $19 = (($18) + 1)|0;
 $20 = (($19) + ($10))|0;
 $21 = $20 >> 1;
 HEAP32[$5>>2] = $21;
 $22 = (($18) + 1)|0;
 $23 = (($22) + ($14))|0;
 $24 = $23 >> 1;
 $25 = ((($base)) + 32|0);
 HEAP32[$25>>2] = $24;
 $26 = (($21) + 1)|0;
 $27 = (($26) + ($24))|0;
 $28 = $27 >> 1;
 HEAP32[$0>>2] = $28;
 $29 = ((($base)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($base)) + 52|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($base)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($base)) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($base)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($33) + 1)|0;
 $39 = (($38) + ($37))|0;
 $40 = $39 >> 1;
 HEAP32[$32>>2] = $40;
 $41 = HEAP32[$29>>2]|0;
 $42 = (($35) + 1)|0;
 $43 = (($42) + ($41))|0;
 $44 = $43 >> 1;
 $45 = ((($base)) + 44|0);
 HEAP32[$45>>2] = $44;
 $46 = (($33) + 1)|0;
 $47 = (($46) + ($35))|0;
 $48 = $47 >> 1;
 $49 = (($48) + 1)|0;
 $50 = (($49) + ($40))|0;
 $51 = $50 >> 1;
 HEAP32[$34>>2] = $51;
 $52 = (($48) + 1)|0;
 $53 = (($52) + ($44))|0;
 $54 = $53 >> 1;
 $55 = ((($base)) + 36|0);
 HEAP32[$55>>2] = $54;
 $56 = (($51) + 1)|0;
 $57 = (($56) + ($54))|0;
 $58 = $57 >> 1;
 HEAP32[$29>>2] = $58;
 return;
}
function _New_Profile($worker,$aState,$overshoot) {
 $worker = $worker|0;
 $aState = $aState|0;
 $overshoot = $overshoot|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = ((($worker)) + 40|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($worker)) + 88|0);
  HEAP32[$5>>2] = $4;
  HEAP32[$0>>2] = $4;
  $6 = HEAP32[$3>>2]|0;
  $7 = ((($6)) + 32|0);
  HEAP32[$3>>2] = $7;
 }
 $8 = ((($worker)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($worker)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)<($11>>>0);
 if (!($12)) {
  $13 = ((($worker)) + 44|0);
  HEAP32[$13>>2] = 98;
  $$0 = 1;
  return ($$0|0);
 }
 $14 = ((($worker)) + 88|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 12|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$14>>2]|0;
 $18 = ((($17)) + 20|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$14>>2]|0;
 $20 = ((($19)) + 16|0);
 HEAP32[$20>>2] = 0;
 $21 = HEAP32[$8>>2]|0;
 $22 = HEAP32[$14>>2]|0;
 $23 = ((($22)) + 8|0);
 HEAP32[$23>>2] = $21;
 $24 = HEAP32[$14>>2]|0;
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = 0;
 $26 = HEAP32[$14>>2]|0;
 $27 = ((($26)) + 28|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($worker)) + 180|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = HEAP32[$14>>2]|0;
 $32 = ((($31)) + 12|0);
 HEAP32[$32>>2] = $30;
 switch ($aState|0) {
 case 1:  {
  $33 = HEAP32[$14>>2]|0;
  $34 = ((($33)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 8;
  HEAP32[$34>>2] = $36;
  $37 = ($overshoot<<24>>24)==(0);
  if (!($37)) {
   $38 = HEAP32[$14>>2]|0;
   $39 = ((($38)) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 | 32;
   HEAP32[$39>>2] = $41;
  }
  break;
 }
 case 2:  {
  $42 = ($overshoot<<24>>24)==(0);
  if (!($42)) {
   $43 = HEAP32[$14>>2]|0;
   $44 = ((($43)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 | 16;
   HEAP32[$44>>2] = $46;
  }
  break;
 }
 default: {
  $47 = ((($worker)) + 44|0);
  HEAP32[$47>>2] = 20;
  $$0 = 1;
  return ($$0|0);
 }
 }
 $48 = ((($worker)) + 96|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0|0);
 if ($50) {
  $51 = HEAP32[$14>>2]|0;
  HEAP32[$48>>2] = $51;
 }
 $52 = ((($worker)) + 100|0);
 HEAP32[$52>>2] = $aState;
 $53 = ((($worker)) + 86|0);
 HEAP8[$53>>0] = 1;
 $54 = ((($worker)) + 87|0);
 HEAP8[$54>>0] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _Bezier_Up($worker,$degree,$splitter,$miny,$maxy) {
 $worker = $worker|0;
 $degree = $degree|0;
 $splitter = $splitter|0;
 $miny = $miny|0;
 $maxy = $maxy|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa73 = 0, $$lcssa75 = 0, $$lcssa77 = 0, $$pn = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $arc$0$ph$be = 0, $arc$0$ph14 = 0, $arc$011 = 0, $arc$011$lcssa = 0, $arc$011$lcssa68 = 0, $arc$01170 = 0, $e$0 = 0, $e$1$ph$be = 0, $e$1$ph13 = 0, $e0$0 = 0, $maxy$ = 0;
 var $or$cond = 0, $or$cond1 = 0, $or$cond110 = 0, $sext$mask = 0, $top$0 = 0, $top$1 = 0, $top$2$ph$be = 0, $top$2$ph15 = 0, $top$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($1) + ($degree<<3)|0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($worker)) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)<($miny|0);
 $9 = ($3|0)>($maxy|0);
 $or$cond = $9 | $8;
 L1: do {
  if ($or$cond) {
   $top$4 = $7;
  } else {
   $10 = ((($worker)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (0 - ($11))|0;
   $13 = $5 & $12;
   $14 = ($13|0)>($maxy|0);
   $maxy$ = $14 ? $maxy : $13;
   $15 = ($3|0)<($miny|0);
   if ($15) {
    $e$0 = $miny;$e0$0 = $miny;$top$1 = $7;
   } else {
    $16 = (($3) + -1)|0;
    $17 = (($16) + ($11))|0;
    $18 = $17 & $12;
    $19 = (($11) + 65535)|0;
    $20 = $3 & 65535;
    $sext$mask = $20 & $19;
    $21 = ($sext$mask|0)==(0);
    if ($21) {
     $22 = ((($worker)) + 87|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = ($23<<24>>24)==(0);
     if ($24) {
      $top$0 = $7;
     } else {
      $25 = ((($7)) + -4|0);
      HEAP8[$22>>0] = 0;
      $top$0 = $25;
     }
     $26 = (($1) + ($degree<<3)|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($top$0)) + 4|0);
     HEAP32[$top$0>>2] = $27;
     $29 = HEAP32[$10>>2]|0;
     $30 = (($29) + ($18))|0;
     $e$0 = $30;$e0$0 = $18;$top$1 = $28;
    } else {
     $e$0 = $18;$e0$0 = $18;$top$1 = $7;
    }
   }
   $31 = ((($worker)) + 86|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32<<24>>24)==(0);
   if (!($33)) {
    $34 = HEAP32[$worker>>2]|0;
    $35 = $e0$0 >> $34;
    $36 = ((($worker)) + 88|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($37)) + 20|0);
    HEAP32[$38>>2] = $35;
    HEAP8[$31>>0] = 0;
   }
   $39 = ($maxy$|0)<($e$0|0);
   if ($39) {
    $top$4 = $top$1;
   } else {
    $40 = (($maxy$) - ($e$0))|0;
    $41 = HEAP32[$worker>>2]|0;
    $42 = $40 >> $41;
    $$sum = (($42) + 1)|0;
    $43 = (($top$1) + ($$sum<<2)|0);
    $44 = ((($worker)) + 36|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($43>>>0)<($45>>>0);
    if (!($46)) {
     HEAP32[$6>>2] = $top$1;
     $50 = ((($worker)) + 44|0);
     HEAP32[$50>>2] = 98;
     $$0 = 1;
     return ($$0|0);
    }
    $47 = ($maxy$|0)<($e$0|0);
    if ($47) {
     $top$4 = $top$1;
    } else {
     $48 = ((($worker)) + 87|0);
     $49 = ((($worker)) + 16|0);
     $$pn = (0 - ($degree))|0;
     $61 = 0;$arc$0$ph14 = $1;$e$1$ph13 = $e$0;$top$2$ph15 = $top$1;
     while(1) {
      $arc$011 = $arc$0$ph14;
      while(1) {
       HEAP8[$48>>0] = 0;
       $51 = ((($arc$011)) + 4|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ($52|0)>($e$1$ph13|0);
       if (!($53)) {
        $$lcssa = $52;$arc$011$lcssa = $arc$011;
        label = 20;
        break;
       }
       $54 = (($arc$011) + ($degree<<3)|0);
       $55 = (((($arc$011) + ($degree<<3)|0)) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = (($52) - ($56))|0;
       $58 = HEAP32[$49>>2]|0;
       $59 = ($57|0)<($58|0);
       if ($59) {
        $$lcssa73 = $54;$$lcssa75 = $56;$$lcssa77 = $57;$arc$011$lcssa68 = $arc$011;
        label = 17;
        break;
       }
       FUNCTION_TABLE_vi[$splitter & 127]($arc$011);
       $60 = ($54>>>0)<($1>>>0);
       $or$cond1 = $61 | $60;
       if ($or$cond1) {
        $top$4 = $top$2$ph15;
        break L1;
       } else {
        $arc$011 = $54;
       }
      }
      if ((label|0) == 17) {
       label = 0;
       $62 = HEAP32[$$lcssa73>>2]|0;
       $63 = HEAP32[$arc$011$lcssa68>>2]|0;
       $64 = (($63) - ($62))|0;
       $65 = (($e$1$ph13) - ($$lcssa75))|0;
       $66 = Math_imul($64, $65)|0;
       $67 = (($66|0) / ($$lcssa77|0))&-1;
       $68 = (($67) + ($62))|0;
       $69 = ((($top$2$ph15)) + 4|0);
       HEAP32[$top$2$ph15>>2] = $68;
       $70 = HEAP32[$10>>2]|0;
       $71 = (($70) + ($e$1$ph13))|0;
       $arc$01170 = $arc$011$lcssa68;$e$1$ph$be = $71;$top$2$ph$be = $69;
      }
      else if ((label|0) == 20) {
       label = 0;
       $74 = ($$lcssa|0)==($e$1$ph13|0);
       if ($74) {
        HEAP8[$48>>0] = 1;
        $75 = HEAP32[$arc$011$lcssa>>2]|0;
        $76 = ((($top$2$ph15)) + 4|0);
        HEAP32[$top$2$ph15>>2] = $75;
        $77 = HEAP32[$10>>2]|0;
        $78 = (($77) + ($e$1$ph13))|0;
        $arc$01170 = $arc$011$lcssa;$e$1$ph$be = $78;$top$2$ph$be = $76;
       } else {
        $arc$01170 = $arc$011$lcssa;$e$1$ph$be = $e$1$ph13;$top$2$ph$be = $top$2$ph15;
       }
      }
      $arc$0$ph$be = (($arc$01170) + ($$pn<<3)|0);
      $72 = ($arc$0$ph$be>>>0)<($1>>>0);
      $73 = ($e$1$ph$be|0)>($maxy$|0);
      $or$cond110 = $73 | $72;
      if ($or$cond110) {
       $top$4 = $top$2$ph$be;
       break;
      } else {
       $61 = $73;$arc$0$ph14 = $arc$0$ph$be;$e$1$ph13 = $e$1$ph$be;$top$2$ph15 = $top$2$ph$be;
      }
     }
    }
   }
  }
 } while(0);
 HEAP32[$6>>2] = $top$4;
 $79 = HEAP32[$0>>2]|0;
 $80 = (0 - ($degree))|0;
 $81 = (($79) + ($80<<3)|0);
 HEAP32[$0>>2] = $81;
 $$0 = 0;
 return ($$0|0);
}
function _Bezier_Down($worker,$degree,$splitter,$miny,$maxy) {
 $worker = $worker|0;
 $degree = $degree|0;
 $splitter = $splitter|0;
 $miny = $miny|0;
 $maxy = $maxy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (0 - ($3))|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($1)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (0 - ($6))|0;
 HEAP32[$5>>2] = $7;
 $8 = ((($1)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (0 - ($9))|0;
 HEAP32[$8>>2] = $10;
 $11 = ($degree|0)>(2);
 if ($11) {
  $12 = ((($1)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (0 - ($13))|0;
  HEAP32[$12>>2] = $14;
 }
 $15 = ((($worker)) + 86|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = (0 - ($maxy))|0;
 $18 = (0 - ($miny))|0;
 $19 = (_Bezier_Up($worker,$degree,$splitter,$17,$18)|0);
 $20 = ($16<<24>>24)==(0);
 if ($20) {
  $28 = HEAP32[$2>>2]|0;
  $29 = (0 - ($28))|0;
  HEAP32[$2>>2] = $29;
  return ($19|0);
 }
 $21 = HEAP8[$15>>0]|0;
 $22 = ($21<<24>>24)==(0);
 if (!($22)) {
  $28 = HEAP32[$2>>2]|0;
  $29 = (0 - ($28))|0;
  HEAP32[$2>>2] = $29;
  return ($19|0);
 }
 $23 = ((($worker)) + 88|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (0 - ($26))|0;
 HEAP32[$25>>2] = $27;
 $28 = HEAP32[$2>>2]|0;
 $29 = (0 - ($28))|0;
 HEAP32[$2>>2] = $29;
 return ($19|0);
}
function _Split_Conic($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($base)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($base)) + 32|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($base)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + ($4))|0;
 $7 = (($6|0) / 2)&-1;
 $8 = ((($base)) + 24|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$base>>2]|0;
 $10 = (($9) + ($4))|0;
 $11 = (($10|0) / 2)&-1;
 HEAP32[$3>>2] = $11;
 $12 = (($11) + ($7))|0;
 $13 = (($12|0) / 2)&-1;
 HEAP32[$0>>2] = $13;
 $14 = ((($base)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($base)) + 36|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($base)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$14>>2]|0;
 $20 = (($19) + ($18))|0;
 $21 = (($20|0) / 2)&-1;
 $22 = ((($base)) + 28|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($base)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($18))|0;
 $26 = (($25|0) / 2)&-1;
 HEAP32[$17>>2] = $26;
 $27 = (($26) + ($21))|0;
 $28 = (($27|0) / 2)&-1;
 HEAP32[$14>>2] = $28;
 return;
}
function _Line_Up($worker,$x1,$y1,$x2,$y2,$miny,$maxy) {
 $worker = $worker|0;
 $x1 = $x1|0;
 $y1 = $y1|0;
 $x2 = $x2|0;
 $y2 = $y2|0;
 $miny = $miny|0;
 $maxy = $maxy|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$23 = 0, $$3 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $Ax$05 = 0, $Ax$1 = 0, $Dx$0 = 0, $Ix$0 = 0, $Rx$0 = 0, $e1$0 = 0, $e1$1 = 0, $e2$0 = 0, $f1$0 = 0, $f2$0 = 0, $maxy$pn = 0;
 var $or$cond = 0, $or$cond2 = 0, $scevgep = 0, $size$04 = 0, $smax = 0, $top$0$lcssa = 0, $top$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($x2) - ($x1))|0;
 $1 = (($y2) - ($y1))|0;
 $2 = ($1|0)<(1);
 $3 = ($y2|0)<($miny|0);
 $or$cond = $2 | $3;
 $4 = ($y1|0)>($maxy|0);
 $or$cond2 = $or$cond | $4;
 if ($or$cond2) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ($miny|0)>($y1|0);
 if ($5) {
  $6 = (($miny) - ($y1))|0;
  $7 = (_FT_MulDiv($0,$6,$1)|0);
  $8 = (($7) + ($x1))|0;
  $9 = HEAP32[$worker>>2]|0;
  $10 = $miny >> $9;
  $$01 = $8;$e1$0 = $10;$f1$0 = 0;
 } else {
  $11 = HEAP32[$worker>>2]|0;
  $12 = $y1 >> $11;
  $13 = ((($worker)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + -1)|0;
  $16 = $15 & $y1;
  $$01 = $x1;$e1$0 = $12;$f1$0 = $16;
 }
 $17 = ($y2|0)>($maxy|0);
 $18 = HEAP32[$worker>>2]|0;
 if ($17) {
  $f2$0 = 0;$maxy$pn = $maxy;
 } else {
  $19 = ((($worker)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + -1)|0;
  $22 = $21 & $y2;
  $f2$0 = $22;$maxy$pn = $y2;
 }
 $e2$0 = $maxy$pn >> $18;
 $23 = ($f1$0|0)>(0);
 do {
  if ($23) {
   $24 = ($e1$0|0)==($e2$0|0);
   if ($24) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $25 = ((($worker)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) - ($f1$0))|0;
    $28 = (_FT_MulDiv($0,$27,$1)|0);
    $29 = (($28) + ($$01))|0;
    $30 = (($e1$0) + 1)|0;
    $$1 = $29;$e1$1 = $30;
    break;
   }
  } else {
   $31 = ((($worker)) + 87|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    $$1 = $$01;$e1$1 = $e1$0;
   } else {
    $34 = ((($worker)) + 40|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ((($35)) + -4|0);
    HEAP32[$34>>2] = $36;
    HEAP8[$31>>0] = 0;
    $$1 = $$01;$e1$1 = $e1$0;
   }
  }
 } while(0);
 $37 = ($f2$0|0)==(0);
 $38 = $37&1;
 $39 = ((($worker)) + 87|0);
 HEAP8[$39>>0] = $38;
 $40 = ((($worker)) + 86|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = ($41<<24>>24)==(0);
 if (!($42)) {
  $43 = ((($worker)) + 88|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($44)) + 20|0);
  HEAP32[$45>>2] = $e1$1;
  HEAP8[$40>>0] = 0;
 }
 $46 = (($e2$0) - ($e1$1))|0;
 $47 = (($46) + 1)|0;
 $48 = ((($worker)) + 40|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + ($47<<2)|0);
 $51 = ((($worker)) + 36|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($50>>>0)<($52>>>0);
 if (!($53)) {
  $54 = ((($worker)) + 44|0);
  HEAP32[$54>>2] = 98;
  $$0 = 1;
  return ($$0|0);
 }
 $55 = ($0|0)>(0);
 $56 = ((($worker)) + 4|0);
 $57 = HEAP32[$56>>2]|0;
 if ($55) {
  $58 = (_FT_MulDiv_No_Round($57,$0,$1)|0);
  $59 = HEAP32[$56>>2]|0;
  $60 = Math_imul($59, $0)|0;
  $$pn = $60;$Dx$0 = 1;$Ix$0 = $58;
 } else {
  $61 = (0 - ($0))|0;
  $62 = (_FT_MulDiv_No_Round($57,$61,$1)|0);
  $63 = (0 - ($62))|0;
  $64 = HEAP32[$56>>2]|0;
  $65 = Math_imul($64, $61)|0;
  $$pn = $65;$Dx$0 = -1;$Ix$0 = $63;
 }
 $Rx$0 = (($$pn|0) % ($1|0))&-1;
 $66 = HEAP32[$48>>2]|0;
 $67 = ($46|0)>(-1);
 if ($67) {
  $68 = (0 - ($1))|0;
  $69 = (($e1$1) + -2)|0;
  $70 = (($69) - ($e2$0))|0;
  $71 = ($70|0)>(-2);
  $smax = $71 ? $70 : -2;
  $72 = (($e2$0) + ($smax))|0;
  $73 = (($72) + 3)|0;
  $74 = (($73) - ($e1$1))|0;
  $$23 = $$1;$Ax$05 = $68;$size$04 = $47;$top$06 = $66;
  while(1) {
   $75 = ((($top$06)) + 4|0);
   HEAP32[$top$06>>2] = $$23;
   $76 = (($$23) + ($Ix$0))|0;
   $77 = (($Ax$05) + ($Rx$0))|0;
   $78 = ($77|0)>(-1);
   $79 = $78 ? $Dx$0 : 0;
   $$3 = (($76) + ($79))|0;
   $80 = $78 ? $1 : 0;
   $Ax$1 = (($77) - ($80))|0;
   $81 = (($size$04) + -1)|0;
   $82 = ($size$04|0)>(1);
   if ($82) {
    $$23 = $$3;$Ax$05 = $Ax$1;$size$04 = $81;$top$06 = $75;
   } else {
    break;
   }
  }
  $scevgep = (($66) + ($74<<2)|0);
  $top$0$lcssa = $scevgep;
 } else {
  $top$0$lcssa = $66;
 }
 HEAP32[$48>>2] = $top$0$lcssa;
 $$0 = 0;
 return ($$0|0);
}
function _Line_Down($worker,$x1,$y1,$x2,$y2,$miny,$maxy) {
 $worker = $worker|0;
 $x1 = $x1|0;
 $y1 = $y1|0;
 $x2 = $x2|0;
 $y2 = $y2|0;
 $miny = $miny|0;
 $maxy = $maxy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 86|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = (0 - ($y1))|0;
 $3 = (0 - ($y2))|0;
 $4 = (0 - ($maxy))|0;
 $5 = (0 - ($miny))|0;
 $6 = (_Line_Up($worker,$x1,$2,$x2,$3,$4,$5)|0);
 $7 = ($1<<24>>24)==(0);
 if ($7) {
  return ($6|0);
 }
 $8 = HEAP8[$0>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  return ($6|0);
 }
 $10 = ((($worker)) + 88|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (0 - ($13))|0;
 HEAP32[$12>>2] = $14;
 return ($6|0);
}
function _pcf_cmap_init($pcfcmap,$init_data) {
 $pcfcmap = $pcfcmap|0;
 $init_data = $init_data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pcfcmap>>2]|0;
 $1 = ((($0)) + 296|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($pcfcmap)) + 16|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 300|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($pcfcmap)) + 20|0);
 HEAP32[$6>>2] = $5;
 return 0;
}
function _pcf_cmap_done($pcfcmap) {
 $pcfcmap = $pcfcmap|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pcfcmap)) + 20|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($pcfcmap)) + 16|0);
 HEAP32[$1>>2] = 0;
 return;
}
function _pcf_cmap_char_index($pcfcmap,$charcode) {
 $pcfcmap = $pcfcmap|0;
 $charcode = $charcode|0;
 var $$lcssa = 0, $$max$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max$01 = 0;
 var $min$0$ = 0, $min$02 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pcfcmap)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($pcfcmap)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $result$0 = 0;
  return ($result$0|0);
 } else {
  $max$01 = $3;$min$02 = 0;
 }
 while(1) {
  $5 = (($min$02) + ($max$01))|0;
  $6 = $5 >>> 1;
  $7 = (($1) + ($6<<3)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==($charcode|0);
  if ($9) {
   $$lcssa = $6;
   break;
  }
  $14 = ($8>>>0)>($charcode>>>0);
  $15 = (($6) + 1)|0;
  $$max$0 = $14 ? $6 : $max$01;
  $min$0$ = $14 ? $min$02 : $15;
  $16 = ($min$0$>>>0)<($$max$0>>>0);
  if ($16) {
   $max$01 = $$max$0;$min$02 = $min$0$;
  } else {
   $result$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($result$0|0);
 }
 $10 = (((($1) + ($$lcssa<<3)|0)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11&65535;
 $13 = (($12) + 1)|0;
 $result$0 = $13;
 return ($result$0|0);
}
function _pcf_cmap_char_next($pcfcmap,$acharcode) {
 $pcfcmap = $pcfcmap|0;
 $acharcode = $acharcode|0;
 var $$lcssa = 0, $$max$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $charcode$0 = 0, $max$02 = 0, $min$0$ = 0, $min$0$lcssa = 0, $min$03 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pcfcmap)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$acharcode>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ((($pcfcmap)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $min$0$lcssa = 0;
  } else {
   $max$02 = $5;$min$03 = 0;
   while(1) {
    $7 = (($min$03) + ($max$02))|0;
    $8 = $7 >>> 1;
    $9 = (($1) + ($8<<3)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($3|0)==($10|0);
    if ($11) {
     $$lcssa = $8;
     break;
    }
    $16 = ($3>>>0)<($10>>>0);
    $17 = (($8) + 1)|0;
    $$max$0 = $16 ? $8 : $max$02;
    $min$0$ = $16 ? $min$03 : $17;
    $18 = ($min$0$>>>0)<($$max$0>>>0);
    if ($18) {
     $max$02 = $$max$0;$min$03 = $min$0$;
    } else {
     $min$0$lcssa = $min$0$;
     break L1;
    }
   }
   $12 = (((($1) + ($$lcssa<<3)|0)) + 4|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = $13&65535;
   $15 = (($14) + 1)|0;
   $charcode$0 = $3;$result$0 = $15;
   HEAP32[$acharcode>>2] = $charcode$0;
   return ($result$0|0);
  }
 } while(0);
 $19 = HEAP32[$4>>2]|0;
 $20 = ($min$0$lcssa>>>0)<($19>>>0);
 if (!($20)) {
  $charcode$0 = 0;$result$0 = 0;
  HEAP32[$acharcode>>2] = $charcode$0;
  return ($result$0|0);
 }
 $21 = (($1) + ($min$0$lcssa<<3)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (((($1) + ($min$0$lcssa<<3)|0)) + 4|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24&65535;
 $26 = (($25) + 1)|0;
 $charcode$0 = $22;$result$0 = $26;
 HEAP32[$acharcode>>2] = $charcode$0;
 return ($result$0|0);
}
function _pcf_driver_requester($module,$name) {
 $module = $module|0;
 $name = $name|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_service_list_lookup(5900,$name)|0);
 return ($0|0);
}
function _PCF_Face_Init($stream,$pcfface,$face_index,$num_params,$params) {
 $stream = $stream|0;
 $pcfface = $pcfface|0;
 $face_index = $face_index|0;
 $num_params = $num_params|0;
 $params = $params|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $charmap = 0, $error$1 = 0;
 var $or$cond = 0, $or$cond2 = 0, $unicode_charmap$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $charmap = sp;
 $0 = (_pcf_load_font($stream,$pcfface)|0);
 $1 = ($0|0)==(0);
 L1: do {
  if (!($1)) {
   _PCF_Face_Done($pcfface);
   $2 = ((($pcfface)) + 132|0);
   $3 = (_FT_Stream_OpenGzip($2,$stream)|0);
   $4 = $3 & 255;
   $5 = ($4|0)==(7);
   do {
    if (!($5)) {
     $6 = ($3|0)==(0);
     if (!($6)) {
      $7 = (_FT_Stream_OpenLZW($2,$stream)|0);
      $8 = $7 & 255;
      $9 = ($8|0)!=(7);
      $10 = ($7|0)==(0);
      $or$cond2 = $10 & $9;
      if (!($or$cond2)) {
       break;
      }
     }
     $11 = ((($pcfface)) + 172|0);
     HEAP32[$11>>2] = $stream;
     $12 = ((($pcfface)) + 104|0);
     HEAP32[$12>>2] = $2;
     $13 = (_pcf_load_font($2,$pcfface)|0);
     $14 = ($13|0)==(0);
     if ($14) {
      break L1;
     }
    }
   } while(0);
   _PCF_Face_Done($pcfface);
   $error$1 = 2;
   STACKTOP = sp;return ($error$1|0);
  }
 } while(0);
 $15 = ((($pcfface)) + 180|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($pcfface)) + 176|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16|0)!=(0|0);
 $20 = ($18|0)!=(0|0);
 $or$cond = $19 & $20;
 L11: do {
  if ($or$cond) {
   $21 = HEAP8[$16>>0]|0;
   switch ($21<<24>>24) {
   case 73: case 105:  {
    break;
   }
   default: {
    $unicode_charmap$0 = 0;
    break L11;
   }
   }
   $22 = ((($16)) + 1|0);
   $23 = HEAP8[$22>>0]|0;
   switch ($23<<24>>24) {
   case 83: case 115:  {
    break;
   }
   default: {
    $unicode_charmap$0 = 0;
    break L11;
   }
   }
   $24 = ((($16)) + 2|0);
   $25 = HEAP8[$24>>0]|0;
   switch ($25<<24>>24) {
   case 79: case 111:  {
    break;
   }
   default: {
    $unicode_charmap$0 = 0;
    break L11;
   }
   }
   $26 = ((($16)) + 3|0);
   $27 = (_strcmp($26,26797)|0);
   $28 = ($27|0)==(0);
   if (!($28)) {
    $29 = (_strcmp($26,26803)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     $unicode_charmap$0 = 0;
     break;
    }
    $31 = HEAP32[$17>>2]|0;
    $32 = (_strcmp($31,26808)|0);
    $33 = ($32|0)==(0);
    if (!($33)) {
     $unicode_charmap$0 = 0;
     break;
    }
   }
   $unicode_charmap$0 = 1;
  } else {
   $unicode_charmap$0 = 0;
  }
 } while(0);
 HEAP32[$charmap>>2] = $pcfface;
 $34 = ((($charmap)) + 4|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($charmap)) + 8|0);
 HEAP16[$35>>1] = 0;
 $36 = ((($charmap)) + 10|0);
 HEAP16[$36>>1] = 0;
 if ($unicode_charmap$0) {
  HEAP32[$34>>2] = 1970170211;
  HEAP16[$35>>1] = 3;
  HEAP16[$36>>1] = 1;
 }
 $37 = (_FT_CMap_New(5756,0,$charmap,0)|0);
 $error$1 = $37;
 STACKTOP = sp;return ($error$1|0);
}
function _PCF_Face_Done($pcfface) {
 $pcfface = $pcfface|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pcfface|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($pcfface)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($pcfface)) + 300|0);
 $4 = HEAP32[$3>>2]|0;
 _ft_mem_free($2,$4);
 HEAP32[$3>>2] = 0;
 $5 = ((($pcfface)) + 292|0);
 $6 = HEAP32[$5>>2]|0;
 _ft_mem_free($2,$6);
 HEAP32[$5>>2] = 0;
 $7 = ((($pcfface)) + 284|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = ((($pcfface)) + 280|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)>(0);
  if ($12) {
   $i$01 = 0;
   while(1) {
    $13 = HEAP32[$7>>2]|0;
    $14 = (($13) + (($i$01*12)|0)|0);
    $15 = ($14|0)==(0|0);
    if (!($15)) {
     $16 = HEAP32[$14>>2]|0;
     _ft_mem_free($2,$16);
     HEAP32[$14>>2] = 0;
     $17 = (((($13) + (($i$01*12)|0)|0)) + 4|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if (!($19)) {
      $20 = (((($13) + (($i$01*12)|0)|0)) + 8|0);
      $21 = HEAP32[$20>>2]|0;
      _ft_mem_free($2,$21);
      HEAP32[$20>>2] = 0;
     }
    }
    $22 = (($i$01) + 1)|0;
    $23 = HEAP32[$10>>2]|0;
    $24 = ($22|0)<($23|0);
    if ($24) {
     $i$01 = $22;
    } else {
     break;
    }
   }
  }
 }
 $25 = HEAP32[$7>>2]|0;
 _ft_mem_free($2,$25);
 HEAP32[$7>>2] = 0;
 $26 = ((($pcfface)) + 192|0);
 $27 = HEAP32[$26>>2]|0;
 _ft_mem_free($2,$27);
 HEAP32[$26>>2] = 0;
 $28 = ((($pcfface)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 _ft_mem_free($2,$29);
 HEAP32[$28>>2] = 0;
 $30 = ((($pcfface)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 _ft_mem_free($2,$31);
 HEAP32[$30>>2] = 0;
 $32 = ((($pcfface)) + 32|0);
 $33 = HEAP32[$32>>2]|0;
 _ft_mem_free($2,$33);
 HEAP32[$32>>2] = 0;
 $34 = ((($pcfface)) + 176|0);
 $35 = HEAP32[$34>>2]|0;
 _ft_mem_free($2,$35);
 HEAP32[$34>>2] = 0;
 $36 = ((($pcfface)) + 180|0);
 $37 = HEAP32[$36>>2]|0;
 _ft_mem_free($2,$37);
 HEAP32[$36>>2] = 0;
 $38 = ((($pcfface)) + 104|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($pcfface)) + 132|0);
 $41 = ($39|0)==($40|0);
 if (!($41)) {
  return;
 }
 _FT_Stream_Close($40);
 $42 = ((($pcfface)) + 172|0);
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$38>>2] = $43;
 return;
}
function _PCF_Glyph_Load($slot,$size,$glyph_index,$load_flags) {
 $slot = $slot|0;
 $size = $size|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 var $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $glyph_index$ = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 6;
  return ($$0|0);
 }
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>($glyph_index>>>0);
 if (!($4)) {
  $$0 = 6;
  return ($$0|0);
 }
 $5 = ((($0)) + 104|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($glyph_index|0)==(0);
 $8 = (($glyph_index) + -1)|0;
 $glyph_index$ = $7 ? 0 : $8;
 $9 = ((($0)) + 292|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (((($10) + ($glyph_index$<<4)|0)) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = (((($10) + ($glyph_index$<<4)|0)) + 8|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 << 16 >> 16;
 $17 = (($16) + ($13))|0;
 $18 = ((($slot)) + 76|0);
 HEAP32[$18>>2] = $17;
 $19 = (((($10) + ($glyph_index$<<4)|0)) + 2|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = (($10) + ($glyph_index$<<4)|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 $25 = (($21) - ($24))|0;
 $26 = ((($slot)) + 80|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($slot)) + 92|0);
 HEAP16[$27>>1] = 1;
 $28 = ((($slot)) + 94|0);
 HEAP8[$28>>0] = 1;
 $29 = ((($0)) + 308|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 3;
 $32 = 1 << $31;
 switch ($32|0) {
 case 1:  {
  $33 = HEAP32[$26>>2]|0;
  $34 = (($33) + 7)|0;
  $35 = $34 >> 3;
  $36 = ((($slot)) + 84|0);
  HEAP32[$36>>2] = $35;
  break;
 }
 case 2:  {
  $37 = HEAP32[$26>>2]|0;
  $38 = (($37) + 15)|0;
  $39 = $38 >> 4;
  $40 = $39 << 1;
  $41 = ((($slot)) + 84|0);
  HEAP32[$41>>2] = $40;
  break;
 }
 case 4:  {
  $42 = HEAP32[$26>>2]|0;
  $43 = (($42) + 31)|0;
  $44 = $43 >> 5;
  $45 = $44 << 2;
  $46 = ((($slot)) + 84|0);
  HEAP32[$46>>2] = $45;
  break;
 }
 case 8:  {
  $47 = HEAP32[$26>>2]|0;
  $48 = (($47) + 63)|0;
  $49 = $48 >> 6;
  $50 = $49 << 3;
  $51 = ((($slot)) + 84|0);
  HEAP32[$51>>2] = $50;
  break;
 }
 default: {
  $$0 = 3;
  return ($$0|0);
 }
 }
 $52 = ((($slot)) + 84|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = HEAP32[$18>>2]|0;
 $55 = Math_imul($54, $53)|0;
 $56 = (_ft_glyphslot_alloc_bitmap($slot,$55)|0);
 $57 = ($56|0)==(0);
 if (!($57)) {
  $$0 = $56;
  return ($$0|0);
 }
 $58 = (((($10) + ($glyph_index$<<4)|0)) + 12|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (_FT_Stream_Seek($6,$59)|0);
 $61 = ($60|0)==(0);
 if (!($61)) {
  $$0 = $60;
  return ($$0|0);
 }
 $62 = ((($slot)) + 88|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (_FT_Stream_Read($6,$63,$55)|0);
 $65 = ($64|0)==(0);
 if (!($65)) {
  $$0 = $64;
  return ($$0|0);
 }
 $66 = HEAP32[$29>>2]|0;
 $$lobit = $66 & 8;
 $67 = ($$lobit|0)==(0);
 if ($67) {
  $68 = HEAP32[$62>>2]|0;
  _BitOrderInvert($68,$55);
 }
 $69 = HEAP32[$29>>2]|0;
 $70 = $69 >>> 2;
 $71 = $69 >>> 3;
 $72 = $70 ^ $71;
 $73 = $72 & 1;
 $74 = ($73|0)==(0);
 L26: do {
  if (!($74)) {
   $75 = $69 >>> 4;
   $76 = $75 & 3;
   $77 = 1 << $76;
   switch ($77|0) {
   case 4:  {
    $79 = HEAP32[$62>>2]|0;
    _FourByteSwap($79,$55);
    break L26;
    break;
   }
   case 2:  {
    $78 = HEAP32[$62>>2]|0;
    _TwoByteSwap($78,$55);
    break L26;
    break;
   }
   default: {
    break L26;
   }
   }
  }
 } while(0);
 $80 = ((($slot)) + 72|0);
 HEAP32[$80>>2] = 1651078259;
 $81 = HEAP16[$22>>1]|0;
 $82 = $81 << 16 >> 16;
 $83 = ((($slot)) + 100|0);
 HEAP32[$83>>2] = $82;
 $84 = HEAP16[$11>>1]|0;
 $85 = $84 << 16 >> 16;
 $86 = ((($slot)) + 104|0);
 HEAP32[$86>>2] = $85;
 $87 = (((($10) + ($glyph_index$<<4)|0)) + 4|0);
 $88 = HEAP16[$87>>1]|0;
 $89 = $88 << 16 >> 16;
 $90 = $89 << 6;
 $91 = ((($slot)) + 24|0);
 $92 = ((($slot)) + 40|0);
 HEAP32[$92>>2] = $90;
 $93 = HEAP16[$22>>1]|0;
 $94 = $93 << 16 >> 16;
 $95 = $94 << 6;
 $96 = ((($slot)) + 32|0);
 HEAP32[$96>>2] = $95;
 $97 = HEAP16[$11>>1]|0;
 $98 = $97 << 16 >> 16;
 $99 = $98 << 6;
 $100 = ((($slot)) + 36|0);
 HEAP32[$100>>2] = $99;
 $101 = HEAP16[$19>>1]|0;
 $102 = $101 << 16 >> 16;
 $103 = HEAP16[$22>>1]|0;
 $104 = $103 << 16 >> 16;
 $105 = (($102) - ($104))|0;
 $106 = $105 << 6;
 HEAP32[$91>>2] = $106;
 $107 = HEAP32[$18>>2]|0;
 $108 = $107 << 6;
 $109 = ((($slot)) + 28|0);
 HEAP32[$109>>2] = $108;
 $110 = ((($0)) + 204|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ((($0)) + 208|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = (($113) + ($111))|0;
 $115 = $114 << 6;
 _ft_synthesize_vertical_metrics($91,$115);
 $$0 = $64;
 return ($$0|0);
}
function _PCF_Size_Request($size,$req) {
 $size = $size|0;
 $req = $req|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($req)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = ((($req)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $12 = $7;
 } else {
  $8 = Math_imul($7, $4)|0;
  $9 = (($8) + 36)|0;
  $10 = (($9|0) / 72)&-1;
  $12 = $10;
 }
 $11 = (($12) + 32)|0;
 $13 = $11 >> 6;
 $14 = HEAP32[$req>>2]|0;
 switch ($14|0) {
 case 0:  {
  $15 = ((($2)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 32)|0;
  $18 = $17 >> 6;
  $19 = ($13|0)==($18|0);
  if (!($19)) {
   $$0 = 23;
   return ($$0|0);
  }
  break;
 }
 case 1:  {
  $20 = ((($0)) + 196|0);
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($20)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + ($22))|0;
  $26 = ($13|0)==($25|0);
  if (!($26)) {
   $$0 = 23;
   return ($$0|0);
  }
  break;
 }
 default: {
  $$0 = 7;
  return ($$0|0);
 }
 }
 (_PCF_Size_Select($size,0)|0);
 $$0 = 0;
 return ($$0|0);
}
function _PCF_Size_Select($size,$strike_index) {
 $size = $size|0;
 $strike_index = $strike_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 196|0);
 _FT_Select_Metrics($0,$strike_index);
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 6;
 $5 = ((($size)) + 24|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($1)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (0 - ($7))|0;
 $9 = $8 << 6;
 $10 = ((($size)) + 28|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($1)) + 40|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = $13 << 6;
 $15 = ((($size)) + 36|0);
 HEAP32[$15>>2] = $14;
 return 0;
}
function _pcf_get_charset_id($face,$acharset_encoding,$acharset_registry) {
 $face = $face|0;
 $acharset_encoding = $acharset_encoding|0;
 $acharset_registry = $acharset_registry|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 176|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$acharset_encoding>>2] = $1;
 $2 = ((($face)) + 180|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$acharset_registry>>2] = $3;
 return 0;
}
function _pcf_get_bdf_property($face,$prop_name,$aproperty) {
 $face = $face|0;
 $prop_name = $prop_name|0;
 $aproperty = $aproperty|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pcf_find_property($face,$prop_name)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 6;
  return ($$0|0);
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $8 = ((($0)) + 8|0);
  HEAP32[$aproperty>>2] = 2;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($aproperty)) + 4|0);
  HEAP32[$10>>2] = $9;
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$aproperty>>2] = 1;
  $5 = ((($0)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($aproperty)) + 4|0);
  HEAP32[$7>>2] = $6;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _pfr_get_metrics($pfrface,$anoutline_resolution,$ametrics_resolution,$ametrics_x_scale,$ametrics_y_scale) {
 $pfrface = $pfrface|0;
 $anoutline_resolution = $anoutline_resolution|0;
 $ametrics_resolution = $ametrics_resolution|0;
 $ametrics_x_scale = $ametrics_x_scale|0;
 $ametrics_y_scale = $ametrics_y_scale|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x_scale$0 = 0, $y_scale$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pfrface)) + 288|0);
 $1 = ((($pfrface)) + 88|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($anoutline_resolution|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$anoutline_resolution>>2] = $5;
 }
 $6 = ($ametrics_resolution|0)==(0|0);
 if (!($6)) {
  $7 = ((($0)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$ametrics_resolution>>2] = $8;
 }
 $9 = ($2|0)==(0|0);
 if ($9) {
  $x_scale$0 = 65536;$y_scale$0 = 65536;
 } else {
  $10 = ((($2)) + 12|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $13 = $12 << 6;
  $14 = ((($0)) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_FT_DivFix($13,$15)|0);
  $17 = ((($2)) + 14|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18&65535;
  $20 = $19 << 6;
  $21 = HEAP32[$14>>2]|0;
  $22 = (_FT_DivFix($20,$21)|0);
  $x_scale$0 = $16;$y_scale$0 = $22;
 }
 $23 = ($ametrics_x_scale|0)==(0|0);
 if (!($23)) {
  HEAP32[$ametrics_x_scale>>2] = $x_scale$0;
 }
 $24 = ($ametrics_y_scale|0)==(0|0);
 if ($24) {
  return 0;
 }
 HEAP32[$ametrics_y_scale>>2] = $y_scale$0;
 return 0;
}
function _pfr_get_advance($pfrface,$gindex,$anadvance) {
 $pfrface = $pfrface|0;
 $gindex = $gindex|0;
 $anadvance = $anadvance|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$anadvance>>2] = 0;
 $0 = ($gindex|0)==(0);
 if ($0) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $1 = (($gindex) + -1)|0;
 $2 = ($pfrface|0)==(0|0);
 if ($2) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $3 = ((($pfrface)) + 288|0);
 $4 = ((($3)) + 120|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($1>>>0)<($5>>>0);
 if (!($6)) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $7 = ((($3)) + 128|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (((($8) + ($1<<4)|0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$anadvance>>2] = $10;
 $error$0 = 0;
 return ($error$0|0);
}
function _pfr_get_service($module,$service_id) {
 $module = $module|0;
 $service_id = $service_id|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_service_list_lookup(6048,$service_id)|0);
 return ($0|0);
}
function _pfr_get_kerning($pfrface,$left,$right,$avector) {
 $pfrface = $pfrface|0;
 $left = $left|0;
 $right = $right|0;
 $avector = $avector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pfrface)) + 288|0);
 (_pfr_face_get_kerning($pfrface,$left,$right,$avector)|0);
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if ($5) {
  return 0;
 }
 $6 = HEAP32[$avector>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = (_FT_MulDiv($6,$2,$4)|0);
  HEAP32[$avector>>2] = $8;
 }
 $9 = ((($avector)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  return 0;
 }
 $12 = HEAP32[$avector>>2]|0;
 $13 = HEAP32[$1>>2]|0;
 $14 = HEAP32[$3>>2]|0;
 $15 = (_FT_MulDiv($12,$13,$14)|0);
 HEAP32[$9>>2] = $15;
 return 0;
}
function _BitOrderInvert($buf,$nbytes) {
 $buf = $buf|0;
 $nbytes = $nbytes|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nbytes|0)==(0);
 if ($0) {
  return;
 } else {
  $$012 = $nbytes;$$03 = $buf;
 }
 while(1) {
  $1 = HEAP8[$$03>>0]|0;
  $2 = $1&255;
  $3 = $2 >>> 1;
  $4 = $3 & 85;
  $5 = $2 << 1;
  $6 = $5 & 170;
  $7 = $4 | $6;
  $8 = $7 >>> 2;
  $9 = $8 & 51;
  $10 = $7 << 2;
  $11 = $10 & 204;
  $12 = $9 | $11;
  $13 = $12 >>> 4;
  $14 = $12 << 4;
  $15 = $13 | $14;
  $16 = $15&255;
  HEAP8[$$03>>0] = $16;
  $17 = (($$012) + -1)|0;
  $18 = ((($$03)) + 1|0);
  $19 = ($17|0)==(0);
  if ($19) {
   break;
  } else {
   $$012 = $17;$$03 = $18;
  }
 }
 return;
}
function _TwoByteSwap($buf,$nbytes) {
 $buf = $buf|0;
 $nbytes = $nbytes|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nbytes>>>0)>(1);
 if ($0) {
  $$012 = $nbytes;$$03 = $buf;
 } else {
  return;
 }
 while(1) {
  $1 = HEAP8[$$03>>0]|0;
  $2 = ((($$03)) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  HEAP8[$$03>>0] = $3;
  HEAP8[$2>>0] = $1;
  $4 = (($$012) + -2)|0;
  $5 = ((($$03)) + 2|0);
  $6 = ($4>>>0)>(1);
  if ($6) {
   $$012 = $4;$$03 = $5;
  } else {
   break;
  }
 }
 return;
}
function _FourByteSwap($buf,$nbytes) {
 $buf = $buf|0;
 $nbytes = $nbytes|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nbytes>>>0)>(3);
 if ($0) {
  $$012 = $nbytes;$$03 = $buf;
 } else {
  return;
 }
 while(1) {
  $1 = HEAP8[$$03>>0]|0;
  $2 = ((($$03)) + 3|0);
  $3 = HEAP8[$2>>0]|0;
  HEAP8[$$03>>0] = $3;
  HEAP8[$2>>0] = $1;
  $4 = ((($$03)) + 1|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ((($$03)) + 2|0);
  $7 = HEAP8[$6>>0]|0;
  HEAP8[$4>>0] = $7;
  HEAP8[$6>>0] = $5;
  $8 = (($$012) + -4)|0;
  $9 = ((($$03)) + 4|0);
  $10 = ($8>>>0)>(3);
  if ($10) {
   $$012 = $8;$$03 = $9;
  } else {
   break;
  }
 }
 return;
}
function _FT_Stream_OpenGzip($stream,$source) {
 $stream = $stream|0;
 $source = $source|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($source)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_ft_gzip_check_header($source)|0);
 HEAP32[$error>>2] = $2;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $27 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($27|0);
 }
 dest=$stream; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($stream)) + 28|0);
 HEAP32[$4>>2] = $1;
 $5 = (_ft_mem_qalloc($1,8276,$error)|0);
 $6 = HEAP32[$error>>2]|0;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = (_ft_gzip_file_init($5,$stream,$source)|0);
   HEAP32[$error>>2] = $8;
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = ((($stream)) + 12|0);
    HEAP32[$10>>2] = $5;
    break;
   }
   _ft_mem_free($1,$5);
   $27 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($27|0);
  }
 } while(0);
 $11 = (_ft_gzip_get_uncompressed_size($source)|0);
 $$off = (($11) + -1)|0;
 $12 = ($$off>>>0)<(40959);
 if ($12) {
  $13 = (_ft_mem_alloc($1,$11,$error)|0);
  $14 = HEAP32[$error>>2]|0;
  $15 = ($14|0)==(0);
  do {
   if ($15) {
    $16 = (_ft_gzip_file_io($5,0,$13,$11)|0);
    $17 = ($16|0)==($11|0);
    if (!($17)) {
     (_ft_gzip_file_io($5,0,0,0)|0);
     _ft_mem_free($1,$13);
     break;
    }
    _ft_gzip_file_done($5);
    _ft_mem_free($1,$5);
    $18 = ((($stream)) + 12|0);
    HEAP32[$18>>2] = 0;
    $19 = ((($stream)) + 4|0);
    HEAP32[$19>>2] = $11;
    $20 = ((($stream)) + 8|0);
    HEAP32[$20>>2] = 0;
    HEAP32[$stream>>2] = $13;
    $21 = ((($stream)) + 20|0);
    HEAP32[$21>>2] = 0;
    $22 = ((($stream)) + 24|0);
    HEAP32[$22>>2] = 61;
    $27 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($27|0);
   }
  } while(0);
  HEAP32[$error>>2] = 0;
 }
 $23 = ((($stream)) + 4|0);
 HEAP32[$23>>2] = 2147483647;
 $24 = ((($stream)) + 8|0);
 HEAP32[$24>>2] = 0;
 HEAP32[$stream>>2] = 0;
 $25 = ((($stream)) + 20|0);
 HEAP32[$25>>2] = 38;
 $26 = ((($stream)) + 24|0);
 HEAP32[$26>>2] = 61;
 $27 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($27|0);
}
function _ft_gzip_check_header($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $head = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $head = sp + 4|0;
 $0 = (_FT_Stream_Seek($stream,0)|0);
 HEAP32[$error>>2] = $0;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $2 = (_FT_Stream_Read($stream,$head,4)|0);
   HEAP32[$error>>2] = $2;
   $3 = ($2|0)==(0);
   if ($3) {
    $4 = HEAP8[$head>>0]|0;
    $5 = ($4<<24>>24)==(31);
    if ($5) {
     $6 = ((($head)) + 1|0);
     $7 = HEAP8[$6>>0]|0;
     $8 = ($7<<24>>24)==(-117);
     if ($8) {
      $9 = ((($head)) + 2|0);
      $10 = HEAP8[$9>>0]|0;
      $11 = ($10<<24>>24)==(8);
      if ($11) {
       $12 = ((($head)) + 3|0);
       $13 = HEAP8[$12>>0]|0;
       $14 = ($13&255)>(31);
       if (!($14)) {
        $15 = (_FT_Stream_Skip($stream,6)|0);
        HEAP32[$error>>2] = $15;
        $16 = HEAP8[$12>>0]|0;
        $17 = $16 & 4;
        $18 = ($17<<24>>24)==(0);
        if (!($18)) {
         $19 = (_FT_Stream_ReadUShortLE($stream,$error)|0);
         $20 = HEAP32[$error>>2]|0;
         $21 = ($20|0)==(0);
         if (!($21)) {
          break;
         }
         $22 = $19&65535;
         $23 = (_FT_Stream_Skip($stream,$22)|0);
         HEAP32[$error>>2] = $23;
         $24 = ($23|0)==(0);
         if (!($24)) {
          break;
         }
        }
        $25 = HEAP8[$12>>0]|0;
        $26 = $25 & 8;
        $27 = ($26<<24>>24)==(0);
        if (!($27)) {
         while(1) {
          $28 = (_FT_Stream_ReadChar($stream,$error)|0);
          $29 = HEAP32[$error>>2]|0;
          $30 = ($29|0)==(0);
          if (!($30)) {
           break L1;
          }
          $31 = ($28<<24>>24)==(0);
          if ($31) {
           break;
          }
         }
        }
        $32 = HEAP8[$12>>0]|0;
        $33 = $32 & 16;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         while(1) {
          $35 = (_FT_Stream_ReadChar($stream,$error)|0);
          $36 = HEAP32[$error>>2]|0;
          $37 = ($36|0)==(0);
          if (!($37)) {
           break L1;
          }
          $38 = ($35<<24>>24)==(0);
          if ($38) {
           break;
          }
         }
        }
        $39 = HEAP8[$12>>0]|0;
        $40 = $39 & 2;
        $41 = ($40<<24>>24)==(0);
        if ($41) {
         break;
        }
        $42 = (_FT_Stream_Skip($stream,2)|0);
        HEAP32[$error>>2] = $42;
        break;
       }
      }
     }
    }
    HEAP32[$error>>2] = 3;
   }
  }
 } while(0);
 $43 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($43|0);
}
function _ft_gzip_file_init($zip,$stream,$source) {
 $zip = $zip|0;
 $stream = $stream|0;
 $source = $source|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($zip)) + 12|0);
 $1 = ((($zip)) + 4|0);
 HEAP32[$1>>2] = $stream;
 HEAP32[$zip>>2] = $source;
 $2 = ((($stream)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($zip)) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($zip)) + 8264|0);
 $6 = ((($zip)) + 8272|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($zip)) + 8268|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($zip)) + 8264|0);
 HEAP32[$8>>2] = 0;
 $9 = (_ft_gzip_check_header($source)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $error$0 = $9;
  return ($error$0|0);
 }
 $11 = ((($zip)) + 4168|0);
 $12 = (_FT_Stream_Pos($source)|0);
 $13 = ((($zip)) + 68|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($zip)) + 44|0);
 HEAP32[$14>>2] = 48;
 $15 = ((($zip)) + 48|0);
 HEAP32[$15>>2] = 20;
 $16 = ((($source)) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($zip)) + 52|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($zip)) + 16|0);
 HEAP32[$19>>2] = 0;
 HEAP32[$0>>2] = $11;
 $20 = (_inflateInit2_($0)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = HEAP32[$0>>2]|0;
  $23 = ($22|0)==(0|0);
  if (!($23)) {
   $error$0 = 0;
   return ($error$0|0);
  }
 }
 $error$0 = 3;
 return ($error$0|0);
}
function _ft_gzip_get_uncompressed_size($stream) {
 $stream = $stream|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($stream)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($stream)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -4)|0;
 $5 = (_FT_Stream_Seek($stream,$4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $result$0 = 0;
  STACKTOP = sp;return ($result$0|0);
 }
 $7 = (_FT_Stream_ReadULong($stream,$error)|0);
 $8 = HEAP32[$error>>2]|0;
 $9 = ($8|0)!=(0);
 $$ = $9 ? 0 : $7;
 (_FT_Stream_Seek($stream,$1)|0);
 $result$0 = $$;
 STACKTOP = sp;return ($result$0|0);
}
function _ft_gzip_file_io($zip,$pos,$buffer,$count) {
 $zip = $zip|0;
 $pos = $pos|0;
 $buffer = $buffer|0;
 $count = $count|0;
 var $$$0 = 0, $$0 = 0, $$02 = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $result$0 = 0, $result$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($zip)) + 8264|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($pos>>>0);
 if ($2) {
  $3 = (_ft_gzip_file_reset($zip)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $result$1 = 0;
   return ($result$1|0);
  }
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5>>>0)<($pos>>>0);
 if ($6) {
  $7 = (($pos) - ($5))|0;
  $8 = (_ft_gzip_file_skip_output($zip,$7)|0);
  $9 = ($8|0)!=(0);
  $10 = ($count|0)==(0);
  $or$cond = $10 | $9;
  if ($or$cond) {
   $result$1 = 0;
   return ($result$1|0);
  }
 } else {
  $$old1 = ($count|0)==(0);
  if ($$old1) {
   $result$1 = 0;
   return ($result$1|0);
  }
 }
 $11 = ((($zip)) + 8272|0);
 $12 = ((($zip)) + 8268|0);
 $$0 = $count;$$02 = $buffer;$result$0 = 0;
 while(1) {
  $13 = HEAP32[$11>>2]|0;
  $14 = HEAP32[$12>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) - ($16))|0;
  $18 = ($17>>>0)<($$0>>>0);
  $$$0 = $18 ? $17 : $$0;
  _memcpy(($$02|0),($14|0),($$$0|0))|0;
  $19 = (($$$0) + ($result$0))|0;
  $20 = HEAP32[$12>>2]|0;
  $21 = (($20) + ($$$0)|0);
  HEAP32[$12>>2] = $21;
  $22 = HEAP32[$0>>2]|0;
  $23 = (($$$0) + ($22))|0;
  HEAP32[$0>>2] = $23;
  $24 = ($$0|0)==($$$0|0);
  if ($24) {
   $result$1 = $19;
   label = 9;
   break;
  }
  $25 = (($$0) - ($$$0))|0;
  $26 = (($$02) + ($$$0)|0);
  $27 = (_ft_gzip_file_fill_output($zip)|0);
  $28 = ($27|0)==(0);
  if ($28) {
   $$0 = $25;$$02 = $26;$result$0 = $19;
  } else {
   $result$1 = $19;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($result$1|0);
 }
 return (0)|0;
}
function _ft_gzip_file_done($zip) {
 $zip = $zip|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($zip)) + 12|0);
 _inflateEnd($0);
 $1 = ((($zip)) + 44|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($zip)) + 48|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($zip)) + 52|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($zip)) + 24|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($zip)) + 28|0);
 HEAP32[$5>>2] = 0;
 ;HEAP32[$zip>>2]=0|0;HEAP32[$zip+4>>2]=0|0;HEAP32[$zip+8>>2]=0|0;HEAP32[$zip+12>>2]=0|0;HEAP32[$zip+16>>2]=0|0;
 return;
}
function _ft_gzip_stream_close($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($stream)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 _ft_gzip_file_done($1);
 _ft_mem_free($4,$1);
 HEAP32[$0>>2] = 0;
 return;
}
function _ft_gzip_stream_io($stream,$pos,$buffer,$count) {
 $stream = $stream|0;
 $pos = $pos|0;
 $buffer = $buffer|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_ft_gzip_file_io($1,$pos,$buffer,$count)|0);
 return ($2|0);
}
function _inflateEnd($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($z)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($z)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  return;
 }
 $7 = ((($2)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _inflate_blocks_free($8,$z);
 }
 $10 = HEAP32[$4>>2]|0;
 $11 = ((($z)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vii[$10 & 31]($12,$13);
 HEAP32[$1>>2] = 0;
 return;
}
function _inflate_blocks_free($s,$z) {
 $s = $s|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _inflate_blocks_reset($s,$z,0);
 $0 = ((($z)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($z)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($s)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vii[$1 & 31]($3,$5);
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($s)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_vii[$6 & 31]($7,$9);
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vii[$10 & 31]($11,$s);
 return;
}
function _inflate_blocks_reset($s,$z,$c) {
 $s = $s|0;
 $z = $z|0;
 $c = $c|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(0|0);
 if (!($0)) {
  $1 = ((($s)) + 60|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$c>>2] = $2;
 }
 $3 = HEAP32[$s>>2]|0;
 $4 = $3 & -2;
 $switch = ($4|0)==(4);
 if ($switch) {
  $5 = ((($z)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($z)) + 40|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($s)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vii[$6 & 31]($8,$10);
  $$pr = HEAP32[$s>>2]|0;
  $12 = $$pr;
 } else {
  $12 = $3;
 }
 $11 = ($12|0)==(6);
 if ($11) {
  $13 = ((($s)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  _inflate_codes_free($14,$z);
 }
 HEAP32[$s>>2] = 0;
 $15 = ((($s)) + 28|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($s)) + 32|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($s)) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($s)) + 52|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($s)) + 48|0);
 HEAP32[$20>>2] = $18;
 $21 = ((($s)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  return;
 }
 $24 = (FUNCTION_TABLE_iiii[$22 & 127](0,0,0)|0);
 $25 = ((($s)) + 60|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($z)) + 48|0);
 HEAP32[$26>>2] = $24;
 return;
}
function _inflate_codes_free($c,$z) {
 $c = $c|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($z)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vii[$1 & 31]($3,$c);
 return;
}
function _ft_gzip_file_reset($zip) {
 $zip = $zip|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$zip>>2]|0;
 $1 = ((($zip)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_FT_Stream_Seek($0,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  return ($3|0);
 }
 $5 = ((($zip)) + 12|0);
 _inflateReset($5);
 $6 = ((($zip)) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($zip)) + 72|0);
 HEAP32[$5>>2] = $7;
 $8 = ((($zip)) + 28|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($zip)) + 4168|0);
 $10 = ((($zip)) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($zip)) + 8264|0);
 $12 = ((($zip)) + 8272|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($zip)) + 8268|0);
 HEAP32[$13>>2] = $11;
 $14 = ((($zip)) + 8264|0);
 HEAP32[$14>>2] = 0;
 return ($3|0);
}
function _ft_gzip_file_skip_output($zip,$count) {
 $zip = $zip|0;
 $count = $count|0;
 var $$$0 = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($zip)) + 8272|0);
 $1 = ((($zip)) + 8268|0);
 $2 = ((($zip)) + 8264|0);
 $$0 = $count;
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = HEAP32[$1>>2]|0;
  $5 = $3;
  $6 = $4;
  $7 = (($5) - ($6))|0;
  $8 = ($7>>>0)<($$0>>>0);
  $$$0 = $8 ? $7 : $$0;
  $9 = (($4) + ($$$0)|0);
  HEAP32[$1>>2] = $9;
  $10 = HEAP32[$2>>2]|0;
  $11 = (($$$0) + ($10))|0;
  HEAP32[$2>>2] = $11;
  $12 = ($$0|0)==($$$0|0);
  if ($12) {
   $error$1 = 0;
   label = 4;
   break;
  }
  $13 = (($$0) - ($$$0))|0;
  $14 = (_ft_gzip_file_fill_output($zip)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$0 = $13;
  } else {
   $error$1 = $14;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($error$1|0);
 }
 return (0)|0;
}
function _ft_gzip_file_fill_output($zip) {
 $zip = $zip|0;
 var $$error$1 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($zip)) + 12|0);
 $1 = ((($zip)) + 4168|0);
 $2 = ((($zip)) + 8268|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($zip)) + 24|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($zip)) + 28|0);
 HEAP32[$4>>2] = 4096;
 $5 = ((($zip)) + 16|0);
 L1: while(1) {
  $7 = HEAP32[$5>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = (_ft_gzip_file_fill_input($zip)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    $error$2 = $9;
    label = 7;
    break;
   }
  }
  $11 = (_inflate($0)|0);
  switch ($11|0) {
  case 1:  {
   label = 6;
   break L1;
   break;
  }
  case 0:  {
   break;
  }
  default: {
   $error$2 = 85;
   label = 7;
   break L1;
  }
  }
  $$pr = HEAP32[$4>>2]|0;
  $6 = ($$pr|0)==(0);
  if ($6) {
   $error$2 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 6) {
  $12 = HEAP32[$3>>2]|0;
  $13 = ((($zip)) + 8272|0);
  HEAP32[$13>>2] = $12;
  $14 = HEAP32[$2>>2]|0;
  $15 = ($12|0)==($14|0);
  $$error$1 = $15 ? 85 : 0;
  return ($$error$1|0);
 }
 else if ((label|0) == 7) {
  return ($error$2|0);
 }
 return (0)|0;
}
function _ft_gzip_file_fill_input($zip) {
 $zip = $zip|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$zip>>2]|0;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $9 = ((($0)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($0)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($10) - ($12))|0;
   $14 = ($13>>>0)>(4096);
   $$ = $14 ? 4096 : $13;
   $15 = ($$|0)==(0);
   if ($15) {
    $$0 = 85;
    return ($$0|0);
   } else {
    $16 = ((($zip)) + 72|0);
    $17 = HEAP32[$0>>2]|0;
    $18 = (($17) + ($12)|0);
    _memcpy(($16|0),($18|0),($$|0))|0;
    $size$0 = $$;
    break;
   }
  } else {
   $4 = ((($0)) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($zip)) + 72|0);
   $7 = (FUNCTION_TABLE_iiiii[$2 & 63]($0,$5,$6,4096)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $$0 = 85;
    return ($$0|0);
   } else {
    $size$0 = $7;
   }
  }
 } while(0);
 $19 = ((($0)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($size$0))|0;
 HEAP32[$19>>2] = $21;
 $22 = ((($zip)) + 72|0);
 $23 = ((($zip)) + 12|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($zip)) + 16|0);
 HEAP32[$24>>2] = $size$0;
 $$0 = 0;
 return ($$0|0);
}
function _inflate($z) {
 $z = $z|0;
 var $$0 = 0, $$0$ph = 0, $$lcssa = 0, $$lcssa114 = 0, $$lcssa119 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $r$0 = 0, $r$1 = 0, $r$10 = 0, $r$2 = 0, $r$3 = 0, $r$4 = 0, $r$5 = 0, $r$7 = 0, $r$8 = 0, $r$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)==(0|0);
 if ($0) {
  $$0 = -2;
  return ($$0|0);
 }
 $1 = ((($z)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = -2;
  return ($$0|0);
 }
 $4 = HEAP32[$z>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -2;
  return ($$0|0);
 }
 $6 = ((($z)) + 4|0);
 $7 = ((($z)) + 8|0);
 $8 = ((($z)) + 24|0);
 $9 = ((($z)) + 24|0);
 $10 = ((($z)) + 4|0);
 $11 = ((($z)) + 8|0);
 $12 = ((($z)) + 24|0);
 $13 = ((($z)) + 4|0);
 $14 = ((($z)) + 8|0);
 $15 = ((($z)) + 4|0);
 $16 = ((($z)) + 8|0);
 $17 = ((($z)) + 4|0);
 $18 = ((($z)) + 8|0);
 $19 = ((($z)) + 4|0);
 $20 = ((($z)) + 8|0);
 $21 = ((($z)) + 24|0);
 $r$0 = -5;
 L10: while(1) {
  $22 = HEAP32[$1>>2]|0;
  $23 = HEAP32[$22>>2]|0;
  L12: do {
   switch ($23|0) {
   case 2:  {
    $r$2 = $r$0;
    label = 18;
    break L10;
    break;
   }
   case 3:  {
    $r$3 = $r$0;
    label = 20;
    break L10;
    break;
   }
   case 4:  {
    $r$4 = $r$0;
    label = 22;
    break L10;
    break;
   }
   case 5:  {
    $r$5 = $r$0;
    break L10;
    break;
   }
   case 6:  {
    $$lcssa114 = $22;
    label = 26;
    break L10;
    break;
   }
   case 12:  {
    $$0$ph = 1;
    label = 44;
    break L10;
    break;
   }
   case 13:  {
    $$0 = -3;
    label = 45;
    break L10;
    break;
   }
   case 0:  {
    $24 = HEAP32[$6>>2]|0;
    $25 = ($24|0)==(0);
    if ($25) {
     $$0$ph = $r$0;
     label = 44;
     break L10;
    }
    $26 = (($24) + -1)|0;
    HEAP32[$6>>2] = $26;
    $27 = HEAP32[$7>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[$7>>2] = $28;
    $29 = HEAP32[$z>>2]|0;
    $30 = ((($29)) + 1|0);
    HEAP32[$z>>2] = $30;
    $31 = HEAP8[$29>>0]|0;
    $32 = $31&255;
    $33 = HEAP32[$1>>2]|0;
    $34 = ((($33)) + 4|0);
    HEAP32[$34>>2] = $32;
    $35 = $32 & 15;
    $36 = ($35|0)==(8);
    $37 = HEAP32[$1>>2]|0;
    if (!($36)) {
     HEAP32[$37>>2] = 13;
     HEAP32[$9>>2] = 26834;
     $38 = HEAP32[$1>>2]|0;
     $39 = ((($38)) + 4|0);
     HEAP32[$39>>2] = 5;
     $r$0 = 0;
     continue L10;
    }
    $40 = ((($37)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $41 >>> 4;
    $43 = (($42) + 8)|0;
    $44 = ((($37)) + 16|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($43>>>0)>($45>>>0);
    if ($46) {
     HEAP32[$37>>2] = 13;
     HEAP32[$8>>2] = 26861;
     $47 = HEAP32[$1>>2]|0;
     $48 = ((($47)) + 4|0);
     HEAP32[$48>>2] = 5;
     $r$0 = 0;
     continue L10;
    } else {
     HEAP32[$37>>2] = 1;
     $r$1 = 0;
     label = 12;
     break L12;
    }
    break;
   }
   case 1:  {
    $r$1 = $r$0;
    label = 12;
    break;
   }
   case 7:  {
    $141 = ((($22)) + 20|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = (_inflate_blocks($142,$z,$r$0)|0);
    switch ($143|0) {
    case 0:  {
     $$0$ph = 0;
     label = 44;
     break L10;
     break;
    }
    case -3:  {
     $144 = HEAP32[$1>>2]|0;
     HEAP32[$144>>2] = 13;
     $145 = HEAP32[$1>>2]|0;
     $146 = ((($145)) + 4|0);
     HEAP32[$146>>2] = 0;
     $r$0 = -3;
     continue L10;
     break;
    }
    default: {
    }
    }
    $147 = ($143|0)==(1);
    if (!($147)) {
     $$0$ph = $143;
     label = 44;
     break L10;
    }
    $148 = HEAP32[$1>>2]|0;
    $149 = ((($148)) + 20|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = ((($148)) + 4|0);
    _inflate_blocks_reset($150,$z,$151);
    $152 = HEAP32[$1>>2]|0;
    $153 = ((($152)) + 12|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0);
    if ($155) {
     HEAP32[$152>>2] = 8;
     $r$7 = 0;
     label = 33;
     break L12;
    } else {
     HEAP32[$152>>2] = 12;
     $r$0 = 0;
     continue L10;
    }
    break;
   }
   case 8:  {
    $r$7 = $r$0;
    label = 33;
    break;
   }
   case 9:  {
    $r$8 = $r$0;
    label = 35;
    break;
   }
   case 10:  {
    $r$9 = $r$0;
    label = 37;
    break;
   }
   case 11:  {
    $r$10 = $r$0;
    break;
   }
   default: {
    label = 43;
    break L10;
   }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   $49 = HEAP32[$10>>2]|0;
   $50 = ($49|0)==(0);
   if ($50) {
    $$0$ph = $r$1;
    label = 44;
    break;
   }
   $51 = (($49) + -1)|0;
   HEAP32[$10>>2] = $51;
   $52 = HEAP32[$11>>2]|0;
   $53 = (($52) + 1)|0;
   HEAP32[$11>>2] = $53;
   $54 = HEAP32[$z>>2]|0;
   $55 = ((($54)) + 1|0);
   HEAP32[$z>>2] = $55;
   $56 = HEAP8[$54>>0]|0;
   $57 = $56&255;
   $58 = HEAP32[$1>>2]|0;
   $59 = ((($58)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60 << 8;
   $62 = $61 | $57;
   $63 = (($62>>>0) % 31)&-1;
   $64 = ($63|0)==(0);
   if (!($64)) {
    HEAP32[$58>>2] = 13;
    HEAP32[$12>>2] = 26881;
    $65 = HEAP32[$1>>2]|0;
    $66 = ((($65)) + 4|0);
    HEAP32[$66>>2] = 5;
    $r$0 = 0;
    continue;
   }
   $67 = $57 & 32;
   $68 = ($67|0)==(0);
   if (!($68)) {
    $$lcssa119 = $58;
    label = 17;
    break;
   }
   HEAP32[$58>>2] = 7;
   $r$0 = 0;
   continue;
  }
  else if ((label|0) == 33) {
   label = 0;
   $156 = HEAP32[$13>>2]|0;
   $157 = ($156|0)==(0);
   if ($157) {
    $$0$ph = $r$7;
    label = 44;
    break;
   }
   $158 = (($156) + -1)|0;
   HEAP32[$13>>2] = $158;
   $159 = HEAP32[$14>>2]|0;
   $160 = (($159) + 1)|0;
   HEAP32[$14>>2] = $160;
   $161 = HEAP32[$z>>2]|0;
   $162 = ((($161)) + 1|0);
   HEAP32[$z>>2] = $162;
   $163 = HEAP8[$161>>0]|0;
   $164 = $163&255;
   $165 = $164 << 24;
   $166 = HEAP32[$1>>2]|0;
   $167 = ((($166)) + 8|0);
   HEAP32[$167>>2] = $165;
   $168 = HEAP32[$1>>2]|0;
   HEAP32[$168>>2] = 9;
   $r$8 = 0;
   label = 35;
  }
  if ((label|0) == 35) {
   label = 0;
   $169 = HEAP32[$15>>2]|0;
   $170 = ($169|0)==(0);
   if ($170) {
    $$0$ph = $r$8;
    label = 44;
    break;
   }
   $171 = (($169) + -1)|0;
   HEAP32[$15>>2] = $171;
   $172 = HEAP32[$16>>2]|0;
   $173 = (($172) + 1)|0;
   HEAP32[$16>>2] = $173;
   $174 = HEAP32[$z>>2]|0;
   $175 = ((($174)) + 1|0);
   HEAP32[$z>>2] = $175;
   $176 = HEAP8[$174>>0]|0;
   $177 = $176&255;
   $178 = $177 << 16;
   $179 = HEAP32[$1>>2]|0;
   $180 = ((($179)) + 8|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = (($181) + ($178))|0;
   HEAP32[$180>>2] = $182;
   $183 = HEAP32[$1>>2]|0;
   HEAP32[$183>>2] = 10;
   $r$9 = 0;
   label = 37;
  }
  if ((label|0) == 37) {
   label = 0;
   $184 = HEAP32[$17>>2]|0;
   $185 = ($184|0)==(0);
   if ($185) {
    $$0$ph = $r$9;
    label = 44;
    break;
   }
   $186 = (($184) + -1)|0;
   HEAP32[$17>>2] = $186;
   $187 = HEAP32[$18>>2]|0;
   $188 = (($187) + 1)|0;
   HEAP32[$18>>2] = $188;
   $189 = HEAP32[$z>>2]|0;
   $190 = ((($189)) + 1|0);
   HEAP32[$z>>2] = $190;
   $191 = HEAP8[$189>>0]|0;
   $192 = $191&255;
   $193 = $192 << 8;
   $194 = HEAP32[$1>>2]|0;
   $195 = ((($194)) + 8|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = (($196) + ($193))|0;
   HEAP32[$195>>2] = $197;
   $198 = HEAP32[$1>>2]|0;
   HEAP32[$198>>2] = 11;
   $r$10 = 0;
  }
  $199 = HEAP32[$19>>2]|0;
  $200 = ($199|0)==(0);
  if ($200) {
   $$0$ph = $r$10;
   label = 44;
   break;
  }
  $201 = (($199) + -1)|0;
  HEAP32[$19>>2] = $201;
  $202 = HEAP32[$20>>2]|0;
  $203 = (($202) + 1)|0;
  HEAP32[$20>>2] = $203;
  $204 = HEAP32[$z>>2]|0;
  $205 = ((($204)) + 1|0);
  HEAP32[$z>>2] = $205;
  $206 = HEAP8[$204>>0]|0;
  $207 = $206&255;
  $208 = HEAP32[$1>>2]|0;
  $209 = ((($208)) + 8|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = (($210) + ($207))|0;
  HEAP32[$209>>2] = $211;
  $212 = HEAP32[$1>>2]|0;
  $213 = ((($212)) + 4|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ((($212)) + 8|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = ($214|0)==($216|0);
  if ($217) {
   $$lcssa = $212;
   label = 42;
   break;
  }
  HEAP32[$212>>2] = 13;
  HEAP32[$21>>2] = 26920;
  $218 = HEAP32[$1>>2]|0;
  $219 = ((($218)) + 4|0);
  HEAP32[$219>>2] = 5;
  $r$0 = 0;
 }
 if ((label|0) == 17) {
  HEAP32[$$lcssa119>>2] = 2;
  $r$2 = 0;
  label = 18;
 }
 else if ((label|0) == 26) {
  HEAP32[$$lcssa114>>2] = 13;
  $138 = ((($z)) + 24|0);
  HEAP32[$138>>2] = 26904;
  $139 = HEAP32[$1>>2]|0;
  $140 = ((($139)) + 4|0);
  HEAP32[$140>>2] = 0;
  $$0 = -2;
  return ($$0|0);
 }
 else if ((label|0) == 42) {
  HEAP32[$$lcssa>>2] = 12;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 43) {
  $$0 = -2;
  return ($$0|0);
 }
 else if ((label|0) == 44) {
  $$0 = $$0$ph;
  return ($$0|0);
 }
 else if ((label|0) == 45) {
  return ($$0|0);
 }
 do {
  if ((label|0) == 18) {
   $69 = ((($z)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(0);
   if ($71) {
    $$0 = $r$2;
    return ($$0|0);
   } else {
    $72 = (($70) + -1)|0;
    HEAP32[$69>>2] = $72;
    $73 = ((($z)) + 8|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (($74) + 1)|0;
    HEAP32[$73>>2] = $75;
    $76 = HEAP32[$z>>2]|0;
    $77 = ((($76)) + 1|0);
    HEAP32[$z>>2] = $77;
    $78 = HEAP8[$76>>0]|0;
    $79 = $78&255;
    $80 = $79 << 24;
    $81 = HEAP32[$1>>2]|0;
    $82 = ((($81)) + 8|0);
    HEAP32[$82>>2] = $80;
    $83 = HEAP32[$1>>2]|0;
    HEAP32[$83>>2] = 3;
    $r$3 = 0;
    label = 20;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 20) {
   $84 = ((($z)) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)==(0);
   if ($86) {
    $$0 = $r$3;
    return ($$0|0);
   } else {
    $87 = (($85) + -1)|0;
    HEAP32[$84>>2] = $87;
    $88 = ((($z)) + 8|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) + 1)|0;
    HEAP32[$88>>2] = $90;
    $91 = HEAP32[$z>>2]|0;
    $92 = ((($91)) + 1|0);
    HEAP32[$z>>2] = $92;
    $93 = HEAP8[$91>>0]|0;
    $94 = $93&255;
    $95 = $94 << 16;
    $96 = HEAP32[$1>>2]|0;
    $97 = ((($96)) + 8|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($98) + ($95))|0;
    HEAP32[$97>>2] = $99;
    $100 = HEAP32[$1>>2]|0;
    HEAP32[$100>>2] = 4;
    $r$4 = 0;
    label = 22;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 22) {
   $101 = ((($z)) + 4|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==(0);
   if ($103) {
    $$0 = $r$4;
    return ($$0|0);
   } else {
    $104 = (($102) + -1)|0;
    HEAP32[$101>>2] = $104;
    $105 = ((($z)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (($106) + 1)|0;
    HEAP32[$105>>2] = $107;
    $108 = HEAP32[$z>>2]|0;
    $109 = ((($108)) + 1|0);
    HEAP32[$z>>2] = $109;
    $110 = HEAP8[$108>>0]|0;
    $111 = $110&255;
    $112 = $111 << 8;
    $113 = HEAP32[$1>>2]|0;
    $114 = ((($113)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($115) + ($112))|0;
    HEAP32[$114>>2] = $116;
    $117 = HEAP32[$1>>2]|0;
    HEAP32[$117>>2] = 5;
    $r$5 = 0;
    break;
   }
  }
 } while(0);
 $118 = ((($z)) + 4|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)==(0);
 if ($120) {
  $$0 = $r$5;
  return ($$0|0);
 }
 $121 = (($119) + -1)|0;
 HEAP32[$118>>2] = $121;
 $122 = ((($z)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = (($123) + 1)|0;
 HEAP32[$122>>2] = $124;
 $125 = HEAP32[$z>>2]|0;
 $126 = ((($125)) + 1|0);
 HEAP32[$z>>2] = $126;
 $127 = HEAP8[$125>>0]|0;
 $128 = $127&255;
 $129 = HEAP32[$1>>2]|0;
 $130 = ((($129)) + 8|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($131) + ($128))|0;
 HEAP32[$130>>2] = $132;
 $133 = HEAP32[$1>>2]|0;
 $134 = ((($133)) + 8|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ((($z)) + 48|0);
 HEAP32[$136>>2] = $135;
 $137 = HEAP32[$1>>2]|0;
 HEAP32[$137>>2] = 6;
 $$0 = 2;
 return ($$0|0);
}
function _inflate_blocks($s,$z,$r) {
 $s = $s|0;
 $z = $z|0;
 $r = $r|0;
 var $$0 = 0, $$02 = 0, $$02$lcssa1597 = 0, $$1$lcssa = 0, $$10 = 0, $$1411 = 0, $$1411$lcssa = 0, $$2$lcssa = 0, $$2399 = 0, $$2399$lcssa = 0, $$3$lcssa = 0, $$3325 = 0, $$3325$lcssa = 0, $$4$lcssa = 0, $$4$ph = 0, $$4346 = 0, $$5$lcssa = 0, $$5334 = 0, $$5334$lcssa = 0, $$6$be = 0;
 var $$6$lcssa = 0, $$6$ph = 0, $$6385 = 0, $$7$lcssa = 0, $$7359 = 0, $$7359$lcssa = 0, $$8$lcssa = 0, $$8372 = 0, $$8372$lcssa = 0, $$9 = 0, $$lcssa1438 = 0, $$lcssa1439 = 0, $$lcssa1617 = 0, $$lcssa1631 = 0, $$lcssa1633 = 0, $$lcssa1635 = 0, $$lcssa1636 = 0, $$lcssa1637 = 0, $$lcssa1638 = 0, $$lcssa1639 = 0;
 var $$lcssa1640 = 0, $$v = 0, $$v419 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $b$0 = 0, $b$0$lcssa = 0, $b$0$lcssa1460 = 0, $b$0$lcssa1475 = 0, $b$0$lcssa1476 = 0, $b$0$phi = 0, $b$1$lcssa = 0, $b$1$lcssa$lcssa = 0, $b$1$lcssa$lcssa1644 = 0, $b$10 = 0, $b$11 = 0, $b$1407 = 0, $b$1407$lcssa = 0, $b$2$lcssa = 0, $b$2$lcssa$lcssa = 0, $b$2395 = 0, $b$2395$lcssa = 0, $b$3$lcssa = 0, $b$3$lcssa$lcssa = 0, $b$3$lcssa$lcssa1607 = 0;
 var $b$3321 = 0, $b$3321$lcssa = 0, $b$4$lcssa = 0, $b$4$lcssa$lcssa1614 = 0, $b$4$lcssa1615 = 0, $b$4$ph = 0, $b$4342 = 0, $b$5$lcssa = 0, $b$5330 = 0, $b$5330$lcssa = 0, $b$6$be = 0, $b$6$lcssa = 0, $b$6$lcssa$lcssa1627 = 0, $b$6$lcssa$lcssa1628 = 0, $b$6$lcssa1629 = 0, $b$6$ph = 0, $b$6381 = 0, $b$7$lcssa = 0, $b$7355 = 0, $b$7355$lcssa = 0;
 var $b$8$lcssa = 0, $b$8368 = 0, $b$8368$lcssa = 0, $b$9 = 0, $bd = 0, $bd2 = 0, $bl = 0, $bl1 = 0, $i$0 = 0, $j$0 = 0, $k$0 = 0, $k$0$lcssa = 0, $k$0$lcssa1484 = 0, $k$0$lcssa1499 = 0, $k$0$lcssa1500 = 0, $k$0$phi = 0, $k$1$lcssa = 0, $k$1$lcssa$lcssa = 0, $k$1$lcssa$lcssa1643 = 0, $k$10 = 0;
 var $k$11 = 0, $k$1408 = 0, $k$1408$lcssa = 0, $k$2$lcssa = 0, $k$2$lcssa$lcssa = 0, $k$2396 = 0, $k$2396$lcssa = 0, $k$3$lcssa = 0, $k$3$lcssa$lcssa = 0, $k$3$lcssa$lcssa1606 = 0, $k$3322 = 0, $k$3322$lcssa = 0, $k$4$lcssa = 0, $k$4$lcssa$lcssa1612 = 0, $k$4$lcssa1613 = 0, $k$4$ph = 0, $k$4343 = 0, $k$5$lcssa = 0, $k$5331 = 0, $k$5331$lcssa = 0;
 var $k$6$be = 0, $k$6$lcssa = 0, $k$6$lcssa$lcssa1624 = 0, $k$6$lcssa$lcssa1625 = 0, $k$6$lcssa1626 = 0, $k$6$ph = 0, $k$6382 = 0, $k$7$lcssa = 0, $k$7356 = 0, $k$7356$lcssa = 0, $k$8$lcssa = 0, $k$8369 = 0, $k$8369$lcssa = 0, $k$9 = 0, $m$0 = 0, $m$0$ph = 0, $m$0$phi = 0, $m$2 = 0, $m$3 = 0, $n$0 = 0;
 var $n$0$ = 0, $n$0$lcssa = 0, $n$0$lcssa1532 = 0, $n$0$lcssa1547 = 0, $n$0$lcssa1548 = 0, $n$1$lcssa = 0, $n$1$lcssa$lcssa = 0, $n$1$lcssa$lcssa1641 = 0, $n$10 = 0, $n$11 = 0, $n$1410 = 0, $n$1410$lcssa = 0, $n$2$lcssa = 0, $n$2$lcssa$lcssa = 0, $n$2398 = 0, $n$2398$lcssa = 0, $n$3$lcssa = 0, $n$3$lcssa$lcssa = 0, $n$3$lcssa$lcssa1604 = 0, $n$3324 = 0;
 var $n$3324$lcssa = 0, $n$4$lcssa = 0, $n$4$lcssa$lcssa1608 = 0, $n$4$lcssa1609 = 0, $n$4$ph = 0, $n$4345 = 0, $n$5$lcssa = 0, $n$5333 = 0, $n$5333$lcssa = 0, $n$6$be = 0, $n$6$lcssa = 0, $n$6$lcssa$lcssa1618 = 0, $n$6$lcssa$lcssa1619 = 0, $n$6$lcssa1620 = 0, $n$6$ph = 0, $n$6384 = 0, $n$7$lcssa = 0, $n$7358 = 0, $n$7358$lcssa = 0, $n$8$lcssa = 0;
 var $n$8$lcssa$lcssa = 0, $n$8371 = 0, $n$8371$lcssa = 0, $n$9 = 0, $or$cond = 0, $p$0 = 0, $p$0$lcssa = 0, $p$0$lcssa1508 = 0, $p$0$lcssa1523 = 0, $p$0$lcssa1524 = 0, $p$1$lcssa = 0, $p$1$lcssa$lcssa = 0, $p$1$lcssa$lcssa1642 = 0, $p$10 = 0, $p$11 = 0, $p$1409 = 0, $p$1409$lcssa = 0, $p$2$lcssa = 0, $p$2$lcssa$lcssa = 0, $p$2397 = 0;
 var $p$2397$lcssa = 0, $p$3$lcssa = 0, $p$3$lcssa$lcssa = 0, $p$3$lcssa$lcssa1605 = 0, $p$3323 = 0, $p$3323$lcssa = 0, $p$4$lcssa = 0, $p$4$lcssa$lcssa1610 = 0, $p$4$lcssa1611 = 0, $p$4$ph = 0, $p$4344 = 0, $p$5$lcssa = 0, $p$5332 = 0, $p$5332$lcssa = 0, $p$6$be = 0, $p$6$lcssa = 0, $p$6$lcssa$lcssa1621 = 0, $p$6$lcssa$lcssa1622 = 0, $p$6$lcssa1623 = 0, $p$6$ph = 0;
 var $p$6383 = 0, $p$7$lcssa = 0, $p$7357 = 0, $p$7357$lcssa = 0, $p$8$lcssa = 0, $p$8$lcssa$lcssa = 0, $p$8370 = 0, $p$8370$lcssa = 0, $p$9 = 0, $q$0 = 0, $q$0$lcssa = 0, $q$0$lcssa1556 = 0, $q$0$lcssa1557 = 0, $q$0$lcssa1558 = 0, $q$0$lcssa1559 = 0, $q$0$lcssa1560 = 0, $q$0$lcssa1562 = 0, $q$0$lcssa1563 = 0, $q$0$lcssa1564 = 0, $q$0$lcssa1565 = 0;
 var $q$0$lcssa1567 = 0, $q$0$lcssa1568 = 0, $q$0$lcssa1571 = 0, $q$0$lcssa1573 = 0, $q$0$lcssa1574 = 0, $q$0$lcssa1575 = 0, $q$0$lcssa1576 = 0, $q$0$lcssa1577 = 0, $q$0$phi = 0, $q$01578 = 0, $q$01579 = 0, $q$13 = 0, $q$2 = 0, $q$2$lcssa = 0, $q$3 = 0, $q$4 = 0, $q$5 = 0, $t$1 = 0, $td = 0, $td4 = 0;
 var $tl = 0, $tl3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $bl = sp + 28|0;
 $bd = sp + 24|0;
 $tl = sp + 20|0;
 $td = sp + 16|0;
 $bl1 = sp + 12|0;
 $bd2 = sp + 8|0;
 $tl3 = sp + 4|0;
 $td4 = sp;
 $0 = HEAP32[$z>>2]|0;
 $1 = ((($z)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($s)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($s)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($s)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($s)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)<($10>>>0);
 if ($11) {
  $12 = $10;
  $13 = $8;
  $14 = $13 ^ -1;
  $15 = (($12) + ($14))|0;
  $m$0$ph = $15;
 } else {
  $16 = ((($s)) + 44|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17;
  $19 = $8;
  $20 = (($18) - ($19))|0;
  $m$0$ph = $20;
 }
 $21 = ((($s)) + 44|0);
 $22 = ((($s)) + 40|0);
 $23 = ((($s)) + 40|0);
 $24 = ((($s)) + 4|0);
 $25 = ((($s)) + 24|0);
 $26 = ((($z)) + 8|0);
 $27 = ((($s)) + 4|0);
 $28 = ((($s)) + 24|0);
 $29 = ((($s)) + 44|0);
 $30 = ((($s)) + 24|0);
 $31 = ((($s)) + 4|0);
 $32 = ((($s)) + 4|0);
 $33 = ((($s)) + 24|0);
 $34 = ((($s)) + 4|0);
 $35 = ((($s)) + 8|0);
 $36 = ((($s)) + 20|0);
 $37 = ((($s)) + 12|0);
 $38 = ((($s)) + 36|0);
 $39 = ((($z)) + 36|0);
 $40 = ((($z)) + 40|0);
 $41 = ((($s)) + 16|0);
 $42 = ((($s)) + 20|0);
 $43 = ((($s)) + 12|0);
 $44 = ((($s)) + 12|0);
 $45 = ((($s)) + 12|0);
 $46 = ((($s)) + 8|0);
 $47 = ((($s)) + 4|0);
 $48 = ((($s)) + 16|0);
 $49 = ((($s)) + 12|0);
 $50 = ((($s)) + 20|0);
 $51 = ((($s)) + 36|0);
 $52 = ((($s)) + 12|0);
 $53 = ((($s)) + 12|0);
 $54 = ((($s)) + 4|0);
 $55 = ((($z)) + 32|0);
 $56 = ((($z)) + 40|0);
 $57 = ((($s)) + 12|0);
 $58 = ((($s)) + 8|0);
 $$02 = $r;$b$0 = $4;$k$0 = $6;$m$0 = $m$0$ph;$n$0 = $2;$p$0 = $0;$q$0 = $8;
 L5: while(1) {
  $59 = HEAP32[$s>>2]|0;
  switch ($59|0) {
  case 7:  {
   $$10 = $$02;$b$10 = $b$0;$k$10 = $k$0;$n$10 = $n$0;$p$10 = $p$0;$q$4 = $q$0;
   label = 99;
   break L5;
   break;
  }
  case 8:  {
   $b$11 = $b$0;$k$11 = $k$0;$n$11 = $n$0;$p$11 = $p$0;$q$5 = $q$0;
   break L5;
   break;
  }
  case 9:  {
   $b$0$lcssa1460 = $b$0;$k$0$lcssa1484 = $k$0;$n$0$lcssa1532 = $n$0;$p$0$lcssa1508 = $p$0;$q$0$lcssa1556 = $q$0;
   label = 103;
   break L5;
   break;
  }
  case 0:  {
   $62 = ($k$0>>>0)<(3);
   if ($62) {
    $$1411 = $$02;$b$1407 = $b$0;$k$1408 = $k$0;$n$1410 = $n$0;$p$1409 = $p$0;
    while(1) {
     $63 = ($n$1410|0)==(0);
     if ($63) {
      $$1411$lcssa = $$1411;$b$1407$lcssa = $b$1407;$k$1408$lcssa = $k$1408;$n$1410$lcssa = $n$1410;$p$1409$lcssa = $p$1409;$q$0$lcssa1575 = $q$0;
      label = 11;
      break L5;
     }
     $64 = (($n$1410) + -1)|0;
     $65 = ((($p$1409)) + 1|0);
     $66 = HEAP8[$p$1409>>0]|0;
     $67 = $66&255;
     $68 = $67 << $k$1408;
     $69 = $68 | $b$1407;
     $70 = (($k$1408) + 8)|0;
     $71 = ($70>>>0)<(3);
     if ($71) {
      $$1411 = 0;$b$1407 = $69;$k$1408 = $70;$n$1410 = $64;$p$1409 = $65;
     } else {
      $$1$lcssa = 0;$b$1$lcssa = $69;$k$1$lcssa = $70;$n$1$lcssa = $64;$p$1$lcssa = $65;
      break;
     }
    }
   } else {
    $$1$lcssa = $$02;$b$1$lcssa = $b$0;$k$1$lcssa = $k$0;$n$1$lcssa = $n$0;$p$1$lcssa = $p$0;
   }
   $80 = $b$1$lcssa & 1;
   HEAP32[$30>>2] = $80;
   $81 = $b$1$lcssa >>> 1;
   $82 = $81 & 3;
   switch ($82|0) {
   case 3:  {
    $b$1$lcssa$lcssa = $b$1$lcssa;$k$1$lcssa$lcssa = $k$1$lcssa;$n$1$lcssa$lcssa = $n$1$lcssa;$p$1$lcssa$lcssa = $p$1$lcssa;$q$0$lcssa1576 = $q$0;
    label = 18;
    break L5;
    break;
   }
   case 0:  {
    $83 = $b$1$lcssa >>> 3;
    $84 = (($k$1$lcssa) + -3)|0;
    $85 = $84 & 7;
    $86 = $83 >>> $85;
    $87 = (($84) - ($85))|0;
    HEAP32[$s>>2] = 1;
    $q$0$phi = $q$0;$m$0$phi = $m$0;$$02 = $$1$lcssa;$b$0 = $86;$k$0 = $87;$n$0 = $n$1$lcssa;$p$0 = $p$1$lcssa;$q$0 = $q$0$phi;$m$0 = $m$0$phi;
    continue L5;
    break;
   }
   case 1:  {
    _inflate_trees_fixed($bl,$bd,$tl,$td);
    $88 = HEAP32[$bl>>2]|0;
    $89 = HEAP32[$bd>>2]|0;
    $90 = HEAP32[$tl>>2]|0;
    $91 = HEAP32[$td>>2]|0;
    $92 = (_inflate_codes_new($88,$89,$90,$91,$z)|0);
    HEAP32[$31>>2] = $92;
    $93 = ($92|0)==(0|0);
    if ($93) {
     $b$1$lcssa$lcssa1644 = $b$1$lcssa;$k$1$lcssa$lcssa1643 = $k$1$lcssa;$n$1$lcssa$lcssa1641 = $n$1$lcssa;$p$1$lcssa$lcssa1642 = $p$1$lcssa;$q$0$lcssa1577 = $q$0;
     label = 15;
     break L5;
    }
    $102 = $b$1$lcssa >>> 3;
    $103 = (($k$1$lcssa) + -3)|0;
    HEAP32[$s>>2] = 6;
    $q$0$phi = $q$0;$m$0$phi = $m$0;$$02 = $$1$lcssa;$b$0 = $102;$k$0 = $103;$n$0 = $n$1$lcssa;$p$0 = $p$1$lcssa;$q$0 = $q$0$phi;$m$0 = $m$0$phi;
    continue L5;
    break;
   }
   case 2:  {
    $104 = $b$1$lcssa >>> 3;
    $105 = (($k$1$lcssa) + -3)|0;
    HEAP32[$s>>2] = 3;
    $q$0$phi = $q$0;$m$0$phi = $m$0;$$02 = $$1$lcssa;$b$0 = $104;$k$0 = $105;$n$0 = $n$1$lcssa;$p$0 = $p$1$lcssa;$q$0 = $q$0$phi;$m$0 = $m$0$phi;
    continue L5;
    break;
   }
   default: {
    $q$0$phi = $q$0;$m$0$phi = $m$0;$$02 = $$1$lcssa;$b$0 = $b$1$lcssa;$k$0 = $k$1$lcssa;$n$0 = $n$1$lcssa;$p$0 = $p$1$lcssa;$q$0 = $q$0$phi;$m$0 = $m$0$phi;
    continue L5;
   }
   }
   break;
  }
  case 1:  {
   $61 = ($k$0>>>0)<(32);
   if ($61) {
    $$2399 = $$02;$b$2395 = $b$0;$k$2396 = $k$0;$n$2398 = $n$0;$p$2397 = $p$0;
    while(1) {
     $117 = ($n$2398|0)==(0);
     if ($117) {
      $$2399$lcssa = $$2399;$b$2395$lcssa = $b$2395;$k$2396$lcssa = $k$2396;$n$2398$lcssa = $n$2398;$p$2397$lcssa = $p$2397;$q$0$lcssa1573 = $q$0;
      label = 21;
      break L5;
     }
     $118 = (($n$2398) + -1)|0;
     $119 = ((($p$2397)) + 1|0);
     $120 = HEAP8[$p$2397>>0]|0;
     $121 = $120&255;
     $122 = $121 << $k$2396;
     $123 = $122 | $b$2395;
     $124 = (($k$2396) + 8)|0;
     $125 = ($124>>>0)<(32);
     if ($125) {
      $$2399 = 0;$b$2395 = $123;$k$2396 = $124;$n$2398 = $118;$p$2397 = $119;
     } else {
      $$2$lcssa = 0;$b$2$lcssa = $123;$k$2$lcssa = $124;$n$2$lcssa = $118;$p$2$lcssa = $119;
      break;
     }
    }
   } else {
    $$2$lcssa = $$02;$b$2$lcssa = $b$0;$k$2$lcssa = $k$0;$n$2$lcssa = $n$0;$p$2$lcssa = $p$0;
   }
   $134 = $b$2$lcssa >>> 16;
   $135 = $134 ^ 65535;
   $136 = $b$2$lcssa & 65535;
   $137 = ($135|0)==($136|0);
   if (!($137)) {
    $b$2$lcssa$lcssa = $b$2$lcssa;$k$2$lcssa$lcssa = $k$2$lcssa;$n$2$lcssa$lcssa = $n$2$lcssa;$p$2$lcssa$lcssa = $p$2$lcssa;$q$0$lcssa1574 = $q$0;
    label = 23;
    break L5;
   }
   HEAP32[$32>>2] = $136;
   $147 = ($136|0)==(0);
   if ($147) {
    $148 = HEAP32[$33>>2]|0;
    $149 = ($148|0)!=(0);
    $150 = $149 ? 7 : 0;
    $151 = $150;
   } else {
    $151 = 2;
   }
   HEAP32[$s>>2] = $151;
   $q$0$phi = $q$0;$m$0$phi = $m$0;$$02 = $$2$lcssa;$b$0 = 0;$k$0 = 0;$n$0 = $n$2$lcssa;$p$0 = $p$2$lcssa;$q$0 = $q$0$phi;$m$0 = $m$0$phi;
   continue L5;
   break;
  }
  case 2:  {
   $152 = ($n$0|0)==(0);
   if ($152) {
    $$02$lcssa1597 = $$02;$b$0$lcssa1475 = $b$0;$k$0$lcssa1499 = $k$0;$n$0$lcssa1547 = $n$0;$p$0$lcssa1523 = $p$0;$q$0$lcssa1571 = $q$0;
    label = 28;
    break L5;
   }
   $161 = ($m$0|0)==(0);
   do {
    if ($161) {
     $162 = HEAP32[$21>>2]|0;
     $163 = ($q$0|0)==($162|0);
     if ($163) {
      $164 = HEAP32[$9>>2]|0;
      $165 = HEAP32[$22>>2]|0;
      $166 = ($164|0)==($165|0);
      if ($166) {
       $q$13 = $q$0;
      } else {
       $167 = ($165>>>0)<($164>>>0);
       $168 = $164;
       $169 = $165;
       $170 = (($168) + -1)|0;
       $171 = $162;
       $$v419 = $167 ? $170 : $171;
       $172 = (($$v419) - ($169))|0;
       $173 = ($$v419|0)==($169|0);
       if ($173) {
        $q$13 = $165;
       } else {
        $m$3 = $172;$q$3 = $165;
        break;
       }
      }
     } else {
      $q$13 = $q$0;
     }
     HEAP32[$7>>2] = $q$13;
     $174 = (_inflate_flush($s,$z,$$02)|0);
     $175 = HEAP32[$7>>2]|0;
     $176 = HEAP32[$9>>2]|0;
     $177 = ($175>>>0)<($176>>>0);
     if ($177) {
      $178 = $176;
      $179 = $175;
      $180 = $179 ^ -1;
      $181 = (($178) + ($180))|0;
      $555 = $181;
     } else {
      $182 = HEAP32[$21>>2]|0;
      $183 = $182;
      $184 = $175;
      $185 = (($183) - ($184))|0;
      $555 = $185;
     }
     $186 = HEAP32[$21>>2]|0;
     $187 = ($175|0)==($186|0);
     if ($187) {
      $188 = HEAP32[$9>>2]|0;
      $189 = HEAP32[$23>>2]|0;
      $190 = ($188|0)==($189|0);
      if ($190) {
       $m$2 = $555;$q$2 = $175;
      } else {
       $191 = ($189>>>0)<($188>>>0);
       $192 = $188;
       $193 = $189;
       $194 = (($192) + -1)|0;
       $195 = $186;
       $$v = $191 ? $194 : $195;
       $196 = (($$v) - ($193))|0;
       $m$2 = $196;$q$2 = $189;
      }
     } else {
      $m$2 = $555;$q$2 = $175;
     }
     $197 = ($m$2|0)==(0);
     if ($197) {
      $$lcssa1640 = $174;$b$0$lcssa1476 = $b$0;$k$0$lcssa1500 = $k$0;$n$0$lcssa1548 = $n$0;$p$0$lcssa1524 = $p$0;$q$2$lcssa = $q$2;
      label = 40;
      break L5;
     } else {
      $m$3 = $m$2;$q$3 = $q$2;
     }
    } else {
     $m$3 = $m$0;$q$3 = $q$0;
    }
   } while(0);
   $206 = HEAP32[$24>>2]|0;
   $207 = ($206>>>0)>($n$0>>>0);
   $n$0$ = $207 ? $n$0 : $206;
   $208 = ($n$0$>>>0)>($m$3>>>0);
   $t$1 = $208 ? $m$3 : $n$0$;
   _memcpy(($q$3|0),($p$0|0),($t$1|0))|0;
   $209 = (($p$0) + ($t$1)|0);
   $210 = (($n$0) - ($t$1))|0;
   $211 = (($q$3) + ($t$1)|0);
   $212 = (($m$3) - ($t$1))|0;
   $213 = HEAP32[$24>>2]|0;
   $214 = (($213) - ($t$1))|0;
   HEAP32[$24>>2] = $214;
   $215 = ($213|0)==($t$1|0);
   if (!($215)) {
    $k$0$phi = $k$0;$b$0$phi = $b$0;$$02 = 0;$m$0 = $212;$n$0 = $210;$p$0 = $209;$q$0 = $211;$k$0 = $k$0$phi;$b$0 = $b$0$phi;
    continue L5;
   }
   $216 = HEAP32[$25>>2]|0;
   $217 = ($216|0)!=(0);
   $218 = $217 ? 7 : 0;
   HEAP32[$s>>2] = $218;
   $k$0$phi = $k$0;$b$0$phi = $b$0;$$02 = 0;$m$0 = $212;$n$0 = $210;$p$0 = $209;$q$0 = $211;$k$0 = $k$0$phi;$b$0 = $b$0$phi;
   continue L5;
   break;
  }
  case 3:  {
   $60 = ($k$0>>>0)<(14);
   if ($60) {
    $$3325 = $$02;$b$3321 = $b$0;$k$3322 = $k$0;$n$3324 = $n$0;$p$3323 = $p$0;
    while(1) {
     $219 = ($n$3324|0)==(0);
     if ($219) {
      $$3325$lcssa = $$3325;$b$3321$lcssa = $b$3321;$k$3322$lcssa = $k$3322;$n$3324$lcssa = $n$3324;$p$3323$lcssa = $p$3323;$q$0$lcssa1557 = $q$0;
      label = 45;
      break L5;
     }
     $220 = (($n$3324) + -1)|0;
     $221 = ((($p$3323)) + 1|0);
     $222 = HEAP8[$p$3323>>0]|0;
     $223 = $222&255;
     $224 = $223 << $k$3322;
     $225 = $224 | $b$3321;
     $226 = (($k$3322) + 8)|0;
     $227 = ($226>>>0)<(14);
     if ($227) {
      $$3325 = 0;$b$3321 = $225;$k$3322 = $226;$n$3324 = $220;$p$3323 = $221;
     } else {
      $$3$lcssa = 0;$b$3$lcssa = $225;$k$3$lcssa = $226;$n$3$lcssa = $220;$p$3$lcssa = $221;
      break;
     }
    }
   } else {
    $$3$lcssa = $$02;$b$3$lcssa = $b$0;$k$3$lcssa = $k$0;$n$3$lcssa = $n$0;$p$3$lcssa = $p$0;
   }
   $236 = $b$3$lcssa & 16383;
   HEAP32[$54>>2] = $236;
   $237 = $b$3$lcssa & 31;
   $238 = ($237>>>0)>(29);
   if ($238) {
    $b$3$lcssa$lcssa = $b$3$lcssa;$k$3$lcssa$lcssa = $k$3$lcssa;$n$3$lcssa$lcssa = $n$3$lcssa;$p$3$lcssa$lcssa = $p$3$lcssa;$q$0$lcssa1558 = $q$0;
    label = 48;
    break L5;
   }
   $239 = $b$3$lcssa >>> 5;
   $240 = $239 & 31;
   $241 = ($240>>>0)>(29);
   if ($241) {
    $b$3$lcssa$lcssa = $b$3$lcssa;$k$3$lcssa$lcssa = $k$3$lcssa;$n$3$lcssa$lcssa = $n$3$lcssa;$p$3$lcssa$lcssa = $p$3$lcssa;$q$0$lcssa1558 = $q$0;
    label = 48;
    break L5;
   }
   $251 = (($237) + 258)|0;
   $252 = (($251) + ($240))|0;
   $253 = HEAP32[$55>>2]|0;
   $254 = HEAP32[$56>>2]|0;
   $255 = (FUNCTION_TABLE_iiii[$253 & 127]($254,$252,4)|0);
   HEAP32[$57>>2] = $255;
   $256 = ($255|0)==(0|0);
   if ($256) {
    $b$3$lcssa$lcssa1607 = $b$3$lcssa;$k$3$lcssa$lcssa1606 = $k$3$lcssa;$n$3$lcssa$lcssa1604 = $n$3$lcssa;$p$3$lcssa$lcssa1605 = $p$3$lcssa;$q$0$lcssa1559 = $q$0;
    label = 50;
    break L5;
   }
   $265 = $b$3$lcssa >>> 14;
   $266 = (($k$3$lcssa) + -14)|0;
   HEAP32[$58>>2] = 0;
   HEAP32[$s>>2] = 4;
   $$4$ph = $$3$lcssa;$b$4$ph = $265;$k$4$ph = $266;$n$4$ph = $n$3$lcssa;$p$4$ph = $p$3$lcssa;
   label = 52;
   break;
  }
  case 4:  {
   $$4$ph = $$02;$b$4$ph = $b$0;$k$4$ph = $k$0;$n$4$ph = $n$0;$p$4$ph = $p$0;
   label = 52;
   break;
  }
  case 5:  {
   $$6$ph = $$02;$b$6$ph = $b$0;$k$6$ph = $k$0;$n$6$ph = $n$0;$p$6$ph = $p$0;
   label = 65;
   break;
  }
  case 6:  {
   $$9 = $$02;$b$9 = $b$0;$k$9 = $k$0;$n$9 = $n$0;$p$9 = $p$0;
   break;
  }
  default: {
   $b$0$lcssa = $b$0;$k$0$lcssa = $k$0;$n$0$lcssa = $n$0;$p$0$lcssa = $p$0;$q$0$lcssa = $q$0;
   label = 104;
   break L5;
  }
  }
  if ((label|0) == 52) {
   label = 0;
   $267 = HEAP32[$46>>2]|0;
   $268 = HEAP32[$47>>2]|0;
   $269 = $268 >>> 10;
   $270 = (($269) + 4)|0;
   $271 = ($267>>>0)<($270>>>0);
   if ($271) {
    $$4346 = $$4$ph;$b$4342 = $b$4$ph;$k$4343 = $k$4$ph;$n$4345 = $n$4$ph;$p$4344 = $p$4$ph;
    while(1) {
     $275 = ($k$4343>>>0)<(3);
     if ($275) {
      $$5334 = $$4346;$b$5330 = $b$4342;$k$5331 = $k$4343;$n$5333 = $n$4345;$p$5332 = $p$4344;
      while(1) {
       $276 = ($n$5333|0)==(0);
       if ($276) {
        $$5334$lcssa = $$5334;$b$5330$lcssa = $b$5330;$k$5331$lcssa = $k$5331;$n$5333$lcssa = $n$5333;$p$5332$lcssa = $p$5332;$q$0$lcssa1560 = $q$0;
        label = 58;
        break L5;
       }
       $277 = (($n$5333) + -1)|0;
       $278 = ((($p$5332)) + 1|0);
       $279 = HEAP8[$p$5332>>0]|0;
       $280 = $279&255;
       $281 = $280 << $k$5331;
       $282 = $281 | $b$5330;
       $283 = (($k$5331) + 8)|0;
       $284 = ($283>>>0)<(3);
       if ($284) {
        $$5334 = 0;$b$5330 = $282;$k$5331 = $283;$n$5333 = $277;$p$5332 = $278;
       } else {
        $$5$lcssa = 0;$b$5$lcssa = $282;$k$5$lcssa = $283;$n$5$lcssa = $277;$p$5$lcssa = $278;
        break;
       }
      }
     } else {
      $$5$lcssa = $$4346;$b$5$lcssa = $b$4342;$k$5$lcssa = $k$4343;$n$5$lcssa = $n$4345;$p$5$lcssa = $p$4344;
     }
     $293 = $b$5$lcssa & 7;
     $294 = HEAP32[$46>>2]|0;
     $295 = (($294) + 1)|0;
     HEAP32[$46>>2] = $295;
     $296 = (6072 + ($294<<2)|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = HEAP32[$53>>2]|0;
     $299 = (($298) + ($297<<2)|0);
     HEAP32[$299>>2] = $293;
     $300 = $b$5$lcssa >>> 3;
     $301 = (($k$5$lcssa) + -3)|0;
     $302 = HEAP32[$46>>2]|0;
     $303 = HEAP32[$47>>2]|0;
     $304 = $303 >>> 10;
     $305 = (($304) + 4)|0;
     $306 = ($302>>>0)<($305>>>0);
     if ($306) {
      $$4346 = $$5$lcssa;$b$4342 = $300;$k$4343 = $301;$n$4345 = $n$5$lcssa;$p$4344 = $p$5$lcssa;
     } else {
      $$4$lcssa = $$5$lcssa;$273 = $302;$b$4$lcssa = $300;$k$4$lcssa = $301;$n$4$lcssa = $n$5$lcssa;$p$4$lcssa = $p$5$lcssa;
      break;
     }
    }
   } else {
    $$4$lcssa = $$4$ph;$273 = $267;$b$4$lcssa = $b$4$ph;$k$4$lcssa = $k$4$ph;$n$4$lcssa = $n$4$ph;$p$4$lcssa = $p$4$ph;
   }
   $272 = ($273>>>0)<(19);
   if ($272) {
    $274 = HEAP32[$52>>2]|0;
    $308 = $273;
    while(1) {
     $307 = (($308) + 1)|0;
     HEAP32[$46>>2] = $307;
     $309 = (6072 + ($308<<2)|0);
     $310 = HEAP32[$309>>2]|0;
     $311 = (($274) + ($310<<2)|0);
     HEAP32[$311>>2] = 0;
     $312 = HEAP32[$46>>2]|0;
     $313 = ($312>>>0)<(19);
     if ($313) {
      $308 = $312;
     } else {
      break;
     }
    }
   }
   HEAP32[$48>>2] = 7;
   $314 = HEAP32[$49>>2]|0;
   $315 = HEAP32[$51>>2]|0;
   $316 = (_inflate_trees_bits($314,$48,$50,$315,$z)|0);
   switch ($316|0) {
   case -3:  {
    $$lcssa1617 = $316;$b$4$lcssa$lcssa1614 = $b$4$lcssa;$k$4$lcssa$lcssa1612 = $k$4$lcssa;$n$4$lcssa$lcssa1608 = $n$4$lcssa;$p$4$lcssa$lcssa1610 = $p$4$lcssa;$q$0$lcssa1562 = $q$0;
    label = 62;
    break L5;
    break;
   }
   case 0:  {
    break;
   }
   default: {
    $329 = $316;$b$4$lcssa1615 = $b$4$lcssa;$k$4$lcssa1613 = $k$4$lcssa;$n$4$lcssa1609 = $n$4$lcssa;$p$4$lcssa1611 = $p$4$lcssa;$q$01579 = $q$0;
    label = 63;
    break L5;
   }
   }
   HEAP32[$46>>2] = 0;
   HEAP32[$s>>2] = 5;
   $$6$ph = $$4$lcssa;$b$6$ph = $b$4$lcssa;$k$6$ph = $k$4$lcssa;$n$6$ph = $n$4$lcssa;$p$6$ph = $p$4$lcssa;
   label = 65;
  }
  if ((label|0) == 65) {
   label = 0;
   $331 = HEAP32[$34>>2]|0;
   $332 = HEAP32[$35>>2]|0;
   $333 = $331 & 31;
   $334 = (($333) + 258)|0;
   $335 = $331 >>> 5;
   $336 = $335 & 31;
   $337 = (($334) + ($336))|0;
   $338 = ($332>>>0)<($337>>>0);
   if ($338) {
    $$6385 = $$6$ph;$b$6381 = $b$6$ph;$k$6382 = $k$6$ph;$n$6384 = $n$6$ph;$p$6383 = $p$6$ph;
    while(1) {
     $339 = HEAP32[$41>>2]|0;
     $340 = ($k$6382>>>0)<($339>>>0);
     if ($340) {
      $$7359 = $$6385;$b$7355 = $b$6381;$k$7356 = $k$6382;$n$7358 = $n$6384;$p$7357 = $p$6383;
      while(1) {
       $341 = ($n$7358|0)==(0);
       if ($341) {
        $$7359$lcssa = $$7359;$b$7355$lcssa = $b$7355;$k$7356$lcssa = $k$7356;$n$7358$lcssa = $n$7358;$p$7357$lcssa = $p$7357;$q$0$lcssa1563 = $q$0;
        label = 69;
        break L5;
       }
       $342 = (($n$7358) + -1)|0;
       $343 = ((($p$7357)) + 1|0);
       $344 = HEAP8[$p$7357>>0]|0;
       $345 = $344&255;
       $346 = $345 << $k$7356;
       $347 = $346 | $b$7355;
       $348 = (($k$7356) + 8)|0;
       $349 = ($348>>>0)<($339>>>0);
       if ($349) {
        $$7359 = 0;$b$7355 = $347;$k$7356 = $348;$n$7358 = $342;$p$7357 = $343;
       } else {
        $$7$lcssa = 0;$b$7$lcssa = $347;$k$7$lcssa = $348;$n$7$lcssa = $342;$p$7$lcssa = $343;
        break;
       }
      }
     } else {
      $$7$lcssa = $$6385;$b$7$lcssa = $b$6381;$k$7$lcssa = $k$6382;$n$7$lcssa = $n$6384;$p$7$lcssa = $p$6383;
     }
     $358 = HEAP32[$42>>2]|0;
     $359 = (6148 + ($339<<2)|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = $360 & $b$7$lcssa;
     $362 = (($358) + ($361<<3)|0);
     $363 = ((($362)) + 1|0);
     $364 = HEAP8[$363>>0]|0;
     $365 = $364&255;
     $366 = (((($358) + ($361<<3)|0)) + 4|0);
     $367 = HEAP32[$366>>2]|0;
     $368 = ($367>>>0)<(16);
     if ($368) {
      $369 = $b$7$lcssa >>> $365;
      $370 = (($k$7$lcssa) - ($365))|0;
      $371 = HEAP32[$35>>2]|0;
      $372 = (($371) + 1)|0;
      HEAP32[$35>>2] = $372;
      $373 = HEAP32[$43>>2]|0;
      $374 = (($373) + ($371<<2)|0);
      HEAP32[$374>>2] = $367;
      $$6$be = $$7$lcssa;$b$6$be = $369;$k$6$be = $370;$n$6$be = $n$7$lcssa;$p$6$be = $p$7$lcssa;
     } else {
      $375 = ($367|0)==(18);
      $376 = (($367) + -14)|0;
      $377 = $375 ? 7 : $376;
      $378 = $375 ? 11 : 3;
      $379 = (($377) + ($365))|0;
      $380 = ($k$7$lcssa>>>0)<($379>>>0);
      if ($380) {
       $$8372 = $$7$lcssa;$b$8368 = $b$7$lcssa;$k$8369 = $k$7$lcssa;$n$8371 = $n$7$lcssa;$p$8370 = $p$7$lcssa;
       while(1) {
        $381 = ($n$8371|0)==(0);
        if ($381) {
         $$8372$lcssa = $$8372;$b$8368$lcssa = $b$8368;$k$8369$lcssa = $k$8369;$n$8371$lcssa = $n$8371;$p$8370$lcssa = $p$8370;$q$0$lcssa1564 = $q$0;
         label = 75;
         break L5;
        }
        $382 = (($n$8371) + -1)|0;
        $383 = ((($p$8370)) + 1|0);
        $384 = HEAP8[$p$8370>>0]|0;
        $385 = $384&255;
        $386 = $385 << $k$8369;
        $387 = $386 | $b$8368;
        $388 = (($k$8369) + 8)|0;
        $389 = ($388>>>0)<($379>>>0);
        if ($389) {
         $$8372 = 0;$b$8368 = $387;$k$8369 = $388;$n$8371 = $382;$p$8370 = $383;
        } else {
         $$8$lcssa = 0;$b$8$lcssa = $387;$k$8$lcssa = $388;$n$8$lcssa = $382;$p$8$lcssa = $383;
         break;
        }
       }
      } else {
       $$8$lcssa = $$7$lcssa;$b$8$lcssa = $b$7$lcssa;$k$8$lcssa = $k$7$lcssa;$n$8$lcssa = $n$7$lcssa;$p$8$lcssa = $p$7$lcssa;
      }
      $398 = $b$8$lcssa >>> $365;
      $399 = (($k$8$lcssa) - ($365))|0;
      $400 = (6148 + ($377<<2)|0);
      $401 = HEAP32[$400>>2]|0;
      $402 = $401 & $398;
      $403 = (($402) + ($378))|0;
      $404 = $398 >>> $377;
      $405 = (($399) - ($377))|0;
      $406 = HEAP32[$35>>2]|0;
      $407 = HEAP32[$34>>2]|0;
      $408 = (($403) + ($406))|0;
      $409 = $407 & 31;
      $410 = (($409) + 258)|0;
      $411 = $407 >>> 5;
      $412 = $411 & 31;
      $413 = (($410) + ($412))|0;
      $414 = ($408>>>0)>($413>>>0);
      if ($414) {
       $$lcssa1438 = $404;$$lcssa1439 = $405;$n$8$lcssa$lcssa = $n$8$lcssa;$p$8$lcssa$lcssa = $p$8$lcssa;$q$0$lcssa1565 = $q$0;
       label = 78;
       break L5;
      }
      $415 = ($367|0)==(16);
      $416 = ($406|0)==(0);
      $or$cond = $415 & $416;
      if ($or$cond) {
       $$lcssa1438 = $404;$$lcssa1439 = $405;$n$8$lcssa$lcssa = $n$8$lcssa;$p$8$lcssa$lcssa = $p$8$lcssa;$q$0$lcssa1565 = $q$0;
       label = 78;
       break L5;
      }
      if ($415) {
       $432 = (($406) + -1)|0;
       $433 = HEAP32[$44>>2]|0;
       $434 = (($433) + ($432<<2)|0);
       $435 = HEAP32[$434>>2]|0;
       $440 = $435;
      } else {
       $440 = 0;
      }
      $436 = HEAP32[$45>>2]|0;
      $437 = (($378) + ($406))|0;
      $i$0 = $406;$j$0 = $403;
      while(1) {
       $438 = (($i$0) + 1)|0;
       $439 = (($436) + ($i$0<<2)|0);
       HEAP32[$439>>2] = $440;
       $441 = (($j$0) + -1)|0;
       $442 = ($441|0)==(0);
       if ($442) {
        break;
       } else {
        $i$0 = $438;$j$0 = $441;
       }
      }
      $443 = (($437) + ($402))|0;
      HEAP32[$35>>2] = $443;
      $$6$be = $$8$lcssa;$b$6$be = $404;$k$6$be = $405;$n$6$be = $n$8$lcssa;$p$6$be = $p$8$lcssa;
     }
     $444 = HEAP32[$34>>2]|0;
     $445 = HEAP32[$35>>2]|0;
     $446 = $444 & 31;
     $447 = (($446) + 258)|0;
     $448 = $444 >>> 5;
     $449 = $448 & 31;
     $450 = (($447) + ($449))|0;
     $451 = ($445>>>0)<($450>>>0);
     if ($451) {
      $$6385 = $$6$be;$b$6381 = $b$6$be;$k$6382 = $k$6$be;$n$6384 = $n$6$be;$p$6383 = $p$6$be;
     } else {
      $$6$lcssa = $$6$be;$b$6$lcssa = $b$6$be;$k$6$lcssa = $k$6$be;$n$6$lcssa = $n$6$be;$p$6$lcssa = $p$6$be;
      break;
     }
    }
   } else {
    $$6$lcssa = $$6$ph;$b$6$lcssa = $b$6$ph;$k$6$lcssa = $k$6$ph;$n$6$lcssa = $n$6$ph;$p$6$lcssa = $p$6$ph;
   }
   HEAP32[$36>>2] = 0;
   HEAP32[$bl1>>2] = 9;
   HEAP32[$bd2>>2] = 6;
   $452 = HEAP32[$34>>2]|0;
   $453 = $452 & 31;
   $454 = (($453) + 257)|0;
   $455 = $452 >>> 5;
   $456 = $455 & 31;
   $457 = (($456) + 1)|0;
   $458 = HEAP32[$37>>2]|0;
   $459 = HEAP32[$38>>2]|0;
   $460 = (_inflate_trees_dynamic($454,$457,$458,$bl1,$bd2,$tl3,$td4,$459,$z)|0);
   switch ($460|0) {
   case -3:  {
    $$lcssa1631 = $460;$b$6$lcssa$lcssa1627 = $b$6$lcssa;$k$6$lcssa$lcssa1624 = $k$6$lcssa;$n$6$lcssa$lcssa1618 = $n$6$lcssa;$p$6$lcssa$lcssa1621 = $p$6$lcssa;$q$0$lcssa1567 = $q$0;
    label = 86;
    break L5;
    break;
   }
   case 0:  {
    break;
   }
   default: {
    $473 = $460;$b$6$lcssa1629 = $b$6$lcssa;$k$6$lcssa1626 = $k$6$lcssa;$n$6$lcssa1620 = $n$6$lcssa;$p$6$lcssa1623 = $p$6$lcssa;$q$01578 = $q$0;
    label = 87;
    break L5;
   }
   }
   $475 = HEAP32[$bl1>>2]|0;
   $476 = HEAP32[$bd2>>2]|0;
   $477 = HEAP32[$tl3>>2]|0;
   $478 = HEAP32[$td4>>2]|0;
   $479 = (_inflate_codes_new($475,$476,$477,$478,$z)|0);
   $480 = ($479|0)==(0|0);
   if ($480) {
    $b$6$lcssa$lcssa1628 = $b$6$lcssa;$k$6$lcssa$lcssa1625 = $k$6$lcssa;$n$6$lcssa$lcssa1619 = $n$6$lcssa;$p$6$lcssa$lcssa1622 = $p$6$lcssa;$q$0$lcssa1568 = $q$0;
    label = 89;
    break;
   }
   HEAP32[$34>>2] = $479;
   $489 = HEAP32[$39>>2]|0;
   $490 = HEAP32[$40>>2]|0;
   $491 = HEAP32[$37>>2]|0;
   FUNCTION_TABLE_vii[$489 & 31]($490,$491);
   HEAP32[$s>>2] = 6;
   $$9 = $$6$lcssa;$b$9 = $b$6$lcssa;$k$9 = $k$6$lcssa;$n$9 = $n$6$lcssa;$p$9 = $p$6$lcssa;
  }
  HEAP32[$3>>2] = $b$9;
  HEAP32[$5>>2] = $k$9;
  HEAP32[$1>>2] = $n$9;
  $492 = HEAP32[$z>>2]|0;
  $493 = $p$9;
  $494 = $492;
  $495 = (($493) - ($494))|0;
  $496 = HEAP32[$26>>2]|0;
  $497 = (($495) + ($496))|0;
  HEAP32[$26>>2] = $497;
  HEAP32[$z>>2] = $p$9;
  HEAP32[$7>>2] = $q$0;
  $498 = (_inflate_codes($s,$z,$$9)|0);
  $499 = ($498|0)==(1);
  if (!($499)) {
   $$lcssa1633 = $498;
   label = 92;
   break;
  }
  $501 = HEAP32[$27>>2]|0;
  _inflate_codes_free($501,$z);
  $502 = HEAP32[$z>>2]|0;
  $503 = HEAP32[$1>>2]|0;
  $504 = HEAP32[$3>>2]|0;
  $505 = HEAP32[$5>>2]|0;
  $506 = HEAP32[$7>>2]|0;
  $507 = HEAP32[$9>>2]|0;
  $508 = ($506>>>0)<($507>>>0);
  if ($508) {
   $509 = $507;
   $510 = $506;
   $511 = $510 ^ -1;
   $512 = (($509) + ($511))|0;
   $556 = $512;
  } else {
   $513 = HEAP32[$29>>2]|0;
   $514 = $513;
   $515 = $506;
   $516 = (($514) - ($515))|0;
   $556 = $516;
  }
  $517 = HEAP32[$28>>2]|0;
  $518 = ($517|0)==(0);
  if (!($518)) {
   $$lcssa1635 = $502;$$lcssa1636 = $503;$$lcssa1637 = $504;$$lcssa1638 = $505;$$lcssa1639 = $506;
   label = 98;
   break;
  }
  HEAP32[$s>>2] = 0;
  $$02 = 0;$b$0 = $504;$k$0 = $505;$m$0 = $556;$n$0 = $503;$p$0 = $502;$q$0 = $506;
 }
 switch (label|0) {
  case 11: {
   HEAP32[$3>>2] = $b$1407$lcssa;
   HEAP32[$5>>2] = $k$1408$lcssa;
   HEAP32[$1>>2] = $n$1410$lcssa;
   $72 = HEAP32[$z>>2]|0;
   $73 = $p$1409$lcssa;
   $74 = $72;
   $75 = (($73) - ($74))|0;
   $76 = ((($z)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($75) + ($77))|0;
   HEAP32[$76>>2] = $78;
   HEAP32[$z>>2] = $p$1409$lcssa;
   HEAP32[$7>>2] = $q$0$lcssa1575;
   $79 = (_inflate_flush($s,$z,$$1411$lcssa)|0);
   $$0 = $79;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 15: {
   HEAP32[$3>>2] = $b$1$lcssa$lcssa1644;
   HEAP32[$5>>2] = $k$1$lcssa$lcssa1643;
   HEAP32[$1>>2] = $n$1$lcssa$lcssa1641;
   $94 = HEAP32[$z>>2]|0;
   $95 = $p$1$lcssa$lcssa1642;
   $96 = $94;
   $97 = (($95) - ($96))|0;
   $98 = ((($z)) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($97) + ($99))|0;
   HEAP32[$98>>2] = $100;
   HEAP32[$z>>2] = $p$1$lcssa$lcssa1642;
   HEAP32[$7>>2] = $q$0$lcssa1577;
   $101 = (_inflate_flush($s,$z,-4)|0);
   $$0 = $101;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 18: {
   $106 = $b$1$lcssa$lcssa >>> 3;
   $107 = (($k$1$lcssa$lcssa) + -3)|0;
   HEAP32[$s>>2] = 9;
   $108 = ((($z)) + 24|0);
   HEAP32[$108>>2] = 26941;
   HEAP32[$3>>2] = $106;
   HEAP32[$5>>2] = $107;
   HEAP32[$1>>2] = $n$1$lcssa$lcssa;
   $109 = HEAP32[$z>>2]|0;
   $110 = $p$1$lcssa$lcssa;
   $111 = $109;
   $112 = (($110) - ($111))|0;
   $113 = ((($z)) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($112) + ($114))|0;
   HEAP32[$113>>2] = $115;
   HEAP32[$z>>2] = $p$1$lcssa$lcssa;
   HEAP32[$7>>2] = $q$0$lcssa1576;
   $116 = (_inflate_flush($s,$z,-3)|0);
   $$0 = $116;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 21: {
   HEAP32[$3>>2] = $b$2395$lcssa;
   HEAP32[$5>>2] = $k$2396$lcssa;
   HEAP32[$1>>2] = $n$2398$lcssa;
   $126 = HEAP32[$z>>2]|0;
   $127 = $p$2397$lcssa;
   $128 = $126;
   $129 = (($127) - ($128))|0;
   $130 = ((($z)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + ($131))|0;
   HEAP32[$130>>2] = $132;
   HEAP32[$z>>2] = $p$2397$lcssa;
   HEAP32[$7>>2] = $q$0$lcssa1573;
   $133 = (_inflate_flush($s,$z,$$2399$lcssa)|0);
   $$0 = $133;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 23: {
   HEAP32[$s>>2] = 9;
   $138 = ((($z)) + 24|0);
   HEAP32[$138>>2] = 26960;
   HEAP32[$3>>2] = $b$2$lcssa$lcssa;
   HEAP32[$5>>2] = $k$2$lcssa$lcssa;
   HEAP32[$1>>2] = $n$2$lcssa$lcssa;
   $139 = HEAP32[$z>>2]|0;
   $140 = $p$2$lcssa$lcssa;
   $141 = $139;
   $142 = (($140) - ($141))|0;
   $143 = ((($z)) + 8|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (($142) + ($144))|0;
   HEAP32[$143>>2] = $145;
   HEAP32[$z>>2] = $p$2$lcssa$lcssa;
   HEAP32[$7>>2] = $q$0$lcssa1574;
   $146 = (_inflate_flush($s,$z,-3)|0);
   $$0 = $146;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 28: {
   HEAP32[$3>>2] = $b$0$lcssa1475;
   HEAP32[$5>>2] = $k$0$lcssa1499;
   HEAP32[$1>>2] = $n$0$lcssa1547;
   $153 = HEAP32[$z>>2]|0;
   $154 = $p$0$lcssa1523;
   $155 = $153;
   $156 = (($154) - ($155))|0;
   $157 = ((($z)) + 8|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = (($156) + ($158))|0;
   HEAP32[$157>>2] = $159;
   HEAP32[$z>>2] = $p$0$lcssa1523;
   HEAP32[$7>>2] = $q$0$lcssa1571;
   $160 = (_inflate_flush($s,$z,$$02$lcssa1597)|0);
   $$0 = $160;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 40: {
   HEAP32[$3>>2] = $b$0$lcssa1476;
   HEAP32[$5>>2] = $k$0$lcssa1500;
   HEAP32[$1>>2] = $n$0$lcssa1548;
   $198 = HEAP32[$z>>2]|0;
   $199 = $p$0$lcssa1524;
   $200 = $198;
   $201 = (($199) - ($200))|0;
   $202 = ((($z)) + 8|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($201) + ($203))|0;
   HEAP32[$202>>2] = $204;
   HEAP32[$z>>2] = $p$0$lcssa1524;
   HEAP32[$7>>2] = $q$2$lcssa;
   $205 = (_inflate_flush($s,$z,$$lcssa1640)|0);
   $$0 = $205;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 45: {
   HEAP32[$3>>2] = $b$3321$lcssa;
   HEAP32[$5>>2] = $k$3322$lcssa;
   HEAP32[$1>>2] = $n$3324$lcssa;
   $228 = HEAP32[$z>>2]|0;
   $229 = $p$3323$lcssa;
   $230 = $228;
   $231 = (($229) - ($230))|0;
   $232 = ((($z)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = (($231) + ($233))|0;
   HEAP32[$232>>2] = $234;
   HEAP32[$z>>2] = $p$3323$lcssa;
   HEAP32[$7>>2] = $q$0$lcssa1557;
   $235 = (_inflate_flush($s,$z,$$3325$lcssa)|0);
   $$0 = $235;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 48: {
   HEAP32[$s>>2] = 9;
   $242 = ((($z)) + 24|0);
   HEAP32[$242>>2] = 26989;
   HEAP32[$3>>2] = $b$3$lcssa$lcssa;
   HEAP32[$5>>2] = $k$3$lcssa$lcssa;
   HEAP32[$1>>2] = $n$3$lcssa$lcssa;
   $243 = HEAP32[$z>>2]|0;
   $244 = $p$3$lcssa$lcssa;
   $245 = $243;
   $246 = (($244) - ($245))|0;
   $247 = ((($z)) + 8|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = (($246) + ($248))|0;
   HEAP32[$247>>2] = $249;
   HEAP32[$z>>2] = $p$3$lcssa$lcssa;
   HEAP32[$7>>2] = $q$0$lcssa1558;
   $250 = (_inflate_flush($s,$z,-3)|0);
   $$0 = $250;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 50: {
   HEAP32[$3>>2] = $b$3$lcssa$lcssa1607;
   HEAP32[$5>>2] = $k$3$lcssa$lcssa1606;
   HEAP32[$1>>2] = $n$3$lcssa$lcssa1604;
   $257 = HEAP32[$z>>2]|0;
   $258 = $p$3$lcssa$lcssa1605;
   $259 = $257;
   $260 = (($258) - ($259))|0;
   $261 = ((($z)) + 8|0);
   $262 = HEAP32[$261>>2]|0;
   $263 = (($260) + ($262))|0;
   HEAP32[$261>>2] = $263;
   HEAP32[$z>>2] = $p$3$lcssa$lcssa1605;
   HEAP32[$7>>2] = $q$0$lcssa1559;
   $264 = (_inflate_flush($s,$z,-4)|0);
   $$0 = $264;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 58: {
   HEAP32[$3>>2] = $b$5330$lcssa;
   HEAP32[$5>>2] = $k$5331$lcssa;
   HEAP32[$1>>2] = $n$5333$lcssa;
   $285 = HEAP32[$z>>2]|0;
   $286 = $p$5332$lcssa;
   $287 = $285;
   $288 = (($286) - ($287))|0;
   $289 = ((($z)) + 8|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = (($288) + ($290))|0;
   HEAP32[$289>>2] = $291;
   HEAP32[$z>>2] = $p$5332$lcssa;
   HEAP32[$7>>2] = $q$0$lcssa1560;
   $292 = (_inflate_flush($s,$z,$$5334$lcssa)|0);
   $$0 = $292;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 62: {
   $317 = ((($z)) + 36|0);
   $318 = HEAP32[$317>>2]|0;
   $319 = ((($z)) + 40|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = HEAP32[$49>>2]|0;
   FUNCTION_TABLE_vii[$318 & 31]($320,$321);
   HEAP32[$s>>2] = 9;
   $329 = $$lcssa1617;$b$4$lcssa1615 = $b$4$lcssa$lcssa1614;$k$4$lcssa1613 = $k$4$lcssa$lcssa1612;$n$4$lcssa1609 = $n$4$lcssa$lcssa1608;$p$4$lcssa1611 = $p$4$lcssa$lcssa1610;$q$01579 = $q$0$lcssa1562;
   label = 63;
   break;
  }
  case 69: {
   HEAP32[$3>>2] = $b$7355$lcssa;
   HEAP32[$5>>2] = $k$7356$lcssa;
   HEAP32[$1>>2] = $n$7358$lcssa;
   $350 = HEAP32[$z>>2]|0;
   $351 = $p$7357$lcssa;
   $352 = $350;
   $353 = (($351) - ($352))|0;
   $354 = ((($z)) + 8|0);
   $355 = HEAP32[$354>>2]|0;
   $356 = (($353) + ($355))|0;
   HEAP32[$354>>2] = $356;
   HEAP32[$z>>2] = $p$7357$lcssa;
   HEAP32[$7>>2] = $q$0$lcssa1563;
   $357 = (_inflate_flush($s,$z,$$7359$lcssa)|0);
   $$0 = $357;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 75: {
   HEAP32[$3>>2] = $b$8368$lcssa;
   HEAP32[$5>>2] = $k$8369$lcssa;
   HEAP32[$1>>2] = $n$8371$lcssa;
   $390 = HEAP32[$z>>2]|0;
   $391 = $p$8370$lcssa;
   $392 = $390;
   $393 = (($391) - ($392))|0;
   $394 = ((($z)) + 8|0);
   $395 = HEAP32[$394>>2]|0;
   $396 = (($393) + ($395))|0;
   HEAP32[$394>>2] = $396;
   HEAP32[$z>>2] = $p$8370$lcssa;
   HEAP32[$7>>2] = $q$0$lcssa1564;
   $397 = (_inflate_flush($s,$z,$$8372$lcssa)|0);
   $$0 = $397;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 78: {
   $417 = ((($z)) + 36|0);
   $418 = HEAP32[$417>>2]|0;
   $419 = ((($z)) + 40|0);
   $420 = HEAP32[$419>>2]|0;
   $421 = ((($s)) + 12|0);
   $422 = HEAP32[$421>>2]|0;
   FUNCTION_TABLE_vii[$418 & 31]($420,$422);
   HEAP32[$s>>2] = 9;
   $423 = ((($z)) + 24|0);
   HEAP32[$423>>2] = 27025;
   HEAP32[$3>>2] = $$lcssa1438;
   HEAP32[$5>>2] = $$lcssa1439;
   HEAP32[$1>>2] = $n$8$lcssa$lcssa;
   $424 = HEAP32[$z>>2]|0;
   $425 = $p$8$lcssa$lcssa;
   $426 = $424;
   $427 = (($425) - ($426))|0;
   $428 = ((($z)) + 8|0);
   $429 = HEAP32[$428>>2]|0;
   $430 = (($427) + ($429))|0;
   HEAP32[$428>>2] = $430;
   HEAP32[$z>>2] = $p$8$lcssa$lcssa;
   HEAP32[$7>>2] = $q$0$lcssa1565;
   $431 = (_inflate_flush($s,$z,-3)|0);
   $$0 = $431;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 86: {
   $461 = ((($z)) + 36|0);
   $462 = HEAP32[$461>>2]|0;
   $463 = ((($z)) + 40|0);
   $464 = HEAP32[$463>>2]|0;
   $465 = HEAP32[$37>>2]|0;
   FUNCTION_TABLE_vii[$462 & 31]($464,$465);
   HEAP32[$s>>2] = 9;
   $473 = $$lcssa1631;$b$6$lcssa1629 = $b$6$lcssa$lcssa1627;$k$6$lcssa1626 = $k$6$lcssa$lcssa1624;$n$6$lcssa1620 = $n$6$lcssa$lcssa1618;$p$6$lcssa1623 = $p$6$lcssa$lcssa1621;$q$01578 = $q$0$lcssa1567;
   label = 87;
   break;
  }
  case 89: {
   HEAP32[$3>>2] = $b$6$lcssa$lcssa1628;
   HEAP32[$5>>2] = $k$6$lcssa$lcssa1625;
   HEAP32[$1>>2] = $n$6$lcssa$lcssa1619;
   $481 = HEAP32[$z>>2]|0;
   $482 = $p$6$lcssa$lcssa1622;
   $483 = $481;
   $484 = (($482) - ($483))|0;
   $485 = ((($z)) + 8|0);
   $486 = HEAP32[$485>>2]|0;
   $487 = (($484) + ($486))|0;
   HEAP32[$485>>2] = $487;
   HEAP32[$z>>2] = $p$6$lcssa$lcssa1622;
   HEAP32[$7>>2] = $q$0$lcssa1568;
   $488 = (_inflate_flush($s,$z,-4)|0);
   $$0 = $488;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 92: {
   $500 = (_inflate_flush($s,$z,$$lcssa1633)|0);
   $$0 = $500;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 98: {
   HEAP32[$s>>2] = 7;
   $$10 = 0;$b$10 = $$lcssa1637;$k$10 = $$lcssa1638;$n$10 = $$lcssa1636;$p$10 = $$lcssa1635;$q$4 = $$lcssa1639;
   label = 99;
   break;
  }
  case 103: {
   HEAP32[$3>>2] = $b$0$lcssa1460;
   HEAP32[$5>>2] = $k$0$lcssa1484;
   HEAP32[$1>>2] = $n$0$lcssa1532;
   $539 = HEAP32[$z>>2]|0;
   $540 = $p$0$lcssa1508;
   $541 = $539;
   $542 = (($540) - ($541))|0;
   $543 = ((($z)) + 8|0);
   $544 = HEAP32[$543>>2]|0;
   $545 = (($542) + ($544))|0;
   HEAP32[$543>>2] = $545;
   HEAP32[$z>>2] = $p$0$lcssa1508;
   HEAP32[$7>>2] = $q$0$lcssa1556;
   $546 = (_inflate_flush($s,$z,-3)|0);
   $$0 = $546;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 104: {
   HEAP32[$3>>2] = $b$0$lcssa;
   HEAP32[$5>>2] = $k$0$lcssa;
   HEAP32[$1>>2] = $n$0$lcssa;
   $547 = HEAP32[$z>>2]|0;
   $548 = $p$0$lcssa;
   $549 = $547;
   $550 = (($548) - ($549))|0;
   $551 = ((($z)) + 8|0);
   $552 = HEAP32[$551>>2]|0;
   $553 = (($550) + ($552))|0;
   HEAP32[$551>>2] = $553;
   HEAP32[$z>>2] = $p$0$lcssa;
   HEAP32[$7>>2] = $q$0$lcssa;
   $554 = (_inflate_flush($s,$z,-2)|0);
   $$0 = $554;
   STACKTOP = sp;return ($$0|0);
   break;
  }
 }
 do {
  if ((label|0) == 63) {
   HEAP32[$3>>2] = $b$4$lcssa1615;
   HEAP32[$5>>2] = $k$4$lcssa1613;
   HEAP32[$1>>2] = $n$4$lcssa1609;
   $322 = HEAP32[$z>>2]|0;
   $323 = $p$4$lcssa1611;
   $324 = $322;
   $325 = (($323) - ($324))|0;
   $326 = ((($z)) + 8|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = (($325) + ($327))|0;
   HEAP32[$326>>2] = $328;
   HEAP32[$z>>2] = $p$4$lcssa1611;
   HEAP32[$7>>2] = $q$01579;
   $330 = (_inflate_flush($s,$z,$329)|0);
   $$0 = $330;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 87) {
   HEAP32[$3>>2] = $b$6$lcssa1629;
   HEAP32[$5>>2] = $k$6$lcssa1626;
   HEAP32[$1>>2] = $n$6$lcssa1620;
   $466 = HEAP32[$z>>2]|0;
   $467 = $p$6$lcssa1623;
   $468 = $466;
   $469 = (($467) - ($468))|0;
   $470 = ((($z)) + 8|0);
   $471 = HEAP32[$470>>2]|0;
   $472 = (($469) + ($471))|0;
   HEAP32[$470>>2] = $472;
   HEAP32[$z>>2] = $p$6$lcssa1623;
   HEAP32[$7>>2] = $q$01578;
   $474 = (_inflate_flush($s,$z,$473)|0);
   $$0 = $474;
   STACKTOP = sp;return ($$0|0);
  }
  else if ((label|0) == 99) {
   HEAP32[$7>>2] = $q$4;
   $519 = (_inflate_flush($s,$z,$$10)|0);
   $520 = HEAP32[$7>>2]|0;
   $521 = HEAP32[$9>>2]|0;
   $522 = ($521|0)==($520|0);
   if ($522) {
    HEAP32[$s>>2] = 8;
    $b$11 = $b$10;$k$11 = $k$10;$n$11 = $n$10;$p$11 = $p$10;$q$5 = $520;
    break;
   }
   HEAP32[$3>>2] = $b$10;
   HEAP32[$5>>2] = $k$10;
   HEAP32[$1>>2] = $n$10;
   $523 = HEAP32[$z>>2]|0;
   $524 = $p$10;
   $525 = $523;
   $526 = (($524) - ($525))|0;
   $527 = ((($z)) + 8|0);
   $528 = HEAP32[$527>>2]|0;
   $529 = (($526) + ($528))|0;
   HEAP32[$527>>2] = $529;
   HEAP32[$z>>2] = $p$10;
   HEAP32[$7>>2] = $520;
   $530 = (_inflate_flush($s,$z,$519)|0);
   $$0 = $530;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$3>>2] = $b$11;
 HEAP32[$5>>2] = $k$11;
 HEAP32[$1>>2] = $n$11;
 $531 = HEAP32[$z>>2]|0;
 $532 = $p$11;
 $533 = $531;
 $534 = (($532) - ($533))|0;
 $535 = ((($z)) + 8|0);
 $536 = HEAP32[$535>>2]|0;
 $537 = (($534) + ($536))|0;
 HEAP32[$535>>2] = $537;
 HEAP32[$z>>2] = $p$11;
 HEAP32[$7>>2] = $q$5;
 $538 = (_inflate_flush($s,$z,1)|0);
 $$0 = $538;
 STACKTOP = sp;return ($$0|0);
}
function _inflate_flush($s,$z,$r) {
 $s = $s|0;
 $z = $z|0;
 $r = $r|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $$4 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $p$0 = 0, $q$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($s)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($s)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)>($5>>>0);
 if ($6) {
  $7 = ((($s)) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 } else {
  $10 = $5;
 }
 $9 = $10;
 $11 = $3;
 $12 = (($9) - ($11))|0;
 $13 = ((($z)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12>>>0)>($14>>>0);
 $$ = $15 ? $14 : $12;
 $16 = ($$|0)!=(0);
 $17 = ($r|0)==(-5);
 $or$cond = $17 & $16;
 $$0 = $or$cond ? 0 : $r;
 $18 = (($14) - ($$))|0;
 HEAP32[$13>>2] = $18;
 $19 = ((($z)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($$) + ($20))|0;
 HEAP32[$19>>2] = $21;
 $22 = ((($s)) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  $25 = ((($s)) + 60|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (FUNCTION_TABLE_iiii[$23 & 127]($26,$3,$$)|0);
  HEAP32[$25>>2] = $27;
  $28 = ((($z)) + 48|0);
  HEAP32[$28>>2] = $27;
 }
 _memcpy(($1|0),($3|0),($$|0))|0;
 $29 = (($1) + ($$)|0);
 $30 = (($3) + ($$)|0);
 $31 = ((($s)) + 44|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if (!($33)) {
  $$2 = $$0;$p$0 = $29;$q$0 = $30;
  HEAP32[$0>>2] = $p$0;
  HEAP32[$2>>2] = $q$0;
  return ($$2|0);
 }
 $34 = ((($s)) + 40|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$4>>2]|0;
 $37 = ($36|0)==($32|0);
 if ($37) {
  HEAP32[$4>>2] = $35;
 }
 $38 = HEAP32[$4>>2]|0;
 $39 = $38;
 $40 = $35;
 $41 = (($39) - ($40))|0;
 $42 = HEAP32[$13>>2]|0;
 $43 = ($41>>>0)>($42>>>0);
 $$4 = $43 ? $42 : $41;
 $44 = ($$4|0)!=(0);
 $45 = ($$0|0)==(-5);
 $or$cond3 = $45 & $44;
 $$1 = $or$cond3 ? 0 : $$0;
 $46 = (($42) - ($$4))|0;
 HEAP32[$13>>2] = $46;
 $47 = HEAP32[$19>>2]|0;
 $48 = (($$4) + ($47))|0;
 HEAP32[$19>>2] = $48;
 $49 = HEAP32[$22>>2]|0;
 $50 = ($49|0)==(0|0);
 if (!($50)) {
  $51 = ((($s)) + 60|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (FUNCTION_TABLE_iiii[$49 & 127]($52,$35,$$4)|0);
  HEAP32[$51>>2] = $53;
  $54 = ((($z)) + 48|0);
  HEAP32[$54>>2] = $53;
 }
 _memcpy(($29|0),($35|0),($$4|0))|0;
 $$sum = (($$4) + ($$))|0;
 $55 = (($1) + ($$sum)|0);
 $56 = (($35) + ($$4)|0);
 $$2 = $$1;$p$0 = $55;$q$0 = $56;
 HEAP32[$0>>2] = $p$0;
 HEAP32[$2>>2] = $q$0;
 return ($$2|0);
}
function _inflate_trees_fixed($bl,$bd,$tl,$td) {
 $bl = $bl|0;
 $bd = $bd|0;
 $tl = $tl|0;
 $td = $td|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$bl>>2] = 9;
 HEAP32[$bd>>2] = 5;
 HEAP32[$tl>>2] = 6704;
 HEAP32[$td>>2] = 10800;
 return;
}
function _inflate_codes_new($bl,$bd,$tl,$td,$z) {
 $bl = $bl|0;
 $bd = $bd|0;
 $tl = $tl|0;
 $td = $td|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($z)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$1 & 127]($3,1,28)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  return ($4|0);
 }
 HEAP32[$4>>2] = 0;
 $6 = $bl&255;
 $7 = ((($4)) + 16|0);
 HEAP8[$7>>0] = $6;
 $8 = $bd&255;
 $9 = ((($4)) + 17|0);
 HEAP8[$9>>0] = $8;
 $10 = ((($4)) + 20|0);
 HEAP32[$10>>2] = $tl;
 $11 = ((($4)) + 24|0);
 HEAP32[$11>>2] = $td;
 return ($4|0);
}
function _inflate_trees_bits($c,$bb,$tb,$hp,$z) {
 $c = $c|0;
 $bb = $bb|0;
 $tb = $tb|0;
 $hp = $hp|0;
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hn = 0, $r$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $hn = sp;
 HEAP32[$hn>>2] = 0;
 $0 = ((($z)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($z)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$1 & 127]($3,19,4)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_huft_build($c,19,19,0,0,$tb,$bb,$hp,$hn,$4)|0);
 switch ($6|0) {
 case -3:  {
  $7 = ((($z)) + 24|0);
  HEAP32[$7>>2] = 27254;
  $r$0 = -3;
  break;
 }
 case -5:  {
  label = 5;
  break;
 }
 default: {
  $8 = HEAP32[$bb>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   label = 5;
  } else {
   $r$0 = $6;
  }
 }
 }
 if ((label|0) == 5) {
  $10 = ((($z)) + 24|0);
  HEAP32[$10>>2] = 27294;
  $r$0 = -3;
 }
 $11 = ((($z)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vii[$12 & 31]($13,$4);
 $$0 = $r$0;
 STACKTOP = sp;return ($$0|0);
}
function _inflate_trees_dynamic($nl,$nd,$c,$bl,$bd,$tl,$td,$hp,$z) {
 $nl = $nl|0;
 $nd = $nd|0;
 $c = $c|0;
 $bl = $bl|0;
 $bd = $bd|0;
 $tl = $tl|0;
 $td = $td|0;
 $hp = $hp|0;
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hn = 0, $or$cond = 0, $r$0 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $hn = sp;
 HEAP32[$hn>>2] = 0;
 $0 = ((($z)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($z)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$1 & 127]($3,288,4)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = -4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_huft_build($c,$nl,257,6216,6340,$tl,$bl,$hp,$hn,$4)|0);
 switch ($6|0) {
 case 0:  {
  $7 = HEAP32[$bl>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   label = 5;
  } else {
   $14 = (($c) + ($nl<<2)|0);
   $15 = (_huft_build($14,$nd,0,6464,6584,$td,$bd,$hp,$hn,$4)|0);
   switch ($15|0) {
   case 0:  {
    $16 = HEAP32[$bd>>2]|0;
    $17 = ($16|0)==(0);
    $18 = ($nl>>>0)>(257);
    $or$cond = $18 & $17;
    if ($or$cond) {
     label = 11;
    } else {
     $25 = ((($z)) + 36|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$2>>2]|0;
     FUNCTION_TABLE_vii[$26 & 31]($27,$4);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
    break;
   }
   case -3:  {
    $19 = ((($z)) + 24|0);
    HEAP32[$19>>2] = 27167;
    $r$1 = -3;
    break;
   }
   case -5:  {
    $20 = ((($z)) + 24|0);
    HEAP32[$20>>2] = 27196;
    $r$1 = -3;
    break;
   }
   case -4:  {
    $r$1 = -4;
    break;
   }
   default: {
    label = 11;
   }
   }
   if ((label|0) == 11) {
    $21 = ((($z)) + 24|0);
    HEAP32[$21>>2] = 27221;
    $r$1 = -3;
   }
   $22 = ((($z)) + 36|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$2>>2]|0;
   FUNCTION_TABLE_vii[$23 & 31]($24,$4);
   $$0 = $r$1;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case -3:  {
  $9 = ((($z)) + 24|0);
  HEAP32[$9>>2] = 27101;
  $r$0 = -3;
  break;
 }
 case -4:  {
  $r$0 = -4;
  break;
 }
 default: {
  label = 5;
 }
 }
 if ((label|0) == 5) {
  $10 = ((($z)) + 24|0);
  HEAP32[$10>>2] = 27136;
  $r$0 = -3;
 }
 $11 = ((($z)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vii[$12 & 31]($13,$4);
 $$0 = $r$0;
 STACKTOP = sp;return ($$0|0);
}
function _inflate_codes($s,$z,$r) {
 $s = $s|0;
 $z = $z|0;
 $r = $r|0;
 var $$0 = 0, $$01 = 0, $$01$lcssa682 = 0, $$1$lcssa = 0, $$1183 = 0, $$1183$lcssa = 0, $$2$lcssa = 0, $$2157 = 0, $$2157$lcssa = 0, $$3 = 0, $$4$lcssa = 0, $$4170 = 0, $$4170$lcssa = 0, $$5$lcssa = 0, $$5134 = 0, $$5134$lcssa = 0, $$6 = 0, $$7$lcssa = 0, $$7148 = 0, $$lcssa652 = 0;
 var $$lcssa749 = 0, $$lcssa750 = 0, $$lcssa751 = 0, $$lcssa752 = 0, $$lcssa753 = 0, $$sum = 0, $$sum2 = 0, $$v = 0, $$v196 = 0, $$v197 = 0, $$v198 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b$0 = 0, $b$0$lcssa = 0, $b$0$lcssa693 = 0, $b$0$lcssa695 = 0, $b$0$lcssa696 = 0, $b$0$phi = 0, $b$0704 = 0, $b$1$lcssa = 0, $b$1184 = 0, $b$1184$lcssa = 0, $b$2$lcssa = 0, $b$2158 = 0, $b$2158$lcssa = 0, $b$3 = 0, $b$4$lcssa = 0;
 var $b$4171 = 0, $b$4171$lcssa = 0, $b$5$lcssa = 0, $b$5135 = 0, $b$5135$lcssa = 0, $b$6 = 0, $b$6$lcssa = 0, $f$0$lcssa = 0, $f$0143 = 0, $f$1151 = 0, $f$2 = 0, $k$0 = 0, $k$0$lcssa = 0, $k$0$lcssa705 = 0, $k$0$lcssa707 = 0, $k$0$lcssa708 = 0, $k$0$phi = 0, $k$1$lcssa = 0, $k$1185 = 0, $k$1185$lcssa = 0;
 var $k$2$lcssa = 0, $k$2159 = 0, $k$2159$lcssa = 0, $k$3 = 0, $k$4$lcssa = 0, $k$4172 = 0, $k$4172$lcssa = 0, $k$5$lcssa = 0, $k$5136 = 0, $k$5136$lcssa = 0, $k$6 = 0, $k$6$lcssa = 0, $k$7 = 0, $k$8 = 0, $m$0 = 0, $m$0$ph = 0, $m$0$phi = 0, $m$1$lcssa = 0, $m$1150 = 0, $m$3 = 0;
 var $m$4 = 0, $m$6 = 0, $m$7 = 0, $n$0 = 0, $n$0$lcssa = 0, $n$0$lcssa727 = 0, $n$0$lcssa729 = 0, $n$0$lcssa730 = 0, $n$0$phi = 0, $n$1$lcssa = 0, $n$1$lcssa$lcssa = 0, $n$1187 = 0, $n$1187$lcssa = 0, $n$2$lcssa = 0, $n$2161 = 0, $n$2161$lcssa = 0, $n$3 = 0, $n$4$lcssa = 0, $n$4$lcssa$lcssa = 0, $n$4174 = 0;
 var $n$4174$lcssa = 0, $n$5$lcssa = 0, $n$5138 = 0, $n$5138$lcssa = 0, $n$6 = 0, $n$6$lcssa = 0, $n$7 = 0, $n$8 = 0, $p$0 = 0, $p$0$lcssa = 0, $p$0$lcssa716 = 0, $p$0$lcssa718 = 0, $p$0$lcssa719 = 0, $p$0$phi = 0, $p$1$lcssa = 0, $p$1$lcssa$lcssa = 0, $p$1186 = 0, $p$1186$lcssa = 0, $p$2$lcssa = 0, $p$2160 = 0;
 var $p$2160$lcssa = 0, $p$3 = 0, $p$4$lcssa = 0, $p$4$lcssa$lcssa = 0, $p$4173 = 0, $p$4173$lcssa = 0, $p$5$lcssa = 0, $p$5137 = 0, $p$5137$lcssa = 0, $p$6 = 0, $p$6$lcssa = 0, $p$7 = 0, $p$8 = 0, $q$0 = 0, $q$0$lcssa = 0, $q$0$lcssa738 = 0, $q$0$lcssa740 = 0, $q$0$lcssa742 = 0, $q$0$lcssa744 = 0, $q$0$lcssa745 = 0;
 var $q$0$lcssa746 = 0, $q$0$lcssa747 = 0, $q$0$lcssa748 = 0, $q$0$phi = 0, $q$1$lcssa = 0, $q$1149 = 0, $q$23 = 0, $q$3 = 0, $q$3$lcssa = 0, $q$4 = 0, $q$56 = 0, $q$6 = 0, $q$6$lcssa = 0, $q$7 = 0, $q$8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($s)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$z>>2]|0;
 $3 = ((($z)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($s)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($s)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($s)) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($s)) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)<($12>>>0);
 if ($13) {
  $14 = $12;
  $15 = $10;
  $16 = $15 ^ -1;
  $17 = (($14) + ($16))|0;
  $m$0$ph = $17;
 } else {
  $18 = ((($s)) + 44|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19;
  $21 = $10;
  $22 = (($20) - ($21))|0;
  $m$0$ph = $22;
 }
 $23 = ((($1)) + 16|0);
 $24 = ((($1)) + 8|0);
 $25 = ((($1)) + 12|0);
 $26 = ((($1)) + 20|0);
 $27 = ((($1)) + 8|0);
 $28 = ((($1)) + 12|0);
 $29 = ((($1)) + 4|0);
 $30 = ((($1)) + 8|0);
 $31 = ((($1)) + 4|0);
 $32 = ((($1)) + 17|0);
 $33 = ((($1)) + 12|0);
 $34 = ((($1)) + 24|0);
 $35 = ((($1)) + 8|0);
 $36 = ((($1)) + 12|0);
 $37 = ((($1)) + 8|0);
 $38 = ((($1)) + 12|0);
 $39 = ((($1)) + 12|0);
 $40 = ((($s)) + 40|0);
 $41 = ((($1)) + 4|0);
 $42 = ((($s)) + 44|0);
 $43 = ((($s)) + 44|0);
 $44 = ((($s)) + 44|0);
 $45 = ((($s)) + 44|0);
 $46 = ((($s)) + 40|0);
 $47 = ((($s)) + 40|0);
 $48 = ((($1)) + 8|0);
 $$01 = $r;$b$0 = $6;$k$0 = $8;$m$0 = $m$0$ph;$n$0 = $4;$p$0 = $2;$q$0 = $10;
 L5: while(1) {
  $49 = HEAP32[$1>>2]|0;
  switch ($49|0) {
  case 7:  {
   $$01$lcssa682 = $$01;$b$0$lcssa693 = $b$0;$k$0$lcssa705 = $k$0;$n$0$lcssa727 = $n$0;$p$0$lcssa716 = $p$0;$q$0$lcssa738 = $q$0;
   label = 72;
   break L5;
   break;
  }
  case 8:  {
   $b$0704 = $b$0;$k$8 = $k$0;$n$8 = $n$0;$p$8 = $p$0;$q$8 = $q$0;
   break L5;
   break;
  }
  case 9:  {
   $b$0$lcssa695 = $b$0;$k$0$lcssa707 = $k$0;$n$0$lcssa729 = $n$0;$p$0$lcssa718 = $p$0;$q$0$lcssa740 = $q$0;
   label = 76;
   break L5;
   break;
  }
  case 0:  {
   $50 = HEAP8[$23>>0]|0;
   $51 = $50&255;
   HEAP32[$25>>2] = $51;
   $52 = HEAP32[$26>>2]|0;
   HEAP32[$24>>2] = $52;
   HEAP32[$1>>2] = 1;
   label = 7;
   break;
  }
  case 1:  {
   label = 7;
   break;
  }
  case 2:  {
   $108 = HEAP32[$30>>2]|0;
   $109 = ($k$0>>>0)<($108>>>0);
   if ($109) {
    $$2157 = $$01;$b$2158 = $b$0;$k$2159 = $k$0;$n$2161 = $n$0;$p$2160 = $p$0;
    while(1) {
     $110 = ($n$2161|0)==(0);
     if ($110) {
      $$2157$lcssa = $$2157;$b$2158$lcssa = $b$2158;$k$2159$lcssa = $k$2159;$n$2161$lcssa = $n$2161;$p$2160$lcssa = $p$2160;$q$0$lcssa744 = $q$0;
      label = 23;
      break L5;
     }
     $111 = (($n$2161) + -1)|0;
     $112 = ((($p$2160)) + 1|0);
     $113 = HEAP8[$p$2160>>0]|0;
     $114 = $113&255;
     $115 = $114 << $k$2159;
     $116 = $115 | $b$2158;
     $117 = (($k$2159) + 8)|0;
     $118 = ($117>>>0)<($108>>>0);
     if ($118) {
      $$2157 = 0;$b$2158 = $116;$k$2159 = $117;$n$2161 = $111;$p$2160 = $112;
     } else {
      $$2$lcssa = 0;$b$2$lcssa = $116;$k$2$lcssa = $117;$n$2$lcssa = $111;$p$2$lcssa = $112;
      break;
     }
    }
   } else {
    $$2$lcssa = $$01;$b$2$lcssa = $b$0;$k$2$lcssa = $k$0;$n$2$lcssa = $n$0;$p$2$lcssa = $p$0;
   }
   $127 = (6148 + ($108<<2)|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $128 & $b$2$lcssa;
   $130 = HEAP32[$31>>2]|0;
   $131 = (($130) + ($129))|0;
   HEAP32[$31>>2] = $131;
   $132 = $b$2$lcssa >>> $108;
   $133 = (($k$2$lcssa) - ($108))|0;
   $134 = HEAP8[$32>>0]|0;
   $135 = $134&255;
   HEAP32[$33>>2] = $135;
   $136 = HEAP32[$34>>2]|0;
   HEAP32[$30>>2] = $136;
   HEAP32[$1>>2] = 3;
   $$3 = $$2$lcssa;$b$3 = $132;$k$3 = $133;$n$3 = $n$2$lcssa;$p$3 = $p$2$lcssa;
   label = 25;
   break;
  }
  case 3:  {
   $$3 = $$01;$b$3 = $b$0;$k$3 = $k$0;$n$3 = $n$0;$p$3 = $p$0;
   label = 25;
   break;
  }
  case 4:  {
   $187 = HEAP32[$37>>2]|0;
   $188 = ($k$0>>>0)<($187>>>0);
   if ($188) {
    $$5134 = $$01;$b$5135 = $b$0;$k$5136 = $k$0;$n$5138 = $n$0;$p$5137 = $p$0;
    while(1) {
     $189 = ($n$5138|0)==(0);
     if ($189) {
      $$5134$lcssa = $$5134;$b$5135$lcssa = $b$5135;$k$5136$lcssa = $k$5136;$n$5138$lcssa = $n$5138;$p$5137$lcssa = $p$5137;$q$0$lcssa742 = $q$0;
      label = 37;
      break L5;
     }
     $190 = (($n$5138) + -1)|0;
     $191 = ((($p$5137)) + 1|0);
     $192 = HEAP8[$p$5137>>0]|0;
     $193 = $192&255;
     $194 = $193 << $k$5136;
     $195 = $194 | $b$5135;
     $196 = (($k$5136) + 8)|0;
     $197 = ($196>>>0)<($187>>>0);
     if ($197) {
      $$5134 = 0;$b$5135 = $195;$k$5136 = $196;$n$5138 = $190;$p$5137 = $191;
     } else {
      $$5$lcssa = 0;$b$5$lcssa = $195;$k$5$lcssa = $196;$n$5$lcssa = $190;$p$5$lcssa = $191;
      break;
     }
    }
   } else {
    $$5$lcssa = $$01;$b$5$lcssa = $b$0;$k$5$lcssa = $k$0;$n$5$lcssa = $n$0;$p$5$lcssa = $p$0;
   }
   $206 = (6148 + ($187<<2)|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = $207 & $b$5$lcssa;
   $209 = HEAP32[$38>>2]|0;
   $210 = (($209) + ($208))|0;
   HEAP32[$38>>2] = $210;
   $211 = $b$5$lcssa >>> $187;
   $212 = (($k$5$lcssa) - ($187))|0;
   HEAP32[$1>>2] = 5;
   $$6 = $$5$lcssa;$b$6 = $211;$k$6 = $212;$n$6 = $n$5$lcssa;$p$6 = $p$5$lcssa;
   label = 39;
   break;
  }
  case 5:  {
   $$6 = $$01;$b$6 = $b$0;$k$6 = $k$0;$n$6 = $n$0;$p$6 = $p$0;
   label = 39;
   break;
  }
  case 6:  {
   $283 = ($m$0|0)==(0);
   do {
    if ($283) {
     $284 = HEAP32[$45>>2]|0;
     $285 = ($q$0|0)==($284|0);
     if ($285) {
      $286 = HEAP32[$11>>2]|0;
      $287 = HEAP32[$46>>2]|0;
      $288 = ($286|0)==($287|0);
      if ($288) {
       $q$56 = $q$0;
      } else {
       $289 = ($287>>>0)<($286>>>0);
       $290 = $286;
       $291 = $287;
       $292 = (($290) + -1)|0;
       $293 = $284;
       $$v196 = $289 ? $292 : $293;
       $294 = (($$v196) - ($291))|0;
       $295 = ($$v196|0)==($291|0);
       if ($295) {
        $q$56 = $287;
       } else {
        $m$7 = $294;$q$7 = $287;
        break;
       }
      }
     } else {
      $q$56 = $q$0;
     }
     HEAP32[$9>>2] = $q$56;
     $296 = (_inflate_flush($s,$z,$$01)|0);
     $297 = HEAP32[$9>>2]|0;
     $298 = HEAP32[$11>>2]|0;
     $299 = ($297>>>0)<($298>>>0);
     if ($299) {
      $300 = $298;
      $301 = $297;
      $302 = $301 ^ -1;
      $303 = (($300) + ($302))|0;
      $373 = $303;
     } else {
      $304 = HEAP32[$45>>2]|0;
      $305 = $304;
      $306 = $297;
      $307 = (($305) - ($306))|0;
      $373 = $307;
     }
     $308 = HEAP32[$45>>2]|0;
     $309 = ($297|0)==($308|0);
     if ($309) {
      $310 = HEAP32[$11>>2]|0;
      $311 = HEAP32[$47>>2]|0;
      $312 = ($310|0)==($311|0);
      if ($312) {
       $m$6 = $373;$q$6 = $297;
      } else {
       $313 = ($311>>>0)<($310>>>0);
       $314 = $310;
       $315 = $311;
       $316 = (($314) + -1)|0;
       $317 = $308;
       $$v = $313 ? $316 : $317;
       $318 = (($$v) - ($315))|0;
       $m$6 = $318;$q$6 = $311;
      }
     } else {
      $m$6 = $373;$q$6 = $297;
     }
     $319 = ($m$6|0)==(0);
     if ($319) {
      $$lcssa749 = $296;$b$0$lcssa696 = $b$0;$k$0$lcssa708 = $k$0;$n$0$lcssa730 = $n$0;$p$0$lcssa719 = $p$0;$q$6$lcssa = $q$6;
      label = 70;
      break L5;
     } else {
      $m$7 = $m$6;$q$7 = $q$6;
     }
    } else {
     $m$7 = $m$0;$q$7 = $q$0;
    }
   } while(0);
   $328 = HEAP32[$48>>2]|0;
   $329 = $328&255;
   $330 = ((($q$7)) + 1|0);
   HEAP8[$q$7>>0] = $329;
   $331 = (($m$7) + -1)|0;
   HEAP32[$1>>2] = 0;
   $p$0$phi = $p$0;$n$0$phi = $n$0;$k$0$phi = $k$0;$b$0$phi = $b$0;$$01 = 0;$m$0 = $331;$q$0 = $330;$p$0 = $p$0$phi;$n$0 = $n$0$phi;$k$0 = $k$0$phi;$b$0 = $b$0$phi;
   continue L5;
   break;
  }
  default: {
   $b$0$lcssa = $b$0;$k$0$lcssa = $k$0;$n$0$lcssa = $n$0;$p$0$lcssa = $p$0;$q$0$lcssa = $q$0;
   label = 77;
   break L5;
  }
  }
  if ((label|0) == 7) {
   label = 0;
   $53 = HEAP32[$28>>2]|0;
   $54 = ($k$0>>>0)<($53>>>0);
   if ($54) {
    $$1183 = $$01;$b$1184 = $b$0;$k$1185 = $k$0;$n$1187 = $n$0;$p$1186 = $p$0;
    while(1) {
     $55 = ($n$1187|0)==(0);
     if ($55) {
      $$1183$lcssa = $$1183;$b$1184$lcssa = $b$1184;$k$1185$lcssa = $k$1185;$n$1187$lcssa = $n$1187;$p$1186$lcssa = $p$1186;$q$0$lcssa747 = $q$0;
      label = 10;
      break L5;
     }
     $56 = (($n$1187) + -1)|0;
     $57 = ((($p$1186)) + 1|0);
     $58 = HEAP8[$p$1186>>0]|0;
     $59 = $58&255;
     $60 = $59 << $k$1185;
     $61 = $60 | $b$1184;
     $62 = (($k$1185) + 8)|0;
     $63 = ($62>>>0)<($53>>>0);
     if ($63) {
      $$1183 = 0;$b$1184 = $61;$k$1185 = $62;$n$1187 = $56;$p$1186 = $57;
     } else {
      $$1$lcssa = 0;$b$1$lcssa = $61;$k$1$lcssa = $62;$n$1$lcssa = $56;$p$1$lcssa = $57;
      break;
     }
    }
   } else {
    $$1$lcssa = $$01;$b$1$lcssa = $b$0;$k$1$lcssa = $k$0;$n$1$lcssa = $n$0;$p$1$lcssa = $p$0;
   }
   $72 = HEAP32[$27>>2]|0;
   $73 = (6148 + ($53<<2)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74 & $b$1$lcssa;
   $76 = (($72) + ($75<<3)|0);
   $77 = ((($76)) + 1|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = $b$1$lcssa >>> $79;
   $81 = (($k$1$lcssa) - ($79))|0;
   $82 = HEAP8[$76>>0]|0;
   $83 = $82&255;
   $84 = ($82<<24>>24)==(0);
   if ($84) {
    $85 = (((($72) + ($75<<3)|0)) + 4|0);
    $86 = HEAP32[$85>>2]|0;
    HEAP32[$27>>2] = $86;
    HEAP32[$1>>2] = 6;
    $q$0$phi = $q$0;$m$0$phi = $m$0;$$01 = $$1$lcssa;$b$0 = $80;$k$0 = $81;$n$0 = $n$1$lcssa;$p$0 = $p$1$lcssa;$q$0 = $q$0$phi;$m$0 = $m$0$phi;
    continue;
   }
   $87 = $83 & 16;
   $88 = ($87|0)==(0);
   if (!($88)) {
    $89 = $83 & 15;
    HEAP32[$27>>2] = $89;
    $90 = (((($72) + ($75<<3)|0)) + 4|0);
    $91 = HEAP32[$90>>2]|0;
    HEAP32[$29>>2] = $91;
    HEAP32[$1>>2] = 2;
    $q$0$phi = $q$0;$m$0$phi = $m$0;$$01 = $$1$lcssa;$b$0 = $80;$k$0 = $81;$n$0 = $n$1$lcssa;$p$0 = $p$1$lcssa;$q$0 = $q$0$phi;$m$0 = $m$0$phi;
    continue;
   }
   $92 = $83 & 64;
   $93 = ($92|0)==(0);
   if ($93) {
    HEAP32[$28>>2] = $83;
    $94 = (((($72) + ($75<<3)|0)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $$sum2 = (($95) + ($75))|0;
    $96 = (($72) + ($$sum2<<3)|0);
    HEAP32[$27>>2] = $96;
    $q$0$phi = $q$0;$m$0$phi = $m$0;$$01 = $$1$lcssa;$b$0 = $80;$k$0 = $81;$n$0 = $n$1$lcssa;$p$0 = $p$1$lcssa;$q$0 = $q$0$phi;$m$0 = $m$0$phi;
    continue;
   }
   $97 = $83 & 32;
   $98 = ($97|0)==(0);
   if ($98) {
    $$lcssa752 = $80;$$lcssa753 = $81;$n$1$lcssa$lcssa = $n$1$lcssa;$p$1$lcssa$lcssa = $p$1$lcssa;$q$0$lcssa748 = $q$0;
    label = 19;
    break;
   }
   HEAP32[$1>>2] = 7;
   $q$0$phi = $q$0;$m$0$phi = $m$0;$$01 = $$1$lcssa;$b$0 = $80;$k$0 = $81;$n$0 = $n$1$lcssa;$p$0 = $p$1$lcssa;$q$0 = $q$0$phi;$m$0 = $m$0$phi;
   continue;
  }
  else if ((label|0) == 25) {
   label = 0;
   $137 = HEAP32[$36>>2]|0;
   $138 = ($k$3>>>0)<($137>>>0);
   if ($138) {
    $$4170 = $$3;$b$4171 = $b$3;$k$4172 = $k$3;$n$4174 = $n$3;$p$4173 = $p$3;
    while(1) {
     $139 = ($n$4174|0)==(0);
     if ($139) {
      $$4170$lcssa = $$4170;$b$4171$lcssa = $b$4171;$k$4172$lcssa = $k$4172;$n$4174$lcssa = $n$4174;$p$4173$lcssa = $p$4173;$q$0$lcssa745 = $q$0;
      label = 28;
      break L5;
     }
     $140 = (($n$4174) + -1)|0;
     $141 = ((($p$4173)) + 1|0);
     $142 = HEAP8[$p$4173>>0]|0;
     $143 = $142&255;
     $144 = $143 << $k$4172;
     $145 = $144 | $b$4171;
     $146 = (($k$4172) + 8)|0;
     $147 = ($146>>>0)<($137>>>0);
     if ($147) {
      $$4170 = 0;$b$4171 = $145;$k$4172 = $146;$n$4174 = $140;$p$4173 = $141;
     } else {
      $$4$lcssa = 0;$b$4$lcssa = $145;$k$4$lcssa = $146;$n$4$lcssa = $140;$p$4$lcssa = $141;
      break;
     }
    }
   } else {
    $$4$lcssa = $$3;$b$4$lcssa = $b$3;$k$4$lcssa = $k$3;$n$4$lcssa = $n$3;$p$4$lcssa = $p$3;
   }
   $156 = HEAP32[$35>>2]|0;
   $157 = (6148 + ($137<<2)|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $158 & $b$4$lcssa;
   $160 = (($156) + ($159<<3)|0);
   $161 = ((($160)) + 1|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = $162&255;
   $164 = $b$4$lcssa >>> $163;
   $165 = (($k$4$lcssa) - ($163))|0;
   $166 = HEAP8[$160>>0]|0;
   $167 = $166&255;
   $168 = $167 & 16;
   $169 = ($168|0)==(0);
   if (!($169)) {
    $170 = $167 & 15;
    HEAP32[$35>>2] = $170;
    $171 = (((($156) + ($159<<3)|0)) + 4|0);
    $172 = HEAP32[$171>>2]|0;
    HEAP32[$36>>2] = $172;
    HEAP32[$1>>2] = 4;
    $q$0$phi = $q$0;$m$0$phi = $m$0;$$01 = $$4$lcssa;$b$0 = $164;$k$0 = $165;$n$0 = $n$4$lcssa;$p$0 = $p$4$lcssa;$q$0 = $q$0$phi;$m$0 = $m$0$phi;
    continue;
   }
   $173 = $167 & 64;
   $174 = ($173|0)==(0);
   if (!($174)) {
    $$lcssa750 = $164;$$lcssa751 = $165;$n$4$lcssa$lcssa = $n$4$lcssa;$p$4$lcssa$lcssa = $p$4$lcssa;$q$0$lcssa746 = $q$0;
    label = 33;
    break;
   }
   HEAP32[$36>>2] = $167;
   $175 = (((($156) + ($159<<3)|0)) + 4|0);
   $176 = HEAP32[$175>>2]|0;
   $$sum = (($176) + ($159))|0;
   $177 = (($156) + ($$sum<<3)|0);
   HEAP32[$35>>2] = $177;
   $q$0$phi = $q$0;$m$0$phi = $m$0;$$01 = $$4$lcssa;$b$0 = $164;$k$0 = $165;$n$0 = $n$4$lcssa;$p$0 = $p$4$lcssa;$q$0 = $q$0$phi;$m$0 = $m$0$phi;
   continue;
  }
  else if ((label|0) == 39) {
   label = 0;
   $213 = HEAP32[$39>>2]|0;
   $214 = (0 - ($213))|0;
   $215 = (($q$0) + ($214)|0);
   $216 = HEAP32[$40>>2]|0;
   $217 = ($215>>>0)<($216>>>0);
   if ($217) {
    $218 = HEAP32[$44>>2]|0;
    $219 = $218;
    $220 = HEAP32[$40>>2]|0;
    $224 = $216;$f$0143 = $215;
    while(1) {
     $223 = $224;
     $225 = (($219) - ($223))|0;
     $226 = (($f$0143) + ($225)|0);
     $227 = ($226>>>0)<($220>>>0);
     if ($227) {
      $224 = $220;$f$0143 = $226;
     } else {
      $f$0$lcssa = $226;
      break;
     }
    }
   } else {
    $f$0$lcssa = $215;
   }
   $221 = HEAP32[$41>>2]|0;
   $222 = ($221|0)==(0);
   if ($222) {
    $$7$lcssa = $$6;$m$1$lcssa = $m$0;$q$1$lcssa = $q$0;
   } else {
    $$7148 = $$6;$f$1151 = $f$0$lcssa;$m$1150 = $m$0;$q$1149 = $q$0;
    while(1) {
     $228 = ($m$1150|0)==(0);
     do {
      if ($228) {
       $229 = HEAP32[$42>>2]|0;
       $230 = ($q$1149|0)==($229|0);
       if ($230) {
        $231 = HEAP32[$11>>2]|0;
        $232 = HEAP32[$40>>2]|0;
        $233 = ($231|0)==($232|0);
        if ($233) {
         $q$23 = $q$1149;
        } else {
         $234 = ($232>>>0)<($231>>>0);
         $235 = $231;
         $236 = $232;
         $237 = (($235) + -1)|0;
         $238 = $229;
         $$v198 = $234 ? $237 : $238;
         $239 = (($$v198) - ($236))|0;
         $240 = ($$v198|0)==($236|0);
         if ($240) {
          $q$23 = $232;
         } else {
          $m$4 = $239;$q$4 = $232;
          break;
         }
        }
       } else {
        $q$23 = $q$1149;
       }
       HEAP32[$9>>2] = $q$23;
       $241 = (_inflate_flush($s,$z,$$7148)|0);
       $242 = HEAP32[$9>>2]|0;
       $243 = HEAP32[$11>>2]|0;
       $244 = ($242>>>0)<($243>>>0);
       if ($244) {
        $245 = $243;
        $246 = $242;
        $247 = $246 ^ -1;
        $248 = (($245) + ($247))|0;
        $372 = $248;
       } else {
        $249 = HEAP32[$42>>2]|0;
        $250 = $249;
        $251 = $242;
        $252 = (($250) - ($251))|0;
        $372 = $252;
       }
       $253 = HEAP32[$42>>2]|0;
       $254 = ($242|0)==($253|0);
       if ($254) {
        $255 = HEAP32[$11>>2]|0;
        $256 = HEAP32[$40>>2]|0;
        $257 = ($255|0)==($256|0);
        if ($257) {
         $m$3 = $372;$q$3 = $242;
        } else {
         $258 = ($256>>>0)<($255>>>0);
         $259 = $255;
         $260 = $256;
         $261 = (($259) + -1)|0;
         $262 = $253;
         $$v197 = $258 ? $261 : $262;
         $263 = (($$v197) - ($260))|0;
         $m$3 = $263;$q$3 = $256;
        }
       } else {
        $m$3 = $372;$q$3 = $242;
       }
       $264 = ($m$3|0)==(0);
       if ($264) {
        $$lcssa652 = $241;$b$6$lcssa = $b$6;$k$6$lcssa = $k$6;$n$6$lcssa = $n$6;$p$6$lcssa = $p$6;$q$3$lcssa = $q$3;
        label = 54;
        break L5;
       } else {
        $m$4 = $m$3;$q$4 = $q$3;
       }
      } else {
       $m$4 = $m$1150;$q$4 = $q$1149;
      }
     } while(0);
     $273 = ((($f$1151)) + 1|0);
     $274 = HEAP8[$f$1151>>0]|0;
     $275 = ((($q$4)) + 1|0);
     HEAP8[$q$4>>0] = $274;
     $276 = (($m$4) + -1)|0;
     $277 = HEAP32[$43>>2]|0;
     $278 = ($273|0)==($277|0);
     if ($278) {
      $279 = HEAP32[$40>>2]|0;
      $f$2 = $279;
     } else {
      $f$2 = $273;
     }
     $280 = HEAP32[$41>>2]|0;
     $281 = (($280) + -1)|0;
     HEAP32[$41>>2] = $281;
     $282 = ($281|0)==(0);
     if ($282) {
      $$7$lcssa = 0;$m$1$lcssa = $276;$q$1$lcssa = $275;
      break;
     } else {
      $$7148 = 0;$f$1151 = $f$2;$m$1150 = $276;$q$1149 = $275;
     }
    }
   }
   HEAP32[$1>>2] = 0;
   $$01 = $$7$lcssa;$b$0 = $b$6;$k$0 = $k$6;$m$0 = $m$1$lcssa;$n$0 = $n$6;$p$0 = $p$6;$q$0 = $q$1$lcssa;
   continue;
  }
 }
 switch (label|0) {
  case 10: {
   HEAP32[$5>>2] = $b$1184$lcssa;
   HEAP32[$7>>2] = $k$1185$lcssa;
   HEAP32[$3>>2] = $n$1187$lcssa;
   $64 = HEAP32[$z>>2]|0;
   $65 = $p$1186$lcssa;
   $66 = $64;
   $67 = (($65) - ($66))|0;
   $68 = ((($z)) + 8|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($67) + ($69))|0;
   HEAP32[$68>>2] = $70;
   HEAP32[$z>>2] = $p$1186$lcssa;
   HEAP32[$9>>2] = $q$0$lcssa747;
   $71 = (_inflate_flush($s,$z,$$1183$lcssa)|0);
   $$0 = $71;
   return ($$0|0);
   break;
  }
  case 19: {
   HEAP32[$1>>2] = 9;
   $99 = ((($z)) + 24|0);
   HEAP32[$99>>2] = 27051;
   HEAP32[$5>>2] = $$lcssa752;
   HEAP32[$7>>2] = $$lcssa753;
   HEAP32[$3>>2] = $n$1$lcssa$lcssa;
   $100 = HEAP32[$z>>2]|0;
   $101 = $p$1$lcssa$lcssa;
   $102 = $100;
   $103 = (($101) - ($102))|0;
   $104 = ((($z)) + 8|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = (($103) + ($105))|0;
   HEAP32[$104>>2] = $106;
   HEAP32[$z>>2] = $p$1$lcssa$lcssa;
   HEAP32[$9>>2] = $q$0$lcssa748;
   $107 = (_inflate_flush($s,$z,-3)|0);
   $$0 = $107;
   return ($$0|0);
   break;
  }
  case 23: {
   HEAP32[$5>>2] = $b$2158$lcssa;
   HEAP32[$7>>2] = $k$2159$lcssa;
   HEAP32[$3>>2] = $n$2161$lcssa;
   $119 = HEAP32[$z>>2]|0;
   $120 = $p$2160$lcssa;
   $121 = $119;
   $122 = (($120) - ($121))|0;
   $123 = ((($z)) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($122) + ($124))|0;
   HEAP32[$123>>2] = $125;
   HEAP32[$z>>2] = $p$2160$lcssa;
   HEAP32[$9>>2] = $q$0$lcssa744;
   $126 = (_inflate_flush($s,$z,$$2157$lcssa)|0);
   $$0 = $126;
   return ($$0|0);
   break;
  }
  case 28: {
   HEAP32[$5>>2] = $b$4171$lcssa;
   HEAP32[$7>>2] = $k$4172$lcssa;
   HEAP32[$3>>2] = $n$4174$lcssa;
   $148 = HEAP32[$z>>2]|0;
   $149 = $p$4173$lcssa;
   $150 = $148;
   $151 = (($149) - ($150))|0;
   $152 = ((($z)) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = (($151) + ($153))|0;
   HEAP32[$152>>2] = $154;
   HEAP32[$z>>2] = $p$4173$lcssa;
   HEAP32[$9>>2] = $q$0$lcssa745;
   $155 = (_inflate_flush($s,$z,$$4170$lcssa)|0);
   $$0 = $155;
   return ($$0|0);
   break;
  }
  case 33: {
   HEAP32[$1>>2] = 9;
   $178 = ((($z)) + 24|0);
   HEAP32[$178>>2] = 27079;
   HEAP32[$5>>2] = $$lcssa750;
   HEAP32[$7>>2] = $$lcssa751;
   HEAP32[$3>>2] = $n$4$lcssa$lcssa;
   $179 = HEAP32[$z>>2]|0;
   $180 = $p$4$lcssa$lcssa;
   $181 = $179;
   $182 = (($180) - ($181))|0;
   $183 = ((($z)) + 8|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = (($182) + ($184))|0;
   HEAP32[$183>>2] = $185;
   HEAP32[$z>>2] = $p$4$lcssa$lcssa;
   HEAP32[$9>>2] = $q$0$lcssa746;
   $186 = (_inflate_flush($s,$z,-3)|0);
   $$0 = $186;
   return ($$0|0);
   break;
  }
  case 37: {
   HEAP32[$5>>2] = $b$5135$lcssa;
   HEAP32[$7>>2] = $k$5136$lcssa;
   HEAP32[$3>>2] = $n$5138$lcssa;
   $198 = HEAP32[$z>>2]|0;
   $199 = $p$5137$lcssa;
   $200 = $198;
   $201 = (($199) - ($200))|0;
   $202 = ((($z)) + 8|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($201) + ($203))|0;
   HEAP32[$202>>2] = $204;
   HEAP32[$z>>2] = $p$5137$lcssa;
   HEAP32[$9>>2] = $q$0$lcssa742;
   $205 = (_inflate_flush($s,$z,$$5134$lcssa)|0);
   $$0 = $205;
   return ($$0|0);
   break;
  }
  case 54: {
   HEAP32[$5>>2] = $b$6$lcssa;
   HEAP32[$7>>2] = $k$6$lcssa;
   HEAP32[$3>>2] = $n$6$lcssa;
   $265 = HEAP32[$z>>2]|0;
   $266 = $p$6$lcssa;
   $267 = $265;
   $268 = (($266) - ($267))|0;
   $269 = ((($z)) + 8|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = (($268) + ($270))|0;
   HEAP32[$269>>2] = $271;
   HEAP32[$z>>2] = $p$6$lcssa;
   HEAP32[$9>>2] = $q$3$lcssa;
   $272 = (_inflate_flush($s,$z,$$lcssa652)|0);
   $$0 = $272;
   return ($$0|0);
   break;
  }
  case 70: {
   HEAP32[$5>>2] = $b$0$lcssa696;
   HEAP32[$7>>2] = $k$0$lcssa708;
   HEAP32[$3>>2] = $n$0$lcssa730;
   $320 = HEAP32[$z>>2]|0;
   $321 = $p$0$lcssa719;
   $322 = $320;
   $323 = (($321) - ($322))|0;
   $324 = ((($z)) + 8|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (($323) + ($325))|0;
   HEAP32[$324>>2] = $326;
   HEAP32[$z>>2] = $p$0$lcssa719;
   HEAP32[$9>>2] = $q$6$lcssa;
   $327 = (_inflate_flush($s,$z,$$lcssa749)|0);
   $$0 = $327;
   return ($$0|0);
   break;
  }
  case 72: {
   $332 = ($k$0$lcssa705>>>0)>(7);
   $333 = (($k$0$lcssa705) + -8)|0;
   $334 = ((($p$0$lcssa716)) + -1|0);
   $k$7 = $332 ? $333 : $k$0$lcssa705;
   $p$7 = $332 ? $334 : $p$0$lcssa716;
   $335 = $332&1;
   $n$7 = (($n$0$lcssa727) + ($335))|0;
   HEAP32[$9>>2] = $q$0$lcssa738;
   $336 = (_inflate_flush($s,$z,$$01$lcssa682)|0);
   $337 = HEAP32[$9>>2]|0;
   $338 = HEAP32[$11>>2]|0;
   $339 = ($338|0)==($337|0);
   if ($339) {
    HEAP32[$1>>2] = 8;
    $b$0704 = $b$0$lcssa693;$k$8 = $k$7;$n$8 = $n$7;$p$8 = $p$7;$q$8 = $337;
    break;
   }
   HEAP32[$5>>2] = $b$0$lcssa693;
   HEAP32[$7>>2] = $k$7;
   HEAP32[$3>>2] = $n$7;
   $340 = HEAP32[$z>>2]|0;
   $341 = $p$7;
   $342 = $340;
   $343 = (($341) - ($342))|0;
   $344 = ((($z)) + 8|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = (($343) + ($345))|0;
   HEAP32[$344>>2] = $346;
   HEAP32[$z>>2] = $p$7;
   HEAP32[$9>>2] = $337;
   $347 = (_inflate_flush($s,$z,$336)|0);
   $$0 = $347;
   return ($$0|0);
   break;
  }
  case 76: {
   HEAP32[$5>>2] = $b$0$lcssa695;
   HEAP32[$7>>2] = $k$0$lcssa707;
   HEAP32[$3>>2] = $n$0$lcssa729;
   $356 = HEAP32[$z>>2]|0;
   $357 = $p$0$lcssa718;
   $358 = $356;
   $359 = (($357) - ($358))|0;
   $360 = ((($z)) + 8|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = (($359) + ($361))|0;
   HEAP32[$360>>2] = $362;
   HEAP32[$z>>2] = $p$0$lcssa718;
   HEAP32[$9>>2] = $q$0$lcssa740;
   $363 = (_inflate_flush($s,$z,-3)|0);
   $$0 = $363;
   return ($$0|0);
   break;
  }
  case 77: {
   HEAP32[$5>>2] = $b$0$lcssa;
   HEAP32[$7>>2] = $k$0$lcssa;
   HEAP32[$3>>2] = $n$0$lcssa;
   $364 = HEAP32[$z>>2]|0;
   $365 = $p$0$lcssa;
   $366 = $364;
   $367 = (($365) - ($366))|0;
   $368 = ((($z)) + 8|0);
   $369 = HEAP32[$368>>2]|0;
   $370 = (($367) + ($369))|0;
   HEAP32[$368>>2] = $370;
   HEAP32[$z>>2] = $p$0$lcssa;
   HEAP32[$9>>2] = $q$0$lcssa;
   $371 = (_inflate_flush($s,$z,-2)|0);
   $$0 = $371;
   return ($$0|0);
   break;
  }
 }
 HEAP32[$5>>2] = $b$0704;
 HEAP32[$7>>2] = $k$8;
 HEAP32[$3>>2] = $n$8;
 $348 = HEAP32[$z>>2]|0;
 $349 = $p$8;
 $350 = $348;
 $351 = (($349) - ($350))|0;
 $352 = ((($z)) + 8|0);
 $353 = HEAP32[$352>>2]|0;
 $354 = (($351) + ($353))|0;
 HEAP32[$352>>2] = $354;
 HEAP32[$z>>2] = $p$8;
 HEAP32[$9>>2] = $q$8;
 $355 = (_inflate_flush($s,$z,1)|0);
 $$0 = $355;
 return ($$0|0);
}
function _huft_build($b,$n,$s,$d,$e,$t,$m,$hp,$hn,$v) {
 $b = $b|0;
 $n = $n|0;
 $s = $s|0;
 $d = $d|0;
 $e = $e|0;
 $t = $t|0;
 $m = $m|0;
 $hp = $hp|0;
 $hn = $hn|0;
 $v = $v|0;
 var $$ = 0, $$0 = 0, $$161 = 0, $$in = 0, $$lcssa = 0, $$lcssa206 = 0, $$lcssa212 = 0, $$lcssa216 = 0, $$lcssa222 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $f$035 = 0, $h$087 = 0, $h$1$lcssa = 0, $h$172 = 0, $h$2$lcssa = 0, $h$2$ph52 = 0, $h$239 = 0, $h$239$lcssa210 = 0, $h$3$lcssa = 0;
 var $h$366 = 0, $i$0 = 0, $i$1$j$0$ = 0, $i$1$lcssa = 0, $i$3 = 0, $i$488 = 0, $i$5$lcssa = 0, $i$573 = 0, $i$6 = 0, $j$0$ = 0, $j$0$lcssa = 0, $j$1104 = 0, $j$299 = 0, $j$4 = 0, $j$4$lcssa214 = 0, $j$560 = 0, $j$6 = 0, $k$089 = 0, $mask$0 = 0, $mask$0$in = 0;
 var $mask$0$in64 = 0, $mask$065 = 0, $not$ = 0, $or$cond = 0, $p$0 = 0, $p$1100 = 0, $p$2 = 0, $p$391 = 0, $p$4$lcssa = 0, $p$474 = 0, $p$5 = 0, $q$092 = 0, $q$1$lcssa = 0, $q$175 = 0, $q$2$lcssa = 0, $r$sroa$0$0 = 0, $r$sroa$81$093 = 0, $r$sroa$81$1$lcssa = 0, $r$sroa$81$176 = 0, $r$sroa$81$2$ph$lcssa25 = 0;
 var $r$sroa$81$2$ph53 = 0, $r$sroa$81$3 = 0, $u = 0, $w$094 = 0, $w$1$lcssa = 0, $w$177 = 0, $w$2$lcssa = 0, $w$2$ph54 = 0, $w$2$pn$lcssa = 0, $w$2$pn67 = 0, $w$240 = 0, $w$240$lcssa208 = 0, $w$240$phi = 0, $x = 0, $xp$0101 = 0, $xp$136 = 0, $y$0$lcssa = 0, $y$0105 = 0, $z$095 = 0, $z$1$lcssa = 0;
 var $z$178 = 0, $z$2$lcssa = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $c = sp + 128|0;
 $u = sp + 64|0;
 $x = sp;
 $0 = ((($c)) + 4|0);
 dest=$c; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $i$0 = $n;$p$0 = $b;
 while(1) {
  $1 = ((($p$0)) + 4|0);
  $2 = HEAP32[$p$0>>2]|0;
  $3 = (($c) + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 1)|0;
  HEAP32[$3>>2] = $5;
  $6 = (($i$0) + -1)|0;
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  } else {
   $i$0 = $6;$p$0 = $1;
  }
 }
 $8 = HEAP32[$c>>2]|0;
 $9 = ($8|0)==($n|0);
 if ($9) {
  HEAP32[$t>>2] = 0;
  HEAP32[$m>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$m>>2]|0;
 $11 = ((($c)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = ((($c)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0);
  if ($16) {
   $201 = ((($c)) + 12|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = ($202|0)==(0);
   if ($203) {
    $204 = ((($c)) + 16|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = ($205|0)==(0);
    if ($206) {
     $207 = ((($c)) + 20|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0);
     if ($209) {
      $210 = ((($c)) + 24|0);
      $211 = HEAP32[$210>>2]|0;
      $212 = ($211|0)==(0);
      if ($212) {
       $213 = ((($c)) + 28|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = ($214|0)==(0);
       if ($215) {
        $216 = ((($c)) + 32|0);
        $217 = HEAP32[$216>>2]|0;
        $218 = ($217|0)==(0);
        if ($218) {
         $219 = ((($c)) + 36|0);
         $220 = HEAP32[$219>>2]|0;
         $221 = ($220|0)==(0);
         if ($221) {
          $222 = ((($c)) + 40|0);
          $223 = HEAP32[$222>>2]|0;
          $224 = ($223|0)==(0);
          if ($224) {
           $225 = ((($c)) + 44|0);
           $226 = HEAP32[$225>>2]|0;
           $227 = ($226|0)==(0);
           if ($227) {
            $228 = ((($c)) + 48|0);
            $229 = HEAP32[$228>>2]|0;
            $230 = ($229|0)==(0);
            if ($230) {
             $231 = ((($c)) + 52|0);
             $232 = HEAP32[$231>>2]|0;
             $233 = ($232|0)==(0);
             if ($233) {
              $234 = ((($c)) + 56|0);
              $235 = HEAP32[$234>>2]|0;
              $236 = ($235|0)==(0);
              if ($236) {
               $237 = ((($c)) + 60|0);
               $238 = HEAP32[$237>>2]|0;
               $239 = ($238|0)==(0);
               $$161 = $239 ? 16 : 15;
               $j$0$lcssa = $$161;
              } else {
               $j$0$lcssa = 14;
              }
             } else {
              $j$0$lcssa = 13;
             }
            } else {
             $j$0$lcssa = 12;
            }
           } else {
            $j$0$lcssa = 11;
           }
          } else {
           $j$0$lcssa = 10;
          }
         } else {
          $j$0$lcssa = 9;
         }
        } else {
         $j$0$lcssa = 8;
        }
       } else {
        $j$0$lcssa = 7;
       }
      } else {
       $j$0$lcssa = 6;
      }
     } else {
      $j$0$lcssa = 5;
     }
    } else {
     $j$0$lcssa = 4;
    }
   } else {
    $j$0$lcssa = 3;
   }
  } else {
   $j$0$lcssa = 2;
  }
 } else {
  $j$0$lcssa = 1;
 }
 $17 = ($10>>>0)<($j$0$lcssa>>>0);
 $j$0$ = $17 ? $j$0$lcssa : $10;
 $18 = ((($c)) + 60|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = ((($c)) + 56|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $163 = ((($c)) + 52|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = ($164|0)==(0);
   if ($165) {
    $166 = ((($c)) + 48|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)==(0);
    if ($168) {
     $169 = ((($c)) + 44|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = ($170|0)==(0);
     if ($171) {
      $172 = ((($c)) + 40|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==(0);
      if ($174) {
       $175 = ((($c)) + 36|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0);
       if ($177) {
        $178 = ((($c)) + 32|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0);
        if ($180) {
         $181 = ((($c)) + 28|0);
         $182 = HEAP32[$181>>2]|0;
         $183 = ($182|0)==(0);
         if ($183) {
          $184 = ((($c)) + 24|0);
          $185 = HEAP32[$184>>2]|0;
          $186 = ($185|0)==(0);
          if ($186) {
           $187 = ((($c)) + 20|0);
           $188 = HEAP32[$187>>2]|0;
           $189 = ($188|0)==(0);
           if ($189) {
            $190 = ((($c)) + 16|0);
            $191 = HEAP32[$190>>2]|0;
            $192 = ($191|0)==(0);
            if ($192) {
             $193 = ((($c)) + 12|0);
             $194 = HEAP32[$193>>2]|0;
             $195 = ($194|0)==(0);
             if ($195) {
              $196 = ((($c)) + 8|0);
              $197 = HEAP32[$196>>2]|0;
              $198 = ($197|0)==(0);
              if ($198) {
               $199 = ((($c)) + 4|0);
               $200 = HEAP32[$199>>2]|0;
               $not$ = ($200|0)!=(0);
               $$ = $not$&1;
               $i$1$lcssa = $$;
              } else {
               $i$1$lcssa = 2;
              }
             } else {
              $i$1$lcssa = 3;
             }
            } else {
             $i$1$lcssa = 4;
            }
           } else {
            $i$1$lcssa = 5;
           }
          } else {
           $i$1$lcssa = 6;
          }
         } else {
          $i$1$lcssa = 7;
         }
        } else {
         $i$1$lcssa = 8;
        }
       } else {
        $i$1$lcssa = 9;
       }
      } else {
       $i$1$lcssa = 10;
      }
     } else {
      $i$1$lcssa = 11;
     }
    } else {
     $i$1$lcssa = 12;
    }
   } else {
    $i$1$lcssa = 13;
   }
  } else {
   $i$1$lcssa = 14;
  }
 } else {
  $i$1$lcssa = 15;
 }
 $24 = ($j$0$>>>0)>($i$1$lcssa>>>0);
 $i$1$j$0$ = $24 ? $i$1$lcssa : $j$0$;
 HEAP32[$m>>2] = $i$1$j$0$;
 $25 = 1 << $j$0$lcssa;
 $26 = ($j$0$lcssa>>>0)<($i$1$lcssa>>>0);
 L40: do {
  if ($26) {
   $j$1104 = $j$0$lcssa;$y$0105 = $25;
   while(1) {
    $27 = (($c) + ($j$1104<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($y$0105) - ($28))|0;
    $30 = ($29|0)<(0);
    if ($30) {
     $$0 = -3;
     break;
    }
    $31 = (($j$1104) + 1)|0;
    $32 = $29 << 1;
    $33 = ($31>>>0)<($i$1$lcssa>>>0);
    if ($33) {
     $j$1104 = $31;$y$0105 = $32;
    } else {
     $y$0$lcssa = $32;
     break L40;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $y$0$lcssa = $25;
  }
 } while(0);
 $34 = (($c) + ($i$1$lcssa<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($y$0$lcssa) - ($35))|0;
 $37 = ($36|0)<(0);
 if ($37) {
  $$0 = -3;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$34>>2] = $y$0$lcssa;
 $38 = ((($x)) + 4|0);
 HEAP32[$38>>2] = 0;
 $39 = (($i$1$lcssa) + -1)|0;
 $40 = ($39|0)==(0);
 if ($40) {
  $i$3 = 0;$p$2 = $b;
 } else {
  $41 = ((($x)) + 8|0);
  $47 = $39;$j$299 = 0;$p$1100 = $0;$xp$0101 = $41;
  while(1) {
   $42 = ((($p$1100)) + 4|0);
   $43 = HEAP32[$p$1100>>2]|0;
   $44 = (($43) + ($j$299))|0;
   $45 = ((($xp$0101)) + 4|0);
   HEAP32[$xp$0101>>2] = $44;
   $46 = (($47) + -1)|0;
   $48 = ($46|0)==(0);
   if ($48) {
    $i$3 = 0;$p$2 = $b;
    break;
   } else {
    $47 = $46;$j$299 = $44;$p$1100 = $42;$xp$0101 = $45;
   }
  }
 }
 while(1) {
  $49 = ((($p$2)) + 4|0);
  $50 = HEAP32[$p$2>>2]|0;
  $51 = ($50|0)==(0);
  if (!($51)) {
   $52 = (($x) + ($50<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 1)|0;
   HEAP32[$52>>2] = $54;
   $55 = (($v) + ($53<<2)|0);
   HEAP32[$55>>2] = $i$3;
  }
  $56 = (($i$3) + 1)|0;
  $57 = ($56>>>0)<($n>>>0);
  if ($57) {
   $i$3 = $56;$p$2 = $49;
  } else {
   break;
  }
 }
 $58 = (($x) + ($i$1$lcssa<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$x>>2] = 0;
 HEAP32[$u>>2] = 0;
 $60 = ($j$0$lcssa>>>0)>($i$1$lcssa>>>0);
 L59: do {
  if (!($60)) {
   $61 = (0 - ($i$1$j$0$))|0;
   $62 = (($v) + ($59<<2)|0);
   $63 = $i$1$j$0$&255;
   $h$087 = -1;$i$488 = 0;$k$089 = $j$0$lcssa;$p$391 = $v;$q$092 = 0;$r$sroa$81$093 = 0;$w$094 = $61;$z$095 = 0;
   L61: while(1) {
    $64 = (($c) + ($k$089<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(0);
    if ($66) {
     $h$1$lcssa = $h$087;$i$5$lcssa = $i$488;$p$4$lcssa = $p$391;$q$1$lcssa = $q$092;$r$sroa$81$1$lcssa = $r$sroa$81$093;$w$1$lcssa = $w$094;$z$1$lcssa = $z$095;
    } else {
     $67 = (($k$089) + -1)|0;
     $68 = 1 << $67;
     $$in = $65;$h$172 = $h$087;$i$573 = $i$488;$p$474 = $p$391;$q$175 = $q$092;$r$sroa$81$176 = $r$sroa$81$093;$w$177 = $w$094;$z$178 = $z$095;
     while(1) {
      $70 = (($$in) + -1)|0;
      $71 = (($w$177) + ($i$1$j$0$))|0;
      $72 = ($k$089|0)>($71|0);
      L67: do {
       if ($72) {
        $240 = $71;$h$2$ph52 = $h$172;$r$sroa$81$2$ph53 = $r$sroa$81$176;$w$2$ph54 = $w$177;
        while(1) {
         $75 = $240;$h$239 = $h$2$ph52;$w$240 = $w$2$ph54;
         while(1) {
          $73 = (($h$239) + 1)|0;
          $74 = (($i$1$lcssa) - ($75))|0;
          $76 = ($74>>>0)>($i$1$j$0$>>>0);
          $77 = $76 ? $i$1$j$0$ : $74;
          $78 = (($k$089) - ($75))|0;
          $79 = 1 << $78;
          $80 = ($79>>>0)>($$in>>>0);
          $81 = ($78>>>0)<($77>>>0);
          $or$cond = $80 & $81;
          L72: do {
           if ($or$cond) {
            $82 = (($78) + 1)|0;
            $83 = ($82>>>0)<($77>>>0);
            if ($83) {
             $84 = (($79) - ($$in))|0;
             $89 = $82;$f$035 = $84;$xp$136 = $64;
             while(1) {
              $86 = $f$035 << 1;
              $91 = ((($xp$136)) + 4|0);
              $87 = HEAP32[$91>>2]|0;
              $92 = ($86>>>0)>($87>>>0);
              if (!($92)) {
               $j$4 = $89;
               break L72;
              }
              $85 = (($86) - ($87))|0;
              $88 = (($89) + 1)|0;
              $90 = ($88>>>0)<($77>>>0);
              if ($90) {
               $89 = $88;$f$035 = $85;$xp$136 = $91;
              } else {
               $j$4 = $88;
               break;
              }
             }
            } else {
             $j$4 = $82;
            }
           } else {
            $j$4 = $78;
           }
          } while(0);
          $93 = 1 << $j$4;
          $94 = HEAP32[$hn>>2]|0;
          $95 = (($94) + ($93))|0;
          $96 = ($95>>>0)>(1440);
          if ($96) {
           $$0 = -3;
           break L61;
          }
          $97 = (($hp) + ($94<<3)|0);
          $98 = (($u) + ($73<<2)|0);
          HEAP32[$98>>2] = $97;
          $99 = HEAP32[$hn>>2]|0;
          $100 = (($99) + ($93))|0;
          HEAP32[$hn>>2] = $100;
          $101 = ($73|0)==(0);
          if (!($101)) {
           $$lcssa = $97;$$lcssa206 = $75;$$lcssa212 = $73;$$lcssa216 = $93;$h$239$lcssa210 = $h$239;$j$4$lcssa214 = $j$4;$w$240$lcssa208 = $w$240;
           break;
          }
          HEAP32[$t>>2] = $97;
          $117 = (($75) + ($i$1$j$0$))|0;
          $118 = ($k$089|0)>($117|0);
          if ($118) {
           $w$240$phi = $75;$75 = $117;$h$239 = 0;$w$240 = $w$240$phi;
          } else {
           $h$2$lcssa = 0;$q$2$lcssa = $97;$r$sroa$81$2$ph$lcssa25 = $r$sroa$81$2$ph53;$w$2$lcssa = $75;$z$2$lcssa = $93;
           break L67;
          }
         }
         $102 = (($x) + ($$lcssa212<<2)|0);
         HEAP32[$102>>2] = $i$573;
         $103 = $j$4$lcssa214&255;
         $104 = $i$573 >>> $w$240$lcssa208;
         $105 = (($u) + ($h$239$lcssa210<<2)|0);
         $106 = HEAP32[$105>>2]|0;
         $107 = $$lcssa;
         $108 = $106;
         $109 = (($107) - ($108))|0;
         $110 = $109 >> 3;
         $111 = (($110) - ($104))|0;
         $112 = (($106) + ($104<<3)|0);
         HEAP8[$112>>0] = $103;
         $113 = ((($112)) + 1|0);
         HEAP8[$113>>0] = $63;
         $114 = (((($106) + ($104<<3)|0)) + 4|0);
         HEAP32[$114>>2] = $111;
         $115 = (($$lcssa206) + ($i$1$j$0$))|0;
         $116 = ($k$089|0)>($115|0);
         if ($116) {
          $240 = $115;$h$2$ph52 = $$lcssa212;$r$sroa$81$2$ph53 = $111;$w$2$ph54 = $$lcssa206;
         } else {
          $h$2$lcssa = $$lcssa212;$q$2$lcssa = $$lcssa;$r$sroa$81$2$ph$lcssa25 = $111;$w$2$lcssa = $$lcssa206;$z$2$lcssa = $$lcssa216;
          break;
         }
        }
       } else {
        $h$2$lcssa = $h$172;$q$2$lcssa = $q$175;$r$sroa$81$2$ph$lcssa25 = $r$sroa$81$176;$w$2$lcssa = $w$177;$z$2$lcssa = $z$178;
       }
      } while(0);
      $119 = (($k$089) - ($w$2$lcssa))|0;
      $120 = $119&255;
      $121 = ($p$474>>>0)<($62>>>0);
      do {
       if ($121) {
        $122 = HEAP32[$p$474>>2]|0;
        $123 = ($122>>>0)<($s>>>0);
        if ($123) {
         $124 = ($122>>>0)<(256);
         $125 = $124 ? 0 : 96;
         $126 = ((($p$474)) + 4|0);
         $p$5 = $126;$r$sroa$0$0 = $125;$r$sroa$81$3 = $122;
         break;
        } else {
         $127 = (($122) - ($s))|0;
         $128 = (($e) + ($127<<2)|0);
         $129 = HEAP32[$128>>2]|0;
         $130 = (($129) + 80)|0;
         $131 = $130&255;
         $132 = ((($p$474)) + 4|0);
         $133 = (($d) + ($127<<2)|0);
         $134 = HEAP32[$133>>2]|0;
         $p$5 = $132;$r$sroa$0$0 = $131;$r$sroa$81$3 = $134;
         break;
        }
       } else {
        $p$5 = $p$474;$r$sroa$0$0 = -64;$r$sroa$81$3 = $r$sroa$81$2$ph$lcssa25;
       }
      } while(0);
      $135 = 1 << $119;
      $136 = $i$573 >>> $w$2$lcssa;
      $137 = ($136>>>0)<($z$2$lcssa>>>0);
      if ($137) {
       $j$560 = $136;
       while(1) {
        $138 = (($q$2$lcssa) + ($j$560<<3)|0);
        HEAP8[$138>>0] = $r$sroa$0$0;
        $139 = ((($138)) + 1|0);
        HEAP8[$139>>0] = $120;
        $140 = (((($q$2$lcssa) + ($j$560<<3)|0)) + 4|0);
        HEAP32[$140>>2] = $r$sroa$81$3;
        $141 = (($j$560) + ($135))|0;
        $142 = ($141>>>0)<($z$2$lcssa>>>0);
        if ($142) {
         $j$560 = $141;
        } else {
         $i$6 = $i$573;$j$6 = $68;
         break;
        }
       }
      } else {
       $i$6 = $i$573;$j$6 = $68;
      }
      while(1) {
       $143 = $j$6 & $i$6;
       $144 = ($143|0)==(0);
       $145 = $j$6 ^ $i$6;
       $146 = $j$6 >>> 1;
       if ($144) {
        $$lcssa222 = $145;
        break;
       } else {
        $i$6 = $145;$j$6 = $146;
       }
      }
      $mask$0$in64 = 1 << $w$2$lcssa;
      $mask$065 = (($mask$0$in64) + -1)|0;
      $147 = $mask$065 & $$lcssa222;
      $148 = (($x) + ($h$2$lcssa<<2)|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $h$3$lcssa = $h$2$lcssa;$w$2$pn$lcssa = $w$2$lcssa;
      } else {
       $h$366 = $h$2$lcssa;$w$2$pn67 = $w$2$lcssa;
       while(1) {
        $151 = (($h$366) + -1)|0;
        $152 = (($w$2$pn67) - ($i$1$j$0$))|0;
        $mask$0$in = 1 << $152;
        $mask$0 = (($mask$0$in) + -1)|0;
        $153 = $mask$0 & $$lcssa222;
        $154 = (($x) + ($151<<2)|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ($153|0)==($155|0);
        if ($156) {
         $h$3$lcssa = $151;$w$2$pn$lcssa = $152;
         break;
        } else {
         $h$366 = $151;$w$2$pn67 = $152;
        }
       }
      }
      $69 = ($70|0)==(0);
      if ($69) {
       $h$1$lcssa = $h$3$lcssa;$i$5$lcssa = $$lcssa222;$p$4$lcssa = $p$5;$q$1$lcssa = $q$2$lcssa;$r$sroa$81$1$lcssa = $r$sroa$81$3;$w$1$lcssa = $w$2$pn$lcssa;$z$1$lcssa = $z$2$lcssa;
       break;
      } else {
       $$in = $70;$h$172 = $h$3$lcssa;$i$573 = $$lcssa222;$p$474 = $p$5;$q$175 = $q$2$lcssa;$r$sroa$81$176 = $r$sroa$81$3;$w$177 = $w$2$pn$lcssa;$z$178 = $z$2$lcssa;
      }
     }
    }
    $157 = (($k$089) + 1)|0;
    $158 = ($k$089|0)<($i$1$lcssa|0);
    if ($158) {
     $h$087 = $h$1$lcssa;$i$488 = $i$5$lcssa;$k$089 = $157;$p$391 = $p$4$lcssa;$q$092 = $q$1$lcssa;$r$sroa$81$093 = $r$sroa$81$1$lcssa;$w$094 = $w$1$lcssa;$z$095 = $z$1$lcssa;
    } else {
     break L59;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $159 = ($y$0$lcssa|0)!=($35|0);
 $160 = ($i$1$lcssa|0)!=(1);
 $161 = $160 & $159;
 $162 = $161 ? -5 : 0;
 $$0 = $162;
 STACKTOP = sp;return ($$0|0);
}
function _inflateReset($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($z)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($z)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($z)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($z)) + 24|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$1>>2]|0;
 $8 = ((($7)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 $11 = $10 ? 7 : 0;
 HEAP32[$7>>2] = $11;
 $12 = HEAP32[$1>>2]|0;
 $13 = ((($12)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 _inflate_blocks_reset($14,$z,0);
 return;
}
function _ft_gzip_alloc($memory,$items,$size) {
 $memory = $memory|0;
 $items = $items|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = Math_imul($size, $items)|0;
 $1 = (_ft_mem_alloc($memory,$0,$error)|0);
 STACKTOP = sp;return ($1|0);
}
function _ft_gzip_free($memory,$address) {
 $memory = $memory|0;
 $address = $address|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ft_mem_free($memory,$address);
 return;
}
function _inflateInit2_($z) {
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($z|0)==(0|0);
 if ($0) {
  $$0 = -2;
  return ($$0|0);
 }
 $1 = ((($z)) + 24|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($z)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$2>>2] = 49;
  $5 = ((($z)) + 40|0);
  HEAP32[$5>>2] = 0;
 }
 $6 = ((($z)) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$6>>2] = 21;
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($z)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiii[$9 & 127]($11,1,24)|0);
 $13 = ((($z)) + 28|0);
 HEAP32[$13>>2] = $12;
 $14 = ($12|0)==(0|0);
 if ($14) {
  $$0 = -4;
  return ($$0|0);
 }
 $15 = ((($12)) + 20|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP32[$13>>2]|0;
 $17 = ((($16)) + 12|0);
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$13>>2]|0;
 $19 = ((($18)) + 12|0);
 HEAP32[$19>>2] = 1;
 $20 = HEAP32[$13>>2]|0;
 $21 = ((($20)) + 16|0);
 HEAP32[$21>>2] = 15;
 $22 = HEAP32[$13>>2]|0;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0);
 $26 = $25 ? 0 : 50;
 $27 = (_inflate_blocks_new($z,$26)|0);
 $28 = HEAP32[$13>>2]|0;
 $29 = ((($28)) + 20|0);
 HEAP32[$29>>2] = $27;
 $30 = ($27|0)==(0|0);
 if ($30) {
  _inflateEnd($z);
  $$0 = -4;
  return ($$0|0);
 } else {
  _inflateReset($z);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _zcalloc($opaque,$items,$size) {
 $opaque = $opaque|0;
 $items = $items|0;
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_gzip_alloc($opaque,$items,$size)|0);
 return ($0|0);
}
function _zcfree($opaque,$ptr) {
 $opaque = $opaque|0;
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ft_gzip_free($opaque,$ptr);
 return;
}
function _adler32($adler,$buf,$len) {
 $adler = $adler|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0113 = 0, $$014 = 0, $$02 = 0, $$1$lcssa = 0, $$16 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$lcssa46 = 0, $$lcssa47 = 0, $$lcssa48 = 0, $$op$op = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $k$0$lcssa = 0;
 var $k$09 = 0, $k$1 = 0, $s1$0$lcssa = 0, $s1$015 = 0, $s1$1$lcssa = 0, $s1$17 = 0, $s1$2 = 0, $s1$3 = 0, $s2$0$lcssa = 0, $s2$016 = 0, $s2$1$lcssa = 0, $s2$18 = 0, $s2$2 = 0, $s2$3 = 0, $scevgep$sum = 0, $scevgep29 = 0, $scevgep30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $adler & 65535;
 $1 = $adler >>> 16;
 $2 = ($buf|0)==(0|0);
 if ($2) {
  $$02 = 1;
  return ($$02|0);
 }
 $3 = ($len|0)==(0);
 if ($3) {
  $s1$0$lcssa = $0;$s2$0$lcssa = $1;
 } else {
  $$0113 = $buf;$$014 = $len;$s1$015 = $0;$s2$016 = $1;
  while(1) {
   $4 = ($$014>>>0)<(5552);
   $5 = $4 ? $$014 : 5552;
   $6 = (($$014) - ($5))|0;
   $7 = ($5|0)>(15);
   if ($7) {
    $8 = ($$014>>>0)<(5552);
    $$op$op = (($$014) + -16)|0;
    $9 = $8 ? $$op$op : 5536;
    $10 = $9 & -16;
    $$16 = $$0113;$k$09 = $5;$s1$17 = $s1$015;$s2$18 = $s2$016;
    while(1) {
     $11 = HEAP8[$$16>>0]|0;
     $12 = $11&255;
     $13 = (($12) + ($s1$17))|0;
     $14 = (($13) + ($s2$18))|0;
     $15 = ((($$16)) + 1|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = $16&255;
     $18 = (($13) + ($17))|0;
     $19 = (($14) + ($18))|0;
     $20 = ((($$16)) + 2|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = $21&255;
     $23 = (($18) + ($22))|0;
     $24 = (($19) + ($23))|0;
     $25 = ((($$16)) + 3|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = $26&255;
     $28 = (($23) + ($27))|0;
     $29 = (($24) + ($28))|0;
     $30 = ((($$16)) + 4|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = $31&255;
     $33 = (($28) + ($32))|0;
     $34 = (($29) + ($33))|0;
     $35 = ((($$16)) + 5|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = (($33) + ($37))|0;
     $39 = (($34) + ($38))|0;
     $40 = ((($$16)) + 6|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41&255;
     $43 = (($38) + ($42))|0;
     $44 = (($39) + ($43))|0;
     $45 = ((($$16)) + 7|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = (($43) + ($47))|0;
     $49 = (($44) + ($48))|0;
     $50 = ((($$16)) + 8|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51&255;
     $53 = (($48) + ($52))|0;
     $54 = (($49) + ($53))|0;
     $55 = ((($$16)) + 9|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = (($53) + ($57))|0;
     $59 = (($54) + ($58))|0;
     $60 = ((($$16)) + 10|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = (($58) + ($62))|0;
     $64 = (($59) + ($63))|0;
     $65 = ((($$16)) + 11|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $66&255;
     $68 = (($63) + ($67))|0;
     $69 = (($64) + ($68))|0;
     $70 = ((($$16)) + 12|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71&255;
     $73 = (($68) + ($72))|0;
     $74 = (($69) + ($73))|0;
     $75 = ((($$16)) + 13|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = $76&255;
     $78 = (($73) + ($77))|0;
     $79 = (($74) + ($78))|0;
     $80 = ((($$16)) + 14|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81&255;
     $83 = (($78) + ($82))|0;
     $84 = (($79) + ($83))|0;
     $85 = ((($$16)) + 15|0);
     $86 = HEAP8[$85>>0]|0;
     $87 = $86&255;
     $88 = (($83) + ($87))|0;
     $89 = (($84) + ($88))|0;
     $90 = ((($$16)) + 16|0);
     $91 = (($k$09) + -16)|0;
     $92 = ($91|0)>(15);
     if ($92) {
      $$16 = $90;$k$09 = $91;$s1$17 = $88;$s2$18 = $89;
     } else {
      $$lcssa = $88;$$lcssa46 = $89;
      break;
     }
    }
    $93 = (($9) - ($10))|0;
    $scevgep$sum = (($10) + 16)|0;
    $scevgep29 = (($$0113) + ($scevgep$sum)|0);
    $$1$lcssa = $scevgep29;$k$0$lcssa = $93;$s1$1$lcssa = $$lcssa;$s2$1$lcssa = $$lcssa46;
   } else {
    $$1$lcssa = $$0113;$k$0$lcssa = $$014;$s1$1$lcssa = $s1$015;$s2$1$lcssa = $s2$016;
   }
   $94 = ($k$0$lcssa|0)==(0);
   if ($94) {
    $$3 = $$1$lcssa;$s1$3 = $s1$1$lcssa;$s2$3 = $s2$1$lcssa;
   } else {
    $$2 = $$1$lcssa;$k$1 = $k$0$lcssa;$s1$2 = $s1$1$lcssa;$s2$2 = $s2$1$lcssa;
    while(1) {
     $95 = ((($$2)) + 1|0);
     $96 = HEAP8[$$2>>0]|0;
     $97 = $96&255;
     $98 = (($97) + ($s1$2))|0;
     $99 = (($98) + ($s2$2))|0;
     $100 = (($k$1) + -1)|0;
     $101 = ($100|0)==(0);
     if ($101) {
      $$lcssa47 = $98;$$lcssa48 = $99;
      break;
     } else {
      $$2 = $95;$k$1 = $100;$s1$2 = $98;$s2$2 = $99;
     }
    }
    $scevgep30 = (($$1$lcssa) + ($k$0$lcssa)|0);
    $$3 = $scevgep30;$s1$3 = $$lcssa47;$s2$3 = $$lcssa48;
   }
   $102 = (($s1$3>>>0) % 65521)&-1;
   $103 = (($s2$3>>>0) % 65521)&-1;
   $104 = ($$014|0)==($5|0);
   if ($104) {
    $s1$0$lcssa = $102;$s2$0$lcssa = $103;
    break;
   } else {
    $$0113 = $$3;$$014 = $6;$s1$015 = $102;$s2$016 = $103;
   }
  }
 }
 $105 = $s2$0$lcssa << 16;
 $106 = $105 | $s1$0$lcssa;
 $$02 = $106;
 return ($$02|0);
}
function _inflate_blocks_new($z,$c) {
 $z = $z|0;
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($z)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($z)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$1 & 127]($3,1,64)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$6 & 127]($7,8,1440)|0);
 $9 = ((($4)) + 36|0);
 HEAP32[$9>>2] = $8;
 $10 = ($8|0)==(0|0);
 if ($10) {
  $11 = ((($z)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_vii[$12 & 31]($13,$4);
  $$0 = 0;
  return ($$0|0);
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$2>>2]|0;
 $16 = (FUNCTION_TABLE_iiii[$14 & 127]($15,1,32768)|0);
 $17 = ((($4)) + 40|0);
 HEAP32[$17>>2] = $16;
 $18 = ($16|0)==(0|0);
 if ($18) {
  $19 = ((($z)) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = HEAP32[$2>>2]|0;
  $22 = HEAP32[$9>>2]|0;
  FUNCTION_TABLE_vii[$20 & 31]($21,$22);
  $23 = HEAP32[$19>>2]|0;
  $24 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_vii[$23 & 31]($24,$4);
  $$0 = 0;
  return ($$0|0);
 } else {
  $25 = ((($16)) + 32768|0);
  $26 = ((($4)) + 44|0);
  HEAP32[$26>>2] = $25;
  $27 = ((($4)) + 56|0);
  HEAP32[$27>>2] = $c;
  HEAP32[$4>>2] = 0;
  _inflate_blocks_reset($4,$z,0);
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _FT_Stream_OpenLZW($stream,$source) {
 $stream = $stream|0;
 $source = $source|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($source)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_ft_lzw_check_header($source)|0);
 HEAP32[$error>>2] = $2;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $15 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($15|0);
 }
 dest=$stream; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($stream)) + 28|0);
 HEAP32[$4>>2] = $1;
 $5 = (_ft_mem_alloc($1,4292,$error)|0);
 $6 = HEAP32[$error>>2]|0;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = (_ft_lzw_file_init($5,$stream,$source)|0);
   HEAP32[$error>>2] = $8;
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = ((($stream)) + 12|0);
    HEAP32[$10>>2] = $5;
    break;
   }
   _ft_mem_free($1,$5);
   $15 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($15|0);
  }
 } while(0);
 $11 = ((($stream)) + 4|0);
 HEAP32[$11>>2] = 2147483647;
 $12 = ((($stream)) + 8|0);
 HEAP32[$12>>2] = 0;
 HEAP32[$stream>>2] = 0;
 $13 = ((($stream)) + 20|0);
 HEAP32[$13>>2] = 39;
 $14 = ((($stream)) + 24|0);
 HEAP32[$14>>2] = 62;
 $15 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _ft_lzwstate_reset($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($state)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($state)) + 24|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($state)) + 28|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($state)) + 32|0);
 HEAP8[$3>>0] = 0;
 $4 = ((($state)) + 36|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($state)) + 92|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($state)) + 52|0);
 HEAP32[$6>>2] = 9;
 HEAP32[$state>>2] = 0;
 return;
}
function _ft_lzwstate_init($state,$source) {
 $state = $state|0;
 $source = $source|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($state|0),0,168)|0;
 $0 = ((($state)) + 164|0);
 HEAP32[$0>>2] = $source;
 $1 = ((($source)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($state)) + 168|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($state)) + 76|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($state)) + 80|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($state)) + 84|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($state)) + 100|0);
 $8 = ((($state)) + 88|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($state)) + 96|0);
 HEAP32[$9>>2] = 64;
 _ft_lzwstate_reset($state);
 return;
}
function _ft_lzwstate_done($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($state)) + 168|0);
 $1 = HEAP32[$0>>2]|0;
 _ft_lzwstate_reset($state);
 $2 = ((($state)) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($state)) + 100|0);
 $5 = ($3|0)==($4|0);
 if (!($5)) {
  _ft_mem_free($1,$3);
  HEAP32[$2>>2] = 0;
 }
 $6 = ((($state)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 _ft_mem_free($1,$7);
 _memset(($state|0),0,172)|0;
 return;
}
function _ft_lzwstate_io($state,$buffer,$out_size) {
 $state = $state|0;
 $buffer = $buffer|0;
 $out_size = $out_size|0;
 var $$lcssa79 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $code$0$ph37 = 0, $code$019 = 0, $code$1 = 0, $in_code$0$ph = 0, $in_code$1$ph = 0;
 var $in_code$2 = 0, $in_code$3 = 0, $max_bits = 0, $old_char$0$ph = 0, $old_char$021 = 0, $old_char$021$lcssa = 0, $old_char$02184 = 0, $old_char$1$ph = 0, $old_char$2 = 0, $old_char$3 = 0, $old_code$0$ph = 0, $old_code$020 = 0, $old_code$020$lcssa = 0, $old_code$02087 = 0, $old_code$02088 = 0, $old_code$1$ph = 0, $old_code$2 = 0, $old_code$3 = 0, $result$0$ph = 0, $result$1 = 0;
 var $result$1$lcssa = 0, $result$1$ph = 0, $result$2 = 0, $result$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $max_bits = sp;
 $0 = ((($state)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($state)) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($state)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($out_size|0)==(0);
 if ($6) {
  $in_code$2 = $5;$old_char$2 = $1;$old_code$2 = $3;$result$2 = 0;
  HEAP32[$2>>2] = $old_code$2;
  HEAP32[$0>>2] = $old_char$2;
  HEAP32[$4>>2] = $in_code$2;
  STACKTOP = sp;return ($result$2|0);
 }
 $7 = HEAP32[$state>>2]|0;
 switch ($7|0) {
 case 0:  {
  label = 3;
  break;
 }
 case 1:  {
  $in_code$0$ph = $5;$old_char$0$ph = $1;$old_code$0$ph = $3;$result$0$ph = 0;
  label = 14;
  break;
 }
 case 2:  {
  $in_code$1$ph = $5;$old_char$1$ph = $1;$old_code$1$ph = $3;$result$1$ph = 0;
  label = 33;
  break;
 }
 default: {
  $in_code$2 = $5;$old_char$2 = $1;$old_code$2 = $3;$result$2 = 0;
  HEAP32[$2>>2] = $old_code$2;
  HEAP32[$0>>2] = $old_char$2;
  HEAP32[$4>>2] = $in_code$2;
  STACKTOP = sp;return ($result$2|0);
 }
 }
 do {
  if ((label|0) == 3) {
   $8 = ((($state)) + 164|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_FT_Stream_Seek($9,2)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = HEAP32[$8>>2]|0;
    $13 = (_FT_Stream_TryRead($12,$max_bits,1)|0);
    $14 = ($13|0)==(1);
    if ($14) {
     $15 = HEAP8[$max_bits>>0]|0;
     $16 = $15&255;
     $17 = $16 & 31;
     $18 = ((($state)) + 40|0);
     HEAP32[$18>>2] = $17;
     $19 = HEAP8[$max_bits>>0]|0;
     $20 = $19&255;
     $21 = $20 & 128;
     $22 = ((($state)) + 44|0);
     HEAP32[$22>>2] = $21;
     $23 = HEAP32[$18>>2]|0;
     $24 = 1 << $23;
     $25 = (($24) + -256)|0;
     $26 = ((($state)) + 48|0);
     HEAP32[$26>>2] = $25;
     $27 = HEAP32[$18>>2]|0;
     $28 = ($27>>>0)>(16);
     if ($28) {
      $in_code$3 = $5;$old_char$3 = $1;$old_code$3 = $3;$result$3 = 0;
      label = 44;
     } else {
      $29 = ((($state)) + 52|0);
      HEAP32[$29>>2] = 9;
      $30 = HEAP32[$22>>2]|0;
      $31 = ($30|0)!=(0);
      $32 = $31&1;
      $33 = ((($state)) + 56|0);
      HEAP32[$33>>2] = $32;
      $34 = HEAP32[$29>>2]|0;
      $35 = HEAP32[$18>>2]|0;
      $36 = ($34>>>0)<($35>>>0);
      if ($36) {
       $37 = 1 << $34;
       $38 = (($37) + -256)|0;
       $42 = $38;
      } else {
       $39 = HEAP32[$26>>2]|0;
       $40 = (($39) + 1)|0;
       $42 = $40;
      }
      $41 = ((($state)) + 60|0);
      HEAP32[$41>>2] = $42;
      $43 = (_ft_lzwstate_get_code($state)|0);
      $44 = ($43>>>0)>(255);
      if ($44) {
       $in_code$3 = 0;$old_char$3 = $1;$old_code$3 = $3;$result$3 = 0;
       label = 44;
      } else {
       $45 = ($buffer|0)==(0|0);
       if (!($45)) {
        $46 = $43&255;
        HEAP8[$buffer>>0] = $46;
       }
       $47 = ($out_size>>>0)<(2);
       if ($47) {
        $in_code$2 = 0;$old_char$2 = $43;$old_code$2 = $43;$result$2 = 1;
        HEAP32[$2>>2] = $old_code$2;
        HEAP32[$0>>2] = $old_char$2;
        HEAP32[$4>>2] = $in_code$2;
        STACKTOP = sp;return ($result$2|0);
       } else {
        HEAP32[$state>>2] = 1;
        $in_code$0$ph = 0;$old_char$0$ph = $43;$old_code$0$ph = $43;$result$0$ph = 1;
        label = 14;
        break;
       }
      }
     }
    } else {
     $in_code$3 = $5;$old_char$3 = $1;$old_code$3 = $3;$result$3 = 0;
     label = 44;
    }
   } else {
    $in_code$3 = $5;$old_char$3 = $1;$old_code$3 = $3;$result$3 = 0;
    label = 44;
   }
  }
 } while(0);
 L22: while(1) {
  if ((label|0) == 14) {
   label = 0;
   $48 = (_ft_lzwstate_get_code($state)|0);
   $49 = ($48|0)<(0);
   if ($49) {
    $in_code$3 = $in_code$0$ph;$old_char$3 = $old_char$0$ph;$old_code$3 = $old_code$0$ph;$result$3 = $result$0$ph;
    label = 44;
    continue;
   }
   $50 = ((($state)) + 44|0);
   $51 = ((($state)) + 56|0);
   $52 = ((($state)) + 32|0);
   $54 = $48;$old_char$021 = $old_char$0$ph;$old_code$020 = $old_code$0$ph;
   while(1) {
    $53 = ($54|0)==(256);
    if (!($53)) {
     $$lcssa79 = $54;$old_char$021$lcssa = $old_char$021;$old_code$020$lcssa = $old_code$020;
     label = 19;
     break;
    }
    $55 = HEAP32[$50>>2]|0;
    $56 = ($55|0)==(0);
    if ($56) {
     $61 = $54;$old_char$02184 = $old_char$021;$old_code$02088 = $old_code$020;
     label = 20;
     break;
    }
    HEAP32[$51>>2] = 0;
    HEAP8[$52>>0] = 1;
    $57 = (_ft_lzwstate_get_code($state)|0);
    $58 = ($57|0)<(0);
    if ($58) {
     $in_code$3 = $in_code$0$ph;$old_char$3 = 0;$old_code$3 = 0;$result$3 = $result$0$ph;
     label = 44;
     continue L22;
    } else {
     $54 = $57;$old_char$021 = 0;$old_code$020 = 0;
    }
   }
   if ((label|0) == 19) {
    label = 0;
    $59 = ($$lcssa79>>>0)>(255);
    if ($59) {
     $61 = $$lcssa79;$old_char$02184 = $old_char$021$lcssa;$old_code$02088 = $old_code$020$lcssa;
     label = 20;
    } else {
     $152 = $$lcssa79;$code$1 = $$lcssa79;$old_code$02087 = $old_code$020$lcssa;
    }
   }
   do {
    if ((label|0) == 20) {
     label = 0;
     $60 = (($61) + -256)|0;
     $62 = ((($state)) + 56|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($60>>>0)<($63>>>0);
     if ($64) {
      $code$0$ph37 = $61;
     } else {
      $65 = ($60>>>0)>($63>>>0);
      if ($65) {
       $in_code$3 = $61;$old_char$3 = $old_char$02184;$old_code$3 = $old_code$02088;$result$3 = $result$0$ph;
       label = 44;
       continue L22;
      }
      $66 = ((($state)) + 92|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ((($state)) + 96|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($67>>>0)<($69>>>0);
      if (!($70)) {
       $71 = (_ft_lzwstate_stack_grow($state)|0);
       $72 = ($71|0)<(0);
       if ($72) {
        $in_code$3 = $61;$old_char$3 = $old_char$02184;$old_code$3 = $old_code$02088;$result$3 = $result$0$ph;
        label = 44;
        continue L22;
       }
      }
      $73 = $old_char$02184&255;
      $74 = HEAP32[$66>>2]|0;
      $75 = (($74) + 1)|0;
      HEAP32[$66>>2] = $75;
      $76 = ((($state)) + 88|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($77) + ($74)|0);
      HEAP8[$78>>0] = $73;
      $79 = ($old_code$02088>>>0)>(255);
      if ($79) {
       $code$0$ph37 = $old_code$02088;
      } else {
       $152 = $61;$code$1 = $old_code$02088;$old_code$02087 = $old_code$02088;
       break;
      }
     }
     $80 = ((($state)) + 76|0);
     $81 = ((($state)) + 92|0);
     $82 = ((($state)) + 96|0);
     $83 = ((($state)) + 80|0);
     $84 = ((($state)) + 88|0);
     $$pr = HEAP32[$80>>2]|0;
     $86 = $$pr;$code$019 = $code$0$ph37;
     while(1) {
      $85 = ($86|0)==(0|0);
      if ($85) {
       $in_code$3 = $61;$old_char$3 = $old_char$02184;$old_code$3 = $old_code$02088;$result$3 = $result$0$ph;
       label = 44;
       continue L22;
      }
      $87 = HEAP32[$81>>2]|0;
      $88 = HEAP32[$82>>2]|0;
      $89 = ($87>>>0)<($88>>>0);
      if (!($89)) {
       $90 = (_ft_lzwstate_stack_grow($state)|0);
       $91 = ($90|0)<(0);
       if ($91) {
        $in_code$3 = $61;$old_char$3 = $old_char$02184;$old_code$3 = $old_code$02088;$result$3 = $result$0$ph;
        label = 44;
        continue L22;
       }
      }
      $92 = (($code$019) + -256)|0;
      $93 = HEAP32[$83>>2]|0;
      $94 = (($93) + ($92)|0);
      $95 = HEAP8[$94>>0]|0;
      $96 = HEAP32[$81>>2]|0;
      $97 = (($96) + 1)|0;
      HEAP32[$81>>2] = $97;
      $98 = HEAP32[$84>>2]|0;
      $99 = (($98) + ($96)|0);
      HEAP8[$99>>0] = $95;
      $100 = HEAP32[$80>>2]|0;
      $101 = (($100) + ($92<<1)|0);
      $102 = HEAP16[$101>>1]|0;
      $103 = $102&65535;
      $104 = ($102&65535)>(255);
      if ($104) {
       $86 = $100;$code$019 = $103;
      } else {
       $152 = $61;$code$1 = $103;$old_code$02087 = $old_code$02088;
       break;
      }
     }
    }
   } while(0);
   $105 = ((($state)) + 92|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ((($state)) + 96|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ($106>>>0)<($108>>>0);
   if (!($109)) {
    $110 = (_ft_lzwstate_stack_grow($state)|0);
    $111 = ($110|0)<(0);
    if ($111) {
     $in_code$3 = $152;$old_char$3 = $code$1;$old_code$3 = $old_code$02087;$result$3 = $result$0$ph;
     label = 44;
     continue;
    }
   }
   $112 = $code$1&255;
   $113 = HEAP32[$105>>2]|0;
   $114 = (($113) + 1)|0;
   HEAP32[$105>>2] = $114;
   $115 = ((($state)) + 88|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + ($113)|0);
   HEAP8[$117>>0] = $112;
   HEAP32[$state>>2] = 2;
   $in_code$1$ph = $152;$old_char$1$ph = $code$1;$old_code$1$ph = $old_code$02087;$result$1$ph = $result$0$ph;
   label = 33;
   continue;
  }
  else if ((label|0) == 33) {
   label = 0;
   $118 = ((($state)) + 92|0);
   $119 = ($buffer|0)==(0|0);
   $120 = ((($state)) + 88|0);
   $result$1 = $result$1$ph;
   while(1) {
    $121 = HEAP32[$118>>2]|0;
    $122 = ($121|0)==(0);
    if ($122) {
     $result$1$lcssa = $result$1;
     break;
    }
    $123 = (($121) + -1)|0;
    HEAP32[$118>>2] = $123;
    if (!($119)) {
     $124 = HEAP32[$120>>2]|0;
     $125 = (($124) + ($123)|0);
     $126 = HEAP8[$125>>0]|0;
     $127 = (($buffer) + ($result$1)|0);
     HEAP8[$127>>0] = $126;
    }
    $128 = (($result$1) + 1)|0;
    $129 = ($128|0)==($out_size|0);
    if ($129) {
     $in_code$2 = $in_code$1$ph;$old_char$2 = $old_char$1$ph;$old_code$2 = $old_code$1$ph;$result$2 = $128;
     label = 43;
     break L22;
    } else {
     $result$1 = $128;
    }
   }
   $130 = ((($state)) + 56|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ((($state)) + 48|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ($131>>>0)<($133>>>0);
   if ($134) {
    $135 = ((($state)) + 84|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($131>>>0)<($136>>>0);
    if (!($137)) {
     $138 = (_ft_lzwstate_prefix_grow($state)|0);
     $139 = ($138|0)<(0);
     if ($139) {
      $in_code$3 = $in_code$1$ph;$old_char$3 = $old_char$1$ph;$old_code$3 = $old_code$1$ph;$result$3 = $result$1$lcssa;
      label = 44;
      continue;
     }
    }
    $140 = $old_code$1$ph&65535;
    $141 = HEAP32[$130>>2]|0;
    $142 = ((($state)) + 76|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = (($143) + ($141<<1)|0);
    HEAP16[$144>>1] = $140;
    $145 = $old_char$1$ph&255;
    $146 = HEAP32[$130>>2]|0;
    $147 = ((($state)) + 80|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (($148) + ($146)|0);
    HEAP8[$149>>0] = $145;
    $150 = HEAP32[$130>>2]|0;
    $151 = (($150) + 1)|0;
    HEAP32[$130>>2] = $151;
   }
   HEAP32[$state>>2] = 1;
   $in_code$0$ph = $in_code$1$ph;$old_char$0$ph = $old_char$1$ph;$old_code$0$ph = $in_code$1$ph;$result$0$ph = $result$1$lcssa;
   label = 14;
   continue;
  }
  else if ((label|0) == 44) {
   label = 0;
   HEAP32[$state>>2] = 3;
   $in_code$2 = $in_code$3;$old_char$2 = $old_char$3;$old_code$2 = $old_code$3;$result$2 = $result$3;
   label = 43;
   break;
  }
 }
 if ((label|0) == 43) {
  HEAP32[$2>>2] = $old_code$2;
  HEAP32[$0>>2] = $old_char$2;
  HEAP32[$4>>2] = $in_code$2;
  STACKTOP = sp;return ($result$2|0);
 }
 return (0)|0;
}
function _ft_lzw_check_header($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $error$0 = 0, $head = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $head = sp;
 $0 = (_FT_Stream_Seek($stream,0)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_FT_Stream_Read($stream,$head,2)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    $4 = HEAP8[$head>>0]|0;
    $5 = ($4<<24>>24)==(31);
    if ($5) {
     $6 = ((($head)) + 1|0);
     $7 = HEAP8[$6>>0]|0;
     $8 = ($7<<24>>24)==(-99);
     if ($8) {
      $error$0 = 0;
      break;
     }
    }
    $error$0 = 3;
   } else {
    $error$0 = $2;
   }
  } else {
   $error$0 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($error$0|0);
}
function _ft_lzw_file_init($zip,$stream,$source) {
 $zip = $zip|0;
 $stream = $stream|0;
 $source = $source|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($zip)) + 4|0);
 HEAP32[$0>>2] = $stream;
 HEAP32[$zip>>2] = $source;
 $1 = ((($stream)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($zip)) + 8|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($zip)) + 4280|0);
 $5 = ((($zip)) + 4288|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($zip)) + 4284|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($zip)) + 4280|0);
 HEAP32[$7>>2] = 0;
 $8 = (_ft_lzw_check_header($source)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  return ($8|0);
 }
 $10 = ((($zip)) + 12|0);
 _ft_lzwstate_init($10,$source);
 return ($8|0);
}
function _ft_lzw_stream_io($stream,$pos,$buffer,$count) {
 $stream = $stream|0;
 $pos = $pos|0;
 $buffer = $buffer|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_ft_lzw_file_io($1,$pos,$buffer,$count)|0);
 return ($2|0);
}
function _ft_lzw_stream_close($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($stream)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 _ft_lzw_file_done($1);
 _ft_mem_free($4,$1);
 HEAP32[$0>>2] = 0;
 return;
}
function _ft_lzwstate_get_code($state) {
 $state = $state|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $num_bits$0 = 0, $num_bits$1 = 0, $num_bits$2 = 0, $num_bits$3 = 0, $offset$0 = 0, $offset$1 = 0, $p$0 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($state)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($state)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($state)) + 32|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $7 = ((($state)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($3|0)<($8|0);
  if ($9) {
   $10 = ((($state)) + 56|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($state)) + 60|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    $num_bits$2 = $1;$offset$0 = $3;
   } else {
    label = 4;
   }
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $15 = ((($state)) + 56|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($state)) + 60|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16>>>0)<($18>>>0);
  if ($19) {
   $num_bits$0 = $1;
  } else {
   $20 = (($1) + 1)|0;
   HEAP32[$0>>2] = $20;
   $21 = ((($state)) + 40|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($20>>>0)<($22>>>0);
   if ($23) {
    $24 = 1 << $20;
    $25 = (($24) + -256)|0;
    $29 = $25;
   } else {
    $26 = ((($state)) + 48|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + 1)|0;
    $29 = $28;
   }
   HEAP32[$17>>2] = $29;
   $num_bits$0 = $20;
  }
  $30 = HEAP8[$4>>0]|0;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $num_bits$1 = $num_bits$0;
  } else {
   HEAP32[$0>>2] = 9;
   HEAP32[$17>>2] = 256;
   HEAP8[$4>>0] = 0;
   $num_bits$1 = 9;
  }
  $32 = (_ft_lzwstate_refill($state)|0);
  $33 = ($32|0)<(0);
  if ($33) {
   $$0 = -1;
   return ($$0|0);
  } else {
   $num_bits$2 = $num_bits$1;$offset$0 = 0;
  }
 }
 $34 = (($offset$0) + ($num_bits$2))|0;
 HEAP32[$2>>2] = $34;
 $35 = $offset$0 >> 3;
 $36 = (((($state)) + 8|0) + ($35)|0);
 $37 = $offset$0 & 7;
 $$sum = (($35) + 1)|0;
 $38 = (((($state)) + 8|0) + ($$sum)|0);
 $39 = HEAP8[$36>>0]|0;
 $40 = $39&255;
 $41 = $40 >>> $37;
 $42 = (8 - ($37))|0;
 $43 = (($num_bits$2) - ($42))|0;
 $44 = ($43>>>0)>(7);
 if ($44) {
  $$sum1 = (($35) + 2)|0;
  $45 = (((($state)) + 8|0) + ($$sum1)|0);
  $46 = HEAP8[$38>>0]|0;
  $47 = $46&255;
  $48 = $47 << $42;
  $49 = $48 | $41;
  $50 = (($42) + 8)|0;
  $51 = (($43) + -8)|0;
  $num_bits$3 = $51;$offset$1 = $50;$p$0 = $45;$result$0 = $49;
 } else {
  $num_bits$3 = $43;$offset$1 = $42;$p$0 = $38;$result$0 = $41;
 }
 $52 = ($num_bits$3|0)==(0);
 if ($52) {
  $$0 = $result$0;
  return ($$0|0);
 }
 $53 = HEAP8[$p$0>>0]|0;
 $54 = $53&255;
 $55 = 1 << $num_bits$3;
 $56 = (($55) + -1)|0;
 $57 = $54 & $56;
 $58 = $57 << $offset$1;
 $59 = $58 | $result$0;
 $$0 = $59;
 return ($$0|0);
}
function _ft_lzwstate_stack_grow($state) {
 $state = $state|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $error = 0, $new_size$0 = 0, $old_size$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($state)) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($state)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($state)) + 168|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3 >>> 1;
 $8 = (($3) + 4)|0;
 $9 = (($8) + ($7))|0;
 $10 = ((($state)) + 88|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($state)) + 100|0);
 $13 = ($11|0)==($12|0);
 if ($13) {
  HEAP32[$10>>2] = 0;
  $old_size$0 = 0;
 } else {
  $old_size$0 = $3;
 }
 $14 = ($9>>>0)>(65536);
 if ($14) {
  $15 = ($old_size$0|0)==(65536);
  if ($15) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  } else {
   $new_size$0 = 65536;
  }
 } else {
  $new_size$0 = $9;
 }
 $16 = HEAP32[$10>>2]|0;
 $17 = (_ft_mem_realloc($6,1,$old_size$0,$new_size$0,$16,$error)|0);
 HEAP32[$10>>2] = $17;
 $18 = HEAP32[$error>>2]|0;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$2>>2] = $new_size$0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ft_lzwstate_prefix_grow($state) {
 $state = $state|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $new_size$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($state)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($state)) + 168|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==(0);
 $5 = $1 >>> 2;
 $6 = (($5) + ($1))|0;
 $new_size$0 = $4 ? 512 : $6;
 $7 = ((($state)) + 76|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_ft_mem_realloc($3,3,$1,$new_size$0,$8,$error)|0);
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$error>>2]|0;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (($9) + ($new_size$0<<1)|0);
 $13 = ((($state)) + 80|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$7>>2]|0;
 $15 = (($14) + ($1<<1)|0);
 _memmove(($12|0),($15|0),($1|0))|0;
 HEAP32[$0>>2] = $new_size$0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ft_lzwstate_refill($state) {
 $state = $state|0;
 var $$ = 0, $$0 = 0, $$neg1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($state)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = -1;
  return ($$0|0);
 }
 $3 = ((($state)) + 164|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($state)) + 8|0);
 $6 = ((($state)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_FT_Stream_TryRead($4,$5,$7)|0);
 $9 = ((($state)) + 28|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($state)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($8))|0;
 HEAP32[$10>>2] = $12;
 $13 = HEAP32[$6>>2]|0;
 $14 = ($8>>>0)<($13>>>0);
 $15 = $14&1;
 HEAP32[$0>>2] = $15;
 $16 = ((($state)) + 24|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$9>>2]|0;
 $18 = $17 << 3;
 $19 = HEAP32[$6>>2]|0;
 $$neg1 = (1 - ($19))|0;
 $20 = (($$neg1) + ($18))|0;
 HEAP32[$9>>2] = $20;
 $21 = ($8|0)==(0);
 $$ = $21 << 31 >> 31;
 $$0 = $$;
 return ($$0|0);
}
function _ft_lzw_file_done($zip) {
 $zip = $zip|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($zip)) + 12|0);
 _ft_lzwstate_done($0);
 $1 = ((($zip)) + 8|0);
 HEAP32[$1>>2] = 0;
 HEAP32[$zip>>2] = 0;
 $2 = ((($zip)) + 4|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _ft_lzw_file_io($zip,$pos,$buffer,$count) {
 $zip = $zip|0;
 $pos = $pos|0;
 $buffer = $buffer|0;
 $count = $count|0;
 var $$$0 = 0, $$0 = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $result$0 = 0, $result$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($zip)) + 4280|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($pos>>>0);
 do {
  if ($2) {
   $3 = (($1) - ($pos))|0;
   $4 = ((($zip)) + 4284|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($zip)) + 184|0);
   $7 = $5;
   $8 = $6;
   $9 = (($7) - ($8))|0;
   $10 = ($3>>>0)>($9>>>0);
   if (!($10)) {
    $11 = (0 - ($3))|0;
    $12 = (($5) + ($11)|0);
    HEAP32[$4>>2] = $12;
    HEAP32[$0>>2] = $pos;
    break;
   }
   $13 = (_ft_lzw_file_reset($zip)|0);
   $14 = ($13|0)==(0);
   if (!($14)) {
    $result$1 = 0;
    return ($result$1|0);
   }
  }
 } while(0);
 $15 = HEAP32[$0>>2]|0;
 $16 = ($15>>>0)<($pos>>>0);
 if ($16) {
  $17 = (($pos) - ($15))|0;
  $18 = (_ft_lzw_file_skip_output($zip,$17)|0);
  $19 = ($18|0)!=(0);
  $20 = ($count|0)==(0);
  $or$cond = $20 | $19;
  if ($or$cond) {
   $result$1 = 0;
   return ($result$1|0);
  }
 } else {
  $$old1 = ($count|0)==(0);
  if ($$old1) {
   $result$1 = 0;
   return ($result$1|0);
  }
 }
 $21 = ((($zip)) + 4288|0);
 $22 = ((($zip)) + 4284|0);
 $$0 = $count;$result$0 = 0;
 while(1) {
  $23 = HEAP32[$21>>2]|0;
  $24 = HEAP32[$22>>2]|0;
  $25 = $23;
  $26 = $24;
  $27 = (($25) - ($26))|0;
  $28 = ($27>>>0)<($$0>>>0);
  $$$0 = $28 ? $27 : $$0;
  $29 = (($buffer) + ($result$0)|0);
  _memcpy(($29|0),($24|0),($$$0|0))|0;
  $30 = (($$$0) + ($result$0))|0;
  $31 = HEAP32[$22>>2]|0;
  $32 = (($31) + ($$$0)|0);
  HEAP32[$22>>2] = $32;
  $33 = HEAP32[$0>>2]|0;
  $34 = (($$$0) + ($33))|0;
  HEAP32[$0>>2] = $34;
  $35 = ($$0|0)==($$$0|0);
  if ($35) {
   $result$1 = $30;
   label = 11;
   break;
  }
  $36 = (($$0) - ($$$0))|0;
  $37 = (_ft_lzw_file_fill_output($zip)|0);
  $38 = ($37|0)==(0);
  if ($38) {
   $$0 = $36;$result$0 = $30;
  } else {
   $result$1 = $30;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  return ($result$1|0);
 }
 return (0)|0;
}
function _ft_lzw_file_reset($zip) {
 $zip = $zip|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$zip>>2]|0;
 $1 = (_FT_Stream_Seek($0,0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  return ($1|0);
 }
 $3 = ((($zip)) + 12|0);
 _ft_lzwstate_reset($3);
 $4 = ((($zip)) + 4280|0);
 $5 = ((($zip)) + 4288|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($zip)) + 4284|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($zip)) + 4280|0);
 HEAP32[$7>>2] = 0;
 return ($1|0);
}
function _ft_lzw_file_skip_output($zip,$count) {
 $zip = $zip|0;
 $count = $count|0;
 var $$0$ = 0, $$01 = 0, $$count = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($zip)) + 4288|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($zip)) + 4284|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)<($count>>>0);
 $$count = $7 ? $6 : $count;
 $8 = (($3) + ($$count)|0);
 HEAP32[$2>>2] = $8;
 $9 = ((($zip)) + 4280|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($$count) + ($10))|0;
 HEAP32[$9>>2] = $11;
 $12 = ($$count|0)==($count|0);
 if ($12) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $13 = (($count) - ($$count))|0;
 $14 = ((($zip)) + 12|0);
 $$01 = $13;
 while(1) {
  $15 = ($$01>>>0)<(4096);
  $$0$ = $15 ? $$01 : 4096;
  $16 = (_ft_lzwstate_io($14,0,$$0$)|0);
  $17 = ($16>>>0)<($$0$>>>0);
  if ($17) {
   $error$0 = 85;
   label = 5;
   break;
  }
  $18 = HEAP32[$9>>2]|0;
  $19 = (($18) + ($$0$))|0;
  HEAP32[$9>>2] = $19;
  $20 = (($$01) - ($$0$))|0;
  $21 = ($$01|0)==($$0$|0);
  if ($21) {
   $error$0 = 0;
   label = 5;
   break;
  } else {
   $$01 = $20;
  }
 }
 if ((label|0) == 5) {
  return ($error$0|0);
 }
 return (0)|0;
}
function _ft_lzw_file_fill_output($zip) {
 $zip = $zip|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($zip)) + 12|0);
 $1 = ((($zip)) + 184|0);
 $2 = ((($zip)) + 4284|0);
 HEAP32[$2>>2] = $1;
 $3 = (_ft_lzwstate_io($0,$1,4096)|0);
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + ($3)|0);
 $6 = ((($zip)) + 4288|0);
 HEAP32[$6>>2] = $5;
 $7 = ($3|0)==(0);
 $$ = $7 ? 85 : 0;
 return ($$|0);
}
function _pcf_find_property($face,$prop) {
 $face = $face|0;
 $prop = $prop|0;
 var $$0 = 0, $$found$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $found$01 = 0, $i$0$lcssa = 0, $i$02 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 284|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 280|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  $$lcssa = 1;$i$0$lcssa = -1;
  $13 = (($1) + (($i$0$lcssa*12)|0)|0);
  $$0 = $$lcssa ? 0 : $13;
  return ($$0|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $found$01 = 0;$i$02 = 0;
 while(1) {
  $6 = (($1) + (($i$02*12)|0)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_strcmp($7,$prop)|0);
  $9 = ($8|0)==(0);
  $$found$0 = $9 ? 1 : $found$01;
  $10 = (($i$02) + 1)|0;
  $11 = ($10|0)<($5|0);
  $12 = ($$found$0<<24>>24)==(0);
  $or$cond = $12 & $11;
  if ($or$cond) {
   $found$01 = $$found$0;$i$02 = $10;
  } else {
   $$lcssa = $12;$i$0$lcssa = $i$02;
   break;
  }
 }
 $13 = (($1) + (($i$0$lcssa*12)|0)|0);
 $$0 = $$lcssa ? 0 : $13;
 return ($$0|0);
}
function _pcf_load_font($stream,$face) {
 $stream = $stream|0;
 $face = $face|0;
 var $$ = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $or$cond = 0, $or$cond3 = 0, $phitmp = 0, $phitmp2 = 0, $resolution_x$0 = 0, $resolution_y$0 = 0;
 var $sext = 0, $sext6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_pcf_read_TOC($stream,$face)|0);
 HEAP32[$error>>2] = $2;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_pcf_get_properties($stream,$face)|0);
   HEAP32[$error>>2] = $4;
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = ((($face)) + 192|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ((($face)) + 188|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (_pcf_has_table_type($7,$9)|0);
    $11 = ($10<<24>>24)!=(0);
    if (!($11)) {
     $12 = (_pcf_get_accel($stream,$face,2)|0);
     HEAP32[$error>>2] = $12;
     $13 = ($12|0)==(0);
     if (!($13)) {
      break;
     }
    }
    $14 = (_pcf_get_metrics($stream,$face)|0);
    HEAP32[$error>>2] = $14;
    $15 = ($14|0)==(0);
    if ($15) {
     $16 = (_pcf_get_bitmaps($stream,$face)|0);
     HEAP32[$error>>2] = $16;
     $17 = ($16|0)==(0);
     if ($17) {
      $18 = (_pcf_get_encodings($stream,$face)|0);
      HEAP32[$error>>2] = $18;
      $19 = ($18|0)==(0);
      if ($19) {
       if ($11) {
        $20 = (_pcf_get_accel($stream,$face,256)|0);
        HEAP32[$error>>2] = $20;
        $21 = ($20|0)==(0);
        if (!($21)) {
         break;
        }
       }
       HEAP32[$face>>2] = 1;
       $22 = ((($face)) + 4|0);
       HEAP32[$22>>2] = 0;
       $23 = ((($face)) + 8|0);
       $24 = ((($face)) + 199|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(0);
       $$ = $26 ? 146 : 150;
       HEAP32[$23>>2] = $$;
       $27 = (_pcf_interpret_style($face)|0);
       HEAP32[$error>>2] = $27;
       $28 = ($27|0)==(0);
       if ($28) {
        $29 = (_pcf_find_property($face,27330)|0);
        $30 = ($29|0)==(0|0);
        if ($30) {
         label = 14;
        } else {
         $31 = ((($29)) + 4|0);
         $32 = HEAP8[$31>>0]|0;
         $33 = ($32<<24>>24)==(0);
         if ($33) {
          label = 14;
         } else {
          $34 = ((($29)) + 8|0);
          $35 = HEAP32[$34>>2]|0;
          $36 = (_ft_mem_strdup($1,$35,$error)|0);
          $37 = ((($face)) + 20|0);
          HEAP32[$37>>2] = $36;
          $38 = HEAP32[$error>>2]|0;
          $39 = ($38|0)==(0);
          if (!($39)) {
           break;
          }
         }
        }
        if ((label|0) == 14) {
         $40 = ((($face)) + 20|0);
         HEAP32[$40>>2] = 0;
        }
        $41 = ((($face)) + 288|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = (($42) + 1)|0;
        $44 = ((($face)) + 16|0);
        HEAP32[$44>>2] = $43;
        $45 = ((($face)) + 28|0);
        HEAP32[$45>>2] = 1;
        $46 = (_ft_mem_realloc($1,16,0,1,0,$error)|0);
        $47 = ((($face)) + 32|0);
        HEAP32[$47>>2] = $46;
        $48 = HEAP32[$error>>2]|0;
        $49 = ($48|0)==(0);
        if ($49) {
         ;HEAP32[$46>>2]=0|0;HEAP32[$46+4>>2]=0|0;HEAP32[$46+8>>2]=0|0;HEAP32[$46+12>>2]=0|0;
         $50 = ((($face)) + 204|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ((($face)) + 208|0);
         $53 = HEAP32[$52>>2]|0;
         $54 = (($53) + ($51))|0;
         $55 = $54&65535;
         HEAP16[$46>>1] = $55;
         $56 = (_pcf_find_property($face,27342)|0);
         $57 = ($56|0)==(0|0);
         if ($57) {
          $sext6 = $54 << 16;
          $64 = $sext6 >> 15;
          $65 = (($64|0) / 3)&-1;
          $66 = $65&65535;
          $67 = ((($46)) + 2|0);
          HEAP16[$67>>1] = $66;
         } else {
          $58 = ((($56)) + 8|0);
          $59 = HEAP32[$58>>2]|0;
          $60 = (($59) + 5)|0;
          $61 = (($60|0) / 10)&-1;
          $62 = $61&65535;
          $63 = ((($46)) + 2|0);
          HEAP16[$63>>1] = $62;
         }
         $68 = (_pcf_find_property($face,27356)|0);
         $69 = ($68|0)==(0|0);
         if (!($69)) {
          $70 = ((($68)) + 8|0);
          $71 = HEAP32[$70>>2]|0;
          $72 = ($71*460800)|0;
          $73 = (($72) + 36135)|0;
          $74 = (($73|0) / 72270)&-1;
          $75 = ((($46)) + 4|0);
          HEAP32[$75>>2] = $74;
         }
         $76 = (_pcf_find_property($face,27367)|0);
         $77 = ($76|0)==(0|0);
         if (!($77)) {
          $78 = ((($76)) + 8|0);
          $79 = HEAP32[$78>>2]|0;
          $sext = $79 << 16;
          $80 = $sext >> 10;
          $81 = ((($46)) + 12|0);
          HEAP32[$81>>2] = $80;
         }
         $82 = (_pcf_find_property($face,27378)|0);
         $83 = ($82|0)==(0|0);
         if ($83) {
          $resolution_x$0 = 0;
         } else {
          $84 = ((($82)) + 8|0);
          $85 = HEAP32[$84>>2]|0;
          $phitmp = $85 << 16;
          $phitmp2 = $phitmp >> 16;
          $resolution_x$0 = $phitmp2;
         }
         $86 = (_pcf_find_property($face,27391)|0);
         $87 = ($86|0)==(0|0);
         if ($87) {
          $resolution_y$0 = 0;
         } else {
          $88 = ((($86)) + 8|0);
          $89 = HEAP32[$88>>2]|0;
          $90 = $89&65535;
          $resolution_y$0 = $90;
         }
         $91 = ((($46)) + 12|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = ($92|0)==(0);
         if ($93) {
          $94 = ((($46)) + 4|0);
          $95 = HEAP32[$94>>2]|0;
          HEAP32[$91>>2] = $95;
          $96 = ($resolution_y$0<<16>>16)==(0);
          if ($96) {
           label = 32;
          } else {
           $97 = $resolution_y$0 << 16 >> 16;
           $98 = Math_imul($95, $97)|0;
           $99 = (($98|0) / 72)&-1;
           HEAP32[$91>>2] = $99;
           label = 30;
          }
         } else {
          label = 30;
         }
         if ((label|0) == 30) {
          $100 = ($resolution_x$0|0)==(0);
          $101 = ($resolution_y$0<<16>>16)==(0);
          $or$cond3 = $100 | $101;
          if ($or$cond3) {
           label = 32;
          } else {
           $102 = $resolution_y$0 << 16 >> 16;
           $103 = HEAP32[$91>>2]|0;
           $104 = Math_imul($103, $resolution_x$0)|0;
           $105 = (($104|0) / ($102|0))&-1;
           $106 = ((($46)) + 8|0);
           HEAP32[$106>>2] = $105;
          }
         }
         if ((label|0) == 32) {
          $107 = HEAP32[$91>>2]|0;
          $108 = ((($46)) + 8|0);
          HEAP32[$108>>2] = $107;
         }
         $109 = (_pcf_find_property($face,87930)|0);
         $110 = (_pcf_find_property($face,87947)|0);
         $111 = ($109|0)==(0|0);
         do {
          if (!($111)) {
           $112 = ((($109)) + 4|0);
           $113 = HEAP8[$112>>0]|0;
           $114 = ($113<<24>>24)!=(0);
           $115 = ($110|0)!=(0|0);
           $or$cond = $115 & $114;
           if ($or$cond) {
            $116 = ((($110)) + 4|0);
            $117 = HEAP8[$116>>0]|0;
            $118 = ($117<<24>>24)==(0);
            if ($118) {
             break;
            }
            $119 = ((($110)) + 8|0);
            $120 = HEAP32[$119>>2]|0;
            $121 = (_ft_mem_strdup($1,$120,$error)|0);
            $122 = ((($face)) + 176|0);
            HEAP32[$122>>2] = $121;
            $123 = HEAP32[$error>>2]|0;
            $124 = ($123|0)==(0);
            if (!($124)) {
             break L1;
            }
            $125 = ((($109)) + 8|0);
            $126 = HEAP32[$125>>2]|0;
            $127 = (_ft_mem_strdup($1,$126,$error)|0);
            $128 = ((($face)) + 180|0);
            HEAP32[$128>>2] = $127;
           }
          }
         } while(0);
         $$pr = HEAP32[$error>>2]|0;
         $129 = ($$pr|0)==(0);
         if ($129) {
          $130 = HEAP32[$error>>2]|0;
          STACKTOP = sp;return ($130|0);
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 HEAP32[$error>>2] = 3;
 $130 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($130|0);
}
function _pcf_read_TOC($stream,$face) {
 $stream = $stream|0;
 $face = $face|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $have_change$0 = 0, $have_change$0$lcssa = 0, $have_change$1 = 0, $i$0 = 0;
 var $n$06 = 0, $n$13 = 0, $tables$05 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $error = sp + 16|0;
 $tmp = sp;
 $0 = ((($face)) + 184|0);
 $1 = ((($face)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_FT_Stream_Seek($stream,0)|0);
 HEAP32[$error>>2] = $3;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_FT_Stream_ReadFields($stream,21620,$0)|0);
 HEAP32[$error>>2] = $5;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ($7|0)==(1885562369);
 if (!($8)) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ((($face)) + 188|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -1)|0;
 $12 = ($11>>>0)>(134217726);
 if ($12) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (_ft_mem_realloc($2,16,0,$10,0,$error)|0);
 $14 = ((($face)) + 192|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$error>>2]|0;
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = 64;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = HEAP32[$9>>2]|0;
 $18 = ($17|0)==(0);
 do {
  if (!($18)) {
   $n$06 = 0;$tables$05 = $13;
   while(1) {
    $19 = (_FT_Stream_ReadFields($stream,21636,$tables$05)|0);
    HEAP32[$error>>2] = $19;
    $20 = ($19|0)==(0);
    if (!($20)) {
     label = 20;
     break;
    }
    $21 = ((($tables$05)) + 16|0);
    $22 = (($n$06) + 1)|0;
    $23 = HEAP32[$9>>2]|0;
    $24 = ($22>>>0)<($23>>>0);
    if ($24) {
     $n$06 = $22;$tables$05 = $21;
    } else {
     $$lcssa = $23;
     label = 10;
     break;
    }
   }
   if ((label|0) == 10) {
    $25 = ($$lcssa|0)==(1);
    if ($25) {
     $$0 = 0;
    } else {
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 20) {
    $51 = HEAP32[$14>>2]|0;
    _ft_mem_free($2,$51);
    HEAP32[$14>>2] = 0;
    $52 = HEAP32[$error>>2]|0;
    $$0 = $52;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $26 = HEAP32[$14>>2]|0;
 $n$13 = 0;
 L27: while(1) {
  $31 = $n$13 ^ -1;
  $have_change$0 = 0;$i$0 = 0;
  while(1) {
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($31))|0;
   $34 = ($i$0>>>0)<($33>>>0);
   if (!($34)) {
    $have_change$0$lcssa = $have_change$0;
    break;
   }
   $35 = (((($26) + ($i$0<<4)|0)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($i$0) + 1)|0;
   $38 = (((($26) + ($37<<4)|0)) + 12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($36>>>0)>($39>>>0);
   if ($40) {
    $41 = (($26) + ($37<<4)|0);
    $42 = (($26) + ($i$0<<4)|0);
    ;HEAP32[$tmp>>2]=HEAP32[$42>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$tmp+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$tmp+12>>2]=HEAP32[$42+12>>2]|0;
    ;HEAP32[$42>>2]=HEAP32[$41>>2]|0;HEAP32[$42+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$42+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$42+12>>2]=HEAP32[$41+12>>2]|0;
    ;HEAP32[$41>>2]=HEAP32[$tmp>>2]|0;HEAP32[$41+4>>2]=HEAP32[$tmp+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$tmp+8>>2]|0;HEAP32[$41+12>>2]=HEAP32[$tmp+12>>2]|0;
    $have_change$1 = 1;
   } else {
    $have_change$1 = $have_change$0;
   }
   $43 = (((($26) + ($i$0<<4)|0)) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$38>>2]|0;
   $46 = ($45>>>0)<($44>>>0);
   if ($46) {
    $$0 = 9;
    label = 21;
    break L27;
   }
   $47 = HEAP32[$35>>2]|0;
   $48 = (($45) - ($44))|0;
   $49 = ($47>>>0)>($48>>>0);
   if ($49) {
    $$0 = 9;
    label = 21;
    break L27;
   } else {
    $have_change$0 = $have_change$1;$i$0 = $37;
   }
  }
  $50 = ($have_change$0$lcssa|0)==(0);
  $30 = (($n$13) + 1)|0;
  if ($50) {
   $$0 = 0;
   label = 21;
   break;
  }
  $27 = HEAP32[$9>>2]|0;
  $28 = (($27) + -1)|0;
  $29 = ($30>>>0)<($28>>>0);
  if ($29) {
   $n$13 = $30;
  } else {
   $$0 = 0;
   label = 21;
   break;
  }
 }
 if ((label|0) == 21) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _pcf_get_properties($stream,$face) {
 $stream = $stream|0;
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $error = 0, $format = 0, $i$05 = 0, $i$14 = 0, $nprops$0 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $props$0 = 0, $size = 0;
 var $string_size$0 = 0, $strings$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $format = sp + 8|0;
 $size = sp + 4|0;
 $error = sp;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 192|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 188|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_pcf_seek_to_table_type($stream,$3,$5,1,$format,$size)|0);
 HEAP32[$error>>2] = $6;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = (_FT_Stream_ReadULongLE($stream,$error)|0);
   HEAP32[$format>>2] = $8;
   $9 = HEAP32[$error>>2]|0;
   $10 = ($9|0)==(0);
   $11 = ($8>>>0)<(256);
   $or$cond = $11 & $10;
   if ($or$cond) {
    $12 = $8 & 4;
    $13 = ($12|0)==(0);
    if ($13) {
     $15 = (_FT_Stream_ReadULongLE($stream,$error)|0);
     $nprops$0 = $15;
    } else {
     $14 = (_FT_Stream_ReadULong($stream,$error)|0);
     $nprops$0 = $14;
    }
    $16 = HEAP32[$error>>2]|0;
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = HEAP32[$size>>2]|0;
     $19 = (($18>>>0) / 9)&-1;
     $20 = ($nprops$0>>>0)>($19>>>0);
     if ($20) {
      HEAP32[$error>>2] = 8;
      $props$0 = 0;$strings$0 = 0;
      break;
     }
     $21 = ((($face)) + 280|0);
     HEAP32[$21>>2] = $nprops$0;
     $22 = (_ft_mem_realloc($1,12,0,$nprops$0,0,$error)|0);
     $23 = HEAP32[$error>>2]|0;
     $24 = ($23|0)==(0);
     if ($24) {
      $25 = ($nprops$0|0)==(0);
      if (!($25)) {
       $26 = HEAP32[$format>>2]|0;
       $27 = $26 & 4;
       $28 = ($27|0)==(0);
       $i$05 = 0;
       while(1) {
        $29 = (($22) + (($i$05*12)|0)|0);
        if ($28) {
         $32 = (_FT_Stream_ReadFields($stream,21600,$29)|0);
         HEAP32[$error>>2] = $32;
         $33 = ($32|0)==(0);
         if (!($33)) {
          $props$0 = $22;$strings$0 = 0;
          break L1;
         }
        } else {
         $30 = (_FT_Stream_ReadFields($stream,21580,$29)|0);
         HEAP32[$error>>2] = $30;
         $31 = ($30|0)==(0);
         if (!($31)) {
          $props$0 = $22;$strings$0 = 0;
          break L1;
         }
        }
        $34 = (($i$05) + 1)|0;
        $35 = ($34>>>0)<($nprops$0>>>0);
        if ($35) {
         $i$05 = $34;
        } else {
         break;
        }
       }
       $36 = $nprops$0 & 3;
       $37 = ($36|0)==(0);
       if (!($37)) {
        $38 = (4 - ($36))|0;
        $39 = (_FT_Stream_Skip($stream,$38)|0);
        HEAP32[$error>>2] = $39;
        $40 = ($39|0)==(0);
        if (!($40)) {
         HEAP32[$error>>2] = 83;
         $props$0 = $22;$strings$0 = 0;
         break;
        }
       }
      }
      $41 = HEAP32[$format>>2]|0;
      $42 = $41 & 4;
      $43 = ($42|0)==(0);
      if ($43) {
       $45 = (_FT_Stream_ReadULongLE($stream,$error)|0);
       $string_size$0 = $45;
      } else {
       $44 = (_FT_Stream_ReadULong($stream,$error)|0);
       $string_size$0 = $44;
      }
      $46 = HEAP32[$error>>2]|0;
      $47 = ($46|0)==(0);
      if ($47) {
       $48 = HEAP32[$size>>2]|0;
       $49 = Math_imul($nprops$0, -9)|0;
       $50 = (($48) + ($49))|0;
       $51 = ($string_size$0>>>0)>($50>>>0);
       if ($51) {
        HEAP32[$error>>2] = 8;
        $props$0 = $22;$strings$0 = 0;
        break;
       }
       $52 = (($string_size$0) + 1)|0;
       $53 = (_ft_mem_realloc($1,1,0,$52,0,$error)|0);
       $54 = HEAP32[$error>>2]|0;
       $55 = ($54|0)==(0);
       if ($55) {
        $56 = (_FT_Stream_Read($stream,$53,$string_size$0)|0);
        HEAP32[$error>>2] = $56;
        $57 = ($56|0)==(0);
        if ($57) {
         $58 = (_ft_mem_realloc($1,12,0,$nprops$0,0,$error)|0);
         $59 = HEAP32[$error>>2]|0;
         $60 = ($59|0)==(0);
         if ($60) {
          $61 = ((($face)) + 284|0);
          HEAP32[$61>>2] = $58;
          $62 = ($nprops$0|0)==(0);
          L36: do {
           if (!($62)) {
            $i$14 = 0;
            while(1) {
             $63 = (($22) + (($i$14*12)|0)|0);
             $64 = HEAP32[$63>>2]|0;
             $65 = ($64|0)<(0);
             $66 = ($64>>>0)>($string_size$0>>>0);
             $or$cond1 = $65 | $66;
             if ($or$cond1) {
              label = 30;
              break;
             }
             $67 = (($53) + ($64)|0);
             $68 = (_ft_mem_strdup($1,$67,$error)|0);
             $69 = (($58) + (($i$14*12)|0)|0);
             HEAP32[$69>>2] = $68;
             $70 = HEAP32[$error>>2]|0;
             $71 = ($70|0)==(0);
             if (!($71)) {
              $props$0 = $22;$strings$0 = $53;
              break L1;
             }
             $72 = (((($22) + (($i$14*12)|0)|0)) + 4|0);
             $73 = HEAP8[$72>>0]|0;
             $74 = (((($58) + (($i$14*12)|0)|0)) + 4|0);
             HEAP8[$74>>0] = $73;
             $75 = HEAP8[$72>>0]|0;
             $76 = ($75<<24>>24)==(0);
             $77 = (((($22) + (($i$14*12)|0)|0)) + 8|0);
             $78 = HEAP32[$77>>2]|0;
             if ($76) {
              $86 = (((($58) + (($i$14*12)|0)|0)) + 8|0);
              HEAP32[$86>>2] = $78;
             } else {
              $79 = ($78|0)<(0);
              $80 = ($78>>>0)>($string_size$0>>>0);
              $or$cond2 = $79 | $80;
              if ($or$cond2) {
               label = 34;
               break;
              }
              $81 = (($53) + ($78)|0);
              $82 = (_ft_mem_strdup($1,$81,$error)|0);
              $83 = (((($58) + (($i$14*12)|0)|0)) + 8|0);
              HEAP32[$83>>2] = $82;
              $84 = HEAP32[$error>>2]|0;
              $85 = ($84|0)==(0);
              if (!($85)) {
               $props$0 = $22;$strings$0 = $53;
               break L1;
              }
             }
             $87 = (($i$14) + 1)|0;
             $88 = ($87>>>0)<($nprops$0>>>0);
             if ($88) {
              $i$14 = $87;
             } else {
              break L36;
             }
            }
            if ((label|0) == 30) {
             HEAP32[$error>>2] = 9;
             $props$0 = $22;$strings$0 = $53;
             break L1;
            }
            else if ((label|0) == 34) {
             HEAP32[$error>>2] = 9;
             $props$0 = $22;$strings$0 = $53;
             break L1;
            }
           }
          } while(0);
          HEAP32[$error>>2] = 0;
          $props$0 = $22;$strings$0 = $53;
         } else {
          $props$0 = $22;$strings$0 = $53;
         }
        } else {
         $props$0 = $22;$strings$0 = $53;
        }
       } else {
        $props$0 = $22;$strings$0 = $53;
       }
      } else {
       $props$0 = $22;$strings$0 = 0;
      }
     } else {
      $props$0 = $22;$strings$0 = 0;
     }
    } else {
     $props$0 = 0;$strings$0 = 0;
    }
   } else {
    $props$0 = 0;$strings$0 = 0;
   }
  } else {
   $props$0 = 0;$strings$0 = 0;
  }
 } while(0);
 _ft_mem_free($1,$props$0);
 _ft_mem_free($1,$strings$0);
 $89 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($89|0);
}
function _pcf_has_table_type($tables,$ntables) {
 $tables = $tables|0;
 $ntables = $ntables|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ntables|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $3 = (($tables) + ($i$01<<4)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(256);
  $2 = (($i$01) + 1)|0;
  if ($5) {
   $$0 = 1;
   label = 4;
   break;
  }
  $1 = ($2>>>0)<($ntables>>>0);
  if ($1) {
   $i$01 = $2;
  } else {
   $$0 = 0;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _pcf_get_accel($stream,$face,$type) {
 $stream = $stream|0;
 $face = $face|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $error = 0, $format = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $format = sp + 8|0;
 $size = sp + 4|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($face)) + 192|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_pcf_seek_to_table_type($stream,$1,$3,$type,$format,$size)|0);
 HEAP32[$error>>2] = $4;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = (_FT_Stream_ReadULongLE($stream,$error)|0);
   HEAP32[$format>>2] = $6;
   $7 = HEAP32[$error>>2]|0;
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = $6 & -256;
    switch ($9|0) {
    case 256: case 0:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $10 = HEAP32[$format>>2]|0;
    $11 = $10 & 4;
    $12 = ($11|0)==(0);
    $13 = ((($face)) + 196|0);
    if ($12) {
     $16 = (_FT_Stream_ReadFields($stream,21528,$13)|0);
     HEAP32[$error>>2] = $16;
     $17 = ($16|0)==(0);
     if (!($17)) {
      break;
     }
    } else {
     $14 = (_FT_Stream_ReadFields($stream,21476,$13)|0);
     HEAP32[$error>>2] = $14;
     $15 = ($14|0)==(0);
     if (!($15)) {
      break;
     }
    }
    $18 = HEAP32[$format>>2]|0;
    $19 = $18 & 255;
    $20 = ((($face)) + 216|0);
    $21 = (_pcf_get_metric($stream,$19,$20)|0);
    HEAP32[$error>>2] = $21;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = HEAP32[$format>>2]|0;
     $24 = $23 & 255;
     $25 = ((($face)) + 232|0);
     $26 = (_pcf_get_metric($stream,$24,$25)|0);
     HEAP32[$error>>2] = $26;
     $27 = ($26|0)==(0);
     if ($27) {
      $28 = HEAP32[$format>>2]|0;
      $29 = $28 & -256;
      $30 = ($29|0)==(256);
      if (!($30)) {
       $39 = ((($face)) + 248|0);
       ;HEAP32[$39>>2]=HEAP32[$20>>2]|0;HEAP32[$39+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$20+8>>2]|0;HEAP32[$39+12>>2]=HEAP32[$20+12>>2]|0;
       $40 = ((($face)) + 264|0);
       ;HEAP32[$40>>2]=HEAP32[$25>>2]|0;HEAP32[$40+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$40+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$40+12>>2]=HEAP32[$25+12>>2]|0;
       break;
      }
      $31 = $28 & 255;
      $32 = ((($face)) + 248|0);
      $33 = (_pcf_get_metric($stream,$31,$32)|0);
      HEAP32[$error>>2] = $33;
      $34 = ($33|0)==(0);
      if ($34) {
       $35 = HEAP32[$format>>2]|0;
       $36 = $35 & 255;
       $37 = ((($face)) + 264|0);
       $38 = (_pcf_get_metric($stream,$36,$37)|0);
       HEAP32[$error>>2] = $38;
      }
     }
    }
   }
  }
 } while(0);
 $41 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function _pcf_get_metrics($stream,$face) {
 $stream = $stream|0;
 $face = $face|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $format = 0, $i$01 = 0, $nmetrics$0 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 8|0;
 $format = sp + 4|0;
 $size = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 192|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 188|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_pcf_seek_to_table_type($stream,$3,$5,4,$format,$size)|0);
 HEAP32[$error>>2] = $6;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_FT_Stream_ReadULongLE($stream,$error)|0);
 HEAP32[$format>>2] = $8;
 $9 = HEAP32[$error>>2]|0;
 $10 = ($9|0)==(0);
 do {
  if ($10) {
   $11 = $8 & -256;
   switch ($11|0) {
   case 256: case 0:  {
    break;
   }
   default: {
    $$0 = 3;
    STACKTOP = sp;return ($$0|0);
   }
   }
   $12 = HEAP32[$format>>2]|0;
   $13 = ($12>>>0)<(256);
   $14 = $12 & 4;
   $15 = ($14|0)!=(0);
   do {
    if ($13) {
     if ($15) {
      $16 = (_FT_Stream_ReadULong($stream,$error)|0);
      $nmetrics$0 = $16;
      break;
     } else {
      $17 = (_FT_Stream_ReadULongLE($stream,$error)|0);
      $nmetrics$0 = $17;
      break;
     }
    } else {
     if ($15) {
      $18 = (_FT_Stream_ReadUShort($stream,$error)|0);
      $19 = $18&65535;
      $nmetrics$0 = $19;
      break;
     } else {
      $20 = (_FT_Stream_ReadUShortLE($stream,$error)|0);
      $21 = $20&65535;
      $nmetrics$0 = $21;
      break;
     }
    }
   } while(0);
   $22 = HEAP32[$error>>2]|0;
   $23 = ($22|0)==(0);
   if (!($23)) {
    $$0 = 3;
    STACKTOP = sp;return ($$0|0);
   }
   $24 = ((($face)) + 288|0);
   HEAP32[$24>>2] = $nmetrics$0;
   $25 = ($nmetrics$0|0)==(0);
   if ($25) {
    $$0 = 8;
    STACKTOP = sp;return ($$0|0);
   }
   $26 = HEAP32[$format>>2]|0;
   $27 = ($26>>>0)<(256);
   $28 = HEAP32[$size>>2]|0;
   if ($27) {
    $29 = (($28>>>0) / 12)&-1;
    $30 = ($nmetrics$0>>>0)>($29>>>0);
    if ($30) {
     $$0 = 8;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $31 = (($28>>>0) / 5)&-1;
    $32 = ($nmetrics$0>>>0)>($31>>>0);
    if ($32) {
     $$0 = 8;
     STACKTOP = sp;return ($$0|0);
    }
   }
   $33 = (_ft_mem_realloc($1,16,0,$nmetrics$0,0,$error)|0);
   $34 = ((($face)) + 292|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$error>>2]|0;
   $36 = ($35|0)==(0);
   if (!($36)) {
    $$0 = 64;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[$format>>2]|0;
   $i$01 = 0;
   while(1) {
    $40 = (($33) + ($i$01<<4)|0);
    $41 = (_pcf_get_metric($stream,$37,$40)|0);
    HEAP32[$error>>2] = $41;
    $42 = (((($33) + ($i$01<<4)|0)) + 12|0);
    HEAP32[$42>>2] = 0;
    $43 = HEAP32[$error>>2]|0;
    $44 = ($43|0)==(0);
    $39 = (($i$01) + 1)|0;
    if (!($44)) {
     break;
    }
    $38 = ($39>>>0)<($nmetrics$0>>>0);
    if ($38) {
     $i$01 = $39;
    } else {
     label = 20;
     break;
    }
   }
   if ((label|0) == 20) {
    $$pr = HEAP32[$error>>2]|0;
    $45 = ($$pr|0)==(0);
    if ($45) {
     break;
    }
   }
   $46 = HEAP32[$34>>2]|0;
   _ft_mem_free($1,$46);
   HEAP32[$34>>2] = 0;
  }
 } while(0);
 $47 = HEAP32[$error>>2]|0;
 $$0 = $47;
 STACKTOP = sp;return ($$0|0);
}
function _pcf_get_bitmaps($stream,$face) {
 $stream = $stream|0;
 $face = $face|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $error = 0, $exitcond = 0, $exitcond11 = 0, $format = 0, $i$07 = 0, $i$25 = 0, $nbitmaps$0 = 0, $or$cond = 0, $or$cond2 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 8|0;
 $format = sp + 4|0;
 $size = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 192|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 188|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_pcf_seek_to_table_type($stream,$3,$5,8,$format,$size)|0);
 HEAP32[$error>>2] = $6;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_FT_Stream_EnterFrame($stream,8)|0);
 HEAP32[$error>>2] = $8;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_FT_Stream_GetULongLE($stream)|0);
 HEAP32[$format>>2] = $10;
 $11 = $10 & 4;
 $12 = ($11|0)==(0);
 if ($12) {
  $14 = (_FT_Stream_GetULongLE($stream)|0);
  $nbitmaps$0 = $14;
 } else {
  $13 = (_FT_Stream_GetULong($stream)|0);
  $nbitmaps$0 = $13;
 }
 _FT_Stream_ExitFrame($stream);
 $15 = HEAP32[$format>>2]|0;
 $16 = ($15>>>0)<(256);
 if (!($16)) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ((($face)) + 288|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)>(-1);
 $20 = ($nbitmaps$0|0)==($18|0);
 $or$cond = $19 & $20;
 if (!($or$cond)) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (_ft_mem_realloc($1,4,0,$nbitmaps$0,0,$error)|0);
 $22 = HEAP32[$error>>2]|0;
 $23 = ($22|0)==(0);
 if (!($23)) {
  $$0 = $22;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ($nbitmaps$0|0)==(0);
 if (!($24)) {
  $25 = HEAP32[$format>>2]|0;
  $26 = $25 & 4;
  $27 = ($26|0)==(0);
  $i$07 = 0;
  while(1) {
   if ($27) {
    $30 = (_FT_Stream_ReadULongLE($stream,$error)|0);
    $31 = (($21) + ($i$07<<2)|0);
    HEAP32[$31>>2] = $30;
   } else {
    $28 = (_FT_Stream_ReadULong($stream,$error)|0);
    $29 = (($21) + ($i$07<<2)|0);
    HEAP32[$29>>2] = $28;
   }
   $32 = (($i$07) + 1)|0;
   $exitcond11 = ($32|0)==($nbitmaps$0|0);
   if ($exitcond11) {
    break;
   } else {
    $i$07 = $32;
   }
  }
 }
 $33 = HEAP32[$error>>2]|0;
 $34 = ($33|0)==(0);
 if ($34) {
  $38 = HEAP32[$format>>2]|0;
  $39 = $38 & 4;
  $40 = ($39|0)==(0);
  if ($40) {
   (_FT_Stream_ReadULongLE($stream,$error)|0);
  } else {
   (_FT_Stream_ReadULong($stream,$error)|0);
  }
  $41 = HEAP32[$error>>2]|0;
  $42 = ($41|0)==(0);
  if ($42) {
   if ($40) {
    (_FT_Stream_ReadULongLE($stream,$error)|0);
   } else {
    (_FT_Stream_ReadULong($stream,$error)|0);
   }
   $55 = HEAP32[$error>>2]|0;
   $56 = ($55|0)==(0);
   if ($56) {
    if ($40) {
     (_FT_Stream_ReadULongLE($stream,$error)|0);
    } else {
     (_FT_Stream_ReadULong($stream,$error)|0);
    }
    $57 = HEAP32[$error>>2]|0;
    $58 = ($57|0)==(0);
    if ($58) {
     if ($40) {
      (_FT_Stream_ReadULongLE($stream,$error)|0);
     } else {
      (_FT_Stream_ReadULong($stream,$error)|0);
     }
     $59 = HEAP32[$error>>2]|0;
     $60 = ($59|0)==(0);
     if ($60) {
      $61 = ($nbitmaps$0|0)==(0);
      if (!($61)) {
       $35 = HEAP32[$size>>2]|0;
       $36 = ((($stream)) + 8|0);
       $37 = ((($face)) + 292|0);
       $i$25 = 0;
       while(1) {
        $43 = (($21) + ($i$25<<2)|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = ($44|0)<(0);
        $46 = ($44>>>0)>($35>>>0);
        $or$cond2 = $45 | $46;
        if (!($or$cond2)) {
         $47 = HEAP32[$36>>2]|0;
         $48 = (($47) + ($44))|0;
         $49 = HEAP32[$37>>2]|0;
         $50 = (((($49) + ($i$25<<4)|0)) + 12|0);
         HEAP32[$50>>2] = $48;
        }
        $51 = (($i$25) + 1)|0;
        $exitcond = ($51|0)==($nbitmaps$0|0);
        if ($exitcond) {
         break;
        } else {
         $i$25 = $51;
        }
       }
      }
      $52 = HEAP32[$format>>2]|0;
      $53 = ((($face)) + 308|0);
      HEAP32[$53>>2] = $52;
     }
    }
   }
  }
 }
 _ft_mem_free($1,$21);
 $54 = HEAP32[$error>>2]|0;
 $$0 = $54;
 STACKTOP = sp;return ($$0|0);
}
function _pcf_get_encodings($stream,$face) {
 $stream = $stream|0;
 $face = $face|0;
 var $$0 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $encoding$0 = 0, $error = 0, $exitcond = 0, $exitcond7 = 0, $firstCol$0 = 0, $firstRow$0 = 0, $format = 0, $i$03 = 0, $i$12 = 0, $j$0$lcssa = 0, $j$04 = 0, $j$1 = 0, $lastCol$0 = 0, $lastRow$0 = 0, $size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 8|0;
 $format = sp + 4|0;
 $size = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 192|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 188|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_pcf_seek_to_table_type($stream,$3,$5,32,$format,$size)|0);
 HEAP32[$error>>2] = $6;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_FT_Stream_EnterFrame($stream,14)|0);
 HEAP32[$error>>2] = $8;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_FT_Stream_GetULongLE($stream)|0);
 HEAP32[$format>>2] = $10;
 $11 = $10 & 4;
 $12 = ($11|0)==(0);
 if ($12) {
  $23 = (_FT_Stream_GetUShortLE($stream)|0);
  $24 = $23 << 16 >> 16;
  $25 = (_FT_Stream_GetUShortLE($stream)|0);
  $26 = $25 << 16 >> 16;
  $27 = (_FT_Stream_GetUShortLE($stream)|0);
  $28 = $27 << 16 >> 16;
  $29 = (_FT_Stream_GetUShortLE($stream)|0);
  $30 = $29 << 16 >> 16;
  $31 = (_FT_Stream_GetUShortLE($stream)|0);
  $32 = ((($face)) + 304|0);
  HEAP16[$32>>1] = $31;
  $firstCol$0 = $24;$firstRow$0 = $28;$lastCol$0 = $26;$lastRow$0 = $30;
 } else {
  $13 = (_FT_Stream_GetUShort($stream)|0);
  $14 = $13 << 16 >> 16;
  $15 = (_FT_Stream_GetUShort($stream)|0);
  $16 = $15 << 16 >> 16;
  $17 = (_FT_Stream_GetUShort($stream)|0);
  $18 = $17 << 16 >> 16;
  $19 = (_FT_Stream_GetUShort($stream)|0);
  $20 = $19 << 16 >> 16;
  $21 = (_FT_Stream_GetUShort($stream)|0);
  $22 = ((($face)) + 304|0);
  HEAP16[$22>>1] = $21;
  $firstCol$0 = $14;$firstRow$0 = $18;$lastCol$0 = $16;$lastRow$0 = $20;
 }
 _FT_Stream_ExitFrame($stream);
 $33 = HEAP32[$format>>2]|0;
 $34 = ($33>>>0)<(256);
 if (!($34)) {
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = (($lastCol$0) - ($firstCol$0))|0;
 $36 = (($35) + 1)|0;
 $37 = (1 - ($firstRow$0))|0;
 $38 = (($37) + ($lastRow$0))|0;
 $39 = Math_imul($38, $36)|0;
 $40 = (_ft_mem_realloc($1,8,0,$39,0,$error)|0);
 $41 = HEAP32[$error>>2]|0;
 $42 = ($41|0)==(0);
 if (!($42)) {
  $$0 = 64;
  STACKTOP = sp;return ($$0|0);
 }
 $43 = $39 << 1;
 $44 = (_FT_Stream_EnterFrame($stream,$43)|0);
 HEAP32[$error>>2] = $44;
 $45 = ($44|0)==(0);
 if ($45) {
  $46 = ($39|0)>(0);
  if ($46) {
   $47 = HEAP32[$format>>2]|0;
   $48 = $47 & 4;
   $49 = ($48|0)==(0);
   $50 = (($lastRow$0) + 1)|0;
   $51 = (($50) - ($firstRow$0))|0;
   $52 = (($lastCol$0) + 1)|0;
   $53 = (($52) - ($firstCol$0))|0;
   $54 = Math_imul($51, $53)|0;
   $i$03 = 0;$j$04 = 0;
   while(1) {
    if ($49) {
     $56 = (_FT_Stream_GetUShortLE($stream)|0);
     $$sink = $56;
    } else {
     $55 = (_FT_Stream_GetUShort($stream)|0);
     $$sink = $55;
    }
    $57 = ($$sink<<16>>16)==(-1);
    if ($57) {
     $j$1 = $j$04;
    } else {
     $58 = (($i$03|0) / ($36|0))&-1;
     $59 = (($58) + ($firstRow$0))|0;
     $60 = $59 << 8;
     $61 = (($i$03|0) % ($36|0))&-1;
     $62 = (($61) + ($firstCol$0))|0;
     $63 = (($62) + ($60))|0;
     $64 = (($40) + ($j$04<<3)|0);
     HEAP32[$64>>2] = $63;
     $65 = (((($40) + ($j$04<<3)|0)) + 4|0);
     HEAP16[$65>>1] = $$sink;
     $66 = (($j$04) + 1)|0;
     $j$1 = $66;
    }
    $67 = (($i$03) + 1)|0;
    $exitcond7 = ($67|0)==($54|0);
    if ($exitcond7) {
     $j$0$lcssa = $j$1;
     break;
    } else {
     $i$03 = $67;$j$04 = $j$1;
    }
   }
  } else {
   $j$0$lcssa = 0;
  }
  _FT_Stream_ExitFrame($stream);
  $68 = (_ft_mem_realloc($1,8,0,$j$0$lcssa,0,$error)|0);
  $69 = HEAP32[$error>>2]|0;
  $70 = ($69|0)==(0);
  if ($70) {
   $71 = ($j$0$lcssa|0)>(0);
   if ($71) {
    $i$12 = 0;
    while(1) {
     $72 = (($40) + ($i$12<<3)|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = (($68) + ($i$12<<3)|0);
     HEAP32[$74>>2] = $73;
     $75 = (((($40) + ($i$12<<3)|0)) + 4|0);
     $76 = HEAP16[$75>>1]|0;
     $77 = (((($68) + ($i$12<<3)|0)) + 4|0);
     HEAP16[$77>>1] = $76;
     $78 = (($i$12) + 1)|0;
     $exitcond = ($78|0)==($j$0$lcssa|0);
     if ($exitcond) {
      break;
     } else {
      $i$12 = $78;
     }
    }
   }
   $79 = ((($face)) + 296|0);
   HEAP32[$79>>2] = $j$0$lcssa;
   $80 = ((($face)) + 300|0);
   HEAP32[$80>>2] = $68;
   _ft_mem_free($1,$40);
   $81 = HEAP32[$error>>2]|0;
   $$0 = $81;
   STACKTOP = sp;return ($$0|0);
  } else {
   $encoding$0 = $68;
  }
 } else {
  $encoding$0 = 0;
 }
 _ft_mem_free($1,$encoding$0);
 _ft_mem_free($1,$40);
 $82 = HEAP32[$error>>2]|0;
 $$0 = $82;
 STACKTOP = sp;return ($$0|0);
}
function _pcf_interpret_style($pcf) {
 $pcf = $pcf|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $error = 0, $exitcond = 0, $exitcond$3 = 0, $len$1 = 0, $len$1$1 = 0, $len$1$2 = 0, $len$1$3 = 0, $len$2 = 0, $lengths = 0, $mm$04 = 0, $mm$04$3 = 0, $s$1 = 0, $s$1$1 = 0, $s$1$2 = 0, $s$1$3 = 0, $s$2 = 0, $s$2$1 = 0;
 var $s$2$2 = 0, $s$2$3 = 0, $strings = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $error = sp + 32|0;
 $strings = sp + 16|0;
 $lengths = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($pcf)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 ;HEAP32[$strings>>2]=0|0;HEAP32[$strings+4>>2]=0|0;HEAP32[$strings+8>>2]=0|0;HEAP32[$strings+12>>2]=0|0;
 $2 = ((($pcf)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = (_pcf_find_property($pcf,27404)|0);
 $4 = ($3|0)==(0|0);
 L1: do {
  if (!($4)) {
   $5 = ((($3)) + 4|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if (!($7)) {
    $8 = ((($3)) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP8[$9>>0]|0;
    switch ($10<<24>>24) {
    case 105: case 73: case 111: case 79:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $11 = HEAP32[$2>>2]|0;
    $12 = $11 | 1;
    HEAP32[$2>>2] = $12;
    $13 = HEAP32[$8>>2]|0;
    $14 = HEAP8[$13>>0]|0;
    $15 = $14 & -33;
    $16 = ($15<<24>>24)==(79);
    $17 = $16 ? 27410 : 89788;
    $18 = ((($strings)) + 8|0);
    HEAP32[$18>>2] = $17;
   }
  }
 } while(0);
 $19 = (_pcf_find_property($pcf,27418)|0);
 $20 = ($19|0)==(0|0);
 L6: do {
  if (!($20)) {
   $21 = ((($19)) + 4|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)==(0);
   if (!($23)) {
    $24 = ((($19)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP8[$25>>0]|0;
    switch ($26<<24>>24) {
    case 98: case 66:  {
     break;
    }
    default: {
     break L6;
    }
    }
    $27 = HEAP32[$2>>2]|0;
    $28 = $27 | 2;
    HEAP32[$2>>2] = $28;
    $29 = ((($strings)) + 4|0);
    HEAP32[$29>>2] = 89783;
   }
  }
 } while(0);
 $30 = (_pcf_find_property($pcf,27430)|0);
 $31 = ($30|0)==(0|0);
 L11: do {
  if (!($31)) {
   $32 = ((($30)) + 4|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = ($33<<24>>24)==(0);
   if (!($34)) {
    $35 = ((($30)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP8[$36>>0]|0;
    switch ($37<<24>>24) {
    case 110: case 78: case 0:  {
     break L11;
     break;
    }
    default: {
    }
    }
    $38 = ((($strings)) + 12|0);
    HEAP32[$38>>2] = $36;
   }
  }
 } while(0);
 $39 = (_pcf_find_property($pcf,27444)|0);
 $40 = ($39|0)==(0|0);
 L16: do {
  if (!($40)) {
   $41 = ((($39)) + 4|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(0);
   if (!($43)) {
    $44 = ((($39)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP8[$45>>0]|0;
    switch ($46<<24>>24) {
    case 110: case 78: case 0:  {
     break L16;
     break;
    }
    default: {
    }
    }
    HEAP32[$strings>>2] = $45;
   }
  }
 } while(0);
 HEAP32[$lengths>>2] = 0;
 $47 = HEAP32[$strings>>2]|0;
 $48 = ($47|0)==(0|0);
 if ($48) {
  $len$1 = 0;
 } else {
  $49 = (_strlen($47)|0);
  HEAP32[$lengths>>2] = $49;
  $50 = (($49) + 1)|0;
  $len$1 = $50;
 }
 $51 = ((($lengths)) + 4|0);
 HEAP32[$51>>2] = 0;
 $52 = ((($strings)) + 4|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(0|0);
 if ($54) {
  $len$1$1 = $len$1;
 } else {
  $104 = (_strlen($53)|0);
  HEAP32[$51>>2] = $104;
  $105 = (($len$1) + 1)|0;
  $106 = (($105) + ($104))|0;
  $len$1$1 = $106;
 }
 $107 = ((($lengths)) + 8|0);
 HEAP32[$107>>2] = 0;
 $108 = ((($strings)) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)==(0|0);
 if ($110) {
  $len$1$2 = $len$1$1;
 } else {
  $111 = (_strlen($109)|0);
  HEAP32[$107>>2] = $111;
  $112 = (($len$1$1) + 1)|0;
  $113 = (($112) + ($111))|0;
  $len$1$2 = $113;
 }
 $114 = ((($lengths)) + 12|0);
 HEAP32[$114>>2] = 0;
 $115 = ((($strings)) + 12|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)==(0|0);
 if ($117) {
  $len$1$3 = $len$1$2;
 } else {
  $118 = (_strlen($116)|0);
  HEAP32[$114>>2] = $118;
  $119 = (($len$1$2) + 1)|0;
  $120 = (($119) + ($118))|0;
  $len$1$3 = $120;
 }
 $121 = ($len$1$3|0)==(0);
 if ($121) {
  HEAP32[$strings>>2] = 89763;
  HEAP32[$lengths>>2] = 7;
  $len$2 = 8;
 } else {
  $len$2 = $len$1$3;
 }
 $55 = (_ft_mem_alloc($1,$len$2,$error)|0);
 $56 = ((($pcf)) + 24|0);
 HEAP32[$56>>2] = $55;
 $57 = HEAP32[$error>>2]|0;
 $58 = ($57|0)==(0);
 if (!($58)) {
  $$0 = $57;
  STACKTOP = sp;return ($$0|0);
 }
 $59 = HEAP32[$strings>>2]|0;
 $60 = HEAP32[$lengths>>2]|0;
 $61 = ($59|0)==(0|0);
 if ($61) {
  $s$2 = $55;
 } else {
  $62 = HEAP32[$56>>2]|0;
  $63 = ($55|0)==($62|0);
  if ($63) {
   $s$1 = $55;
  } else {
   $64 = ((($55)) + 1|0);
   HEAP8[$55>>0] = 32;
   $s$1 = $64;
  }
  _memcpy(($s$1|0),($59|0),($60|0))|0;
  $65 = ($60|0)==(0);
  if (!($65)) {
   $mm$04 = 0;
   while(1) {
    $66 = (($s$1) + ($mm$04)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = ($67<<24>>24)==(32);
    if ($68) {
     HEAP8[$66>>0] = 45;
    }
    $69 = (($mm$04) + 1)|0;
    $exitcond = ($69|0)==($60|0);
    if ($exitcond) {
     break;
    } else {
     $mm$04 = $69;
    }
   }
  }
  $70 = (($s$1) + ($60)|0);
  $s$2 = $70;
 }
 $71 = ((($strings)) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($lengths)) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($72|0)==(0|0);
 if ($75) {
  $s$2$1 = $s$2;
 } else {
  $76 = HEAP32[$56>>2]|0;
  $77 = ($s$2|0)==($76|0);
  if ($77) {
   $s$1$1 = $s$2;
  } else {
   $78 = ((($s$2)) + 1|0);
   HEAP8[$s$2>>0] = 32;
   $s$1$1 = $78;
  }
  _memcpy(($s$1$1|0),($72|0),($74|0))|0;
  $79 = (($s$1$1) + ($74)|0);
  $s$2$1 = $79;
 }
 $80 = ((($strings)) + 8|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ((($lengths)) + 8|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($81|0)==(0|0);
 if ($84) {
  $s$2$2 = $s$2$1;
 } else {
  $85 = HEAP32[$56>>2]|0;
  $86 = ($s$2$1|0)==($85|0);
  if ($86) {
   $s$1$2 = $s$2$1;
  } else {
   $87 = ((($s$2$1)) + 1|0);
   HEAP8[$s$2$1>>0] = 32;
   $s$1$2 = $87;
  }
  _memcpy(($s$1$2|0),($81|0),($83|0))|0;
  $88 = (($s$1$2) + ($83)|0);
  $s$2$2 = $88;
 }
 $89 = ((($strings)) + 12|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ((($lengths)) + 12|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($90|0)==(0|0);
 if ($93) {
  $s$2$3 = $s$2$2;
 } else {
  $94 = HEAP32[$56>>2]|0;
  $95 = ($s$2$2|0)==($94|0);
  if ($95) {
   $s$1$3 = $s$2$2;
  } else {
   $96 = ((($s$2$2)) + 1|0);
   HEAP8[$s$2$2>>0] = 32;
   $s$1$3 = $96;
  }
  _memcpy(($s$1$3|0),($90|0),($92|0))|0;
  $97 = ($92|0)==(0);
  if (!($97)) {
   $mm$04$3 = 0;
   while(1) {
    $98 = (($s$1$3) + ($mm$04$3)|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = ($99<<24>>24)==(32);
    if ($100) {
     HEAP8[$98>>0] = 45;
    }
    $101 = (($mm$04$3) + 1)|0;
    $exitcond$3 = ($101|0)==($92|0);
    if ($exitcond$3) {
     break;
    } else {
     $mm$04$3 = $101;
    }
   }
  }
  $102 = (($s$1$3) + ($92)|0);
  $s$2$3 = $102;
 }
 HEAP8[$s$2$3>>0] = 0;
 $103 = HEAP32[$error>>2]|0;
 $$0 = $103;
 STACKTOP = sp;return ($$0|0);
}
function _pcf_seek_to_table_type($stream,$tables,$ntables,$type,$aformat,$asize) {
 $stream = $stream|0;
 $tables = $tables|0;
 $ntables = $ntables|0;
 $type = $type|0;
 $aformat = $aformat|0;
 $asize = $asize|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0;
 var $i$02 = 0, $i$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ntables|0)==(0);
 L1: do {
  if ($0) {
   $error$0 = 3;
  } else {
   $i$02 = 0;
   while(1) {
    $1 = (($tables) + ($i$02<<4)|0);
    $2 = HEAP32[$1>>2]|0;
    $3 = ($2|0)==($type|0);
    if ($3) {
     $i$02$lcssa = $i$02;
     break;
    }
    $16 = (($i$02) + 1)|0;
    $17 = ($16>>>0)<($ntables>>>0);
    if ($17) {
     $i$02 = $16;
    } else {
     $error$0 = 3;
     break L1;
    }
   }
   $4 = ((($stream)) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (((($tables) + ($i$02$lcssa<<4)|0)) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($5>>>0);
   if ($8) {
    $error$0 = 83;
   } else {
    $9 = (($7) - ($5))|0;
    $10 = (_FT_Stream_Skip($stream,$9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $12 = (((($tables) + ($i$02$lcssa<<4)|0)) + 8|0);
     $13 = HEAP32[$12>>2]|0;
     HEAP32[$asize>>2] = $13;
     $14 = (((($tables) + ($i$02$lcssa<<4)|0)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$aformat>>2] = $15;
     $$0 = 0;
     return ($$0|0);
    } else {
     $error$0 = 83;
    }
   }
  }
 } while(0);
 HEAP32[$asize>>2] = 0;
 $$0 = $error$0;
 return ($$0|0);
}
function _pcf_get_metric($stream,$format,$metric) {
 $stream = $stream|0;
 $format = $format|0;
 $metric = $metric|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compr = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $compr = sp;
 $0 = ($format>>>0)<(256);
 if ($0) {
  $1 = $format & 4;
  $2 = ($1|0)!=(0);
  $3 = $2 ? 21384 : 21416;
  $4 = (_FT_Stream_ReadFields($stream,$3,$metric)|0);
  $error$0 = $4;
  STACKTOP = sp;return ($error$0|0);
 }
 $5 = (_FT_Stream_ReadFields($stream,21448,$compr)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $error$0 = $5;
  STACKTOP = sp;return ($error$0|0);
 }
 $7 = HEAP8[$compr>>0]|0;
 $8 = $7&255;
 $9 = (($8) + 65408)|0;
 $10 = $9&65535;
 HEAP16[$metric>>1] = $10;
 $11 = ((($compr)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (($13) + 65408)|0;
 $15 = $14&65535;
 $16 = ((($metric)) + 2|0);
 HEAP16[$16>>1] = $15;
 $17 = ((($compr)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = (($19) + 65408)|0;
 $21 = $20&65535;
 $22 = ((($metric)) + 4|0);
 HEAP16[$22>>1] = $21;
 $23 = ((($compr)) + 3|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = (($25) + 65408)|0;
 $27 = $26&65535;
 $28 = ((($metric)) + 6|0);
 HEAP16[$28>>1] = $27;
 $29 = ((($compr)) + 4|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = (($31) + 65408)|0;
 $33 = $32&65535;
 $34 = ((($metric)) + 8|0);
 HEAP16[$34>>1] = $33;
 $35 = ((($metric)) + 10|0);
 HEAP16[$35>>1] = 0;
 $error$0 = 0;
 STACKTOP = sp;return ($error$0|0);
}
function _pfr_face_done($pfrface) {
 $pfrface = $pfrface|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pfrface|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($pfrface)) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($pfrface)) + 20|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($pfrface)) + 24|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($pfrface)) + 288|0);
 $8 = ((($pfrface)) + 100|0);
 $9 = HEAP32[$8>>2]|0;
 _pfr_phy_font_done($7,$9);
 $10 = ((($pfrface)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 _ft_mem_free($4,$11);
 HEAP32[$10>>2] = 0;
 return;
}
function _pfr_face_init($stream,$pfrface,$face_index,$num_params,$params) {
 $stream = $stream|0;
 $pfrface = $pfrface|0;
 $face_index = $face_index|0;
 $num_params = $num_params|0;
 $params = $params|0;
 var $$max$0 = 0, $$max$0$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $charmap = 0, $count1$02 = 0, $div = 0, $error = 0, $exitcond = 0, $gchar$03 = 0;
 var $max$0$lcssa = 0, $max$01 = 0, $n$04 = 0, $nn$0$lcssa = 0, $nn$010 = 0, $num_faces = 0, $phitmp = 0, $sext = 0, $size$05 = 0, $storemerge = 0, $strike$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $error = sp + 16|0;
 $num_faces = sp + 12|0;
 $charmap = sp;
 $0 = ((($pfrface)) + 132|0);
 $1 = (_pfr_header_load($0,$stream)|0);
 HEAP32[$error>>2] = $1;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $171 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($171|0);
 }
 $3 = (_pfr_header_check($0)|0);
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  HEAP32[$error>>2] = 2;
  $171 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($171|0);
 }
 $5 = ((($pfrface)) + 152|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_pfr_log_font_count($stream,$6,$num_faces)|0);
 HEAP32[$error>>2] = $7;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $171 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($171|0);
 }
 $9 = HEAP32[$num_faces>>2]|0;
 HEAP32[$pfrface>>2] = $9;
 $10 = ($face_index|0)<(0);
 if ($10) {
  $171 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($171|0);
 }
 $11 = ($9|0)>($face_index|0);
 if (!($11)) {
  HEAP32[$error>>2] = 6;
  $171 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($171|0);
 }
 $12 = ((($pfrface)) + 240|0);
 $13 = HEAP32[$5>>2]|0;
 $14 = ((($pfrface)) + 204|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 $17 = $16&1;
 $18 = (_pfr_log_font_load($12,$stream,$face_index,$13,$17)|0);
 HEAP32[$error>>2] = $18;
 $19 = ($18|0)==(0);
 if (!($19)) {
  $171 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($171|0);
 }
 $20 = ((($pfrface)) + 288|0);
 $21 = ((($12)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($12)) + 40|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_pfr_phy_font_load($20,$stream,$22,$24)|0);
 HEAP32[$error>>2] = $25;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $171 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($171|0);
 }
 $27 = ((($pfrface)) + 4|0);
 HEAP32[$27>>2] = $face_index;
 $28 = ((($20)) + 120|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 1)|0;
 $31 = ((($pfrface)) + 16|0);
 HEAP32[$31>>2] = $30;
 $32 = ((($pfrface)) + 8|0);
 HEAP32[$32>>2] = 1;
 $33 = HEAP32[$28>>2]|0;
 $34 = ($33|0)==(0);
 L24: do {
  if ($34) {
   $nn$0$lcssa = 0;
  } else {
   $35 = ((($20)) + 128|0);
   $36 = HEAP32[$35>>2]|0;
   $nn$010 = 0;
   while(1) {
    $37 = (((($36) + ($nn$010<<4)|0)) + 12|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)==(0);
    if (!($39)) {
     $nn$0$lcssa = $nn$010;
     break L24;
    }
    $40 = (($nn$010) + 1)|0;
    $41 = HEAP32[$28>>2]|0;
    $42 = ($40>>>0)<($41>>>0);
    if ($42) {
     $nn$010 = $40;
    } else {
     $nn$0$lcssa = $40;
     break;
    }
   }
  }
 } while(0);
 $43 = HEAP32[$28>>2]|0;
 $44 = ($nn$0$lcssa|0)==($43|0);
 do {
  if ($44) {
   $45 = ((($20)) + 92|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(0);
   if (!($47)) {
    HEAP32[$32>>2] = 0;
    break;
   }
   HEAP32[$error>>2] = 3;
   $171 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($171|0);
  }
 } while(0);
 $48 = ((($20)) + 36|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 & 4;
 $51 = ($50|0)==(0);
 if ($51) {
  $52 = HEAP32[$32>>2]|0;
  $53 = $52 | 4;
  HEAP32[$32>>2] = $53;
 }
 $54 = HEAP32[$48>>2]|0;
 $55 = HEAP32[$32>>2]|0;
 $56 = $54 << 4;
 $57 = $56 & 16;
 $58 = (($57) + 16)|0;
 $storemerge = $58 | $55;
 HEAP32[$32>>2] = $storemerge;
 $59 = ((($20)) + 92|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0);
 if (!($61)) {
  $62 = $storemerge | 2;
  HEAP32[$32>>2] = $62;
 }
 $63 = ((($20)) + 132|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)==(0);
 if (!($65)) {
  $66 = HEAP32[$32>>2]|0;
  $67 = $66 | 64;
  HEAP32[$32>>2] = $67;
 }
 $68 = ((($20)) + 84|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($pfrface)) + 20|0);
 HEAP32[$70>>2] = $69;
 $71 = ($69|0)==(0|0);
 if ($71) {
  $72 = ((($20)) + 80|0);
  $73 = HEAP32[$72>>2]|0;
  HEAP32[$70>>2] = $73;
 }
 $74 = ((($20)) + 88|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ((($pfrface)) + 24|0);
 HEAP32[$76>>2] = $75;
 $77 = ((($pfrface)) + 28|0);
 HEAP32[$77>>2] = 0;
 $78 = ((($pfrface)) + 32|0);
 HEAP32[$78>>2] = 0;
 $79 = ((($pfrface)) + 52|0);
 $80 = ((($20)) + 20|0);
 ;HEAP32[$79>>2]=HEAP32[$80>>2]|0;HEAP32[$79+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$79+8>>2]=HEAP32[$80+8>>2]|0;HEAP32[$79+12>>2]=HEAP32[$80+12>>2]|0;
 $81 = ((($20)) + 12|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $82&65535;
 $84 = ((($pfrface)) + 68|0);
 HEAP16[$84>>1] = $83;
 $85 = ((($20)) + 32|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = $86&65535;
 $88 = ((($pfrface)) + 70|0);
 HEAP16[$88>>1] = $87;
 $89 = ((($20)) + 24|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90&65535;
 $92 = ((($pfrface)) + 72|0);
 HEAP16[$92>>1] = $91;
 $93 = HEAP16[$84>>1]|0;
 $94 = $93&65535;
 $95 = ($94*12)|0;
 $96 = (($95>>>0) / 10)&-1;
 $97 = $96&65535;
 $98 = ((($pfrface)) + 74|0);
 HEAP16[$98>>1] = $97;
 $sext = $96 << 16;
 $99 = $sext >> 16;
 $100 = HEAP16[$88>>1]|0;
 $101 = $100 << 16 >> 16;
 $102 = HEAP16[$92>>1]|0;
 $103 = $102 << 16 >> 16;
 $104 = (($101) - ($103))|0;
 $105 = ($99|0)<($104|0);
 if ($105) {
  $106 = $104&65535;
  HEAP16[$98>>1] = $106;
 }
 $107 = HEAP32[$59>>2]|0;
 $108 = ($107|0)==(0);
 if (!($108)) {
  $109 = ((($pfrface)) + 104|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ((($110)) + 28|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (_ft_mem_realloc($112,16,0,$107,0,$error)|0);
  HEAP32[$78>>2] = $113;
  $114 = HEAP32[$error>>2]|0;
  $115 = ($114|0)==(0);
  if (!($115)) {
   $171 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($171|0);
  }
  $116 = ((($20)) + 100|0);
  $117 = HEAP32[$116>>2]|0;
  $n$04 = 0;$size$05 = $113;$strike$06 = $117;
  while(1) {
   $118 = ((($strike$06)) + 4|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119&65535;
   HEAP16[$size$05>>1] = $120;
   $121 = HEAP32[$strike$06>>2]|0;
   $122 = $121&65535;
   $123 = ((($size$05)) + 2|0);
   HEAP16[$123>>1] = $122;
   $124 = HEAP32[$118>>2]|0;
   $125 = $124 << 6;
   $126 = ((($size$05)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = HEAP32[$strike$06>>2]|0;
   $128 = $127 << 6;
   $129 = ((($size$05)) + 8|0);
   HEAP32[$129>>2] = $128;
   $130 = HEAP32[$118>>2]|0;
   $131 = $130 << 6;
   $132 = ((($size$05)) + 12|0);
   HEAP32[$132>>2] = $131;
   $133 = (($n$04) + 1)|0;
   $134 = ((($size$05)) + 16|0);
   $135 = ((($strike$06)) + 36|0);
   $exitcond = ($133|0)==($107|0);
   if ($exitcond) {
    break;
   } else {
    $n$04 = $133;$size$05 = $134;$strike$06 = $135;
   }
  }
  HEAP32[$77>>2] = $107;
 }
 $136 = HEAP32[$48>>2]|0;
 $137 = $136 & 4;
 $138 = ($137|0)==(0);
 if ($138) {
  $139 = ((($20)) + 40|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $140&65535;
  $142 = ((($pfrface)) + 76|0);
  HEAP16[$142>>1] = $141;
 } else {
  $143 = HEAP32[$28>>2]|0;
  $144 = ($143|0)==(0);
  if ($144) {
   $max$0$lcssa = 0;
  } else {
   $145 = ((($20)) + 128|0);
   $146 = HEAP32[$145>>2]|0;
   $count1$02 = $143;$gchar$03 = $146;$max$01 = 0;
   while(1) {
    $147 = ((($gchar$03)) + 4|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($max$01|0)<($148|0);
    $$max$0 = $149 ? $148 : $max$01;
    $150 = (($count1$02) + -1)|0;
    $151 = ((($gchar$03)) + 16|0);
    $152 = ($150|0)==(0);
    if ($152) {
     $$max$0$lcssa = $$max$0;
     break;
    } else {
     $count1$02 = $150;$gchar$03 = $151;$max$01 = $$max$0;
    }
   }
   $phitmp = $$max$0$lcssa&65535;
   $max$0$lcssa = $phitmp;
  }
  $153 = ((($pfrface)) + 76|0);
  HEAP16[$153>>1] = $max$0$lcssa;
 }
 $154 = HEAP16[$98>>1]|0;
 $155 = ((($pfrface)) + 78|0);
 HEAP16[$155>>1] = $154;
 $156 = HEAP16[$84>>1]|0;
 $157 = $156&65535;
 $158 = (($157|0) / -10)&-1;
 $159 = $158&65535;
 $160 = ((($pfrface)) + 80|0);
 HEAP16[$160>>1] = $159;
 $161 = HEAP16[$84>>1]|0;
 $div = (($161&65535) / 30)&-1;
 $162 = ((($pfrface)) + 82|0);
 HEAP16[$162>>1] = $div;
 HEAP32[$charmap>>2] = $pfrface;
 $163 = ((($charmap)) + 8|0);
 HEAP16[$163>>1] = 3;
 $164 = ((($charmap)) + 10|0);
 HEAP16[$164>>1] = 1;
 $165 = ((($charmap)) + 4|0);
 HEAP32[$165>>2] = 1970170211;
 $166 = (_FT_CMap_New(11056,0,$charmap,0)|0);
 HEAP32[$error>>2] = $166;
 $167 = HEAP32[$63>>2]|0;
 $168 = ($167|0)==(0);
 if ($168) {
  $171 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($171|0);
 }
 $169 = HEAP32[$32>>2]|0;
 $170 = $169 | 64;
 HEAP32[$32>>2] = $170;
 $171 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($171|0);
}
function _pfr_slot_init($pfrslot) {
 $pfrslot = $pfrslot|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pfrslot)) + 156|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($pfrslot)) + 160|0);
 _pfr_glyph_init($3,$2);
 return 0;
}
function _pfr_slot_done($pfrslot) {
 $pfrslot = $pfrslot|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pfrslot)) + 160|0);
 _pfr_glyph_done($0);
 return;
}
function _pfr_slot_load($pfrslot,$pfrsize,$gindex,$load_flags) {
 $pfrslot = $pfrslot|0;
 $pfrsize = $pfrsize|0;
 $gindex = $gindex|0;
 $load_flags = $load_flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $advance$0 = 0, $cbox = 0, $error$0 = 0, $gindex$ = 0, $n$01 = 0, $vec$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cbox = sp;
 $0 = ((($pfrslot)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($pfrslot)) + 108|0);
 $3 = ($gindex|0)==(0);
 $4 = (($gindex) + -1)|0;
 $gindex$ = $3 ? 0 : $4;
 $5 = ($1|0)==(0|0);
 if ($5) {
  $error$0 = 6;
  STACKTOP = sp;return ($error$0|0);
 }
 $6 = ((($1)) + 408|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($gindex$>>>0)<($7>>>0);
 if (!($8)) {
  $error$0 = 6;
  STACKTOP = sp;return ($error$0|0);
 }
 $9 = $load_flags & 9;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = (_pfr_slot_load_bitmap($pfrslot,$pfrsize,$gindex$)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $error$0 = 0;
   STACKTOP = sp;return ($error$0|0);
  }
 }
 $13 = $load_flags & 16384;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $error$0 = 6;
  STACKTOP = sp;return ($error$0|0);
 }
 $15 = ((($1)) + 416|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($pfrslot)) + 72|0);
 HEAP32[$17>>2] = 1869968492;
 $18 = ((($pfrslot)) + 110|0);
 HEAP16[$18>>1] = 0;
 HEAP16[$2>>1] = 0;
 $19 = ((($1)) + 188|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($pfrslot)) + 160|0);
 $22 = ((($1)) + 104|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (((($16) + ($gindex$<<4)|0)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (((($16) + ($gindex$<<4)|0)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_pfr_glyph_load($21,$23,$20,$25,$27)|0);
 $29 = ($28|0)==(0);
 if (!($29)) {
  $error$0 = $28;
  STACKTOP = sp;return ($error$0|0);
 }
 $30 = $load_flags & 1;
 $31 = ((($pfrslot)) + 188|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 20|0);
 ;HEAP32[$2>>2]=HEAP32[$33>>2]|0;HEAP32[$2+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$33+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$33+16>>2]|0;
 $34 = ((($pfrslot)) + 124|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 & -6;
 $37 = $36 | 4;
 HEAP32[$34>>2] = $37;
 $38 = ($pfrsize|0)==(0|0);
 if (!($38)) {
  $39 = ((($pfrsize)) + 14|0);
  $40 = HEAP16[$39>>1]|0;
  $41 = ($40&65535)<(24);
  if ($41) {
   $42 = $36 | 260;
   HEAP32[$34>>2] = $42;
  }
 }
 $43 = ((($pfrslot)) + 40|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($pfrslot)) + 52|0);
 HEAP32[$44>>2] = 0;
 $45 = (((($16) + ($gindex$<<4)|0)) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($1)) + 304|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($1)) + 300|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($48|0)==($50|0);
 if ($51) {
  $advance$0 = $46;
 } else {
  $52 = (_FT_MulDiv($46,$50,$48)|0);
  $advance$0 = $52;
 }
 $53 = ((($1)) + 324|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 & 1;
 $56 = ($55|0)==(0);
 if ($56) {
  HEAP32[$43>>2] = $advance$0;
 } else {
  HEAP32[$44>>2] = $advance$0;
 }
 $57 = HEAP32[$43>>2]|0;
 $58 = ((($pfrslot)) + 56|0);
 HEAP32[$58>>2] = $57;
 $59 = HEAP32[$44>>2]|0;
 $60 = ((($pfrslot)) + 60|0);
 HEAP32[$60>>2] = $59;
 $61 = ((($pfrslot)) + 44|0);
 HEAP32[$61>>2] = 0;
 $62 = ((($pfrslot)) + 48|0);
 HEAP32[$62>>2] = 0;
 $63 = ($30|0)==(0);
 if ($63) {
  $64 = ((($pfrsize)) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ((($pfrsize)) + 20|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = HEAP16[$18>>1]|0;
  $69 = ($68<<16>>16)>(0);
  if ($69) {
   $70 = ((($pfrslot)) + 112|0);
   $71 = HEAP32[$70>>2]|0;
   $n$01 = 0;$vec$02 = $71;
   while(1) {
    $72 = HEAP32[$vec$02>>2]|0;
    $73 = (_FT_MulFix($72,$65)|0);
    HEAP32[$vec$02>>2] = $73;
    $74 = ((($vec$02)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (_FT_MulFix($75,$67)|0);
    HEAP32[$74>>2] = $76;
    $77 = (($n$01) + 1)|0;
    $78 = ((($vec$02)) + 8|0);
    $79 = HEAP16[$18>>1]|0;
    $80 = $79 << 16 >> 16;
    $81 = ($77|0)<($80|0);
    if ($81) {
     $n$01 = $77;$vec$02 = $78;
    } else {
     break;
    }
   }
  }
  $82 = HEAP32[$43>>2]|0;
  $83 = (_FT_MulFix($82,$65)|0);
  HEAP32[$43>>2] = $83;
  $84 = HEAP32[$44>>2]|0;
  $85 = (_FT_MulFix($84,$67)|0);
  HEAP32[$44>>2] = $85;
 }
 _FT_Outline_Get_CBox($2,$cbox);
 $86 = ((($cbox)) + 8|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = HEAP32[$cbox>>2]|0;
 $89 = (($87) - ($88))|0;
 $90 = ((($pfrslot)) + 24|0);
 HEAP32[$90>>2] = $89;
 $91 = ((($cbox)) + 12|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($cbox)) + 4|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($92) - ($94))|0;
 $96 = ((($pfrslot)) + 28|0);
 HEAP32[$96>>2] = $95;
 $97 = HEAP32[$cbox>>2]|0;
 $98 = ((($pfrslot)) + 32|0);
 HEAP32[$98>>2] = $97;
 $99 = HEAP32[$91>>2]|0;
 $100 = HEAP32[$96>>2]|0;
 $101 = (($99) - ($100))|0;
 $102 = ((($pfrslot)) + 36|0);
 HEAP32[$102>>2] = $101;
 $error$0 = $28;
 STACKTOP = sp;return ($error$0|0);
}
function _pfr_face_get_kerning($pfrface,$glyph1,$glyph2,$kerning) {
 $pfrface = $pfrface|0;
 $glyph1 = $glyph1|0;
 $glyph2 = $glyph2|0;
 $kerning = $kerning|0;
 var $$01 = 0, $$base$0 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum12$pn = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum3 = 0, $$sum4 = 0, $$sum4$pn = 0, $$sum4$pn$lcssa = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base$0$lcssa = 0, $base$0$ph = 0;
 var $base$022 = 0, $base$022$lcssa = 0, $cpair$0 = 0, $cpair$1 = 0, $cpair$2 = 0, $error$0 = 0, $glyph1$ = 0, $item$0 = 0, $item$023 = 0, $item$024 = 0, $item$024$lcssa = 0, $or$cond = 0, $p$0 = 0, $p$0$sum$pn = 0, $p$0$sum$pn$v = 0, $p$1 = 0, $p$2$le = 0, $p$3 = 0, $p$4 = 0, $probe$021 = 0;
 var $value$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($pfrface)) + 288|0);
 HEAP32[$kerning>>2] = 0;
 $1 = ((($kerning)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ($glyph1|0)==(0);
 $3 = (($glyph1) + -1)|0;
 $glyph1$ = $2 ? 0 : $3;
 $4 = ($glyph2|0)==(0);
 $5 = (($glyph2) + -1)|0;
 $$01 = $4 ? 0 : $5;
 $6 = ((($0)) + 120|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($glyph1$>>>0)>($7>>>0);
 $9 = ($$01>>>0)>($7>>>0);
 $or$cond = $8 | $9;
 if ($or$cond) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $10 = ((($0)) + 128|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($glyph1$<<4)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + ($$01<<4)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $13 << 16;
 $17 = $15 & 65535;
 $18 = $17 | $16;
 $19 = ((($0)) + 136|0);
 $20 = ((($pfrface)) + 104|0);
 $21 = HEAP32[$20>>2]|0;
 $item$023 = HEAP32[$19>>2]|0;
 $22 = ($item$023|0)==(0|0);
 if ($22) {
  $error$0 = 0;
  return ($error$0|0);
 } else {
  $item$024 = $item$023;
 }
 while(1) {
  $23 = ((($item$024)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($18>>>0)<($24>>>0);
  if (!($25)) {
   $26 = ((($item$024)) + 20|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($18>>>0)>($27>>>0);
   if (!($28)) {
    $item$024$lcssa = $item$024;
    break;
   }
  }
  $item$0 = HEAP32[$item$024>>2]|0;
  $29 = ($item$0|0)==(0|0);
  if ($29) {
   $error$0 = 0;
   label = 32;
   break;
  } else {
   $item$024 = $item$0;
  }
 }
 if ((label|0) == 32) {
  return ($error$0|0);
 }
 $30 = ((($item$024$lcssa)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (_FT_Stream_Seek($21,$31)|0);
 $33 = ($32|0)==(0);
 if (!($33)) {
  $error$0 = $32;
  return ($error$0|0);
 }
 $34 = ((($item$024$lcssa)) + 4|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = ((($item$024$lcssa)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = Math_imul($36, $38)|0;
 $40 = (_FT_Stream_EnterFrame($21,$39)|0);
 $41 = ($40|0)==(0);
 if (!($41)) {
  $error$0 = $40;
  return ($error$0|0);
 }
 $42 = HEAP8[$34>>0]|0;
 $43 = $42&255;
 $44 = HEAP32[$37>>2]|0;
 $45 = (_ft_highpow2($43)|0);
 $46 = Math_imul($45, $44)|0;
 $47 = ((($21)) + 32|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($item$024$lcssa)) + 5|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 & 1;
 $53 = $52&255;
 $54 = $51 & 2;
 $55 = $54&255;
 $56 = ($43|0)==($45|0);
 if ($56) {
  $base$0$ph = $48;
  label = 15;
 } else {
  $57 = (($43) - ($45))|0;
  $58 = Math_imul($57, $44)|0;
  $59 = ($53<<24>>24)==(0);
  if ($59) {
   $$sum9 = (($58) + 2)|0;
   $78 = (($48) + ($58)|0);
   $79 = HEAP8[$78>>0]|0;
   $80 = $79&255;
   $81 = $80 << 16;
   $$sum11 = (($58) + 1)|0;
   $82 = (($48) + ($$sum11)|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $85 = $81 | $84;
   $$sum12$pn = $$sum9;$cpair$0 = $85;
  } else {
   $$sum12 = (($58) + 4)|0;
   $60 = (($48) + ($58)|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61&255;
   $63 = $62 << 24;
   $$sum14 = (($58) + 1)|0;
   $64 = (($48) + ($$sum14)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = $66 << 16;
   $68 = $67 | $63;
   $$sum15 = (($58) + 2)|0;
   $69 = (($48) + ($$sum15)|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = $71 << 8;
   $73 = $68 | $72;
   $$sum16 = (($58) + 3)|0;
   $74 = (($48) + ($$sum16)|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $73 | $76;
   $$sum12$pn = $$sum12;$cpair$0 = $77;
  }
  $p$0 = (($48) + ($$sum12$pn)|0);
  $86 = ($cpair$0|0)==($18|0);
  if ($86) {
   $p$4 = $p$0;
   label = 27;
  } else {
   $87 = ($cpair$0>>>0)<($18>>>0);
   if ($87) {
    $88 = ($55<<24>>24)==(0);
    $p$0$sum$pn$v = $88 ? 1 : 2;
    $p$0$sum$pn = (($$sum12$pn) + ($p$0$sum$pn$v))|0;
    $p$1 = (($48) + ($p$0$sum$pn)|0);
    $base$0$ph = $p$1;
    label = 15;
   } else {
    $base$0$ph = $48;
    label = 15;
   }
  }
 }
 L28: do {
  if ((label|0) == 15) {
   $89 = ($46>>>0)>($44>>>0);
   L30: do {
    if ($89) {
     $90 = ($53<<24>>24)==(0);
     $base$022 = $base$0$ph;$probe$021 = $46;
     while(1) {
      $91 = $probe$021 >>> 1;
      $92 = (($base$022) + ($91)|0);
      if ($90) {
       $$sum = (($91) + 2)|0;
       $110 = HEAP8[$92>>0]|0;
       $111 = $110&255;
       $112 = $111 << 16;
       $$sum3 = (($91) + 1)|0;
       $113 = (($base$022) + ($$sum3)|0);
       $114 = HEAP8[$113>>0]|0;
       $115 = $114&255;
       $116 = $112 | $115;
       $$sum4$pn = $$sum;$cpair$1 = $116;
      } else {
       $$sum4 = (($91) + 4)|0;
       $93 = HEAP8[$92>>0]|0;
       $94 = $93&255;
       $95 = $94 << 24;
       $$sum6 = (($91) + 1)|0;
       $96 = (($base$022) + ($$sum6)|0);
       $97 = HEAP8[$96>>0]|0;
       $98 = $97&255;
       $99 = $98 << 16;
       $100 = $99 | $95;
       $$sum7 = (($91) + 2)|0;
       $101 = (($base$022) + ($$sum7)|0);
       $102 = HEAP8[$101>>0]|0;
       $103 = $102&255;
       $104 = $103 << 8;
       $105 = $100 | $104;
       $$sum8 = (($91) + 3)|0;
       $106 = (($base$022) + ($$sum8)|0);
       $107 = HEAP8[$106>>0]|0;
       $108 = $107&255;
       $109 = $105 | $108;
       $$sum4$pn = $$sum4;$cpair$1 = $109;
      }
      $117 = ($cpair$1|0)==($18|0);
      if ($117) {
       $$sum4$pn$lcssa = $$sum4$pn;$base$022$lcssa = $base$022;
       break;
      }
      $118 = ($cpair$1>>>0)<($18>>>0);
      $$base$0 = $118 ? $92 : $base$022;
      $119 = ($91>>>0)>($44>>>0);
      if ($119) {
       $base$022 = $$base$0;$probe$021 = $91;
      } else {
       $base$0$lcssa = $$base$0;
       break L30;
      }
     }
     $p$2$le = (($base$022$lcssa) + ($$sum4$pn$lcssa)|0);
     $p$4 = $p$2$le;
     label = 27;
     break L28;
    } else {
     $base$0$lcssa = $base$0$ph;
    }
   } while(0);
   $120 = ($53<<24>>24)==(0);
   if ($120) {
    $139 = ((($base$0$lcssa)) + 2|0);
    $140 = HEAP8[$base$0$lcssa>>0]|0;
    $141 = $140&255;
    $142 = $141 << 16;
    $143 = ((($base$0$lcssa)) + 1|0);
    $144 = HEAP8[$143>>0]|0;
    $145 = $144&255;
    $146 = $142 | $145;
    $cpair$2 = $146;$p$3 = $139;
   } else {
    $121 = ((($base$0$lcssa)) + 4|0);
    $122 = HEAP8[$base$0$lcssa>>0]|0;
    $123 = $122&255;
    $124 = $123 << 24;
    $125 = ((($base$0$lcssa)) + 1|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126&255;
    $128 = $127 << 16;
    $129 = $128 | $124;
    $130 = ((($base$0$lcssa)) + 2|0);
    $131 = HEAP8[$130>>0]|0;
    $132 = $131&255;
    $133 = $132 << 8;
    $134 = $129 | $133;
    $135 = ((($base$0$lcssa)) + 3|0);
    $136 = HEAP8[$135>>0]|0;
    $137 = $136&255;
    $138 = $134 | $137;
    $cpair$2 = $138;$p$3 = $121;
   }
   $147 = ($cpair$2|0)==($18|0);
   if ($147) {
    $p$4 = $p$3;
    label = 27;
   }
  }
 } while(0);
 if ((label|0) == 27) {
  $148 = ($55<<24>>24)==(0);
  $149 = HEAP8[$p$4>>0]|0;
  if ($148) {
   $156 = $149&255;
   $value$0 = $156;
  } else {
   $150 = $149 << 24 >> 24;
   $151 = $150 << 8;
   $152 = ((($p$4)) + 1|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = $154 | $151;
   $value$0 = $155;
  }
  $157 = ((($item$024$lcssa)) + 6|0);
  $158 = HEAP16[$157>>1]|0;
  $159 = $158 << 16 >> 16;
  $160 = (($159) + ($value$0))|0;
  HEAP32[$kerning>>2] = $160;
 }
 _FT_Stream_ExitFrame($21);
 $error$0 = $40;
 return ($error$0|0);
}
function _pfr_cmap_init($cmap) {
 $cmap = $cmap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0;
 var $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$cmap>>2]|0;
 $1 = ((($0)) + 408|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($cmap)) + 16|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 416|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($cmap)) + 20|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7>>>0)>(1);
 if (!($8)) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $9 = HEAP32[$6>>2]|0;
 $n$01 = 1;
 while(1) {
  $13 = (($n$01) + -1)|0;
  $14 = (($9) + ($13<<4)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($9) + ($n$01<<4)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15>>>0)<($17>>>0);
  $12 = (($n$01) + 1)|0;
  if (!($18)) {
   $error$0 = 8;
   label = 5;
   break;
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = ($12>>>0)<($10>>>0);
  if ($11) {
   $n$01 = $12;
  } else {
   $error$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($error$0|0);
 }
 return (0)|0;
}
function _pfr_cmap_done($cmap) {
 $cmap = $cmap|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 20|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($cmap)) + 16|0);
 HEAP32[$1>>2] = 0;
 return;
}
function _pfr_cmap_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var $$0 = 0, $$lcssa = 0, $$min$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max$0$ = 0, $max$01 = 0;
 var $min$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($cmap)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $max$01 = $1;$min$02 = 0;
 while(1) {
  $5 = (($max$01) - ($min$02))|0;
  $6 = $5 >>> 1;
  $7 = (($6) + ($min$02))|0;
  $8 = (($4) + ($7<<4)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($char_code|0);
  if ($10) {
   $$lcssa = $7;
   break;
  }
  $12 = ($9>>>0)<($char_code>>>0);
  $13 = (($7) + 1)|0;
  $max$0$ = $12 ? $max$01 : $7;
  $$min$0 = $12 ? $13 : $min$02;
  $14 = ($max$0$>>>0)>($$min$0>>>0);
  if ($14) {
   $max$01 = $max$0$;$min$02 = $$min$0;
  } else {
   $$0 = 0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 $11 = (($$lcssa) + 1)|0;
 $$0 = $11;
 return ($$0|0);
}
function _pfr_cmap_char_next($cmap,$pchar_code) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 var $$lcssa = 0, $$lcssa$lcssa = 0, $$min$0 = 0, $$min$0$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $char_code$0 = 0, $char_code$0$in = 0, $char_code$0$lcssa26 = 0, $char_code$1 = 0, $max$0$ = 0, $max$06 = 0, $min$05 = 0, $or$cond = 0, $result$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pchar_code>>2]|0;
 $1 = ((($cmap)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $4 = ((($cmap)) + 20|0);
 $char_code$0$in = $0;
 L1: while(1) {
  $char_code$0 = (($char_code$0$in) + 1)|0;
  if ($3) {
   $char_code$1 = 0;$result$1 = 0;
   break;
  }
  $5 = HEAP32[$4>>2]|0;
  $max$06 = $2;$min$05 = 0;
  while(1) {
   $6 = (($max$06) - ($min$05))|0;
   $7 = $6 >>> 1;
   $8 = (($7) + ($min$05))|0;
   $9 = (($5) + ($8<<4)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($char_code$0|0);
   if ($11) {
    $$lcssa = $8;
    break;
   }
   $14 = ($10>>>0)<($char_code$0>>>0);
   $15 = (($8) + 1)|0;
   $$min$0 = $14 ? $15 : $min$05;
   $max$0$ = $14 ? $max$06 : $8;
   $16 = ($max$0$>>>0)>($$min$0>>>0);
   if ($16) {
    $max$06 = $max$0$;$min$05 = $$min$0;
   } else {
    $$min$0$lcssa = $$min$0;
    label = 8;
    break L1;
   }
  }
  $12 = ($$lcssa|0)==(0);
  if ($12) {
   $char_code$0$in = $char_code$0;
  } else {
   $$lcssa$lcssa = $$lcssa;$char_code$0$lcssa26 = $char_code$0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $13 = (($$lcssa$lcssa) + 1)|0;
  $char_code$1 = $char_code$0$lcssa26;$result$1 = $13;
 }
 else if ((label|0) == 8) {
  $17 = HEAP32[$1>>2]|0;
  $18 = ($$min$0$lcssa>>>0)>=($17>>>0);
  $19 = ($$min$0$lcssa|0)==(0);
  $or$cond = $19 | $18;
  if ($or$cond) {
   $char_code$1 = 0;$result$1 = 0;
  } else {
   $20 = ((($cmap)) + 20|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($$min$0$lcssa) + 1)|0;
   $23 = (($21) + ($$min$0$lcssa<<4)|0);
   $24 = HEAP32[$23>>2]|0;
   $char_code$1 = $24;$result$1 = $22;
  }
 }
 HEAP32[$pchar_code>>2] = $char_code$1;
 return ($result$1|0);
}
function _pfr_glyph_init($glyph,$loader) {
 $glyph = $glyph|0;
 $loader = $loader|0;
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$glyph; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($glyph)) + 28|0);
 HEAP32[$0>>2] = $loader;
 $1 = ((($glyph)) + 32|0);
 HEAP8[$1>>0] = 0;
 _FT_GlyphLoader_Rewind($loader);
 return;
}
function _pfr_glyph_done($glyph) {
 $glyph = $glyph|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($glyph)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _ft_mem_free($2,$4);
 HEAP32[$3>>2] = 0;
 $5 = ((($glyph)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($glyph)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($glyph)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 _ft_mem_free($2,$8);
 $9 = ((($glyph)) + 16|0);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;HEAP8[$9+16>>0]=0|0;
 return;
}
function _pfr_glyph_load($glyph,$stream,$gps_offset,$offset,$size) {
 $glyph = $glyph|0;
 $stream = $stream|0;
 $gps_offset = $gps_offset|0;
 $offset = $offset|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 _FT_GlyphLoader_Rewind($1);
 $2 = ((($glyph)) + 16|0);
 HEAP32[$2>>2] = 0;
 $3 = (_pfr_glyph_load_rec($glyph,$stream,$gps_offset,$offset,$size)|0);
 return ($3|0);
}
function _pfr_glyph_load_rec($glyph,$stream,$gps_offset,$offset,$size) {
 $glyph = $glyph|0;
 $stream = $stream|0;
 $gps_offset = $gps_offset|0;
 $offset = $offset|0;
 $size = $size|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $error$1 = 0, $exitcond = 0, $exitcond14 = 0, $i$04 = 0, $i$16 = 0, $n$09 = 0, $vec$05 = 0, $vec1$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($offset) + ($gps_offset))|0;
 $1 = (_FT_Stream_Seek($stream,$0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $error$1 = $1;
  return ($error$1|0);
 }
 $3 = (_FT_Stream_EnterFrame($stream,$size)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $error$1 = $3;
  return ($error$1|0);
 }
 $5 = ((($stream)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($size)|0);
 $8 = ($size|0)==(0);
 if (!($8)) {
  $9 = HEAP8[$6>>0]|0;
  $10 = ($9<<24>>24)<(0);
  if ($10) {
   $11 = ((($glyph)) + 28|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($glyph)) + 16|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_pfr_glyph_load_compound($glyph,$6,$7)|0);
   _FT_Stream_ExitFrame($stream);
   $16 = ($15|0)==(0);
   if (!($16)) {
    $error$1 = $15;
    return ($error$1|0);
   }
   $17 = HEAP32[$13>>2]|0;
   $18 = (($17) - ($14))|0;
   $19 = ((($glyph)) + 24|0);
   $20 = ($18|0)>(0);
   if (!($20)) {
    $error$1 = 0;
    return ($error$1|0);
   }
   $21 = ((($12)) + 22|0);
   $22 = ((($12)) + 24|0);
   $23 = ((($12)) + 24|0);
   $n$09 = 0;
   while(1) {
    $24 = HEAP32[$19>>2]|0;
    $$sum = (($n$09) + ($14))|0;
    $25 = HEAP16[$21>>1]|0;
    $26 = $25 << 16 >> 16;
    $27 = (((($24) + (($$sum*24)|0)|0)) + 16|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (((($24) + (($$sum*24)|0)|0)) + 20|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (_pfr_glyph_load_rec($glyph,$stream,$gps_offset,$28,$30)|0);
    $32 = ($31|0)==(0);
    if (!($32)) {
     $error$1 = $31;
     label = 19;
     break;
    }
    $33 = HEAP32[$19>>2]|0;
    $34 = HEAP16[$21>>1]|0;
    $35 = $34 << 16 >> 16;
    $36 = (($35) - ($26))|0;
    $37 = (($33) + (($$sum*24)|0)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($38|0)==(65536);
    if ($39) {
     $40 = (((($33) + (($$sum*24)|0)|0)) + 4|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(65536);
     if ($42) {
      $65 = ($36|0)>(0);
      if ($65) {
       $66 = HEAP32[$22>>2]|0;
       $67 = (($66) + ($26<<3)|0);
       $68 = (((($33) + (($$sum*24)|0)|0)) + 8|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (((($33) + (($$sum*24)|0)|0)) + 12|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = $34 << 16 >> 16;
       $73 = $25 << 16 >> 16;
       $74 = (($72) - ($73))|0;
       $i$16 = 0;$vec1$07 = $67;
       while(1) {
        $75 = HEAP32[$vec1$07>>2]|0;
        $76 = (($75) + ($69))|0;
        HEAP32[$vec1$07>>2] = $76;
        $77 = ((($vec1$07)) + 4|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = (($78) + ($71))|0;
        HEAP32[$77>>2] = $79;
        $80 = (($i$16) + 1)|0;
        $81 = ((($vec1$07)) + 8|0);
        $exitcond14 = ($80|0)==($74|0);
        if ($exitcond14) {
         break;
        } else {
         $i$16 = $80;$vec1$07 = $81;
        }
       }
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
    if ((label|0) == 11) {
     label = 0;
     $43 = ($36|0)>(0);
     if ($43) {
      $44 = HEAP32[$23>>2]|0;
      $45 = (($44) + ($26<<3)|0);
      $46 = (((($33) + (($$sum*24)|0)|0)) + 8|0);
      $47 = (((($33) + (($$sum*24)|0)|0)) + 4|0);
      $48 = (((($33) + (($$sum*24)|0)|0)) + 12|0);
      $49 = $34 << 16 >> 16;
      $50 = $25 << 16 >> 16;
      $51 = (($49) - ($50))|0;
      $i$04 = 0;$vec$05 = $45;
      while(1) {
       $52 = HEAP32[$vec$05>>2]|0;
       $53 = HEAP32[$37>>2]|0;
       $54 = (_FT_MulFix($52,$53)|0);
       $55 = HEAP32[$46>>2]|0;
       $56 = (($55) + ($54))|0;
       HEAP32[$vec$05>>2] = $56;
       $57 = ((($vec$05)) + 4|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = HEAP32[$47>>2]|0;
       $60 = (_FT_MulFix($58,$59)|0);
       $61 = HEAP32[$48>>2]|0;
       $62 = (($61) + ($60))|0;
       HEAP32[$57>>2] = $62;
       $63 = (($i$04) + 1)|0;
       $64 = ((($vec$05)) + 8|0);
       $exitcond = ($63|0)==($51|0);
       if ($exitcond) {
        break;
       } else {
        $i$04 = $63;$vec$05 = $64;
       }
      }
     }
    }
    $82 = (($n$09) + 1)|0;
    $83 = ($82|0)<($18|0);
    if ($83) {
     $n$09 = $82;
    } else {
     $error$1 = $31;
     label = 19;
     break;
    }
   }
   if ((label|0) == 19) {
    return ($error$1|0);
   }
  }
 }
 $84 = (_pfr_glyph_load_simple($glyph,$6,$7)|0);
 _FT_Stream_ExitFrame($stream);
 $error$1 = $84;
 return ($error$1|0);
}
function _pfr_glyph_load_compound($glyph,$p,$limit) {
 $glyph = $glyph|0;
 $p = $p|0;
 $limit = $limit|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $i$02 = 0, $subglyph$03 = 0, $x_pos$0 = 0, $y_pos$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 4|0;
 $error = sp;
 HEAP32[$0>>2] = $p;
 HEAP32[$error>>2] = 0;
 $1 = ((($glyph)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($p)) + 1|0);
 $5 = ($4>>>0)>($limit>>>0);
 L1: do {
  if (!($5)) {
   HEAP32[$0>>2] = $4;
   $6 = HEAP8[$p>>0]|0;
   $7 = $6&255;
   $8 = $7 & 128;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 63;
    $11 = $7 & 8;
    $12 = ($11|0)==(0);
    if (!($12)) {
     $13 = (_pfr_extra_items_skip($0,$limit)|0);
     HEAP32[$error>>2] = $13;
     $14 = ($13|0)==(0);
     if (!($14)) {
      $151 = HEAP32[$error>>2]|0;
      STACKTOP = sp;return ($151|0);
     }
    }
    $15 = ((($glyph)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + ($10))|0;
    $18 = ((($glyph)) + 20|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($17>>>0)>($19>>>0);
    do {
     if ($20) {
      $21 = (($17) + 3)|0;
      $22 = $21 & -4;
      $23 = ($22>>>0)>(64);
      if ($23) {
       HEAP32[$error>>2] = 8;
       $151 = HEAP32[$error>>2]|0;
       STACKTOP = sp;return ($151|0);
      }
      $24 = ((($glyph)) + 24|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (_ft_mem_realloc($3,24,$19,$22,$25,$error)|0);
      HEAP32[$24>>2] = $26;
      $27 = HEAP32[$error>>2]|0;
      $28 = ($27|0)==(0);
      if ($28) {
       HEAP32[$18>>2] = $22;
       break;
      } else {
       $151 = HEAP32[$error>>2]|0;
       STACKTOP = sp;return ($151|0);
      }
     }
    } while(0);
    $29 = ($10|0)==(0);
    if ($29) {
     $151 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($151|0);
    }
    $30 = ((($glyph)) + 24|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + (($16*24)|0)|0);
    $i$02 = 0;$subglyph$03 = $32;
    while(1) {
     $33 = HEAP32[$0>>2]|0;
     $34 = ((($33)) + 1|0);
     $35 = ($34>>>0)>($limit>>>0);
     if ($35) {
      break L1;
     }
     HEAP32[$0>>2] = $34;
     $36 = HEAP8[$33>>0]|0;
     $37 = $36&255;
     HEAP32[$subglyph$03>>2] = 65536;
     $38 = $37 & 16;
     $39 = ($38|0)==(0);
     if (!($39)) {
      $40 = HEAP32[$0>>2]|0;
      $41 = ((($40)) + 2|0);
      $42 = ($41>>>0)>($limit>>>0);
      if ($42) {
       break L1;
      }
      HEAP32[$0>>2] = $41;
      $43 = HEAP8[$40>>0]|0;
      $44 = $43 << 24 >> 24;
      $45 = $44 << 8;
      $46 = ((($40)) + 1|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $47&255;
      $49 = $45 | $48;
      $50 = $49 << 4;
      HEAP32[$subglyph$03>>2] = $50;
     }
     $51 = ((($subglyph$03)) + 4|0);
     HEAP32[$51>>2] = 65536;
     $52 = $37 & 32;
     $53 = ($52|0)==(0);
     if (!($53)) {
      $54 = HEAP32[$0>>2]|0;
      $55 = ((($54)) + 2|0);
      $56 = ($55>>>0)>($limit>>>0);
      if ($56) {
       break L1;
      }
      HEAP32[$0>>2] = $55;
      $57 = HEAP8[$54>>0]|0;
      $58 = $57 << 24 >> 24;
      $59 = $58 << 8;
      $60 = ((($54)) + 1|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61&255;
      $63 = $59 | $62;
      $64 = $63 << 4;
      HEAP32[$51>>2] = $64;
     }
     $65 = $37 & 3;
     switch ($65|0) {
     case 1:  {
      $66 = HEAP32[$0>>2]|0;
      $67 = ((($66)) + 2|0);
      $68 = ($67>>>0)>($limit>>>0);
      if ($68) {
       break L1;
      }
      HEAP32[$0>>2] = $67;
      $69 = HEAP8[$66>>0]|0;
      $70 = $69 << 24 >> 24;
      $71 = $70 << 8;
      $72 = ((($66)) + 1|0);
      $73 = HEAP8[$72>>0]|0;
      $74 = $73&255;
      $75 = $71 | $74;
      $x_pos$0 = $75;
      break;
     }
     case 2:  {
      $76 = HEAP32[$0>>2]|0;
      $77 = ((($76)) + 1|0);
      $78 = ($77>>>0)>($limit>>>0);
      if ($78) {
       break L1;
      }
      HEAP32[$0>>2] = $77;
      $79 = HEAP8[$76>>0]|0;
      $80 = $79 << 24 >> 24;
      $x_pos$0 = $80;
      break;
     }
     default: {
      $x_pos$0 = 0;
     }
     }
     $81 = $37 >>> 2;
     $82 = $81 & 3;
     switch ($82|0) {
     case 1:  {
      $83 = HEAP32[$0>>2]|0;
      $84 = ((($83)) + 2|0);
      $85 = ($84>>>0)>($limit>>>0);
      if ($85) {
       break L1;
      }
      HEAP32[$0>>2] = $84;
      $86 = HEAP8[$83>>0]|0;
      $87 = $86 << 24 >> 24;
      $88 = $87 << 8;
      $89 = ((($83)) + 1|0);
      $90 = HEAP8[$89>>0]|0;
      $91 = $90&255;
      $92 = $88 | $91;
      $y_pos$0 = $92;
      break;
     }
     case 2:  {
      $93 = HEAP32[$0>>2]|0;
      $94 = ((($93)) + 1|0);
      $95 = ($94>>>0)>($limit>>>0);
      if ($95) {
       break L1;
      }
      HEAP32[$0>>2] = $94;
      $96 = HEAP8[$93>>0]|0;
      $97 = $96 << 24 >> 24;
      $y_pos$0 = $97;
      break;
     }
     default: {
      $y_pos$0 = 0;
     }
     }
     $98 = ((($subglyph$03)) + 8|0);
     HEAP32[$98>>2] = $x_pos$0;
     $99 = ((($subglyph$03)) + 12|0);
     HEAP32[$99>>2] = $y_pos$0;
     $100 = $37 & 64;
     $101 = ($100|0)==(0);
     $102 = HEAP32[$0>>2]|0;
     if ($101) {
      $113 = ((($102)) + 1|0);
      $114 = ($113>>>0)>($limit>>>0);
      if ($114) {
       break L1;
      }
      HEAP32[$0>>2] = $113;
      $115 = HEAP8[$102>>0]|0;
      $116 = $115&255;
      $117 = ((($subglyph$03)) + 20|0);
      HEAP32[$117>>2] = $116;
     } else {
      $103 = ((($102)) + 2|0);
      $104 = ($103>>>0)>($limit>>>0);
      if ($104) {
       break L1;
      }
      HEAP32[$0>>2] = $103;
      $105 = HEAP8[$102>>0]|0;
      $106 = $105&255;
      $107 = $106 << 8;
      $108 = ((($102)) + 1|0);
      $109 = HEAP8[$108>>0]|0;
      $110 = $109&255;
      $111 = $107 | $110;
      $112 = ((($subglyph$03)) + 20|0);
      HEAP32[$112>>2] = $111;
     }
     $118 = $37 & 128;
     $119 = ($118|0)==(0);
     $120 = HEAP32[$0>>2]|0;
     if ($119) {
      $136 = ((($120)) + 2|0);
      $137 = ($136>>>0)>($limit>>>0);
      if ($137) {
       break L1;
      }
      HEAP32[$0>>2] = $136;
      $138 = HEAP8[$120>>0]|0;
      $139 = $138&255;
      $140 = $139 << 8;
      $141 = ((($120)) + 1|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = $140 | $143;
      $145 = ((($subglyph$03)) + 16|0);
      HEAP32[$145>>2] = $144;
     } else {
      $121 = ((($120)) + 3|0);
      $122 = ($121>>>0)>($limit>>>0);
      if ($122) {
       break L1;
      }
      HEAP32[$0>>2] = $121;
      $123 = HEAP8[$120>>0]|0;
      $124 = $123 << 24 >> 24;
      $125 = $124 << 16;
      $126 = ((($120)) + 1|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127&255;
      $129 = $128 << 8;
      $130 = $129 | $125;
      $131 = ((($120)) + 2|0);
      $132 = HEAP8[$131>>0]|0;
      $133 = $132&255;
      $134 = $130 | $133;
      $135 = ((($subglyph$03)) + 16|0);
      HEAP32[$135>>2] = $134;
     }
     $146 = HEAP32[$15>>2]|0;
     $147 = (($146) + 1)|0;
     HEAP32[$15>>2] = $147;
     $148 = (($i$02) + 1)|0;
     $149 = ((($subglyph$03)) + 24|0);
     $150 = ($148>>>0)<($10>>>0);
     if ($150) {
      $i$02 = $148;$subglyph$03 = $149;
     } else {
      break;
     }
    }
    $151 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($151|0);
   }
  }
 } while(0);
 HEAP32[$error>>2] = 8;
 $151 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($151|0);
}
function _pfr_glyph_load_simple($glyph,$p,$limit) {
 $glyph = $glyph|0;
 $p = $p|0;
 $limit = $limit|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $args_count$17 = 0, $args_count$2 = 0, $args_format$16 = 0, $args_format$2 = 0, $cur$05 = 0, $error = 0, $i$011 = 0, $mask$09 = 0, $mask$1 = 0, $n$08 = 0, $or$cond = 0, $pos = 0, $x$010 = 0, $x$1 = 0, $x_count$0 = 0, $x_count$1 = 0, $y_count$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = sp + 36|0;
 $error = sp + 32|0;
 $pos = sp;
 HEAP32[$0>>2] = $p;
 HEAP32[$error>>2] = 0;
 $1 = ((($glyph)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($p)) + 1|0);
 $5 = ($4>>>0)>($limit>>>0);
 L1: do {
  if (!($5)) {
   HEAP32[$0>>2] = $4;
   $6 = HEAP8[$p>>0]|0;
   $7 = $6&255;
   $8 = $7 & 128;
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = $7 & 4;
    $11 = ($10|0)==(0);
    if ($11) {
     $18 = $7 & 2;
     $19 = ($18|0)==(0);
     if ($19) {
      $x_count$0 = 0;
     } else {
      $20 = ((($p)) + 2|0);
      $21 = ($20>>>0)>($limit>>>0);
      if ($21) {
       break;
      }
      HEAP32[$0>>2] = $20;
      $22 = HEAP8[$4>>0]|0;
      $23 = $22&255;
      $x_count$0 = $23;
     }
     $24 = $7 & 1;
     $25 = ($24|0)==(0);
     if ($25) {
      $x_count$1 = $x_count$0;$y_count$0 = 0;
     } else {
      $26 = HEAP32[$0>>2]|0;
      $27 = ((($26)) + 1|0);
      $28 = ($27>>>0)>($limit>>>0);
      if ($28) {
       break;
      }
      HEAP32[$0>>2] = $27;
      $29 = HEAP8[$26>>0]|0;
      $30 = $29&255;
      $x_count$1 = $x_count$0;$y_count$0 = $30;
     }
    } else {
     $12 = ((($p)) + 2|0);
     $13 = ($12>>>0)>($limit>>>0);
     if ($13) {
      break;
     }
     HEAP32[$0>>2] = $12;
     $14 = HEAP8[$4>>0]|0;
     $15 = $14&255;
     $16 = $15 & 15;
     $17 = $15 >>> 4;
     $x_count$1 = $16;$y_count$0 = $17;
    }
    $31 = (($x_count$1) + ($y_count$0))|0;
    $32 = ((($glyph)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($31>>>0)>($33>>>0);
    do {
     if ($34) {
      $35 = (($31) + 7)|0;
      $36 = $35 & -8;
      $37 = ((($glyph)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (_ft_mem_realloc($3,4,$33,$36,$38,$error)|0);
      HEAP32[$37>>2] = $39;
      $40 = HEAP32[$error>>2]|0;
      $41 = ($40|0)==(0);
      if ($41) {
       HEAP32[$32>>2] = $36;
       break;
      } else {
       $222 = HEAP32[$error>>2]|0;
       STACKTOP = sp;return ($222|0);
      }
     }
    } while(0);
    $42 = ((($glyph)) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($x_count$1<<2)|0);
    $45 = ((($glyph)) + 12|0);
    HEAP32[$45>>2] = $44;
    $46 = ($31|0)==(0);
    if (!($46)) {
     $i$011 = 0;$mask$09 = 0;$x$010 = 0;
     while(1) {
      $47 = $i$011 & 7;
      $48 = ($47|0)==(0);
      if ($48) {
       $49 = HEAP32[$0>>2]|0;
       $50 = ((($49)) + 1|0);
       $51 = ($50>>>0)>($limit>>>0);
       if ($51) {
        break L1;
       }
       HEAP32[$0>>2] = $50;
       $52 = HEAP8[$49>>0]|0;
       $53 = $52&255;
       $mask$1 = $53;
      } else {
       $mask$1 = $mask$09;
      }
      $54 = $mask$1 & 1;
      $55 = ($54|0)==(0);
      $56 = HEAP32[$0>>2]|0;
      if ($55) {
       $66 = ((($56)) + 1|0);
       $67 = ($66>>>0)>($limit>>>0);
       if ($67) {
        break L1;
       }
       HEAP32[$0>>2] = $66;
       $68 = HEAP8[$56>>0]|0;
       $69 = $68&255;
       $70 = (($69) + ($x$010))|0;
       $x$1 = $70;
      } else {
       $57 = ((($56)) + 2|0);
       $58 = ($57>>>0)>($limit>>>0);
       if ($58) {
        break L1;
       }
       HEAP32[$0>>2] = $57;
       $59 = HEAP8[$56>>0]|0;
       $60 = $59 << 24 >> 24;
       $61 = $60 << 8;
       $62 = ((($56)) + 1|0);
       $63 = HEAP8[$62>>0]|0;
       $64 = $63&255;
       $65 = $61 | $64;
       $x$1 = $65;
      }
      $71 = HEAP32[$42>>2]|0;
      $72 = (($71) + ($i$011<<2)|0);
      HEAP32[$72>>2] = $x$1;
      $73 = $mask$1 >>> 1;
      $74 = (($i$011) + 1)|0;
      $75 = ($74>>>0)<($31>>>0);
      if ($75) {
       $i$011 = $74;$mask$09 = $73;$x$010 = $x$1;
      } else {
       break;
      }
     }
    }
    $76 = $7 & 8;
    $77 = ($76|0)==(0);
    if (!($77)) {
     $78 = (_pfr_extra_items_skip($0,$limit)|0);
     HEAP32[$error>>2] = $78;
     $79 = ($78|0)==(0);
     if (!($79)) {
      $222 = HEAP32[$error>>2]|0;
      STACKTOP = sp;return ($222|0);
     }
    }
    _pfr_glyph_start($glyph);
    $80 = ((($pos)) + 4|0);
    HEAP32[$80>>2] = 0;
    HEAP32[$pos>>2] = 0;
    $81 = ((($pos)) + 24|0);
    $82 = $pos;
    $83 = $82;
    $84 = HEAP32[$83>>2]|0;
    $85 = (($82) + 4)|0;
    $86 = $85;
    $87 = HEAP32[$86>>2]|0;
    $88 = $81;
    $89 = $88;
    HEAP32[$89>>2] = $84;
    $90 = (($88) + 4)|0;
    $91 = $90;
    HEAP32[$91>>2] = $87;
    $92 = ((($pos)) + 28|0);
    $93 = ((($pos)) + 8|0);
    $94 = ((($pos)) + 16|0);
    $95 = ((($pos)) + 28|0);
    $96 = ((($pos)) + 28|0);
    L39: while(1) {
     $97 = HEAP32[$0>>2]|0;
     $98 = ((($97)) + 1|0);
     $99 = ($98>>>0)>($limit>>>0);
     if ($99) {
      break L1;
     }
     HEAP32[$0>>2] = $98;
     $100 = HEAP8[$97>>0]|0;
     $101 = $100&255;
     $102 = $101 & 15;
     $103 = $101 >>> 4;
     switch ($103|0) {
     case 0:  {
      break L39;
      break;
     }
     case 5: case 4: case 1:  {
      $args_count$17 = 1;$args_format$16 = $102;$cur$05 = $pos;$n$08 = 0;
      label = 37;
      break;
     }
     case 2:  {
      $104 = ($102>>>0)<($x_count$1>>>0);
      if (!($104)) {
       break L1;
      }
      $105 = HEAP32[$42>>2]|0;
      $106 = (($105) + ($102<<2)|0);
      $107 = HEAP32[$106>>2]|0;
      HEAP32[$pos>>2] = $107;
      $108 = HEAP32[$92>>2]|0;
      HEAP32[$80>>2] = $108;
      $109 = $pos;
      $110 = $109;
      $111 = HEAP32[$110>>2]|0;
      $112 = (($109) + 4)|0;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = $81;
      $116 = $115;
      HEAP32[$116>>2] = $111;
      $117 = (($115) + 4)|0;
      $118 = $117;
      HEAP32[$118>>2] = $114;
      label = 62;
      break;
     }
     case 3:  {
      $119 = ($102>>>0)<($y_count$0>>>0);
      if (!($119)) {
       break L1;
      }
      $120 = HEAP32[$81>>2]|0;
      HEAP32[$pos>>2] = $120;
      $121 = HEAP32[$45>>2]|0;
      $122 = (($121) + ($102<<2)|0);
      $123 = HEAP32[$122>>2]|0;
      HEAP32[$80>>2] = $123;
      $124 = $pos;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = (($124) + 4)|0;
      $128 = $127;
      $129 = HEAP32[$128>>2]|0;
      $130 = $81;
      $131 = $130;
      HEAP32[$131>>2] = $126;
      $132 = (($130) + 4)|0;
      $133 = $132;
      HEAP32[$133>>2] = $129;
      label = 62;
      break;
     }
     case 6:  {
      $args_count$17 = 3;$args_format$16 = 2958;$cur$05 = $pos;$n$08 = 0;
      label = 37;
      break;
     }
     case 7:  {
      $args_count$17 = 3;$args_format$16 = 3627;$cur$05 = $pos;$n$08 = 0;
      label = 37;
      break;
     }
     default: {
      $args_count$17 = 4;$args_format$16 = $102;$cur$05 = $pos;$n$08 = 0;
      label = 37;
     }
     }
     L50: do {
      if ((label|0) == 37) {
       while(1) {
        label = 0;
        $134 = $args_format$16 & 3;
        switch ($134|0) {
        case 0:  {
         $135 = HEAP32[$0>>2]|0;
         $136 = ((($135)) + 1|0);
         $137 = ($136>>>0)>($limit>>>0);
         if ($137) {
          break L1;
         }
         HEAP32[$0>>2] = $136;
         $138 = HEAP8[$135>>0]|0;
         $139 = $138&255;
         $140 = ($139>>>0)<($x_count$1>>>0);
         if (!($140)) {
          break L1;
         }
         $141 = HEAP32[$42>>2]|0;
         $142 = (($141) + ($139<<2)|0);
         $143 = HEAP32[$142>>2]|0;
         HEAP32[$cur$05>>2] = $143;
         break;
        }
        case 1:  {
         $144 = HEAP32[$0>>2]|0;
         $145 = ((($144)) + 2|0);
         $146 = ($145>>>0)>($limit>>>0);
         if ($146) {
          break L1;
         }
         HEAP32[$0>>2] = $145;
         $147 = HEAP8[$144>>0]|0;
         $148 = $147 << 24 >> 24;
         $149 = $148 << 8;
         $150 = ((($144)) + 1|0);
         $151 = HEAP8[$150>>0]|0;
         $152 = $151&255;
         $153 = $149 | $152;
         HEAP32[$cur$05>>2] = $153;
         break;
        }
        case 2:  {
         $154 = HEAP32[$0>>2]|0;
         $155 = ((($154)) + 1|0);
         $156 = ($155>>>0)>($limit>>>0);
         if ($156) {
          break L1;
         }
         HEAP32[$0>>2] = $155;
         $157 = HEAP8[$154>>0]|0;
         $158 = $157 << 24 >> 24;
         $159 = HEAP32[$81>>2]|0;
         $160 = (($159) + ($158))|0;
         HEAP32[$cur$05>>2] = $160;
         break;
        }
        default: {
         $161 = HEAP32[$81>>2]|0;
         HEAP32[$cur$05>>2] = $161;
        }
        }
        $162 = $args_format$16 >>> 2;
        $163 = $162 & 3;
        switch ($163|0) {
        case 0:  {
         $164 = HEAP32[$0>>2]|0;
         $165 = ((($164)) + 1|0);
         $166 = ($165>>>0)>($limit>>>0);
         if ($166) {
          break L1;
         }
         HEAP32[$0>>2] = $165;
         $167 = HEAP8[$164>>0]|0;
         $168 = $167&255;
         $169 = ($168>>>0)<($y_count$0>>>0);
         if (!($169)) {
          break L1;
         }
         $170 = HEAP32[$45>>2]|0;
         $171 = (($170) + ($168<<2)|0);
         $172 = HEAP32[$171>>2]|0;
         $173 = ((($cur$05)) + 4|0);
         HEAP32[$173>>2] = $172;
         break;
        }
        case 1:  {
         $174 = HEAP32[$0>>2]|0;
         $175 = ((($174)) + 2|0);
         $176 = ($175>>>0)>($limit>>>0);
         if ($176) {
          break L1;
         }
         HEAP32[$0>>2] = $175;
         $177 = HEAP8[$174>>0]|0;
         $178 = $177 << 24 >> 24;
         $179 = $178 << 8;
         $180 = ((($174)) + 1|0);
         $181 = HEAP8[$180>>0]|0;
         $182 = $181&255;
         $183 = $179 | $182;
         $184 = ((($cur$05)) + 4|0);
         HEAP32[$184>>2] = $183;
         break;
        }
        case 2:  {
         $185 = HEAP32[$0>>2]|0;
         $186 = ((($185)) + 1|0);
         $187 = ($186>>>0)>($limit>>>0);
         if ($187) {
          break L1;
         }
         HEAP32[$0>>2] = $186;
         $188 = HEAP8[$185>>0]|0;
         $189 = $188 << 24 >> 24;
         $190 = HEAP32[$96>>2]|0;
         $191 = (($190) + ($189))|0;
         $192 = ((($cur$05)) + 4|0);
         HEAP32[$192>>2] = $191;
         break;
        }
        default: {
         $193 = HEAP32[$95>>2]|0;
         $194 = ((($cur$05)) + 4|0);
         HEAP32[$194>>2] = $193;
        }
        }
        $195 = ($n$08|0)==(0);
        $196 = ($args_count$17|0)==(4);
        $or$cond = $196 & $195;
        if ($or$cond) {
         $197 = HEAP32[$0>>2]|0;
         $198 = ((($197)) + 1|0);
         $199 = ($198>>>0)>($limit>>>0);
         if ($199) {
          break L1;
         }
         HEAP32[$0>>2] = $198;
         $200 = HEAP8[$197>>0]|0;
         $201 = $200&255;
         $202 = (($args_count$17) + -1)|0;
         $args_count$2 = $202;$args_format$2 = $201;
        } else {
         $203 = $args_format$16 >>> 4;
         $args_count$2 = $args_count$17;$args_format$2 = $203;
        }
        $204 = $cur$05;
        $205 = $204;
        $206 = HEAP32[$205>>2]|0;
        $207 = (($204) + 4)|0;
        $208 = $207;
        $209 = HEAP32[$208>>2]|0;
        $210 = $81;
        $211 = $210;
        HEAP32[$211>>2] = $206;
        $212 = (($210) + 4)|0;
        $213 = $212;
        HEAP32[$213>>2] = $209;
        $214 = ((($cur$05)) + 8|0);
        $215 = (($n$08) + 1)|0;
        $216 = ($215>>>0)<($args_count$2>>>0);
        if ($216) {
         $args_count$17 = $args_count$2;$args_format$16 = $args_format$2;$cur$05 = $214;$n$08 = $215;
         label = 37;
        } else {
         break;
        }
       }
       switch ($103|0) {
       case 0:  {
        break L39;
        break;
       }
       case 3: case 2: case 1:  {
        label = 62;
        break L50;
        break;
       }
       case 5: case 4:  {
        $218 = (_pfr_glyph_move_to($glyph,$pos)|0);
        HEAP32[$error>>2] = $218;
        $221 = $218;
        break L50;
        break;
       }
       default: {
        $219 = (_pfr_glyph_curve_to($glyph,$pos,$93,$94)|0);
        HEAP32[$error>>2] = $219;
        $221 = $219;
        break L50;
       }
       }
      }
     } while(0);
     if ((label|0) == 62) {
      label = 0;
      $217 = (_pfr_glyph_line_to($glyph,$pos)|0);
      HEAP32[$error>>2] = $217;
      $221 = $217;
     }
     $220 = ($221|0)==(0);
     if (!($220)) {
      label = 66;
      break;
     }
    }
    if ((label|0) == 66) {
     $222 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($222|0);
    }
    _pfr_glyph_end($glyph);
    $222 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($222|0);
   }
  }
 } while(0);
 HEAP32[$error>>2] = 8;
 $222 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($222|0);
}
function _pfr_glyph_start($glyph) {
 $glyph = $glyph|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 32|0);
 HEAP8[$0>>0] = 0;
 return;
}
function _pfr_glyph_end($glyph) {
 $glyph = $glyph|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _pfr_glyph_close_contour($glyph);
 $0 = ((($glyph)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 _FT_GlyphLoader_Add($1);
 return;
}
function _pfr_glyph_line_to($glyph,$to) {
 $glyph = $glyph|0;
 $to = $to|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($glyph)) + 32|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $error$0 = 8;
  return ($error$0|0);
 }
 $5 = ((($1)) + 22|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = ((($1)) + 58|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = (($7) + 1)|0;
 $12 = (($11) + ($10))|0;
 $13 = ((($1)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12>>>0)>($14>>>0);
 if ($15) {
  $16 = (_FT_GlyphLoader_CheckPoints($1,1,0)|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   $error$0 = $16;
   return ($error$0|0);
  }
 }
 $18 = HEAP16[$8>>1]|0;
 $19 = $18 << 16 >> 16;
 $20 = ((($1)) + 60|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($19<<3)|0);
 $23 = $to;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $22;
 $30 = $29;
 HEAP32[$30>>2] = $25;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = ((($1)) + 64|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($19)|0);
 HEAP8[$35>>0] = 1;
 $36 = HEAP16[$8>>1]|0;
 $37 = (($36) + 1)<<16>>16;
 HEAP16[$8>>1] = $37;
 $error$0 = 0;
 return ($error$0|0);
}
function _pfr_glyph_move_to($glyph,$to) {
 $glyph = $glyph|0;
 $to = $to|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 _pfr_glyph_close_contour($glyph);
 $2 = ((($glyph)) + 32|0);
 HEAP8[$2>>0] = 1;
 $3 = ((($1)) + 22|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = ((($1)) + 58|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + 1)|0;
 $10 = (($9) + ($8))|0;
 $11 = ((($1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  label = 3;
 } else {
  $14 = ((($1)) + 20|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = ((($1)) + 56|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = (($16) + 1)|0;
  $21 = (($20) + ($19))|0;
  $22 = ((($1)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($21>>>0)>($23>>>0);
  if ($24) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $25 = (_FT_GlyphLoader_CheckPoints($1,1,1)|0);
  $26 = ($25|0)==(0);
  if (!($26)) {
   $error$0 = $25;
   return ($error$0|0);
  }
 }
 $27 = (_pfr_glyph_line_to($glyph,$to)|0);
 $error$0 = $27;
 return ($error$0|0);
}
function _pfr_glyph_curve_to($glyph,$control1,$control2,$to) {
 $glyph = $glyph|0;
 $control1 = $control1|0;
 $control2 = $control2|0;
 $to = $to|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($glyph)) + 32|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $error$0 = 8;
  return ($error$0|0);
 }
 $5 = ((($1)) + 22|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = ((($1)) + 58|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = (($7) + 3)|0;
 $12 = (($11) + ($10))|0;
 $13 = ((($1)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12>>>0)>($14>>>0);
 if ($15) {
  $16 = (_FT_GlyphLoader_CheckPoints($1,3,0)|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   $error$0 = $16;
   return ($error$0|0);
  }
 }
 $18 = ((($1)) + 60|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP16[$8>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = (($19) + ($21<<3)|0);
 $23 = ((($1)) + 64|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($21)|0);
 $26 = $control1;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $22;
 $33 = $32;
 HEAP32[$33>>2] = $28;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $31;
 $$sum = (($21) + 1)|0;
 $36 = (($19) + ($$sum<<3)|0);
 $37 = $control2;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (($37) + 4)|0;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = $36;
 $44 = $43;
 HEAP32[$44>>2] = $39;
 $45 = (($43) + 4)|0;
 $46 = $45;
 HEAP32[$46>>2] = $42;
 $$sum1 = (($21) + 2)|0;
 $47 = (($19) + ($$sum1<<3)|0);
 $48 = $to;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 4)|0;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = $47;
 $55 = $54;
 HEAP32[$55>>2] = $50;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = $53;
 HEAP8[$25>>0] = 2;
 $58 = (($24) + ($$sum)|0);
 HEAP8[$58>>0] = 2;
 $59 = (($24) + ($$sum1)|0);
 HEAP8[$59>>0] = 1;
 $60 = HEAP16[$8>>1]|0;
 $61 = $60&65535;
 $62 = (($61) + 3)|0;
 $63 = $62&65535;
 HEAP16[$8>>1] = $63;
 $error$0 = 0;
 return ($error$0|0);
}
function _pfr_glyph_close_contour($glyph) {
 $glyph = $glyph|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $first$0 = 0, $last$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($glyph)) + 32|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  return;
 }
 $5 = ((($1)) + 58|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = (($7) + -1)|0;
 $9 = ((($1)) + 56|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ($10<<16>>16)>(0);
 if ($11) {
  $12 = $10 << 16 >> 16;
  $13 = (($12) + -1)|0;
  $14 = ((($1)) + 68|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($13<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $first$0 = $18;
 } else {
  $first$0 = 0;
 }
 $19 = ($8|0)>($first$0|0);
 if ($19) {
  $20 = ((($1)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + ($first$0<<3)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($8<<3)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($23|0)==($25|0);
  if ($26) {
   $27 = (((($21) + ($first$0<<3)|0)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (((($21) + ($8<<3)|0)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($28|0)==($30|0);
   if ($31) {
    $32 = HEAP16[$5>>1]|0;
    $33 = (($32) + -1)<<16>>16;
    HEAP16[$5>>1] = $33;
    $34 = (($7) + -2)|0;
    $last$0 = $34;
   } else {
    $last$0 = $8;
   }
  } else {
   $last$0 = $8;
  }
 } else {
  $last$0 = $8;
 }
 $35 = ($last$0|0)<($first$0|0);
 if (!($35)) {
  $36 = $last$0&65535;
  $37 = HEAP16[$9>>1]|0;
  $38 = (($37) + 1)<<16>>16;
  HEAP16[$9>>1] = $38;
  $39 = $37 << 16 >> 16;
  $40 = ((($1)) + 68|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($39<<1)|0);
  HEAP16[$42>>1] = $36;
 }
 HEAP8[$2>>0] = 0;
 return;
}
function _pfr_extra_items_skip($pp,$limit) {
 $pp = $pp|0;
 $limit = $limit|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pfr_extra_items_parse($pp,$limit,0,0)|0);
 return ($0|0);
}
function _pfr_extra_items_parse($pp,$limit,$item_list,$item_data) {
 $pp = $pp|0;
 $limit = $limit|0;
 $item_list = $item_list|0;
 $item_data = $item_data|0;
 var $$lcssa = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$2 = 0, $extra$03 = 0, $num_items$04 = 0, $p$05 = 0, $p$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pp>>2]|0;
 $1 = ((($0)) + 1|0);
 $2 = ($1>>>0)>($limit>>>0);
 L1: do {
  if ($2) {
   $error$2 = 8;$p$1 = $0;
  } else {
   $3 = HEAP8[$0>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $error$2 = 0;$p$1 = $1;
   } else {
    $5 = $3&255;
    $6 = ($item_list|0)==(0|0);
    $7 = ((($item_list)) + 4|0);
    $num_items$04 = $5;$p$05 = $1;
    while(1) {
     $8 = ((($p$05)) + 2|0);
     $9 = ($8>>>0)>($limit>>>0);
     if ($9) {
      $error$2 = 8;$p$1 = $p$05;
      break L1;
     }
     $10 = ((($p$05)) + 1|0);
     $11 = HEAP8[$p$05>>0]|0;
     $12 = $11&255;
     $13 = HEAP8[$10>>0]|0;
     $14 = $13&255;
     $$sum = (($12) + 2)|0;
     $15 = (($p$05) + ($$sum)|0);
     $16 = ($15>>>0)>($limit>>>0);
     if ($16) {
      $error$2 = 8;$p$1 = $8;
      break L1;
     }
     L8: do {
      if (!($6)) {
       $17 = HEAP32[$7>>2]|0;
       $18 = ($17|0)==(0|0);
       if (!($18)) {
        $29 = $17;$extra$03 = $item_list;
        while(1) {
         $23 = HEAP32[$extra$03>>2]|0;
         $24 = ($23|0)==($14|0);
         if ($24) {
          $$lcssa = $29;
          break;
         }
         $19 = ((($extra$03)) + 8|0);
         $20 = ((($extra$03)) + 12|0);
         $21 = HEAP32[$20>>2]|0;
         $22 = ($21|0)==(0|0);
         if ($22) {
          break L8;
         } else {
          $29 = $21;$extra$03 = $19;
         }
        }
        $25 = (FUNCTION_TABLE_iiii[$$lcssa & 127]($8,$15,$item_data)|0);
        $26 = ($25|0)==(0);
        if (!($26)) {
         $error$2 = $25;$p$1 = $8;
         break L1;
        }
       }
      }
     } while(0);
     $27 = (($num_items$04) + -1)|0;
     $28 = ($27|0)==(0);
     if ($28) {
      $error$2 = 0;$p$1 = $15;
      break;
     } else {
      $num_items$04 = $27;$p$05 = $15;
     }
    }
   }
  }
 } while(0);
 HEAP32[$pp>>2] = $p$1;
 return ($error$2|0);
}
function _pfr_header_load($header,$stream) {
 $header = $header|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FT_Stream_Seek($stream,0)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $error$0 = $0;
  return ($error$0|0);
 }
 $2 = (_FT_Stream_ReadFields($stream,21660,$header)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $error$0 = $2;
  return ($error$0|0);
 }
 $4 = ((($header)) + 72|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 16;
 $7 = ((($header)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($6))|0;
 HEAP32[$7>>2] = $9;
 $error$0 = 0;
 return ($error$0|0);
}
function _pfr_header_check($header) {
 $header = $header|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$header>>2]|0;
 $1 = ($0|0)==(1346785840);
 if ($1) {
  $2 = ((($header)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3>>>0)>(4);
  if (!($4)) {
   $5 = ((($header)) + 12|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6>>>0)<(58);
   if (!($7)) {
    $8 = ((($header)) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==(3338);
    if ($10) {
     $result$0 = 1;
     return ($result$0|0);
    }
   }
  }
 }
 $result$0 = 0;
 return ($result$0|0);
}
function _pfr_log_font_count($stream,$section_offset,$acount) {
 $stream = $stream|0;
 $section_offset = $section_offset|0;
 $acount = $acount|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $error = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (_FT_Stream_Seek($stream,$section_offset)|0);
 HEAP32[$error>>2] = $0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_FT_Stream_ReadUShort($stream,$error)|0);
  $3 = HEAP32[$error>>2]|0;
  $4 = ($3|0)==(0);
  $5 = $2&65535;
  $$ = $4 ? $5 : 0;
  $result$0 = $$;
 } else {
  $result$0 = 0;
 }
 HEAP32[$acount>>2] = $result$0;
 $6 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _pfr_log_font_load($log_font,$stream,$idx,$section_offset,$size_increment) {
 $log_font = $log_font|0;
 $stream = $stream|0;
 $idx = $idx|0;
 $section_offset = $section_offset|0;
 $size_increment = $size_increment|0;
 var $$$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $local$1 = 0, $local$2 = 0;
 var $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 4|0;
 $p = sp;
 $0 = (_FT_Stream_Seek($stream,$section_offset)|0);
 HEAP32[$error>>2] = $0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_FT_Stream_ReadUShort($stream,$error)|0);
  $3 = HEAP32[$error>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $5 = $2&65535;
   $6 = ($5>>>0)>($idx>>>0);
   if (!($6)) {
    $$0 = 6;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($idx*5)|0;
   $8 = (_FT_Stream_Skip($stream,$7)|0);
   HEAP32[$error>>2] = $8;
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = (_FT_Stream_ReadUShort($stream,$error)|0);
    $11 = $10&65535;
    $12 = HEAP32[$error>>2]|0;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = (_FT_Stream_ReadUOffset($stream,$error)|0);
     $15 = HEAP32[$error>>2]|0;
     $16 = ($15|0)==(0);
     if ($16) {
      HEAP32[$log_font>>2] = $11;
      $17 = ((($log_font)) + 4|0);
      HEAP32[$17>>2] = $14;
      $18 = (_FT_Stream_Seek($stream,$14)|0);
      HEAP32[$error>>2] = $18;
      $19 = ($18|0)==(0);
      if ($19) {
       $20 = (_FT_Stream_EnterFrame($stream,$11)|0);
       HEAP32[$error>>2] = $20;
       $21 = ($20|0)==(0);
       if ($21) {
        $22 = ((($stream)) + 32|0);
        $23 = HEAP32[$22>>2]|0;
        HEAP32[$p>>2] = $23;
        $24 = (($23) + ($11)|0);
        $25 = ($10&65535)<(13);
        do {
         if ($25) {
          label = 34;
         } else {
          $26 = ((($23)) + 3|0);
          HEAP32[$p>>2] = $26;
          $27 = HEAP8[$23>>0]|0;
          $28 = $27 << 24 >> 24;
          $29 = $28 << 16;
          $30 = ((($23)) + 1|0);
          $31 = HEAP8[$30>>0]|0;
          $32 = $31&255;
          $33 = $32 << 8;
          $34 = $33 | $29;
          $35 = ((($23)) + 2|0);
          $36 = HEAP8[$35>>0]|0;
          $37 = $36&255;
          $38 = $34 | $37;
          $39 = ((($log_font)) + 8|0);
          HEAP32[$39>>2] = $38;
          $40 = HEAP32[$p>>2]|0;
          $41 = ((($40)) + 3|0);
          HEAP32[$p>>2] = $41;
          $42 = HEAP8[$40>>0]|0;
          $43 = $42 << 24 >> 24;
          $44 = $43 << 16;
          $45 = ((($40)) + 1|0);
          $46 = HEAP8[$45>>0]|0;
          $47 = $46&255;
          $48 = $47 << 8;
          $49 = $48 | $44;
          $50 = ((($40)) + 2|0);
          $51 = HEAP8[$50>>0]|0;
          $52 = $51&255;
          $53 = $49 | $52;
          $54 = ((($log_font)) + 12|0);
          HEAP32[$54>>2] = $53;
          $55 = HEAP32[$p>>2]|0;
          $56 = ((($55)) + 3|0);
          HEAP32[$p>>2] = $56;
          $57 = HEAP8[$55>>0]|0;
          $58 = $57 << 24 >> 24;
          $59 = $58 << 16;
          $60 = ((($55)) + 1|0);
          $61 = HEAP8[$60>>0]|0;
          $62 = $61&255;
          $63 = $62 << 8;
          $64 = $63 | $59;
          $65 = ((($55)) + 2|0);
          $66 = HEAP8[$65>>0]|0;
          $67 = $66&255;
          $68 = $64 | $67;
          $69 = ((($log_font)) + 16|0);
          HEAP32[$69>>2] = $68;
          $70 = HEAP32[$p>>2]|0;
          $71 = ((($70)) + 3|0);
          HEAP32[$p>>2] = $71;
          $72 = HEAP8[$70>>0]|0;
          $73 = $72 << 24 >> 24;
          $74 = $73 << 16;
          $75 = ((($70)) + 1|0);
          $76 = HEAP8[$75>>0]|0;
          $77 = $76&255;
          $78 = $77 << 8;
          $79 = $78 | $74;
          $80 = ((($70)) + 2|0);
          $81 = HEAP8[$80>>0]|0;
          $82 = $81&255;
          $83 = $79 | $82;
          $84 = ((($log_font)) + 20|0);
          HEAP32[$84>>2] = $83;
          $85 = HEAP32[$p>>2]|0;
          $86 = ((($85)) + 1|0);
          HEAP32[$p>>2] = $86;
          $87 = HEAP8[$85>>0]|0;
          $88 = $87&255;
          $89 = $88 & 4;
          $90 = ($89|0)!=(0);
          if ($90) {
           $91 = $88 >>> 3;
           $92 = $91 & 1;
           $93 = (($92) + 1)|0;
           $94 = $88 & 3;
           $95 = ($94|0)==(0);
           $96 = $92 | 4;
           $$$ = $95 ? $96 : $93;
           $local$1 = $$$;
          } else {
           $local$1 = 0;
          }
          $97 = $88 & 16;
          $98 = ($97|0)!=(0);
          if ($98) {
           $99 = $88 >>> 5;
           $100 = $99 & 1;
           $101 = (($100) + 1)|0;
           $$1 = (($101) + ($local$1))|0;
           $local$2 = $$1;
          } else {
           $local$2 = $local$1;
          }
          $102 = HEAP32[$p>>2]|0;
          $103 = (($102) + ($local$2)|0);
          $104 = ($103>>>0)>($24>>>0);
          if ($104) {
           label = 34;
          } else {
           if ($90) {
            $105 = $88 & 8;
            $106 = ($105|0)==(0);
            if ($106) {
             $115 = ((($102)) + 1|0);
             HEAP32[$p>>2] = $115;
             $116 = HEAP8[$102>>0]|0;
             $117 = $116&255;
             $119 = $117;
            } else {
             $107 = ((($102)) + 2|0);
             HEAP32[$p>>2] = $107;
             $108 = HEAP8[$102>>0]|0;
             $109 = $108 << 24 >> 24;
             $110 = $109 << 8;
             $111 = ((($102)) + 1|0);
             $112 = HEAP8[$111>>0]|0;
             $113 = $112&255;
             $114 = $110 | $113;
             $119 = $114;
            }
            $118 = ((($log_font)) + 28|0);
            HEAP32[$118>>2] = $119;
            $120 = $88 & 3;
            $121 = ($120|0)==(0);
            if ($121) {
             $122 = HEAP32[$p>>2]|0;
             $123 = ((($122)) + 3|0);
             HEAP32[$p>>2] = $123;
             $124 = HEAP8[$122>>0]|0;
             $125 = $124 << 24 >> 24;
             $126 = $125 << 16;
             $127 = ((($122)) + 1|0);
             $128 = HEAP8[$127>>0]|0;
             $129 = $128&255;
             $130 = $129 << 8;
             $131 = $130 | $126;
             $132 = ((($122)) + 2|0);
             $133 = HEAP8[$132>>0]|0;
             $134 = $133&255;
             $135 = $131 | $134;
             $136 = ((($log_font)) + 36|0);
             HEAP32[$136>>2] = $135;
            }
           }
           if ($98) {
            $137 = $88 & 32;
            $138 = ($137|0)==(0);
            $139 = HEAP32[$p>>2]|0;
            if ($138) {
             $148 = ((($139)) + 1|0);
             HEAP32[$p>>2] = $148;
             $149 = HEAP8[$139>>0]|0;
             $150 = $149&255;
             $152 = $150;
            } else {
             $140 = ((($139)) + 2|0);
             HEAP32[$p>>2] = $140;
             $141 = HEAP8[$139>>0]|0;
             $142 = $141 << 24 >> 24;
             $143 = $142 << 8;
             $144 = ((($139)) + 1|0);
             $145 = HEAP8[$144>>0]|0;
             $146 = $145&255;
             $147 = $143 | $146;
             $152 = $147;
            }
            $151 = ((($log_font)) + 32|0);
            HEAP32[$151>>2] = $152;
           }
           $153 = $88 & 64;
           $154 = ($153|0)==(0);
           if (!($154)) {
            $155 = (_pfr_extra_items_skip($p,$24)|0);
            HEAP32[$error>>2] = $155;
            $156 = ($155|0)==(0);
            if (!($156)) {
             break;
            }
           }
           $157 = HEAP32[$p>>2]|0;
           $158 = ((($157)) + 5|0);
           $159 = ($158>>>0)>($24>>>0);
           if ($159) {
            label = 34;
           } else {
            $160 = ((($157)) + 2|0);
            HEAP32[$p>>2] = $160;
            $161 = HEAP8[$157>>0]|0;
            $162 = $161&255;
            $163 = $162 << 8;
            $164 = ((($157)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = $165&255;
            $167 = $163 | $166;
            $168 = ((($log_font)) + 40|0);
            HEAP32[$168>>2] = $167;
            $169 = HEAP32[$p>>2]|0;
            $170 = ((($169)) + 3|0);
            HEAP32[$p>>2] = $170;
            $171 = HEAP8[$169>>0]|0;
            $172 = $171&255;
            $173 = $172 << 16;
            $174 = ((($169)) + 1|0);
            $175 = HEAP8[$174>>0]|0;
            $176 = $175&255;
            $177 = $176 << 8;
            $178 = $177 | $173;
            $179 = ((($169)) + 2|0);
            $180 = HEAP8[$179>>0]|0;
            $181 = $180&255;
            $182 = $178 | $181;
            $183 = ((($log_font)) + 44|0);
            HEAP32[$183>>2] = $182;
            $184 = ($size_increment<<24>>24)==(0);
            if (!($184)) {
             $185 = HEAP32[$p>>2]|0;
             $186 = ((($185)) + 1|0);
             $187 = ($186>>>0)>($24>>>0);
             if ($187) {
              label = 34;
             } else {
              HEAP32[$p>>2] = $186;
              $188 = HEAP8[$185>>0]|0;
              $189 = $188&255;
              $190 = $189 << 16;
              $191 = HEAP32[$168>>2]|0;
              $192 = (($190) + ($191))|0;
              HEAP32[$168>>2] = $192;
             }
            }
           }
          }
         }
        } while(0);
        if ((label|0) == 34) {
         HEAP32[$error>>2] = 8;
        }
        _FT_Stream_ExitFrame($stream);
       }
      }
     }
    }
   }
  }
 }
 $193 = HEAP32[$error>>2]|0;
 $$0 = $193;
 STACKTOP = sp;return ($$0|0);
}
function _pfr_phy_font_done($phy_font,$memory) {
 $phy_font = $phy_font|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $item$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($phy_font)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 _ft_mem_free($memory,$1);
 HEAP32[$0>>2] = 0;
 $2 = ((($phy_font)) + 84|0);
 $3 = HEAP32[$2>>2]|0;
 _ft_mem_free($memory,$3);
 HEAP32[$2>>2] = 0;
 $4 = ((($phy_font)) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 _ft_mem_free($memory,$5);
 HEAP32[$4>>2] = 0;
 $6 = ((($phy_font)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 _ft_mem_free($memory,$7);
 HEAP32[$6>>2] = 0;
 $8 = ((($phy_font)) + 72|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($phy_font)) + 64|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($phy_font)) + 60|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($phy_font)) + 100|0);
 $12 = HEAP32[$11>>2]|0;
 _ft_mem_free($memory,$12);
 HEAP32[$11>>2] = 0;
 $13 = ((($phy_font)) + 92|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($phy_font)) + 96|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($phy_font)) + 128|0);
 $16 = HEAP32[$15>>2]|0;
 _ft_mem_free($memory,$16);
 HEAP32[$15>>2] = 0;
 $17 = ((($phy_font)) + 120|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($phy_font)) + 124|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($phy_font)) + 108|0);
 $20 = HEAP32[$19>>2]|0;
 _ft_mem_free($memory,$20);
 HEAP32[$19>>2] = 0;
 $21 = ((($phy_font)) + 104|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($phy_font)) + 136|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  HEAP32[$22>>2] = 0;
  $27 = ((($phy_font)) + 140|0);
  HEAP32[$27>>2] = 0;
  $28 = ((($phy_font)) + 132|0);
  HEAP32[$28>>2] = 0;
  return;
 } else {
  $item$01 = $23;
 }
 while(1) {
  $25 = HEAP32[$item$01>>2]|0;
  _ft_mem_free($memory,$item$01);
  $26 = ($25|0)==(0|0);
  if ($26) {
   break;
  } else {
   $item$01 = $25;
  }
 }
 HEAP32[$22>>2] = 0;
 $27 = ((($phy_font)) + 140|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($phy_font)) + 132|0);
 HEAP32[$28>>2] = 0;
 return;
}
function _pfr_phy_font_load($phy_font,$stream,$offset,$size) {
 $phy_font = $phy_font|0;
 $stream = $stream|0;
 $offset = $offset|0;
 $size = $size|0;
 var $$Size$1 = 0, $$Size$3 = 0, $$lcssa = 0, $$lobit = 0, $$lobit3 = 0, $$lobit4 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Size$1 = 0;
 var $Size$3 = 0, $error = 0, $exitcond = 0, $exitcond18 = 0, $n$09 = 0, $n1$08 = 0, $num_aux$012 = 0, $or$cond = 0, $p = 0, $q$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 4|0;
 $p = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$phy_font>>2] = $1;
 $2 = ((($phy_font)) + 4|0);
 HEAP32[$2>>2] = $offset;
 $3 = ((($phy_font)) + 136|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($phy_font)) + 140|0);
 HEAP32[$4>>2] = $3;
 $5 = (_FT_Stream_Seek($stream,$offset)|0);
 HEAP32[$error>>2] = $5;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $351 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($351|0);
 }
 $7 = (_FT_Stream_EnterFrame($stream,$size)|0);
 HEAP32[$error>>2] = $7;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $351 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($351|0);
 }
 $9 = ((($stream)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($phy_font)) + 148|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[$9>>2]|0;
 HEAP32[$p>>2] = $12;
 $13 = (($12) + ($size)|0);
 $14 = ($size|0)<(15);
 L7: do {
  if ($14) {
   label = 49;
  } else {
   $15 = ((($12)) + 2|0);
   HEAP32[$p>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $18 = $17 << 8;
   $19 = ((($12)) + 1|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = $18 | $21;
   $23 = ((($phy_font)) + 8|0);
   HEAP32[$23>>2] = $22;
   $24 = HEAP32[$p>>2]|0;
   $25 = ((($24)) + 2|0);
   HEAP32[$p>>2] = $25;
   $26 = HEAP8[$24>>0]|0;
   $27 = $26&255;
   $28 = $27 << 8;
   $29 = ((($24)) + 1|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = $28 | $31;
   $33 = ((($phy_font)) + 12|0);
   HEAP32[$33>>2] = $32;
   $34 = HEAP32[$p>>2]|0;
   $35 = ((($34)) + 2|0);
   HEAP32[$p>>2] = $35;
   $36 = HEAP8[$34>>0]|0;
   $37 = $36&255;
   $38 = $37 << 8;
   $39 = ((($34)) + 1|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $38 | $41;
   $43 = ((($phy_font)) + 16|0);
   HEAP32[$43>>2] = $42;
   $44 = HEAP32[$p>>2]|0;
   $45 = ((($44)) + 2|0);
   HEAP32[$p>>2] = $45;
   $46 = HEAP8[$44>>0]|0;
   $47 = $46 << 24 >> 24;
   $48 = $47 << 8;
   $49 = ((($44)) + 1|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = $48 | $51;
   $53 = ((($phy_font)) + 20|0);
   HEAP32[$53>>2] = $52;
   $54 = HEAP32[$p>>2]|0;
   $55 = ((($54)) + 2|0);
   HEAP32[$p>>2] = $55;
   $56 = HEAP8[$54>>0]|0;
   $57 = $56 << 24 >> 24;
   $58 = $57 << 8;
   $59 = ((($54)) + 1|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = $58 | $61;
   $63 = ((($phy_font)) + 24|0);
   HEAP32[$63>>2] = $62;
   $64 = HEAP32[$p>>2]|0;
   $65 = ((($64)) + 2|0);
   HEAP32[$p>>2] = $65;
   $66 = HEAP8[$64>>0]|0;
   $67 = $66 << 24 >> 24;
   $68 = $67 << 8;
   $69 = ((($64)) + 1|0);
   $70 = HEAP8[$69>>0]|0;
   $71 = $70&255;
   $72 = $68 | $71;
   $73 = ((($phy_font)) + 28|0);
   HEAP32[$73>>2] = $72;
   $74 = HEAP32[$p>>2]|0;
   $75 = ((($74)) + 2|0);
   HEAP32[$p>>2] = $75;
   $76 = HEAP8[$74>>0]|0;
   $77 = $76 << 24 >> 24;
   $78 = $77 << 8;
   $79 = ((($74)) + 1|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $78 | $81;
   $83 = ((($phy_font)) + 32|0);
   HEAP32[$83>>2] = $82;
   $84 = HEAP32[$p>>2]|0;
   $85 = ((($84)) + 1|0);
   HEAP32[$p>>2] = $85;
   $86 = HEAP8[$84>>0]|0;
   $87 = $86&255;
   $88 = ((($phy_font)) + 36|0);
   HEAP32[$88>>2] = $87;
   $89 = $87 & 4;
   $90 = ($89|0)!=(0);
   if (!($90)) {
    $91 = HEAP32[$p>>2]|0;
    $92 = ((($91)) + 2|0);
    $93 = ($92>>>0)>($13>>>0);
    if ($93) {
     label = 49;
     break;
    }
    HEAP32[$p>>2] = $92;
    $94 = HEAP8[$91>>0]|0;
    $95 = $94 << 24 >> 24;
    $96 = $95 << 8;
    $97 = ((($91)) + 1|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = $96 | $99;
    $101 = ((($phy_font)) + 40|0);
    HEAP32[$101>>2] = $100;
   }
   $102 = $87 & 128;
   $103 = ($102|0)==(0);
   if (!($103)) {
    $104 = (_pfr_extra_items_parse($p,$13,11096,$phy_font)|0);
    HEAP32[$error>>2] = $104;
    $105 = ($104|0)==(0);
    if (!($105)) {
     break;
    }
   }
   $106 = HEAP32[$p>>2]|0;
   $107 = ((($106)) + 3|0);
   $108 = ($107>>>0)>($13>>>0);
   if ($108) {
    label = 49;
   } else {
    HEAP32[$p>>2] = $107;
    $109 = HEAP8[$106>>0]|0;
    $110 = $109&255;
    $111 = $110 << 16;
    $112 = ((($106)) + 1|0);
    $113 = HEAP8[$112>>0]|0;
    $114 = $113&255;
    $115 = $114 << 8;
    $116 = $115 | $111;
    $117 = ((($106)) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = $116 | $119;
    $121 = ($120|0)==(0);
    L17: do {
     if (!($121)) {
      $$sum = (($120) + 3)|0;
      $122 = (($106) + ($$sum)|0);
      $123 = ($122>>>0)>($13>>>0);
      if ($123) {
       label = 49;
       break L7;
      }
      HEAP32[$p>>2] = $122;
      $124 = ((($phy_font)) + 84|0);
      $125 = ((($phy_font)) + 44|0);
      $126 = ((($phy_font)) + 48|0);
      $127 = ((($phy_font)) + 52|0);
      $128 = ((($phy_font)) + 88|0);
      $num_aux$012 = $120;$q$011 = $107;
      L20: while(1) {
       $129 = ((($q$011)) + 4|0);
       $130 = HEAP32[$p>>2]|0;
       $131 = ($129>>>0)>($130>>>0);
       if ($131) {
        break L17;
       }
       $132 = HEAP8[$q$011>>0]|0;
       $133 = $132&255;
       $134 = $133 << 8;
       $135 = ((($q$011)) + 1|0);
       $136 = HEAP8[$135>>0]|0;
       $137 = $136&255;
       $138 = $134 | $137;
       $139 = ($138>>>0)<(4);
       $140 = ($num_aux$012>>>0)<($138>>>0);
       $or$cond = $139 | $140;
       if ($or$cond) {
        break L17;
       }
       $141 = (($q$011) + ($138)|0);
       $142 = ((($q$011)) + 2|0);
       $143 = HEAP8[$142>>0]|0;
       $144 = $143&255;
       $145 = $144 << 8;
       $146 = ((($q$011)) + 3|0);
       $147 = HEAP8[$146>>0]|0;
       $148 = $147&255;
       $149 = $145 | $148;
       switch ($149|0) {
       case 1:  {
        $150 = (($138) + -4)|0;
        $151 = (_pfr_aux_name_load($129,$150,$1,$124)|0);
        HEAP32[$error>>2] = $151;
        $152 = ($151|0)==(0);
        if (!($152)) {
         label = 48;
         break L20;
        }
        break;
       }
       case 2:  {
        $153 = ($138>>>0)<(36);
        if (!($153)) {
         $154 = ((($q$011)) + 14|0);
         $155 = HEAP8[$154>>0]|0;
         $156 = $155 << 24 >> 24;
         $157 = $156 << 8;
         $158 = ((($q$011)) + 15|0);
         $159 = HEAP8[$158>>0]|0;
         $160 = $159&255;
         $161 = $157 | $160;
         HEAP32[$125>>2] = $161;
         $162 = ((($q$011)) + 16|0);
         $163 = HEAP8[$162>>0]|0;
         $164 = $163 << 24 >> 24;
         $165 = $164 << 8;
         $166 = ((($q$011)) + 17|0);
         $167 = HEAP8[$166>>0]|0;
         $168 = $167&255;
         $169 = $165 | $168;
         HEAP32[$126>>2] = $169;
         $170 = ((($q$011)) + 18|0);
         $171 = HEAP8[$170>>0]|0;
         $172 = $171 << 24 >> 24;
         $173 = $172 << 8;
         $174 = ((($q$011)) + 19|0);
         $175 = HEAP8[$174>>0]|0;
         $176 = $175&255;
         $177 = $173 | $176;
         HEAP32[$127>>2] = $177;
        }
        break;
       }
       case 3:  {
        $178 = (($138) + -4)|0;
        $179 = (_pfr_aux_name_load($129,$178,$1,$128)|0);
        HEAP32[$error>>2] = $179;
        $180 = ($179|0)==(0);
        if (!($180)) {
         label = 48;
         break L20;
        }
        break;
       }
       default: {
       }
       }
       $181 = (($num_aux$012) - ($138))|0;
       $182 = ($num_aux$012|0)==($138|0);
       if ($182) {
        break L17;
       } else {
        $num_aux$012 = $181;$q$011 = $141;
       }
      }
      if ((label|0) == 48) {
       $351 = HEAP32[$error>>2]|0;
       STACKTOP = sp;return ($351|0);
      }
     }
    } while(0);
    $183 = HEAP32[$p>>2]|0;
    $184 = ((($183)) + 1|0);
    $185 = ($184>>>0)>($13>>>0);
    if ($185) {
     label = 49;
    } else {
     HEAP32[$p>>2] = $184;
     $186 = HEAP8[$183>>0]|0;
     $187 = $186&255;
     $188 = ((($phy_font)) + 104|0);
     HEAP32[$188>>2] = $187;
     $189 = HEAP32[$p>>2]|0;
     $190 = $187 << 1;
     $191 = (($189) + ($190)|0);
     $192 = ($191>>>0)>($13>>>0);
     if ($192) {
      label = 49;
     } else {
      $193 = (_ft_mem_realloc($1,4,0,$187,0,$error)|0);
      $194 = ((($phy_font)) + 108|0);
      HEAP32[$194>>2] = $193;
      $195 = HEAP32[$error>>2]|0;
      $196 = ($195|0)==(0);
      if ($196) {
       $197 = ($186<<24>>24)==(0);
       $198 = HEAP32[$p>>2]|0;
       if ($197) {
        $$lcssa = $198;
       } else {
        $199 = $186&255;
        $201 = $198;$n$09 = 0;
        while(1) {
         $200 = ((($201)) + 2|0);
         HEAP32[$p>>2] = $200;
         $202 = HEAP8[$201>>0]|0;
         $203 = $202 << 24 >> 24;
         $204 = $203 << 8;
         $205 = ((($201)) + 1|0);
         $206 = HEAP8[$205>>0]|0;
         $207 = $206&255;
         $208 = $204 | $207;
         $209 = HEAP32[$194>>2]|0;
         $210 = (($209) + ($n$09<<2)|0);
         HEAP32[$210>>2] = $208;
         $211 = (($n$09) + 1)|0;
         $212 = HEAP32[$p>>2]|0;
         $exitcond18 = ($211|0)==($199|0);
         if ($exitcond18) {
          $$lcssa = $212;
          break;
         } else {
          $201 = $212;$n$09 = $211;
         }
        }
       }
       $213 = ((($$lcssa)) + 8|0);
       $214 = ($213>>>0)>($13>>>0);
       if ($214) {
        label = 49;
       } else {
        $215 = ((($$lcssa)) + 1|0);
        HEAP32[$p>>2] = $215;
        $216 = HEAP8[$$lcssa>>0]|0;
        $217 = $216&255;
        $218 = ((($phy_font)) + 112|0);
        HEAP32[$218>>2] = $217;
        $219 = HEAP32[$p>>2]|0;
        $220 = ((($219)) + 1|0);
        HEAP32[$p>>2] = $220;
        $221 = HEAP8[$219>>0]|0;
        $222 = $221&255;
        $223 = ((($phy_font)) + 116|0);
        HEAP32[$223>>2] = $222;
        $224 = HEAP32[$p>>2]|0;
        $225 = ((($224)) + 2|0);
        HEAP32[$p>>2] = $225;
        $226 = HEAP8[$224>>0]|0;
        $227 = $226&255;
        $228 = $227 << 8;
        $229 = ((($224)) + 1|0);
        $230 = HEAP8[$229>>0]|0;
        $231 = $230&255;
        $232 = $228 | $231;
        $233 = ((($phy_font)) + 68|0);
        HEAP32[$233>>2] = $232;
        $234 = HEAP32[$p>>2]|0;
        $235 = ((($234)) + 2|0);
        HEAP32[$p>>2] = $235;
        $236 = HEAP8[$234>>0]|0;
        $237 = $236&255;
        $238 = $237 << 8;
        $239 = ((($234)) + 1|0);
        $240 = HEAP8[$239>>0]|0;
        $241 = $240&255;
        $242 = $238 | $241;
        $243 = ((($phy_font)) + 56|0);
        HEAP32[$243>>2] = $242;
        $244 = HEAP32[$p>>2]|0;
        $245 = ((($244)) + 2|0);
        HEAP32[$p>>2] = $245;
        $246 = HEAP8[$244>>0]|0;
        $247 = $246&255;
        $248 = $247 << 8;
        $249 = ((($244)) + 1|0);
        $250 = HEAP8[$249>>0]|0;
        $251 = $250&255;
        $252 = $248 | $251;
        $253 = ((($phy_font)) + 120|0);
        HEAP32[$253>>2] = $252;
        $254 = HEAP32[$p>>2]|0;
        $255 = HEAP32[$9>>2]|0;
        $256 = $254;
        $257 = $255;
        $258 = (($256) + ($offset))|0;
        $259 = (($258) - ($257))|0;
        $260 = ((($phy_font)) + 124|0);
        HEAP32[$260>>2] = $259;
        $261 = (_ft_mem_realloc($1,16,0,$252,0,$error)|0);
        $262 = ((($phy_font)) + 128|0);
        HEAP32[$262>>2] = $261;
        $263 = HEAP32[$error>>2]|0;
        $264 = ($263|0)==(0);
        if ($264) {
         $265 = $87 & 2;
         $266 = ($265|0)==(0);
         $267 = $87 >>> 1;
         $268 = $267 & 3;
         $Size$1 = $268 | 4;
         $269 = $87 & 8;
         $270 = ($269|0)==(0);
         $$lobit = $269 >>> 3;
         $271 = $87 & 16;
         $272 = ($271|0)==(0);
         $$lobit3 = $271 >>> 4;
         $273 = $87 & 32;
         $274 = ($273|0)==(0);
         $$lobit4 = $273 >>> 5;
         $$Size$1 = (($$lobit3) + ($$lobit))|0;
         $Size$3 = (($$Size$1) + ($$lobit4))|0;
         $$Size$3 = (($Size$3) + ($Size$1))|0;
         $275 = HEAP32[$p>>2]|0;
         $276 = Math_imul($252, $$Size$3)|0;
         $277 = (($275) + ($276)|0);
         $278 = ($277>>>0)>($13>>>0);
         if ($278) {
          label = 49;
         } else {
          $279 = ($252|0)==(0);
          if (!($279)) {
           $280 = ((($phy_font)) + 40|0);
           $n1$08 = 0;
           while(1) {
            $281 = HEAP32[$262>>2]|0;
            $282 = HEAP32[$p>>2]|0;
            if ($266) {
             $291 = ((($282)) + 1|0);
             HEAP32[$p>>2] = $291;
             $292 = HEAP8[$282>>0]|0;
             $293 = $292&255;
             $295 = $293;
            } else {
             $283 = ((($282)) + 2|0);
             HEAP32[$p>>2] = $283;
             $284 = HEAP8[$282>>0]|0;
             $285 = $284&255;
             $286 = $285 << 8;
             $287 = ((($282)) + 1|0);
             $288 = HEAP8[$287>>0]|0;
             $289 = $288&255;
             $290 = $286 | $289;
             $295 = $290;
            }
            $294 = (($281) + ($n1$08<<4)|0);
            HEAP32[$294>>2] = $295;
            if ($90) {
             $296 = HEAP32[$p>>2]|0;
             $297 = ((($296)) + 2|0);
             HEAP32[$p>>2] = $297;
             $298 = HEAP8[$296>>0]|0;
             $299 = $298 << 24 >> 24;
             $300 = $299 << 8;
             $301 = ((($296)) + 1|0);
             $302 = HEAP8[$301>>0]|0;
             $303 = $302&255;
             $304 = $300 | $303;
             $307 = $304;
            } else {
             $305 = HEAP32[$280>>2]|0;
             $307 = $305;
            }
            $306 = (((($281) + ($n1$08<<4)|0)) + 4|0);
            HEAP32[$306>>2] = $307;
            if (!($270)) {
             $308 = HEAP32[$p>>2]|0;
             $309 = ((($308)) + 1|0);
             HEAP32[$p>>2] = $309;
            }
            $310 = HEAP32[$p>>2]|0;
            if ($272) {
             $319 = ((($310)) + 1|0);
             HEAP32[$p>>2] = $319;
             $320 = HEAP8[$310>>0]|0;
             $321 = $320&255;
             $323 = $321;
            } else {
             $311 = ((($310)) + 2|0);
             HEAP32[$p>>2] = $311;
             $312 = HEAP8[$310>>0]|0;
             $313 = $312&255;
             $314 = $313 << 8;
             $315 = ((($310)) + 1|0);
             $316 = HEAP8[$315>>0]|0;
             $317 = $316&255;
             $318 = $314 | $317;
             $323 = $318;
            }
            $322 = (((($281) + ($n1$08<<4)|0)) + 8|0);
            HEAP32[$322>>2] = $323;
            $324 = HEAP32[$p>>2]|0;
            if ($274) {
             $338 = ((($324)) + 2|0);
             HEAP32[$p>>2] = $338;
             $339 = HEAP8[$324>>0]|0;
             $340 = $339&255;
             $341 = $340 << 8;
             $342 = ((($324)) + 1|0);
             $343 = HEAP8[$342>>0]|0;
             $344 = $343&255;
             $345 = $341 | $344;
             $347 = $345;
            } else {
             $325 = ((($324)) + 3|0);
             HEAP32[$p>>2] = $325;
             $326 = HEAP8[$324>>0]|0;
             $327 = $326&255;
             $328 = $327 << 16;
             $329 = ((($324)) + 1|0);
             $330 = HEAP8[$329>>0]|0;
             $331 = $330&255;
             $332 = $331 << 8;
             $333 = $332 | $328;
             $334 = ((($324)) + 2|0);
             $335 = HEAP8[$334>>0]|0;
             $336 = $335&255;
             $337 = $333 | $336;
             $347 = $337;
            }
            $346 = (((($281) + ($n1$08<<4)|0)) + 12|0);
            HEAP32[$346>>2] = $347;
            $348 = (($n1$08) + 1)|0;
            $exitcond = ($348|0)==($252|0);
            if ($exitcond) {
             break;
            } else {
             $n1$08 = $348;
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 49) {
  HEAP32[$error>>2] = 8;
 }
 _FT_Stream_ExitFrame($stream);
 $349 = (_FT_Stream_Pos($stream)|0);
 $350 = ((($phy_font)) + 144|0);
 HEAP32[$350>>2] = $349;
 HEAP32[$11>>2] = 0;
 $351 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($351|0);
}
function _pfr_aux_name_load($p,$len,$memory,$astring) {
 $p = $p|0;
 $len = $len|0;
 $memory = $memory|0;
 $astring = $astring|0;
 var $$03 = 0, $$05 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $error = 0, $n$01 = 0, $or$cond = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ($len|0)==(0);
 L1: do {
  if ($0) {
   $result$0 = 0;
  } else {
   $1 = (($len) + -1)|0;
   $2 = (($p) + ($1)|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $5 = ($1|0)==(0);
    $6 = ($1|0)==(0);
    if ($6) {
     $$03 = 0;$20 = $5;
    } else {
     $$05 = $1;$19 = $5;
     label = 4;
    }
   } else {
    $$05 = $len;$19 = 0;
    label = 4;
   }
   if ((label|0) == 4) {
    $n$01 = 0;
    while(1) {
     $9 = (($p) + ($n$01)|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = ($10&255)<(32);
     $12 = ($10<<24>>24)<(0);
     $or$cond = $11 | $12;
     $8 = (($n$01) + 1)|0;
     if ($or$cond) {
      $result$0 = 0;
      break L1;
     }
     $7 = ($8>>>0)<($$05>>>0);
     if ($7) {
      $n$01 = $8;
     } else {
      $$03 = $$05;$20 = $19;
      break;
     }
    }
   }
   if ($20) {
    $result$0 = 0;
   } else {
    $13 = (($$03) + 1)|0;
    $14 = (_ft_mem_alloc($memory,$13,$error)|0);
    $15 = HEAP32[$error>>2]|0;
    $16 = ($15|0)==(0);
    if ($16) {
     _memcpy(($14|0),($p|0),($$03|0))|0;
     $17 = (($14) + ($$03)|0);
     HEAP8[$17>>0] = 0;
     $result$0 = $14;
    } else {
     $result$0 = $14;
    }
   }
  }
 } while(0);
 HEAP32[$astring>>2] = $result$0;
 $18 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($18|0);
}
function _pfr_extra_item_load_bitmap_info($p,$limit,$phy_font) {
 $p = $p|0;
 $limit = $limit|0;
 $phy_font = $phy_font|0;
 var $$024 = 0, $$1 = 0, $$2 = 0, $$2$sum = 0, $$2$sum17 = 0, $$2$sum18 = 0, $$2$sum6 = 0, $$4 = 0, $$4$sum = 0, $$4$sum11 = 0, $$4$sum12 = 0, $$4$sum12$pn = 0, $$5 = 0, $$lobit = 0, $$lobit19 = 0, $$lobit20 = 0, $$lobit21 = 0, $$size1$1 = 0, $$size1$3 = 0, $$sum = 0;
 var $$sum10 = 0, $$sum10$pn = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum2 = 0, $$sum2$pn = 0, $$sum4 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $error = 0, $exitcond = 0, $n$022 = 0, $size1$1 = 0, $size1$3 = 0, $strike$023 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = HEAP32[$phy_font>>2]|0;
 HEAP32[$error>>2] = 0;
 $1 = ((($p)) + 5|0);
 $2 = ($1>>>0)>($limit>>>0);
 if (!($2)) {
  $3 = ((($p)) + 3|0);
  $4 = ((($p)) + 4|0);
  $5 = HEAP8[$3>>0]|0;
  $6 = $5&255;
  $7 = HEAP8[$4>>0]|0;
  $8 = $7&255;
  $9 = ((($phy_font)) + 92|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($8))|0;
  $12 = ((($phy_font)) + 96|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)>($13>>>0);
  do {
   if ($14) {
    $15 = (($11) + 3)|0;
    $16 = $15 & -4;
    $17 = ((($phy_font)) + 100|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (_ft_mem_realloc($0,36,$10,$16,$18,$error)|0);
    HEAP32[$17>>2] = $19;
    $20 = HEAP32[$error>>2]|0;
    $21 = ($20|0)==(0);
    if ($21) {
     HEAP32[$12>>2] = $16;
     break;
    } else {
     $129 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($129|0);
    }
   }
  } while(0);
  $22 = $6 & 1;
  $23 = ($22|0)==(0);
  $24 = $22 | 8;
  $25 = $6 & 2;
  $26 = ($25|0)==(0);
  $$lobit = $25 >>> 1;
  $size1$1 = (($24) + ($$lobit))|0;
  $27 = $6 & 4;
  $28 = ($27|0)==(0);
  $$lobit19 = $27 >>> 2;
  $$size1$1 = (($size1$1) + ($$lobit19))|0;
  $29 = $6 & 8;
  $30 = ($29|0)==(0);
  $$lobit20 = $29 >>> 3;
  $size1$3 = (($$size1$1) + ($$lobit20))|0;
  $31 = $6 & 16;
  $32 = ($31|0)==(0);
  $$lobit21 = $31 >>> 4;
  $$size1$3 = (($size1$3) + ($$lobit21))|0;
  $33 = Math_imul($$size1$3, $8)|0;
  $$sum = (($33) + 5)|0;
  $34 = (($p) + ($$sum)|0);
  $35 = ($34>>>0)>($limit>>>0);
  if (!($35)) {
   $36 = ($7<<24>>24)==(0);
   if (!($36)) {
    $37 = ((($phy_font)) + 100|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = HEAP32[$9>>2]|0;
    $40 = (($38) + (($39*36)|0)|0);
    $41 = $7&255;
    $$024 = $1;$n$022 = 0;$strike$023 = $40;
    while(1) {
     if ($23) {
      $50 = ((($$024)) + 1|0);
      $51 = HEAP8[$$024>>0]|0;
      $52 = $51&255;
      $$1 = $50;$130 = 2;$53 = $52;$54 = 1;
     } else {
      $42 = ((($$024)) + 2|0);
      $43 = HEAP8[$$024>>0]|0;
      $44 = $43&255;
      $45 = $44 << 8;
      $46 = ((($$024)) + 1|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = $47&255;
      $49 = $45 | $48;
      $$1 = $42;$130 = 3;$53 = $49;$54 = 2;
     }
     HEAP32[$strike$023>>2] = $53;
     if ($26) {
      $63 = HEAP8[$$1>>0]|0;
      $64 = $63&255;
      $$sum2$pn = $130;$66 = $64;
     } else {
      $$sum2 = (($54) + 2)|0;
      $55 = (($$024) + ($54)|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = $56&255;
      $58 = $57 << 8;
      $$sum4 = (($54) + 1)|0;
      $59 = (($$024) + ($$sum4)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = $60&255;
      $62 = $58 | $61;
      $$sum2$pn = $$sum2;$66 = $62;
     }
     $$2 = (($$024) + ($$sum2$pn)|0);
     $65 = ((($strike$023)) + 4|0);
     HEAP32[$65>>2] = $66;
     $$2$sum = (($$sum2$pn) + 1)|0;
     $67 = HEAP8[$$2>>0]|0;
     $68 = $67&255;
     $69 = ((($strike$023)) + 8|0);
     HEAP32[$69>>2] = $68;
     $70 = (($$024) + ($$2$sum)|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71&255;
     if ($28) {
      $83 = $72 << 8;
      $$2$sum6 = (($$sum2$pn) + 2)|0;
      $84 = (($$024) + ($$2$sum6)|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = $85&255;
      $87 = $86 | $83;
      $89 = $87;$90 = $$sum2$pn;
     } else {
      $73 = $72 << 16;
      $$2$sum17 = (($$sum2$pn) + 2)|0;
      $74 = (($$024) + ($$2$sum17)|0);
      $75 = HEAP8[$74>>0]|0;
      $76 = $75&255;
      $77 = $76 << 8;
      $78 = $77 | $73;
      $$2$sum18 = (($$sum2$pn) + 3)|0;
      $79 = (($$024) + ($$2$sum18)|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = $80&255;
      $82 = $78 | $81;
      $89 = $82;$90 = $$2$sum;
     }
     $88 = ((($strike$023)) + 20|0);
     HEAP32[$88>>2] = $89;
     if ($30) {
      $$sum7 = (($90) + 5)|0;
      $$sum8 = (($90) + 3)|0;
      $104 = (($$024) + ($$sum8)|0);
      $105 = HEAP8[$104>>0]|0;
      $106 = $105&255;
      $107 = $106 << 8;
      $$sum9 = (($90) + 4)|0;
      $108 = (($$024) + ($$sum9)|0);
      $109 = HEAP8[$108>>0]|0;
      $110 = $109&255;
      $111 = $107 | $110;
      $$sum10$pn = $$sum7;$113 = $111;
     } else {
      $$sum10 = (($90) + 6)|0;
      $$sum13 = (($90) + 3)|0;
      $91 = (($$024) + ($$sum13)|0);
      $92 = HEAP8[$91>>0]|0;
      $93 = $92&255;
      $94 = $93 << 16;
      $$sum14 = (($90) + 4)|0;
      $95 = (($$024) + ($$sum14)|0);
      $96 = HEAP8[$95>>0]|0;
      $97 = $96&255;
      $98 = $97 << 8;
      $99 = $98 | $94;
      $$sum15 = (($90) + 5)|0;
      $100 = (($$024) + ($$sum15)|0);
      $101 = HEAP8[$100>>0]|0;
      $102 = $101&255;
      $103 = $99 | $102;
      $$sum10$pn = $$sum10;$113 = $103;
     }
     $$4 = (($$024) + ($$sum10$pn)|0);
     $112 = ((($strike$023)) + 24|0);
     HEAP32[$112>>2] = $113;
     if ($32) {
      $$4$sum11 = (($$sum10$pn) + 1)|0;
      $121 = HEAP8[$$4>>0]|0;
      $122 = $121&255;
      $$4$sum12$pn = $$4$sum11;$124 = $122;
     } else {
      $$4$sum12 = (($$sum10$pn) + 2)|0;
      $114 = HEAP8[$$4>>0]|0;
      $115 = $114&255;
      $116 = $115 << 8;
      $$4$sum = (($$sum10$pn) + 1)|0;
      $117 = (($$024) + ($$4$sum)|0);
      $118 = HEAP8[$117>>0]|0;
      $119 = $118&255;
      $120 = $116 | $119;
      $$4$sum12$pn = $$4$sum12;$124 = $120;
     }
     $$5 = (($$024) + ($$4$sum12$pn)|0);
     $123 = ((($strike$023)) + 28|0);
     HEAP32[$123>>2] = $124;
     $125 = (($n$022) + 1)|0;
     $126 = ((($strike$023)) + 36|0);
     $exitcond = ($125|0)==($41|0);
     if ($exitcond) {
      break;
     } else {
      $$024 = $$5;$n$022 = $125;$strike$023 = $126;
     }
    }
   }
   $127 = HEAP32[$9>>2]|0;
   $128 = (($127) + ($8))|0;
   HEAP32[$9>>2] = $128;
   $129 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($129|0);
  }
 }
 HEAP32[$error>>2] = 8;
 $129 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($129|0);
}
function _pfr_extra_item_load_font_id($p,$limit,$phy_font) {
 $p = $p|0;
 $limit = $limit|0;
 $phy_font = $phy_font|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = $limit;
 $1 = $p;
 $2 = (($0) - ($1))|0;
 $3 = ((($phy_font)) + 80|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = HEAP32[$phy_font>>2]|0;
  $7 = (($2) + 1)|0;
  $8 = (_ft_mem_alloc($6,$7,$error)|0);
  HEAP32[$3>>2] = $8;
  $9 = HEAP32[$error>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   _memcpy(($8|0),($p|0),($2|0))|0;
   $11 = HEAP32[$3>>2]|0;
   $12 = (($11) + ($2)|0);
   HEAP8[$12>>0] = 0;
  }
 }
 $13 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function _pfr_extra_item_load_stem_snaps($p,$limit,$phy_font) {
 $p = $p|0;
 $limit = $limit|0;
 $phy_font = $phy_font|0;
 var $$04 = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$02 = 0, $error = 0, $snaps$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = HEAP32[$phy_font>>2]|0;
 $1 = ((($phy_font)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ((($p)) + 1|0);
   $5 = ($4>>>0)>($limit>>>0);
   if (!($5)) {
    $6 = HEAP8[$p>>0]|0;
    $7 = $6&255;
    $8 = $7 & 15;
    $9 = $7 >>> 4;
    $10 = (($8) + ($9))|0;
    $11 = $10 << 1;
    $$sum1 = $11 | 1;
    $12 = (($p) + ($$sum1)|0);
    $13 = ($12>>>0)>($limit>>>0);
    if (!($13)) {
     $14 = (_ft_mem_realloc($0,4,0,$10,0,$error)|0);
     $15 = HEAP32[$error>>2]|0;
     $16 = ($15|0)==(0);
     if (!($16)) {
      break;
     }
     HEAP32[$1>>2] = $14;
     $17 = (($14) + ($8<<2)|0);
     $18 = ((($phy_font)) + 64|0);
     HEAP32[$18>>2] = $17;
     $19 = ($10|0)==(0);
     if ($19) {
      break;
     } else {
      $$04 = $4;$count$02 = $10;$snaps$03 = $14;
     }
     while(1) {
      $20 = ((($$04)) + 2|0);
      $21 = HEAP8[$$04>>0]|0;
      $22 = $21 << 24 >> 24;
      $23 = $22 << 8;
      $24 = ((($$04)) + 1|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = $25&255;
      $27 = $23 | $26;
      HEAP32[$snaps$03>>2] = $27;
      $28 = (($count$02) + -1)|0;
      $29 = ((($snaps$03)) + 4|0);
      $30 = ($28|0)==(0);
      if ($30) {
       break L1;
      } else {
       $$04 = $20;$count$02 = $28;$snaps$03 = $29;
      }
     }
    }
   }
   HEAP32[$error>>2] = 8;
  }
 } while(0);
 $31 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($31|0);
}
function _pfr_extra_item_load_kerning_pairs($p,$limit,$phy_font) {
 $p = $p|0;
 $limit = $limit|0;
 $phy_font = $phy_font|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum5 = 0, $$sum6 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = HEAP32[$phy_font>>2]|0;
 $1 = (_ft_mem_alloc($0,24,$error)|0);
 $2 = HEAP32[$error>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $121 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($121|0);
 }
 $4 = ((($p)) + 4|0);
 $5 = ($4>>>0)>($limit>>>0);
 if (!($5)) {
  $6 = HEAP8[$p>>0]|0;
  $7 = ((($1)) + 4|0);
  HEAP8[$7>>0] = $6;
  $8 = ((($p)) + 3|0);
  $9 = ((($p)) + 1|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = $11 << 8;
  $13 = ((($p)) + 2|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $12 | $15;
  $17 = $16&65535;
  $18 = ((($1)) + 6|0);
  HEAP16[$18>>1] = $17;
  $19 = HEAP8[$8>>0]|0;
  $20 = ((($1)) + 5|0);
  HEAP8[$20>>0] = $19;
  $21 = ((($phy_font)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($phy_font)) + 148|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $4;
  $26 = $24;
  $27 = (($22) + ($25))|0;
  $28 = (($27) - ($26))|0;
  $29 = ((($1)) + 12|0);
  HEAP32[$29>>2] = $28;
  $30 = ((($1)) + 8|0);
  $31 = HEAP8[$20>>0]|0;
  $32 = $31 & 1;
  $33 = $32&255;
  $34 = $33 << 1;
  $35 = (($34) + 3)|0;
  HEAP32[$30>>2] = $35;
  $36 = HEAP8[$20>>0]|0;
  $37 = $36 & 2;
  $38 = ($37<<24>>24)==(0);
  if (!($38)) {
   $39 = $34 | 4;
   HEAP32[$30>>2] = $39;
  }
  $40 = HEAP8[$7>>0]|0;
  $41 = $40&255;
  $42 = HEAP32[$30>>2]|0;
  $43 = Math_imul($41, $42)|0;
  $$sum = (($43) + 4)|0;
  $44 = (($p) + ($$sum)|0);
  $45 = ($44>>>0)>($limit>>>0);
  if (!($45)) {
   $46 = ($40<<24>>24)==(0);
   if ($46) {
    _ft_mem_free($0,$1);
    $121 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($121|0);
   }
   $47 = HEAP8[$20>>0]|0;
   $48 = $47 & 1;
   $49 = ($48<<24>>24)==(0);
   if ($49) {
    $92 = ((($p)) + 5|0);
    $93 = HEAP8[$4>>0]|0;
    $94 = $93&255;
    $95 = HEAP8[$92>>0]|0;
    $96 = $94 << 16;
    $97 = $95&255;
    $98 = $96 | $97;
    $99 = ((($1)) + 16|0);
    HEAP32[$99>>2] = $98;
    $100 = HEAP32[$30>>2]|0;
    $101 = HEAP8[$7>>0]|0;
    $102 = $101&255;
    $103 = (($102) + -1)|0;
    $104 = Math_imul($103, $100)|0;
    $$sum1 = (($104) + 4)|0;
    $105 = (($p) + ($$sum1)|0);
    $$sum2 = (($104) + 5)|0;
    $106 = (($p) + ($$sum2)|0);
    $107 = HEAP8[$105>>0]|0;
    $108 = $107&255;
    $109 = HEAP8[$106>>0]|0;
    $110 = $108 << 16;
    $111 = $109&255;
    $112 = $110 | $111;
    $113 = ((($1)) + 20|0);
    HEAP32[$113>>2] = $112;
   } else {
    $50 = HEAP8[$4>>0]|0;
    $51 = $50&255;
    $52 = $51 << 8;
    $53 = ((($p)) + 5|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54&255;
    $56 = $52 | $55;
    $57 = ((($p)) + 6|0);
    $58 = HEAP8[$57>>0]|0;
    $59 = $58&255;
    $60 = $59 << 8;
    $61 = ((($p)) + 7|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = $60 | $63;
    $65 = $56 << 16;
    $66 = $64 | $65;
    $67 = ((($1)) + 16|0);
    HEAP32[$67>>2] = $66;
    $68 = HEAP32[$30>>2]|0;
    $69 = HEAP8[$7>>0]|0;
    $70 = $69&255;
    $71 = (($70) + -1)|0;
    $72 = Math_imul($71, $68)|0;
    $$sum5 = (($72) + 4)|0;
    $73 = (($p) + ($$sum5)|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = $75 << 8;
    $$sum6 = (($72) + 5)|0;
    $77 = (($p) + ($$sum6)|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = $78&255;
    $80 = $76 | $79;
    $$sum8 = (($72) + 6)|0;
    $81 = (($p) + ($$sum8)|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = $83 << 8;
    $$sum9 = (($72) + 7)|0;
    $85 = (($p) + ($$sum9)|0);
    $86 = HEAP8[$85>>0]|0;
    $87 = $86&255;
    $88 = $84 | $87;
    $89 = $80 << 16;
    $90 = $88 | $89;
    $91 = ((($1)) + 20|0);
    HEAP32[$91>>2] = $90;
   }
   HEAP32[$1>>2] = 0;
   $114 = ((($phy_font)) + 140|0);
   $115 = HEAP32[$114>>2]|0;
   HEAP32[$115>>2] = $1;
   HEAP32[$114>>2] = $1;
   $116 = HEAP8[$7>>0]|0;
   $117 = $116&255;
   $118 = ((($phy_font)) + 132|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) + ($117))|0;
   HEAP32[$118>>2] = $120;
   $121 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($121|0);
  }
 }
 _ft_mem_free($0,$1);
 HEAP32[$error>>2] = 8;
 $121 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($121|0);
}
function _pfr_slot_load_bitmap($glyph,$size,$glyph_index) {
 $glyph = $glyph|0;
 $size = $size|0;
 $glyph_index = $glyph_index|0;
 var $$0 = 0, $$lobit = 0, $$lobit1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $advance = 0, $char_len$1 = 0, $char_len$1$ = 0, $error$0 = 0, $error$1 = 0, $format = 0, $gps_offset = 0, $gps_size = 0, $n$04 = 0, $p = 0, $strike$03 = 0, $strike$03$lcssa = 0, $xpos = 0, $xsize = 0, $ypos = 0;
 var $ysize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $gps_offset = sp + 32|0;
 $gps_size = sp + 28|0;
 $xpos = sp + 24|0;
 $ypos = sp + 20|0;
 $advance = sp + 16|0;
 $xsize = sp + 12|0;
 $ysize = sp + 8|0;
 $format = sp + 4|0;
 $p = sp;
 $0 = ((($glyph)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 416|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 380|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ((($1)) + 388|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($size)) + 12|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ((($size)) + 14|0);
 $n$04 = 0;$strike$03 = $10;
 while(1) {
  $15 = HEAP32[$strike$03>>2]|0;
  $16 = ($15|0)==($13|0);
  if ($16) {
   $17 = ((($strike$03)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP16[$14>>1]|0;
   $20 = $19&65535;
   $21 = ($18|0)==($20|0);
   if ($21) {
    $strike$03$lcssa = $strike$03;
    break;
   }
  }
  $22 = ((($strike$03)) + 36|0);
  $23 = (($n$04) + 1)|0;
  $24 = HEAP32[$6>>2]|0;
  $25 = ($23>>>0)<($24>>>0);
  if ($25) {
   $n$04 = $23;$strike$03 = $22;
  } else {
   $$0 = 6;
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  STACKTOP = sp;return ($$0|0);
 }
 $26 = ((($strike$03$lcssa)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($1)) + 432|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($strike$03$lcssa)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($29))|0;
 $33 = (_FT_Stream_Seek($3,$32)|0);
 $34 = ($33|0)==(0);
 if (!($34)) {
  $$0 = $33;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = $27 & 1;
 $36 = $35 | 4;
 $37 = $27 >>> 1;
 $$lobit = $37 & 1;
 $char_len$1 = (($36) + ($$lobit))|0;
 $38 = $27 >>> 2;
 $$lobit1 = $38 & 1;
 $char_len$1$ = (($char_len$1) + ($$lobit1))|0;
 $39 = ((($strike$03$lcssa)) + 28|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = Math_imul($40, $char_len$1$)|0;
 $42 = (_FT_Stream_EnterFrame($3,$41)|0);
 $43 = ($42|0)==(0);
 if (!($43)) {
  $$0 = $42;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = ((($3)) + 32|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ((($3)) + 36|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$39>>2]|0;
 $49 = HEAP32[$26>>2]|0;
 $50 = (($5) + ($glyph_index<<4)|0);
 $51 = HEAP32[$50>>2]|0;
 _pfr_lookup_bitmap_data($45,$47,$48,$49,$51,$gps_offset,$gps_size);
 _FT_Stream_ExitFrame($3);
 $52 = HEAP32[$gps_size>>2]|0;
 $53 = ($52|0)==(0);
 if ($53) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$xpos>>2] = 0;
 HEAP32[$ypos>>2] = 0;
 HEAP32[$xsize>>2] = 0;
 HEAP32[$ysize>>2] = 0;
 HEAP32[$format>>2] = 0;
 $54 = (((($5) + ($glyph_index<<4)|0)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 HEAP32[$advance>>2] = $55;
 $56 = ((($1)) + 304|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($1)) + 300|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($57|0)==($59|0);
 if (!($60)) {
  $61 = (_FT_MulDiv($55,$59,$57)|0);
  HEAP32[$advance>>2] = $61;
 }
 $62 = HEAP32[$advance>>2]|0;
 $63 = ((($glyph)) + 56|0);
 HEAP32[$63>>2] = $62;
 $64 = HEAP16[$11>>1]|0;
 $65 = $64&65535;
 $66 = $65 << 8;
 $67 = HEAP32[$54>>2]|0;
 $68 = HEAP32[$56>>2]|0;
 $69 = (_FT_MulDiv($66,$67,$68)|0);
 HEAP32[$advance>>2] = $69;
 $70 = ((($1)) + 188|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = HEAP32[$gps_offset>>2]|0;
 $73 = (($72) + ($71))|0;
 $74 = (_FT_Stream_Seek($3,$73)|0);
 $75 = ($74|0)==(0);
 if (!($75)) {
  $$0 = $74;
  STACKTOP = sp;return ($$0|0);
 }
 $76 = HEAP32[$gps_size>>2]|0;
 $77 = (_FT_Stream_EnterFrame($3,$76)|0);
 $78 = ($77|0)==(0);
 if (!($78)) {
  $$0 = $77;
  STACKTOP = sp;return ($$0|0);
 }
 $79 = HEAP32[$44>>2]|0;
 HEAP32[$p>>2] = $79;
 $80 = HEAP32[$46>>2]|0;
 $81 = HEAP32[$advance>>2]|0;
 $82 = (_pfr_load_bitmap_metrics($p,$80,$81,$xpos,$ypos,$xsize,$ysize,$advance,$format)|0);
 $83 = HEAP32[$ypos>>2]|0;
 $84 = HEAP32[$ysize>>2]|0;
 $85 = (($84) + ($83))|0;
 $86 = ($85|0)<(0);
 $error$0 = $86 ? 23 : $82;
 $87 = ($error$0|0)==(0);
 if ($87) {
  $88 = ((($glyph)) + 72|0);
  HEAP32[$88>>2] = 1651078259;
  $89 = HEAP32[$xsize>>2]|0;
  $90 = ((($glyph)) + 76|0);
  $91 = ((($glyph)) + 80|0);
  HEAP32[$91>>2] = $89;
  $92 = HEAP32[$ysize>>2]|0;
  HEAP32[$90>>2] = $92;
  $93 = HEAP32[$xsize>>2]|0;
  $94 = (($93) + 7)|0;
  $95 = $94 >> 3;
  $96 = ((($glyph)) + 84|0);
  HEAP32[$96>>2] = $95;
  $97 = ((($glyph)) + 94|0);
  HEAP8[$97>>0] = 1;
  $98 = HEAP32[$xsize>>2]|0;
  $99 = $98 << 6;
  $100 = ((($glyph)) + 24|0);
  HEAP32[$100>>2] = $99;
  $101 = HEAP32[$ysize>>2]|0;
  $102 = $101 << 6;
  $103 = ((($glyph)) + 28|0);
  HEAP32[$103>>2] = $102;
  $104 = HEAP32[$xpos>>2]|0;
  $105 = $104 << 6;
  $106 = ((($glyph)) + 32|0);
  HEAP32[$106>>2] = $105;
  $107 = HEAP32[$ypos>>2]|0;
  $108 = $107 << 6;
  $109 = ((($glyph)) + 36|0);
  HEAP32[$109>>2] = $108;
  $110 = HEAP32[$advance>>2]|0;
  $111 = $110 >> 2;
  $112 = (($111) + 32)|0;
  $113 = $112 & -64;
  $114 = ((($glyph)) + 40|0);
  HEAP32[$114>>2] = $113;
  $115 = HEAP32[$100>>2]|0;
  $116 = (0 - ($115))|0;
  $117 = $116 >> 1;
  $118 = ((($glyph)) + 44|0);
  HEAP32[$118>>2] = $117;
  $119 = ((($glyph)) + 48|0);
  HEAP32[$119>>2] = 0;
  $120 = ((($size)) + 32|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ((($glyph)) + 52|0);
  HEAP32[$122>>2] = $121;
  $123 = HEAP32[$xpos>>2]|0;
  $124 = ((($glyph)) + 100|0);
  HEAP32[$124>>2] = $123;
  $125 = HEAP32[$ypos>>2]|0;
  $126 = HEAP32[$ysize>>2]|0;
  $127 = (($126) + ($125))|0;
  $128 = ((($glyph)) + 104|0);
  HEAP32[$128>>2] = $127;
  $129 = HEAP32[$96>>2]|0;
  $130 = HEAP32[$ysize>>2]|0;
  $131 = Math_imul($130, $129)|0;
  $132 = (_ft_glyphslot_alloc_bitmap($glyph,$131)|0);
  $133 = ($132|0)==(0);
  if ($133) {
   $134 = HEAP32[$p>>2]|0;
   $135 = HEAP32[$46>>2]|0;
   $136 = HEAP32[$format>>2]|0;
   $137 = ((($1)) + 208|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $138 & 2;
   $140 = $139&255;
   $141 = (_pfr_load_bitmap_bits($134,$135,$136,$140,$90)|0);
   $error$1 = $141;
  } else {
   $error$1 = $132;
  }
 } else {
  $error$1 = $error$0;
 }
 _FT_Stream_ExitFrame($3);
 $$0 = $error$1;
 STACKTOP = sp;return ($$0|0);
}
function _pfr_lookup_bitmap_data($base,$limit,$count,$flags,$char_code,$found_offset,$found_size) {
 $base = $base|0;
 $limit = $limit|0;
 $count = $count|0;
 $flags = $flags|0;
 $char_code = $char_code|0;
 $found_offset = $found_offset|0;
 $found_size = $found_size|0;
 var $$char_len$1 = 0, $$left$0 = 0, $$lobit = 0, $$lobit17 = 0, $$sum = 0, $$sum1 = 0, $$sum11 = 0, $$sum4 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $$sum9$pn = 0, $$sum9$pn$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buff$0 = 0, $buff$0$sum12 = 0, $buff$0$sum13 = 0, $buff$0$sum14 = 0, $buff$0$sum15 = 0, $buff$0$sum16 = 0, $char_len$1 = 0, $code$0 = 0, $left$019 = 0, $right$0$ = 0, $right$018 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $flags & 1;
 $1 = ($0|0)==(0);
 $2 = $0 | 4;
 $3 = $flags & 2;
 $4 = ($3|0)==(0);
 $$lobit = $3 >>> 1;
 $char_len$1 = (($2) + ($$lobit))|0;
 $5 = $flags & 4;
 $6 = ($5|0)==(0);
 $$lobit17 = $5 >>> 2;
 $$char_len$1 = (($char_len$1) + ($$lobit17))|0;
 $7 = ($count|0)==(0);
 L1: do {
  if (!($7)) {
   $left$019 = 0;$right$018 = $count;
   while(1) {
    $8 = (($left$019) + ($right$018))|0;
    $9 = $8 >>> 1;
    $10 = Math_imul($9, $$char_len$1)|0;
    $11 = (($base) + ($10)|0);
    $$sum = (($10) + ($$char_len$1))|0;
    $12 = (($base) + ($$sum)|0);
    $13 = ($12>>>0)>($limit>>>0);
    if ($13) {
     break L1;
    }
    if ($1) {
     $$sum1 = (($10) + 1)|0;
     $21 = HEAP8[$11>>0]|0;
     $22 = $21&255;
     $$sum9$pn = $$sum1;$code$0 = $22;
    } else {
     $$sum9 = (($10) + 2)|0;
     $14 = HEAP8[$11>>0]|0;
     $15 = $14&255;
     $16 = $15 << 8;
     $$sum11 = (($10) + 1)|0;
     $17 = (($base) + ($$sum11)|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = $18&255;
     $20 = $16 | $19;
     $$sum9$pn = $$sum9;$code$0 = $20;
    }
    $23 = ($code$0|0)==($char_code|0);
    if ($23) {
     $$sum9$pn$lcssa = $$sum9$pn;
     break;
    }
    $24 = ($code$0>>>0)<($char_code>>>0);
    $right$0$ = $24 ? $right$018 : $9;
    $$left$0 = $24 ? $9 : $left$019;
    $25 = ($$left$0>>>0)<($right$0$>>>0);
    if ($25) {
     $left$019 = $$left$0;$right$018 = $right$0$;
    } else {
     break L1;
    }
   }
   $buff$0 = (($base) + ($$sum9$pn$lcssa)|0);
   $26 = HEAP8[$buff$0>>0]|0;
   $27 = $26&255;
   if ($4) {
    $33 = 1;$storemerge = $27;
   } else {
    $28 = $27 << 8;
    $buff$0$sum16 = (($$sum9$pn$lcssa) + 1)|0;
    $29 = (($base) + ($buff$0$sum16)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = $31 | $28;
    $33 = 2;$storemerge = $32;
   }
   HEAP32[$found_size>>2] = $storemerge;
   $buff$0$sum13 = (($33) + ($$sum9$pn$lcssa))|0;
   $34 = (($base) + ($buff$0$sum13)|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   if ($6) {
    $47 = $36 << 8;
    $$sum4 = (($$sum9$pn$lcssa) + 1)|0;
    $buff$0$sum12 = (($$sum4) + ($33))|0;
    $48 = (($base) + ($buff$0$sum12)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = $50 | $47;
    HEAP32[$found_offset>>2] = $51;
    return;
   } else {
    $37 = $36 << 16;
    $$sum7 = (($$sum9$pn$lcssa) + 1)|0;
    $buff$0$sum14 = (($$sum7) + ($33))|0;
    $38 = (($base) + ($buff$0$sum14)|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = $40 << 8;
    $42 = $41 | $37;
    $$sum8 = (($$sum9$pn$lcssa) + 2)|0;
    $buff$0$sum15 = (($$sum8) + ($33))|0;
    $43 = (($base) + ($buff$0$sum15)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = $42 | $45;
    HEAP32[$found_offset>>2] = $46;
    return;
   }
  }
 } while(0);
 HEAP32[$found_size>>2] = 0;
 HEAP32[$found_offset>>2] = 0;
 return;
}
function _pfr_load_bitmap_metrics($pdata,$limit,$scaled_advance,$axpos,$aypos,$axsize,$aysize,$aadvance,$aformat) {
 $pdata = $pdata|0;
 $limit = $limit|0;
 $scaled_advance = $scaled_advance|0;
 $axpos = $axpos|0;
 $aypos = $aypos|0;
 $axsize = $axsize|0;
 $aysize = $aysize|0;
 $aadvance = $aadvance|0;
 $aformat = $aformat|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $advance$0 = 0, $error$0 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $xpos$0 = 0, $xsize$0 = 0, $ypos$0 = 0, $ysize$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pdata>>2]|0;
 $1 = ((($0)) + 1|0);
 $2 = ($1>>>0)>($limit>>>0);
 if ($2) {
  $error$0 = 8;
  return ($error$0|0);
 }
 $3 = HEAP8[$0>>0]|0;
 $4 = $3&255;
 $5 = $4 & 3;
 L4: do {
  switch ($5|0) {
  case 0:  {
   $6 = ((($0)) + 2|0);
   $7 = ($6>>>0)>($limit>>>0);
   if ($7) {
    $error$0 = 8;
    return ($error$0|0);
   } else {
    $8 = HEAP8[$1>>0]|0;
    $9 = $8 << 24 >> 24;
    $10 = $9 >> 4;
    $11 = $9 << 28;
    $12 = $11 >> 28;
    $p$0 = $6;$xpos$0 = $10;$ypos$0 = $12;
    break L4;
   }
   break;
  }
  case 1:  {
   $13 = ((($0)) + 3|0);
   $14 = ($13>>>0)>($limit>>>0);
   if ($14) {
    $error$0 = 8;
    return ($error$0|0);
   } else {
    $15 = ((($0)) + 2|0);
    $16 = HEAP8[$1>>0]|0;
    $17 = $16 << 24 >> 24;
    $18 = HEAP8[$15>>0]|0;
    $19 = $18 << 24 >> 24;
    $p$0 = $13;$xpos$0 = $17;$ypos$0 = $19;
    break L4;
   }
   break;
  }
  case 2:  {
   $20 = ((($0)) + 5|0);
   $21 = ($20>>>0)>($limit>>>0);
   if ($21) {
    $error$0 = 8;
    return ($error$0|0);
   } else {
    $22 = HEAP8[$1>>0]|0;
    $23 = $22 << 24 >> 24;
    $24 = $23 << 8;
    $25 = ((($0)) + 2|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = $26&255;
    $28 = $24 | $27;
    $29 = ((($0)) + 3|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30 << 24 >> 24;
    $32 = $31 << 8;
    $33 = ((($0)) + 4|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34&255;
    $36 = $32 | $35;
    $p$0 = $20;$xpos$0 = $28;$ypos$0 = $36;
    break L4;
   }
   break;
  }
  case 3:  {
   $37 = ((($0)) + 7|0);
   $38 = ($37>>>0)>($limit>>>0);
   if ($38) {
    $error$0 = 8;
    return ($error$0|0);
   } else {
    $39 = HEAP8[$1>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = $40 << 16;
    $42 = ((($0)) + 2|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43&255;
    $45 = $44 << 8;
    $46 = $45 | $41;
    $47 = ((($0)) + 3|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = $46 | $49;
    $51 = ((($0)) + 4|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52 << 24 >> 24;
    $54 = $53 << 16;
    $55 = ((($0)) + 5|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = $57 << 8;
    $59 = $58 | $54;
    $60 = ((($0)) + 6|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = $59 | $62;
    $p$0 = $37;$xpos$0 = $50;$ypos$0 = $63;
    break L4;
   }
   break;
  }
  default: {
   $p$0 = $1;$xpos$0 = 0;$ypos$0 = 0;
  }
  }
 } while(0);
 $64 = ($3&255) >>> 2;
 $65 = $64&255;
 $66 = $65 & 3;
 L22: do {
  switch ($66|0) {
  case 3:  {
   $81 = ((($p$0)) + 4|0);
   $82 = ($81>>>0)>($limit>>>0);
   if ($82) {
    $error$0 = 8;
    return ($error$0|0);
   } else {
    $83 = HEAP8[$p$0>>0]|0;
    $84 = $83&255;
    $85 = $84 << 8;
    $86 = ((($p$0)) + 1|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87&255;
    $89 = $85 | $88;
    $90 = ((($p$0)) + 2|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    $93 = $92 << 8;
    $94 = ((($p$0)) + 3|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    $97 = $93 | $96;
    $p$1 = $81;$xsize$0 = $89;$ysize$0 = $97;
    break L22;
   }
   break;
  }
  case 1:  {
   $67 = ((($p$0)) + 1|0);
   $68 = ($67>>>0)>($limit>>>0);
   if ($68) {
    $error$0 = 8;
    return ($error$0|0);
   } else {
    $69 = HEAP8[$p$0>>0]|0;
    $70 = $69 << 24 >> 24;
    $71 = $70 >>> 4;
    $72 = $71 & 15;
    $73 = $70 & 15;
    $p$1 = $67;$xsize$0 = $72;$ysize$0 = $73;
    break L22;
   }
   break;
  }
  case 2:  {
   $74 = ((($p$0)) + 2|0);
   $75 = ($74>>>0)>($limit>>>0);
   if ($75) {
    $error$0 = 8;
    return ($error$0|0);
   } else {
    $76 = ((($p$0)) + 1|0);
    $77 = HEAP8[$p$0>>0]|0;
    $78 = $77&255;
    $79 = HEAP8[$76>>0]|0;
    $80 = $79&255;
    $p$1 = $74;$xsize$0 = $78;$ysize$0 = $80;
    break L22;
   }
   break;
  }
  default: {
   $p$1 = $p$0;$xsize$0 = 0;$ysize$0 = 0;
  }
  }
 } while(0);
 $98 = ($3&255) >>> 4;
 $99 = $98&255;
 $100 = $99 & 3;
 L36: do {
  switch ($100|0) {
  case 0:  {
   $advance$0 = $scaled_advance;$p$2 = $p$1;
   break;
  }
  case 1:  {
   $101 = ((($p$1)) + 1|0);
   $102 = ($101>>>0)>($limit>>>0);
   if ($102) {
    $error$0 = 8;
    return ($error$0|0);
   } else {
    $103 = HEAP8[$p$1>>0]|0;
    $104 = $103 << 24 >> 24;
    $105 = $104 << 8;
    $advance$0 = $105;$p$2 = $101;
    break L36;
   }
   break;
  }
  case 2:  {
   $106 = ((($p$1)) + 2|0);
   $107 = ($106>>>0)>($limit>>>0);
   if ($107) {
    $error$0 = 8;
    return ($error$0|0);
   } else {
    $108 = HEAP8[$p$1>>0]|0;
    $109 = $108 << 24 >> 24;
    $110 = $109 << 8;
    $111 = ((($p$1)) + 1|0);
    $112 = HEAP8[$111>>0]|0;
    $113 = $112&255;
    $114 = $110 | $113;
    $advance$0 = $114;$p$2 = $106;
    break L36;
   }
   break;
  }
  case 3:  {
   $115 = ((($p$1)) + 3|0);
   $116 = ($115>>>0)>($limit>>>0);
   if ($116) {
    $error$0 = 8;
    return ($error$0|0);
   } else {
    $117 = HEAP8[$p$1>>0]|0;
    $118 = $117 << 24 >> 24;
    $119 = $118 << 16;
    $120 = ((($p$1)) + 1|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121&255;
    $123 = $122 << 8;
    $124 = $123 | $119;
    $125 = ((($p$1)) + 2|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126&255;
    $128 = $124 | $127;
    $advance$0 = $128;$p$2 = $115;
    break L36;
   }
   break;
  }
  default: {
   $advance$0 = 0;$p$2 = $p$1;
  }
  }
 } while(0);
 HEAP32[$axpos>>2] = $xpos$0;
 HEAP32[$aypos>>2] = $ypos$0;
 HEAP32[$axsize>>2] = $xsize$0;
 HEAP32[$aysize>>2] = $ysize$0;
 HEAP32[$aadvance>>2] = $advance$0;
 $129 = $99 >>> 2;
 HEAP32[$aformat>>2] = $129;
 HEAP32[$pdata>>2] = $p$2;
 $error$0 = 0;
 return ($error$0|0);
}
function _pfr_load_bitmap_bits($p,$limit,$format,$decreasing,$target) {
 $p = $p|0;
 $limit = $limit|0;
 $format = $format|0;
 $decreasing = $decreasing|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $error$0 = 0, $writer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $writer = sp;
 $0 = HEAP32[$target>>2]|0;
 $1 = ($0|0)>(0);
 L1: do {
  if ($1) {
   $2 = ((($target)) + 4|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(0);
   if ($4) {
    _pfr_bitwriter_init($writer,$target,$decreasing);
    switch ($format|0) {
    case 0:  {
     _pfr_bitwriter_decode_bytes($writer,$p,$limit);
     $error$0 = 0;
     break L1;
     break;
    }
    case 1:  {
     _pfr_bitwriter_decode_rle1($writer,$p,$limit);
     $error$0 = 0;
     break L1;
     break;
    }
    case 2:  {
     _pfr_bitwriter_decode_rle2($writer,$p,$limit);
     $error$0 = 0;
     break L1;
     break;
    }
    default: {
     $error$0 = 3;
     break L1;
    }
    }
   } else {
    $error$0 = 0;
   }
  } else {
   $error$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($error$0|0);
}
function _pfr_bitwriter_init($writer,$target,$decreasing) {
 $writer = $writer|0;
 $target = $target|0;
 $decreasing = $decreasing|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($target)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$writer>>2] = $1;
 $2 = ((($target)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($writer)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($target)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($writer)) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$target>>2]|0;
 $9 = ((($writer)) + 12|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$7>>2]|0;
 $11 = Math_imul($10, $8)|0;
 $12 = ((($writer)) + 16|0);
 HEAP32[$12>>2] = $11;
 $13 = ($decreasing<<24>>24)==(0);
 if (!($13)) {
  return;
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = HEAP32[$target>>2]|0;
 $16 = (($15) + -1)|0;
 $17 = Math_imul($16, $14)|0;
 $18 = HEAP32[$writer>>2]|0;
 $19 = (($18) + ($17)|0);
 HEAP32[$writer>>2] = $19;
 $20 = HEAP32[$4>>2]|0;
 $21 = (0 - ($20))|0;
 HEAP32[$4>>2] = $21;
 return;
}
function _pfr_bitwriter_decode_bytes($writer,$p,$limit) {
 $writer = $writer|0;
 $p = $p|0;
 $limit = $limit|0;
 var $$ = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $c$0$ = 0, $c$07 = 0, $c$2 = 0, $c$2$lcssa = 0, $cur$04 = 0, $cur$1 = 0, $cur$1$lcssa = 0, $left$03 = 0, $left$1 = 0, $mask$05 = 0, $mask$1 = 0, $mask$1$lcssa = 0, $n$11 = 0, $val$06 = 0, $val$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($writer)) + 8|0);
 $1 = $limit;
 $2 = $p;
 $3 = (($1) - ($2))|0;
 $4 = $3 << 3;
 $5 = ((($writer)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)>($6|0);
 $$ = $7 ? $6 : $4;
 $8 = ($$|0)>(0);
 if (!($8)) {
  return;
 }
 $9 = HEAP32[$writer>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($writer)) + 4|0);
 $$02 = $p;$c$07 = 0;$cur$04 = $9;$left$03 = $10;$mask$05 = 128;$n$11 = $$;$val$06 = 0;
 while(1) {
  $12 = $n$11 ^ $$;
  $13 = $12 & 7;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = ((($$02)) + 1|0);
   $16 = HEAP8[$$02>>0]|0;
   $17 = $16&255;
   $$1 = $15;$val$1 = $17;
  } else {
   $$1 = $$02;$val$1 = $val$06;
  }
  $18 = $val$1 & 128;
  $19 = ($18|0)==(0);
  $20 = $19 ? 0 : $mask$05;
  $c$0$ = $20 | $c$07;
  $21 = $val$1 << 1;
  $22 = $mask$05 >>> 1;
  $23 = (($left$03) + -1)|0;
  $24 = ($left$03|0)<(2);
  if ($24) {
   $25 = $c$0$&255;
   HEAP8[$cur$04>>0] = $25;
   $26 = HEAP32[$0>>2]|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = HEAP32[$writer>>2]|0;
   $29 = (($28) + ($27)|0);
   HEAP32[$writer>>2] = $29;
   $c$2 = 0;$cur$1 = $29;$left$1 = $26;$mask$1 = 128;
  } else {
   $30 = ($22|0)==(0);
   if ($30) {
    $31 = $c$0$&255;
    HEAP8[$cur$04>>0] = $31;
    $32 = ((($cur$04)) + 1|0);
    $c$2 = 0;$cur$1 = $32;$left$1 = $23;$mask$1 = 128;
   } else {
    $c$2 = $c$0$;$cur$1 = $cur$04;$left$1 = $23;$mask$1 = $22;
   }
  }
  $33 = (($n$11) + -1)|0;
  $34 = ($n$11|0)>(1);
  if ($34) {
   $$02 = $$1;$c$07 = $c$2;$cur$04 = $cur$1;$left$03 = $left$1;$mask$05 = $mask$1;$n$11 = $33;$val$06 = $21;
  } else {
   $c$2$lcssa = $c$2;$cur$1$lcssa = $cur$1;$mask$1$lcssa = $mask$1;
   break;
  }
 }
 $35 = ($mask$1$lcssa|0)==(128);
 if ($35) {
  return;
 }
 $36 = $c$2$lcssa&255;
 HEAP8[$cur$1$lcssa>>0] = $36;
 return;
}
function _pfr_bitwriter_decode_rle1($writer,$p,$limit) {
 $writer = $writer|0;
 $p = $p|0;
 $limit = $limit|0;
 var $$010 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $c$0$ = 0, $c$09 = 0, $c$2 = 0, $c$2$lcssa = 0, $count$03 = 0, $count$1 = 0, $count$2 = 0, $count$3 = 0, $counts$sroa$3$04 = 0, $counts$sroa$3$1 = 0, $counts$sroa$3$2 = 0, $counts$sroa$3$3 = 0, $cur$07 = 0, $cur$1 = 0, $cur$1$lcssa = 0, $left$06 = 0, $left$1 = 0, $mask$08 = 0, $mask$1 = 0, $mask$1$lcssa = 0;
 var $n$01 = 0, $phase$02 = 0, $phase$1 = 0, $phase$2 = 0, $phase$3 = 0, $reload$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($writer)) + 8|0);
 $1 = ((($writer)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  return;
 }
 $4 = HEAP32[$writer>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($writer)) + 4|0);
 $$010 = $p;$c$09 = 0;$count$03 = 0;$counts$sroa$3$04 = 0;$cur$07 = $4;$left$06 = $5;$mask$08 = 128;$n$01 = $2;$phase$02 = 1;$reload$05 = 1;
 while(1) {
  $7 = ($reload$05|0)==(0);
  L6: do {
   if ($7) {
    $$3 = $$010;$count$3 = $count$03;$counts$sroa$3$3 = $counts$sroa$3$04;$phase$3 = $phase$02;
   } else {
    $$1 = $$010;$count$1 = $count$03;$counts$sroa$3$1 = $counts$sroa$3$04;$phase$1 = $phase$02;
    while(1) {
     $8 = ($phase$1|0)==(0);
     if ($8) {
      $$2 = $$1;$count$2 = $counts$sroa$3$1;$counts$sroa$3$2 = $counts$sroa$3$1;$phase$2 = 1;
     } else {
      $9 = ($$1>>>0)<($limit>>>0);
      if (!($9)) {
       $$3 = $$1;$count$3 = $count$1;$counts$sroa$3$3 = $counts$sroa$3$1;$phase$3 = $phase$1;
       break L6;
      }
      $10 = ((($$1)) + 1|0);
      $11 = HEAP8[$$1>>0]|0;
      $12 = $11&255;
      $13 = $12 >>> 4;
      $14 = $12 & 15;
      $$2 = $10;$count$2 = $13;$counts$sroa$3$2 = $14;$phase$2 = 0;
     }
     $15 = ($count$2|0)==(0);
     if ($15) {
      $$1 = $$2;$count$1 = 0;$counts$sroa$3$1 = $counts$sroa$3$2;$phase$1 = $phase$2;
     } else {
      $$3 = $$2;$count$3 = $count$2;$counts$sroa$3$3 = $counts$sroa$3$2;$phase$3 = $phase$2;
      break;
     }
    }
   }
  } while(0);
  $16 = ($phase$3|0)==(0);
  $17 = $16 ? 0 : $mask$08;
  $c$0$ = $17 | $c$09;
  $18 = $mask$08 >>> 1;
  $19 = (($left$06) + -1)|0;
  $20 = ($left$06|0)<(2);
  if ($20) {
   $21 = $c$0$&255;
   HEAP8[$cur$07>>0] = $21;
   $22 = HEAP32[$0>>2]|0;
   $23 = HEAP32[$6>>2]|0;
   $24 = HEAP32[$writer>>2]|0;
   $25 = (($24) + ($23)|0);
   HEAP32[$writer>>2] = $25;
   $c$2 = 0;$cur$1 = $25;$left$1 = $22;$mask$1 = 128;
  } else {
   $26 = ($18|0)==(0);
   if ($26) {
    $27 = $c$0$&255;
    HEAP8[$cur$07>>0] = $27;
    $28 = ((($cur$07)) + 1|0);
    $c$2 = 0;$cur$1 = $28;$left$1 = $19;$mask$1 = 128;
   } else {
    $c$2 = $c$0$;$cur$1 = $cur$07;$left$1 = $19;$mask$1 = $18;
   }
  }
  $29 = (($count$3) + -1)|0;
  $30 = ($count$3|0)<(2);
  $31 = $30&1;
  $32 = (($n$01) + -1)|0;
  $33 = ($n$01|0)>(1);
  if ($33) {
   $$010 = $$3;$c$09 = $c$2;$count$03 = $29;$counts$sroa$3$04 = $counts$sroa$3$3;$cur$07 = $cur$1;$left$06 = $left$1;$mask$08 = $mask$1;$n$01 = $32;$phase$02 = $phase$3;$reload$05 = $31;
  } else {
   $c$2$lcssa = $c$2;$cur$1$lcssa = $cur$1;$mask$1$lcssa = $mask$1;
   break;
  }
 }
 $34 = ($mask$1$lcssa|0)==(128);
 if ($34) {
  return;
 }
 $35 = $c$2$lcssa&255;
 HEAP8[$cur$1$lcssa>>0] = $35;
 return;
}
function _pfr_bitwriter_decode_rle2($writer,$p,$limit) {
 $writer = $writer|0;
 $p = $p|0;
 $limit = $limit|0;
 var $$01 = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0$ = 0, $c$09 = 0, $c$2 = 0;
 var $c$2$lcssa = 0, $count$04 = 0, $count$1 = 0, $count$2 = 0, $cur$07 = 0, $cur$1 = 0, $cur$1$lcssa = 0, $left$06 = 0, $left$1 = 0, $mask$08 = 0, $mask$1 = 0, $mask$1$lcssa = 0, $n$02 = 0, $phase$03 = 0, $phase$1 = 0, $phase$2 = 0, $reload$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($writer)) + 8|0);
 $1 = ((($writer)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  return;
 }
 $4 = HEAP32[$writer>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($writer)) + 4|0);
 $$01 = $p;$c$09 = 0;$count$04 = 0;$cur$07 = $4;$left$06 = $5;$mask$08 = 128;$n$02 = $2;$phase$03 = 1;$reload$05 = 1;
 while(1) {
  $7 = ($reload$05|0)==(0);
  L6: do {
   if ($7) {
    $$2 = $$01;$count$2 = $count$04;$phase$2 = $phase$03;
   } else {
    $$1 = $$01;$count$1 = $count$04;$phase$1 = $phase$03;
    while(1) {
     $8 = ($$1>>>0)<($limit>>>0);
     if (!($8)) {
      $$2 = $$1;$count$2 = $count$1;$phase$2 = $phase$1;
      break L6;
     }
     $9 = ((($$1)) + 1|0);
     $10 = HEAP8[$$1>>0]|0;
     $11 = $10&255;
     $12 = $phase$1 ^ 1;
     $13 = ($10<<24>>24)==(0);
     if ($13) {
      $$1 = $9;$count$1 = $11;$phase$1 = $12;
     } else {
      $$2 = $9;$count$2 = $11;$phase$2 = $12;
      break;
     }
    }
   }
  } while(0);
  $14 = ($phase$2|0)==(0);
  $15 = $14 ? 0 : $mask$08;
  $c$0$ = $15 | $c$09;
  $16 = $mask$08 >>> 1;
  $17 = (($left$06) + -1)|0;
  $18 = ($left$06|0)<(2);
  if ($18) {
   $19 = $c$0$&255;
   HEAP8[$cur$07>>0] = $19;
   $20 = HEAP32[$0>>2]|0;
   $21 = HEAP32[$6>>2]|0;
   $22 = HEAP32[$writer>>2]|0;
   $23 = (($22) + ($21)|0);
   HEAP32[$writer>>2] = $23;
   $c$2 = 0;$cur$1 = $23;$left$1 = $20;$mask$1 = 128;
  } else {
   $24 = ($16|0)==(0);
   if ($24) {
    $25 = $c$0$&255;
    HEAP8[$cur$07>>0] = $25;
    $26 = ((($cur$07)) + 1|0);
    $c$2 = 0;$cur$1 = $26;$left$1 = $17;$mask$1 = 128;
   } else {
    $c$2 = $c$0$;$cur$1 = $cur$07;$left$1 = $17;$mask$1 = $16;
   }
  }
  $27 = (($count$2) + -1)|0;
  $28 = ($count$2|0)<(2);
  $29 = $28&1;
  $30 = (($n$02) + -1)|0;
  $31 = ($n$02|0)>(1);
  if ($31) {
   $$01 = $$2;$c$09 = $c$2;$count$04 = $27;$cur$07 = $cur$1;$left$06 = $left$1;$mask$08 = $mask$1;$n$02 = $30;$phase$03 = $phase$2;$reload$05 = $29;
  } else {
   $c$2$lcssa = $c$2;$cur$1$lcssa = $cur$1;$mask$1$lcssa = $mask$1;
   break;
  }
 }
 $32 = ($mask$1$lcssa|0)==(128);
 if ($32) {
  return;
 }
 $33 = $c$2$lcssa&255;
 HEAP8[$cur$1$lcssa>>0] = $33;
 return;
}
function _afm_parser_read_vals($parser,$vals,$n) {
 $parser = $parser|0;
 $vals = $vals|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $i$01 = 0, $storemerge = 0, $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $str = sp + 4|0;
 $error = sp;
 $0 = ((($parser)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($n) + -1)|0;
 $3 = ($2>>>0)>(4);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($parser)) + 12|0);
 $5 = ((($parser)) + 16|0);
 $i$01 = 0;
 while(1) {
  $6 = (($vals) + ($i$01<<3)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = (_afm_stream_read_string($1)|0);
   $storemerge = $9;
  } else {
   $10 = (_afm_stream_read_one($1)|0);
   $storemerge = $10;
  }
  HEAP32[$str>>2] = $storemerge;
  $11 = ($storemerge|0)==(0|0);
  if ($11) {
   $$0 = $i$01;
   label = 19;
   break;
  }
  $12 = HEAP32[$1>>2]|0;
  $13 = $12;
  $14 = $storemerge;
  $15 = (($13) - ($14))|0;
  $16 = (($15) + -1)|0;
  $17 = HEAP32[$6>>2]|0;
  L11: do {
   switch ($17|0) {
   case 1: case 0:  {
    $18 = HEAP32[$parser>>2]|0;
    $19 = (_ft_mem_qalloc($18,$15,$error)|0);
    $20 = (((($vals) + ($i$01<<3)|0)) + 4|0);
    HEAP32[$20>>2] = $19;
    $21 = HEAP32[$error>>2]|0;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = HEAP32[$str>>2]|0;
     _memcpy(($19|0),($23|0),($16|0))|0;
     $24 = HEAP32[$20>>2]|0;
     $25 = (($24) + ($16)|0);
     HEAP8[$25>>0] = 0;
    }
    break;
   }
   case 2:  {
    $26 = (($storemerge) + ($16)|0);
    $27 = (_PS_Conv_ToFixed($str,$26,0)|0);
    $28 = (((($vals) + ($i$01<<3)|0)) + 4|0);
    HEAP32[$28>>2] = $27;
    break;
   }
   case 3:  {
    $29 = (($storemerge) + ($16)|0);
    $30 = (_PS_Conv_ToInt($str,$29)|0);
    $31 = (((($vals) + ($i$01<<3)|0)) + 4|0);
    HEAP32[$31>>2] = $30;
    break;
   }
   case 4:  {
    $32 = ($16|0)==(4);
    if ($32) {
     $33 = (_strncmp($storemerge,27459,4)|0);
     $34 = ($33|0)==(0);
     $36 = $34;
    } else {
     $36 = 0;
    }
    $35 = $36&1;
    $37 = (((($vals) + ($i$01<<3)|0)) + 4|0);
    HEAP8[$37>>0] = $35;
    break;
   }
   case 5:  {
    $38 = HEAP32[$4>>2]|0;
    $39 = ($38|0)==(0|0);
    if ($39) {
     $43 = (((($vals) + ($i$01<<3)|0)) + 4|0);
     HEAP32[$43>>2] = 0;
     break L11;
    } else {
     $40 = HEAP32[$5>>2]|0;
     $41 = (FUNCTION_TABLE_iiii[$38 & 127]($storemerge,$16,$40)|0);
     $42 = (((($vals) + ($i$01<<3)|0)) + 4|0);
     HEAP32[$42>>2] = $41;
     break L11;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $44 = (($i$01) + 1)|0;
  $45 = ($44>>>0)<($n>>>0);
  if ($45) {
   $i$01 = $44;
  } else {
   $$0 = $44;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _afm_parser_next_key($parser,$line,$len) {
 $parser = $parser|0;
 $line = $line|0;
 $len = $len|0;
 var $$off = 0, $$pr = 0, $$pr5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key$0 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($line<<24>>24)==(0);
 $3 = ((($1)) + 12|0);
 L1: do {
  if ($2) {
   while(1) {
    $$pr5 = HEAP32[$3>>2]|0;
    $9 = $$pr5;
    while(1) {
     $8 = ($9|0)<(1);
     if ($8) {
      break;
     }
     HEAP32[$3>>2] = 0;
     $10 = (_afm_stream_read_one($1)|0);
     $11 = ($10|0)==(0|0);
     if (!($11)) {
      $key$0 = $10;
      break L1;
     }
     $12 = HEAP32[$3>>2]|0;
     $$off = (($12) + -1)|0;
     $13 = ($$off>>>0)<(2);
     if ($13) {
      $9 = $12;
     } else {
      $key$0 = 0;
      break L1;
     }
    }
    (_afm_stream_read_one($1)|0);
   }
  } else {
   $$pr = HEAP32[$3>>2]|0;
   $phitmp = ($$pr|0)>(1);
   if (!($phitmp)) {
    (_afm_stream_read_string($1)|0);
   }
   while(1) {
    HEAP32[$3>>2] = 0;
    $4 = (_afm_stream_read_one($1)|0);
    $5 = ($4|0)==(0|0);
    if (!($5)) {
     $key$0 = $4;
     break L1;
    }
    $6 = HEAP32[$3>>2]|0;
    $7 = ($6|0)==(2);
    if (!($7)) {
     $key$0 = 0;
     break;
    }
   }
  }
 } while(0);
 $14 = ($len|0)==(0|0);
 if ($14) {
  return ($key$0|0);
 }
 $15 = ($key$0|0)==(0|0);
 if ($15) {
  $21 = 0;
 } else {
  $16 = HEAP32[$1>>2]|0;
  $17 = $16;
  $18 = $key$0;
  $19 = $18 ^ -1;
  $20 = (($17) + ($19))|0;
  $21 = $20;
 }
 HEAP32[$len>>2] = $21;
 return ($key$0|0);
}
function _afm_parser_init($parser,$memory,$base,$limit) {
 $parser = $parser|0;
 $memory = $memory|0;
 $base = $base|0;
 $limit = $limit|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (_ft_mem_alloc($memory,16,$error)|0);
 $1 = HEAP32[$error>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $base;
 HEAP32[$0>>2] = $base;
 $4 = ((($0)) + 8|0);
 HEAP32[$4>>2] = $limit;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 2;
 HEAP32[$parser>>2] = $memory;
 $6 = ((($parser)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($parser)) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($parser)) + 12|0);
 HEAP32[$8>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _afm_parser_done($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$parser>>2]|0;
 $1 = ((($parser)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _ft_mem_free($0,$2);
 HEAP32[$1>>2] = 0;
 return;
}
function _afm_parser_read_int($parser,$aint) {
 $parser = $parser|0;
 $aint = $aint|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $val = sp;
 HEAP32[$val>>2] = 3;
 $0 = (_afm_parser_read_vals($parser,$val,1)|0);
 $1 = ($0|0)==(1);
 if (!($1)) {
  $$0 = 160;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ((($val)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$aint>>2] = $3;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _afm_parser_parse($parser) {
 $parser = $parser|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0$be = 0, $error$05 = 0, $error$1 = 0, $len = 0, $metrics_sets = 0, $n = 0, $or$cond = 0, $shared_vals = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $len = sp + 44|0;
 $metrics_sets = sp + 40|0;
 $shared_vals = sp + 8|0;
 $n = sp;
 $0 = HEAP32[$parser>>2]|0;
 $1 = ((($parser)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$metrics_sets>>2] = 0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_afm_parser_next_key($parser,1,$len)|0);
 $5 = ($4|0)==(0|0);
 $6 = HEAP32[$len>>2]|0;
 $7 = ($6|0)!=(16);
 $or$cond = $5 | $7;
 if ($or$cond) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_strncmp($4,27464,16)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_afm_parser_next_key($parser,1,$len)|0);
 $11 = ($10|0)==(0|0);
 L10: do {
  if ($11) {
   $error$1 = 160;
  } else {
   $12 = ((($shared_vals)) + 4|0);
   $13 = ((($shared_vals)) + 8|0);
   $14 = ((($shared_vals)) + 16|0);
   $15 = ((($shared_vals)) + 24|0);
   $16 = ((($shared_vals)) + 4|0);
   $17 = ((($2)) + 4|0);
   $18 = ((($shared_vals)) + 12|0);
   $19 = ((($2)) + 8|0);
   $20 = ((($shared_vals)) + 20|0);
   $21 = ((($2)) + 12|0);
   $22 = ((($shared_vals)) + 28|0);
   $23 = ((($2)) + 16|0);
   $24 = ((($shared_vals)) + 4|0);
   $25 = ((($2)) + 20|0);
   $26 = ((($shared_vals)) + 4|0);
   $27 = ((($2)) + 24|0);
   $29 = $10;$error$05 = 160;
   L12: while(1) {
    $28 = HEAP32[$len>>2]|0;
    $30 = (_afm_tokenize($29,$28)|0);
    switch ($30|0) {
    case 49:  {
     label = 20;
     break L12;
     break;
    }
    case 20:  {
     $$0 = 0;
     label = 22;
     break L12;
     break;
    }
    case 40:  {
     $33 = (_afm_parser_read_int($parser,$metrics_sets)|0);
     $34 = ($33|0)==(0);
     if (!($34)) {
      $error$1 = $error$05;
      break L10;
     }
     $35 = HEAP32[$metrics_sets>>2]|0;
     switch ($35|0) {
     case 0: case 2:  {
      $error$0$be = $error$05;
      break;
     }
     default: {
      $error$1 = 7;
      break L10;
     }
     }
     break;
    }
    case 30:  {
     HEAP32[$shared_vals>>2] = 4;
     $36 = (_afm_parser_read_vals($parser,$shared_vals,1)|0);
     $37 = ($36|0)==(1);
     if (!($37)) {
      $error$1 = $error$05;
      break L10;
     }
     $38 = HEAP8[$12>>0]|0;
     HEAP8[$2>>0] = $38;
     $error$0$be = $error$05;
     break;
    }
    case 26:  {
     HEAP32[$shared_vals>>2] = 2;
     HEAP32[$13>>2] = 2;
     HEAP32[$14>>2] = 2;
     HEAP32[$15>>2] = 2;
     $39 = (_afm_parser_read_vals($parser,$shared_vals,4)|0);
     $40 = ($39|0)==(4);
     if (!($40)) {
      $error$1 = $error$05;
      break L10;
     }
     $41 = HEAP32[$16>>2]|0;
     HEAP32[$17>>2] = $41;
     $42 = HEAP32[$18>>2]|0;
     HEAP32[$19>>2] = $42;
     $43 = HEAP32[$20>>2]|0;
     HEAP32[$21>>2] = $43;
     $44 = HEAP32[$22>>2]|0;
     HEAP32[$23>>2] = $44;
     $error$0$be = $error$05;
     break;
    }
    case 0:  {
     HEAP32[$shared_vals>>2] = 2;
     $45 = (_afm_parser_read_vals($parser,$shared_vals,1)|0);
     $46 = ($45|0)==(1);
     if (!($46)) {
      $error$1 = $error$05;
      break L10;
     }
     $47 = HEAP32[$24>>2]|0;
     HEAP32[$25>>2] = $47;
     $error$0$be = $error$05;
     break;
    }
    case 14:  {
     HEAP32[$shared_vals>>2] = 2;
     $48 = (_afm_parser_read_vals($parser,$shared_vals,1)|0);
     $49 = ($48|0)==(1);
     if (!($49)) {
      $error$1 = $error$05;
      break L10;
     }
     $50 = HEAP32[$26>>2]|0;
     HEAP32[$27>>2] = $50;
     $error$0$be = $error$05;
     break;
    }
    case 45:  {
     HEAP32[$n>>2] = 0;
     $51 = (_afm_parser_read_int($parser,$n)|0);
     $52 = ($51|0)==(0);
     if (!($52)) {
      $error$1 = $error$05;
      break L10;
     }
     $53 = HEAP32[$n>>2]|0;
     $54 = (_afm_parser_skip_section($parser,$53)|0);
     $55 = ($54|0)==(0);
     if ($55) {
      $error$0$be = 0;
     } else {
      $$0 = $54;
      label = 22;
      break L12;
     }
     break;
    }
    default: {
     $error$0$be = $error$05;
    }
    }
    $31 = (_afm_parser_next_key($parser,1,$len)|0);
    $32 = ($31|0)==(0|0);
    if ($32) {
     $error$1 = $error$0$be;
     break L10;
    } else {
     $29 = $31;$error$05 = $error$0$be;
    }
   }
   if ((label|0) == 20) {
    $56 = (_afm_parse_kern_data($parser)|0);
    $57 = ($56|0)==(0);
    if ($57) {
     $$0 = 0;
    } else {
     $error$1 = $56;
     break;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $58 = ((($2)) + 28|0);
 $59 = HEAP32[$58>>2]|0;
 _ft_mem_free($0,$59);
 HEAP32[$58>>2] = 0;
 $60 = ((($2)) + 32|0);
 HEAP32[$60>>2] = 0;
 $61 = ((($2)) + 36|0);
 $62 = HEAP32[$61>>2]|0;
 _ft_mem_free($0,$62);
 HEAP32[$61>>2] = 0;
 $63 = ((($2)) + 40|0);
 HEAP32[$63>>2] = 0;
 HEAP8[$2>>0] = 0;
 $$0 = $error$1;
 STACKTOP = sp;return ($$0|0);
}
function _afm_stream_read_string($stream) {
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _afm_stream_skip_spaces($stream);
 $0 = ((($stream)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(1);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP32[$stream>>2]|0;
 $4 = ((($3)) + -1|0);
 $5 = ((($stream)) + 8|0);
 L4: while(1) {
  $6 = HEAP32[$stream>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   $storemerge = 3;
   break;
  }
  $9 = ((($6)) + 1|0);
  HEAP32[$stream>>2] = $9;
  $10 = HEAP8[$6>>0]|0;
  $11 = $10&255;
  switch ($11|0) {
  case 10: case 13:  {
   $storemerge = 2;
   break L4;
   break;
  }
  default: {
  }
  }
  $cond = ($10<<24>>24)==(26);
  if ($cond) {
   $storemerge = 3;
   break;
  }
 }
 HEAP32[$0>>2] = $storemerge;
 $$0 = $4;
 return ($$0|0);
}
function _afm_stream_read_one($stream) {
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _afm_stream_skip_spaces($stream);
 $0 = ((($stream)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = HEAP32[$stream>>2]|0;
 $4 = ((($3)) + -1|0);
 $5 = ((($stream)) + 8|0);
 L4: while(1) {
  $6 = HEAP32[$stream>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if (!($8)) {
   label = 7;
   break;
  }
  $9 = ((($6)) + 1|0);
  HEAP32[$stream>>2] = $9;
  $10 = HEAP8[$6>>0]|0;
  $11 = $10&255;
  switch ($11|0) {
  case 26:  {
   label = 7;
   break L4;
   break;
  }
  case 10: case 13:  {
   label = 5;
   break L4;
   break;
  }
  case 59:  {
   label = 6;
   break L4;
   break;
  }
  case 9: case 32:  {
   $$0 = $4;
   label = 8;
   break L4;
   break;
  }
  default: {
  }
  }
 }
 if ((label|0) == 5) {
  HEAP32[$0>>2] = 2;
  $$0 = $4;
  return ($$0|0);
 }
 else if ((label|0) == 6) {
  HEAP32[$0>>2] = 1;
  $$0 = $4;
  return ($$0|0);
 }
 else if ((label|0) == 7) {
  HEAP32[$0>>2] = 3;
  $$0 = $4;
  return ($$0|0);
 }
 else if ((label|0) == 8) {
  return ($$0|0);
 }
 return (0)|0;
}
function _afm_tokenize($key,$len) {
 $key = $key|0;
 $len = $len|0;
 var $$0 = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$04 = 0, $n$1 = 0, $n$2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$key>>0]|0;
 $n$04 = 0;
 L1: while(1) {
  $1 = (11340 + ($n$04<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==($0<<24>>24);
  if ($4) {
   $5 = HEAP8[$key>>0]|0;
   $n$1 = $n$04;
   while(1) {
    $6 = (11340 + ($n$1<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==($5<<24>>24);
    if (!($9)) {
     $$0 = 75;
     label = 8;
     break L1;
    }
    $10 = (_strncmp($7,$key,$len)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$0 = $n$1;
     label = 8;
     break L1;
    }
    $12 = (($n$1) + 1)|0;
    $$old1 = ($12|0)<(74);
    if ($$old1) {
     $n$1 = $12;
    } else {
     $n$2 = $12;
     break;
    }
   }
  } else {
   $n$2 = $n$04;
  }
  $13 = (($n$2) + 1)|0;
  $14 = ($13|0)<(74);
  if ($14) {
   $n$04 = $13;
  } else {
   $$0 = 75;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  return ($$0|0);
 }
 return (0)|0;
}
function _afm_parser_skip_section($parser,$n) {
 $parser = $parser|0;
 $n = $n|0;
 var $$0 = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $len = sp;
 $$02 = $n;
 while(1) {
  $0 = ($$02|0)==(0);
  if ($0) {
   label = 4;
   break;
  }
  $1 = (($$02) + -1)|0;
  $2 = (_afm_parser_next_key($parser,1,0)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = 160;
   break;
  } else {
   $$02 = $1;
  }
 }
 L4: do {
  if ((label|0) == 4) {
   while(1) {
    label = 0;
    $4 = (_afm_parser_next_key($parser,1,$len)|0);
    $5 = ($4|0)==(0|0);
    if ($5) {
     $$0 = 160;
     break L4;
    }
    $6 = HEAP32[$len>>2]|0;
    $7 = (_afm_tokenize($4,$6)|0);
    switch ($7|0) {
    case 17: case 20:  {
     $$0 = 0;
     break L4;
     break;
    }
    default: {
     label = 4;
    }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _afm_parse_kern_data($parser) {
 $parser = $parser|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $len = sp;
 $0 = (_afm_parser_next_key($parser,1,$len)|0);
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$0 = 160;
  } else {
   $3 = $0;
   L2: while(1) {
    $2 = HEAP32[$len>>2]|0;
    $4 = (_afm_tokenize($3,$2)|0);
    switch ($4|0) {
    case 20: case 21:  {
     $$0 = 0;
     break L1;
     break;
    }
    case 53:  {
     $7 = (_afm_parse_track_kern($parser)|0);
     $8 = ($7|0)==(0);
     if (!($8)) {
      $$0 = $7;
      break L1;
     }
     break;
    }
    case 51: case 50:  {
     $9 = (_afm_parse_kern_pairs($parser)|0);
     $10 = ($9|0)==(0);
     if (!($10)) {
      $$0 = $9;
      break L1;
     }
     break;
    }
    case 75:  {
     break;
    }
    default: {
     break L2;
    }
    }
    $5 = (_afm_parser_next_key($parser,1,$len)|0);
    $6 = ($5|0)==(0|0);
    if ($6) {
     break;
    } else {
     $3 = $5;
    }
   }
   $$0 = 160;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _afm_parse_track_kern($parser) {
 $parser = $parser|0;
 var $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $len = 0, $n$06 = 0, $n$06$lcssa15 = 0, $n$1 = 0, $shared_vals = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $len = sp + 4|0;
 $error = sp;
 $shared_vals = sp + 8|0;
 $0 = ((($parser)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 32|0);
 $3 = (_afm_parser_read_int($parser,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$2 = 160;
  STACKTOP = sp;return ($$2|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = HEAP32[$parser>>2]|0;
  $8 = (_ft_mem_realloc($7,20,0,$5,0,$error)|0);
  $9 = ((($1)) + 28|0);
  HEAP32[$9>>2] = $8;
  $10 = HEAP32[$error>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$2 = $10;
   STACKTOP = sp;return ($$2|0);
  }
 }
 $12 = (_afm_parser_next_key($parser,1,$len)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$2 = 160;
  STACKTOP = sp;return ($$2|0);
 }
 $14 = ((($1)) + 28|0);
 $15 = ((($shared_vals)) + 8|0);
 $16 = ((($shared_vals)) + 16|0);
 $17 = ((($shared_vals)) + 24|0);
 $18 = ((($shared_vals)) + 32|0);
 $19 = ((($shared_vals)) + 4|0);
 $20 = ((($shared_vals)) + 12|0);
 $21 = ((($shared_vals)) + 20|0);
 $22 = ((($shared_vals)) + 28|0);
 $23 = ((($shared_vals)) + 36|0);
 $25 = $12;$n$06 = -1;
 L11: while(1) {
  $24 = HEAP32[$len>>2]|0;
  $26 = (_afm_tokenize($25,$24)|0);
  switch ($26|0) {
  case 20: case 21: case 23:  {
   $n$06$lcssa15 = $n$06;
   label = 12;
   break L11;
   break;
  }
  case 56:  {
   $27 = (($n$06) + 1)|0;
   $28 = HEAP32[$2>>2]|0;
   $29 = ($27|0)<($28|0);
   if (!($29)) {
    label = 11;
    break L11;
   }
   $30 = HEAP32[$14>>2]|0;
   HEAP32[$shared_vals>>2] = 3;
   HEAP32[$15>>2] = 2;
   HEAP32[$16>>2] = 2;
   HEAP32[$17>>2] = 2;
   HEAP32[$18>>2] = 2;
   $31 = (_afm_parser_read_vals($parser,$shared_vals,5)|0);
   $32 = ($31|0)==(5);
   if (!($32)) {
    label = 11;
    break L11;
   }
   $33 = HEAP32[$19>>2]|0;
   $34 = (($30) + (($27*20)|0)|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$20>>2]|0;
   $36 = (((($30) + (($27*20)|0)|0)) + 4|0);
   HEAP32[$36>>2] = $35;
   $37 = HEAP32[$21>>2]|0;
   $38 = (((($30) + (($27*20)|0)|0)) + 8|0);
   HEAP32[$38>>2] = $37;
   $39 = HEAP32[$22>>2]|0;
   $40 = (((($30) + (($27*20)|0)|0)) + 12|0);
   HEAP32[$40>>2] = $39;
   $41 = HEAP32[$23>>2]|0;
   $42 = (((($30) + (($27*20)|0)|0)) + 16|0);
   HEAP32[$42>>2] = $41;
   $n$1 = $27;
   break;
  }
  case 75:  {
   $n$1 = $n$06;
   break;
  }
  default: {
   label = 11;
   break L11;
  }
  }
  $43 = (_afm_parser_next_key($parser,1,$len)|0);
  $44 = ($43|0)==(0|0);
  if ($44) {
   $$2 = 160;
   label = 13;
   break;
  } else {
   $25 = $43;$n$06 = $n$1;
  }
 }
 if ((label|0) == 11) {
  $$2 = 160;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 12) {
  $45 = (($n$06$lcssa15) + 1)|0;
  HEAP32[$2>>2] = $45;
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 13) {
  STACKTOP = sp;return ($$2|0);
 }
 return (0)|0;
}
function _afm_parse_kern_pairs($parser) {
 $parser = $parser|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $len = 0, $n$0$ph = 0, $n$0$ph$lcssa22 = 0, $or$cond = 0, $phitmp = 0, $shared_vals = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $len = sp + 36|0;
 $error = sp + 32|0;
 $shared_vals = sp;
 $0 = ((($parser)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 40|0);
 $3 = (_afm_parser_read_int($parser,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 160;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = HEAP32[$parser>>2]|0;
  $8 = (_ft_mem_realloc($7,16,0,$5,0,$error)|0);
  $9 = ((($1)) + 36|0);
  HEAP32[$9>>2] = $8;
  $10 = HEAP32[$error>>2]|0;
  $11 = ($10|0)==(0);
  if (!($11)) {
   $$0 = $10;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $12 = ((($1)) + 36|0);
 $13 = ((($shared_vals)) + 8|0);
 $14 = ((($shared_vals)) + 16|0);
 $15 = ((($shared_vals)) + 24|0);
 $16 = ((($shared_vals)) + 4|0);
 $17 = ((($shared_vals)) + 12|0);
 $18 = ((($shared_vals)) + 20|0);
 $19 = ((($shared_vals)) + 20|0);
 $20 = ((($shared_vals)) + 28|0);
 $n$0$ph = 0;
 L8: while(1) {
  L10: while(1) {
   $21 = (_afm_parser_next_key($parser,1,$len)|0);
   $22 = ($21|0)==(0|0);
   if ($22) {
    $$0 = 160;
    label = 15;
    break L8;
   }
   $23 = HEAP32[$len>>2]|0;
   $24 = (_afm_tokenize($21,$23)|0);
   switch ($24|0) {
   case 20: case 21: case 22:  {
    $n$0$ph$lcssa22 = $n$0$ph;
    label = 14;
    break L8;
    break;
   }
   case 75:  {
    break;
   }
   case 37: case 36: case 34:  {
    $$lcssa = $24;
    break L10;
    break;
   }
   default: {
    $$0 = 160;
    label = 15;
    break L8;
   }
   }
  }
  $25 = HEAP32[$2>>2]|0;
  $26 = ($n$0$ph|0)<($25|0);
  if (!($26)) {
   $$0 = 160;
   label = 15;
   break;
  }
  $27 = HEAP32[$12>>2]|0;
  HEAP32[$shared_vals>>2] = 5;
  HEAP32[$13>>2] = 5;
  HEAP32[$14>>2] = 3;
  HEAP32[$15>>2] = 3;
  $28 = (_afm_parser_read_vals($parser,$shared_vals,4)|0);
  $29 = ($28|0)<(3);
  if ($29) {
   $$0 = 160;
   label = 15;
   break;
  }
  $30 = HEAP32[$16>>2]|0;
  $31 = (($27) + ($n$0$ph<<4)|0);
  HEAP32[$31>>2] = $30;
  $32 = HEAP32[$17>>2]|0;
  $33 = (((($27) + ($n$0$ph<<4)|0)) + 4|0);
  HEAP32[$33>>2] = $32;
  $34 = ($$lcssa|0)==(37);
  if ($34) {
   $35 = (((($27) + ($n$0$ph<<4)|0)) + 8|0);
   HEAP32[$35>>2] = 0;
   $36 = HEAP32[$18>>2]|0;
   $37 = (((($27) + ($n$0$ph<<4)|0)) + 12|0);
   HEAP32[$37>>2] = $36;
  } else {
   $38 = HEAP32[$19>>2]|0;
   $39 = (((($27) + ($n$0$ph<<4)|0)) + 8|0);
   HEAP32[$39>>2] = $38;
   $40 = ($$lcssa|0)==(34);
   $41 = ($28|0)==(4);
   $or$cond = $40 & $41;
   $42 = HEAP32[$20>>2]|0;
   $43 = $or$cond ? $42 : 0;
   $44 = (((($27) + ($n$0$ph<<4)|0)) + 12|0);
   HEAP32[$44>>2] = $43;
  }
  $phitmp = (($n$0$ph) + 1)|0;
  $n$0$ph = $phitmp;
 }
 if ((label|0) == 14) {
  HEAP32[$2>>2] = $n$0$ph$lcssa22;
  $45 = ((($1)) + 36|0);
  $46 = HEAP32[$45>>2]|0;
  _qsort($46,$n$0$ph$lcssa22,16,151);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _afm_compare_kern_pairs($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = $0 << 16;
 $2 = ((($a)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1 | $3;
 $5 = HEAP32[$b>>2]|0;
 $6 = $5 << 16;
 $7 = ((($b)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $6 | $8;
 $10 = ($4>>>0)>($9>>>0);
 $11 = ($4>>>0)<($9>>>0);
 $$ = $11 << 31 >> 31;
 $$0 = $10 ? 1 : $$;
 return ($$0|0);
}
function _afm_stream_skip_spaces($stream) {
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($stream)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$stream>>2]|0;
 $4 = ((($stream)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 L4: do {
  if ($6) {
   $8 = $3;
   L5: while(1) {
    $7 = ((($8)) + 1|0);
    HEAP32[$stream>>2] = $7;
    $9 = HEAP8[$8>>0]|0;
    $10 = $9&255;
    switch ($10|0) {
    case 26:  {
     break L4;
     break;
    }
    case 10: case 13:  {
     label = 5;
     break L5;
     break;
    }
    case 59:  {
     label = 6;
     break L5;
     break;
    }
    case 9: case 32:  {
     break;
    }
    default: {
     label = 8;
     break L5;
    }
    }
    $11 = HEAP32[$stream>>2]|0;
    $12 = HEAP32[$4>>2]|0;
    $13 = ($11>>>0)<($12>>>0);
    if ($13) {
     $8 = $11;
    } else {
     break L4;
    }
   }
   if ((label|0) == 5) {
    HEAP32[$0>>2] = 2;
    return;
   }
   else if ((label|0) == 6) {
    HEAP32[$0>>2] = 1;
    return;
   }
   else if ((label|0) == 8) {
    return;
   }
  }
 } while(0);
 HEAP32[$0>>2] = 3;
 return;
}
function _PS_Conv_Strtol($cursor,$limit,$base) {
 $cursor = $cursor|0;
 $limit = $limit|0;
 $base = $base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $base$off = 0, $num$0$ = 0, $num$0$lcssa = 0, $num$05 = 0, $or$cond = 0, $p$0$lcssa = 0, $p$0$ph = 0, $p$04 = 0, $sign$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$cursor>>2]|0;
 $1 = ($0>>>0)>=($limit>>>0);
 $base$off = (($base) + -2)|0;
 $2 = ($base$off>>>0)>(34);
 $3 = $2 | $1;
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = HEAP8[$0>>0]|0;
 switch ($4<<24>>24) {
 case 43: case 45:  {
  $5 = HEAP8[$0>>0]|0;
  $6 = ($5<<24>>24)==(45);
  $7 = $6&1;
  $8 = ((($0)) + 1|0);
  $9 = ($8|0)==($limit|0);
  if ($9) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $p$0$ph = $8;$sign$0$ph = $7;
  }
  break;
 }
 default: {
  $p$0$ph = $0;$sign$0$ph = 0;
 }
 }
 $10 = ($p$0$ph>>>0)<($limit>>>0);
 L8: do {
  if ($10) {
   $num$05 = 0;$p$04 = $p$0$ph;
   while(1) {
    $11 = HEAP8[$p$04>>0]|0;
    $12 = $11&255;
    switch ($11<<24>>24) {
    case 0: case 12: case 9: case 10: case 13: case 32:  {
     $num$0$lcssa = $num$05;$p$0$lcssa = $p$04;
     break L8;
     break;
    }
    default: {
    }
    }
    $13 = ($11<<24>>24)<(0);
    if ($13) {
     $num$0$lcssa = $num$05;$p$0$lcssa = $p$04;
     break L8;
    }
    $14 = $12 & 127;
    $15 = (27992 + ($14)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 << 24 >> 24;
    $18 = ($16<<24>>24)>(-1);
    $19 = ($17|0)<($base|0);
    $or$cond = $18 & $19;
    if (!($or$cond)) {
     $num$0$lcssa = $num$05;$p$0$lcssa = $p$04;
     break L8;
    }
    $20 = Math_imul($num$05, $base)|0;
    $21 = (($17) + ($20))|0;
    $22 = ((($p$04)) + 1|0);
    $23 = ($22>>>0)<($limit>>>0);
    if ($23) {
     $num$05 = $21;$p$04 = $22;
    } else {
     $num$0$lcssa = $21;$p$0$lcssa = $22;
     break L8;
    }
   }
  } else {
   $num$0$lcssa = 0;$p$0$lcssa = $p$0$ph;
  }
 } while(0);
 $24 = ($sign$0$ph<<24>>24)==(0);
 $25 = (0 - ($num$0$lcssa))|0;
 $num$0$ = $24 ? $num$0$lcssa : $25;
 HEAP32[$cursor>>2] = $p$0$lcssa;
 $$0 = $num$0$;
 return ($$0|0);
}
function _PS_Conv_ToInt($cursor,$limit) {
 $cursor = $cursor|0;
 $limit = $limit|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_PS_Conv_Strtol($cursor,$limit,10)|0);
 $1 = HEAP32[$cursor>>2]|0;
 $2 = ($1>>>0)<($limit>>>0);
 if (!($2)) {
  $$0 = $0;
  return ($$0|0);
 }
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(35);
 if (!($4)) {
  $$0 = $0;
  return ($$0|0);
 }
 $5 = ((($1)) + 1|0);
 HEAP32[$cursor>>2] = $5;
 $6 = (_PS_Conv_Strtol($cursor,$limit,$0)|0);
 $$0 = $6;
 return ($$0|0);
}
function _PS_Conv_ToFixed($cursor,$limit,$power_ten) {
 $cursor = $cursor|0;
 $limit = $limit|0;
 $power_ten = $power_ten|0;
 var $$0 = 0, $$0218 = 0, $$1 = 0, $$2 = 0, $$3$ph = 0, $$310 = 0, $$46 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $decimal$019 = 0, $decimal$1 = 0, $decimal$2 = 0, $decimal$3$lcssa86 = 0, $decimal$312 = 0, $divider$020 = 0, $divider$1 = 0, $divider$2 = 0, $divider$3$lcssa = 0, $divider$38 = 0;
 var $integral$0 = 0, $integral$111 = 0, $integral$2$lcssa = 0, $integral$27 = 0, $integral$3 = 0, $integral$3$ = 0, $or$cond = 0, $p = 0, $sign$0 = 0, $storemerge = 0, $storemerge17 = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $p = sp;
 $0 = HEAP32[$cursor>>2]|0;
 HEAP32[$p>>2] = $0;
 $1 = ($0>>>0)<($limit>>>0);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP8[$0>>0]|0;
 switch ($2<<24>>24) {
 case 43: case 45:  {
  $3 = HEAP32[$p>>2]|0;
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(45);
  $6 = $5&1;
  $7 = ((($3)) + 1|0);
  HEAP32[$p>>2] = $7;
  $8 = ($7|0)==($limit|0);
  if ($8) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $sign$0 = $6;
  }
  break;
 }
 default: {
  $sign$0 = 0;
 }
 }
 $9 = HEAP32[$p>>2]|0;
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(46);
 if ($11) {
  $integral$0 = 0;
 } else {
  $12 = (_PS_Conv_ToInt($p,$limit)|0);
  $13 = $12 << 16;
  $integral$0 = $13;
 }
 $14 = HEAP32[$p>>2]|0;
 $15 = ($14>>>0)<($limit>>>0);
 L11: do {
  if ($15) {
   $16 = HEAP8[$14>>0]|0;
   $17 = ($16<<24>>24)==(46);
   if ($17) {
    $storemerge17 = ((($14)) + 1|0);
    HEAP32[$p>>2] = $storemerge17;
    $18 = ($storemerge17>>>0)<($limit>>>0);
    if ($18) {
     $19 = ($integral$0|0)==(0);
     $$0218 = $power_ten;$decimal$019 = 0;$divider$020 = 1;$storemerge21 = $storemerge17;
     while(1) {
      $20 = HEAP8[$storemerge21>>0]|0;
      $21 = $20&255;
      switch ($20<<24>>24) {
      case 0: case 12: case 9: case 10: case 13: case 32:  {
       $$2 = $$0218;$decimal$2 = $decimal$019;$divider$2 = $divider$020;
       break L11;
       break;
      }
      default: {
      }
      }
      $22 = ($20<<24>>24)<(0);
      if ($22) {
       $$2 = $$0218;$decimal$2 = $decimal$019;$divider$2 = $divider$020;
       break L11;
      }
      $23 = $21 & 127;
      $24 = (27992 + ($23)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = $25 << 24 >> 24;
      $27 = (($23) + -48)|0;
      $28 = ($27>>>0)>(9);
      if ($28) {
       $$2 = $$0218;$decimal$2 = $decimal$019;$divider$2 = $divider$020;
       break L11;
      }
      $29 = ($$0218|0)>(0);
      $or$cond = $19 & $29;
      if ($or$cond) {
       $30 = (($$0218) + -1)|0;
       $31 = ($decimal$019*10)|0;
       $32 = (($26) + ($31))|0;
       $$1 = $30;$decimal$1 = $32;$divider$1 = $divider$020;
      } else {
       $33 = ($divider$020|0)<(10000000);
       if ($33) {
        $34 = ($decimal$019*10)|0;
        $35 = (($26) + ($34))|0;
        $36 = ($divider$020*10)|0;
        $$1 = $$0218;$decimal$1 = $35;$divider$1 = $36;
       } else {
        $$1 = $$0218;$decimal$1 = $decimal$019;$divider$1 = $divider$020;
       }
      }
      $37 = HEAP32[$p>>2]|0;
      $storemerge = ((($37)) + 1|0);
      HEAP32[$p>>2] = $storemerge;
      $38 = ($storemerge>>>0)<($limit>>>0);
      if ($38) {
       $$0218 = $$1;$decimal$019 = $decimal$1;$divider$020 = $divider$1;$storemerge21 = $storemerge;
      } else {
       $$2 = $$1;$decimal$2 = $decimal$1;$divider$2 = $divider$1;
       break L11;
      }
     }
    } else {
     $$2 = $power_ten;$decimal$2 = 0;$divider$2 = 1;
    }
   } else {
    $$2 = $power_ten;$decimal$2 = 0;$divider$2 = 1;
   }
  } else {
   $$2 = $power_ten;$decimal$2 = 0;$divider$2 = 1;
  }
 } while(0);
 $39 = HEAP32[$p>>2]|0;
 $40 = ((($39)) + 1|0);
 $41 = ($40>>>0)<($limit>>>0);
 L26: do {
  if ($41) {
   $42 = HEAP8[$39>>0]|0;
   switch ($42<<24>>24) {
   case 69: case 101:  {
    break;
   }
   default: {
    $$3$ph = $$2;
    break L26;
   }
   }
   $43 = HEAP32[$p>>2]|0;
   $44 = ((($43)) + 1|0);
   HEAP32[$p>>2] = $44;
   $45 = (_PS_Conv_ToInt($p,$limit)|0);
   $46 = (($45) + ($$2))|0;
   $$3$ph = $46;
  } else {
   $$3$ph = $$2;
  }
 } while(0);
 $47 = ($$3$ph|0)>(0);
 if ($47) {
  $$310 = $$3$ph;$decimal$312 = $decimal$2;$integral$111 = $integral$0;
  while(1) {
   $49 = ($integral$111*10)|0;
   $50 = ($decimal$312*10)|0;
   $51 = (($$310) + -1)|0;
   $52 = ($$310|0)>(1);
   if ($52) {
    $$310 = $51;$decimal$312 = $50;$integral$111 = $49;
   } else {
    $decimal$3$lcssa86 = $50;$divider$3$lcssa = $divider$2;$integral$2$lcssa = $49;
    break;
   }
  }
 } else {
  $48 = ($$3$ph|0)<(0);
  if ($48) {
   $$46 = $$3$ph;$divider$38 = $divider$2;$integral$27 = $integral$0;
   while(1) {
    $53 = (($integral$27|0) / 10)&-1;
    $54 = ($divider$38*10)|0;
    $55 = (($$46) + 1)|0;
    $56 = ($$46|0)<(-1);
    if ($56) {
     $$46 = $55;$divider$38 = $54;$integral$27 = $53;
    } else {
     $decimal$3$lcssa86 = $decimal$2;$divider$3$lcssa = $54;$integral$2$lcssa = $53;
     break;
    }
   }
  } else {
   $decimal$3$lcssa86 = $decimal$2;$divider$3$lcssa = $divider$2;$integral$2$lcssa = $integral$0;
  }
 }
 $57 = ($decimal$3$lcssa86|0)==(0);
 if ($57) {
  $integral$3 = $integral$2$lcssa;
 } else {
  $58 = (_FT_DivFix($decimal$3$lcssa86,$divider$3$lcssa)|0);
  $59 = (($58) + ($integral$2$lcssa))|0;
  $integral$3 = $59;
 }
 $60 = ($sign$0<<24>>24)==(0);
 $61 = (0 - ($integral$3))|0;
 $integral$3$ = $60 ? $integral$3 : $61;
 $62 = HEAP32[$p>>2]|0;
 HEAP32[$cursor>>2] = $62;
 $$0 = $integral$3$;
 STACKTOP = sp;return ($$0|0);
}
function _PS_Conv_ASCIIHexDecode($cursor,$limit,$buffer,$n) {
 $cursor = $cursor|0;
 $limit = $limit|0;
 $buffer = $buffer|0;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pad$0$lcssa = 0, $pad$013 = 0, $pad$1 = 0, $r$0$lcssa = 0, $r$0$lcssa30 = 0, $r$011 = 0;
 var $w$0$lcssa = 0, $w$012 = 0, $w$1 = 0, $w$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 1;
 $1 = HEAP32[$cursor>>2]|0;
 $2 = ($1>>>0)<($limit>>>0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = $limit;
 $4 = $1;
 $5 = (($3) - ($4))|0;
 $6 = ($0>>>0)>($5>>>0);
 $$ = $6 ? $5 : $0;
 $7 = ($$|0)==(0);
 if ($7) {
  $r$0$lcssa30 = 0;$w$2 = 0;
 } else {
  $pad$013 = 1;$r$011 = 0;$w$012 = 0;
  L5: while(1) {
   $8 = (($1) + ($r$011)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9&255;
   switch ($9<<24>>24) {
   case 0: case 9: case 10: case 12: case 13: case 32:  {
    $pad$1 = $pad$013;$w$1 = $w$012;
    break;
   }
   default: {
    $11 = ($9<<24>>24)<(0);
    if ($11) {
     $pad$0$lcssa = $pad$013;$r$0$lcssa = $r$011;$w$0$lcssa = $w$012;
     break L5;
    }
    $12 = $10 & 127;
    $13 = (27992 + ($12)|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14&255)>(15);
    if ($15) {
     $pad$0$lcssa = $pad$013;$r$0$lcssa = $r$011;$w$0$lcssa = $w$012;
     break L5;
    }
    $16 = $14 << 24 >> 24;
    $17 = $pad$013 << 4;
    $18 = $16 | $17;
    $19 = $18 & 256;
    $20 = ($19|0)==(0);
    if ($20) {
     $pad$1 = $18;$w$1 = $w$012;
    } else {
     $21 = $18&255;
     $22 = (($w$012) + 1)|0;
     $23 = (($buffer) + ($w$012)|0);
     HEAP8[$23>>0] = $21;
     $pad$1 = 1;$w$1 = $22;
    }
   }
   }
   $24 = (($r$011) + 1)|0;
   $25 = ($24>>>0)<($$>>>0);
   if ($25) {
    $pad$013 = $pad$1;$r$011 = $24;$w$012 = $w$1;
   } else {
    $pad$0$lcssa = $pad$1;$r$0$lcssa = $24;$w$0$lcssa = $w$1;
    break;
   }
  }
  $26 = ($pad$0$lcssa|0)==(1);
  if ($26) {
   $r$0$lcssa30 = $r$0$lcssa;$w$2 = $w$0$lcssa;
  } else {
   $27 = $pad$0$lcssa << 4;
   $28 = $27&255;
   $29 = (($w$0$lcssa) + 1)|0;
   $30 = (($buffer) + ($w$0$lcssa)|0);
   HEAP8[$30>>0] = $28;
   $r$0$lcssa30 = $r$0$lcssa;$w$2 = $29;
  }
 }
 $31 = (($1) + ($r$0$lcssa30)|0);
 HEAP32[$cursor>>2] = $31;
 $$0 = $w$2;
 return ($$0|0);
}
function _PS_Conv_EexecDecode($cursor,$limit,$buffer,$n,$seed) {
 $cursor = $cursor|0;
 $limit = $limit|0;
 $buffer = $buffer|0;
 $n = $n|0;
 $seed = $seed|0;
 var $$0 = 0, $$n = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $r$0$lcssa = 0, $r$02 = 0, $s$0$lcssa = 0, $s$03 = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$cursor>>2]|0;
 $1 = ($0>>>0)<($limit>>>0);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP16[$seed>>1]|0;
 $3 = $2&65535;
 $4 = $limit;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)<($n>>>0);
 $$n = $7 ? $6 : $n;
 $8 = ($$n|0)==(0);
 if ($8) {
  $r$0$lcssa = 0;$s$0$lcssa = $3;
 } else {
  $9 = (($5) + -1)|0;
  $10 = (($9) - ($4))|0;
  $11 = $n ^ -1;
  $12 = ($10>>>0)>($11>>>0);
  $umax = $12 ? $10 : $11;
  $13 = $umax ^ -1;
  $r$02 = 0;$s$03 = $3;
  while(1) {
   $14 = (($0) + ($r$02)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $s$03 >>> 8;
   $18 = $16 ^ $17;
   $19 = (($16) + ($s$03))|0;
   $20 = ($19*52845)|0;
   $21 = (($20) + 22719)|0;
   $22 = $21 & 65535;
   $23 = $18&255;
   $24 = (($buffer) + ($r$02)|0);
   HEAP8[$24>>0] = $23;
   $25 = (($r$02) + 1)|0;
   $exitcond = ($25|0)==($13|0);
   if ($exitcond) {
    $r$0$lcssa = $13;$s$0$lcssa = $22;
    break;
   } else {
    $r$02 = $25;$s$03 = $22;
   }
  }
 }
 $26 = (($0) + ($$n)|0);
 HEAP32[$cursor>>2] = $26;
 $27 = $s$0$lcssa&65535;
 HEAP16[$seed>>1] = $27;
 $$0 = $r$0$lcssa;
 return ($$0|0);
}
function _ps_table_new($table,$count,$memory) {
 $table = $table|0;
 $count = $count|0;
 $memory = $memory|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($table)) + 32|0);
 HEAP32[$0>>2] = $memory;
 $1 = (_ft_mem_realloc($memory,4,0,$count,0,$error)|0);
 $2 = ((($table)) + 24|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$error>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (_ft_mem_realloc($memory,4,0,$count,0,$error)|0);
  $6 = ((($table)) + 28|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$error>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = ((($table)) + 16|0);
   HEAP32[$9>>2] = $count;
   $10 = ((($table)) + 12|0);
   HEAP32[$10>>2] = -559038737;
   $11 = ((($table)) + 20|0);
   HEAP32[$11>>2] = 0;
   HEAP32[$table>>2] = 0;
   $12 = ((($table)) + 8|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($table)) + 4|0);
   HEAP32[$13>>2] = 0;
   $14 = ((($table)) + 36|0);
   ;HEAP32[$14>>2]=HEAP32[11136>>2]|0;HEAP32[$14+4>>2]=HEAP32[11136+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[11136+8>>2]|0;HEAP32[$14+12>>2]=HEAP32[11136+12>>2]|0;
   $$pr = HEAP32[$error>>2]|0;
   $15 = ($$pr|0)==(0);
   if ($15) {
    $17 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($17|0);
   }
  }
 }
 $16 = HEAP32[$2>>2]|0;
 _ft_mem_free($memory,$16);
 HEAP32[$2>>2] = 0;
 $17 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($17|0);
}
function _ps_table_add($table,$idx,$object,$length) {
 $table = $table|0;
 $idx = $idx|0;
 $object = $object|0;
 $length = $length|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_size$0$lcssa = 0, $new_size$03 = 0, $or$cond = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($idx|0)<(0);
 if ($0) {
  $$0 = 6;
  return ($$0|0);
 }
 $1 = ((($table)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<=($idx|0);
 $4 = ($length|0)<(0);
 $or$cond2 = $4 | $3;
 if ($or$cond2) {
  $$0 = 6;
  return ($$0|0);
 }
 $5 = ((($table)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($length))|0;
 $8 = ((($table)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = HEAP32[$table>>2]|0;
  $12 = $object;
  $13 = $11;
  $14 = (($12) - ($13))|0;
  $15 = ($14|0)>(-1);
  $16 = ($14>>>0)<($9>>>0);
  $or$cond = $15 & $16;
  $$ = $or$cond ? $14 : -1;
  $17 = HEAP32[$5>>2]|0;
  $18 = (($17) + ($length))|0;
  $19 = ($9>>>0)<($18>>>0);
  if ($19) {
   $20 = HEAP32[$5>>2]|0;
   $21 = (($20) + ($length))|0;
   $new_size$03 = $9;
   while(1) {
    $22 = $new_size$03 >>> 2;
    $23 = (($new_size$03) + 1024)|0;
    $24 = (($23) + ($22))|0;
    $25 = $24 & -1024;
    $26 = ($25>>>0)<($21>>>0);
    if ($26) {
     $new_size$03 = $25;
    } else {
     $new_size$0$lcssa = $25;
     break;
    }
   }
  } else {
   $new_size$0$lcssa = $9;
  }
  $27 = (_reallocate_t1_table($table,$new_size$0$lcssa)|0);
  $28 = ($27|0)==(0);
  if (!($28)) {
   $$0 = $27;
   return ($$0|0);
  }
  $29 = ($$|0)>(-1);
  if ($29) {
   $30 = HEAP32[$table>>2]|0;
   $31 = (($30) + ($$)|0);
   $$01 = $31;
  } else {
   $$01 = $object;
  }
 } else {
  $$01 = $object;
 }
 $32 = HEAP32[$table>>2]|0;
 $33 = HEAP32[$5>>2]|0;
 $34 = (($32) + ($33)|0);
 $35 = ((($table)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($idx<<2)|0);
 HEAP32[$37>>2] = $34;
 $38 = ((($table)) + 28|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($39) + ($idx<<2)|0);
 HEAP32[$40>>2] = $length;
 $41 = HEAP32[$table>>2]|0;
 $42 = HEAP32[$5>>2]|0;
 $43 = (($41) + ($42)|0);
 _memcpy(($43|0),($$01|0),($length|0))|0;
 $44 = HEAP32[$5>>2]|0;
 $45 = (($44) + ($length))|0;
 HEAP32[$5>>2] = $45;
 $$0 = 0;
 return ($$0|0);
}
function _ps_table_done($table) {
 $table = $table|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($table)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$table>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($table)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_ft_mem_alloc($1,$5,$error)|0);
 HEAP32[$table>>2] = $6;
 $7 = HEAP32[$error>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$4>>2]|0;
 _memcpy(($6|0),($2|0),($9|0))|0;
 _shift_elements($table,$2);
 $10 = HEAP32[$4>>2]|0;
 $11 = ((($table)) + 8|0);
 HEAP32[$11>>2] = $10;
 _ft_mem_free($1,$2);
 STACKTOP = sp;return;
}
function _ps_table_release($table) {
 $table = $table|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($table)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(-559038737);
 if (!($4)) {
  return;
 }
 $5 = HEAP32[$table>>2]|0;
 _ft_mem_free($1,$5);
 HEAP32[$table>>2] = 0;
 $6 = ((($table)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 _ft_mem_free($1,$7);
 HEAP32[$6>>2] = 0;
 $8 = ((($table)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 _ft_mem_free($1,$9);
 HEAP32[$8>>2] = 0;
 HEAP32[$2>>2] = 0;
 return;
}
function _ps_parser_skip_PS_token($parser) {
 $parser = $parser|0;
 var $$error$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, $error$0 = 0, $error$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur = sp;
 $0 = HEAP32[$parser>>2]|0;
 HEAP32[$cur>>2] = $0;
 $1 = ((($parser)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _skip_spaces($cur,$2);
 $3 = HEAP32[$cur>>2]|0;
 $4 = ($3>>>0)<($2>>>0);
 L1: do {
  if ($4) {
   $5 = HEAP8[$3>>0]|0;
   switch ($5<<24>>24) {
   case 93: case 91:  {
    $6 = HEAP32[$cur>>2]|0;
    $7 = ((($6)) + 1|0);
    HEAP32[$cur>>2] = $7;
    $error$0 = 0;
    break L1;
    break;
   }
   case 123:  {
    $8 = (_skip_procedure($cur,$2)|0);
    $error$0 = $8;
    break L1;
    break;
   }
   case 40:  {
    $9 = (_skip_literal_string($cur,$2)|0);
    $error$0 = $9;
    break L1;
    break;
   }
   case 60:  {
    $10 = ((($3)) + 1|0);
    $11 = ($10>>>0)<($2>>>0);
    if ($11) {
     $12 = HEAP8[$10>>0]|0;
     $13 = ($12<<24>>24)==(60);
     if ($13) {
      $14 = ((($3)) + 2|0);
      HEAP32[$cur>>2] = $14;
      $error$0 = 0;
      break L1;
     }
    }
    $15 = (_skip_string($cur,$2)|0);
    $error$0 = $15;
    break L1;
    break;
   }
   case 62:  {
    $16 = ((($3)) + 1|0);
    HEAP32[$cur>>2] = $16;
    $17 = ($16>>>0)<($2>>>0);
    if (!($17)) {
     $error$0 = 3;
     break L1;
    }
    $18 = HEAP8[$16>>0]|0;
    $19 = ($18<<24>>24)==(62);
    if (!($19)) {
     $error$0 = 3;
     break L1;
    }
    $20 = ((($3)) + 2|0);
    HEAP32[$cur>>2] = $20;
    $error$0 = 0;
    break L1;
    break;
   }
   case 47:  {
    $21 = ((($3)) + 1|0);
    HEAP32[$cur>>2] = $21;
    break;
   }
   default: {
   }
   }
   $22 = HEAP32[$cur>>2]|0;
   $23 = ($22>>>0)<($2>>>0);
   if ($23) {
    $25 = $22;
    while(1) {
     $24 = HEAP8[$25>>0]|0;
     switch ($24<<24>>24) {
     case 37: case 125: case 123: case 93: case 91: case 62: case 60: case 41: case 40: case 47: case 0: case 12: case 9: case 10: case 13: case 32:  {
      $error$0 = 0;
      break L1;
      break;
     }
     default: {
     }
     }
     $26 = ((($25)) + 1|0);
     HEAP32[$cur>>2] = $26;
     $27 = ($26>>>0)<($2>>>0);
     if ($27) {
      $25 = $26;
     } else {
      $error$0 = 0;
      break L1;
     }
    }
   } else {
    $error$0 = 0;
   }
  } else {
   $error$0 = 0;
  }
 } while(0);
 $28 = HEAP32[$cur>>2]|0;
 $29 = ($28>>>0)<($2>>>0);
 if (!($29)) {
  $error$1 = $error$0;
  $32 = ((($parser)) + 12|0);
  HEAP32[$32>>2] = $error$1;
  $33 = HEAP32[$cur>>2]|0;
  HEAP32[$parser>>2] = $33;
  STACKTOP = sp;return;
 }
 $30 = HEAP32[$parser>>2]|0;
 $31 = ($28|0)==($30|0);
 $$error$0 = $31 ? 3 : $error$0;
 $error$1 = $$error$0;
 $32 = ((($parser)) + 12|0);
 HEAP32[$32>>2] = $error$1;
 $33 = HEAP32[$cur>>2]|0;
 HEAP32[$parser>>2] = $33;
 STACKTOP = sp;return;
}
function _ps_parser_skip_spaces($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 _skip_spaces($parser,$1);
 return;
}
function _ps_parser_to_token($parser,$token) {
 $parser = $parser|0;
 $token = $token|0;
 var $$cast = 0, $$cast3 = 0, $$cast5 = 0, $$cast5$lcssa12 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, $embed$04 = 0, $embed$1 = 0, $storemerge = 0, $storemerge2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur = sp;
 $0 = ((($token)) + 8|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$token>>2] = 0;
 $1 = ((($token)) + 4|0);
 HEAP32[$1>>2] = 0;
 _ps_parser_skip_spaces($parser);
 $2 = HEAP32[$parser>>2]|0;
 HEAP32[$cur>>2] = $2;
 $3 = ((($parser)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP8[$2>>0]|0;
 $7 = $6&255;
 L4: do {
  switch ($7|0) {
  case 40:  {
   HEAP32[$0>>2] = 2;
   $8 = HEAP32[$cur>>2]|0;
   HEAP32[$token>>2] = $8;
   $9 = (_skip_literal_string($cur,$4)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = HEAP32[$cur>>2]|0;
    HEAP32[$1>>2] = $11;
    $12 = $11;
    $42 = $12;
    label = 18;
   } else {
    label = 17;
   }
   break;
  }
  case 123:  {
   HEAP32[$0>>2] = 3;
   $13 = HEAP32[$cur>>2]|0;
   HEAP32[$token>>2] = $13;
   $14 = (_skip_procedure($cur,$4)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = HEAP32[$cur>>2]|0;
    HEAP32[$1>>2] = $16;
    $17 = $16;
    $42 = $17;
    label = 18;
   } else {
    label = 17;
   }
   break;
  }
  case 91:  {
   HEAP32[$0>>2] = 3;
   $18 = HEAP32[$cur>>2]|0;
   $19 = ((($18)) + 1|0);
   HEAP32[$cur>>2] = $19;
   HEAP32[$token>>2] = $18;
   $20 = HEAP32[$cur>>2]|0;
   HEAP32[$parser>>2] = $20;
   _ps_parser_skip_spaces($parser);
   $storemerge2 = HEAP32[$parser>>2]|0;
   HEAP32[$cur>>2] = $storemerge2;
   $$cast3 = $storemerge2;
   $21 = ($$cast3>>>0)<($4>>>0);
   if ($21) {
    $22 = ((($parser)) + 12|0);
    $$cast5 = $$cast3;$embed$04 = 1;
    L13: while(1) {
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0);
     if (!($24)) {
      label = 17;
      break L4;
     }
     $25 = HEAP8[$$cast5>>0]|0;
     switch ($25<<24>>24) {
     case 91:  {
      $26 = (($embed$04) + 1)|0;
      $embed$1 = $26;
      break;
     }
     case 93:  {
      $27 = (($embed$04) + -1)|0;
      $28 = ($embed$04|0)<(2);
      if ($28) {
       $$cast5$lcssa12 = $$cast5;
       break L13;
      } else {
       $embed$1 = $27;
      }
      break;
     }
     default: {
      $embed$1 = $embed$04;
     }
     }
     $30 = HEAP32[$cur>>2]|0;
     HEAP32[$parser>>2] = $30;
     _ps_parser_skip_PS_token($parser);
     _ps_parser_skip_spaces($parser);
     $storemerge = HEAP32[$parser>>2]|0;
     HEAP32[$cur>>2] = $storemerge;
     $$cast = $storemerge;
     $31 = ($$cast>>>0)<($4>>>0);
     if ($31) {
      $$cast5 = $$cast;$embed$04 = $embed$1;
     } else {
      label = 17;
      break L4;
     }
    }
    $29 = ((($$cast5$lcssa12)) + 1|0);
    HEAP32[$cur>>2] = $29;
    HEAP32[$1>>2] = $29;
   } else {
    label = 17;
   }
   break;
  }
  default: {
   HEAP32[$token>>2] = $2;
   $32 = HEAP32[$cur>>2]|0;
   $33 = HEAP8[$32>>0]|0;
   $34 = ($33<<24>>24)==(47);
   $35 = $34 ? 4 : 1;
   HEAP32[$0>>2] = $35;
   _ps_parser_skip_PS_token($parser);
   $36 = HEAP32[$parser>>2]|0;
   HEAP32[$cur>>2] = $36;
   $37 = ((($parser)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    HEAP32[$1>>2] = $36;
    $40 = $36;
    $42 = $40;
    label = 18;
   } else {
    label = 17;
   }
  }
  }
 } while(0);
 if ((label|0) == 17) {
  $$pr = HEAP32[$1>>2]|0;
  $42 = $$pr;
  label = 18;
 }
 if ((label|0) == 18) {
  $41 = ($42|0)==(0|0);
  if ($41) {
   HEAP32[$token>>2] = 0;
   HEAP32[$0>>2] = 0;
  }
 }
 $43 = HEAP32[$cur>>2]|0;
 HEAP32[$parser>>2] = $43;
 STACKTOP = sp;return;
}
function _ps_parser_to_token_array($parser,$tokens,$max_tokens,$pnum_tokens) {
 $parser = $parser|0;
 $tokens = $tokens|0;
 $max_tokens = $max_tokens|0;
 $pnum_tokens = $pnum_tokens|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur$0$lcssa = 0, $cur$01 = 0, $master = 0, $or$cond = 0, $token = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $master = sp + 12|0;
 $token = sp;
 HEAP32[$pnum_tokens>>2] = -1;
 _ps_parser_to_token($parser,$master);
 $0 = ((($master)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$parser>>2]|0;
 $4 = ((($parser)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($tokens) + (($max_tokens*12)|0)|0);
 $7 = HEAP32[$master>>2]|0;
 $8 = ((($7)) + 1|0);
 HEAP32[$parser>>2] = $8;
 $9 = ((($master)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + -1|0);
 HEAP32[$4>>2] = $11;
 $12 = HEAP32[$parser>>2]|0;
 $13 = ($12>>>0)<($11>>>0);
 L4: do {
  if ($13) {
   $14 = ((($token)) + 8|0);
   $15 = ($tokens|0)!=(0|0);
   $cur$01 = $tokens;
   while(1) {
    _ps_parser_to_token($parser,$token);
    $16 = HEAP32[$14>>2]|0;
    $17 = ($16|0)==(0);
    if ($17) {
     $cur$0$lcssa = $cur$01;
     break L4;
    }
    $18 = ($cur$01>>>0)<($6>>>0);
    $or$cond = $15 & $18;
    if ($or$cond) {
     ;HEAP32[$cur$01>>2]=HEAP32[$token>>2]|0;HEAP32[$cur$01+4>>2]=HEAP32[$token+4>>2]|0;HEAP32[$cur$01+8>>2]=HEAP32[$token+8>>2]|0;
    }
    $19 = ((($cur$01)) + 12|0);
    $20 = HEAP32[$parser>>2]|0;
    $21 = HEAP32[$4>>2]|0;
    $22 = ($20>>>0)<($21>>>0);
    if ($22) {
     $cur$01 = $19;
    } else {
     $cur$0$lcssa = $19;
     break;
    }
   }
  } else {
   $cur$0$lcssa = $tokens;
  }
 } while(0);
 $23 = $cur$0$lcssa;
 $24 = $tokens;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 12)&-1;
 HEAP32[$pnum_tokens>>2] = $26;
 HEAP32[$parser>>2] = $3;
 HEAP32[$4>>2] = $5;
 STACKTOP = sp;return;
}
function _ps_parser_load_field($parser,$field,$objects,$max_objects,$pflags) {
 $parser = $parser|0;
 $field = $field|0;
 $objects = $objects|0;
 $max_objects = $max_objects|0;
 $pflags = $pflags|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $9 = 0, $count$0$ph$ph = 0, $count$05 = 0, $cur = 0, $error = 0, $idx$0$ph$ph = 0, $idx$04 = 0, $len$0 = 0, $limit$0$ph$ph = 0, $temp = 0, $token = 0, $token2 = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $token = sp + 36|0;
 $cur = sp + 32|0;
 $error = sp + 28|0;
 $token2 = sp + 16|0;
 $temp = sp;
 _ps_parser_to_token($parser,$token);
 $0 = ((($token)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if (!($2)) {
   $3 = HEAP32[$token>>2]|0;
   HEAP32[$cur>>2] = $3;
   $4 = ((($token)) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($field)) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(7);
   if ($8) {
    $9 = HEAP32[$parser>>2]|0;
    $10 = ((($parser)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = HEAP32[$token>>2]|0;
    $13 = ((($12)) + 1|0);
    HEAP32[$parser>>2] = $13;
    $14 = HEAP32[$4>>2]|0;
    $15 = ((($14)) + -1|0);
    HEAP32[$10>>2] = $15;
    _ps_parser_to_token($parser,$token2);
    HEAP32[$parser>>2] = $9;
    HEAP32[$10>>2] = $11;
    $16 = ((($token2)) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(3);
    if ($18) {
     label = 5;
    } else {
     $count$0$ph$ph = 1;$idx$0$ph$ph = 0;$limit$0$ph$ph = $5;
    }
   } else {
    $19 = HEAP32[$0>>2]|0;
    $20 = ($19|0)==(3);
    if ($20) {
     label = 5;
    } else {
     $count$0$ph$ph = 1;$idx$0$ph$ph = 0;$limit$0$ph$ph = $5;
    }
   }
   if ((label|0) == 5) {
    $21 = ($max_objects|0)==(0);
    if ($21) {
     break;
    }
    $22 = HEAP32[$cur>>2]|0;
    $23 = ((($22)) + 1|0);
    HEAP32[$cur>>2] = $23;
    $24 = ((($5)) + -1|0);
    $count$0$ph$ph = $max_objects;$idx$0$ph$ph = 1;$limit$0$ph$ph = $24;
   }
   $25 = ((($field)) + 16|0);
   $26 = ((($field)) + 20|0);
   $27 = ((($parser)) + 16|0);
   $28 = $limit$0$ph$ph;
   $29 = HEAP32[$0>>2]|0;
   $30 = ((($temp)) + 4|0);
   $31 = ((($temp)) + 8|0);
   $32 = ((($temp)) + 12|0);
   $count$05 = $count$0$ph$ph;$idx$04 = $idx$0$ph$ph;
   L10: while(1) {
    $33 = (($objects) + ($idx$04<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = HEAP32[$25>>2]|0;
    $36 = (($34) + ($35)|0);
    _skip_spaces($cur,$limit$0$ph$ph);
    $37 = HEAP32[$6>>2]|0;
    switch ($37|0) {
    case 1:  {
     $38 = (_ps_tobool($cur,$limit$0$ph$ph)|0);
     $val$0 = $38;
     label = 13;
     break;
    }
    case 3:  {
     $39 = (_PS_Conv_ToFixed($cur,$limit$0$ph$ph,0)|0);
     $val$0 = $39;
     label = 13;
     break;
    }
    case 4:  {
     $40 = (_PS_Conv_ToFixed($cur,$limit$0$ph$ph,3)|0);
     $val$0 = $40;
     label = 13;
     break;
    }
    case 2:  {
     $41 = (_PS_Conv_ToInt($cur,$limit$0$ph$ph)|0);
     $val$0 = $41;
     label = 13;
     break;
    }
    case 6: case 5:  {
     $46 = HEAP32[$27>>2]|0;
     $47 = HEAP32[$cur>>2]|0;
     $48 = $47;
     $49 = (($28) - ($48))|0;
     $50 = ($47>>>0)<($limit$0$ph$ph>>>0);
     if ($50) {
      switch ($29|0) {
      case 4:  {
       $51 = (($49) + -1)|0;
       $52 = ((($47)) + 1|0);
       HEAP32[$cur>>2] = $52;
       $len$0 = $51;
       break;
      }
      case 2:  {
       $53 = ((($47)) + 1|0);
       HEAP32[$cur>>2] = $53;
       $54 = (($49) + -2)|0;
       $len$0 = $54;
       break;
      }
      default: {
       label = 22;
       break L10;
      }
      }
      $55 = HEAP32[$36>>2]|0;
      $56 = ($55|0)==(0|0);
      if (!($56)) {
       _ft_mem_free($46,$55);
       HEAP32[$36>>2] = 0;
      }
      $57 = (($len$0) + 1)|0;
      $58 = (_ft_mem_alloc($46,$57,$error)|0);
      $59 = HEAP32[$error>>2]|0;
      $60 = ($59|0)==(0);
      if (!($60)) {
       label = 32;
       break L10;
      }
      $61 = HEAP32[$cur>>2]|0;
      _memcpy(($58|0),($61|0),($len$0|0))|0;
      $62 = (($58) + ($len$0)|0);
      HEAP8[$62>>0] = 0;
      HEAP32[$36>>2] = $58;
     }
     break;
    }
    case 7:  {
     $63 = (_ps_tofixedarray($cur,$limit$0$ph$ph,4,$temp,0)|0);
     $64 = ($63|0)<(0);
     if ($64) {
      label = 28;
      break L10;
     }
     $65 = HEAP32[$temp>>2]|0;
     $66 = (_FT_RoundFix($65)|0);
     HEAP32[$36>>2] = $66;
     $67 = HEAP32[$30>>2]|0;
     $68 = (_FT_RoundFix($67)|0);
     $$sum = (($35) + 4)|0;
     $69 = (($34) + ($$sum)|0);
     HEAP32[$69>>2] = $68;
     $70 = HEAP32[$31>>2]|0;
     $71 = (_FT_RoundFix($70)|0);
     $$sum1 = (($35) + 8)|0;
     $72 = (($34) + ($$sum1)|0);
     HEAP32[$72>>2] = $71;
     $73 = HEAP32[$32>>2]|0;
     $74 = (_FT_RoundFix($73)|0);
     $$sum2 = (($35) + 12)|0;
     $75 = (($34) + ($$sum2)|0);
     HEAP32[$75>>2] = $74;
     break;
    }
    default: {
     break L1;
    }
    }
    L29: do {
     if ((label|0) == 13) {
      label = 0;
      $42 = HEAP8[$26>>0]|0;
      $43 = $42&255;
      switch ($43|0) {
      case 1:  {
       $44 = $val$0&255;
       HEAP8[$36>>0] = $44;
       break L29;
       break;
      }
      case 2:  {
       $45 = $val$0&65535;
       HEAP16[$36>>1] = $45;
       break L29;
       break;
      }
      case 4:  {
       HEAP32[$36>>2] = $val$0;
       break L29;
       break;
      }
      default: {
       HEAP32[$36>>2] = $val$0;
       break L29;
      }
      }
     }
    } while(0);
    $76 = (($count$05) + -1)|0;
    $77 = (($idx$04) + 1)|0;
    $78 = ($76|0)==(0);
    if ($78) {
     label = 31;
     break;
    } else {
     $count$05 = $76;$idx$04 = $77;
    }
   }
   if ((label|0) == 22) {
    HEAP32[$error>>2] = 3;
    $79 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($79|0);
   }
   else if ((label|0) == 28) {
    HEAP32[$error>>2] = 3;
    $79 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($79|0);
   }
   else if ((label|0) == 31) {
    HEAP32[$error>>2] = 0;
    $79 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($79|0);
   }
   else if ((label|0) == 32) {
    $79 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($79|0);
   }
  }
 } while(0);
 HEAP32[$error>>2] = 3;
 $79 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($79|0);
}
function _ps_parser_load_field_table($parser,$field,$objects,$max_objects,$pflags) {
 $parser = $parser|0;
 $field = $field|0;
 $objects = $objects|0;
 $max_objects = $max_objects|0;
 $pflags = $pflags|0;
 var $$op$op = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elements = 0, $error$0 = 0;
 var $fieldrec = 0, $num_elements = 0, $num_elements$promoted = 0, $token$01 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0;
 $elements = sp + 40|0;
 $num_elements = sp;
 $fieldrec = sp + 4|0;
 dest=$fieldrec; src=$field; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($fieldrec)) + 8|0);
 HEAP32[$0>>2] = 2;
 $1 = ((($field)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 switch ($2|0) {
 case 7: case 9:  {
  HEAP32[$0>>2] = 3;
  break;
 }
 default: {
 }
 }
 _ps_parser_to_token_array($parser,$elements,32,$num_elements);
 $3 = HEAP32[$num_elements>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $error$0 = 162;
  STACKTOP = sp;return ($error$0|0);
 }
 $5 = ((($field)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3>>>0)>($6>>>0);
 if ($7) {
  HEAP32[$num_elements>>2] = $6;
 }
 $8 = HEAP32[$parser>>2]|0;
 $9 = ((($parser)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = ($11|0)==(7);
 if (!($12)) {
  $13 = ((($field)) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0);
  if (!($15)) {
   $16 = HEAP32[$num_elements>>2]|0;
   $17 = $16&255;
   $18 = HEAP32[$objects>>2]|0;
   $19 = (($18) + ($14)|0);
   HEAP8[$19>>0] = $17;
  }
 }
 $$pr = HEAP32[$num_elements>>2]|0;
 $20 = ($$pr|0)>(0);
 if ($20) {
  $21 = ((($fieldrec)) + 20|0);
  $22 = ((($fieldrec)) + 16|0);
  $num_elements$promoted = HEAP32[$num_elements>>2]|0;
  $23 = ($num_elements$promoted|0)<(1);
  $32 = $num_elements$promoted;$token$01 = $elements;
  while(1) {
   $24 = HEAP32[$token$01>>2]|0;
   HEAP32[$parser>>2] = $24;
   $25 = ((($token$01)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   HEAP32[$9>>2] = $26;
   (_ps_parser_load_field($parser,$fieldrec,$objects,$max_objects,0)|0);
   $27 = HEAP8[$21>>0]|0;
   $28 = $27&255;
   $29 = HEAP32[$22>>2]|0;
   $30 = (($29) + ($28))|0;
   HEAP32[$22>>2] = $30;
   $31 = (($32) + -1)|0;
   $33 = ((($token$01)) + 12|0);
   $34 = ($32|0)>(1);
   if ($34) {
    $32 = $31;$token$01 = $33;
   } else {
    break;
   }
  }
  $$op$op = (($num_elements$promoted) + -1)|0;
  $35 = $23 ? $$op$op : 0;
  HEAP32[$num_elements>>2] = $35;
 }
 HEAP32[$parser>>2] = $8;
 HEAP32[$9>>2] = $10;
 $error$0 = 0;
 STACKTOP = sp;return ($error$0|0);
}
function _ps_parser_to_int($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _ps_parser_skip_spaces($parser);
 $0 = ((($parser)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_PS_Conv_ToInt($parser,$1)|0);
 return ($2|0);
}
function _ps_parser_to_bytes($parser,$bytes,$max_bytes,$pnum_bytes,$delimiters) {
 $parser = $parser|0;
 $bytes = $bytes|0;
 $max_bytes = $max_bytes|0;
 $pnum_bytes = $pnum_bytes|0;
 $delimiters = $delimiters|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0;
 var $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur = sp;
 _ps_parser_skip_spaces($parser);
 $0 = HEAP32[$parser>>2]|0;
 HEAP32[$cur>>2] = $0;
 $1 = ((($parser)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)<($2>>>0);
 if (!($3)) {
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 }
 $4 = ($delimiters<<24>>24)==(0);
 if ($4) {
  $17 = (_PS_Conv_ASCIIHexDecode($cur,$2,$bytes,$max_bytes)|0);
  HEAP32[$pnum_bytes>>2] = $17;
 } else {
  $5 = HEAP8[$0>>0]|0;
  $6 = ($5<<24>>24)==(60);
  if (!($6)) {
   $error$0 = 3;
   STACKTOP = sp;return ($error$0|0);
  }
  $7 = ((($0)) + 1|0);
  HEAP32[$cur>>2] = $7;
  $8 = HEAP32[$1>>2]|0;
  $9 = (_PS_Conv_ASCIIHexDecode($cur,$8,$bytes,$max_bytes)|0);
  HEAP32[$pnum_bytes>>2] = $9;
  $10 = HEAP32[$cur>>2]|0;
  $11 = HEAP32[$1>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  if ($12) {
   $13 = HEAP8[$10>>0]|0;
   $14 = ($13<<24>>24)==(62);
   if (!($14)) {
    $error$0 = 3;
    STACKTOP = sp;return ($error$0|0);
   }
  }
  $15 = HEAP32[$cur>>2]|0;
  $16 = ((($15)) + 1|0);
  HEAP32[$cur>>2] = $16;
 }
 $18 = HEAP32[$cur>>2]|0;
 HEAP32[$parser>>2] = $18;
 $error$0 = 0;
 STACKTOP = sp;return ($error$0|0);
}
function _ps_parser_to_fixed($parser,$power_ten) {
 $parser = $parser|0;
 $power_ten = $power_ten|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _ps_parser_skip_spaces($parser);
 $0 = ((($parser)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_PS_Conv_ToFixed($parser,$1,$power_ten)|0);
 return ($2|0);
}
function _ps_parser_to_coord_array($parser,$max_coords,$coords) {
 $parser = $parser|0;
 $max_coords = $max_coords|0;
 $coords = $coords|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _ps_parser_skip_spaces($parser);
 $0 = ((($parser)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_ps_tocoordarray($parser,$1,$max_coords,$coords)|0);
 return ($2|0);
}
function _ps_parser_to_fixed_array($parser,$max_values,$values,$power_ten) {
 $parser = $parser|0;
 $max_values = $max_values|0;
 $values = $values|0;
 $power_ten = $power_ten|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _ps_parser_skip_spaces($parser);
 $0 = ((($parser)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_ps_tofixedarray($parser,$1,$max_values,$values,$power_ten)|0);
 return ($2|0);
}
function _ps_parser_init($parser,$base,$limit,$memory) {
 $parser = $parser|0;
 $base = $base|0;
 $limit = $limit|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($parser)) + 4|0);
 HEAP32[$1>>2] = $base;
 $2 = ((($parser)) + 8|0);
 HEAP32[$2>>2] = $limit;
 HEAP32[$parser>>2] = $base;
 $3 = ((($parser)) + 16|0);
 HEAP32[$3>>2] = $memory;
 $4 = ((($parser)) + 20|0);
 dest=$4; src=11152; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _ps_parser_done($parser) {
 $parser = $parser|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _t1_builder_init($builder,$face,$size,$glyph,$hinting) {
 $builder = $builder|0;
 $face = $face|0;
 $size = $size|0;
 $glyph = $glyph|0;
 $hinting = $hinting|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($builder)) + 64|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($builder)) + 68|0);
 HEAP8[$1>>0] = 1;
 $2 = ((($builder)) + 4|0);
 HEAP32[$2>>2] = $face;
 $3 = ((($builder)) + 8|0);
 HEAP32[$3>>2] = $glyph;
 $4 = ((($face)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$builder>>2] = $5;
 $6 = ($glyph|0)==(0|0);
 if (!($6)) {
  $7 = ((($glyph)) + 156|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($builder)) + 12|0);
  HEAP32[$10>>2] = $9;
  $11 = ((($9)) + 20|0);
  $12 = ((($builder)) + 16|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($9)) + 56|0);
  $14 = ((($builder)) + 20|0);
  HEAP32[$14>>2] = $13;
  _FT_GlyphLoader_Rewind($9);
  $15 = ((($size)) + 40|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($builder)) + 76|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($builder)) + 72|0);
  HEAP32[$18>>2] = 0;
  $19 = ($hinting<<24>>24)==(0);
  if (!($19)) {
   $20 = HEAP32[$7>>2]|0;
   $21 = ((($20)) + 36|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$18>>2] = $22;
  }
 }
 $23 = ((($builder)) + 24|0);
 $24 = ((($builder)) + 80|0);
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;HEAP32[$23+12>>2]=0|0;HEAP32[$23+16>>2]=0|0;HEAP32[$23+20>>2]=0|0;
 ;HEAP32[$24>>2]=HEAP32[11204>>2]|0;HEAP32[$24+4>>2]=HEAP32[11204+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[11204+8>>2]|0;HEAP32[$24+12>>2]=HEAP32[11204+12>>2]|0;HEAP32[$24+16>>2]=HEAP32[11204+16>>2]|0;HEAP32[$24+20>>2]=HEAP32[11204+20>>2]|0;HEAP32[$24+24>>2]=HEAP32[11204+24>>2]|0;HEAP32[$24+28>>2]=HEAP32[11204+28>>2]|0;
 return;
}
function _t1_builder_done($builder) {
 $builder = $builder|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($builder)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($1)) + 108|0);
 $4 = ((($builder)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 ;HEAP32[$3>>2]=HEAP32[$5>>2]|0;HEAP32[$3+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$5+16>>2]|0;
 return;
}
function _t1_builder_check_points($builder,$count) {
 $builder = $builder|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($count|0)==(0);
 if ($0) {
  $15 = 0;
  return ($15|0);
 }
 $1 = ((($builder)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 22|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = ((($2)) + 58|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($5) + ($count))|0;
 $10 = (($9) + ($8))|0;
 $11 = ((($2)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if (!($13)) {
  $15 = 0;
  return ($15|0);
 }
 $14 = (_FT_GlyphLoader_CheckPoints($2,$count,0)|0);
 $15 = $14;
 return ($15|0);
}
function _t1_builder_add_point($builder,$x,$y,$flag) {
 $builder = $builder|0;
 $x = $x|0;
 $y = $y|0;
 $flag = $flag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($builder)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($builder)) + 68|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $21 = ((($1)) + 2|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = (($22) + 1)<<16>>16;
  HEAP16[$21>>1] = $23;
  return;
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 2|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 << 16 >> 16;
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9)|0);
 $13 = (_FT_RoundFix($x)|0);
 $14 = $13 >> 16;
 $15 = (($6) + ($9<<3)|0);
 HEAP32[$15>>2] = $14;
 $16 = (_FT_RoundFix($y)|0);
 $17 = $16 >> 16;
 $18 = (((($6) + ($9<<3)|0)) + 4|0);
 HEAP32[$18>>2] = $17;
 $19 = ($flag<<24>>24)!=(0);
 $20 = $19 ? 1 : 2;
 HEAP8[$12>>0] = $20;
 $21 = ((($1)) + 2|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = (($22) + 1)<<16>>16;
 HEAP16[$21>>1] = $23;
 return;
}
function _t1_builder_add_point1($builder,$x,$y) {
 $builder = $builder|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_t1_builder_check_points($builder,1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  return ($0|0);
 }
 _t1_builder_add_point($builder,$x,$y,1);
 return ($0|0);
}
function _t1_builder_add_contour($builder) {
 $builder = $builder|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($builder)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 3;
  return ($$0|0);
 }
 $3 = ((($builder)) + 68|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = HEAP16[$1>>1]|0;
  $7 = (($6) + 1)<<16>>16;
  HEAP16[$1>>1] = $7;
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($builder)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = ((($9)) + 56|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14 << 16 >> 16;
 $16 = (($12) + 1)|0;
 $17 = (($16) + ($15))|0;
 $18 = ((($9)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17>>>0)>($19>>>0);
 if ($20) {
  $21 = (_FT_GlyphLoader_CheckPoints($9,0,1)|0);
  $22 = ($21|0)==(0);
  if (!($22)) {
   $$0 = $21;
   return ($$0|0);
  }
 }
 $23 = HEAP16[$1>>1]|0;
 $24 = ($23<<16>>16)>(0);
 if ($24) {
  $25 = $23 << 16 >> 16;
  $26 = ((($1)) + 2|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27&65535;
  $29 = (($28) + 65535)|0;
  $30 = $29&65535;
  $31 = (($25) + -1)|0;
  $32 = ((($1)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($31<<1)|0);
  HEAP16[$34>>1] = $30;
 }
 $35 = HEAP16[$1>>1]|0;
 $36 = (($35) + 1)<<16>>16;
 HEAP16[$1>>1] = $36;
 $$0 = 0;
 return ($$0|0);
}
function _t1_builder_start_point($builder,$x,$y) {
 $builder = $builder|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($builder)) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if ($2) {
  $error$0 = 0;
  return ($error$0|0);
 }
 HEAP32[$0>>2] = 3;
 $3 = (_t1_builder_add_contour($builder)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $error$0 = $3;
  return ($error$0|0);
 }
 $5 = (_t1_builder_add_point1($builder,$x,$y)|0);
 $error$0 = $5;
 return ($error$0|0);
}
function _t1_builder_close_contour($builder) {
 $builder = $builder|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($builder)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP16[$1>>1]|0;
 $4 = ($3<<16>>16)<(2);
 if ($4) {
  $23 = 0;
 } else {
  $5 = $3 << 16 >> 16;
  $6 = (($5) + -2)|0;
  $7 = ((($1)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($6<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 << 16 >> 16;
  $12 = (($11) + 1)|0;
  $23 = $12;
 }
 $13 = ((($1)) + 2|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = ($14<<16>>16)>(1);
 if ($15) {
  $16 = $14 << 16 >> 16;
  $17 = ((($1)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $$sum = (($16) + -1)|0;
  $19 = ((($1)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($$sum)|0);
  $22 = (($18) + ($23<<3)|0);
  $24 = HEAP32[$22>>2]|0;
  $25 = (($18) + ($$sum<<3)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($24|0)==($26|0);
  if ($27) {
   $28 = (((($18) + ($23<<3)|0)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (((($18) + ($$sum<<3)|0)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($29|0)==($31|0);
   if ($32) {
    $33 = HEAP8[$21>>0]|0;
    $34 = ($33<<24>>24)==(1);
    if ($34) {
     $35 = (($14) + -1)<<16>>16;
     HEAP16[$13>>1] = $35;
    }
   }
  }
 }
 $36 = HEAP16[$1>>1]|0;
 $37 = $36 << 16 >> 16;
 $38 = ($36<<16>>16)>(0);
 if (!($38)) {
  return;
 }
 $39 = HEAP16[$13>>1]|0;
 $40 = $39 << 16 >> 16;
 $41 = (($40) + -1)|0;
 $42 = ($23|0)==($41|0);
 if ($42) {
  $43 = (($36) + -1)<<16>>16;
  HEAP16[$1>>1] = $43;
  $44 = HEAP16[$13>>1]|0;
  $45 = (($44) + -1)<<16>>16;
  HEAP16[$13>>1] = $45;
  return;
 } else {
  $46 = $41&65535;
  $47 = (($37) + -1)|0;
  $48 = ((($1)) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($47<<1)|0);
  HEAP16[$50>>1] = $46;
  return;
 }
}
function _t1_decrypt($buffer,$length,$seed) {
 $buffer = $buffer|0;
 $length = $length|0;
 $seed = $seed|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 $1 = sp + 4|0;
 HEAP32[$0>>2] = $buffer;
 HEAP16[$1>>1] = $seed;
 $2 = (($buffer) + ($length)|0);
 (_PS_Conv_EexecDecode($0,$2,$buffer,$length,$1)|0);
 STACKTOP = sp;return;
}
function _reallocate_t1_table($table,$new_size) {
 $table = $table|0;
 $new_size = $new_size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($table)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$table>>2]|0;
 $3 = (_ft_mem_alloc($1,$new_size,$error)|0);
 HEAP32[$table>>2] = $3;
 $4 = HEAP32[$error>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  HEAP32[$table>>2] = $2;
  $6 = HEAP32[$error>>2]|0;
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ($2|0)==(0|0);
 if (!($7)) {
  $8 = ((($table)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  _memcpy(($3|0),($2|0),($9|0))|0;
  _shift_elements($table,$2);
  _ft_mem_free($1,$2);
 }
 $10 = ((($table)) + 8|0);
 HEAP32[$10>>2] = $new_size;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _shift_elements($table,$old_base) {
 $table = $table|0;
 $old_base = $old_base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$table>>2]|0;
 $1 = $0;
 $2 = $old_base;
 $3 = (($1) - ($2))|0;
 $4 = ((($table)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($table)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7<<2)|0);
 $9 = ($7|0)>(0);
 if ($9) {
  $offset$01 = $5;
 } else {
  return;
 }
 while(1) {
  $10 = HEAP32[$offset$01>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = (($10) + ($3)|0);
   HEAP32[$offset$01>>2] = $12;
  }
  $13 = ((($offset$01)) + 4|0);
  $14 = ($13>>>0)<($8>>>0);
  if ($14) {
   $offset$01 = $13;
  } else {
   break;
  }
 }
 return;
}
function _skip_spaces($acur,$limit) {
 $acur = $acur|0;
 $limit = $limit|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cur = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur = sp;
 $0 = HEAP32[$acur>>2]|0;
 HEAP32[$cur>>2] = $0;
 $$cast = $0;
 $1 = ($$cast>>>0)<($limit>>>0);
 L1: do {
  if ($1) {
   $3 = $$cast;
   while(1) {
    $2 = HEAP8[$3>>0]|0;
    switch ($2<<24>>24) {
    case 0: case 12: case 9: case 10: case 13: case 32:  {
     break;
    }
    case 37:  {
     _skip_comment($cur,$limit);
     break;
    }
    default: {
     break L1;
    }
    }
    $4 = HEAP32[$cur>>2]|0;
    $5 = ((($4)) + 1|0);
    HEAP32[$cur>>2] = $5;
    $6 = ($5>>>0)<($limit>>>0);
    if ($6) {
     $3 = $5;
    } else {
     break L1;
    }
   }
  }
 } while(0);
 $7 = HEAP32[$cur>>2]|0;
 HEAP32[$acur>>2] = $7;
 STACKTOP = sp;return;
}
function _skip_procedure($acur,$limit) {
 $acur = $acur|0;
 $limit = $limit|0;
 var $$cast = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cur = 0, $embed$05 = 0, $embed$1 = 0, $embed$2 = 0, $error$0$ = 0, $error$03 = 0, $error$06 = 0, $error$06$lcssa = 0, $error$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur = sp;
 $0 = HEAP32[$acur>>2]|0;
 HEAP32[$cur>>2] = $0;
 $$cast = $0;
 $1 = ($$cast>>>0)<($limit>>>0);
 L1: do {
  if ($1) {
   $3 = $$cast;$embed$05 = 0;$error$06 = 0;
   L2: while(1) {
    $2 = HEAP8[$3>>0]|0;
    $4 = $2&255;
    switch ($4|0) {
    case 123:  {
     $5 = (($embed$05) + 1)|0;
     $embed$1 = $5;$error$1 = $error$06;
     break;
    }
    case 125:  {
     $6 = (($embed$05) + -1)|0;
     $7 = ($6|0)==(0);
     if ($7) {
      $$lcssa = $3;$error$06$lcssa = $error$06;
      break L2;
     } else {
      $embed$1 = $6;$error$1 = $error$06;
     }
     break;
    }
    case 40:  {
     $9 = (_skip_literal_string($cur,$limit)|0);
     $embed$1 = $embed$05;$error$1 = $9;
     break;
    }
    case 60:  {
     $10 = (_skip_string($cur,$limit)|0);
     $embed$1 = $embed$05;$error$1 = $10;
     break;
    }
    case 37:  {
     _skip_comment($cur,$limit);
     $embed$1 = $embed$05;$error$1 = $error$06;
     break;
    }
    default: {
     $embed$1 = $embed$05;$error$1 = $error$06;
    }
    }
    $11 = HEAP32[$cur>>2]|0;
    $12 = ((($11)) + 1|0);
    HEAP32[$cur>>2] = $12;
    $13 = ($12>>>0)<($limit>>>0);
    $14 = ($error$1|0)==(0);
    $15 = $14 & $13;
    if ($15) {
     $3 = $12;$embed$05 = $embed$1;$error$06 = $error$1;
    } else {
     $embed$2 = $embed$1;$error$03 = $error$1;
     break L1;
    }
   }
   $8 = ((($$lcssa)) + 1|0);
   HEAP32[$cur>>2] = $8;
   $embed$2 = 0;$error$03 = $error$06$lcssa;
  } else {
   $embed$2 = 0;$error$03 = 0;
  }
 } while(0);
 $16 = ($embed$2|0)==(0);
 $error$0$ = $16 ? $error$03 : 3;
 $17 = HEAP32[$cur>>2]|0;
 HEAP32[$acur>>2] = $17;
 STACKTOP = sp;return ($error$0$|0);
}
function _skip_literal_string($acur,$limit) {
 $acur = $acur|0;
 $limit = $limit|0;
 var $$lcssa = 0, $$lcssa32 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur$0$be = 0, $cur$0$ph15 = 0, $cur$09 = 0, $cur$16 = 0, $cur$2 = 0, $embed$0$ph$be = 0, $embed$0$ph14 = 0, $error$0 = 0, $i$05 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$acur>>2]|0;
 $1 = ($0>>>0)<($limit>>>0);
 L1: do {
  if ($1) {
   $cur$0$ph15 = $0;$embed$0$ph14 = 0;
   while(1) {
    $cur$09 = $cur$0$ph15;
    L4: while(1) {
     $2 = HEAP8[$cur$09>>0]|0;
     $3 = ((($cur$09)) + 1|0);
     L6: do {
      switch ($2<<24>>24) {
      case 40:  {
       $$lcssa = $3;
       label = 11;
       break L4;
       break;
      }
      case 41:  {
       $$lcssa32 = $3;
       label = 13;
       break L4;
       break;
      }
      case 92:  {
       $4 = ($3|0)==($limit|0);
       if ($4) {
        $cur$2 = $3;$error$0 = 3;
        break L1;
       }
       $5 = HEAP8[$3>>0]|0;
       $6 = $5&255;
       switch ($6|0) {
       case 41: case 40: case 92: case 102: case 98: case 116: case 114: case 110:  {
        $8 = ((($cur$09)) + 2|0);
        $cur$0$be = $8;
        break L6;
        break;
       }
       default: {
       }
       }
       $7 = ($3>>>0)<($limit>>>0);
       if ($7) {
        $cur$16 = $3;$i$05 = 0;
        while(1) {
         $10 = HEAP8[$cur$16>>0]|0;
         $11 = $10 & -8;
         $12 = ($11<<24>>24)==(48);
         if (!($12)) {
          $cur$0$be = $cur$16;
          break L6;
         }
         $13 = ((($cur$16)) + 1|0);
         $14 = (($i$05) + 1)|0;
         $15 = ($14>>>0)<(3);
         $16 = ($13>>>0)<($limit>>>0);
         $or$cond = $15 & $16;
         if ($or$cond) {
          $cur$16 = $13;$i$05 = $14;
         } else {
          $cur$0$be = $13;
          break;
         }
        }
       } else {
        $cur$0$be = $3;
       }
       break;
      }
      default: {
       $cur$0$be = $3;
      }
      }
     } while(0);
     $9 = ($cur$0$be>>>0)<($limit>>>0);
     if ($9) {
      $cur$09 = $cur$0$be;
     } else {
      $cur$2 = $cur$0$be;$error$0 = 3;
      break L1;
     }
    }
    if ((label|0) == 11) {
     label = 0;
     $17 = (($embed$0$ph14) + 1)|0;
     $19 = $$lcssa;$embed$0$ph$be = $17;
    }
    else if ((label|0) == 13) {
     label = 0;
     $20 = (($embed$0$ph14) + -1)|0;
     $21 = ($20|0)==(0);
     if ($21) {
      $cur$2 = $$lcssa32;$error$0 = 0;
      break L1;
     } else {
      $19 = $$lcssa32;$embed$0$ph$be = $20;
     }
    }
    $18 = ($19>>>0)<($limit>>>0);
    if ($18) {
     $cur$0$ph15 = $19;$embed$0$ph14 = $embed$0$ph$be;
    } else {
     $cur$2 = $19;$error$0 = 3;
     break;
    }
   }
  } else {
   $cur$2 = $0;$error$0 = 3;
  }
 } while(0);
 HEAP32[$acur>>2] = $cur$2;
 return ($error$0|0);
}
function _skip_string($acur,$limit) {
 $acur = $acur|0;
 $limit = $limit|0;
 var $$cast = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0;
 var $err$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur = sp;
 $0 = HEAP32[$acur>>2]|0;
 $$cast = $0;
 $1 = ((($$cast)) + 1|0);
 HEAP32[$cur>>2] = $1;
 $2 = ($1>>>0)<($limit>>>0);
 L1: do {
  if ($2) {
   while(1) {
    _skip_spaces($cur,$limit);
    $3 = HEAP32[$cur>>2]|0;
    $4 = ($3>>>0)<($limit>>>0);
    if (!($4)) {
     break L1;
    }
    $5 = HEAP8[$3>>0]|0;
    $$off = (($5) + -48)<<24>>24;
    $6 = ($$off&255)<(10);
    if (!($6)) {
     switch ($5<<24>>24) {
     case 65: case 66: case 67: case 68: case 69: case 70: case 97: case 98: case 99: case 100: case 101: case 102:  {
      break;
     }
     default: {
      break L1;
     }
     }
    }
    $7 = HEAP32[$cur>>2]|0;
    $8 = ((($7)) + 1|0);
    HEAP32[$cur>>2] = $8;
    $9 = ($8>>>0)<($limit>>>0);
    if (!($9)) {
     break;
    }
   }
  }
 } while(0);
 $10 = HEAP32[$cur>>2]|0;
 $11 = ($10>>>0)<($limit>>>0);
 if ($11) {
  $12 = HEAP8[$10>>0]|0;
  $13 = ($12<<24>>24)==(62);
  if (!($13)) {
   $err$0 = 3;
   $16 = HEAP32[$cur>>2]|0;
   HEAP32[$acur>>2] = $16;
   STACKTOP = sp;return ($err$0|0);
  }
 }
 $14 = HEAP32[$cur>>2]|0;
 $15 = ((($14)) + 1|0);
 HEAP32[$cur>>2] = $15;
 $err$0 = 0;
 $16 = HEAP32[$cur>>2]|0;
 HEAP32[$acur>>2] = $16;
 STACKTOP = sp;return ($err$0|0);
}
function _ps_tobool($acur,$limit) {
 $acur = $acur|0;
 $limit = $limit|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur$0 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$acur>>2]|0;
 $1 = ((($0)) + 3|0);
 $2 = ($1>>>0)<($limit>>>0);
 if ($2) {
  $3 = HEAP8[$0>>0]|0;
  $4 = ($3<<24>>24)==(116);
  if ($4) {
   $5 = ((($0)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(114);
   if ($7) {
    $8 = ((($0)) + 2|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(117);
    if ($10) {
     $11 = HEAP8[$1>>0]|0;
     $12 = ($11<<24>>24)==(101);
     if ($12) {
      $13 = ((($0)) + 5|0);
      $cur$0 = $13;$result$0 = 1;
     } else {
      label = 7;
     }
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $14 = ((($0)) + 4|0);
  $15 = ($14>>>0)<($limit>>>0);
  if ($15) {
   $16 = HEAP8[$0>>0]|0;
   $17 = ($16<<24>>24)==(102);
   if ($17) {
    $18 = ((($0)) + 1|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = ($19<<24>>24)==(97);
    if ($20) {
     $21 = ((($0)) + 2|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(108);
     if ($23) {
      $24 = HEAP8[$1>>0]|0;
      $25 = ($24<<24>>24)==(115);
      if ($25) {
       $26 = HEAP8[$14>>0]|0;
       $27 = ($26<<24>>24)==(101);
       $28 = ((($0)) + 6|0);
       $$ = $27 ? $28 : $0;
       $cur$0 = $$;$result$0 = 0;
      } else {
       $cur$0 = $0;$result$0 = 0;
      }
     } else {
      $cur$0 = $0;$result$0 = 0;
     }
    } else {
     $cur$0 = $0;$result$0 = 0;
    }
   } else {
    $cur$0 = $0;$result$0 = 0;
   }
  } else {
   $cur$0 = $0;$result$0 = 0;
  }
 }
 HEAP32[$acur>>2] = $cur$0;
 return ($result$0|0);
}
function _ps_tofixedarray($acur,$limit,$max_values,$values,$power_ten) {
 $acur = $acur|0;
 $limit = $limit|0;
 $max_values = $max_values|0;
 $values = $values|0;
 $power_ten = $power_ten|0;
 var $$ = 0, $$dummy = 0, $$lcssa = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0 = 0, $count$0$lcssa6 = 0, $count$1 = 0, $cur = 0, $dummy = 0, $ender$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur = sp + 4|0;
 $dummy = sp;
 $0 = HEAP32[$acur>>2]|0;
 HEAP32[$cur>>2] = $0;
 $1 = ($0>>>0)<($limit>>>0);
 L1: do {
  if ($1) {
   $2 = HEAP8[$0>>0]|0;
   $3 = ($2<<24>>24)==(91);
   $4 = ($2<<24>>24)==(123);
   $$ = $4 ? 125 : 0;
   $ender$0 = $3 ? 93 : $$;
   $5 = ($ender$0<<24>>24)!=(0);
   if ($5) {
    $6 = ((($0)) + 1|0);
    HEAP32[$cur>>2] = $6;
   }
   $7 = ($values|0)!=(0|0);
   $$not = $7 ^ 1;
   $count$0 = 0;
   while(1) {
    $8 = HEAP32[$cur>>2]|0;
    $9 = ($8>>>0)<($limit>>>0);
    if (!($9)) {
     $count$1 = $count$0;
     break L1;
    }
    _skip_spaces($cur,$limit);
    $10 = HEAP32[$cur>>2]|0;
    $11 = ($10>>>0)<($limit>>>0);
    if (!($11)) {
     $count$1 = $count$0;
     break L1;
    }
    $12 = HEAP8[$10>>0]|0;
    $13 = ($12<<24>>24)==($ender$0<<24>>24);
    if ($13) {
     $$lcssa = $10;$count$0$lcssa6 = $count$0;
     break;
    }
    $15 = ($count$0|0)<($max_values|0);
    $or$cond = $15 | $$not;
    if (!($or$cond)) {
     $count$1 = $count$0;
     break L1;
    }
    $16 = (_PS_Conv_ToFixed($cur,$limit,$power_ten)|0);
    $17 = (($values) + ($count$0<<2)|0);
    $$dummy = $7 ? $17 : $dummy;
    HEAP32[$$dummy>>2] = $16;
    $18 = HEAP32[$cur>>2]|0;
    $19 = ($10|0)==($18|0);
    if ($19) {
     $count$1 = -1;
     break L1;
    }
    $20 = (($count$0) + 1)|0;
    if ($5) {
     $count$0 = $20;
    } else {
     $count$1 = $20;
     break L1;
    }
   }
   $14 = ((($$lcssa)) + 1|0);
   HEAP32[$cur>>2] = $14;
   $count$1 = $count$0$lcssa6;
  } else {
   $count$1 = 0;
  }
 } while(0);
 $21 = HEAP32[$cur>>2]|0;
 HEAP32[$acur>>2] = $21;
 STACKTOP = sp;return ($count$1|0);
}
function _ps_tocoordarray($acur,$limit,$max_coords,$coords) {
 $acur = $acur|0;
 $limit = $limit|0;
 $max_coords = $max_coords|0;
 $coords = $coords|0;
 var $$ = 0, $$dummy = 0, $$lcssa = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0 = 0, $count$0$lcssa6 = 0, $count$1 = 0, $cur = 0, $dummy = 0, $ender$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $cur = sp;
 $dummy = sp + 4|0;
 $0 = HEAP32[$acur>>2]|0;
 HEAP32[$cur>>2] = $0;
 $1 = ($0>>>0)<($limit>>>0);
 L1: do {
  if ($1) {
   $2 = HEAP8[$0>>0]|0;
   $3 = ($2<<24>>24)==(91);
   $4 = ($2<<24>>24)==(123);
   $$ = $4 ? 125 : 0;
   $ender$0 = $3 ? 93 : $$;
   $5 = ($ender$0<<24>>24)!=(0);
   if ($5) {
    $6 = ((($0)) + 1|0);
    HEAP32[$cur>>2] = $6;
   }
   $7 = ($coords|0)!=(0|0);
   $$not = $7 ^ 1;
   $count$0 = 0;
   while(1) {
    $8 = HEAP32[$cur>>2]|0;
    $9 = ($8>>>0)<($limit>>>0);
    if (!($9)) {
     $count$1 = $count$0;
     break L1;
    }
    _skip_spaces($cur,$limit);
    $10 = HEAP32[$cur>>2]|0;
    $11 = ($10>>>0)<($limit>>>0);
    if (!($11)) {
     $count$1 = $count$0;
     break L1;
    }
    $12 = HEAP8[$10>>0]|0;
    $13 = ($12<<24>>24)==($ender$0<<24>>24);
    if ($13) {
     $$lcssa = $10;$count$0$lcssa6 = $count$0;
     break;
    }
    $15 = ($count$0|0)<($max_coords|0);
    $or$cond = $15 | $$not;
    if (!($or$cond)) {
     $count$1 = $count$0;
     break L1;
    }
    $16 = (_PS_Conv_ToFixed($cur,$limit,0)|0);
    $17 = $16 >>> 16;
    $18 = $17&65535;
    $19 = (($coords) + ($count$0<<1)|0);
    $$dummy = $7 ? $19 : $dummy;
    HEAP16[$$dummy>>1] = $18;
    $20 = HEAP32[$cur>>2]|0;
    $21 = ($10|0)==($20|0);
    if ($21) {
     $count$1 = -1;
     break L1;
    }
    $22 = (($count$0) + 1)|0;
    if ($5) {
     $count$0 = $22;
    } else {
     $count$1 = $22;
     break L1;
    }
   }
   $14 = ((($$lcssa)) + 1|0);
   HEAP32[$cur>>2] = $14;
   $count$1 = $count$0$lcssa6;
  } else {
   $count$1 = 0;
  }
 } while(0);
 $23 = HEAP32[$cur>>2]|0;
 HEAP32[$acur>>2] = $23;
 STACKTOP = sp;return ($count$1|0);
}
function _skip_comment($acur,$limit) {
 $acur = $acur|0;
 $limit = $limit|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cur$0$lcssa = 0, $cur$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$acur>>2]|0;
 $1 = ($0>>>0)<($limit>>>0);
 L1: do {
  if ($1) {
   $cur$01 = $0;
   while(1) {
    $2 = HEAP8[$cur$01>>0]|0;
    switch ($2<<24>>24) {
    case 10: case 13:  {
     $cur$0$lcssa = $cur$01;
     break L1;
     break;
    }
    default: {
    }
    }
    $3 = ((($cur$01)) + 1|0);
    $4 = ($3>>>0)<($limit>>>0);
    if ($4) {
     $cur$01 = $3;
    } else {
     $cur$0$lcssa = $3;
     break L1;
    }
   }
  } else {
   $cur$0$lcssa = $0;
  }
 } while(0);
 HEAP32[$acur>>2] = $cur$0$lcssa;
 return;
}
function _ps_hinter_init($module) {
 $module = $module|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($module)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($module)) + 12|0);
 (_ps_hints_init($2,$1)|0);
 $3 = ((($module)) + 100|0);
 _psh_globals_funcs_init($3);
 $4 = ((($module)) + 112|0);
 _t1_hints_funcs_init($4);
 HEAP32[$4>>2] = $2;
 $5 = ((($module)) + 140|0);
 _t2_hints_funcs_init($5);
 HEAP32[$5>>2] = $2;
 return 0;
}
function _ps_hinter_done($module) {
 $module = $module|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($module)) + 112|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($module)) + 140|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($module)) + 12|0);
 _ps_hints_done($2);
 return;
}
function _pshinter_get_globals_funcs($module) {
 $module = $module|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($module)) + 100|0);
 return ($0|0);
}
function _pshinter_get_t1_funcs($module) {
 $module = $module|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($module)) + 112|0);
 return ($0|0);
}
function _pshinter_get_t2_funcs($module) {
 $module = $module|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($module)) + 140|0);
 return ($0|0);
}
function _ps_hints_done($hints) {
 $hints = $hints|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$hints>>2]|0;
 $1 = ((($hints)) + 16|0);
 _ps_dimension_done($1,$0);
 $2 = ((($hints)) + 52|0);
 _ps_dimension_done($2,$0);
 $3 = ((($hints)) + 4|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$hints>>2] = 0;
 return;
}
function _ps_hints_init($hints,$memory) {
 $hints = $hints|0;
 $memory = $memory|0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$hints; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$hints>>2] = $memory;
 return 0;
}
function _t1_hints_funcs_init($funcs) {
 $funcs = $funcs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$funcs; stop=dest+24|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $0 = ((($funcs)) + 4|0);
 HEAP32[$0>>2] = 63;
 $1 = ((($funcs)) + 8|0);
 HEAP32[$1>>2] = 152;
 $2 = ((($funcs)) + 12|0);
 HEAP32[$2>>2] = 11;
 $3 = ((($funcs)) + 16|0);
 HEAP32[$3>>2] = 12;
 $4 = ((($funcs)) + 20|0);
 HEAP32[$4>>2] = 22;
 $5 = ((($funcs)) + 24|0);
 HEAP32[$5>>2] = 40;
 return;
}
function _t2_hints_funcs_init($funcs) {
 $funcs = $funcs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$funcs>>2]=0|0;HEAP32[$funcs+4>>2]=0|0;HEAP32[$funcs+8>>2]=0|0;HEAP32[$funcs+12>>2]=0|0;HEAP32[$funcs+16>>2]=0|0;HEAP32[$funcs+20>>2]=0|0;
 $0 = ((($funcs)) + 4|0);
 HEAP32[$0>>2] = 64;
 $1 = ((($funcs)) + 8|0);
 HEAP32[$1>>2] = 152;
 $2 = ((($funcs)) + 12|0);
 HEAP32[$2>>2] = 5;
 $3 = ((($funcs)) + 16|0);
 HEAP32[$3>>2] = 6;
 $4 = ((($funcs)) + 20|0);
 HEAP32[$4>>2] = 13;
 $5 = ((($funcs)) + 24|0);
 HEAP32[$5>>2] = 40;
 return;
}
function _ps_dimension_done($dimension,$memory) {
 $dimension = $dimension|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dimension)) + 24|0);
 _ps_mask_table_done($0,$memory);
 $1 = ((($dimension)) + 12|0);
 _ps_mask_table_done($1,$memory);
 _ps_hint_table_done($dimension,$memory);
 return;
}
function _t1_hints_open($hints) {
 $hints = $hints|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ps_hints_open($hints,1);
 return;
}
function _ps_hints_close($hints,$end_point) {
 $hints = $hints|0;
 $end_point = $end_point|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hints)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $error$0 = $1;
  return ($error$0|0);
 }
 $3 = HEAP32[$hints>>2]|0;
 $4 = ((($hints)) + 16|0);
 $5 = (_ps_dimension_end($4,$end_point,$3)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $error$0 = $5;
  return ($error$0|0);
 }
 $7 = ((($hints)) + 52|0);
 $8 = (_ps_dimension_end($7,$end_point,$3)|0);
 $error$0 = $8;
 return ($error$0|0);
}
function _t1_hints_stem($hints,$dimension,$coords) {
 $hints = $hints|0;
 $dimension = $dimension|0;
 $coords = $coords|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $stems = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $stems = sp;
 $0 = HEAP32[$coords>>2]|0;
 $1 = (_FT_RoundFix($0)|0);
 $2 = $1 >> 16;
 HEAP32[$stems>>2] = $2;
 $3 = ((($coords)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_FT_RoundFix($4)|0);
 $6 = $5 >> 16;
 $7 = ((($stems)) + 4|0);
 HEAP32[$7>>2] = $6;
 _ps_hints_stem($hints,$dimension,1,$stems);
 STACKTOP = sp;return;
}
function _ps_hints_t1stem3($hints,$dimension,$stems) {
 $hints = $hints|0;
 $dimension = $dimension|0;
 $stems = $stems|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $idx = sp;
 $0 = ((($hints)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$hints>>2]|0;
 $4 = ($dimension>>>0)>(1);
 $5 = ($dimension|0)!=(0);
 $6 = $5&1;
 $$0 = $4 ? $6 : $dimension;
 $7 = (((($hints)) + 16|0) + (($$0*36)|0)|0);
 $8 = ((($hints)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = HEAP32[$stems>>2]|0;
  $12 = (_FT_RoundFix($11)|0);
  $13 = $12 >> 16;
  $14 = ((($stems)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_FT_RoundFix($15)|0);
  $17 = $16 >> 16;
  $18 = (_ps_dimension_add_t1stem($7,$13,$17,$3,$idx)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = ((($stems)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (_FT_RoundFix($21)|0);
   $23 = $22 >> 16;
   $24 = ((($stems)) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_FT_RoundFix($25)|0);
   $27 = $26 >> 16;
   $28 = ((($idx)) + 4|0);
   $29 = (_ps_dimension_add_t1stem($7,$23,$27,$3,$28)|0);
   $30 = ($29|0)==(0);
   if ($30) {
    $31 = ((($stems)) + 16|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (_FT_RoundFix($32)|0);
    $34 = $33 >> 16;
    $35 = ((($stems)) + 20|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_FT_RoundFix($36)|0);
    $38 = $37 >> 16;
    $39 = ((($idx)) + 8|0);
    $40 = (_ps_dimension_add_t1stem($7,$34,$38,$3,$39)|0);
    $41 = ($40|0)==(0);
    if ($41) {
     $42 = HEAP32[$idx>>2]|0;
     $43 = ((($idx)) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ((($idx)) + 8|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (_ps_dimension_add_counter($7,$42,$44,$46,$3)|0);
     $48 = ($47|0)==(0);
     if ($48) {
      STACKTOP = sp;return;
     } else {
      $error$0 = $47;
     }
    } else {
     $error$0 = $40;
    }
   } else {
    $error$0 = $29;
   }
  } else {
   $error$0 = $18;
  }
 } else {
  $error$0 = 6;
 }
 HEAP32[$0>>2] = $error$0;
 STACKTOP = sp;return;
}
function _ps_hints_t1reset($hints,$end_point) {
 $hints = $hints|0;
 $end_point = $end_point|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hints)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  return;
 }
 $3 = HEAP32[$hints>>2]|0;
 $4 = ((($hints)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 if ($6) {
  $7 = ((($hints)) + 16|0);
  $8 = (_ps_dimension_reset_mask($7,$end_point,$3)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = ((($hints)) + 52|0);
   $11 = (_ps_dimension_reset_mask($10,$end_point,$3)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   } else {
    $error$0 = $11;
   }
  } else {
   $error$0 = $8;
  }
 } else {
  $error$0 = 6;
 }
 HEAP32[$0>>2] = $error$0;
 return;
}
function _t2_hints_open($hints) {
 $hints = $hints|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _ps_hints_open($hints,2);
 return;
}
function _t2_hints_stems($hints,$dimension,$count,$coords) {
 $hints = $hints|0;
 $dimension = $dimension|0;
 $count = $count|0;
 $coords = $coords|0;
 var $$ = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $n$14 = 0, $stems = 0, $total$07 = 0, $y$06 = 0, $y$1$lcssa11 = 0, $y$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $stems = sp;
 $0 = ($count|0)>(0);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $total$07 = $count;$y$06 = 0;
 while(1) {
  $1 = ($total$07|0)>(16);
  $$ = $1 ? 16 : $total$07;
  $2 = $$ << 1;
  $3 = ($$|0)>(0);
  if ($3) {
   $n$02 = 0;$y$11 = $y$06;
   while(1) {
    $5 = (($coords) + ($n$02<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (($6) + ($y$11))|0;
    $8 = (_FT_RoundFix($7)|0);
    $9 = $8 >> 16;
    $10 = (($stems) + ($n$02<<2)|0);
    HEAP32[$10>>2] = $9;
    $11 = (($n$02) + 1)|0;
    $12 = ($11|0)<($2|0);
    if ($12) {
     $n$02 = $11;$y$11 = $7;
    } else {
     $$lcssa = $7;
     break;
    }
   }
   $4 = ($$|0)>(0);
   if ($4) {
    $n$14 = 0;
    while(1) {
     $13 = $n$14 | 1;
     $14 = (($stems) + ($13<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = (($stems) + ($n$14<<2)|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (($15) - ($17))|0;
     HEAP32[$14>>2] = $18;
     $19 = (($n$14) + 2)|0;
     $20 = ($19|0)<($2|0);
     if ($20) {
      $n$14 = $19;
     } else {
      $y$1$lcssa11 = $$lcssa;
      break;
     }
    }
   } else {
    $y$1$lcssa11 = $$lcssa;
   }
  } else {
   $y$1$lcssa11 = $y$06;
  }
  _ps_hints_stem($hints,$dimension,$$,$stems);
  $21 = (($total$07) - ($$))|0;
  $22 = ($21|0)>(0);
  if ($22) {
   $total$07 = $21;$y$06 = $y$1$lcssa11;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _ps_hints_t2mask($hints,$end_point,$bit_count,$bytes) {
 $hints = $hints|0;
 $end_point = $end_point|0;
 $bit_count = $bit_count|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hints)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  return;
 }
 $3 = ((($hints)) + 16|0);
 $4 = HEAP32[$hints>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($hints)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5))|0;
 $9 = ($8|0)==($bit_count|0);
 if (!($9)) {
  return;
 }
 $10 = (_ps_dimension_set_mask_bits($3,$bytes,$7,$5,$end_point,$4)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (_ps_dimension_set_mask_bits($6,$bytes,0,$7,$end_point,$4)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   return;
  } else {
   $error$0 = $12;
  }
 } else {
  $error$0 = $10;
 }
 HEAP32[$0>>2] = $error$0;
 return;
}
function _ps_hints_t2counter($hints,$bit_count,$bytes) {
 $hints = $hints|0;
 $bit_count = $bit_count|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hints)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  return;
 }
 $3 = ((($hints)) + 16|0);
 $4 = HEAP32[$hints>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($hints)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5))|0;
 $9 = ($8|0)==($bit_count|0);
 if (!($9)) {
  return;
 }
 $10 = (_ps_dimension_set_mask_bits($3,$bytes,0,$5,0,$4)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (_ps_dimension_set_mask_bits($6,$bytes,$5,$7,0,$4)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   return;
  } else {
   $error$0 = $12;
  }
 } else {
  $error$0 = $10;
 }
 HEAP32[$0>>2] = $error$0;
 return;
}
function _ps_dimension_set_mask_bits($dim,$source,$source_pos,$source_bits,$end_point,$memory) {
 $dim = $dim|0;
 $source = $source|0;
 $source_pos = $source_pos|0;
 $source_bits = $source_bits|0;
 $end_point = $end_point|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ps_dimension_reset_mask($dim,$end_point,$memory)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $error$0 = $0;
  return ($error$0|0);
 }
 $2 = ((($dim)) + 12|0);
 $3 = (_ps_mask_table_set_bits($2,$source,$source_pos,$source_bits,$memory)|0);
 $error$0 = $3;
 return ($error$0|0);
}
function _ps_dimension_reset_mask($dim,$end_point,$memory) {
 $dim = $dim|0;
 $end_point = $end_point|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $mask = sp;
 _ps_dimension_end_mask($dim,$end_point);
 $0 = ((($dim)) + 12|0);
 $1 = (_ps_mask_table_alloc($0,$memory,$mask)|0);
 STACKTOP = sp;return ($1|0);
}
function _ps_mask_table_set_bits($table,$source,$bit_pos,$bit_count,$memory) {
 $table = $table|0;
 $source = $source|0;
 $bit_pos = $bit_pos|0;
 $bit_count = $bit_count|0;
 $memory = $memory|0;
 var $$ = 0, $$02 = 0, $$1 = 0, $$write$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $mask = 0, $read$03 = 0, $read$1 = 0;
 var $rmask$04 = 0, $rmask$1 = 0, $wmask$06 = 0, $write$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $mask = sp;
 $0 = (_ps_mask_table_last($table,$memory,$mask)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $error$0 = $0;
  STACKTOP = sp;return ($error$0|0);
 }
 $2 = HEAP32[$mask>>2]|0;
 $3 = (_ps_mask_ensure($2,$bit_count,$memory)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $error$0 = $3;
  STACKTOP = sp;return ($error$0|0);
 }
 $5 = HEAP32[$mask>>2]|0;
 HEAP32[$5>>2] = $bit_count;
 $6 = ($bit_count|0)==(0);
 if ($6) {
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 }
 $7 = HEAP32[$mask>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $bit_pos & 7;
 $11 = 128 >>> $10;
 $12 = $bit_pos >>> 3;
 $13 = (($source) + ($12)|0);
 $$02 = $bit_count;$read$03 = $13;$rmask$04 = $11;$wmask$06 = 128;$write$05 = $9;
 while(1) {
  $14 = HEAP8[$write$05>>0]|0;
  $15 = $14&255;
  $16 = $wmask$06 ^ 255;
  $17 = $15 & $16;
  $18 = HEAP8[$read$03>>0]|0;
  $19 = $18&255;
  $20 = $19 & $rmask$04;
  $21 = ($20|0)==(0);
  $22 = $21 ? 0 : $wmask$06;
  $$ = $22 | $17;
  $23 = $$&255;
  HEAP8[$write$05>>0] = $23;
  $24 = $rmask$04 >> 1;
  $25 = ($24|0)==(0);
  $26 = ((($read$03)) + 1|0);
  $read$1 = $25 ? $26 : $read$03;
  $rmask$1 = $25 ? 128 : $24;
  $27 = $wmask$06 >> 1;
  $28 = ($27|0)==(0);
  $29 = ((($write$05)) + 1|0);
  $$write$0 = $28 ? $29 : $write$05;
  $$1 = $28 ? 128 : $27;
  $30 = (($$02) + -1)|0;
  $31 = ($30|0)==(0);
  if ($31) {
   $error$0 = $3;
   break;
  } else {
   $$02 = $30;$read$03 = $read$1;$rmask$04 = $rmask$1;$wmask$06 = $$1;$write$05 = $$write$0;
  }
 }
 STACKTOP = sp;return ($error$0|0);
}
function _ps_mask_table_last($table,$memory,$amask) {
 $table = $table|0;
 $memory = $memory|0;
 $amask = $amask|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $error$0 = 0, $mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $mask = sp;
 $0 = HEAP32[$table>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_ps_mask_table_alloc($table,$memory,$mask)|0);
  $error$0 = $2;
 } else {
  $3 = ((($table)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $$sum = (($0) + -1)|0;
  $5 = (($4) + ($$sum<<4)|0);
  HEAP32[$mask>>2] = $5;
  $error$0 = 0;
 }
 $6 = HEAP32[$mask>>2]|0;
 HEAP32[$amask>>2] = $6;
 STACKTOP = sp;return ($error$0|0);
}
function _ps_mask_ensure($mask,$count,$memory) {
 $mask = $mask|0;
 $count = $count|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($mask)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 7)|0;
 $3 = $2 >>> 3;
 $4 = (($count) + 7)|0;
 $5 = $4 >>> 3;
 HEAP32[$error>>2] = 0;
 $6 = ($5>>>0)>($3>>>0);
 if ($6) {
  $7 = (($5) + 7)|0;
  $8 = $7 & 1073741816;
  $9 = ((($mask)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_ft_mem_realloc($memory,1,$3,$8,$10,$error)|0);
  HEAP32[$9>>2] = $11;
  $12 = HEAP32[$error>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = $8 << 3;
   HEAP32[$0>>2] = $14;
  }
 }
 $15 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function _ps_mask_table_alloc($table,$memory,$amask) {
 $table = $table|0;
 $memory = $memory|0;
 $amask = $amask|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$1 = 0, $mask$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$table>>2]|0;
 $1 = (($0) + 1)|0;
 $2 = ((($table)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = (_ps_mask_table_ensure($table,$1,$memory)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $error$1 = $5;$mask$0 = 0;
   HEAP32[$amask>>2] = $mask$0;
   return ($error$1|0);
  }
 }
 $7 = ((($table)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($0<<4)|0);
 HEAP32[$9>>2] = 0;
 $10 = (((($8) + ($0<<4)|0)) + 12|0);
 HEAP32[$10>>2] = 0;
 HEAP32[$table>>2] = $1;
 $error$1 = 0;$mask$0 = $9;
 HEAP32[$amask>>2] = $mask$0;
 return ($error$1|0);
}
function _ps_mask_table_ensure($table,$count,$memory) {
 $table = $table|0;
 $count = $count|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($table)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = ($1>>>0)<($count>>>0);
 if ($2) {
  $3 = (($count) + 7)|0;
  $4 = $3 & -8;
  $5 = ((($table)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_ft_mem_realloc($memory,16,$1,$4,$6,$error)|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP32[$error>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   HEAP32[$0>>2] = $4;
  }
 }
 $10 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($10|0);
}
function _ps_dimension_end_mask($dim,$end_point) {
 $dim = $dim|0;
 $end_point = $end_point|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($dim)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = ((($dim)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($1) + -1)|0;
 $5 = (((($4) + ($$sum<<4)|0)) + 12|0);
 HEAP32[$5>>2] = $end_point;
 return;
}
function _ps_hints_stem($hints,$dimension,$count,$stems) {
 $hints = $hints|0;
 $dimension = $dimension|0;
 $count = $count|0;
 $stems = $stems|0;
 var $$0 = 0, $$025 = 0, $$034 = 0, $$lcssa = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hints)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  return;
 }
 $3 = ((($hints)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $$off = (($4) + -1)|0;
 $switch = ($$off>>>0)<(2);
 if (!($switch)) {
  return;
 }
 $5 = ($dimension>>>0)>(1);
 $6 = ($dimension|0)!=(0);
 $7 = $6&1;
 $$0 = $5 ? $7 : $dimension;
 $8 = (((($hints)) + 16|0) + (($$0*36)|0)|0);
 $9 = ($count|0)==(0);
 if ($9) {
  return;
 }
 $$025 = $count;$$034 = $stems;
 while(1) {
  $10 = HEAP32[$hints>>2]|0;
  $11 = HEAP32[$$034>>2]|0;
  $12 = ((($$034)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_ps_dimension_add_t1stem($8,$11,$13,$10,0)|0);
  $15 = ($14|0)==(0);
  if (!($15)) {
   $$lcssa = $14;
   break;
  }
  $16 = (($$025) + -1)|0;
  $17 = ((($$034)) + 8|0);
  $18 = ($16|0)==(0);
  if ($18) {
   label = 8;
   break;
  } else {
   $$025 = $16;$$034 = $17;
  }
 }
 if ((label|0) == 8) {
  return;
 }
 HEAP32[$0>>2] = $$lcssa;
 return;
}
function _ps_dimension_add_t1stem($dim,$pos,$len,$memory,$aindex) {
 $dim = $dim|0;
 $pos = $pos|0;
 $len = $len|0;
 $memory = $memory|0;
 $aindex = $aindex|0;
 var $$ = 0, $$02 = 0, $$1 = 0, $$pos = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $flags$1 = 0, $hint = 0, $idx$0$lcssa = 0, $idx$05 = 0;
 var $idx$06 = 0, $mask = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $mask = sp + 4|0;
 $hint = sp;
 $0 = ($len|0)<(0);
 if ($0) {
  $1 = ($len|0)==(-21);
  $$ = $1 ? 3 : 1;
  $2 = $1 ? -21 : 0;
  $$pos = (($2) + ($pos))|0;
  $$02 = 0;$$1 = $$pos;$flags$1 = $$;
 } else {
  $$02 = $len;$$1 = $pos;$flags$1 = 0;
 }
 $3 = ($aindex|0)!=(0|0);
 if ($3) {
  HEAP32[$aindex>>2] = -1;
 }
 $4 = HEAP32[$dim>>2]|0;
 $5 = ((($dim)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$hint>>2] = $6;
 $7 = ($4|0)==(0);
 L7: do {
  if ($7) {
   $idx$0$lcssa = 0;
   label = 9;
  } else {
   $idx$06 = 0;
   while(1) {
    $8 = HEAP32[$hint>>2]|0;
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9|0)==($$1|0);
    if ($10) {
     $11 = ((($8)) + 4|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ($12|0)==($$02|0);
     if ($13) {
      $idx$05 = $idx$06;
      break L7;
     }
    }
    $14 = (($idx$06) + 1)|0;
    $15 = HEAP32[$hint>>2]|0;
    $16 = ((($15)) + 12|0);
    HEAP32[$hint>>2] = $16;
    $17 = ($14>>>0)<($4>>>0);
    if ($17) {
     $idx$06 = $14;
    } else {
     $idx$0$lcssa = $14;
     label = 9;
     break;
    }
   }
  }
 } while(0);
 do {
  if ((label|0) == 9) {
   $18 = (_ps_hint_table_alloc($dim,$memory,$hint)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $20 = HEAP32[$hint>>2]|0;
    HEAP32[$20>>2] = $$1;
    $21 = HEAP32[$hint>>2]|0;
    $22 = ((($21)) + 4|0);
    HEAP32[$22>>2] = $$02;
    $23 = HEAP32[$hint>>2]|0;
    $24 = ((($23)) + 8|0);
    HEAP32[$24>>2] = $flags$1;
    $idx$05 = $idx$0$lcssa;
    break;
   } else {
    $error$0 = $18;
    STACKTOP = sp;return ($error$0|0);
   }
  }
 } while(0);
 $25 = ((($dim)) + 12|0);
 $26 = (_ps_mask_table_last($25,$memory,$mask)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  $error$0 = $26;
  STACKTOP = sp;return ($error$0|0);
 }
 $28 = HEAP32[$mask>>2]|0;
 $29 = (_ps_mask_set_bit($28,$idx$05,$memory)|0);
 $30 = ($29|0)==(0);
 $or$cond = $3 & $30;
 if (!($or$cond)) {
  $error$0 = $29;
  STACKTOP = sp;return ($error$0|0);
 }
 HEAP32[$aindex>>2] = $idx$05;
 $error$0 = $29;
 STACKTOP = sp;return ($error$0|0);
}
function _ps_hint_table_alloc($table,$memory,$ahint) {
 $table = $table|0;
 $memory = $memory|0;
 $ahint = $ahint|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$1 = 0, $hint$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$table>>2]|0;
 $1 = (($0) + 1)|0;
 $2 = ((($table)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if (!($4)) {
  $5 = (_ps_hint_table_ensure($table,$1,$memory)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $error$1 = $5;$hint$0 = 0;
   HEAP32[$ahint>>2] = $hint$0;
   return ($error$1|0);
  }
 }
 $7 = ((($table)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + (($0*12)|0)|0);
 HEAP32[$9>>2] = 0;
 $10 = (((($8) + (($0*12)|0)|0)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = (((($8) + (($0*12)|0)|0)) + 8|0);
 HEAP32[$11>>2] = 0;
 HEAP32[$table>>2] = $1;
 $error$1 = 0;$hint$0 = $9;
 HEAP32[$ahint>>2] = $hint$0;
 return ($error$1|0);
}
function _ps_mask_set_bit($mask,$idx,$memory) {
 $mask = $mask|0;
 $idx = $idx|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($idx|0)<(0);
 if ($0) {
  $error$1 = 0;
  return ($error$1|0);
 }
 $1 = HEAP32[$mask>>2]|0;
 $2 = ($1>>>0)>($idx>>>0);
 do {
  if (!($2)) {
   $3 = (($idx) + 1)|0;
   $4 = (_ps_mask_ensure($mask,$3,$memory)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    HEAP32[$mask>>2] = $3;
    break;
   } else {
    $error$1 = $4;
    return ($error$1|0);
   }
  }
 } while(0);
 $6 = ((($mask)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $idx >> 3;
 $9 = (($7) + ($8)|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $idx & 7;
 $13 = 128 >>> $12;
 $14 = $11 | $13;
 $15 = $14&255;
 HEAP8[$9>>0] = $15;
 $error$1 = 0;
 return ($error$1|0);
}
function _ps_hint_table_ensure($table,$count,$memory) {
 $table = $table|0;
 $count = $count|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($table)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = ($1>>>0)<($count>>>0);
 if ($2) {
  $3 = (($count) + 7)|0;
  $4 = $3 & -8;
  $5 = ((($table)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_ft_mem_realloc($memory,12,$1,$4,$6,$error)|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP32[$error>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   HEAP32[$0>>2] = $4;
  }
 }
 $10 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($10|0);
}
function _ps_hints_open($hints,$hint_type) {
 $hints = $hints|0;
 $hint_type = $hint_type|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$off = (($hint_type) + -1)|0;
 $switch = ($$off>>>0)<(2);
 $0 = ((($hints)) + 4|0);
 if ($switch) {
  HEAP32[$0>>2] = 0;
  $1 = ((($hints)) + 12|0);
  HEAP32[$1>>2] = $hint_type;
  $2 = ((($hints)) + 16|0);
  _ps_dimension_init($2);
  $3 = ((($hints)) + 52|0);
  _ps_dimension_init($3);
  return;
 } else {
  HEAP32[$0>>2] = 6;
  $4 = ((($hints)) + 12|0);
  HEAP32[$4>>2] = $hint_type;
  return;
 }
}
function _ps_dimension_init($dimension) {
 $dimension = $dimension|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$dimension>>2] = 0;
 $0 = ((($dimension)) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($dimension)) + 24|0);
 HEAP32[$1>>2] = 0;
 return;
}
function _ps_dimension_add_counter($dim,$hint1,$hint2,$hint3,$memory) {
 $dim = $dim|0;
 $hint1 = $hint1|0;
 $hint2 = $hint2|0;
 $hint3 = $hint3|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond1 = 0, $count$02 = 0, $counter = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $counter = sp;
 $0 = ((($dim)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($dim)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$counter>>2] = $3;
 $cond1 = ($1|0)==(0);
 L1: do {
  if ($cond1) {
   label = 6;
  } else {
   $count$02 = $1;
   while(1) {
    $4 = HEAP32[$counter>>2]|0;
    $5 = (_ps_mask_test_bit($4,$hint1)|0);
    $6 = ($5|0)==(0);
    if (!($6)) {
     break L1;
    }
    $7 = (_ps_mask_test_bit($4,$hint2)|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     break L1;
    }
    $9 = (_ps_mask_test_bit($4,$hint3)|0);
    $10 = ($9|0)==(0);
    if (!($10)) {
     break L1;
    }
    $11 = (($count$02) + -1)|0;
    $12 = ((($4)) + 16|0);
    HEAP32[$counter>>2] = $12;
    $cond = ($11|0)==(0);
    if ($cond) {
     label = 6;
     break;
    } else {
     $count$02 = $11;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $13 = (_ps_mask_table_alloc($0,$memory,$counter)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   $error$0 = $13;
   STACKTOP = sp;return ($error$0|0);
  }
 }
 $15 = HEAP32[$counter>>2]|0;
 $16 = (_ps_mask_set_bit($15,$hint1,$memory)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  $error$0 = $16;
  STACKTOP = sp;return ($error$0|0);
 }
 $18 = HEAP32[$counter>>2]|0;
 $19 = (_ps_mask_set_bit($18,$hint2,$memory)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  $error$0 = $19;
  STACKTOP = sp;return ($error$0|0);
 }
 $21 = HEAP32[$counter>>2]|0;
 $22 = (_ps_mask_set_bit($21,$hint3,$memory)|0);
 $error$0 = $22;
 STACKTOP = sp;return ($error$0|0);
}
function _ps_mask_test_bit($mask,$idx) {
 $mask = $mask|0;
 $idx = $idx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$mask>>2]|0;
 $1 = ($0>>>0)>($idx>>>0);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = $idx >> 3;
 $3 = ((($mask)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $idx & 7;
 $9 = 128 >>> $8;
 $10 = $7 & $9;
 $$0 = $10;
 return ($$0|0);
}
function _ps_dimension_end($dim,$end_point,$memory) {
 $dim = $dim|0;
 $end_point = $end_point|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _ps_dimension_end_mask($dim,$end_point);
 $0 = ((($dim)) + 24|0);
 $1 = (_ps_mask_table_merge_all($0,$memory)|0);
 return ($1|0);
}
function _ps_mask_table_merge_all($table,$memory) {
 $table = $table|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$2 = 0, $index1$0 = 0, $index1$0$in4 = 0, $index1$0$in4$phi = 0, $index1$03 = 0, $index1$05 = 0, $index2$02 = 0, $index2$02$lcssa = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$table>>2]|0;
 $index1$03 = (($0) + -1)|0;
 $1 = ($index1$03|0)>(0);
 if ($1) {
  $index1$0$in4 = $0;$index1$05 = $index1$03;
 } else {
  $error$2 = 0;
  return ($error$2|0);
 }
 L3: while(1) {
  $2 = (($index1$0$in4) + -2)|0;
  $3 = ($2|0)>(-1);
  L5: do {
   if ($3) {
    $index2$02 = $2;
    while(1) {
     $4 = (_ps_mask_table_test_intersect($table,$index1$05,$index2$02)|0);
     $5 = ($4|0)==(0);
     if (!($5)) {
      $index2$02$lcssa = $index2$02;
      break;
     }
     $9 = (($index2$02) + -1)|0;
     $10 = ($index2$02|0)>(0);
     if ($10) {
      $index2$02 = $9;
     } else {
      break L5;
     }
    }
    $6 = (_ps_mask_table_merge($table,$index2$02$lcssa,$index1$05,$memory)|0);
    $7 = ($6|0)==(0);
    if (!($7)) {
     $error$2 = $6;
     label = 7;
     break L3;
    }
   }
  } while(0);
  $index1$0 = (($index1$05) + -1)|0;
  $8 = ($index1$0|0)>(0);
  if ($8) {
   $index1$0$in4$phi = $index1$05;$index1$05 = $index1$0;$index1$0$in4 = $index1$0$in4$phi;
  } else {
   $error$2 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($error$2|0);
 }
 return (0)|0;
}
function _ps_mask_table_test_intersect($table,$index1,$index2) {
 $table = $table|0;
 $index1 = $index1|0;
 $index2 = $index2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0$lcssa = 0, $count$06 = 0, $p1$0$lcssa = 0, $p1$05 = 0, $p2$0$lcssa = 0, $p2$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((($1) + ($index1<<4)|0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (((($1) + ($index2<<4)|0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + ($index1<<4)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($1) + ($index2<<4)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)<=($9>>>0);
 $11 = $10 ? $7 : $9;
 $12 = ($11>>>0)>(7);
 L1: do {
  if ($12) {
   $count$06 = $11;$p1$05 = $3;$p2$04 = $5;
   while(1) {
    $13 = HEAP8[$p1$05>>0]|0;
    $14 = HEAP8[$p2$04>>0]|0;
    $15 = $14 & $13;
    $16 = ($15<<24>>24)==(0);
    if (!($16)) {
     $$0 = 1;
     break;
    }
    $17 = ((($p1$05)) + 1|0);
    $18 = ((($p2$04)) + 1|0);
    $19 = (($count$06) + -8)|0;
    $20 = ($19>>>0)>(7);
    if ($20) {
     $count$06 = $19;$p1$05 = $17;$p2$04 = $18;
    } else {
     $count$0$lcssa = $19;$p1$0$lcssa = $17;$p2$0$lcssa = $18;
     break L1;
    }
   }
   return ($$0|0);
  } else {
   $count$0$lcssa = $11;$p1$0$lcssa = $3;$p2$0$lcssa = $5;
  }
 } while(0);
 $21 = ($count$0$lcssa|0)==(0);
 if ($21) {
  $$0 = 0;
  return ($$0|0);
 }
 $22 = HEAP8[$p1$0$lcssa>>0]|0;
 $23 = HEAP8[$p2$0$lcssa>>0]|0;
 $24 = $23 & $22;
 $25 = $24&255;
 $26 = 255 >>> $count$0$lcssa;
 $27 = $26 ^ -1;
 $28 = $25 & $27;
 $$0 = $28;
 return ($$0|0);
}
function _ps_mask_table_merge($table,$index1,$index2,$memory) {
 $table = $table|0;
 $index1 = $index1|0;
 $index2 = $index2|0;
 $memory = $memory|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $dummy = 0, $error$0 = 0, $error$1 = 0, $error$2 = 0, $exitcond = 0, $index1$index2 = 0, $index2$index1 = 0, $or$cond = 0, $pos$08 = 0, $pos$15 = 0, $read$06 = 0, $write$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dummy = sp;
 $0 = ($index1|0)>($index2|0);
 $index1$index2 = $0 ? $index1 : $index2;
 $index2$index1 = $0 ? $index2 : $index1;
 $1 = ($index2$index1|0)<($index1$index2|0);
 $2 = ($index2$index1|0)>(-1);
 $or$cond = $1 & $2;
 if (!($or$cond)) {
  $error$2 = 0;
  STACKTOP = sp;return ($error$2|0);
 }
 $3 = HEAP32[$table>>2]|0;
 $4 = ($index1$index2|0)<($3|0);
 if (!($4)) {
  $error$2 = 0;
  STACKTOP = sp;return ($error$2|0);
 }
 $5 = ((($table)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($index2$index1<<4)|0);
 $8 = (($6) + ($index1$index2<<4)|0);
 $9 = HEAP32[$7>>2]|0;
 $10 = HEAP32[$8>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $error$1 = 0;
 } else {
  $12 = ($10>>>0)>($9>>>0);
  if ($12) {
   $13 = (_ps_mask_ensure($7,$10,$memory)|0);
   $14 = ($13|0)==(0);
   if (!($14)) {
    $error$2 = $13;
    STACKTOP = sp;return ($error$2|0);
   }
   $15 = ($9>>>0)<($10>>>0);
   if ($15) {
    $pos$08 = $9;
    while(1) {
     _ps_mask_clear_bit($7,$pos$08);
     $16 = (($pos$08) + 1)|0;
     $exitcond = ($16|0)==($10|0);
     if ($exitcond) {
      $error$0 = $13;
      break;
     } else {
      $pos$08 = $16;
     }
    }
   } else {
    $error$0 = 0;
   }
  } else {
   $error$0 = 0;
  }
  $17 = (($10) + 7)|0;
  $18 = $17 >>> 3;
  $19 = ($18|0)==(0);
  if ($19) {
   $error$1 = $error$0;
  } else {
   $20 = (((($6) + ($index2$index1<<4)|0)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (((($6) + ($index1$index2<<4)|0)) + 8|0);
   $23 = HEAP32[$22>>2]|0;
   $pos$15 = $18;$read$06 = $23;$write$07 = $21;
   while(1) {
    $24 = HEAP8[$write$07>>0]|0;
    $25 = HEAP8[$read$06>>0]|0;
    $26 = $25 | $24;
    HEAP8[$write$07>>0] = $26;
    $27 = ((($write$07)) + 1|0);
    $28 = ((($read$06)) + 1|0);
    $29 = (($pos$15) + -1)|0;
    $30 = ($29|0)==(0);
    if ($30) {
     $error$1 = $error$0;
     break;
    } else {
     $pos$15 = $29;$read$06 = $28;$write$07 = $27;
    }
   }
  }
 }
 HEAP32[$8>>2] = 0;
 $31 = (((($6) + ($index1$index2<<4)|0)) + 12|0);
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$table>>2]|0;
 $33 = (($32) + -1)|0;
 $34 = (($33) - ($index1$index2))|0;
 $35 = ($34|0)>(0);
 if ($35) {
  ;HEAP32[$dummy>>2]=HEAP32[$8>>2]|0;HEAP32[$dummy+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$dummy+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$dummy+12>>2]=HEAP32[$8+12>>2]|0;
  $$sum = (($index1$index2) + 1)|0;
  $36 = (($6) + ($$sum<<4)|0);
  $37 = $34 << 4;
  _memmove(($8|0),($36|0),($37|0))|0;
  $38 = (($6) + ($33<<4)|0);
  ;HEAP32[$38>>2]=HEAP32[$dummy>>2]|0;HEAP32[$38+4>>2]=HEAP32[$dummy+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$dummy+8>>2]|0;HEAP32[$38+12>>2]=HEAP32[$dummy+12>>2]|0;
 }
 $39 = HEAP32[$table>>2]|0;
 $40 = (($39) + -1)|0;
 HEAP32[$table>>2] = $40;
 $error$2 = $error$1;
 STACKTOP = sp;return ($error$2|0);
}
function _ps_mask_clear_bit($mask,$idx) {
 $mask = $mask|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$mask>>2]|0;
 $1 = ($0>>>0)>($idx>>>0);
 if (!($1)) {
  return;
 }
 $2 = ((($mask)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $idx >> 3;
 $5 = (($3) + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $idx & 7;
 $9 = 128 >>> $8;
 $10 = $9 ^ 255;
 $11 = $7 & $10;
 $12 = $11&255;
 HEAP8[$5>>0] = $12;
 return;
}
function _ps_mask_table_done($table,$memory) {
 $table = $table|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $count$01 = 0, $mask$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($table)) + 8|0);
 $3 = ($1|0)==(0);
 if (!($3)) {
  $4 = HEAP32[$2>>2]|0;
  $count$01 = $1;$mask$02 = $4;
  while(1) {
   _ps_mask_done($mask$02,$memory);
   $5 = (($count$01) + -1)|0;
   $6 = ((($mask$02)) + 16|0);
   $7 = ($5|0)==(0);
   if ($7) {
    break;
   } else {
    $count$01 = $5;$mask$02 = $6;
   }
  }
 }
 $8 = HEAP32[$2>>2]|0;
 _ft_mem_free($memory,$8);
 HEAP32[$2>>2] = 0;
 HEAP32[$table>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function _ps_hint_table_done($table,$memory) {
 $table = $table|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 _ft_mem_free($memory,$1);
 HEAP32[$0>>2] = 0;
 HEAP32[$table>>2] = 0;
 $2 = ((($table)) + 4|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _ps_mask_done($mask,$memory) {
 $mask = $mask|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($mask)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 _ft_mem_free($memory,$1);
 ;HEAP32[$mask>>2]=0|0;HEAP32[$mask+4>>2]=0|0;HEAP32[$mask+8>>2]=0|0;HEAP32[$mask+12>>2]=0|0;
 return;
}
function _ps_hints_apply($ps_hints,$outline,$globals,$hint_mode) {
 $ps_hints = $ps_hints|0;
 $outline = $outline|0;
 $globals = $globals|0;
 $hint_mode = $hint_mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dimension$01 = 0, $exitcond = 0, $glyphrec = 0, $or$cond = 0, $rescale$0 = 0, $x_scale$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $glyphrec = sp;
 $0 = ((($outline)) + 2|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP16[$outline>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_psh_glyph_init($glyphrec,$outline,$ps_hints,$globals)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = ((($glyphrec)) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 200|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($8)) + 404|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($globals)) + 412|0);
  $14 = ((($globals)) + 416|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_FT_MulFix($15,$12)|0);
  $17 = (($16) + 32)|0;
  $18 = $17 & -64;
  $19 = ($18|0)==(0);
  $20 = ($16|0)==($18|0);
  $or$cond = $19 | $20;
  if ($or$cond) {
   $rescale$0 = 1;
  } else {
   $21 = (_FT_MulDiv($12,$18,$16)|0);
   $22 = ($18|0)<($16|0);
   $23 = (($10|0) / 50)&-1;
   $24 = $22 ? $23 : 0;
   $x_scale$0 = (($10) - ($24))|0;
   $25 = HEAP32[$7>>2]|0;
   (_psh_globals_set_scale($25,$x_scale$0,$21,0,0)|0);
   $rescale$0 = 0;
  }
  $26 = ((($glyphrec)) + 120|0);
  HEAP8[$26>>0] = 1;
  $27 = ((($glyphrec)) + 121|0);
  HEAP8[$27>>0] = 1;
  $28 = ($hint_mode|0)==(2);
  $29 = $hint_mode & -2;
  $30 = ($29|0)==(2);
  $31 = $30&1;
  $32 = ((($glyphrec)) + 122|0);
  HEAP8[$32>>0] = $31;
  $33 = ($hint_mode|0)==(4);
  $34 = $28 | $33;
  $35 = $34&1;
  $36 = ((($glyphrec)) + 123|0);
  HEAP8[$36>>0] = $35;
  $37 = ($hint_mode|0)!=(1);
  $38 = $37&1;
  $39 = ((($glyphrec)) + 124|0);
  HEAP8[$39>>0] = $38;
  $dimension$01 = 0;
  while(1) {
   _psh_glyph_load_points($glyphrec,$dimension$01);
   _psh_glyph_compute_extrema($glyphrec);
   $40 = (((($glyphrec)) + 28|0) + (($dimension$01*40)|0)|0);
   $41 = HEAP32[$7>>2]|0;
   _psh_hint_table_align_hints($40,$41,$dimension$01,$glyphrec);
   _psh_glyph_find_strong_points($glyphrec,$dimension$01);
   $42 = ($dimension$01|0)==(1);
   if ($42) {
    _psh_glyph_find_blue_points($13,$glyphrec);
   }
   _psh_glyph_interpolate_strong_points($glyphrec,$dimension$01);
   _psh_glyph_interpolate_normal_points($glyphrec,$dimension$01);
   _psh_glyph_interpolate_other_points($glyphrec,$dimension$01);
   _psh_glyph_save_points($glyphrec,$dimension$01);
   if (!($rescale$0)) {
    $43 = HEAP32[$7>>2]|0;
    (_psh_globals_set_scale($43,$10,$12,0,0)|0);
   }
   $44 = (($dimension$01) + 1)|0;
   $exitcond = ($44|0)==(2);
   if ($exitcond) {
    break;
   } else {
    $dimension$01 = $44;
   }
  }
 }
 _psh_glyph_done($glyphrec);
 $$0 = $5;
 STACKTOP = sp;return ($$0|0);
}
function _psh_glyph_init($glyph,$outline,$ps_hints,$globals) {
 $glyph = $glyph|0;
 $outline = $outline|0;
 $ps_hints = $ps_hints|0;
 $globals = $globals|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $contour$08 = 0, $count$04 = 0, $error = 0, $first$010 = 0, $n$09 = 0, $n3$01 = 0, $point$03 = 0, $point2$02 = 0, $sext = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 dest=$glyph; stop=dest+128|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = HEAP32[$globals>>2]|0;
 $1 = ((($glyph)) + 16|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($outline)) + 2|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = (_ft_mem_realloc($0,48,0,$4,0,$error)|0);
 $6 = ((($glyph)) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$error>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $123 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($123|0);
 }
 $9 = HEAP16[$outline>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = (_ft_mem_realloc($0,8,0,$10,0,$error)|0);
 $12 = ((($glyph)) + 12|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$error>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $123 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($123|0);
 }
 $15 = HEAP16[$2>>1]|0;
 $16 = $15 << 16 >> 16;
 HEAP32[$glyph>>2] = $16;
 $17 = HEAP16[$outline>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = ((($glyph)) + 4|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$6>>2]|0;
 $21 = ($17<<16>>16)==(0);
 if (!($21)) {
  $22 = HEAP32[$12>>2]|0;
  $23 = ((($outline)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$19>>2]|0;
  $contour$08 = $22;$first$010 = 0;$n$09 = 0;
  while(1) {
   $26 = (($24) + ($n$09<<1)|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27 << 16 >> 16;
   $29 = (($28) + 1)|0;
   $30 = (($29) - ($first$010))|0;
   $31 = (($20) + (($first$010*48)|0)|0);
   HEAP32[$contour$08>>2] = $31;
   $32 = ((($contour$08)) + 4|0);
   HEAP32[$32>>2] = $30;
   $33 = ($30|0)>(0);
   if ($33) {
    $34 = (($20) + (($28*48)|0)|0);
    HEAP32[$31>>2] = $34;
    $35 = (((($20) + (($first$010*48)|0)|0)) + 8|0);
    HEAP32[$35>>2] = $contour$08;
    $36 = ($30|0)>(1);
    if ($36) {
     $37 = $27 << 16 >> 16;
     $count$04 = $30;$point$03 = $31;
     while(1) {
      $38 = ((($point$03)) + 48|0);
      $39 = ((($point$03)) + 4|0);
      HEAP32[$39>>2] = $38;
      HEAP32[$38>>2] = $point$03;
      $40 = ((($point$03)) + 56|0);
      HEAP32[$40>>2] = $contour$08;
      $41 = (($count$04) + -1)|0;
      $42 = ($41|0)>(1);
      if ($42) {
       $count$04 = $41;$point$03 = $38;
      } else {
       $44 = $37;
       break;
      }
     }
    } else {
     $44 = $first$010;
    }
    $43 = (((($20) + (($44*48)|0)|0)) + 4|0);
    HEAP32[$43>>2] = $31;
   }
   $45 = ((($contour$08)) + 8|0);
   $46 = (($n$09) + 1)|0;
   $47 = ($46>>>0)<($25>>>0);
   if ($47) {
    $contour$08 = $45;$first$010 = $29;$n$09 = $46;
   } else {
    break;
   }
  }
 }
 $48 = HEAP32[$6>>2]|0;
 $49 = ((($outline)) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$glyph>>2]|0;
 $52 = ($51|0)==(0);
 if (!($52)) {
  $53 = $48;
  $54 = ((($outline)) + 8|0);
  $n3$01 = 0;$point2$02 = $48;
  while(1) {
   $55 = HEAP32[$point2$02>>2]|0;
   $56 = $55;
   $57 = (($56) - ($53))|0;
   $58 = (($57|0) / 48)&-1;
   $59 = ((($point2$02)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $60;
   $62 = (($61) - ($53))|0;
   $63 = (($62|0) / 48)&-1;
   $64 = HEAP32[$54>>2]|0;
   $65 = (($64) + ($n3$01)|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    $69 = ((($point2$02)) + 12|0);
    HEAP32[$69>>2] = 1;
   }
   $70 = (($50) + ($n3$01<<3)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($50) + ($58<<3)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($71) - ($73))|0;
   $75 = (((($50) + ($n3$01<<3)|0)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (((($50) + ($58<<3)|0)) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($76) - ($78))|0;
   $80 = (_psh_compute_dir($74,$79)|0);
   $81 = $80&255;
   $82 = ((($point2$02)) + 20|0);
   HEAP8[$82>>0] = $81;
   $83 = (($50) + ($63<<3)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = HEAP32[$70>>2]|0;
   $86 = (($84) - ($85))|0;
   $87 = (((($50) + ($63<<3)|0)) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = HEAP32[$75>>2]|0;
   $90 = (($88) - ($89))|0;
   $91 = (_psh_compute_dir($86,$90)|0);
   $92 = $91&255;
   $93 = ((($point2$02)) + 21|0);
   HEAP8[$93>>0] = $92;
   $94 = ((($point2$02)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 & 1;
   $97 = ($96|0)==(0);
   do {
    if ($97) {
     $99 = HEAP8[$82>>0]|0;
     $100 = $99 << 24 >> 24;
     $sext = $91 << 24;
     $101 = $sext >> 24;
     $102 = ($100|0)==($101|0);
     if ($102) {
      $103 = ($101|0)==(4);
      if ($103) {
       $104 = (_ft_corner_is_flat($74,$79,$86,$90)|0);
       $105 = ($104|0)==(0);
       if ($105) {
        break;
       }
      }
      $106 = HEAP32[$94>>2]|0;
      $107 = $106 | 2;
      HEAP32[$94>>2] = $107;
     }
    } else {
     $98 = $95 | 2;
     HEAP32[$94>>2] = $98;
    }
   } while(0);
   $108 = (($n3$01) + 1)|0;
   $109 = ((($point2$02)) + 48|0);
   $110 = HEAP32[$glyph>>2]|0;
   $111 = ($108>>>0)<($110>>>0);
   if ($111) {
    $n3$01 = $108;$point2$02 = $109;
   } else {
    break;
   }
  }
 }
 $112 = ((($glyph)) + 20|0);
 HEAP32[$112>>2] = $outline;
 $113 = ((($glyph)) + 24|0);
 HEAP32[$113>>2] = $globals;
 _psh_glyph_load_points($glyph,0);
 _psh_glyph_compute_inflections($glyph);
 $114 = ((($glyph)) + 28|0);
 $115 = ((($ps_hints)) + 16|0);
 $116 = ((($ps_hints)) + 28|0);
 $117 = (_psh_hint_table_init($114,$115,$116,$0)|0);
 HEAP32[$error>>2] = $117;
 $118 = ($117|0)==(0);
 if (!($118)) {
  $123 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($123|0);
 }
 $119 = ((($glyph)) + 68|0);
 $120 = ((($ps_hints)) + 52|0);
 $121 = ((($ps_hints)) + 64|0);
 $122 = (_psh_hint_table_init($119,$120,$121,$0)|0);
 HEAP32[$error>>2] = $122;
 $123 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($123|0);
}
function _psh_glyph_load_points($glyph,$dimension) {
 $glyph = $glyph|0;
 $dimension = $dimension|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$03 = 0, $point$02 = 0, $vec$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$glyph>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 $2 = ((($glyph)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($glyph)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($dimension|0)==(0);
 $count$03 = $0;$point$02 = $3;$vec$01 = $7;
 while(1) {
  $9 = ((($point$02)) + 16|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($point$02)) + 32|0);
  HEAP32[$10>>2] = 0;
  if ($8) {
   $11 = HEAP32[$vec$01>>2]|0;
   $12 = ((($point$02)) + 36|0);
   HEAP32[$12>>2] = $11;
   $13 = ((($vec$01)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($point$02)) + 40|0);
   HEAP32[$15>>2] = $14;
  } else {
   $16 = ((($vec$01)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($point$02)) + 36|0);
   HEAP32[$18>>2] = $17;
   $19 = HEAP32[$vec$01>>2]|0;
   $20 = ((($point$02)) + 40|0);
   HEAP32[$20>>2] = $19;
  }
  $21 = (($count$03) + -1)|0;
  $22 = ((($point$02)) + 48|0);
  $23 = ((($vec$01)) + 8|0);
  $24 = ($21|0)==(0);
  if ($24) {
   break;
  } else {
   $count$03 = $21;$point$02 = $22;$vec$01 = $23;
  }
 }
 return;
}
function _psh_glyph_compute_extrema($glyph) {
 $glyph = $glyph|0;
 var $$lcssa = 0, $$lcssa52 = 0, $$lcssa53 = 0, $$lcssa54 = 0, $$lcssa55 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $after$0 = 0, $after3$0 = 0, $after3$1 = 0, $before$0 = 0, $before$1 = 0, $before2$0 = 0, $before2$1 = 0, $n$019 = 0, $n$1 = 0, $n$2 = 0, $point$0 = 0;
 var $point$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $n$1 = 0;
  } else {
   $3 = ((($glyph)) + 12|0);
   $4 = HEAP32[$3>>2]|0;
   $n$019 = 0;
   while(1) {
    $5 = (($4) + ($n$019<<3)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (((($4) + ($n$019<<3)|0)) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0);
    L5: do {
     if (!($9)) {
      $10 = ((($6)) + 36|0);
      $before$0 = $6;
      while(1) {
       $11 = HEAP32[$before$0>>2]|0;
       $12 = ($11|0)==($6|0);
       if ($12) {
        $n$2 = $n$019;
        label = 31;
        break L1;
       }
       $13 = ((($11)) + 36|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = HEAP32[$10>>2]|0;
       $16 = ($14|0)==($15|0);
       if ($16) {
        $before$0 = $11;
       } else {
        $$lcssa53 = $11;
        break;
       }
      }
      $17 = ((($$lcssa53)) + 4|0);
      $18 = HEAP32[$17>>2]|0;
      $before$1 = $$lcssa53;$point$0 = $18;
      while(1) {
       $19 = ((($point$0)) + 36|0);
       $after$0 = $point$0;
       while(1) {
        $20 = ((($after$0)) + 4|0);
        $21 = HEAP32[$20>>2]|0;
        $22 = ($21|0)==($18|0);
        if ($22) {
         break L5;
        }
        $23 = ((($21)) + 36|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = HEAP32[$19>>2]|0;
        $26 = ($24|0)==($25|0);
        if ($26) {
         $after$0 = $21;
        } else {
         $$lcssa = $24;$$lcssa54 = $21;$$lcssa55 = $25;
         break;
        }
       }
       $27 = ((($before$1)) + 36|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($28|0)<($$lcssa55|0);
       if ($29) {
        $30 = ($$lcssa|0)<($$lcssa55|0);
        if ($30) {
         $point$1 = $point$0;
         label = 14;
        }
       } else {
        $31 = ($$lcssa|0)>($$lcssa55|0);
        if ($31) {
         $point$1 = $point$0;
         label = 14;
        }
       }
       if ((label|0) == 14) {
        while(1) {
         label = 0;
         $32 = ((($point$1)) + 16|0);
         $33 = HEAP32[$32>>2]|0;
         $34 = $33 | 64;
         HEAP32[$32>>2] = $34;
         $35 = ((($point$1)) + 4|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ($36|0)==($$lcssa54|0);
         if ($37) {
          break;
         } else {
          $point$1 = $36;
          label = 14;
         }
        }
       }
       $38 = HEAP32[$$lcssa54>>2]|0;
       $before$1 = $38;$point$0 = $$lcssa54;
      }
     }
    } while(0);
    $39 = (($n$019) + 1)|0;
    $40 = HEAP32[$0>>2]|0;
    $41 = ($39>>>0)<($40>>>0);
    if ($41) {
     $n$019 = $39;
    } else {
     $n$1 = 0;
     break;
    }
   }
  }
 } while(0);
 L25: while(1) {
  if ((label|0) == 31) {
   label = 0;
   $83 = (($n$2) + 1)|0;
   $n$1 = $83;
  }
  $42 = HEAP32[$glyph>>2]|0;
  $43 = ($n$1>>>0)<($42>>>0);
  if (!($43)) {
   break;
  }
  $44 = ((($glyph)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + (($n$1*48)|0)|0);
  $47 = (((($45) + (($n$1*48)|0)|0)) + 16|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $48 & 64;
  $50 = ($49|0)==(0);
  if ($50) {
   $after3$1 = $46;$before2$1 = $46;
  } else {
   $51 = (((($45) + (($n$1*48)|0)|0)) + 40|0);
   $before2$0 = $46;
   while(1) {
    $52 = HEAP32[$before2$0>>2]|0;
    $53 = ($52|0)==($46|0);
    if ($53) {
     $n$2 = $n$1;
     label = 31;
     continue L25;
    }
    $54 = ((($52)) + 40|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = HEAP32[$51>>2]|0;
    $57 = ($55|0)==($56|0);
    if ($57) {
     $before2$0 = $52;
    } else {
     $$lcssa52 = $52;
     break;
    }
   }
   $after3$0 = $46;
   while(1) {
    $58 = ((($after3$0)) + 4|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)==($46|0);
    if ($60) {
     $n$2 = $n$1;
     label = 31;
     continue L25;
    }
    $61 = ((($59)) + 40|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = HEAP32[$51>>2]|0;
    $64 = ($62|0)==($63|0);
    if ($64) {
     $after3$0 = $59;
    } else {
     $after3$1 = $59;$before2$1 = $$lcssa52;
     break;
    }
   }
  }
  $65 = ((($before2$1)) + 40|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (((($45) + (($n$1*48)|0)|0)) + 40|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($66|0)<($68|0);
  if ($69) {
   $70 = ((($after3$1)) + 40|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)>($68|0);
   if ($72) {
    $73 = HEAP32[$47>>2]|0;
    $74 = $73 | 128;
    HEAP32[$47>>2] = $74;
    $n$2 = $n$1;
    label = 31;
    continue;
   }
  }
  $75 = HEAP32[$65>>2]|0;
  $76 = HEAP32[$67>>2]|0;
  $77 = ($75|0)>($76|0);
  if (!($77)) {
   $n$2 = $n$1;
   label = 31;
   continue;
  }
  $78 = ((($after3$1)) + 40|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ($79|0)<($76|0);
  if (!($80)) {
   $n$2 = $n$1;
   label = 31;
   continue;
  }
  $81 = HEAP32[$47>>2]|0;
  $82 = $81 | 256;
  HEAP32[$47>>2] = $82;
  $n$2 = $n$1;
  label = 31;
 }
 return;
}
function _psh_hint_table_align_hints($table,$globals,$dimension,$glyph) {
 $table = $table|0;
 $globals = $globals|0;
 $dimension = $dimension|0;
 $glyph = $glyph|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $count$02 = 0, $hint$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$table>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 $2 = ((($table)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $count$02 = $0;$hint$01 = $3;
 while(1) {
  _psh_hint_align($hint$01,$globals,$dimension,$glyph);
  $4 = (($count$02) + -1)|0;
  $5 = ((($hint$01)) + 28|0);
  $6 = ($4|0)==(0);
  if ($6) {
   break;
  } else {
   $count$02 = $4;$hint$01 = $5;
  }
 }
 return;
}
function _psh_glyph_find_strong_points($glyph,$dimension) {
 $glyph = $glyph|0;
 $dimension = $dimension|0;
 var $$ = 0, $$1 = 0, $$2 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count3$03 = 0, $first$06 = 0, $mask$09 = 0;
 var $num_masks$07 = 0, $point4$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (((($glyph)) + 28|0) + (($dimension*40)|0)|0);
 $1 = (((((($glyph)) + 28|0) + (($dimension*40)|0)|0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = ($dimension|0)==(0);
 $7 = $6 ? 1 : 2;
 $8 = ((($glyph)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (((((($9)) + 4|0) + (($dimension*204)|0)|0)) + 196|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_FT_DivFix(32,$11)|0);
 $13 = ($12|0)>(30);
 $$ = $13 ? 30 : $12;
 $14 = ($5>>>0)>(1);
 if ($14) {
  $15 = HEAP32[$glyph>>2]|0;
  $16 = ($15|0)==(0);
  if (!($16)) {
   $17 = ((($4)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($18>>>0)>($15>>>0);
   $$1 = $19 ? $15 : $18;
   $20 = ((($glyph)) + 8|0);
   $$pn = $4;$first$06 = $$1;$num_masks$07 = $5;
   while(1) {
    $mask$09 = ((($$pn)) + 16|0);
    $21 = ((($$pn)) + 28|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$glyph>>2]|0;
    $24 = ($22>>>0)>($23>>>0);
    $$2 = $24 ? $23 : $22;
    $25 = (($$2) - ($first$06))|0;
    $26 = ($25|0)>(0);
    if ($26) {
     $27 = HEAP32[$20>>2]|0;
     $28 = (($27) + (($first$06*48)|0)|0);
     _psh_hint_table_activate_mask($0,$mask$09);
     _psh_hint_table_find_strong_points($0,$28,$25,$$,$7);
    }
    $29 = (($num_masks$07) + -1)|0;
    $30 = ($29>>>0)>(1);
    if ($30) {
     $$pn = $mask$09;$first$06 = $$2;$num_masks$07 = $29;
    } else {
     label = 8;
     break;
    }
   }
  }
 } else {
  $31 = ($5|0)==(1);
  if ($31) {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $32 = HEAP32[$glyph>>2]|0;
  $33 = ((($glyph)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$1>>2]|0;
  $36 = ((($35)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  _psh_hint_table_activate_mask($0,$37);
  _psh_hint_table_find_strong_points($0,$34,$32,$$,$7);
 }
 $38 = HEAP32[$glyph>>2]|0;
 $39 = ($38|0)==(0);
 if ($39) {
  return;
 }
 $40 = ((($glyph)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $count3$03 = $38;$point4$04 = $41;
 while(1) {
  $42 = ((($point4$04)) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0|0);
  if (!($44)) {
   $45 = ((($point4$04)) + 16|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $46 & 16;
   $48 = ($47|0)==(0);
   if ($48) {
    $49 = $46 | 16;
    HEAP32[$45>>2] = $49;
   }
  }
  $50 = (($count3$03) + -1)|0;
  $51 = ((($point4$04)) + 48|0);
  $52 = ($50|0)==(0);
  if ($52) {
   break;
  } else {
   $count3$03 = $50;$point4$04 = $51;
  }
 }
 return;
}
function _psh_glyph_find_blue_points($blues,$glyph) {
 $blues = $blues|0;
 $glyph = $glyph|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $blue_count$01 = 0, $blue_count$14 = 0, $glyph_count$011 = 0, $point$09 = 0, $zone$02 = 0;
 var $zone$15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$glyph>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 $2 = ((($glyph)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($blues)) + 4|0);
 $5 = ((($blues)) + 516|0);
 $6 = ((($blues)) + 2076|0);
 $7 = ((($blues)) + 2080|0);
 $8 = ((($blues)) + 2072|0);
 $9 = ((($blues)) + 2076|0);
 $10 = ((($blues)) + 2080|0);
 $11 = ((($blues)) + 2072|0);
 $glyph_count$011 = $0;$point$09 = $3;
 while(1) {
  $12 = ((($point$09)) + 20|0);
  $13 = HEAP8[$12>>0]|0;
  switch ($13<<24>>24) {
  case -2: case 2:  {
   label = 5;
   break;
  }
  default: {
   $14 = ((($point$09)) + 21|0);
   $15 = HEAP8[$14>>0]|0;
   switch ($15<<24>>24) {
   case -2: case 2:  {
    label = 5;
    break;
   }
   default: {
   }
   }
  }
  }
  L8: do {
   if ((label|0) == 5) {
    label = 0;
    $16 = ((($point$09)) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 & 16;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = ((($point$09)) + 36|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = HEAP32[$blues>>2]|0;
     $23 = ($22|0)==(0);
     L11: do {
      if (!($23)) {
       $24 = HEAP32[$9>>2]|0;
       $25 = (0 - ($24))|0;
       $26 = ((($point$09)) + 44|0);
       $blue_count$01 = $22;$zone$02 = $4;
       while(1) {
        $27 = ((($zone$02)) + 12|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = (($21) - ($28))|0;
        $30 = ($29|0)<($25|0);
        if ($30) {
         break L11;
        }
        $31 = ((($zone$02)) + 8|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = (($32) + ($24))|0;
        $34 = ($21|0)>($33|0);
        do {
         if (!($34)) {
          $35 = HEAP8[$10>>0]|0;
          $36 = ($35<<24>>24)==(0);
          if ($36) {
           $37 = HEAP32[$11>>2]|0;
           $38 = ($29|0)>($37|0);
           if ($38) {
            break;
           }
          }
          $39 = ((($zone$02)) + 24|0);
          $40 = HEAP32[$39>>2]|0;
          HEAP32[$26>>2] = $40;
          $41 = HEAP32[$16>>2]|0;
          $42 = $41 | 48;
          HEAP32[$16>>2] = $42;
         }
        } while(0);
        $43 = (($blue_count$01) + -1)|0;
        $44 = ((($zone$02)) + 32|0);
        $45 = ($43|0)==(0);
        if ($45) {
         break;
        } else {
         $blue_count$01 = $43;$zone$02 = $44;
        }
       }
      }
     } while(0);
     $46 = HEAP32[$5>>2]|0;
     $47 = ($46|0)==(0);
     if (!($47)) {
      $$sum = (($46) + -1)|0;
      $48 = (((($blues)) + 520|0) + ($$sum<<5)|0);
      $49 = HEAP32[$6>>2]|0;
      $50 = (0 - ($49))|0;
      $51 = ((($point$09)) + 44|0);
      $blue_count$14 = $46;$zone$15 = $48;
      while(1) {
       $52 = ((($zone$15)) + 8|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (($53) - ($21))|0;
       $55 = ($54|0)<($50|0);
       if ($55) {
        break L8;
       }
       $56 = ((($zone$15)) + 12|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (($57) - ($49))|0;
       $59 = ($21|0)<($58|0);
       do {
        if (!($59)) {
         $60 = HEAP8[$7>>0]|0;
         $61 = ($60<<24>>24)==(0);
         if ($61) {
          $62 = HEAP32[$8>>2]|0;
          $63 = ($54|0)<($62|0);
          if (!($63)) {
           break;
          }
         }
         $64 = ((($zone$15)) + 28|0);
         $65 = HEAP32[$64>>2]|0;
         HEAP32[$51>>2] = $65;
         $66 = HEAP32[$16>>2]|0;
         $67 = $66 | 48;
         HEAP32[$16>>2] = $67;
        }
       } while(0);
       $68 = (($blue_count$14) + -1)|0;
       $69 = ((($zone$15)) + -32|0);
       $70 = ($68|0)==(0);
       if ($70) {
        break;
       } else {
        $blue_count$14 = $68;$zone$15 = $69;
       }
      }
     }
    }
   }
  } while(0);
  $71 = (($glyph_count$011) + -1)|0;
  $72 = ((($point$09)) + 48|0);
  $73 = ($71|0)==(0);
  if ($73) {
   break;
  } else {
   $glyph_count$011 = $71;$point$09 = $72;
  }
 }
 return;
}
function _psh_glyph_interpolate_strong_points($glyph,$dimension) {
 $glyph = $glyph|0;
 $dimension = $dimension|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$02 = 0, $point$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((((($1)) + 4|0) + (($dimension*204)|0)|0)) + 196|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$glyph>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return;
 }
 $6 = ((($glyph)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $count$02 = $4;$point$01 = $7;
 while(1) {
  $8 = ((($point$01)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $11 = ((($point$01)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 & 512;
   $14 = ($13|0)==(0);
   do {
    if ($14) {
     $18 = $12 & 1024;
     $19 = ($18|0)==(0);
     if (!($19)) {
      $20 = ((($9)) + 8|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = ((($9)) + 12|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = (($23) + ($21))|0;
      $25 = ((($point$01)) + 44|0);
      HEAP32[$25>>2] = $24;
      break;
     }
     $26 = ((($point$01)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = HEAP32[$9>>2]|0;
     $29 = (($27) - ($28))|0;
     $30 = ($29|0)<(1);
     if ($30) {
      $31 = ((($9)) + 8|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (_FT_MulFix($29,$3)|0);
      $34 = (($33) + ($32))|0;
      $35 = ((($point$01)) + 44|0);
      HEAP32[$35>>2] = $34;
      break;
     }
     $36 = ((($9)) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($29|0)<($37|0);
     $39 = ((($9)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($9)) + 12|0);
     $42 = HEAP32[$41>>2]|0;
     if ($38) {
      $48 = (_FT_MulDiv($29,$42,$37)|0);
      $49 = (($48) + ($40))|0;
      $50 = ((($point$01)) + 44|0);
      HEAP32[$50>>2] = $49;
      break;
     } else {
      $43 = (($42) + ($40))|0;
      $44 = (($29) - ($37))|0;
      $45 = (_FT_MulFix($44,$3)|0);
      $46 = (($43) + ($45))|0;
      $47 = ((($point$01)) + 44|0);
      HEAP32[$47>>2] = $46;
      break;
     }
    } else {
     $15 = ((($9)) + 8|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ((($point$01)) + 44|0);
     HEAP32[$17>>2] = $16;
    }
   } while(0);
   $51 = HEAP32[$11>>2]|0;
   $52 = $51 | 32;
   HEAP32[$11>>2] = $52;
  }
  $53 = (($count$02) + -1)|0;
  $54 = ((($point$01)) + 48|0);
  $55 = ($53|0)==(0);
  if ($55) {
   break;
  } else {
   $count$02 = $53;$point$01 = $54;
  }
 }
 return;
}
function _psh_glyph_interpolate_normal_points($glyph,$dimension) {
 $glyph = $glyph|0;
 $dimension = $dimension|0;
 var $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0;
 var $insert$0$lcssa = 0, $insert$011 = 0, $nn$0$lcssa = 0, $nn$03 = 0, $nn$1 = 0, $nn$1$lcssa = 0, $num_strongs$0$ = 0, $num_strongs$0$$lcssa = 0, $num_strongs$023 = 0, $num_strongs$218 = 0, $num_strongs$3 = 0, $num_strongs$3$lcssa = 0, $point$024 = 0, $point$119 = 0, $point$26 = 0, $strongs$0 = 0, $strongs_0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $strongs_0 = sp + 8|0;
 $error = sp;
 $0 = ((($glyph)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((((($1)) + 4|0) + (($dimension*204)|0)|0)) + 196|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($glyph)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($glyph)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$glyph>>2]|0;
 $9 = (($7) + (($8*48)|0)|0);
 $10 = ($8|0)>(0);
 if ($10) {
  $num_strongs$023 = 0;$point$024 = $7;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $11 = ((($point$024)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 >>> 4;
  $$lobit = $13 & 1;
  $num_strongs$0$ = (($$lobit) + ($num_strongs$023))|0;
  $14 = ((($point$024)) + 48|0);
  $15 = ($14>>>0)<($9>>>0);
  if ($15) {
   $num_strongs$023 = $num_strongs$0$;$point$024 = $14;
  } else {
   $num_strongs$0$$lcssa = $num_strongs$0$;
   break;
  }
 }
 $16 = ($num_strongs$0$$lcssa|0)==(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $17 = ($num_strongs$0$$lcssa>>>0)<(17);
 if ($17) {
  $strongs$0 = $strongs_0;
 } else {
  $18 = (_ft_mem_realloc($5,4,0,$num_strongs$0$$lcssa,0,$error)|0);
  $19 = HEAP32[$error>>2]|0;
  $20 = ($19|0)==(0);
  if ($20) {
   $strongs$0 = $18;
  } else {
   STACKTOP = sp;return;
  }
 }
 $21 = ($8|0)>(0);
 if ($21) {
  $num_strongs$218 = 0;$point$119 = $7;
  while(1) {
   $24 = ((($point$119)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $25 & 16;
   $27 = ($26|0)==(0);
   if ($27) {
    $num_strongs$3 = $num_strongs$218;
   } else {
    $28 = (($strongs$0) + ($num_strongs$218<<2)|0);
    $29 = ($num_strongs$218|0)>(0);
    L19: do {
     if ($29) {
      $30 = ((($point$119)) + 36|0);
      $31 = HEAP32[$30>>2]|0;
      $insert$011 = $28;
      while(1) {
       $32 = ((($insert$011)) + -4|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = ((($33)) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = ($35|0)>($31|0);
       if (!($36)) {
        $insert$0$lcssa = $insert$011;
        break L19;
       }
       HEAP32[$insert$011>>2] = $33;
       $37 = ($32>>>0)>($strongs$0>>>0);
       if ($37) {
        $insert$011 = $32;
       } else {
        $insert$0$lcssa = $32;
        break;
       }
      }
     } else {
      $insert$0$lcssa = $28;
     }
    } while(0);
    HEAP32[$insert$0$lcssa>>2] = $point$119;
    $38 = (($num_strongs$218) + 1)|0;
    $num_strongs$3 = $38;
   }
   $39 = ((($point$119)) + 48|0);
   $40 = ($39>>>0)<($9>>>0);
   if ($40) {
    $num_strongs$218 = $num_strongs$3;$point$119 = $39;
   } else {
    $num_strongs$3$lcssa = $num_strongs$3;
    break;
   }
  }
  $22 = ($8|0)>(0);
  if ($22) {
   $23 = ($num_strongs$3$lcssa|0)==(0);
   $point$26 = $7;
   while(1) {
    $41 = ((($point$26)) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $42 & 16;
    $44 = ($43|0)==(0);
    do {
     if ($44) {
      $45 = ((($point$26)) + 12|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = $46 & 2;
      $48 = ($47|0)==(0);
      if (!($48)) {
       $49 = ((($point$26)) + 20|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = ($50<<24>>24)==(4);
       if ($51) {
        break;
       }
       $52 = ((($point$26)) + 21|0);
       $53 = HEAP8[$52>>0]|0;
       $54 = ($50<<24>>24)==($53<<24>>24);
       if (!($54)) {
        break;
       }
       $55 = $42 & 64;
       $56 = $46 & 4;
       $57 = $56 | $55;
       $58 = ($57|0)==(0);
       if ($58) {
        break;
       }
       $59 = $46 & -3;
       HEAP32[$45>>2] = $59;
      }
      do {
       if ($23) {
        label = 28;
       } else {
        $60 = ((($point$26)) + 36|0);
        $61 = HEAP32[$60>>2]|0;
        $nn$03 = 0;
        while(1) {
         $62 = (($strongs$0) + ($nn$03<<2)|0);
         $63 = HEAP32[$62>>2]|0;
         $64 = ((($63)) + 36|0);
         $65 = HEAP32[$64>>2]|0;
         $66 = ($65|0)>($61|0);
         if ($66) {
          $nn$0$lcssa = $nn$03;
          break;
         }
         $67 = (($nn$03) + 1)|0;
         $68 = ($67>>>0)<($num_strongs$3$lcssa>>>0);
         if ($68) {
          $nn$03 = $67;
         } else {
          $nn$0$lcssa = $67;
          break;
         }
        }
        $69 = ($nn$0$lcssa|0)==(0);
        if ($69) {
         label = 28;
        } else {
         $81 = (($nn$0$lcssa) + -1)|0;
         $82 = (($strongs$0) + ($81<<2)|0);
         $83 = HEAP32[$82>>2]|0;
         $84 = ((($point$26)) + 36|0);
         $nn$1 = $num_strongs$3$lcssa;
         while(1) {
          $85 = ($nn$1|0)==(0);
          if ($85) {
           $nn$1$lcssa = $nn$1;
           break;
          }
          $86 = (($nn$1) + -1)|0;
          $87 = (($strongs$0) + ($86<<2)|0);
          $88 = HEAP32[$87>>2]|0;
          $89 = ((($88)) + 36|0);
          $90 = HEAP32[$89>>2]|0;
          $91 = HEAP32[$84>>2]|0;
          $92 = ($90|0)<($91|0);
          if ($92) {
           $nn$1$lcssa = $nn$1;
           break;
          } else {
           $nn$1 = $86;
          }
         }
         $93 = ($nn$1$lcssa|0)==($num_strongs$3$lcssa|0);
         if ($93) {
          $94 = (($nn$1$lcssa) + -1)|0;
          $95 = (($strongs$0) + ($94<<2)|0);
          $96 = HEAP32[$95>>2]|0;
          $97 = ((($96)) + 44|0);
          $98 = HEAP32[$97>>2]|0;
          $99 = ((($point$26)) + 36|0);
          $100 = HEAP32[$99>>2]|0;
          $101 = ((($96)) + 36|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = (($100) - ($102))|0;
          $104 = (_FT_MulFix($103,$3)|0);
          $105 = (($104) + ($98))|0;
          $106 = ((($point$26)) + 44|0);
          HEAP32[$106>>2] = $105;
          break;
         }
         $107 = (($strongs$0) + ($nn$1$lcssa<<2)|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = ((($point$26)) + 36|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = ((($83)) + 36|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = ($110|0)==($112|0);
         if ($113) {
          $114 = ((($83)) + 44|0);
          $115 = HEAP32[$114>>2]|0;
          $116 = ((($point$26)) + 44|0);
          HEAP32[$116>>2] = $115;
          break;
         }
         $117 = ((($108)) + 36|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = ($110|0)==($118|0);
         if ($119) {
          $120 = ((($108)) + 44|0);
          $121 = HEAP32[$120>>2]|0;
          $122 = ((($point$26)) + 44|0);
          HEAP32[$122>>2] = $121;
          break;
         } else {
          $123 = ((($83)) + 44|0);
          $124 = HEAP32[$123>>2]|0;
          $125 = (($110) - ($112))|0;
          $126 = ((($108)) + 44|0);
          $127 = HEAP32[$126>>2]|0;
          $128 = (($127) - ($124))|0;
          $129 = (($118) - ($112))|0;
          $130 = (_FT_MulDiv($125,$128,$129)|0);
          $131 = (($130) + ($124))|0;
          $132 = ((($point$26)) + 44|0);
          HEAP32[$132>>2] = $131;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 28) {
       label = 0;
       $70 = HEAP32[$strongs$0>>2]|0;
       $71 = ((($70)) + 44|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = ((($point$26)) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ((($70)) + 36|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = (($74) - ($76))|0;
       $78 = (_FT_MulFix($77,$3)|0);
       $79 = (($78) + ($72))|0;
       $80 = ((($point$26)) + 44|0);
       HEAP32[$80>>2] = $79;
      }
      $133 = HEAP32[$41>>2]|0;
      $134 = $133 | 32;
      HEAP32[$41>>2] = $134;
     }
    } while(0);
    $135 = ((($point$26)) + 48|0);
    $136 = ($135>>>0)<($9>>>0);
    if ($136) {
     $point$26 = $135;
    } else {
     break;
    }
   }
  }
 }
 $137 = ($strongs$0|0)==($strongs_0|0);
 if ($137) {
  STACKTOP = sp;return;
 }
 _ft_mem_free($5,$strongs$0);
 STACKTOP = sp;return;
}
function _psh_glyph_interpolate_other_points($glyph,$dimension) {
 $glyph = $glyph|0;
 $dimension = $dimension|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $contour$014 = 0, $cur_a$0 = 0, $cur_ab$0 = 0, $cur_c$0 = 0, $delta$015 = 0, $delta$1 = 0, $delta$2 = 0, $first$03 = 0, $first$2 = 0, $first$2$lcssa = 0, $first$4$be = 0, $first$47 = 0, $fit_count$05 = 0, $fit_count$1 = 0, $fit_count$1$lcssa = 0, $next$0 = 0, $num_contours$013 = 0, $org_a$0 = 0, $org_ab$0 = 0;
 var $point$0$first$0 = 0, $point$04 = 0, $point$110 = 0, $point$2 = 0, $scale_ab$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((((($1)) + 4|0) + (($dimension*204)|0)|0)) + 196|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($glyph)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 }
 $7 = ((($glyph)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (((((($1)) + 4|0) + (($dimension*204)|0)|0)) + 200|0);
 $10 = HEAP32[$9>>2]|0;
 $contour$014 = $8;$delta$015 = $10;$num_contours$013 = $5;
 while(1) {
  $11 = HEAP32[$contour$014>>2]|0;
  $12 = ((($contour$014)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + (($13*48)|0)|0);
  $15 = ($13|0)>(0);
  L6: do {
   if ($15) {
    $first$03 = 0;$fit_count$05 = 0;$point$04 = $11;
    while(1) {
     $16 = ((($point$04)) + 16|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $17 & 32;
     $19 = ($18|0)==(0);
     if ($19) {
      $first$2 = $first$03;$fit_count$1 = $fit_count$05;
     } else {
      $20 = ($first$03|0)==(0|0);
      $point$0$first$0 = $20 ? $point$04 : $first$03;
      $21 = (($fit_count$05) + 1)|0;
      $first$2 = $point$0$first$0;$fit_count$1 = $21;
     }
     $22 = ((($point$04)) + 48|0);
     $23 = ($22>>>0)<($14>>>0);
     if ($23) {
      $first$03 = $first$2;$fit_count$05 = $fit_count$1;$point$04 = $22;
     } else {
      $first$2$lcssa = $first$2;$fit_count$1$lcssa = $fit_count$1;
      break;
     }
    }
    $24 = ($fit_count$1$lcssa>>>0)<(2);
    if ($24) {
     $28 = ($fit_count$1$lcssa|0)==(1);
     if ($28) {
      $29 = ((($first$2$lcssa)) + 44|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ((($first$2$lcssa)) + 36|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (_FT_MulFix($32,$3)|0);
      $34 = (($30) - ($33))|0;
      $delta$1 = $34;
     } else {
      $delta$1 = $delta$015;
     }
     $35 = ($13|0)>(0);
     if ($35) {
      $point$110 = $11;
     } else {
      $delta$2 = $delta$1;
      break;
     }
     while(1) {
      $36 = ($point$110|0)==($first$2$lcssa|0);
      if (!($36)) {
       $37 = ((($point$110)) + 36|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = (_FT_MulFix($38,$3)|0);
       $40 = (($39) + ($delta$1))|0;
       $41 = ((($point$110)) + 44|0);
       HEAP32[$41>>2] = $40;
      }
      $42 = ((($point$110)) + 48|0);
      $43 = ($42>>>0)<($14>>>0);
      if ($43) {
       $point$110 = $42;
      } else {
       $delta$2 = $delta$1;
       break L6;
      }
     }
    }
    $25 = ((($first$2$lcssa)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==($first$2$lcssa|0);
    if ($27) {
     $delta$2 = $delta$015;
    } else {
     $45 = $26;$75 = $25;$first$47 = $first$2$lcssa;
     while(1) {
      $44 = ((($45)) + 16|0);
      $46 = HEAP32[$44>>2]|0;
      $47 = $46 & 32;
      $48 = ($47|0)==(0);
      if ($48) {
       $next$0 = $45;
       while(1) {
        $49 = ((($next$0)) + 4|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = ((($50)) + 16|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = $52 & 32;
        $54 = ($53|0)==(0);
        if ($54) {
         $next$0 = $50;
        } else {
         $$lcssa = $50;
         break;
        }
       }
       $55 = ((($first$47)) + 36|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ((($$lcssa)) + 36|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = ($56|0)>($58|0);
       if ($59) {
        $66 = ((($$lcssa)) + 44|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = (($56) - ($58))|0;
        $69 = ((($first$47)) + 44|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = (($70) - ($67))|0;
        $cur_a$0 = $67;$cur_ab$0 = $71;$org_a$0 = $58;$org_ab$0 = $68;
       } else {
        $60 = ((($first$47)) + 44|0);
        $61 = HEAP32[$60>>2]|0;
        $62 = (($58) - ($56))|0;
        $63 = ((($$lcssa)) + 44|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = (($64) - ($61))|0;
        $cur_a$0 = $61;$cur_ab$0 = $65;$org_a$0 = $56;$org_ab$0 = $62;
       }
       $72 = ($org_ab$0|0)>(0);
       if ($72) {
        $73 = (_FT_DivFix($cur_ab$0,$org_ab$0)|0);
        $scale_ab$0 = $73;
       } else {
        $scale_ab$0 = 65536;
       }
       $74 = HEAP32[$75>>2]|0;
       $76 = (($cur_ab$0) + ($cur_a$0))|0;
       $point$2 = $74;
       while(1) {
        $77 = ((($point$2)) + 36|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = (($78) - ($org_a$0))|0;
        $80 = ($79|0)<(1);
        do {
         if ($80) {
          $81 = (_FT_MulFix($79,$3)|0);
          $82 = (($81) + ($cur_a$0))|0;
          $cur_c$0 = $82;
         } else {
          $83 = ($79|0)<($org_ab$0|0);
          if ($83) {
           $87 = (_FT_MulFix($79,$scale_ab$0)|0);
           $88 = (($87) + ($cur_a$0))|0;
           $cur_c$0 = $88;
           break;
          } else {
           $84 = (($79) - ($org_ab$0))|0;
           $85 = (_FT_MulFix($84,$3)|0);
           $86 = (($76) + ($85))|0;
           $cur_c$0 = $86;
           break;
          }
         }
        } while(0);
        $89 = ((($point$2)) + 44|0);
        HEAP32[$89>>2] = $cur_c$0;
        $90 = ((($point$2)) + 4|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = ($91|0)==($$lcssa|0);
        if ($92) {
         break;
        } else {
         $point$2 = $91;
        }
       }
       $93 = ($$lcssa|0)==($first$2$lcssa|0);
       if ($93) {
        $delta$2 = $delta$015;
        break L6;
       } else {
        $first$4$be = $$lcssa;
       }
      } else {
       $first$4$be = $45;
      }
      $94 = ((($first$4$be)) + 4|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ($95|0)==($first$2$lcssa|0);
      if ($96) {
       $delta$2 = $delta$015;
       break;
      } else {
       $45 = $95;$75 = $94;$first$47 = $first$4$be;
      }
     }
    }
   } else {
    $delta$2 = $delta$015;
   }
  } while(0);
  $97 = (($num_contours$013) + -1)|0;
  $98 = ((($contour$014)) + 8|0);
  $99 = ($97|0)==(0);
  if ($99) {
   break;
  } else {
   $contour$014 = $98;$delta$015 = $delta$2;$num_contours$013 = $97;
  }
 }
 return;
}
function _psh_glyph_save_points($glyph,$dimension) {
 $glyph = $glyph|0;
 $dimension = $dimension|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $point$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$glyph>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  return;
 }
 $8 = ((($glyph)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($dimension|0)==(0);
 $11 = $10 ? 32 : 64;
 $n$02 = 0;$point$01 = $9;
 while(1) {
  $12 = ((($point$01)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  if ($10) {
   $14 = (($3) + ($n$02<<3)|0);
   HEAP32[$14>>2] = $13;
  } else {
   $15 = (((($3) + ($n$02<<3)|0)) + 4|0);
   HEAP32[$15>>2] = $13;
  }
  $16 = ((($point$01)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & 16;
  $19 = ($18|0)==(0);
  if (!($19)) {
   $20 = (($5) + ($n$02)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21&255;
   $23 = $22 | $11;
   $24 = $23&255;
   HEAP8[$20>>0] = $24;
  }
  $25 = ((($point$01)) + 48|0);
  $26 = (($n$02) + 1)|0;
  $27 = HEAP32[$glyph>>2]|0;
  $28 = ($26>>>0)<($27>>>0);
  if ($28) {
   $n$02 = $26;$point$01 = $25;
  } else {
   break;
  }
 }
 return;
}
function _psh_glyph_done($glyph) {
 $glyph = $glyph|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($glyph)) + 68|0);
 _psh_hint_table_done($2,$1);
 $3 = ((($glyph)) + 28|0);
 _psh_hint_table_done($3,$1);
 $4 = ((($glyph)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 _ft_mem_free($1,$5);
 HEAP32[$4>>2] = 0;
 $6 = ((($glyph)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 _ft_mem_free($1,$7);
 HEAP32[$6>>2] = 0;
 HEAP32[$glyph>>2] = 0;
 $8 = ((($glyph)) + 4|0);
 HEAP32[$8>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function _psh_hint_table_done($table,$memory) {
 $table = $table|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 _ft_mem_free($memory,$1);
 HEAP32[$0>>2] = 0;
 $2 = ((($table)) + 20|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($table)) + 28|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($table)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 _ft_mem_free($memory,$5);
 HEAP32[$4>>2] = 0;
 $6 = ((($table)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 _ft_mem_free($memory,$7);
 HEAP32[$6>>2] = 0;
 $8 = ((($table)) + 4|0);
 HEAP32[$8>>2] = 0;
 HEAP32[$table>>2] = 0;
 $9 = ((($table)) + 16|0);
 HEAP32[$9>>2] = 0;
 return;
}
function _psh_hint_table_activate_mask($table,$hint_mask) {
 $table = $table|0;
 $hint_mask = $hint_mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $count$09 = 0, $count$1 = 0, $count$1$lcssa = 0, $cursor$011 = 0, $cursor$1 = 0, $exitcond = 0, $exitcond17 = 0, $i1$05 = 0, $i2$03 = 0, $i2$03$in = 0, $idx$010 = 0, $mask$013 = 0, $mask$1 = 0, $val$012 = 0, $val$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($hint_mask)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$hint_mask>>2]|0;
 _psh_hint_table_deactivate($table);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($table)) + 4|0);
  HEAP32[$4>>2] = 0;
  return;
 }
 $5 = ((($table)) + 8|0);
 $6 = ((($table)) + 12|0);
 $count$09 = 0;$cursor$011 = $1;$idx$010 = 0;$mask$013 = 0;$val$012 = 0;
 while(1) {
  $7 = ($mask$013|0)==(0);
  if ($7) {
   $8 = ((($cursor$011)) + 1|0);
   $9 = HEAP8[$cursor$011>>0]|0;
   $10 = $9&255;
   $cursor$1 = $8;$mask$1 = 128;$val$1 = $10;
  } else {
   $cursor$1 = $cursor$011;$mask$1 = $mask$013;$val$1 = $val$012;
  }
  $11 = $mask$1 & $val$1;
  $12 = ($11|0)==(0);
  if ($12) {
   $count$1 = $count$09;
  } else {
   $13 = HEAP32[$5>>2]|0;
   $14 = (($13) + (($idx$010*28)|0)|0);
   $15 = (((($13) + (($idx$010*28)|0)|0)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 & 4;
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = $16 | 4;
    HEAP32[$15>>2] = $19;
    $20 = HEAP32[$table>>2]|0;
    $21 = ($count$09>>>0)<($20>>>0);
    if ($21) {
     $22 = (($count$09) + 1)|0;
     $23 = HEAP32[$6>>2]|0;
     $24 = (($23) + ($count$09<<2)|0);
     HEAP32[$24>>2] = $14;
     $count$1 = $22;
    } else {
     $count$1 = $count$09;
    }
   } else {
    $count$1 = $count$09;
   }
  }
  $25 = $mask$1 >> 1;
  $26 = (($idx$010) + 1)|0;
  $exitcond17 = ($26|0)==($2|0);
  if ($exitcond17) {
   $count$1$lcssa = $count$1;
   break;
  } else {
   $count$09 = $count$1;$cursor$011 = $cursor$1;$idx$010 = $26;$mask$013 = $25;$val$012 = $val$1;
  }
 }
 $27 = ((($table)) + 4|0);
 HEAP32[$27>>2] = $count$1$lcssa;
 $28 = ((($table)) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($count$1$lcssa|0)>(1);
 if ($30) {
  $i1$05 = 1;
 } else {
  return;
 }
 while(1) {
  $31 = (($29) + ($i1$05<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  $i2$03$in = $i1$05;
  while(1) {
   $i2$03 = (($i2$03$in) + -1)|0;
   $34 = (($29) + ($i2$03<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)<($33|0);
   if ($37) {
    break;
   }
   $38 = (($29) + ($i2$03$in<<2)|0);
   HEAP32[$38>>2] = $35;
   HEAP32[$34>>2] = $32;
   $39 = ($i2$03$in|0)>(1);
   if ($39) {
    $i2$03$in = $i2$03;
   } else {
    break;
   }
  }
  $40 = (($i1$05) + 1)|0;
  $exitcond = ($40|0)==($count$1$lcssa|0);
  if ($exitcond) {
   break;
  } else {
   $i1$05 = $40;
  }
 }
 return;
}
function _psh_hint_table_find_strong_points($table,$point,$count,$threshold,$major_dir) {
 $table = $table|0;
 $point = $point|0;
 $count = $count|0;
 $threshold = $threshold|0;
 $major_dir = $major_dir|0;
 var $$ = 0, $$0133 = 0, $$034 = 0, $$6 = 0, $$lcssa = 0, $$lcssa91 = 0, $$lcssa93 = 0, $$lcssa95 = 0, $$lcssa97 = 0, $$not = 0, $$not64 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge63 = 0, $brmerge65 = 0, $nn$025 = 0, $nn1$024 = 0, $nn4$027 = 0, $nn4$129 = 0, $nn4$231 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond62 = 0, $or$cond8 = 0, $point_dir$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($table)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($count|0)==(0);
 if ($4) {
  return;
 }
 $5 = (0 - ($major_dir))|0;
 $6 = ($3|0)==(0);
 $7 = ($3|0)==(0);
 $8 = ($major_dir|0)==(2);
 $$ = $8 ? 128 : 256;
 $$6 = $8 ? 256 : 128;
 $9 = ($3|0)==(0);
 $10 = ($3|0)==(0);
 $11 = ($3|0)==(0);
 $12 = (0 - ($major_dir))|0;
 $$0133 = $count;$$034 = $point;
 while(1) {
  $13 = ((($$034)) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($$034)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 16;
  $18 = ($17|0)==(0);
  L6: do {
   if ($18) {
    $19 = ((($$034)) + 20|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20 << 24 >> 24;
    $22 = ($21|0)==($major_dir|0);
    $23 = ($21|0)==($12|0);
    $or$cond62 = $22 | $23;
    if ($or$cond62) {
     $24 = HEAP8[$19>>0]|0;
     $25 = $24 << 24 >> 24;
     $point_dir$0 = $25;
     label = 7;
    } else {
     $26 = ((($$034)) + 21|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27 << 24 >> 24;
     $29 = ($28|0)==($major_dir|0);
     $30 = ($28|0)==($12|0);
     $or$cond = $29 | $30;
     if ($or$cond) {
      $point_dir$0 = $28;
      label = 7;
     }
    }
    if ((label|0) == 7) {
     label = 0;
     $31 = ($point_dir$0|0)==(0);
     if (!($31)) {
      $32 = ($point_dir$0|0)==($major_dir|0);
      if ($32) {
       if ($7) {
        break;
       } else {
        $nn$025 = 0;
       }
       while(1) {
        $35 = (($1) + ($nn$025<<2)|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = HEAP32[$36>>2]|0;
        $38 = (($14) - ($37))|0;
        $39 = ($38|0)<($threshold|0);
        $40 = (0 - ($38))|0;
        $41 = ($40|0)<($threshold|0);
        $or$cond3 = $39 & $41;
        $34 = (($nn$025) + 1)|0;
        if ($or$cond3) {
         $$lcssa91 = $36;
         break;
        }
        $33 = ($34>>>0)<($3>>>0);
        if ($33) {
         $nn$025 = $34;
        } else {
         break L6;
        }
       }
       $42 = HEAP32[$15>>2]|0;
       $43 = $42 | 528;
       HEAP32[$15>>2] = $43;
       $44 = ((($$034)) + 32|0);
       HEAP32[$44>>2] = $$lcssa91;
       break;
      } else {
       $$not = ($point_dir$0|0)!=($5|0);
       $brmerge = $$not | $6;
       if ($brmerge) {
        break;
       } else {
        $nn1$024 = 0;
       }
       while(1) {
        $47 = (($1) + ($nn1$024<<2)|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = HEAP32[$48>>2]|0;
        $50 = (($14) - ($49))|0;
        $51 = ((($48)) + 4|0);
        $52 = HEAP32[$51>>2]|0;
        $53 = (($50) - ($52))|0;
        $54 = ($53|0)<($threshold|0);
        $55 = (0 - ($53))|0;
        $56 = ($55|0)<($threshold|0);
        $or$cond5 = $54 & $56;
        $46 = (($nn1$024) + 1)|0;
        if ($or$cond5) {
         $$lcssa = $48;
         break;
        }
        $45 = ($46>>>0)<($3>>>0);
        if ($45) {
         $nn1$024 = $46;
        } else {
         break L6;
        }
       }
       $57 = HEAP32[$15>>2]|0;
       $58 = $57 | 1040;
       HEAP32[$15>>2] = $58;
       $59 = ((($$034)) + 32|0);
       HEAP32[$59>>2] = $$lcssa;
       break;
      }
     }
    }
    $60 = HEAP32[$15>>2]|0;
    $61 = $60 & 64;
    $62 = ($61|0)==(0);
    if (!($62)) {
     $63 = $60 & $$;
     $64 = ($63|0)==(0);
     L27: do {
      if ($64) {
       $79 = $60 & $$6;
       $80 = ($79|0)==(0);
       $brmerge63 = $80 | $9;
       if (!($brmerge63)) {
        $nn4$129 = 0;
        while(1) {
         $83 = (($1) + ($nn4$129<<2)|0);
         $84 = HEAP32[$83>>2]|0;
         $85 = HEAP32[$84>>2]|0;
         $86 = (($14) - ($85))|0;
         $87 = ((($84)) + 4|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = (($86) - ($88))|0;
         $90 = ($89|0)<($threshold|0);
         $91 = (0 - ($89))|0;
         $92 = ($91|0)<($threshold|0);
         $or$cond10 = $90 & $92;
         $82 = (($nn4$129) + 1)|0;
         if ($or$cond10) {
          $$lcssa95 = $84;
          break;
         }
         $81 = ($82>>>0)<($3>>>0);
         if ($81) {
          $nn4$129 = $82;
         } else {
          break L27;
         }
        }
        $93 = HEAP32[$15>>2]|0;
        $94 = $93 | 1024;
        HEAP32[$15>>2] = $94;
        $95 = ((($$034)) + 32|0);
        HEAP32[$95>>2] = $$lcssa95;
        $96 = HEAP32[$15>>2]|0;
        $97 = $96 | 16;
        HEAP32[$15>>2] = $97;
       }
      } else {
       if (!($11)) {
        $nn4$027 = 0;
        while(1) {
         $67 = (($1) + ($nn4$027<<2)|0);
         $68 = HEAP32[$67>>2]|0;
         $69 = HEAP32[$68>>2]|0;
         $70 = (($14) - ($69))|0;
         $71 = ($70|0)<($threshold|0);
         $72 = (0 - ($70))|0;
         $73 = ($72|0)<($threshold|0);
         $or$cond8 = $71 & $73;
         $66 = (($nn4$027) + 1)|0;
         if ($or$cond8) {
          $$lcssa93 = $68;
          break;
         }
         $65 = ($66>>>0)<($3>>>0);
         if ($65) {
          $nn4$027 = $66;
         } else {
          break L27;
         }
        }
        $74 = HEAP32[$15>>2]|0;
        $75 = $74 | 512;
        HEAP32[$15>>2] = $75;
        $76 = ((($$034)) + 32|0);
        HEAP32[$76>>2] = $$lcssa93;
        $77 = HEAP32[$15>>2]|0;
        $78 = $77 | 16;
        HEAP32[$15>>2] = $78;
       }
      }
     } while(0);
     $98 = ((($$034)) + 32|0);
     $99 = HEAP32[$98>>2]|0;
     $$not64 = ($99|0)!=(0|0);
     $brmerge65 = $$not64 | $10;
     if (!($brmerge65)) {
      $nn4$231 = 0;
      while(1) {
       $100 = (($1) + ($nn4$231<<2)|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[$101>>2]|0;
       $103 = ($14|0)<($102|0);
       if (!($103)) {
        $104 = ((($101)) + 4|0);
        $105 = HEAP32[$104>>2]|0;
        $106 = (($105) + ($102))|0;
        $107 = ($14|0)>($106|0);
        if (!($107)) {
         $$lcssa97 = $101;
         break;
        }
       }
       $108 = (($nn4$231) + 1)|0;
       $109 = ($108>>>0)<($3>>>0);
       if ($109) {
        $nn4$231 = $108;
       } else {
        break L6;
       }
      }
      HEAP32[$98>>2] = $$lcssa97;
     }
    }
   }
  } while(0);
  $110 = (($$0133) + -1)|0;
  $111 = ((($$034)) + 48|0);
  $112 = ($110|0)==(0);
  if ($112) {
   break;
  } else {
   $$0133 = $110;$$034 = $111;
  }
 }
 return;
}
function _psh_hint_table_deactivate($table) {
 $table = $table|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$01 = 0, $hint$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$table>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 $2 = ((($table)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $count$01 = $0;$hint$02 = $3;
 while(1) {
  $4 = ((($hint$02)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & -5;
  HEAP32[$4>>2] = $6;
  $7 = ((($hint$02)) + 24|0);
  HEAP32[$7>>2] = -1;
  $8 = (($count$01) + -1)|0;
  $9 = ((($hint$02)) + 28|0);
  $10 = ($8|0)==(0);
  if ($10) {
   break;
  } else {
   $count$01 = $8;$hint$02 = $9;
  }
 }
 return;
}
function _psh_hint_align($hint,$globals,$dimension,$glyph) {
 $hint = $hint|0;
 $globals = $globals|0;
 $dimension = $dimension|0;
 $glyph = $glyph|0;
 var $$ = 0, $$2 = 0, $$not = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $align = 0, $len$0 = 0, $len$1 = 0, $pos$0 = 0, $pos$1 = 0, $pos$2 = 0, $right_disp$0 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $align = sp;
 $0 = (((($globals)) + 4|0) + (($dimension*204)|0)|0);
 $1 = (((((($globals)) + 4|0) + (($dimension*204)|0)|0)) + 196|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($hint)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 8;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (((((($globals)) + 4|0) + (($dimension*204)|0)|0)) + 200|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$hint>>2]|0;
 $10 = (_FT_MulFix($9,$2)|0);
 $11 = (($10) + ($8))|0;
 $12 = ((($hint)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_FT_MulFix($13,$2)|0);
 switch ($dimension|0) {
 case 0:  {
  $15 = ((($glyph)) + 120|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   label = 5;
  } else {
   $25 = ((($glyph)) + 122|0);
   $26 = HEAP8[$25>>0]|0;
   $$not = ($26<<24>>24)!=(0);
   $119 = 0;$120 = $$not;
  }
  break;
 }
 case 1:  {
  $18 = ((($glyph)) + 121|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   label = 5;
  } else {
   $27 = ((($glyph)) + 123|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = ($28<<24>>24)!=(0);
   $119 = 1;$120 = $29;
  }
  break;
 }
 default: {
  $119 = 0;$120 = 0;
 }
 }
 if ((label|0) == 5) {
  $21 = ((($hint)) + 8|0);
  HEAP32[$21>>2] = $11;
  $22 = ((($hint)) + 12|0);
  HEAP32[$22>>2] = $14;
  $23 = HEAP32[$3>>2]|0;
  $24 = $23 | 8;
  HEAP32[$3>>2] = $24;
  STACKTOP = sp;return;
 }
 $30 = ((($hint)) + 12|0);
 HEAP32[$30>>2] = $14;
 HEAP32[$align>>2] = 0;
 $31 = ((($align)) + 4|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($align)) + 8|0);
 HEAP32[$32>>2] = 0;
 if ($119) {
  $33 = ((($globals)) + 412|0);
  $34 = HEAP32[$hint>>2]|0;
  $35 = HEAP32[$12>>2]|0;
  $36 = (($35) + ($34))|0;
  _psh_blues_snap_stem($33,$36,$34,$align);
 }
 $37 = HEAP32[$align>>2]|0;
 switch ($37|0) {
 case 1:  {
  $38 = HEAP32[$31>>2]|0;
  $39 = (($38) - ($14))|0;
  $40 = ((($hint)) + 8|0);
  HEAP32[$40>>2] = $39;
  break;
 }
 case 2:  {
  $41 = HEAP32[$32>>2]|0;
  $42 = ((($hint)) + 8|0);
  HEAP32[$42>>2] = $41;
  break;
 }
 case 3:  {
  $43 = HEAP32[$32>>2]|0;
  $44 = ((($hint)) + 8|0);
  HEAP32[$44>>2] = $43;
  $45 = HEAP32[$31>>2]|0;
  $46 = HEAP32[$32>>2]|0;
  $47 = (($45) - ($46))|0;
  HEAP32[$30>>2] = $47;
  break;
 }
 default: {
  $48 = ((($hint)) + 20|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0|0);
  if ($50) {
   $pos$0 = $11;
  } else {
   $51 = ((($49)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $52 & 8;
   $54 = ($53|0)==(0);
   if ($54) {
    _psh_hint_align($49,$globals,$dimension,$glyph);
   }
   $55 = HEAP32[$49>>2]|0;
   $56 = ((($49)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 >> 1;
   $59 = ((($49)) + 8|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($49)) + 12|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62 >> 1;
   $64 = HEAP32[$hint>>2]|0;
   $65 = HEAP32[$12>>2]|0;
   $66 = $65 >> 1;
   $sum = (($58) + ($55))|0;
   $67 = (($64) - ($sum))|0;
   $68 = (($67) + ($66))|0;
   $69 = (_FT_MulFix($68,$2)|0);
   $70 = $14 >> 1;
   $71 = (($60) - ($70))|0;
   $72 = (($71) + ($63))|0;
   $73 = (($72) + ($69))|0;
   $pos$0 = $73;
  }
  $74 = ((($hint)) + 8|0);
  HEAP32[$74>>2] = $pos$0;
  HEAP32[$30>>2] = $14;
  $75 = ((($glyph)) + 124|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = ($76<<24>>24)==(0);
  do {
   if ($77) {
    $len$0 = $14;$pos$1 = $pos$0;
   } else {
    $78 = ($14|0)<(65);
    if (!($78)) {
     $96 = (_psh_dimension_quantize_len($0,$14)|0);
     $len$0 = $96;$pos$1 = $pos$0;
     break;
    }
    $79 = ($14|0)>(31);
    if ($79) {
     $80 = $14 >> 1;
     $81 = (($pos$0) + ($80))|0;
     $82 = $81 & -64;
     $len$0 = 64;$pos$1 = $82;
     break;
    }
    $83 = ($14|0)>(0);
    $84 = (($pos$0) + 32)|0;
    $85 = $84 & -64;
    if ($83) {
     $86 = (($pos$0) + ($14))|0;
     $87 = (($86) + 32)|0;
     $88 = $87 & -64;
     $89 = (($85) - ($pos$0))|0;
     $90 = (($88) - ($86))|0;
     $91 = ($89|0)<(0);
     $92 = (0 - ($89))|0;
     $$ = $91 ? $92 : $89;
     $93 = ($90|0)<(0);
     $94 = (0 - ($90))|0;
     $right_disp$0 = $93 ? $94 : $90;
     $95 = ($$|0)>($right_disp$0|0);
     $$2 = $95 ? $88 : $85;
     $len$0 = $14;$pos$1 = $$2;
    } else {
     $len$0 = $14;$pos$1 = $85;
    }
   }
  } while(0);
  $97 = (_psh_hint_snap_stem_side_delta($pos$1,$len$0)|0);
  $98 = (($97) + ($pos$1))|0;
  HEAP32[$74>>2] = $98;
  HEAP32[$30>>2] = $len$0;
 }
 }
 L38: do {
  if ($120) {
   $99 = ((($hint)) + 8|0);
   $100 = HEAP32[$30>>2]|0;
   $101 = ($100|0)<(64);
   $102 = (($100) + 32)|0;
   $103 = $102 & -64;
   $len$1 = $101 ? 64 : $103;
   $104 = HEAP32[$align>>2]|0;
   switch ($104|0) {
   case 3:  {
    break L38;
    break;
   }
   case 1:  {
    $105 = HEAP32[$31>>2]|0;
    $106 = (($105) - ($len$1))|0;
    HEAP32[$99>>2] = $106;
    HEAP32[$30>>2] = $len$1;
    break L38;
    break;
   }
   case 2:  {
    HEAP32[$30>>2] = $len$1;
    break L38;
    break;
   }
   default: {
    $107 = HEAP32[$99>>2]|0;
    $108 = $len$1 & 64;
    $109 = ($108|0)==(0);
    $110 = $len$1 >> 1;
    $111 = (($107) + ($110))|0;
    $112 = $111 & -64;
    $113 = $112 | 32;
    $114 = (($111) + 32)|0;
    $115 = $114 & -64;
    $pos$2 = $109 ? $115 : $113;
    $116 = (($pos$2) - ($110))|0;
    HEAP32[$99>>2] = $116;
    HEAP32[$30>>2] = $len$1;
    break L38;
   }
   }
  }
 } while(0);
 $117 = HEAP32[$3>>2]|0;
 $118 = $117 | 8;
 HEAP32[$3>>2] = $118;
 STACKTOP = sp;return;
}
function _psh_dimension_quantize_len($dim,$len) {
 $dim = $dim|0;
 $len = $len|0;
 var $$$0 = 0, $$0 = 0, $$0357 = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len|0)<(65);
 if ($0) {
  $$1 = 64;
  return ($$1|0);
 }
 $1 = ((($dim)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($len) - ($2))|0;
 $4 = ($3|0)<(0);
 $5 = (0 - ($3))|0;
 $$2 = $4 ? $5 : $3;
 $6 = ($$2|0)<(40);
 if ($6) {
  $7 = ($2|0)<(48);
  if ($7) {
   $$0357 = 48;$15 = 48;$17 = 0;
   $14 = ($15>>>0)<(54);
   $16 = $17 | 54;
   $$$0 = $14 ? $16 : $$0357;
   return ($$$0|0);
  } else {
   $$0 = $2;
  }
 } else {
  $$0 = $len;
 }
 $8 = ($$0|0)<(192);
 if (!($8)) {
  $18 = (($$0) + 32)|0;
  $19 = $18 & -64;
  $$1 = $19;
  return ($$1|0);
 }
 $9 = $$0 & 63;
 $10 = $$0 & -64;
 $11 = ($9>>>0)<(10);
 if ($11) {
  $$1 = $$0;
  return ($$1|0);
 }
 $12 = ($9>>>0)<(32);
 if (!($12)) {
  $$0357 = $$0;$15 = $9;$17 = $10;
  $14 = ($15>>>0)<(54);
  $16 = $17 | 54;
  $$$0 = $14 ? $16 : $$0357;
  return ($$$0|0);
 }
 $13 = $10 | 10;
 $$1 = $13;
 return ($$1|0);
}
function _psh_hint_snap_stem_side_delta($pos,$len) {
 $pos = $pos|0;
 $len = $len|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($pos) + 32)|0;
 $1 = $0 & -64;
 $2 = (($1) - ($pos))|0;
 $3 = (($pos) + 32)|0;
 $4 = (($3) + ($len))|0;
 $5 = $4 & -64;
 $6 = (($5) - ($pos))|0;
 $7 = (($6) - ($len))|0;
 $8 = ($2|0)<(0);
 $9 = (0 - ($2))|0;
 $10 = $8 ? $9 : $2;
 $11 = ($7|0)<(0);
 $12 = (0 - ($7))|0;
 $13 = $11 ? $12 : $7;
 $14 = ($10|0)>($13|0);
 $$ = $14 ? $7 : $2;
 return ($$|0);
}
function _psh_compute_dir($dx,$dy) {
 $dx = $dx|0;
 $dy = $dy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($dx|0)>(-1);
 $1 = (0 - ($dx))|0;
 $2 = $0 ? $dx : $1;
 $3 = ($dy|0)>(-1);
 $4 = (0 - ($dy))|0;
 $5 = $3 ? $dy : $4;
 $6 = ($5*12)|0;
 $7 = ($6|0)<($2|0);
 if ($7) {
  $8 = $dx >> 31;
  $9 = $8 & -4;
  $10 = $9 | 2;
  $result$0 = $10;
  return ($result$0|0);
 }
 $11 = ($2*12)|0;
 $12 = ($11|0)<($5|0);
 if (!($12)) {
  $result$0 = 4;
  return ($result$0|0);
 }
 $13 = $dy >> 31;
 $14 = $13 & 2;
 $15 = (($14) + -1)|0;
 $result$0 = $15;
 return ($result$0|0);
}
function _psh_glyph_compute_inflections($glyph) {
 $glyph = $glyph|0;
 var $$finished$1 = 0, $$finished$1$lcssa = 0, $$lcssa = 0, $$lcssa100 = 0, $$lcssa101 = 0, $$lcssa102 = 0, $$lcssa103 = 0, $$lcssa104 = 0, $$lcssa90 = 0, $$lcssa91 = 0, $$lcssa92 = 0, $$lcssa93 = 0, $$lcssa95 = 0, $$lcssa97 = 0, $$lcssa99 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $after$0 = 0, $after$0$lcssa = 0, $before$021 = 0, $before$021$lcssa = 0, $before$021$phi = 0, $end$0 = 0;
 var $end$1 = 0, $finished$1 = 0, $in_x$0 = 0, $in_y$0 = 0, $n$022 = 0, $orient_prev$0 = 0, $start$0 = 0, $start$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 }
 $3 = ((($glyph)) + 12|0);
 $n$022 = 0;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = (((($4) + ($n$022<<3)|0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6>>>0)<(4);
  L6: do {
   if (!($7)) {
    $8 = (($4) + ($n$022<<3)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($9)) + 36|0);
    $11 = ((($9)) + 40|0);
    $end$0 = $9;
    while(1) {
     $12 = ((($end$0)) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==($9|0);
     if ($14) {
      break L6;
     }
     $15 = ((($13)) + 36|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = HEAP32[$10>>2]|0;
     $18 = ((($13)) + 40|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP32[$11>>2]|0;
     $21 = ($16|0)==($17|0);
     $22 = ($19|0)==($20|0);
     $23 = $21 & $22;
     if ($23) {
      $end$0 = $13;
     } else {
      $$lcssa = $16;$$lcssa90 = $13;$$lcssa91 = $17;$$lcssa92 = $19;$$lcssa93 = $20;
      break;
     }
    }
    $24 = (($$lcssa) - ($$lcssa91))|0;
    $25 = (($$lcssa92) - ($$lcssa93))|0;
    $26 = HEAP32[$9>>2]|0;
    $27 = ($26|0)==($9|0);
    if (!($27)) {
     $31 = $26;$before$021 = $9;
     while(1) {
      $28 = ((($before$021)) + 36|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ((($31)) + 36|0);
      $32 = HEAP32[$30>>2]|0;
      $33 = (($29) - ($32))|0;
      $34 = ((($before$021)) + 40|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ((($31)) + 40|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (($35) - ($37))|0;
      $39 = ($29|0)==($32|0);
      $40 = ($35|0)==($37|0);
      $41 = $39 & $40;
      if (!($41)) {
       $44 = (_ft_corner_orientation($24,$25,$33,$38)|0);
       $45 = ($44|0)==(0);
       if (!($45)) {
        $$lcssa95 = $33;$$lcssa97 = $38;$$lcssa99 = $44;$before$021$lcssa = $before$021;
        break;
       }
      }
      $42 = HEAP32[$31>>2]|0;
      $43 = ($42|0)==($9|0);
      if ($43) {
       break L6;
      } else {
       $before$021$phi = $31;$31 = $42;$before$021 = $before$021$phi;
      }
     }
     $end$1 = $$lcssa90;$in_x$0 = $$lcssa95;$in_y$0 = $$lcssa97;$orient_prev$0 = $$lcssa99;$start$0 = $before$021$lcssa;
     while(1) {
      $after$0 = $end$1;$finished$1 = 0;
      while(1) {
       $46 = ((($after$0)) + 4|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==($before$021$lcssa|0);
       $$finished$1 = $48 ? 1 : $finished$1;
       $49 = ((($47)) + 36|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = ((($after$0)) + 36|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($50) - ($52))|0;
       $54 = ((($47)) + 40|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = ((($after$0)) + 40|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (($55) - ($57))|0;
       $59 = ($50|0)==($52|0);
       $60 = ($55|0)==($57|0);
       $61 = $59 & $60;
       if ($61) {
        $after$0 = $47;$finished$1 = $$finished$1;
        continue;
       }
       $62 = (_ft_corner_orientation($in_x$0,$in_y$0,$53,$58)|0);
       $63 = ($62|0)==(0);
       if ($63) {
        $after$0 = $47;$finished$1 = $$finished$1;
       } else {
        $$finished$1$lcssa = $$finished$1;$$lcssa100 = $47;$$lcssa101 = $53;$$lcssa102 = $58;$$lcssa103 = $62;$after$0$lcssa = $after$0;
        break;
       }
      }
      $64 = $$lcssa103 ^ $orient_prev$0;
      $65 = ($64|0)<(0);
      if ($65) {
       $start$1 = $start$0;
       while(1) {
        $66 = ((($start$1)) + 12|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = $67 | 4;
        HEAP32[$66>>2] = $68;
        $69 = ((($start$1)) + 4|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($70|0)==($after$0$lcssa|0);
        if ($71) {
         $$lcssa104 = $70;
         break;
        } else {
         $start$1 = $70;
        }
       }
       $72 = ((($$lcssa104)) + 12|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = $73 | 4;
       HEAP32[$72>>2] = $74;
      }
      $75 = ($$finished$1$lcssa|0)==(0);
      if ($75) {
       $end$1 = $$lcssa100;$in_x$0 = $$lcssa101;$in_y$0 = $$lcssa102;$orient_prev$0 = $$lcssa103;$start$0 = $after$0$lcssa;
      } else {
       break;
      }
     }
    }
   }
  } while(0);
  $76 = (($n$022) + 1)|0;
  $77 = HEAP32[$0>>2]|0;
  $78 = ($76>>>0)<($77>>>0);
  if ($78) {
   $n$022 = $76;
  } else {
   break;
  }
 }
 return;
}
function _psh_hint_table_init($table,$hints,$hint_masks,$memory) {
 $table = $table|0;
 $hints = $hints|0;
 $hint_masks = $hint_masks|0;
 $memory = $memory|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$06 = 0, $count$13 = 0, $error = 0, $exitcond = 0, $idx$02 = 0, $mask$04 = 0, $or$cond = 0, $read$08 = 0, $write$07 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = HEAP32[$hints>>2]|0;
 $1 = $0 << 1;
 $2 = (_ft_mem_realloc($memory,4,0,$1,0,$error)|0);
 $3 = ((($table)) + 12|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$error>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $50 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 $6 = (_ft_mem_realloc($memory,28,0,$0,0,$error)|0);
 $7 = ((($table)) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[$error>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $50 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 $10 = $1 | 1;
 $11 = (_ft_mem_realloc($memory,16,0,$10,0,$error)|0);
 $12 = ((($table)) + 24|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$error>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $50 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($50|0);
 }
 HEAP32[$table>>2] = $0;
 $15 = HEAP32[$3>>2]|0;
 $16 = (($15) + ($0<<2)|0);
 $17 = ((($table)) + 16|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($table)) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($table)) + 20|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($table)) + 28|0);
 HEAP32[$20>>2] = 0;
 $21 = ($0|0)==(0);
 if (!($21)) {
  $22 = ((($hints)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$7>>2]|0;
  $count$06 = $0;$read$08 = $23;$write$07 = $24;
  while(1) {
   $25 = HEAP32[$read$08>>2]|0;
   HEAP32[$write$07>>2] = $25;
   $26 = ((($read$08)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($write$07)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = ((($read$08)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ((($write$07)) + 16|0);
   HEAP32[$31>>2] = $30;
   $32 = (($count$06) + -1)|0;
   $33 = ((($write$07)) + 28|0);
   $34 = ((($read$08)) + 12|0);
   $35 = ($32|0)==(0);
   if ($35) {
    break;
   } else {
    $count$06 = $32;$read$08 = $34;$write$07 = $33;
   }
  }
 }
 $36 = ($hint_masks|0)==(0|0);
 if (!($36)) {
  $37 = ((($hint_masks)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$hint_masks>>2]|0;
  $40 = ((($table)) + 32|0);
  HEAP32[$40>>2] = $hint_masks;
  $41 = ($39|0)==(0);
  if (!($41)) {
   $count$13 = $39;$mask$04 = $38;
   while(1) {
    _psh_hint_table_record_mask($table,$mask$04);
    $42 = (($count$13) + -1)|0;
    $43 = ((($mask$04)) + 16|0);
    $44 = ($42|0)==(0);
    if ($44) {
     break;
    } else {
     $count$13 = $42;$mask$04 = $43;
    }
   }
  }
 }
 $45 = HEAP32[$18>>2]|0;
 $46 = HEAP32[$table>>2]|0;
 $47 = ($45|0)==($46|0);
 $48 = ($46|0)==(0);
 $or$cond = $47 | $48;
 if ($or$cond) {
  $50 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($50|0);
 } else {
  $idx$02 = 0;
 }
 while(1) {
  _psh_hint_table_record($table,$idx$02);
  $49 = (($idx$02) + 1)|0;
  $exitcond = ($49|0)==($46|0);
  if ($exitcond) {
   break;
  } else {
   $idx$02 = $49;
  }
 }
 $50 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($50|0);
}
function _psh_hint_table_record_mask($table,$hint_mask) {
 $table = $table|0;
 $hint_mask = $hint_mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cursor$02 = 0, $cursor$1 = 0, $exitcond = 0, $idx$03 = 0, $mask$04 = 0, $mask$1 = 0, $val$01 = 0, $val$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$hint_mask>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  return;
 }
 $2 = ((($hint_mask)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $cursor$02 = $3;$idx$03 = 0;$mask$04 = 0;$val$01 = 0;
 while(1) {
  $4 = ($mask$04|0)==(0);
  if ($4) {
   $5 = ((($cursor$02)) + 1|0);
   $6 = HEAP8[$cursor$02>>0]|0;
   $7 = $6&255;
   $cursor$1 = $5;$mask$1 = 128;$val$1 = $7;
  } else {
   $cursor$1 = $cursor$02;$mask$1 = $mask$04;$val$1 = $val$01;
  }
  $8 = $mask$1 & $val$1;
  $9 = ($8|0)==(0);
  if (!($9)) {
   _psh_hint_table_record($table,$idx$03);
  }
  $10 = $mask$1 >> 1;
  $11 = (($idx$03) + 1)|0;
  $exitcond = ($11|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $cursor$02 = $cursor$1;$idx$03 = $11;$mask$04 = $10;$val$01 = $val$1;
  }
 }
 return;
}
function _psh_hint_table_record($table,$idx) {
 $table = $table|0;
 $idx = $idx|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$01 = 0, $sorted$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + (($idx*28)|0)|0);
 $3 = HEAP32[$table>>2]|0;
 $4 = ($3>>>0)>($idx>>>0);
 if (!($4)) {
  return;
 }
 $5 = (((($1) + (($idx*28)|0)|0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 4;
 $8 = ($7|0)==(0);
 if (!($8)) {
  return;
 }
 $9 = $6 | 4;
 HEAP32[$5>>2] = $9;
 $10 = ((($table)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($table)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (((($1) + (($idx*28)|0)|0)) + 20|0);
 HEAP32[$14>>2] = 0;
 $15 = ($13|0)==(0);
 L7: do {
  if (!($15)) {
   $count$01 = $13;$sorted$02 = $11;
   while(1) {
    $16 = HEAP32[$sorted$02>>2]|0;
    $17 = (_psh_hint_overlap($2,$16)|0);
    $18 = ($17|0)==(0);
    if (!($18)) {
     $$lcssa = $16;
     break;
    }
    $19 = (($count$01) + -1)|0;
    $20 = ((($sorted$02)) + 4|0);
    $21 = ($19|0)==(0);
    if ($21) {
     break L7;
    } else {
     $count$01 = $19;$sorted$02 = $20;
    }
   }
   HEAP32[$14>>2] = $$lcssa;
  }
 } while(0);
 $22 = HEAP32[$12>>2]|0;
 $23 = HEAP32[$table>>2]|0;
 $24 = ($22>>>0)<($23>>>0);
 if (!($24)) {
  return;
 }
 $25 = (($22) + 1)|0;
 HEAP32[$12>>2] = $25;
 $26 = HEAP32[$10>>2]|0;
 $27 = (($26) + ($22<<2)|0);
 HEAP32[$27>>2] = $2;
 return;
}
function _psh_hint_overlap($hint1,$hint2) {
 $hint1 = $hint1|0;
 $hint2 = $hint2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$hint1>>2]|0;
 $1 = ((($hint1)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0))|0;
 $4 = HEAP32[$hint2>>2]|0;
 $5 = ($3|0)<($4|0);
 if ($5) {
  $11 = 0;
  $10 = $11&1;
  return ($10|0);
 }
 $6 = ((($hint2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4))|0;
 $9 = ($8|0)>=($0|0);
 $11 = $9;
 $10 = $11&1;
 return ($10|0);
}
function _psh_blues_snap_stem($blues,$stem_top,$stem_bot,$alignment) {
 $blues = $blues|0;
 $stem_top = $stem_top|0;
 $stem_bot = $stem_bot|0;
 $alignment = $alignment|0;
 var $$lcssa33 = 0, $$lcssa35 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$08 = 0, $count$15 = 0;
 var $zone$09 = 0, $zone$09$lcssa34 = 0, $zone$16 = 0, $zone$16$lcssa32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$alignment>>2] = 0;
 $0 = ((($blues)) + 2080|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = HEAP32[$blues>>2]|0;
 $3 = ($2|0)==(0);
 L1: do {
  if (!($3)) {
   $4 = ((($blues)) + 4|0);
   $5 = ((($blues)) + 2076|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (0 - ($6))|0;
   $count$08 = $2;$zone$09 = $4;
   while(1) {
    $8 = ((($zone$09)) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($stem_top) - ($9))|0;
    $11 = ($10|0)<($7|0);
    if ($11) {
     break L1;
    }
    $12 = ((($zone$09)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($13) + ($6))|0;
    $15 = ($14|0)<($stem_top|0);
    if (!($15)) {
     $$lcssa35 = $10;$zone$09$lcssa34 = $zone$09;
     break;
    }
    $25 = (($count$08) + -1)|0;
    $26 = ((($zone$09)) + 32|0);
    $27 = ($25|0)==(0);
    if ($27) {
     break L1;
    } else {
     $count$08 = $25;$zone$09 = $26;
    }
   }
   $16 = ($1<<24>>24)==(0);
   if ($16) {
    $17 = ((($blues)) + 2072|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($$lcssa35|0)>($18|0);
    if ($19) {
     break;
    }
   }
   $20 = HEAP32[$alignment>>2]|0;
   $21 = $20 | 1;
   HEAP32[$alignment>>2] = $21;
   $22 = ((($zone$09$lcssa34)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($alignment)) + 4|0);
   HEAP32[$24>>2] = $23;
  }
 } while(0);
 $28 = ((($blues)) + 516|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  return;
 }
 $$sum = (($29) + -1)|0;
 $31 = (((($blues)) + 520|0) + ($$sum<<5)|0);
 $32 = ((($blues)) + 2076|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (0 - ($33))|0;
 $count$15 = $29;$zone$16 = $31;
 while(1) {
  $35 = ((($zone$16)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) - ($stem_bot))|0;
  $38 = ($37|0)<($34|0);
  if ($38) {
   label = 17;
   break;
  }
  $39 = ((($zone$16)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) - ($33))|0;
  $42 = ($41|0)>($stem_bot|0);
  if (!($42)) {
   $$lcssa33 = $37;$zone$16$lcssa32 = $zone$16;
   label = 13;
   break;
  }
  $52 = (($count$15) + -1)|0;
  $53 = ((($zone$16)) + -32|0);
  $54 = ($52|0)==(0);
  if ($54) {
   label = 17;
   break;
  } else {
   $count$15 = $52;$zone$16 = $53;
  }
 }
 if ((label|0) == 13) {
  $43 = ($1<<24>>24)==(0);
  if ($43) {
   $44 = ((($blues)) + 2072|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($$lcssa33|0)<($45|0);
   if (!($46)) {
    return;
   }
  }
  $47 = HEAP32[$alignment>>2]|0;
  $48 = $47 | 2;
  HEAP32[$alignment>>2] = $48;
  $49 = ((($zone$16$lcssa32)) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($alignment)) + 8|0);
  HEAP32[$51>>2] = $50;
  return;
 }
 else if ((label|0) == 17) {
  return;
 }
}
function _psh_globals_set_scale($globals,$x_scale,$y_scale,$x_delta,$y_delta) {
 $globals = $globals|0;
 $x_scale = $x_scale|0;
 $y_scale = $y_scale|0;
 $x_delta = $x_delta|0;
 $y_delta = $y_delta|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($globals)) + 200|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($x_scale|0);
 if ($2) {
  $3 = ((($globals)) + 204|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($x_delta|0);
  if (!($5)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  HEAP32[$0>>2] = $x_scale;
  $6 = ((($globals)) + 204|0);
  HEAP32[$6>>2] = $x_delta;
  _psh_globals_scale_widths($globals,0);
 }
 $7 = ((($globals)) + 404|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($y_scale|0);
 if ($9) {
  $10 = ((($globals)) + 408|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==($y_delta|0);
  if ($12) {
   return 0;
  }
 }
 HEAP32[$7>>2] = $y_scale;
 $13 = ((($globals)) + 408|0);
 HEAP32[$13>>2] = $y_delta;
 _psh_globals_scale_widths($globals,1);
 $14 = ((($globals)) + 412|0);
 _psh_blues_scale_zones($14,$y_scale,$y_delta);
 return 0;
}
function _psh_globals_funcs_init($funcs) {
 $funcs = $funcs|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$funcs>>2] = 51;
 $0 = ((($funcs)) + 4|0);
 HEAP32[$0>>2] = 37;
 $1 = ((($funcs)) + 8|0);
 HEAP32[$1>>2] = 65;
 return;
}
function _psh_globals_scale_widths($globals,$direction) {
 $globals = $globals|0;
 $direction = $direction|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0 = 0, $count$02 = 0, $count$04 = 0, $width$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (((($globals)) + 4|0) + (($direction*204)|0)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (((((($globals)) + 4|0) + (($direction*204)|0)|0)) + 196|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==(0);
 if ($4) {
  return;
 }
 $5 = (((((($globals)) + 4|0) + (($direction*204)|0)|0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_FT_MulFix($6,$3)|0);
 $8 = (((((($globals)) + 4|0) + (($direction*204)|0)|0)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = (($7) + 32)|0;
 $10 = $9 & -64;
 $11 = (((((($globals)) + 4|0) + (($direction*204)|0)|0)) + 12|0);
 HEAP32[$11>>2] = $10;
 $count$02 = (($1) + -1)|0;
 $12 = ($count$02|0)==(0);
 if ($12) {
  return;
 }
 $13 = (((((($globals)) + 4|0) + (($direction*204)|0)|0)) + 16|0);
 $count$04 = $count$02;$width$03 = $13;
 while(1) {
  $14 = HEAP32[$width$03>>2]|0;
  $15 = (_FT_MulFix($14,$3)|0);
  $16 = HEAP32[$8>>2]|0;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(0);
  $19 = (0 - ($17))|0;
  $$ = $18 ? $19 : $17;
  $20 = ($$|0)<(128);
  $$1 = $20 ? $16 : $15;
  $21 = ((($width$03)) + 4|0);
  HEAP32[$21>>2] = $$1;
  $22 = (($$1) + 32)|0;
  $23 = $22 & -64;
  $24 = ((($width$03)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($width$03)) + 12|0);
  $count$0 = (($count$04) + -1)|0;
  $26 = ($count$0|0)==(0);
  if ($26) {
   break;
  } else {
   $count$04 = $count$0;$width$03 = $25;
  }
 }
 return;
}
function _psh_blues_scale_zones($blues,$scale,$delta) {
 $blues = $blues|0;
 $scale = $scale|0;
 $delta = $delta|0;
 var $$ = 0, $$$1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $count$08 = 0, $count1$05 = 0, $count1$05$1 = 0, $count2$03 = 0, $count2$03$1 = 0, $exitcond = 0, $num$013 = 0, $table$0 = 0, $threshold$0$lcssa = 0, $threshold$014 = 0, $zone$09 = 0, $zone1$04 = 0, $zone1$04$1 = 0, $zone2$02 = 0, $zone2$02$1 = 0, $zone2$02$1$lcssa = 0, $zone2$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($scale|0)>(34359737);
 if ($0) {
  $1 = ((($blues)) + 2064|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2 << 3;
  $4 = (($3|0) / 125)&-1;
  $5 = ($4|0)>($scale|0);
  $6 = $5&1;
  $7 = ((($blues)) + 2080|0);
  HEAP8[$7>>0] = $6;
 } else {
  $8 = ($scale*125)|0;
  $9 = ((($blues)) + 2064|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 << 3;
  $12 = ($8|0)<($11|0);
  $13 = $12&1;
  $14 = ((($blues)) + 2080|0);
  HEAP8[$14>>0] = $13;
 }
 $15 = ((($blues)) + 2068|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)>(0);
 L5: do {
  if ($17) {
   $threshold$014 = $16;
   while(1) {
    $18 = (_FT_MulFix($threshold$014,$scale)|0);
    $19 = ($18|0)>(32);
    if (!($19)) {
     $threshold$0$lcssa = $threshold$014;
     break L5;
    }
    $20 = (($threshold$014) + -1)|0;
    $21 = ($threshold$014|0)>(1);
    if ($21) {
     $threshold$014 = $20;
    } else {
     $threshold$0$lcssa = $20;
     break;
    }
   }
  } else {
   $threshold$0$lcssa = $16;
  }
 } while(0);
 $22 = ((($blues)) + 2072|0);
 HEAP32[$22>>2] = $threshold$0$lcssa;
 $23 = ((($blues)) + 1548|0);
 $24 = ((($blues)) + 516|0);
 $25 = ((($blues)) + 1032|0);
 $num$013 = 0;
 while(1) {
  switch ($num$013|0) {
  case 0:  {
   $table$0 = $blues;
   break;
  }
  case 1:  {
   $table$0 = $24;
   break;
  }
  case 2:  {
   $table$0 = $25;
   break;
  }
  default: {
   $table$0 = $23;
  }
  }
  $26 = HEAP32[$table$0>>2]|0;
  $27 = ($26|0)==(0);
  if (!($27)) {
   $28 = ((($table$0)) + 4|0);
   $count$08 = $26;$zone$09 = $28;
   while(1) {
    $29 = ((($zone$09)) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (_FT_MulFix($30,$scale)|0);
    $32 = (($31) + ($delta))|0;
    $33 = ((($zone$09)) + 28|0);
    HEAP32[$33>>2] = $32;
    $34 = ((($zone$09)) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (_FT_MulFix($35,$scale)|0);
    $37 = (($36) + ($delta))|0;
    $38 = ((($zone$09)) + 24|0);
    HEAP32[$38>>2] = $37;
    $39 = HEAP32[$zone$09>>2]|0;
    $40 = (_FT_MulFix($39,$scale)|0);
    $41 = (($40) + ($delta))|0;
    $42 = ((($zone$09)) + 16|0);
    HEAP32[$42>>2] = $41;
    $43 = ((($zone$09)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (_FT_MulFix($44,$scale)|0);
    $46 = ((($zone$09)) + 20|0);
    HEAP32[$46>>2] = $45;
    $47 = HEAP32[$42>>2]|0;
    $48 = (($47) + 32)|0;
    $49 = $48 & -64;
    HEAP32[$42>>2] = $49;
    $50 = (($count$08) + -1)|0;
    $51 = ((($zone$09)) + 32|0);
    $52 = ($50|0)==(0);
    if ($52) {
     break;
    } else {
     $count$08 = $50;$zone$09 = $51;
    }
   }
  }
  $53 = (($num$013) + 1)|0;
  $exitcond = ($53|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $num$013 = $53;
  }
 }
 $54 = HEAP32[$blues>>2]|0;
 $55 = ($54|0)==(0);
 if (!($55)) {
  $56 = ((($blues)) + 4|0);
  $57 = ((($blues)) + 1036|0);
  $58 = ((($blues)) + 1032|0);
  $count1$05 = $54;$zone1$04 = $56;
  while(1) {
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)==(0);
   L27: do {
    if (!($60)) {
     $count2$03 = $59;$zone2$02 = $57;
     while(1) {
      $61 = HEAP32[$zone1$04>>2]|0;
      $62 = HEAP32[$zone2$02>>2]|0;
      $63 = (($61) - ($62))|0;
      $64 = ($63|0)<(0);
      $65 = (0 - ($63))|0;
      $$ = $64 ? $65 : $63;
      $66 = (_FT_MulFix($$,$scale)|0);
      $67 = ($66|0)<(64);
      if ($67) {
       $zone2$02$lcssa = $zone2$02;
       break;
      }
      $80 = (($count2$03) + -1)|0;
      $81 = ((($zone2$02)) + 32|0);
      $82 = ($80|0)==(0);
      if ($82) {
       break L27;
      } else {
       $count2$03 = $80;$zone2$02 = $81;
      }
     }
     $68 = ((($zone2$02$lcssa)) + 28|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($zone1$04)) + 28|0);
     HEAP32[$70>>2] = $69;
     $71 = ((($zone2$02$lcssa)) + 24|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ((($zone1$04)) + 24|0);
     HEAP32[$73>>2] = $72;
     $74 = ((($zone2$02$lcssa)) + 16|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ((($zone1$04)) + 16|0);
     HEAP32[$76>>2] = $75;
     $77 = ((($zone2$02$lcssa)) + 20|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($zone1$04)) + 20|0);
     HEAP32[$79>>2] = $78;
    }
   } while(0);
   $83 = (($count1$05) + -1)|0;
   $84 = ((($zone1$04)) + 32|0);
   $85 = ($83|0)==(0);
   if ($85) {
    break;
   } else {
    $count1$05 = $83;$zone1$04 = $84;
   }
  }
 }
 $86 = ((($blues)) + 516|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(0);
 if ($88) {
  return;
 }
 $89 = ((($blues)) + 520|0);
 $90 = ((($blues)) + 1552|0);
 $91 = ((($blues)) + 1548|0);
 $count1$05$1 = $87;$zone1$04$1 = $89;
 while(1) {
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92|0)==(0);
  L40: do {
   if (!($93)) {
    $count2$03$1 = $92;$zone2$02$1 = $90;
    while(1) {
     $94 = HEAP32[$zone1$04$1>>2]|0;
     $95 = HEAP32[$zone2$02$1>>2]|0;
     $96 = (($94) - ($95))|0;
     $97 = ($96|0)<(0);
     $98 = (0 - ($96))|0;
     $$$1 = $97 ? $98 : $96;
     $99 = (_FT_MulFix($$$1,$scale)|0);
     $100 = ($99|0)<(64);
     if ($100) {
      $zone2$02$1$lcssa = $zone2$02$1;
      break;
     }
     $101 = (($count2$03$1) + -1)|0;
     $102 = ((($zone2$02$1)) + 32|0);
     $103 = ($101|0)==(0);
     if ($103) {
      break L40;
     } else {
      $count2$03$1 = $101;$zone2$02$1 = $102;
     }
    }
    $104 = ((($zone2$02$1$lcssa)) + 28|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($zone1$04$1)) + 28|0);
    HEAP32[$106>>2] = $105;
    $107 = ((($zone2$02$1$lcssa)) + 24|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ((($zone1$04$1)) + 24|0);
    HEAP32[$109>>2] = $108;
    $110 = ((($zone2$02$1$lcssa)) + 16|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ((($zone1$04$1)) + 16|0);
    HEAP32[$112>>2] = $111;
    $113 = ((($zone2$02$1$lcssa)) + 20|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ((($zone1$04$1)) + 20|0);
    HEAP32[$115>>2] = $114;
   }
  } while(0);
  $116 = (($count1$05$1) + -1)|0;
  $117 = ((($zone1$04$1)) + 32|0);
  $118 = ($116|0)==(0);
  if ($118) {
   break;
  } else {
   $count1$05$1 = $116;$zone1$04$1 = $117;
  }
 }
 return;
}
function _psh_globals_new($memory,$priv,$aglobals) {
 $memory = $memory|0;
 $priv = $priv|0;
 $aglobals = $aglobals|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $count$05 = 0, $count$12 = 0, $error = 0, $read$04 = 0;
 var $read$11 = 0, $write$06 = 0, $write2$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (_ft_mem_alloc($memory,2496,$error)|0);
 $1 = HEAP32[$error>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  HEAP32[$aglobals>>2] = $0;
  $75 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($75|0);
 }
 HEAP32[$0>>2] = $memory;
 $3 = ((($0)) + 4|0);
 $4 = ((($0)) + 208|0);
 $5 = ((($0)) + 212|0);
 $6 = ((($priv)) + 120|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 HEAP32[$5>>2] = $8;
 $9 = ((($priv)) + 124|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = ($10<<24>>24)==(0);
 if (!($11)) {
  $12 = $10&255;
  $13 = ((($priv)) + 128|0);
  $14 = ((($0)) + 224|0);
  $count$05 = $12;$read$04 = $13;$write$06 = $14;
  while(1) {
   $15 = HEAP16[$read$04>>1]|0;
   $16 = $15 << 16 >> 16;
   HEAP32[$write$06>>2] = $16;
   $17 = ((($write$06)) + 12|0);
   $18 = ((($read$04)) + 2|0);
   $19 = (($count$05) + -1)|0;
   $20 = ($19|0)==(0);
   if ($20) {
    break;
   } else {
    $count$05 = $19;$read$04 = $18;$write$06 = $17;
   }
  }
 }
 $21 = HEAP8[$9>>0]|0;
 $22 = $21&255;
 $23 = (($22) + 1)|0;
 HEAP32[$4>>2] = $23;
 $24 = ((($0)) + 8|0);
 $25 = ((($priv)) + 122|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 HEAP32[$24>>2] = $27;
 $28 = ((($priv)) + 125|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29<<24>>24)==(0);
 if (!($30)) {
  $31 = $29&255;
  $32 = ((($priv)) + 154|0);
  $33 = ((($0)) + 20|0);
  $count$12 = $31;$read$11 = $32;$write2$03 = $33;
  while(1) {
   $34 = HEAP16[$read$11>>1]|0;
   $35 = $34 << 16 >> 16;
   HEAP32[$write2$03>>2] = $35;
   $36 = ((($write2$03)) + 12|0);
   $37 = ((($read$11)) + 2|0);
   $38 = (($count$12) + -1)|0;
   $39 = ($38|0)==(0);
   if ($39) {
    break;
   } else {
    $count$12 = $38;$read$11 = $37;$write2$03 = $36;
   }
  }
 }
 $40 = HEAP8[$28>>0]|0;
 $41 = $40&255;
 $42 = (($41) + 1)|0;
 HEAP32[$3>>2] = $42;
 $43 = ((($0)) + 412|0);
 $44 = ((($priv)) + 8|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = ((($priv)) + 12|0);
 $48 = ((($priv)) + 9|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = $49&255;
 $51 = ((($priv)) + 40|0);
 $52 = ((($priv)) + 116|0);
 $53 = HEAP32[$52>>2]|0;
 _psh_blues_set_zones($43,$46,$47,$50,$51,$53,0);
 $54 = ((($priv)) + 10|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = ((($priv)) + 60|0);
 $58 = ((($priv)) + 11|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = ((($priv)) + 88|0);
 $62 = HEAP32[$52>>2]|0;
 _psh_blues_set_zones($43,$56,$57,$60,$61,$62,1);
 $63 = ((($priv)) + 108|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($0)) + 2476|0);
 HEAP32[$65>>2] = $64;
 $66 = ((($priv)) + 112|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($0)) + 2480|0);
 HEAP32[$68>>2] = $67;
 $69 = HEAP32[$52>>2]|0;
 $70 = ((($0)) + 2488|0);
 HEAP32[$70>>2] = $69;
 $71 = ((($0)) + 200|0);
 HEAP32[$71>>2] = 0;
 $72 = ((($0)) + 204|0);
 HEAP32[$72>>2] = 0;
 $73 = ((($0)) + 404|0);
 HEAP32[$73>>2] = 0;
 $74 = ((($0)) + 408|0);
 HEAP32[$74>>2] = 0;
 HEAP32[$aglobals>>2] = $0;
 $75 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($75|0);
}
function _psh_globals_destroy($globals) {
 $globals = $globals|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($globals|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = HEAP32[$globals>>2]|0;
 $2 = ((($globals)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($globals)) + 208|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($globals)) + 412|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($globals)) + 928|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($globals)) + 1444|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($globals)) + 1960|0);
 HEAP32[$7>>2] = 0;
 _ft_mem_free($1,$globals);
 return;
}
function _psh_blues_set_zones($target,$count,$blues,$count_others,$other_blues,$fuzz,$family) {
 $target = $target|0;
 $count = $count|0;
 $blues = $blues|0;
 $count_others = $count_others|0;
 $other_blues = $other_blues|0;
 $fuzz = $fuzz|0;
 $family = $family|0;
 var $$017 = 0, $$113 = 0, $$3 = 0, $$3$1 = 0, $$31 = 0, $$31$1 = 0, $$34 = 0, $$34$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $bot_table$0 = 0;
 var $scevgep$124 = 0, $scevgep23 = 0, $top$0 = 0, $top$0$1 = 0, $top$0$1$lcssa = 0, $top$0$lcssa = 0, $top$0$lcssa$1 = 0, $top$0$lcssa29 = 0, $top$02 = 0, $top$02$1 = 0, $top$05 = 0, $top$05$1 = 0, $top_table$0 = 0, $uglygep = 0, $uglygep$1 = 0, $zone$016 = 0, $zone1$012 = 0, $zone4$011 = 0, $zone4$011$1 = 0, $zone4$1$lcssa = 0;
 var $zone4$1$lcssa$1 = 0, $zone4$13 = 0, $zone4$13$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($family|0)==(0);
 $1 = ((($target)) + 1032|0);
 $2 = ((($target)) + 1548|0);
 $3 = ((($target)) + 516|0);
 $bot_table$0 = $0 ? $3 : $2;
 $top_table$0 = $0 ? $target : $1;
 HEAP32[$top_table$0>>2] = 0;
 HEAP32[$bot_table$0>>2] = 0;
 _psh_blues_set_zones_0(0,$count,$blues,$top_table$0,$bot_table$0);
 _psh_blues_set_zones_0(1,$count_others,$other_blues,$top_table$0,$bot_table$0);
 $4 = HEAP32[$top_table$0>>2]|0;
 $5 = HEAP32[$bot_table$0>>2]|0;
 $6 = ($4|0)>(0);
 if ($6) {
  $7 = ((($top_table$0)) + 4|0);
  $$017 = $4;$zone$016 = $7;
  while(1) {
   $8 = ($$017>>>0)>(1);
   if ($8) {
    $9 = ((($zone$016)) + 32|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$zone$016>>2]|0;
    $12 = (($10) - ($11))|0;
    $13 = ((($zone$016)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)>($12|0);
    if ($15) {
     HEAP32[$13>>2] = $12;
    }
   }
   $16 = HEAP32[$zone$016>>2]|0;
   $17 = ((($zone$016)) + 12|0);
   HEAP32[$17>>2] = $16;
   $18 = ((($zone$016)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$zone$016>>2]|0;
   $21 = (($20) + ($19))|0;
   $22 = ((($zone$016)) + 8|0);
   HEAP32[$22>>2] = $21;
   $23 = (($$017) + -1)|0;
   $24 = ((($zone$016)) + 32|0);
   $25 = ($23|0)==(0);
   if ($25) {
    break;
   } else {
    $$017 = $23;$zone$016 = $24;
   }
  }
 }
 $26 = ($5|0)>(0);
 if ($26) {
  $27 = ((($bot_table$0)) + 4|0);
  $$113 = $5;$zone1$012 = $27;
  while(1) {
   $28 = ($$113>>>0)>(1);
   if ($28) {
    $29 = HEAP32[$zone1$012>>2]|0;
    $30 = ((($zone1$012)) + 32|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) - ($31))|0;
    $33 = ((($zone1$012)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)<($32|0);
    if ($35) {
     HEAP32[$33>>2] = $32;
    }
   }
   $36 = HEAP32[$zone1$012>>2]|0;
   $37 = ((($zone1$012)) + 8|0);
   HEAP32[$37>>2] = $36;
   $38 = ((($zone1$012)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$zone1$012>>2]|0;
   $41 = (($40) + ($39))|0;
   $42 = ((($zone1$012)) + 12|0);
   HEAP32[$42>>2] = $41;
   $43 = (($$113) + -1)|0;
   $44 = ((($zone1$012)) + 32|0);
   $45 = ($43|0)==(0);
   if ($45) {
    break;
   } else {
    $$113 = $43;$zone1$012 = $44;
   }
  }
 }
 $46 = $fuzz << 1;
 $zone4$011 = ((($top_table$0)) + 4|0);
 $47 = ($4|0)==(0);
 if (!($47)) {
  $48 = ((($top_table$0)) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) - ($fuzz))|0;
  HEAP32[$48>>2] = $50;
  $51 = ((($top_table$0)) + 12|0);
  $$31 = (($4) + -1)|0;
  $top$02 = HEAP32[$51>>2]|0;
  $52 = ($$31|0)==(0);
  if ($52) {
   $top$0$lcssa = $top$02;$zone4$1$lcssa = $zone4$011;
  } else {
   $uglygep = ((($top_table$0)) + -28|0);
   $53 = $4 << 3;
   $scevgep23 = (($uglygep) + ($53<<2)|0);
   $$34 = $$31;$top$05 = $top$02;$zone4$13 = $zone4$011;
   while(1) {
    $54 = ((($zone4$13)) + 32|0);
    $55 = ((($zone4$13)) + 44|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) - ($top$05))|0;
    $58 = ($57|0)<($46|0);
    if ($58) {
     $59 = (($57|0) / 2)&-1;
     $60 = (($59) + ($top$05))|0;
     HEAP32[$55>>2] = $60;
     $61 = ((($zone4$13)) + 8|0);
     HEAP32[$61>>2] = $60;
    } else {
     $62 = (($top$05) + ($fuzz))|0;
     $63 = ((($zone4$13)) + 8|0);
     HEAP32[$63>>2] = $62;
     $64 = (($56) - ($fuzz))|0;
     HEAP32[$55>>2] = $64;
    }
    $65 = ((($zone4$13)) + 40|0);
    $$3 = (($$34) + -1)|0;
    $top$0 = HEAP32[$65>>2]|0;
    $66 = ($$3|0)==(0);
    if ($66) {
     $top$0$lcssa29 = $top$0;
     break;
    } else {
     $$34 = $$3;$top$05 = $top$0;$zone4$13 = $54;
    }
   }
   $top$0$lcssa = $top$0$lcssa29;$zone4$1$lcssa = $scevgep23;
  }
  $67 = (($top$0$lcssa) + ($fuzz))|0;
  $68 = ((($zone4$1$lcssa)) + 8|0);
  HEAP32[$68>>2] = $67;
 }
 $zone4$011$1 = ((($bot_table$0)) + 4|0);
 $69 = ($5|0)==(0);
 if ($69) {
  return;
 }
 $70 = ((($bot_table$0)) + 16|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) - ($fuzz))|0;
 HEAP32[$70>>2] = $72;
 $73 = ((($bot_table$0)) + 12|0);
 $$31$1 = (($5) + -1)|0;
 $top$02$1 = HEAP32[$73>>2]|0;
 $74 = ($$31$1|0)==(0);
 if ($74) {
  $top$0$lcssa$1 = $top$02$1;$zone4$1$lcssa$1 = $zone4$011$1;
 } else {
  $uglygep$1 = ((($bot_table$0)) + -28|0);
  $75 = $5 << 3;
  $scevgep$124 = (($uglygep$1) + ($75<<2)|0);
  $$34$1 = $$31$1;$top$05$1 = $top$02$1;$zone4$13$1 = $zone4$011$1;
  while(1) {
   $76 = ((($zone4$13$1)) + 32|0);
   $77 = ((($zone4$13$1)) + 44|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($78) - ($top$05$1))|0;
   $80 = ($79|0)<($46|0);
   if ($80) {
    $84 = (($79|0) / 2)&-1;
    $85 = (($84) + ($top$05$1))|0;
    HEAP32[$77>>2] = $85;
    $86 = ((($zone4$13$1)) + 8|0);
    HEAP32[$86>>2] = $85;
   } else {
    $81 = (($top$05$1) + ($fuzz))|0;
    $82 = ((($zone4$13$1)) + 8|0);
    HEAP32[$82>>2] = $81;
    $83 = (($78) - ($fuzz))|0;
    HEAP32[$77>>2] = $83;
   }
   $87 = ((($zone4$13$1)) + 40|0);
   $$3$1 = (($$34$1) + -1)|0;
   $top$0$1 = HEAP32[$87>>2]|0;
   $88 = ($$3$1|0)==(0);
   if ($88) {
    $top$0$1$lcssa = $top$0$1;
    break;
   } else {
    $$34$1 = $$3$1;$top$05$1 = $top$0$1;$zone4$13$1 = $76;
   }
  }
  $top$0$lcssa$1 = $top$0$1$lcssa;$zone4$1$lcssa$1 = $scevgep$124;
 }
 $89 = (($top$0$lcssa$1) + ($fuzz))|0;
 $90 = ((($zone4$1$lcssa$1)) + 8|0);
 HEAP32[$90>>2] = $89;
 return;
}
function _psh_blues_set_zones_0($is_others,$read_count,$read,$top_table,$bot_table) {
 $is_others = $is_others|0;
 $read_count = $read_count|0;
 $read = $read|0;
 $top_table = $top_table|0;
 $bot_table = $bot_table|0;
 var $$0110 = 0, $$016 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $bot_table$pn = 0, $count$0 = 0, $count$12 = 0, $count$12$lcssa = 0, $count$28 = 0, $count_bot$0$lcssa = 0, $count_bot$013 = 0, $count_bot$1 = 0, $count_top$0$lcssa = 0, $count_top$011 = 0, $count_top$1 = 0, $delta$0 = 0, $first$015 = 0, $first$1 = 0, $reference$0 = 0, $top$0 = 0, $zone$0$lcssa26 = 0, $zone$03 = 0;
 var $zone$03$lcssa = 0, $zone$03$lcssa45 = 0, $zones$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$top_table>>2]|0;
 $1 = HEAP32[$bot_table>>2]|0;
 $2 = ($read_count>>>0)>(1);
 if ($2) {
  $$0110 = $read;$$016 = $read_count;$count_bot$013 = $1;$count_top$011 = $0;$first$015 = 1;
 } else {
  $count_bot$0$lcssa = $1;$count_top$0$lcssa = $0;
  HEAP32[$top_table>>2] = $count_top$0$lcssa;
  HEAP32[$bot_table>>2] = $count_bot$0$lcssa;
  return;
 }
 while(1) {
  $3 = $first$015 | $is_others;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   $11 = HEAP16[$$0110>>1]|0;
   $12 = $11 << 16 >> 16;
   $13 = ((($$0110)) + 2|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14 << 16 >> 16;
   $16 = (($15) - ($12))|0;
   $bot_table$pn = $top_table;$count$0 = $count_top$011;$delta$0 = $16;$first$1 = $first$015;$reference$0 = $12;$top$0 = 1;
  } else {
   $5 = ((($$0110)) + 2|0);
   $6 = HEAP16[$5>>1]|0;
   $7 = $6 << 16 >> 16;
   $8 = HEAP16[$$0110>>1]|0;
   $9 = $8 << 16 >> 16;
   $10 = (($9) - ($7))|0;
   $bot_table$pn = $bot_table;$count$0 = $count_bot$013;$delta$0 = $10;$first$1 = 0;$reference$0 = $7;$top$0 = 0;
  }
  $zones$0 = ((($bot_table$pn)) + 4|0);
  $17 = ($count$0|0)==(0);
  L9: do {
   if ($17) {
    $zone$0$lcssa26 = $zones$0;
    label = 16;
   } else {
    $count$12 = $count$0;$zone$03 = $zones$0;
    while(1) {
     $18 = HEAP32[$zone$03>>2]|0;
     $19 = ($reference$0|0)<($18|0);
     if ($19) {
      $count$12$lcssa = $count$12;$zone$03$lcssa = $zone$03;
      label = 7;
      break;
     }
     $20 = ($reference$0|0)==($18|0);
     if ($20) {
      $zone$03$lcssa45 = $zone$03;
      break;
     }
     $26 = (($count$12) + -1)|0;
     $27 = ((($zone$03)) + 32|0);
     $28 = ($26|0)==(0);
     if ($28) {
      $zone$0$lcssa26 = $27;
      label = 16;
      break L9;
     } else {
      $count$12 = $26;$zone$03 = $27;
     }
    }
    if ((label|0) == 7) {
     label = 0;
     $count$28 = $count$12$lcssa;
     while(1) {
      $29 = (($zone$03$lcssa) + ($count$28<<5)|0);
      $30 = (($count$28) + -1)|0;
      $31 = (($zone$03$lcssa) + ($30<<5)|0);
      ;HEAP32[$29>>2]=HEAP32[$31>>2]|0;HEAP32[$29+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$29+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$29+12>>2]=HEAP32[$31+12>>2]|0;HEAP32[$29+16>>2]=HEAP32[$31+16>>2]|0;HEAP32[$29+20>>2]=HEAP32[$31+20>>2]|0;HEAP32[$29+24>>2]=HEAP32[$31+24>>2]|0;HEAP32[$29+28>>2]=HEAP32[$31+28>>2]|0;
      $32 = ($30|0)==(0);
      if ($32) {
       $zone$0$lcssa26 = $zone$03$lcssa;
       label = 16;
       break L9;
      } else {
       $count$28 = $30;
      }
     }
    }
    $21 = ((($zone$03$lcssa45)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($delta$0|0)<(0);
    if ($23) {
     $24 = ($delta$0|0)<($22|0);
     if (!($24)) {
      $count_bot$1 = $count_bot$013;$count_top$1 = $count_top$011;
      break;
     }
     HEAP32[$21>>2] = $delta$0;
     $count_bot$1 = $count_bot$013;$count_top$1 = $count_top$011;
     break;
    } else {
     $25 = ($delta$0|0)>($22|0);
     if (!($25)) {
      $count_bot$1 = $count_bot$013;$count_top$1 = $count_top$011;
      break;
     }
     HEAP32[$21>>2] = $delta$0;
     $count_bot$1 = $count_bot$013;$count_top$1 = $count_top$011;
     break;
    }
   }
  } while(0);
  do {
   if ((label|0) == 16) {
    label = 0;
    HEAP32[$zone$0$lcssa26>>2] = $reference$0;
    $33 = ((($zone$0$lcssa26)) + 4|0);
    HEAP32[$33>>2] = $delta$0;
    $34 = ($top$0<<24>>24)==(0);
    if ($34) {
     $36 = (($count_bot$013) + 1)|0;
     $count_bot$1 = $36;$count_top$1 = $count_top$011;
     break;
    } else {
     $35 = (($count_top$011) + 1)|0;
     $count_bot$1 = $count_bot$013;$count_top$1 = $35;
     break;
    }
   }
  } while(0);
  $37 = ((($$0110)) + 4|0);
  $38 = (($$016) + -2)|0;
  $39 = ($38>>>0)>(1);
  if ($39) {
   $$0110 = $37;$$016 = $38;$count_bot$013 = $count_bot$1;$count_top$011 = $count_top$1;$first$015 = $first$1;
  } else {
   $count_bot$0$lcssa = $count_bot$1;$count_top$0$lcssa = $count_top$1;
   break;
  }
 }
 HEAP32[$top_table>>2] = $count_top$0$lcssa;
 HEAP32[$bot_table>>2] = $count_bot$0$lcssa;
 return;
}
function _psnames_get_service($module,$service_id) {
 $module = $module|0;
 $service_id = $service_id|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_service_list_lookup(11752,$service_id)|0);
 return ($0|0);
}
function _ps_unicode_value($glyph_name) {
 $glyph_name = $glyph_name|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $d$03 = 0, $d$03$1 = 0, $d$03$2 = 0, $d$03$3 = 0, $d5$09 = 0, $d5$09$1 = 0, $d5$09$2 = 0, $d5$09$3 = 0, $d5$09$4 = 0, $d5$09$5 = 0, $or$cond = 0, $or$cond$1 = 0, $or$cond$2 = 0, $or$cond$3 = 0, $or$cond$4 = 0, $or$cond$5 = 0, $or$cond36 = 0;
 var $or$cond37 = 0, $or$cond38 = 0, $or$cond39 = 0, $p3$0 = 0, $p3$0$1 = 0, $p3$0$2 = 0, $p3$0$3 = 0, $p3$0$4 = 0, $p3$0$5 = 0, $p3$018 = 0, $p3$022 = 0, $p6$0 = 0, $p6$0$lcssa44 = 0, $p6$045 = 0, $value2$016 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$glyph_name>>0]|0;
 $1 = ($0<<24>>24)==(117);
 L1: do {
  if ($1) {
   $2 = ((($glyph_name)) + 1|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(110);
   L3: do {
    if ($4) {
     $5 = ((($glyph_name)) + 2|0);
     $6 = HEAP8[$5>>0]|0;
     $7 = ($6<<24>>24)==(105);
     if ($7) {
      $8 = ((($glyph_name)) + 3|0);
      $9 = HEAP8[$8>>0]|0;
      $10 = $9&255;
      $11 = (($10) + -48)|0;
      $12 = ($11>>>0)>(9);
      if ($12) {
       $13 = (($10) + -65)|0;
       $14 = ($13>>>0)>(5);
       $15 = (($10) + -55)|0;
       $16 = ($15>>>0)>(15);
       $or$cond36 = $14 | $16;
       if ($or$cond36) {
        break;
       } else {
        $d$03 = $15;
       }
      } else {
       $d$03 = $11;
      }
      $17 = ((($glyph_name)) + 4|0);
      $18 = HEAP8[$17>>0]|0;
      $19 = $18&255;
      $20 = (($19) + -48)|0;
      $21 = ($20>>>0)>(9);
      if ($21) {
       $96 = (($19) + -65)|0;
       $97 = ($96>>>0)>(5);
       $98 = (($19) + -55)|0;
       $99 = ($98>>>0)>(15);
       $or$cond37 = $97 | $99;
       if ($or$cond37) {
        break;
       } else {
        $d$03$1 = $98;
       }
      } else {
       $d$03$1 = $20;
      }
      $100 = $d$03 << 4;
      $101 = (($d$03$1) + ($100))|0;
      $102 = ((($glyph_name)) + 5|0);
      $103 = HEAP8[$102>>0]|0;
      $104 = $103&255;
      $105 = (($104) + -48)|0;
      $106 = ($105>>>0)>(9);
      if ($106) {
       $107 = (($104) + -65)|0;
       $108 = ($107>>>0)>(5);
       $109 = (($104) + -55)|0;
       $110 = ($109>>>0)>(15);
       $or$cond38 = $108 | $110;
       if ($or$cond38) {
        break;
       } else {
        $d$03$2 = $109;
       }
      } else {
       $d$03$2 = $105;
      }
      $111 = $101 << 4;
      $23 = (($d$03$2) + ($111))|0;
      $112 = ((($glyph_name)) + 6|0);
      $113 = HEAP8[$112>>0]|0;
      $114 = $113&255;
      $115 = (($114) + -48)|0;
      $116 = ($115>>>0)>(9);
      if ($116) {
       $117 = (($114) + -65)|0;
       $118 = ($117>>>0)>(5);
       $119 = (($114) + -55)|0;
       $120 = ($119>>>0)>(15);
       $or$cond39 = $118 | $120;
       if ($or$cond39) {
        break;
       } else {
        $d$03$3 = $119;
       }
      } else {
       $d$03$3 = $115;
      }
      $22 = $23 << 4;
      $24 = (($d$03$3) + ($22))|0;
      $25 = ((($glyph_name)) + 7|0);
      $26 = HEAP8[$25>>0]|0;
      switch ($26<<24>>24) {
      case 46:  {
       break;
      }
      case 0:  {
       $$0 = $24;
       return ($$0|0);
       break;
      }
      default: {
       break L3;
      }
      }
      $27 = $24 | -2147483648;
      $$0 = $27;
      return ($$0|0);
     }
    }
   } while(0);
   $$pr = HEAP8[$glyph_name>>0]|0;
   $28 = ($$pr<<24>>24)==(117);
   if ($28) {
    $p3$022 = ((($glyph_name)) + 1|0);
    $29 = HEAP8[$p3$022>>0]|0;
    $30 = $29&255;
    $31 = (($30) + -48)|0;
    $32 = ($31>>>0)>(9);
    if ($32) {
     $33 = (($30) + -65)|0;
     $34 = ($33>>>0)>(5);
     $35 = (($30) + -55)|0;
     $36 = ($35>>>0)>(15);
     $or$cond = $34 | $36;
     if ($or$cond) {
      $p6$0 = $glyph_name;
      break;
     } else {
      $d5$09 = $35;
     }
    } else {
     $d5$09 = $31;
    }
    $p3$0 = ((($glyph_name)) + 2|0);
    $37 = HEAP8[$p3$0>>0]|0;
    $38 = $37&255;
    $39 = (($38) + -48)|0;
    $40 = ($39>>>0)>(9);
    if ($40) {
     $50 = (($38) + -65)|0;
     $51 = ($50>>>0)>(5);
     $52 = (($38) + -55)|0;
     $53 = ($52>>>0)>(15);
     $or$cond$1 = $51 | $53;
     if ($or$cond$1) {
      $p6$0 = $glyph_name;
      break;
     } else {
      $d5$09$1 = $52;
     }
    } else {
     $d5$09$1 = $39;
    }
    $54 = $d5$09 << 4;
    $55 = (($d5$09$1) + ($54))|0;
    $p3$0$1 = ((($glyph_name)) + 3|0);
    $56 = HEAP8[$p3$0$1>>0]|0;
    $57 = $56&255;
    $58 = (($57) + -48)|0;
    $59 = ($58>>>0)>(9);
    if ($59) {
     $60 = (($57) + -65)|0;
     $61 = ($60>>>0)>(5);
     $62 = (($57) + -55)|0;
     $63 = ($62>>>0)>(15);
     $or$cond$2 = $61 | $63;
     if ($or$cond$2) {
      $p6$0 = $glyph_name;
      break;
     } else {
      $d5$09$2 = $62;
     }
    } else {
     $d5$09$2 = $58;
    }
    $64 = $55 << 4;
    $65 = (($d5$09$2) + ($64))|0;
    $p3$0$2 = ((($glyph_name)) + 4|0);
    $66 = HEAP8[$p3$0$2>>0]|0;
    $67 = $66&255;
    $68 = (($67) + -48)|0;
    $69 = ($68>>>0)>(9);
    if ($69) {
     $70 = (($67) + -65)|0;
     $71 = ($70>>>0)>(5);
     $72 = (($67) + -55)|0;
     $73 = ($72>>>0)>(15);
     $or$cond$3 = $71 | $73;
     if ($or$cond$3) {
      $p6$0 = $glyph_name;
      break;
     } else {
      $d5$09$3 = $72;
     }
    } else {
     $d5$09$3 = $68;
    }
    $74 = $65 << 4;
    $75 = (($d5$09$3) + ($74))|0;
    $p3$0$3 = ((($glyph_name)) + 5|0);
    $76 = HEAP8[$p3$0$3>>0]|0;
    $77 = $76&255;
    $78 = (($77) + -48)|0;
    $79 = ($78>>>0)>(9);
    if ($79) {
     $80 = (($77) + -65)|0;
     $81 = ($80>>>0)>(5);
     $82 = (($77) + -55)|0;
     $83 = ($82>>>0)>(15);
     $or$cond$4 = $81 | $83;
     if ($or$cond$4) {
      $p3$018 = $p3$0$3;$value2$016 = $75;
     } else {
      $d5$09$4 = $82;
      label = 29;
     }
    } else {
     $d5$09$4 = $78;
     label = 29;
    }
    do {
     if ((label|0) == 29) {
      $84 = $75 << 4;
      $85 = (($d5$09$4) + ($84))|0;
      $p3$0$4 = ((($glyph_name)) + 6|0);
      $86 = HEAP8[$p3$0$4>>0]|0;
      $87 = $86&255;
      $88 = (($87) + -48)|0;
      $89 = ($88>>>0)>(9);
      if ($89) {
       $90 = (($87) + -65)|0;
       $91 = ($90>>>0)>(5);
       $92 = (($87) + -55)|0;
       $93 = ($92>>>0)>(15);
       $or$cond$5 = $91 | $93;
       if ($or$cond$5) {
        $p3$018 = $p3$0$4;$value2$016 = $85;
        break;
       } else {
        $d5$09$5 = $92;
       }
      } else {
       $d5$09$5 = $88;
      }
      $94 = $85 << 4;
      $95 = (($d5$09$5) + ($94))|0;
      $p3$0$5 = ((($glyph_name)) + 7|0);
      $p3$018 = $p3$0$5;$value2$016 = $95;
     }
    } while(0);
    $41 = HEAP8[$p3$018>>0]|0;
    switch ($41<<24>>24) {
    case 46:  {
     break;
    }
    case 0:  {
     $$0 = $value2$016;
     return ($$0|0);
     break;
    }
    default: {
     $p6$0 = $glyph_name;
     break L1;
    }
    }
    $42 = $value2$016 | -2147483648;
    $$0 = $42;
    return ($$0|0);
   } else {
    $p6$0 = $glyph_name;
   }
  } else {
   $p6$0 = $glyph_name;
  }
 } while(0);
 L48: while(1) {
  $43 = HEAP8[$p6$0>>0]|0;
  switch ($43<<24>>24) {
  case 0:  {
   $p6$045 = $p6$0;
   break L48;
   break;
  }
  case 46:  {
   $44 = ($p6$0>>>0)>($glyph_name>>>0);
   if ($44) {
    $p6$0$lcssa44 = $p6$0;
    label = 18;
    break L48;
   }
   break;
  }
  default: {
  }
  }
  $45 = ((($p6$0)) + 1|0);
  $p6$0 = $45;
 }
 if ((label|0) == 18) {
  $46 = ($p6$0$lcssa44|0)==(0|0);
  if ($46) {
   $p6$045 = $p6$0$lcssa44;
  } else {
   $48 = (_ft_get_adobe_glyph_index($glyph_name,$p6$0$lcssa44)|0);
   $49 = $48 | -2147483648;
   $$0 = $49;
   return ($$0|0);
  }
 }
 $47 = (_ft_get_adobe_glyph_index($glyph_name,$p6$045)|0);
 $$0 = $47;
 return ($$0|0);
}
function _ps_unicodes_init($memory,$table,$num_glyphs,$get_glyph_name,$free_glyph_name,$glyph_data) {
 $memory = $memory|0;
 $table = $table|0;
 $num_glyphs = $num_glyphs|0;
 $get_glyph_name = $get_glyph_name|0;
 $free_glyph_name = $free_glyph_name|0;
 $glyph_data = $glyph_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $error = 0, $exitcond = 0, $extra_glyph_list_states = 0;
 var $extra_glyphs = 0, $map$0$lcssa = 0, $map$03 = 0, $map$1 = 0, $map$2 = 0, $map$4 = 0, $map$4$1 = 0, $map$4$2 = 0, $map$4$3 = 0, $map$4$4 = 0, $map$4$5 = 0, $map$4$6 = 0, $map$4$7 = 0, $map$4$8 = 0, $map$4$9 = 0, $n$04 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $error = sp + 40|0;
 $extra_glyph_list_states = sp + 48|0;
 $extra_glyphs = sp;
 dest=$extra_glyph_list_states; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($table)) + 16|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($table)) + 20|0);
 HEAP32[$1>>2] = 0;
 $2 = (($num_glyphs) + 10)|0;
 $3 = (_ft_mem_realloc($memory,8,0,$2,0,$error)|0);
 HEAP32[$1>>2] = $3;
 $4 = HEAP32[$error>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $32 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $6 = ($num_glyphs|0)==(0);
 if ($6) {
  $map$0$lcssa = $3;
 } else {
  $7 = ($free_glyph_name|0)==(0|0);
  $map$03 = $3;$n$04 = 0;
  while(1) {
   $8 = (FUNCTION_TABLE_iii[$get_glyph_name & 255]($glyph_data,$n$04)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $map$2 = $map$03;
   } else {
    _ps_check_extra_glyph_name($8,$n$04,$extra_glyphs,$extra_glyph_list_states);
    $10 = (_ps_unicode_value($8)|0);
    $11 = $10 & 2147483647;
    $12 = ($11|0)==(0);
    if ($12) {
     $map$1 = $map$03;
    } else {
     _ps_check_extra_glyph_unicode($10,$extra_glyph_list_states);
     HEAP32[$map$03>>2] = $10;
     $13 = ((($map$03)) + 4|0);
     HEAP32[$13>>2] = $n$04;
     $14 = ((($map$03)) + 8|0);
     $map$1 = $14;
    }
    if ($7) {
     $map$2 = $map$1;
    } else {
     FUNCTION_TABLE_vii[$free_glyph_name & 31]($glyph_data,$8);
     $map$2 = $map$1;
    }
   }
   $15 = (($n$04) + 1)|0;
   $exitcond = ($15|0)==($num_glyphs|0);
   if ($exitcond) {
    $map$0$lcssa = $map$2;
    break;
   } else {
    $map$03 = $map$2;$n$04 = $15;
   }
  }
 }
 $16 = HEAP32[$extra_glyph_list_states>>2]|0;
 $17 = ($16|0)==(1);
 if ($17) {
  HEAP32[$map$0$lcssa>>2] = 916;
  $18 = HEAP32[$extra_glyphs>>2]|0;
  $19 = ((($map$0$lcssa)) + 4|0);
  HEAP32[$19>>2] = $18;
  $20 = ((($map$0$lcssa)) + 8|0);
  $map$4 = $20;
 } else {
  $map$4 = $map$0$lcssa;
 }
 $21 = ((($extra_glyph_list_states)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(1);
 if ($23) {
  HEAP32[$map$4>>2] = 937;
  $33 = ((($extra_glyphs)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($map$4)) + 4|0);
  HEAP32[$35>>2] = $34;
  $36 = ((($map$4)) + 8|0);
  $map$4$1 = $36;
 } else {
  $map$4$1 = $map$4;
 }
 $37 = ((($extra_glyph_list_states)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(1);
 if ($39) {
  HEAP32[$map$4$1>>2] = 8725;
  $40 = ((($extra_glyphs)) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($map$4$1)) + 4|0);
  HEAP32[$42>>2] = $41;
  $43 = ((($map$4$1)) + 8|0);
  $map$4$2 = $43;
 } else {
  $map$4$2 = $map$4$1;
 }
 $44 = ((($extra_glyph_list_states)) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(1);
 if ($46) {
  HEAP32[$map$4$2>>2] = 173;
  $47 = ((($extra_glyphs)) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ((($map$4$2)) + 4|0);
  HEAP32[$49>>2] = $48;
  $50 = ((($map$4$2)) + 8|0);
  $map$4$3 = $50;
 } else {
  $map$4$3 = $map$4$2;
 }
 $51 = ((($extra_glyph_list_states)) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(1);
 if ($53) {
  HEAP32[$map$4$3>>2] = 713;
  $54 = ((($extra_glyphs)) + 16|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ((($map$4$3)) + 4|0);
  HEAP32[$56>>2] = $55;
  $57 = ((($map$4$3)) + 8|0);
  $map$4$4 = $57;
 } else {
  $map$4$4 = $map$4$3;
 }
 $58 = ((($extra_glyph_list_states)) + 20|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)==(1);
 if ($60) {
  HEAP32[$map$4$4>>2] = 956;
  $61 = ((($extra_glyphs)) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($map$4$4)) + 4|0);
  HEAP32[$63>>2] = $62;
  $64 = ((($map$4$4)) + 8|0);
  $map$4$5 = $64;
 } else {
  $map$4$5 = $map$4$4;
 }
 $65 = ((($extra_glyph_list_states)) + 24|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)==(1);
 if ($67) {
  HEAP32[$map$4$5>>2] = 8729;
  $68 = ((($extra_glyphs)) + 24|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($map$4$5)) + 4|0);
  HEAP32[$70>>2] = $69;
  $71 = ((($map$4$5)) + 8|0);
  $map$4$6 = $71;
 } else {
  $map$4$6 = $map$4$5;
 }
 $72 = ((($extra_glyph_list_states)) + 28|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(1);
 if ($74) {
  HEAP32[$map$4$6>>2] = 160;
  $75 = ((($extra_glyphs)) + 28|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($map$4$6)) + 4|0);
  HEAP32[$77>>2] = $76;
  $78 = ((($map$4$6)) + 8|0);
  $map$4$7 = $78;
 } else {
  $map$4$7 = $map$4$6;
 }
 $79 = ((($extra_glyph_list_states)) + 32|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)==(1);
 if ($81) {
  HEAP32[$map$4$7>>2] = 538;
  $82 = ((($extra_glyphs)) + 32|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ((($map$4$7)) + 4|0);
  HEAP32[$84>>2] = $83;
  $85 = ((($map$4$7)) + 8|0);
  $map$4$8 = $85;
 } else {
  $map$4$8 = $map$4$7;
 }
 $86 = ((($extra_glyph_list_states)) + 36|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(1);
 if ($88) {
  HEAP32[$map$4$8>>2] = 539;
  $89 = ((($extra_glyphs)) + 36|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ((($map$4$8)) + 4|0);
  HEAP32[$91>>2] = $90;
  $92 = ((($map$4$8)) + 8|0);
  $map$4$9 = $92;
 } else {
  $map$4$9 = $map$4$8;
 }
 $24 = HEAP32[$1>>2]|0;
 $93 = $map$4$9;
 $94 = $24;
 $95 = (($93) - ($94))|0;
 $29 = $95 >> 3;
 $96 = ($29|0)==(0);
 if ($96) {
  _ft_mem_free($memory,$24);
  HEAP32[$1>>2] = 0;
  $25 = HEAP32[$error>>2]|0;
  $26 = ($25|0)==(0);
  if ($26) {
   HEAP32[$error>>2] = 163;
  }
 } else {
  $27 = $num_glyphs >>> 1;
  $28 = ($29>>>0)<($27>>>0);
  if ($28) {
   $30 = (_ft_mem_realloc($memory,8,$num_glyphs,$29,$24,$error)|0);
   HEAP32[$1>>2] = $30;
   HEAP32[$error>>2] = 0;
  }
  $31 = HEAP32[$1>>2]|0;
  _qsort($31,$29,8,153);
 }
 HEAP32[$0>>2] = $29;
 $32 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($32|0);
}
function _ps_unicodes_char_index($table,$unicode) {
 $table = $table|0;
 $unicode = $unicode|0;
 var $$0 = 0, $$lcssa36 = 0, $$result$0 = 0, $$result$0$lcssa = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max$0$ph11 = 0, $min$0$ph12 = 0, $min$04 = 0, $min$04$lcssa35 = 0, $result$0$ph13 = 0, $result$05 = 0, $result$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($table)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + -1)|0;
 $4 = ($$sum|0)<(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (($1) + ($$sum<<3)|0);
 $max$0$ph11 = $5;$min$0$ph12 = $1;$result$0$ph13 = 0;
 L4: while(1) {
  $6 = $max$0$ph11;
  $min$04 = $min$0$ph12;$result$05 = $result$0$ph13;
  while(1) {
   $7 = $min$04;
   $8 = (($6) - ($7))|0;
   $9 = $8 >> 4;
   $10 = (($min$04) + ($9<<3)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($unicode|0);
   if ($12) {
    $result$2 = $10;
    break L4;
   }
   $13 = $11 & 2147483647;
   $14 = ($13|0)==($unicode|0);
   $$result$0 = $14 ? $10 : $result$05;
   $15 = ($min$04|0)==($max$0$ph11|0);
   if ($15) {
    $result$2 = $$result$0;
    break L4;
   }
   $16 = ($13>>>0)<($unicode>>>0);
   if (!($16)) {
    $$lcssa36 = $9;$$result$0$lcssa = $$result$0;$min$04$lcssa35 = $min$04;
    break;
   }
   $$sum2 = (($9) + 1)|0;
   $17 = (($min$04) + ($$sum2<<3)|0);
   $18 = ($17>>>0)>($max$0$ph11>>>0);
   if ($18) {
    $result$2 = $$result$0;
    break L4;
   } else {
    $min$04 = $17;$result$05 = $$result$0;
   }
  }
  $$sum1 = (($$lcssa36) + -1)|0;
  $19 = (($min$04$lcssa35) + ($$sum1<<3)|0);
  $20 = ($$lcssa36|0)<(1);
  if ($20) {
   $result$2 = $$result$0$lcssa;
   break;
  } else {
   $max$0$ph11 = $19;$min$0$ph12 = $min$04$lcssa35;$result$0$ph13 = $$result$0$lcssa;
  }
 }
 $21 = ($result$2|0)==(0|0);
 if ($21) {
  $$0 = 0;
  return ($$0|0);
 }
 $22 = ((($result$2)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $$0 = $23;
 return ($$0|0);
}
function _ps_unicodes_char_next($table,$unicode) {
 $table = $table|0;
 $unicode = $unicode|0;
 var $$lcssa = 0, $$min$0 = 0, $$min$0$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $char_code$0 = 0, $max$0$ = 0, $max$05 = 0, $min$0$lcssa9 = 0, $min$04 = 0;
 var $result$06 = 0, $result$1 = 0, $result$1$lcssa = 0, $result$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$unicode>>2]|0;
 $1 = (($0) + 1)|0;
 $2 = ((($table)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $min$0$lcssa9 = 0;
  } else {
   $5 = ((($table)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $max$05 = $3;$min$04 = 0;$result$06 = 0;
   while(1) {
    $7 = (($max$05) - ($min$04))|0;
    $8 = $7 >>> 1;
    $9 = (($8) + ($min$04))|0;
    $10 = (($6) + ($9<<3)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($1|0);
    if ($12) {
     $$lcssa = $9;
     label = 4;
     break;
    }
    $15 = $11 & 2147483647;
    $16 = ($15|0)==($1|0);
    if ($16) {
     $17 = (((($6) + ($9<<3)|0)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     $result$1 = $18;
    } else {
     $result$1 = $result$06;
    }
    $19 = ($15>>>0)<($1>>>0);
    $20 = (($9) + 1)|0;
    $$min$0 = $19 ? $20 : $min$04;
    $max$0$ = $19 ? $max$05 : $9;
    $21 = ($max$0$>>>0)>($$min$0>>>0);
    if ($21) {
     $max$05 = $max$0$;$min$04 = $$min$0;$result$06 = $result$1;
    } else {
     $$min$0$lcssa = $$min$0;$result$1$lcssa = $result$1;
     label = 8;
     break;
    }
   }
   if ((label|0) == 4) {
    $13 = (((($6) + ($$lcssa<<3)|0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $char_code$0 = $1;$result$2 = $14;
    HEAP32[$unicode>>2] = $char_code$0;
    return ($result$2|0);
   }
   else if ((label|0) == 8) {
    $22 = ($result$1$lcssa|0)==(0);
    if ($22) {
     $min$0$lcssa9 = $$min$0$lcssa;
     break;
    } else {
     $char_code$0 = $1;$result$2 = $result$1$lcssa;
    }
    HEAP32[$unicode>>2] = $char_code$0;
    return ($result$2|0);
   }
  }
 } while(0);
 $23 = HEAP32[$2>>2]|0;
 $24 = ($min$0$lcssa9>>>0)<($23>>>0);
 if (!($24)) {
  $char_code$0 = 0;$result$2 = 0;
  HEAP32[$unicode>>2] = $char_code$0;
  return ($result$2|0);
 }
 $25 = ((($table)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (((($26) + ($min$0$lcssa9<<3)|0)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + ($min$0$lcssa9<<3)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 2147483647;
 $char_code$0 = $31;$result$2 = $28;
 HEAP32[$unicode>>2] = $char_code$0;
 return ($result$2|0);
}
function _ps_get_macintosh_name($name_index) {
 $name_index = $name_index|0;
 var $$name_index = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($name_index>>>0)>(257);
 $$name_index = $0 ? 0 : $name_index;
 $1 = (23070 + ($$name_index<<1)|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = (28128 + ($3)|0);
 return ($4|0);
}
function _ps_get_standard_strings($sid) {
 $sid = $sid|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($sid>>>0)>(390);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (22288 + ($sid<<1)|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 << 16 >> 16;
 $4 = (28128 + ($3)|0);
 $$0 = $4;
 return ($$0|0);
}
function _ps_check_extra_glyph_name($gname,$glyph,$extra_glyphs,$states) {
 $gname = $gname|0;
 $glyph = $glyph|0;
 $extra_glyphs = $extra_glyphs|0;
 $states = $states|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp(31824,$gname)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $n$02$lcssa = 0;
 } else {
  $6 = (_strcmp((31830),$gname)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $n$02$lcssa = 1;
  } else {
   $8 = (_strcmp((31836),$gname)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $n$02$lcssa = 2;
   } else {
    $10 = (_strcmp((31845),$gname)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $n$02$lcssa = 3;
    } else {
     $12 = (_strcmp((31852),$gname)|0);
     $13 = ($12|0)==(0);
     if ($13) {
      $n$02$lcssa = 4;
     } else {
      $14 = (_strcmp((31859),$gname)|0);
      $15 = ($14|0)==(0);
      if ($15) {
       $n$02$lcssa = 5;
      } else {
       $16 = (_strcmp((31862),$gname)|0);
       $17 = ($16|0)==(0);
       if ($17) {
        $n$02$lcssa = 6;
       } else {
        $18 = (_strcmp((31877),$gname)|0);
        $19 = ($18|0)==(0);
        if ($19) {
         $n$02$lcssa = 7;
        } else {
         $20 = (_strcmp((31883),$gname)|0);
         $21 = ($20|0)==(0);
         if ($21) {
          $n$02$lcssa = 8;
         } else {
          $22 = (_strcmp((31896),$gname)|0);
          $23 = ($22|0)==(0);
          if ($23) {
           $n$02$lcssa = 9;
          } else {
           return;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $2 = (($states) + ($n$02$lcssa<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  return;
 }
 HEAP32[$2>>2] = 1;
 $5 = (($extra_glyphs) + ($n$02$lcssa<<2)|0);
 HEAP32[$5>>2] = $glyph;
 return;
}
function _ps_check_extra_glyph_unicode($uni_char,$states) {
 $uni_char = $uni_char|0;
 $states = $states|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($uni_char|0)==(916);
 if ($0) {
  $n$02$lcssa = 0;
 } else {
  $2 = ($uni_char|0)==(937);
  if ($2) {
   $n$02$lcssa = 1;
  } else {
   $3 = ($uni_char|0)==(8725);
   if ($3) {
    $n$02$lcssa = 2;
   } else {
    $4 = ($uni_char|0)==(173);
    if ($4) {
     $n$02$lcssa = 3;
    } else {
     $5 = ($uni_char|0)==(713);
     if ($5) {
      $n$02$lcssa = 4;
     } else {
      $6 = ($uni_char|0)==(956);
      if ($6) {
       $n$02$lcssa = 5;
      } else {
       $7 = ($uni_char|0)==(8729);
       if ($7) {
        $n$02$lcssa = 6;
       } else {
        $8 = ($uni_char|0)==(160);
        if ($8) {
         $n$02$lcssa = 7;
        } else {
         $9 = ($uni_char|0)==(538);
         if ($9) {
          $n$02$lcssa = 8;
         } else {
          $10 = ($uni_char|0)==(539);
          if ($10) {
           $n$02$lcssa = 9;
          } else {
           return;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $1 = (($states) + ($n$02$lcssa<<2)|0);
 HEAP32[$1>>2] = 2;
 return;
}
function _compare_uni_maps($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = $0 & 2147483647;
 $2 = HEAP32[$b>>2]|0;
 $3 = $2 & 2147483647;
 $4 = ($1|0)==($3|0);
 if ($4) {
  $5 = ($0>>>0)>($2>>>0);
  if ($5) {
   $$0 = 1;
   return ($$0|0);
  }
  $6 = ($0>>>0)<($2>>>0);
  $$ = $6 << 31 >> 31;
  $$0 = $$;
  return ($$0|0);
 } else {
  $7 = ($1>>>0)>($3>>>0);
  if ($7) {
   $$0 = 1;
   return ($$0|0);
  }
  $8 = ($1>>>0)<($3>>>0);
  $$1 = $8 << 31 >> 31;
  $$0 = $$1;
  return ($$0|0);
 }
 return (0)|0;
}
function _ft_get_adobe_glyph_index($name,$limit) {
 $name = $name|0;
 $limit = $limit|0;
 var $$0 = 0, $$0114 = 0, $$lcssa37 = 0, $$min$0 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $count$011 = 0, $max$0$ = 0, $max$017 = 0, $min$016 = 0, $or$cond = 0;
 var $p$0$be = 0, $p$0$lcssa = 0, $p$013 = 0, $p$210 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($name|0)!=(0|0);
 $1 = ($name>>>0)<($limit>>>0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($name)) + 1|0);
 $3 = HEAP8[$name>>0]|0;
 $4 = $3 << 24 >> 24;
 $max$017 = 52;$min$016 = 0;
 while(1) {
  $5 = (($max$017) + ($min$016))|0;
  $6 = $5 >> 1;
  $7 = $6 << 1;
  $$sum = (($7) + 2)|0;
  $8 = (31909 + ($$sum)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $10 << 8;
  $$sum2 = (($7) + 3)|0;
  $12 = (31909 + ($$sum2)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $11 | $14;
  $16 = (31909 + ($15)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 & 127;
  $20 = ($19|0)==($4|0);
  if ($20) {
   $$lcssa37 = $16;
   break;
  }
  $22 = ($19|0)<($4|0);
  $23 = (($6) + 1)|0;
  $$min$0 = $22 ? $23 : $min$016;
  $max$0$ = $22 ? $max$017 : $6;
  $24 = ($$min$0|0)<($max$0$|0);
  if ($24) {
   $max$017 = $max$0$;$min$016 = $$min$0;
  } else {
   $$0 = 0;
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  return ($$0|0);
 }
 $21 = ($2>>>0)<($limit>>>0);
 L10: do {
  if ($21) {
   $$0114 = $2;$p$013 = $$lcssa37;
   L11: while(1) {
    $38 = ((($$0114)) + 1|0);
    $39 = HEAP8[$$0114>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = HEAP8[$p$013>>0]|0;
    $42 = ($41<<24>>24)<(0);
    $43 = ((($p$013)) + 1|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = $45 & 127;
    L13: do {
     if ($42) {
      $47 = ($40|0)==($46|0);
      if ($47) {
       $p$0$be = $43;
      } else {
       $$0 = 0;
       label = 16;
       break L11;
      }
     } else {
      $49 = ($46|0)==(0);
      if ($49) {
       $$0 = 0;
       label = 16;
       break L11;
      }
      $50 = $45 >>> 6;
      $51 = $50 & 2;
      $52 = (($51) + 2)|0;
      $53 = (($p$013) + ($52)|0);
      $count$011 = $46;$p$210 = $53;
      while(1) {
       $54 = HEAP8[$p$210>>0]|0;
       $55 = $54&255;
       $56 = $55 << 8;
       $57 = ((($p$210)) + 1|0);
       $58 = HEAP8[$57>>0]|0;
       $59 = $58&255;
       $60 = $56 | $59;
       $61 = (31909 + ($60)|0);
       $62 = HEAP8[$61>>0]|0;
       $63 = $62&255;
       $64 = $63 & 127;
       $65 = ($40|0)==($64|0);
       if ($65) {
        $p$0$be = $61;
        break L13;
       }
       $66 = (($count$011) + -1)|0;
       $67 = ((($p$210)) + 2|0);
       $68 = ($count$011|0)>(1);
       if ($68) {
        $count$011 = $66;$p$210 = $67;
       } else {
        $$0 = 0;
        label = 16;
        break L11;
       }
      }
     }
    } while(0);
    $48 = ($38>>>0)<($limit>>>0);
    if ($48) {
     $$0114 = $38;$p$013 = $p$0$be;
    } else {
     $p$0$lcssa = $p$0$be;
     break L10;
    }
   }
   if ((label|0) == 16) {
    return ($$0|0);
   }
  } else {
   $p$0$lcssa = $$lcssa37;
  }
 } while(0);
 $25 = HEAP8[$p$0$lcssa>>0]|0;
 $26 = ($25<<24>>24)>(-1);
 if (!($26)) {
  $$0 = 0;
  return ($$0|0);
 }
 $27 = ((($p$0$lcssa)) + 1|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ($28<<24>>24)<(0);
 if (!($29)) {
  $$0 = 0;
  return ($$0|0);
 }
 $30 = ((($p$0$lcssa)) + 2|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 << 8;
 $34 = ((($p$0$lcssa)) + 3|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $33 | $36;
 $$0 = $37;
 return ($$0|0);
}
function _sfnt_get_interface($module,$module_interface) {
 $module = $module|0;
 $module_interface = $module_interface|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_service_list_lookup(11964,$module_interface)|0);
 return ($0|0);
}
function _sfnt_get_charset_id($face,$acharset_encoding,$acharset_registry) {
 $face = $face|0;
 $acharset_encoding = $acharset_encoding|0;
 $acharset_registry = $acharset_registry|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $encoding = 0, $error$0 = 0, $registry = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $encoding = sp + 8|0;
 $registry = sp;
 $0 = (_tt_face_find_bdf_prop($face,87930,$registry)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_tt_face_find_bdf_prop($face,87947,$encoding)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $4 = HEAP32[$registry>>2]|0;
   $5 = ($4|0)==(1);
   if ($5) {
    $6 = HEAP32[$encoding>>2]|0;
    $7 = ($6|0)==(1);
    if ($7) {
     $8 = ((($encoding)) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     HEAP32[$acharset_encoding>>2] = $9;
     $10 = ((($registry)) + 4|0);
     $11 = HEAP32[$10>>2]|0;
     HEAP32[$acharset_registry>>2] = $11;
     $error$0 = 0;
    } else {
     $error$0 = 6;
    }
   } else {
    $error$0 = 6;
   }
  } else {
   $error$0 = $2;
  }
 } else {
  $error$0 = $0;
 }
 STACKTOP = sp;return ($error$0|0);
}
function _sfnt_get_glyph_name($face,$glyph_index,$buffer,$buffer_max) {
 $face = $face|0;
 $glyph_index = $glyph_index|0;
 $buffer = $buffer|0;
 $buffer_max = $buffer_max|0;
 var $0 = 0, $1 = 0, $2 = 0, $gname = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $gname = sp;
 $0 = (_tt_face_get_ps_name($face,$glyph_index,$gname)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return ($0|0);
 }
 $2 = HEAP32[$gname>>2]|0;
 (_ft_mem_strcpyn($buffer,$2,$buffer_max)|0);
 STACKTOP = sp;return ($0|0);
}
function _sfnt_get_name_index($face,$glyph_name) {
 $face = $face|0;
 $glyph_name = $glyph_name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gname = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $gname = sp;
 $0 = ((($face)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(1);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $3 = (_tt_face_get_ps_name($face,$i$01,$gname)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $5 = HEAP32[$gname>>2]|0;
   $6 = (_strcmp($glyph_name,$5)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $$0 = $i$01;
    label = 5;
    break;
   }
  }
  $8 = (($i$01) + 1)|0;
  $9 = ($8>>>0)<($1>>>0);
  if ($9) {
   $i$01 = $8;
  } else {
   $$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sfnt_get_ps_name($face) {
 $face = $face|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $div = 0;
 var $error = 0, $error5 = 0, $found_apple$04 = 0, $found_apple$1 = 0, $found_apple$1$lcssa = 0, $found_win$05 = 0, $found_win$1 = 0, $found_win$1$ph = 0, $found_win$2 = 0, $found_win$2$lcssa = 0, $len$01 = 0, $n$0$found_apple$0 = 0, $n$0$found_win$0 = 0, $n$06 = 0, $or$cond = 0, $p$03 = 0, $r$0$lcssa = 0, $r$02 = 0, $r$1 = 0, $result$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 4|0;
 $error5 = sp;
 $0 = ((($face)) + 700|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($face)) + 344|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(0);
 do {
  if ($5) {
   $result$0 = 0;
  } else {
   $6 = ((($face)) + 360|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = HEAP16[$3>>1]|0;
   $9 = $8&65535;
   $found_apple$04 = -1;$found_win$05 = -1;$n$06 = 0;
   while(1) {
    $10 = (((($7) + (($n$06*20)|0)|0)) + 6|0);
    $11 = HEAP16[$10>>1]|0;
    $12 = ($11<<16>>16)==(6);
    if ($12) {
     $13 = (((($7) + (($n$06*20)|0)|0)) + 8|0);
     $14 = HEAP16[$13>>1]|0;
     $15 = ($14<<16>>16)==(0);
     if ($15) {
      $found_apple$1 = $found_apple$04;$found_win$2 = $found_win$05;
     } else {
      $16 = (($7) + (($n$06*20)|0)|0);
      $17 = HEAP16[$16>>1]|0;
      $18 = ($17<<16>>16)==(3);
      if ($18) {
       $19 = (((($7) + (($n$06*20)|0)|0)) + 2|0);
       $20 = HEAP16[$19>>1]|0;
       $21 = ($20<<16>>16)==(1);
       if ($21) {
        $22 = (((($7) + (($n$06*20)|0)|0)) + 4|0);
        $23 = HEAP16[$22>>1]|0;
        $24 = ($23<<16>>16)==(1033);
        $n$0$found_win$0 = $24 ? $n$06 : $found_win$05;
        $found_win$1$ph = $n$0$found_win$0;
       } else {
        $found_win$1$ph = $found_win$05;
       }
       $$pr = HEAP16[$16>>1]|0;
       $26 = $$pr;$found_win$1 = $found_win$1$ph;
      } else {
       $26 = $17;$found_win$1 = $found_win$05;
      }
      $25 = ($26<<16>>16)==(1);
      if ($25) {
       $27 = (((($7) + (($n$06*20)|0)|0)) + 2|0);
       $28 = HEAP16[$27>>1]|0;
       $29 = ($28<<16>>16)==(0);
       if ($29) {
        $30 = (((($7) + (($n$06*20)|0)|0)) + 4|0);
        $31 = HEAP16[$30>>1]|0;
        $32 = ($31<<16>>16)==(0);
        $n$0$found_apple$0 = $32 ? $n$06 : $found_apple$04;
        $found_apple$1 = $n$0$found_apple$0;$found_win$2 = $found_win$1;
       } else {
        $found_apple$1 = $found_apple$04;$found_win$2 = $found_win$1;
       }
      } else {
       $found_apple$1 = $found_apple$04;$found_win$2 = $found_win$1;
      }
     }
    } else {
     $found_apple$1 = $found_apple$04;$found_win$2 = $found_win$05;
    }
    $33 = (($n$06) + 1)|0;
    $34 = ($33|0)<($9|0);
    if ($34) {
     $found_apple$04 = $found_apple$1;$found_win$05 = $found_win$2;$n$06 = $33;
    } else {
     $found_apple$1$lcssa = $found_apple$1;$found_win$2$lcssa = $found_win$2;
     break;
    }
   }
   $35 = ($found_win$2$lcssa|0)==(-1);
   if ($35) {
    $74 = ($found_apple$1$lcssa|0)==(-1);
    if ($74) {
     $result$0 = 0;
     break;
    }
    $75 = ((($face)) + 100|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ((($face)) + 360|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (((($78) + (($found_apple$1$lcssa*20)|0)|0)) + 8|0);
    $80 = HEAP16[$79>>1]|0;
    $81 = $80&65535;
    HEAP32[$error5>>2] = 0;
    $82 = (($81) + 1)|0;
    $83 = (_ft_mem_alloc($76,$82,$error5)|0);
    $84 = HEAP32[$error5>>2]|0;
    $85 = ($84|0)==(0);
    if (!($85)) {
     $result$0 = $83;
     break;
    }
    $86 = ((($face)) + 364|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (((($78) + (($found_apple$1$lcssa*20)|0)|0)) + 12|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (_FT_Stream_Seek($87,$89)|0);
    HEAP32[$error5>>2] = $90;
    $91 = ($90|0)==(0);
    if ($91) {
     $92 = (_FT_Stream_Read($87,$83,$81)|0);
     HEAP32[$error5>>2] = $92;
     $93 = ($92|0)==(0);
     if ($93) {
      $96 = (($83) + ($81)|0);
      HEAP8[$96>>0] = 0;
      $result$0 = $83;
      break;
     }
    }
    HEAP32[$88>>2] = 0;
    HEAP16[$79>>1] = 0;
    $94 = (((($78) + (($found_apple$1$lcssa*20)|0)|0)) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    _ft_mem_free($76,$95);
    HEAP32[$94>>2] = 0;
    _ft_mem_free($76,$83);
    $result$0 = 0;
    break;
   }
   $36 = ((($face)) + 100|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($face)) + 360|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (((($39) + (($found_win$2$lcssa*20)|0)|0)) + 8|0);
   $41 = HEAP16[$40>>1]|0;
   $div = ($41&65535) >>> 1;
   $42 = $div&65535;
   HEAP32[$error>>2] = 0;
   $43 = HEAP16[$40>>1]|0;
   $44 = $43&65535;
   $45 = (($44) + 1)|0;
   $46 = (_ft_mem_alloc($37,$45,$error)|0);
   $47 = HEAP32[$error>>2]|0;
   $48 = ($47|0)==(0);
   if ($48) {
    $49 = ((($face)) + 364|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (((($39) + (($found_win$2$lcssa*20)|0)|0)) + 16|0);
    $52 = (((($39) + (($found_win$2$lcssa*20)|0)|0)) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_FT_Stream_Seek($50,$53)|0);
    HEAP32[$error>>2] = $54;
    $55 = ($54|0)==(0);
    if ($55) {
     $56 = HEAP16[$40>>1]|0;
     $57 = $56&65535;
     $58 = (_FT_Stream_EnterFrame($50,$57)|0);
     HEAP32[$error>>2] = $58;
     $59 = ($58|0)==(0);
     if ($59) {
      $61 = ($div<<16>>16)==(0);
      if ($61) {
       $r$0$lcssa = $46;
      } else {
       $62 = ((($50)) + 32|0);
       $63 = HEAP32[$62>>2]|0;
       $len$01 = $42;$p$03 = $63;$r$02 = $46;
       while(1) {
        $64 = HEAP8[$p$03>>0]|0;
        $65 = ($64<<24>>24)==(0);
        if ($65) {
         $66 = ((($p$03)) + 1|0);
         $67 = HEAP8[$66>>0]|0;
         $68 = ($67&255)>(31);
         $69 = ($67<<24>>24)>(-1);
         $or$cond = $68 & $69;
         if ($or$cond) {
          $70 = ((($r$02)) + 1|0);
          HEAP8[$r$02>>0] = $67;
          $r$1 = $70;
         } else {
          $r$1 = $r$02;
         }
        } else {
         $r$1 = $r$02;
        }
        $71 = (($len$01) + -1)|0;
        $72 = ((($p$03)) + 2|0);
        $73 = ($71|0)==(0);
        if ($73) {
         $r$0$lcssa = $r$1;
         break;
        } else {
         $len$01 = $71;$p$03 = $72;$r$02 = $r$1;
        }
       }
      }
      HEAP8[$r$0$lcssa>>0] = 0;
      _FT_Stream_ExitFrame($50);
      $result$0 = $46;
      break;
     }
    }
    _ft_mem_free($37,$46);
    HEAP16[$40>>1] = 0;
    HEAP32[$52>>2] = 0;
    $60 = HEAP32[$51>>2]|0;
    _ft_mem_free($37,$60);
    HEAP32[$51>>2] = 0;
    $result$0 = 0;
   } else {
    $result$0 = $46;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $result$0;
 $$0 = $result$0;
 STACKTOP = sp;return ($$0|0);
}
function _get_sfnt_table($face,$tag) {
 $face = $face|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $table$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($tag|0) {
 case 0:  {
  $0 = ((($face)) + 160|0);
  $table$0 = $0;
  break;
 }
 case 3:  {
  $1 = ((($face)) + 216|0);
  $table$0 = $1;
  break;
 }
 case 4:  {
  $2 = ((($face)) + 296|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)!=(0);
  $5 = ((($face)) + 300|0);
  $6 = $4 ? $5 : 0;
  $table$0 = $6;
  break;
 }
 case 2:  {
  $7 = ((($face)) + 368|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = ($8<<16>>16)==(-1);
  $10 = $9 ? 0 : $7;
  $table$0 = $10;
  break;
 }
 case 5:  {
  $11 = ((($face)) + 468|0);
  $table$0 = $11;
  break;
 }
 case 1:  {
  $12 = ((($face)) + 260|0);
  $table$0 = $12;
  break;
 }
 case 6:  {
  $13 = ((($face)) + 556|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0);
  $16 = $15 ? $13 : 0;
  $table$0 = $16;
  break;
 }
 default: {
  $table$0 = 0;
 }
 }
 return ($table$0|0);
}
function _sfnt_table_info($face,$idx,$tag,$offset,$length) {
 $face = $face|0;
 $idx = $idx|0;
 $tag = $tag|0;
 $offset = $offset|0;
 $length = $length|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($offset|0)!=(0|0);
 $1 = ($length|0)!=(0|0);
 $or$cond = $0 & $1;
 if (!($or$cond)) {
  $$0 = 6;
  return ($$0|0);
 }
 $2 = ($tag|0)==(0|0);
 $3 = ((($face)) + 152|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 do {
  if ($2) {
   $storemerge = $5;
  } else {
   $6 = ($5>>>0)>($idx>>>0);
   if ($6) {
    $7 = ((($face)) + 156|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($8) + ($idx<<4)|0);
    $10 = HEAP32[$9>>2]|0;
    HEAP32[$tag>>2] = $10;
    $11 = HEAP32[$7>>2]|0;
    $12 = (((($11) + ($idx<<4)|0)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    HEAP32[$offset>>2] = $13;
    $14 = HEAP32[$7>>2]|0;
    $15 = (((($14) + ($idx<<4)|0)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $storemerge = $16;
    break;
   } else {
    $$0 = 142;
    return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$length>>2] = $storemerge;
 $$0 = 0;
 return ($$0|0);
}
function _tt_face_load_sfnt_header_stub($face,$stream,$face_index,$header) {
 $face = $face|0;
 $stream = $stream|0;
 $face_index = $face_index|0;
 $header = $header|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function _tt_face_load_directory_stub($face,$stream,$header) {
 $face = $face|0;
 $stream = $stream|0;
 $header = $header|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function _tt_face_load_hdmx_stub($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function _tt_face_free_hdmx_stub($face) {
 $face = $face|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _tt_face_set_sbit_strike_stub($face,$x_ppem,$y_ppem,$astrike_index) {
 $face = $face|0;
 $x_ppem = $x_ppem|0;
 $y_ppem = $y_ppem|0;
 $astrike_index = $astrike_index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $req = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $req = sp;
 HEAP32[$req>>2] = 0;
 $0 = ((($req)) + 4|0);
 HEAP32[$0>>2] = $x_ppem;
 $1 = ((($req)) + 8|0);
 HEAP32[$1>>2] = $y_ppem;
 $2 = ((($req)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($req)) + 16|0);
 HEAP32[$3>>2] = 0;
 HEAP32[$astrike_index>>2] = 2147483647;
 $4 = (_tt_face_set_sbit_strike($face,$req,$astrike_index)|0);
 STACKTOP = sp;return ($4|0);
}
function _tt_face_load_sbit_stub($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function _tt_face_free_sbit_stub($face) {
 $face = $face|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _tt_face_load_charmap_stub($face,$cmap,$input) {
 $face = $face|0;
 $cmap = $cmap|0;
 $input = $input|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function _tt_face_free_charmap_stub($face,$cmap) {
 $face = $face|0;
 $cmap = $cmap|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _sfnt_init_face($stream,$face,$face_index,$num_params,$params) {
 $stream = $stream|0;
 $face = $face|0;
 $face_index = $face_index|0;
 $num_params = $num_params|0;
 $params = $params|0;
 var $$0 = 0, $$face_index = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sfnt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 532|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = ((($face)) + 96|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($4)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (_FT_Get_Module_Interface($6,89702)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = 11;
    return ($$0|0);
   } else {
    HEAP32[$0>>2] = $7;
    $9 = HEAP32[$7>>2]|0;
    $10 = ((($face)) + 508|0);
    HEAP32[$10>>2] = $9;
    $sfnt$0 = $7;
    break;
   }
  } else {
   $sfnt$0 = $1;
  }
 } while(0);
 $11 = ((($face)) + 96|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_ft_module_get_service($12,89321)|0);
 $14 = ((($face)) + 536|0);
 HEAP32[$14>>2] = $13;
 $15 = (_sfnt_open_font($stream,$face)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = $15;
  return ($$0|0);
 }
 $17 = ($face_index|0)<(0);
 $$face_index = $17 ? 0 : $face_index;
 $18 = ((($face)) + 140|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($$face_index|0)<($19|0);
 if (!($20)) {
  $$0 = 6;
  return ($$0|0);
 }
 $21 = ((($face)) + 144|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($$face_index<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_FT_Stream_Seek($stream,$24)|0);
 $26 = ($25|0)==(0);
 if (!($26)) {
  $$0 = $25;
  return ($$0|0);
 }
 $27 = ((($sfnt$0)) + 132|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_iii[$28 & 255]($face,$stream)|0);
 $30 = ($29|0)==(0);
 if (!($30)) {
  $$0 = $29;
  return ($$0|0);
 }
 $31 = HEAP32[$18>>2]|0;
 HEAP32[$face>>2] = $31;
 $32 = ((($face)) + 4|0);
 HEAP32[$32>>2] = $$face_index;
 $$0 = 0;
 return ($$0|0);
}
function _sfnt_load_face($stream,$face,$face_index,$num_params,$params) {
 $stream = $stream|0;
 $face = $face|0;
 $face_index = $face_index|0;
 $num_params = $num_params|0;
 $params = $params|0;
 var $$ = 0, $$23 = 0, $$6 = 0, $$ignore_preferred_subfamily$0 = 0, $$pr = 0, $$pr18 = 0, $$pr20 = 0, $$pr22 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $avgwidth$0 = 0, $div = 0, $em_size$0 = 0, $error = 0, $exitcond = 0, $flags$1 = 0, $flags$1$ = 0, $flags$3 = 0, $flags$3$ = 0, $flags$3$$ = 0, $flags$5 = 0, $flags$8 = 0, $has_outline$014 = 0, $has_outline$1 = 0, $i$030 = 0, $i1$025 = 0, $ignore_preferred_family$0$lcssa = 0, $ignore_preferred_family$032 = 0;
 var $ignore_preferred_family$1 = 0, $ignore_preferred_subfamily$0$lcssa = 0, $ignore_preferred_subfamily$031 = 0, $ignore_preferred_subfamily$1 = 0, $m$026 = 0, $metrics = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $error = sp + 28|0;
 $metrics = sp;
 $0 = ((($face)) + 532|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($num_params|0)>(0);
 if ($2) {
  $i$030 = 0;$ignore_preferred_family$032 = 0;$ignore_preferred_subfamily$031 = 0;
  while(1) {
   $3 = (($params) + ($i$030<<3)|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(1768386662);
   $6 = ($4|0)==(1768386675);
   $$ignore_preferred_subfamily$0 = $6 ? 1 : $ignore_preferred_subfamily$031;
   $ignore_preferred_subfamily$1 = $5 ? $ignore_preferred_subfamily$031 : $$ignore_preferred_subfamily$0;
   $ignore_preferred_family$1 = $5 ? 1 : $ignore_preferred_family$032;
   $7 = (($i$030) + 1)|0;
   $exitcond = ($7|0)==($num_params|0);
   if ($exitcond) {
    $ignore_preferred_family$0$lcssa = $ignore_preferred_family$1;$ignore_preferred_subfamily$0$lcssa = $ignore_preferred_subfamily$1;
    break;
   } else {
    $i$030 = $7;$ignore_preferred_family$032 = $ignore_preferred_family$1;$ignore_preferred_subfamily$031 = $ignore_preferred_subfamily$1;
   }
  }
 } else {
  $ignore_preferred_family$0$lcssa = 0;$ignore_preferred_subfamily$0$lcssa = 0;
 }
 $8 = ((($face)) + 128|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = (_tt_face_lookup_table($face,1735162214)|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   $15 = (_tt_face_lookup_table($face,1128678944)|0);
   $16 = ($15|0)!=(0|0);
   $17 = $16&1;
   if ($16) {
    $371 = $17;
    label = 8;
   } else {
    $18 = ((($1)) + 84|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     $371 = $17;
     label = 8;
    } else {
     $21 = (FUNCTION_TABLE_iii[$19 & 255]($face,$stream)|0);
     HEAP32[$error>>2] = $21;
     $22 = ($21|0)==(0);
     if ($22) {
      $372 = 1;$373 = $17;
     } else {
      $371 = $17;
      label = 8;
     }
    }
   }
  } else {
   $371 = 1;
   label = 8;
  }
 } else {
  $371 = 1;
  label = 8;
 }
 if ((label|0) == 8) {
  $23 = ((($1)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (FUNCTION_TABLE_iii[$24 & 255]($face,$stream)|0);
  HEAP32[$error>>2] = $25;
  $26 = ($25|0)==(0);
  if ($26) {
   $372 = 0;$373 = $371;
  } else {
   $370 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($370|0);
  }
 }
 $27 = ((($face)) + 178|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = ($28<<16>>16)==(0);
 if ($29) {
  HEAP32[$error>>2] = 8;
  $370 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($370|0);
 }
 $30 = ((($1)) + 44|0);
 $31 = HEAP32[$30>>2]|0;
 (FUNCTION_TABLE_iii[$31 & 255]($face,$stream)|0);
 $32 = ((($1)) + 40|0);
 $33 = HEAP32[$32>>2]|0;
 (FUNCTION_TABLE_iii[$33 & 255]($face,$stream)|0);
 $34 = ((($1)) + 56|0);
 $35 = HEAP32[$34>>2]|0;
 (FUNCTION_TABLE_iii[$35 & 255]($face,$stream)|0);
 $36 = ((($1)) + 52|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (FUNCTION_TABLE_iii[$37 & 255]($face,$stream)|0);
 HEAP32[$error>>2] = $38;
 if ($372) {
  $has_outline$1 = $373;
 } else {
  $39 = ((($1)) + 36|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (FUNCTION_TABLE_iiii[$40 & 127]($face,$stream,0)|0);
  HEAP32[$error>>2] = $41;
  L20: do {
   switch ($41|0) {
   case 0:  {
    $42 = ((($1)) + 136|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_iiii[$43 & 127]($face,$stream,0)|0);
    HEAP32[$error>>2] = $44;
    $45 = ($44|0)==(142);
    if ($45) {
     HEAP32[$error>>2] = 147;
     $46 = HEAP32[$8>>2]|0;
     $47 = ((($46)) + 52|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==(0|0);
     if ($49) {
      $370 = HEAP32[$error>>2]|0;
      STACKTOP = sp;return ($370|0);
     }
     $50 = HEAP32[$48>>2]|0;
     $51 = ((($50)) + 8|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==(0|0);
     if ($53) {
      label = 22;
     } else {
      $54 = ((($face)) + 250|0);
      HEAP16[$54>>1] = 0;
      HEAP32[$error>>2] = 0;
      $has_outline$014 = $373;
     }
    } else {
     $68 = $44;
     label = 23;
    }
    break;
   }
   case 142:  {
    $55 = ((($face)) + 148|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)==(1953658213);
    if ($57) {
     HEAP32[$error>>2] = 0;
     $has_outline$014 = 0;
     break L20;
    }
    HEAP32[$error>>2] = 143;
    $58 = HEAP32[$8>>2]|0;
    $59 = ((($58)) + 52|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0|0);
    if ($61) {
     $370 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($370|0);
    }
    $62 = HEAP32[$60>>2]|0;
    $63 = ((($62)) + 8|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)==(0|0);
    if ($65) {
     label = 22;
    } else {
     $66 = ((($face)) + 250|0);
     HEAP16[$66>>1] = 0;
     HEAP32[$error>>2] = 0;
     $has_outline$014 = $373;
    }
    break;
   }
   default: {
    $68 = $41;
    label = 23;
   }
   }
  } while(0);
  if ((label|0) == 22) {
   $$pr = HEAP32[$error>>2]|0;
   $68 = $$pr;
   label = 23;
  }
  if ((label|0) == 23) {
   $67 = ($68|0)==(0);
   if ($67) {
    $has_outline$014 = $373;
   } else {
    $370 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($370|0);
   }
  }
  $69 = HEAP32[$39>>2]|0;
  $70 = (FUNCTION_TABLE_iiii[$69 & 127]($face,$stream,1)|0);
  HEAP32[$error>>2] = $70;
  $71 = ($70|0)==(0);
  if ($71) {
   $72 = ((($1)) + 136|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (FUNCTION_TABLE_iiii[$73 & 127]($face,$stream,1)|0);
   HEAP32[$error>>2] = $74;
   $75 = ($74|0)==(0);
   if ($75) {
    $76 = ((($face)) + 296|0);
    HEAP8[$76>>0] = 1;
    $$pr18 = HEAP32[$error>>2]|0;
    $77 = $$pr18;
   } else {
    $77 = $74;
   }
  } else {
   $77 = $70;
  }
  switch ($77|0) {
  case 0: case 142:  {
   break;
  }
  default: {
   $370 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($370|0);
  }
  }
  $78 = ((($1)) + 48|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (FUNCTION_TABLE_iii[$79 & 255]($face,$stream)|0);
  HEAP32[$error>>2] = $80;
  $81 = ($80|0)==(0);
  if ($81) {
   $has_outline$1 = $has_outline$014;
  } else {
   $82 = ((($face)) + 368|0);
   HEAP16[$82>>1] = -1;
   $has_outline$1 = $has_outline$014;
  }
 }
 $83 = ((($1)) + 140|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(0|0);
 L50: do {
  if (!($85)) {
   $86 = (FUNCTION_TABLE_iii[$84 & 255]($face,$stream)|0);
   HEAP32[$error>>2] = $86;
   switch ($86|0) {
   case 0:  {
    break L50;
    break;
   }
   case 142:  {
    HEAP32[$error>>2] = 0;
    break L50;
    break;
   }
   default: {
    $370 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($370|0);
   }
   }
  }
 } while(0);
 $87 = ((($1)) + 80|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (FUNCTION_TABLE_iii[$88 & 255]($face,$stream)|0);
 HEAP32[$error>>2] = $89;
 switch ($89|0) {
 case 0:  {
  break;
 }
 case 142:  {
  $90 = ((($face)) + 556|0);
  HEAP32[$90>>2] = 0;
  break;
 }
 default: {
  $370 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($370|0);
 }
 }
 $91 = ((($1)) + 76|0);
 $92 = HEAP32[$91>>2]|0;
 (FUNCTION_TABLE_iii[$92 & 255]($face,$stream)|0);
 $93 = ((($1)) + 72|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (FUNCTION_TABLE_iii[$94 & 255]($face,$stream)|0);
 HEAP32[$error>>2] = $95;
 $96 = ((($face)) + 264|0);
 $97 = HEAP16[$96>>1]|0;
 $98 = $97&65535;
 $99 = ((($face)) + 16|0);
 HEAP32[$99>>2] = $98;
 $100 = ((($face)) + 20|0);
 HEAP32[$100>>2] = 0;
 $101 = ((($face)) + 24|0);
 HEAP32[$101>>2] = 0;
 $102 = ((($face)) + 368|0);
 $103 = HEAP16[$102>>1]|0;
 $104 = ($103<<16>>16)==(-1);
 if ($104) {
  label = 45;
 } else {
  $105 = ((($face)) + 432|0);
  $106 = HEAP16[$105>>1]|0;
  $107 = $106 & 256;
  $108 = ($107<<16>>16)==(0);
  if ($108) {
   label = 45;
  } else {
   $109 = ($ignore_preferred_family$0$lcssa<<24>>24)==(0);
   if ($109) {
    $110 = (_tt_face_get_name($face,16,$100)|0);
    HEAP32[$error>>2] = $110;
    $111 = ($110|0)==(0);
    if (!($111)) {
     $370 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($370|0);
    }
   }
   $112 = HEAP32[$100>>2]|0;
   $113 = ($112|0)==(0|0);
   if ($113) {
    $114 = (_tt_face_get_name($face,1,$100)|0);
    HEAP32[$error>>2] = $114;
    $115 = ($114|0)==(0);
    if (!($115)) {
     $370 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($370|0);
    }
   }
   $116 = ($ignore_preferred_subfamily$0$lcssa<<24>>24)==(0);
   if ($116) {
    $117 = (_tt_face_get_name($face,17,$101)|0);
    HEAP32[$error>>2] = $117;
    $118 = ($117|0)==(0);
    if (!($118)) {
     $370 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($370|0);
    }
   }
   $119 = HEAP32[$101>>2]|0;
   $120 = ($119|0)==(0|0);
   if ($120) {
    $121 = (_tt_face_get_name($face,2,$101)|0);
    HEAP32[$error>>2] = $121;
    $122 = ($121|0)==(0);
    if (!($122)) {
     $370 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($370|0);
    }
   }
  }
 }
 if ((label|0) == 45) {
  $123 = (_tt_face_get_name($face,21,$100)|0);
  HEAP32[$error>>2] = $123;
  $124 = ($123|0)==(0);
  if (!($124)) {
   $370 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($370|0);
  }
  $125 = HEAP32[$100>>2]|0;
  $126 = ($125|0)!=(0|0);
  $127 = ($ignore_preferred_family$0$lcssa<<24>>24)!=(0);
  $or$cond3 = $127 | $126;
  do {
   if ($or$cond3) {
    $131 = $125;
   } else {
    $128 = (_tt_face_get_name($face,16,$100)|0);
    HEAP32[$error>>2] = $128;
    $129 = ($128|0)==(0);
    if ($129) {
     $$pr20 = HEAP32[$100>>2]|0;
     $131 = $$pr20;
     break;
    } else {
     $370 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($370|0);
    }
   }
  } while(0);
  $130 = ($131|0)==(0|0);
  if ($130) {
   $132 = (_tt_face_get_name($face,1,$100)|0);
   HEAP32[$error>>2] = $132;
   $133 = ($132|0)==(0);
   if (!($133)) {
    $370 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($370|0);
   }
  }
  $134 = (_tt_face_get_name($face,22,$101)|0);
  HEAP32[$error>>2] = $134;
  $135 = ($134|0)==(0);
  if (!($135)) {
   $370 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($370|0);
  }
  $136 = HEAP32[$101>>2]|0;
  $137 = ($136|0)!=(0|0);
  $138 = ($ignore_preferred_subfamily$0$lcssa<<24>>24)!=(0);
  $or$cond5 = $138 | $137;
  do {
   if ($or$cond5) {
    $142 = $136;
   } else {
    $139 = (_tt_face_get_name($face,17,$101)|0);
    HEAP32[$error>>2] = $139;
    $140 = ($139|0)==(0);
    if ($140) {
     $$pr22 = HEAP32[$101>>2]|0;
     $142 = $$pr22;
     break;
    } else {
     $370 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($370|0);
    }
   }
  } while(0);
  $141 = ($142|0)==(0|0);
  if ($141) {
   $143 = (_tt_face_get_name($face,2,$101)|0);
   HEAP32[$error>>2] = $143;
   $144 = ($143|0)==(0);
   if (!($144)) {
    $370 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($370|0);
   }
  }
 }
 $145 = ((($face)) + 8|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ($has_outline$1<<24>>24)==(1);
 $148 = $147&1;
 $$ = $146 | $148;
 $149 = $$ | 24;
 $150 = ($38|0)==(0);
 if ($150) {
  $151 = ((($face)) + 468|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ($152|0)==(196608);
  $154 = $$ | 536;
  $$6 = $153 ? $149 : $154;
  $flags$1 = $$6;
 } else {
  $flags$1 = $149;
 }
 $155 = ((($face)) + 480|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ($156|0)==(0);
 $158 = $flags$1 | 4;
 $flags$1$ = $157 ? $flags$1 : $158;
 $159 = ((($face)) + 296|0);
 $160 = HEAP8[$159>>0]|0;
 $161 = ($160<<24>>24)==(0);
 $162 = $flags$1$ | 32;
 $flags$3 = $161 ? $flags$1$ : $162;
 $163 = ((($face)) + 784|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = ($164|0)==(0);
 $166 = $flags$3 | 64;
 $flags$3$ = $165 ? $flags$3 : $166;
 $167 = (_tt_face_lookup_table($face,1735162214)|0);
 $168 = ($167|0)==(0|0);
 if ($168) {
  $flags$5 = $flags$3$;
 } else {
  $169 = (_tt_face_lookup_table($face,1719034226)|0);
  $170 = ($169|0)==(0|0);
  if ($170) {
   $flags$5 = $flags$3$;
  } else {
   $171 = (_tt_face_lookup_table($face,1735811442)|0);
   $172 = ($171|0)==(0|0);
   $173 = $flags$3$ | 256;
   $flags$3$$ = $172 ? $flags$3$ : $173;
   $flags$5 = $flags$3$$;
  }
 }
 HEAP32[$145>>2] = $flags$5;
 if ($147) {
  $174 = HEAP16[$102>>1]|0;
  $175 = ($174<<16>>16)==(-1);
  if ($175) {
   label = 65;
  } else {
   $176 = ((($face)) + 432|0);
   $177 = HEAP16[$176>>1]|0;
   $178 = $177&65535;
   $179 = $178 & 512;
   $180 = ($179|0)==(0);
   $181 = $178 & 1;
   $$23 = $180 ? $181 : 1;
   $182 = ($177&65535) >>> 4;
   $183 = $182 & 2;
   $184 = $183&65535;
   $185 = $184 | $$23;
   $flags$8 = $185;
  }
 } else {
  label = 65;
 }
 if ((label|0) == 65) {
  $186 = ((($face)) + 204|0);
  $187 = HEAP16[$186>>1]|0;
  $188 = $187 & 1;
  $189 = $188&65535;
  $190 = $189 << 1;
  $191 = ($187&65535) >>> 1;
  $192 = $191 & 1;
  $193 = $192&65535;
  $194 = $193 | $190;
  $flags$8 = $194;
 }
 $195 = ((($face)) + 12|0);
 HEAP32[$195>>2] = $flags$8;
 (_tt_face_build_cmaps($face)|0);
 $196 = ((($face)) + 36|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = ($197|0)>(0);
 if ($198) {
  $199 = ((($face)) + 40|0);
  $m$026 = 0;
  while(1) {
   $200 = HEAP32[$199>>2]|0;
   $201 = (($200) + ($m$026<<2)|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = ((($202)) + 8|0);
   $204 = HEAP16[$203>>1]|0;
   $205 = $204&65535;
   $206 = ((($202)) + 10|0);
   $207 = HEAP16[$206>>1]|0;
   $208 = $207&65535;
   $209 = (_sfnt_find_encoding($205,$208)|0);
   $210 = ((($202)) + 4|0);
   HEAP32[$210>>2] = $209;
   $211 = (($m$026) + 1)|0;
   $212 = HEAP32[$196>>2]|0;
   $213 = ($211|0)<($212|0);
   if ($213) {
    $m$026 = $211;
   } else {
    break;
   }
  }
 }
 $214 = ((($face)) + 612|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = ($215|0)==(0);
 do {
  if (!($216)) {
   $217 = ((($face)) + 104|0);
   $218 = HEAP32[$217>>2]|0;
   $219 = ((($218)) + 28|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = HEAP16[$27>>1]|0;
   $222 = ($221<<16>>16)==(0);
   if ($222) {
    label = 72;
   } else {
    $223 = ((($face)) + 370|0);
    $224 = HEAP16[$223>>1]|0;
    $225 = HEAP16[$102>>1]|0;
    $226 = ($225<<16>>16)==(-1);
    if ($226) {
     label = 72;
    } else {
     $avgwidth$0 = $224;$em_size$0 = $221;
    }
   }
   if ((label|0) == 72) {
    $avgwidth$0 = 0;$em_size$0 = 1;
   }
   $227 = (_ft_mem_realloc($220,16,0,$215,0,$error)|0);
   $228 = ((($face)) + 32|0);
   HEAP32[$228>>2] = $227;
   $229 = HEAP32[$error>>2]|0;
   $230 = ($229|0)==(0);
   if (!($230)) {
    $370 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($370|0);
   }
   $231 = ((($1)) + 152|0);
   $232 = ((($metrics)) + 20|0);
   $233 = $avgwidth$0 << 16 >> 16;
   $234 = $em_size$0&65535;
   $div = ($em_size$0&65535) >>> 1;
   $235 = $div&65535;
   $236 = ((($metrics)) + 2|0);
   $i1$025 = 0;
   while(1) {
    $237 = HEAP32[$228>>2]|0;
    $238 = HEAP32[$231>>2]|0;
    $239 = (FUNCTION_TABLE_iiii[$238 & 127]($face,$i1$025,$metrics)|0);
    HEAP32[$error>>2] = $239;
    $240 = ($239|0)==(0);
    if (!($240)) {
     label = 92;
     break;
    }
    $241 = HEAP32[$232>>2]|0;
    $242 = $241 >>> 6;
    $243 = $242&65535;
    $244 = (($237) + ($i1$025<<4)|0);
    HEAP16[$244>>1] = $243;
    $245 = HEAP16[$metrics>>1]|0;
    $246 = $245&65535;
    $247 = Math_imul($246, $233)|0;
    $248 = (($247) + ($235))|0;
    $249 = (($248|0) / ($234|0))&-1;
    $250 = $249&65535;
    $251 = (((($237) + ($i1$025<<4)|0)) + 2|0);
    HEAP16[$251>>1] = $250;
    $252 = HEAP16[$metrics>>1]|0;
    $253 = $252&65535;
    $254 = $253 << 6;
    $255 = (((($237) + ($i1$025<<4)|0)) + 8|0);
    HEAP32[$255>>2] = $254;
    $256 = HEAP16[$236>>1]|0;
    $257 = $256&65535;
    $258 = $257 << 6;
    $259 = (((($237) + ($i1$025<<4)|0)) + 12|0);
    HEAP32[$259>>2] = $258;
    $260 = HEAP16[$236>>1]|0;
    $261 = $260&65535;
    $262 = $261 << 6;
    $263 = (((($237) + ($i1$025<<4)|0)) + 4|0);
    HEAP32[$263>>2] = $262;
    $264 = (($i1$025) + 1)|0;
    $265 = ($264>>>0)<($215>>>0);
    if ($265) {
     $i1$025 = $264;
    } else {
     label = 77;
     break;
    }
   }
   if ((label|0) == 77) {
    $266 = HEAP32[$145>>2]|0;
    $267 = $266 | 2;
    HEAP32[$145>>2] = $267;
    $268 = ((($face)) + 28|0);
    HEAP32[$268>>2] = $215;
    break;
   }
   else if ((label|0) == 92) {
    $370 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($370|0);
   }
  }
 } while(0);
 $269 = HEAP32[$145>>2]|0;
 $270 = $269 & 3;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $269 | 1;
  HEAP32[$145>>2] = $272;
 }
 $273 = HEAP32[$145>>2]|0;
 $274 = $273 & 1;
 $275 = ($274|0)==(0);
 if ($275) {
  $370 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($370|0);
 }
 $276 = ((($face)) + 196|0);
 $277 = HEAP16[$276>>1]|0;
 $278 = $277 << 16 >> 16;
 $279 = ((($face)) + 52|0);
 HEAP32[$279>>2] = $278;
 $280 = ((($face)) + 198|0);
 $281 = HEAP16[$280>>1]|0;
 $282 = $281 << 16 >> 16;
 $283 = ((($face)) + 56|0);
 HEAP32[$283>>2] = $282;
 $284 = ((($face)) + 200|0);
 $285 = HEAP16[$284>>1]|0;
 $286 = $285 << 16 >> 16;
 $287 = ((($face)) + 60|0);
 HEAP32[$287>>2] = $286;
 $288 = ((($face)) + 202|0);
 $289 = HEAP16[$288>>1]|0;
 $290 = $289 << 16 >> 16;
 $291 = ((($face)) + 64|0);
 HEAP32[$291>>2] = $290;
 $292 = HEAP16[$27>>1]|0;
 $293 = ((($face)) + 68|0);
 HEAP16[$293>>1] = $292;
 $294 = ((($face)) + 220|0);
 $295 = HEAP16[$294>>1]|0;
 $296 = ((($face)) + 70|0);
 HEAP16[$296>>1] = $295;
 $297 = ((($face)) + 222|0);
 $298 = HEAP16[$297>>1]|0;
 $299 = ((($face)) + 72|0);
 HEAP16[$299>>1] = $298;
 $300 = HEAP16[$296>>1]|0;
 $301 = $300&65535;
 $302 = $298&65535;
 $303 = (($301) - ($302))|0;
 $304 = ((($face)) + 224|0);
 $305 = HEAP16[$304>>1]|0;
 $306 = $305&65535;
 $307 = (($303) + ($306))|0;
 $308 = $307&65535;
 $309 = ((($face)) + 74|0);
 HEAP16[$309>>1] = $308;
 $310 = HEAP16[$296>>1]|0;
 $311 = ($310<<16>>16)==(0);
 do {
  if ($311) {
   $312 = HEAP16[$299>>1]|0;
   $313 = ($312<<16>>16)==(0);
   if ($313) {
    $314 = HEAP16[$102>>1]|0;
    $315 = ($314<<16>>16)==(-1);
    if (!($315)) {
     $316 = ((($face)) + 438|0);
     $317 = HEAP16[$316>>1]|0;
     $318 = ($317<<16>>16)==(0);
     if ($318) {
      $319 = ((($face)) + 440|0);
      $320 = HEAP16[$319>>1]|0;
      $321 = ($320<<16>>16)==(0);
      if ($321) {
       $334 = ((($face)) + 444|0);
       $335 = HEAP16[$334>>1]|0;
       HEAP16[$296>>1] = $335;
       $336 = ((($face)) + 446|0);
       $337 = HEAP16[$336>>1]|0;
       $338 = $337&65535;
       $339 = (0 - ($338))|0;
       $340 = $339&65535;
       HEAP16[$299>>1] = $340;
       $341 = HEAP16[$296>>1]|0;
       $342 = $341&65535;
       $343 = (($342) + ($338))|0;
       $344 = $343&65535;
       HEAP16[$309>>1] = $344;
       break;
      }
     }
     $322 = HEAP16[$316>>1]|0;
     HEAP16[$296>>1] = $322;
     $323 = ((($face)) + 440|0);
     $324 = HEAP16[$323>>1]|0;
     HEAP16[$299>>1] = $324;
     $325 = HEAP16[$296>>1]|0;
     $326 = $325&65535;
     $327 = $324&65535;
     $328 = (($326) - ($327))|0;
     $329 = ((($face)) + 442|0);
     $330 = HEAP16[$329>>1]|0;
     $331 = $330&65535;
     $332 = (($328) + ($331))|0;
     $333 = $332&65535;
     HEAP16[$309>>1] = $333;
    }
   }
  }
 } while(0);
 $345 = ((($face)) + 226|0);
 $346 = HEAP16[$345>>1]|0;
 $347 = ((($face)) + 76|0);
 HEAP16[$347>>1] = $346;
 $348 = HEAP8[$159>>0]|0;
 $349 = ($348<<24>>24)==(0);
 if ($349) {
  $353 = HEAP16[$309>>1]|0;
  $354 = $353 << 16 >> 16;
  $356 = $354;
 } else {
  $350 = ((($face)) + 310|0);
  $351 = HEAP16[$350>>1]|0;
  $352 = $351&65535;
  $356 = $352;
 }
 $355 = $356&65535;
 $357 = ((($face)) + 78|0);
 HEAP16[$357>>1] = $355;
 $358 = ((($face)) + 476|0);
 $359 = HEAP16[$358>>1]|0;
 $360 = $359&65535;
 $361 = ((($face)) + 478|0);
 $362 = HEAP16[$361>>1]|0;
 $363 = $362 << 16 >> 16;
 $364 = (($363|0) / 2)&-1;
 $365 = (($360) - ($364))|0;
 $366 = $365&65535;
 $367 = ((($face)) + 80|0);
 HEAP16[$367>>1] = $366;
 $368 = HEAP16[$361>>1]|0;
 $369 = ((($face)) + 82|0);
 HEAP16[$369>>1] = $368;
 $370 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($370|0);
}
function _sfnt_done_face($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($face|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($face)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($face)) + 532|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = ((($4)) + 116|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   FUNCTION_TABLE_vi[$7 & 127]($face);
  }
  $9 = ((($4)) + 144|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   FUNCTION_TABLE_vi[$10 & 127]($face);
  }
 }
 _tt_face_free_bdf_props($face);
 _tt_face_done_kern($face);
 $12 = ((($face)) + 144|0);
 $13 = HEAP32[$12>>2]|0;
 _ft_mem_free($2,$13);
 HEAP32[$12>>2] = 0;
 $14 = ((($face)) + 140|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($face)) + 156|0);
 $16 = HEAP32[$15>>2]|0;
 _ft_mem_free($2,$16);
 HEAP32[$15>>2] = 0;
 $17 = ((($face)) + 152|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($face)) + 104|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($face)) + 500|0);
 _FT_Stream_ReleaseFrame($19,$20);
 $21 = ((($face)) + 504|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($face)) + 252|0);
 $23 = HEAP32[$22>>2]|0;
 _ft_mem_free($2,$23);
 HEAP32[$22>>2] = 0;
 $24 = ((($face)) + 256|0);
 $25 = HEAP32[$24>>2]|0;
 _ft_mem_free($2,$25);
 HEAP32[$24>>2] = 0;
 $26 = ((($face)) + 296|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)==(0);
 if (!($28)) {
  $29 = ((($face)) + 336|0);
  $30 = HEAP32[$29>>2]|0;
  _ft_mem_free($2,$30);
  HEAP32[$29>>2] = 0;
  $31 = ((($face)) + 340|0);
  $32 = HEAP32[$31>>2]|0;
  _ft_mem_free($2,$32);
  HEAP32[$31>>2] = 0;
  HEAP8[$26>>0] = 0;
 }
 $33 = ((($face)) + 552|0);
 $34 = HEAP32[$33>>2]|0;
 _ft_mem_free($2,$34);
 HEAP32[$33>>2] = 0;
 $35 = ((($face)) + 550|0);
 HEAP16[$35>>1] = 0;
 if ($5) {
  $36 = ((($4)) + 60|0);
  $37 = HEAP32[$36>>2]|0;
  FUNCTION_TABLE_vi[$37 & 127]($face);
 }
 $38 = ((($face)) + 20|0);
 $39 = HEAP32[$38>>2]|0;
 _ft_mem_free($2,$39);
 HEAP32[$38>>2] = 0;
 $40 = ((($face)) + 24|0);
 $41 = HEAP32[$40>>2]|0;
 _ft_mem_free($2,$41);
 HEAP32[$40>>2] = 0;
 $42 = ((($face)) + 32|0);
 $43 = HEAP32[$42>>2]|0;
 _ft_mem_free($2,$43);
 HEAP32[$42>>2] = 0;
 $44 = ((($face)) + 28|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($face)) + 700|0);
 $46 = HEAP32[$45>>2]|0;
 _ft_mem_free($2,$46);
 HEAP32[$45>>2] = 0;
 HEAP32[$3>>2] = 0;
 return;
}
function _sfnt_open_font($stream,$face) {
 $stream = $stream|0;
 $face = $face|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $error = 0, $n$010 = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, $switch$split72D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 132|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($face)) + 136|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($face)) + 140|0);
 HEAP32[$4>>2] = 0;
 $5 = (_FT_Stream_Pos($stream)|0);
 $6 = (_FT_Stream_ReadULong($stream,$error)|0);
 $7 = HEAP32[$error>>2]|0;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   $switch$split2D = ($6|0)<(1953658213);
   L3: do {
    if ($switch$split2D) {
     $switch$split12D = ($6|0)<(131072);
     if ($switch$split12D) {
      switch ($6|0) {
      case 65536:  {
       break L3;
       break;
      }
      default: {
       $$0 = 2;
       break L1;
      }
      }
     }
     $switch$split72D = ($6|0)<(1330926671);
     if ($switch$split72D) {
      switch ($6|0) {
      case 131072:  {
       break L3;
       break;
      }
      default: {
       $$0 = 2;
       break L1;
      }
      }
     } else {
      switch ($6|0) {
      case 1330926671:  {
       break L3;
       break;
      }
      default: {
       $$0 = 2;
       break L1;
      }
      }
     }
    } else {
     $switch$split42D = ($6|0)<(1953784678);
     if ($switch$split42D) {
      switch ($6|0) {
      case 1953658213:  {
       break L3;
       break;
      }
      default: {
       $$0 = 2;
       break L1;
      }
      }
     }
     $switch$split102D = ($6|0)<(1954115633);
     if ($switch$split102D) {
      switch ($6|0) {
      case 1953784678:  {
       break L3;
       break;
      }
      default: {
       $$0 = 2;
       break L1;
      }
      }
     } else {
      switch ($6|0) {
      case 1954115633:  {
       break L3;
       break;
      }
      default: {
       $$0 = 2;
       break L1;
      }
      }
     }
    }
   } while(0);
   HEAP32[$2>>2] = 1953784678;
   $9 = ($6|0)==(1953784678);
   if ($9) {
    $10 = (_FT_Stream_ReadFields($stream,23586,$2)|0);
    HEAP32[$error>>2] = $10;
    $11 = ($10|0)==(0);
    if (!($11)) {
     $$0 = $10;
     break;
    }
    $12 = HEAP32[$4>>2]|0;
    $13 = ($12|0)==(0);
    if ($13) {
     $$0 = 8;
     break;
    }
    $14 = ((($stream)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 >>> 5;
    $17 = ($12>>>0)>($16>>>0);
    if ($17) {
     $$0 = 10;
     break;
    }
    $18 = (_ft_mem_realloc($1,4,0,$12,0,$error)|0);
    $19 = ((($face)) + 144|0);
    HEAP32[$19>>2] = $18;
    $20 = HEAP32[$error>>2]|0;
    $21 = ($20|0)==(0);
    if (!($21)) {
     $$0 = $20;
     break;
    }
    $22 = HEAP32[$4>>2]|0;
    $23 = $22 << 2;
    $24 = (_FT_Stream_EnterFrame($stream,$23)|0);
    HEAP32[$error>>2] = $24;
    $25 = ($24|0)==(0);
    if (!($25)) {
     $$0 = $24;
     break;
    }
    $26 = HEAP32[$4>>2]|0;
    $27 = ($26|0)>(0);
    if ($27) {
     $n$010 = 0;
     while(1) {
      $28 = (_FT_Stream_GetULong($stream)|0);
      $29 = HEAP32[$19>>2]|0;
      $30 = (($29) + ($n$010<<2)|0);
      HEAP32[$30>>2] = $28;
      $31 = (($n$010) + 1)|0;
      $32 = HEAP32[$4>>2]|0;
      $33 = ($31|0)<($32|0);
      if ($33) {
       $n$010 = $31;
      } else {
       break;
      }
     }
    }
    _FT_Stream_ExitFrame($stream);
   } else {
    HEAP32[$3>>2] = 65536;
    HEAP32[$4>>2] = 1;
    $34 = (_ft_mem_alloc($1,4,$error)|0);
    $35 = ((($face)) + 144|0);
    HEAP32[$35>>2] = $34;
    $36 = HEAP32[$error>>2]|0;
    $37 = ($36|0)==(0);
    if (!($37)) {
     $$0 = $36;
     break;
    }
    HEAP32[$34>>2] = $5;
   }
   $38 = HEAP32[$error>>2]|0;
   $$0 = $38;
  } else {
   $$0 = $7;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _tt_face_get_name($face,$nameid,$name) {
 $face = $face|0;
 $nameid = $nameid|0;
 $name = $name|0;
 var $$found_apple_roman$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $convert$0 = 0, $error = 0;
 var $found_apple_english$0$found_apple_roman$0 = 0, $found_apple_english$09 = 0, $found_apple_english$1 = 0, $found_apple_english$1$lcssa = 0, $found_apple_roman$08 = 0, $found_apple_roman$1 = 0, $found_apple_roman$1$lcssa = 0, $found_unicode$011 = 0, $found_unicode$1 = 0, $found_unicode$1$lcssa = 0, $found_win$010 = 0, $found_win$1 = 0, $found_win$1$lcssa = 0, $indvars$iv = 0, $indvars$iv$next = 0, $is_english$012 = 0, $is_english$1 = 0, $is_english$1$lcssa = 0, $or$cond = 0, $rec$06 = 0;
 var $rec$1 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = ((($face)) + 360|0);
 $3 = ((($face)) + 344|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(0);
 if ($5) {
  $result$0 = 0;
  HEAP32[$name>>2] = $result$0;
  $76 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($76|0);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP16[$3>>1]|0;
 $8 = $7&65535;
 $found_apple_english$09 = -1;$found_apple_roman$08 = -1;$found_unicode$011 = -1;$found_win$010 = -1;$indvars$iv = 0;$is_english$012 = 0;$rec$06 = $6;
 while(1) {
  $9 = ((($rec$06)) + 6|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = ($10<<16>>16)==($nameid<<16>>16);
  L6: do {
   if ($11) {
    $12 = ((($rec$06)) + 8|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = ($13<<16>>16)==(0);
    if ($14) {
     $found_apple_english$1 = $found_apple_english$09;$found_apple_roman$1 = $found_apple_roman$08;$found_unicode$1 = $found_unicode$011;$found_win$1 = $found_win$010;$is_english$1 = $is_english$012;
    } else {
     $15 = HEAP16[$rec$06>>1]|0;
     $16 = $15&65535;
     switch ($16|0) {
     case 2: case 0:  {
      $found_apple_english$1 = $found_apple_english$09;$found_apple_roman$1 = $found_apple_roman$08;$found_unicode$1 = $indvars$iv;$found_win$1 = $found_win$010;$is_english$1 = $is_english$012;
      break L6;
      break;
     }
     case 1:  {
      $17 = ((($rec$06)) + 4|0);
      $18 = HEAP16[$17>>1]|0;
      $19 = ($18<<16>>16)==(0);
      if ($19) {
       $found_apple_english$1 = $indvars$iv;$found_apple_roman$1 = $found_apple_roman$08;$found_unicode$1 = $found_unicode$011;$found_win$1 = $found_win$010;$is_english$1 = $is_english$012;
       break L6;
      }
      $20 = ((($rec$06)) + 2|0);
      $21 = HEAP16[$20>>1]|0;
      $22 = ($21<<16>>16)==(0);
      $$found_apple_roman$0 = $22 ? $indvars$iv : $found_apple_roman$08;
      $found_apple_english$1 = $found_apple_english$09;$found_apple_roman$1 = $$found_apple_roman$0;$found_unicode$1 = $found_unicode$011;$found_win$1 = $found_win$010;$is_english$1 = $is_english$012;
      break L6;
      break;
     }
     case 3:  {
      $23 = ($found_win$010|0)==(-1);
      if (!($23)) {
       $24 = ((($rec$06)) + 4|0);
       $25 = HEAP16[$24>>1]|0;
       $26 = $25 & 1023;
       $27 = ($26<<16>>16)==(9);
       if (!($27)) {
        $found_apple_english$1 = $found_apple_english$09;$found_apple_roman$1 = $found_apple_roman$08;$found_unicode$1 = $found_unicode$011;$found_win$1 = $found_win$010;$is_english$1 = $is_english$012;
        break L6;
       }
      }
      $28 = ((($rec$06)) + 2|0);
      $29 = HEAP16[$28>>1]|0;
      $30 = $29&65535;
      switch ($30|0) {
      case 10: case 1: case 0:  {
       break;
      }
      default: {
       $found_apple_english$1 = $found_apple_english$09;$found_apple_roman$1 = $found_apple_roman$08;$found_unicode$1 = $found_unicode$011;$found_win$1 = $found_win$010;$is_english$1 = $is_english$012;
       break L6;
      }
      }
      $31 = ((($rec$06)) + 4|0);
      $32 = HEAP16[$31>>1]|0;
      $33 = $32 & 1023;
      $34 = ($33<<16>>16)==(9);
      $35 = $34&1;
      $found_apple_english$1 = $found_apple_english$09;$found_apple_roman$1 = $found_apple_roman$08;$found_unicode$1 = $found_unicode$011;$found_win$1 = $indvars$iv;$is_english$1 = $35;
      break L6;
      break;
     }
     default: {
      $found_apple_english$1 = $found_apple_english$09;$found_apple_roman$1 = $found_apple_roman$08;$found_unicode$1 = $found_unicode$011;$found_win$1 = $found_win$010;$is_english$1 = $is_english$012;
      break L6;
     }
     }
    }
   } else {
    $found_apple_english$1 = $found_apple_english$09;$found_apple_roman$1 = $found_apple_roman$08;$found_unicode$1 = $found_unicode$011;$found_win$1 = $found_win$010;$is_english$1 = $is_english$012;
   }
  } while(0);
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  $36 = ((($rec$06)) + 20|0);
  $37 = ($indvars$iv$next>>>0)<($8>>>0);
  if ($37) {
   $found_apple_english$09 = $found_apple_english$1;$found_apple_roman$08 = $found_apple_roman$1;$found_unicode$011 = $found_unicode$1;$found_win$010 = $found_win$1;$indvars$iv = $indvars$iv$next;$is_english$012 = $is_english$1;$rec$06 = $36;
  } else {
   $found_apple_english$1$lcssa = $found_apple_english$1;$found_apple_roman$1$lcssa = $found_apple_roman$1;$found_unicode$1$lcssa = $found_unicode$1;$found_win$1$lcssa = $found_win$1;$is_english$1$lcssa = $is_english$1;
   break;
  }
 }
 $38 = ($found_apple_english$1$lcssa|0)>(-1);
 $found_apple_english$0$found_apple_roman$0 = $38 ? $found_apple_english$1$lcssa : $found_apple_roman$1$lcssa;
 $39 = ($found_win$1$lcssa|0)>(-1);
 L20: do {
  if ($39) {
   $40 = ($found_apple_english$0$found_apple_roman$0|0)<(0);
   $41 = ($is_english$1$lcssa<<24>>24)!=(0);
   $or$cond = $40 | $41;
   if ($or$cond) {
    $42 = HEAP32[$2>>2]|0;
    $43 = (($42) + (($found_win$1$lcssa*20)|0)|0);
    $44 = (((($42) + (($found_win$1$lcssa*20)|0)|0)) + 2|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45&65535;
    switch ($46|0) {
    case 10: case 0: case 1:  {
     $convert$0 = 154;$rec$1 = $43;
     break L20;
     break;
    }
    default: {
     $result$0 = 0;
    }
    }
    HEAP32[$name>>2] = $result$0;
    $76 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($76|0);
   } else {
    label = 17;
   }
  } else {
   label = 17;
  }
 } while(0);
 do {
  if ((label|0) == 17) {
   $47 = ($found_apple_english$0$found_apple_roman$0|0)>(-1);
   if ($47) {
    $48 = HEAP32[$2>>2]|0;
    $49 = (($48) + (($found_apple_english$0$found_apple_roman$0*20)|0)|0);
    $convert$0 = 155;$rec$1 = $49;
    break;
   }
   $50 = ($found_unicode$1$lcssa|0)>(-1);
   if ($50) {
    $51 = HEAP32[$2>>2]|0;
    $52 = (($51) + (($found_unicode$1$lcssa*20)|0)|0);
    $convert$0 = 154;$rec$1 = $52;
    break;
   } else {
    $result$0 = 0;
    HEAP32[$name>>2] = $result$0;
    $76 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($76|0);
   }
  }
 } while(0);
 $53 = ($rec$1|0)==(0|0);
 if ($53) {
  $result$0 = 0;
  HEAP32[$name>>2] = $result$0;
  $76 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($76|0);
 }
 $54 = ((($rec$1)) + 16|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)==(0|0);
 do {
  if ($56) {
   $57 = ((($face)) + 364|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($rec$1)) + 8|0);
   $60 = HEAP16[$59>>1]|0;
   $61 = $60&65535;
   $62 = (_ft_mem_realloc($1,1,0,$61,0,$error)|0);
   HEAP32[$54>>2] = $62;
   $63 = HEAP32[$error>>2]|0;
   $64 = ($63|0)==(0);
   if ($64) {
    $65 = ((($rec$1)) + 12|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (_FT_Stream_Seek($58,$66)|0);
    HEAP32[$error>>2] = $67;
    $68 = ($67|0)==(0);
    if ($68) {
     $69 = HEAP32[$54>>2]|0;
     $70 = HEAP16[$59>>1]|0;
     $71 = $70&65535;
     $72 = (_FT_Stream_Read($58,$69,$71)|0);
     HEAP32[$error>>2] = $72;
     $73 = ($72|0)==(0);
     if ($73) {
      break;
     }
    }
   }
   $74 = HEAP32[$54>>2]|0;
   _ft_mem_free($1,$74);
   HEAP32[$54>>2] = 0;
   HEAP16[$59>>1] = 0;
   $result$0 = 0;
   HEAP32[$name>>2] = $result$0;
   $76 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($76|0);
  }
 } while(0);
 $75 = (FUNCTION_TABLE_iii[$convert$0 & 255]($rec$1,$1)|0);
 $result$0 = $75;
 HEAP32[$name>>2] = $result$0;
 $76 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($76|0);
}
function _sfnt_find_encoding($platform_id,$encoding_id) {
 $platform_id = $platform_id|0;
 $encoding_id = $encoding_id|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($platform_id|0)==(2);
 L1: do {
  if ($0) {
   $cur$02$lcssa = 12048;
  } else {
   switch ($platform_id|0) {
   case 0:  {
    $cur$02$lcssa = (12060);
    break L1;
    break;
   }
   case 1:  {
    $3 = ($encoding_id|0)==(0);
    if ($3) {
     $cur$02$lcssa = (12072);
     break L1;
    } else {
     $$0 = 0;
    }
    return ($$0|0);
    break;
   }
   case 3:  {
    $4 = ($encoding_id|0)==(0);
    if ($4) {
     $cur$02$lcssa = (12084);
     break L1;
    }
    $5 = ($encoding_id|0)==(10);
    if ($5) {
     $cur$02$lcssa = (12096);
     break L1;
    }
    $6 = ($encoding_id|0)==(1);
    if ($6) {
     $cur$02$lcssa = (12108);
     break L1;
    }
    $7 = ($encoding_id|0)==(2);
    if ($7) {
     $cur$02$lcssa = (12120);
     break L1;
    }
    $8 = ($encoding_id|0)==(3);
    if ($8) {
     $cur$02$lcssa = (12132);
     break L1;
    }
    $9 = ($encoding_id|0)==(4);
    if ($9) {
     $cur$02$lcssa = (12144);
     break L1;
    }
    $10 = ($encoding_id|0)==(5);
    if ($10) {
     $cur$02$lcssa = (12156);
     break L1;
    }
    $11 = ($encoding_id|0)==(6);
    if ($11) {
     $cur$02$lcssa = (12168);
     break L1;
    } else {
     $$0 = 0;
    }
    return ($$0|0);
    break;
   }
   default: {
    $$0 = 0;
    return ($$0|0);
   }
   }
  }
 } while(0);
 $1 = ((($cur$02$lcssa)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $$0 = $2;
 return ($$0|0);
}
function _tt_name_entry_ascii_from_other($entry,$memory) {
 $entry = $entry|0;
 $memory = $memory|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $error = 0, $n$0$lcssa = 0, $n$02 = 0, $or$cond = 0, $read$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($entry)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($entry)) + 8|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($4) + 1)|0;
 $6 = (_ft_mem_realloc($memory,1,0,$5,0,$error)|0);
 $7 = HEAP32[$error>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ($3<<16>>16)==(0);
 L4: do {
  if ($9) {
   $n$0$lcssa = 0;
  } else {
   $n$02 = 0;$read$03 = $1;
   while(1) {
    $10 = HEAP8[$read$03>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $n$0$lcssa = $n$02;
     break L4;
    }
    $12 = ((($read$03)) + 1|0);
    $13 = ($10&255)<(32);
    $14 = ($10<<24>>24)<(0);
    $or$cond = $13 | $14;
    $15 = $or$cond ? 63 : $10;
    $16 = (($6) + ($n$02)|0);
    HEAP8[$16>>0] = $15;
    $17 = (($n$02) + 1)|0;
    $18 = ($17>>>0)<($4>>>0);
    if ($18) {
     $n$02 = $17;$read$03 = $12;
    } else {
     $n$0$lcssa = $17;
     break;
    }
   }
  }
 } while(0);
 $19 = (($6) + ($n$0$lcssa)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $6;
 STACKTOP = sp;return ($$0|0);
}
function _tt_name_entry_ascii_from_utf16($entry,$memory) {
 $entry = $entry|0;
 $memory = $memory|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $error = 0, $n$0$lcssa = 0, $n$02 = 0, $read$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($entry)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($entry)) + 8|0);
 $3 = HEAP16[$2>>1]|0;
 $div = ($3&65535) >>> 1;
 $4 = $div&65535;
 $5 = (($4) + 1)|0;
 $6 = (_ft_mem_realloc($memory,1,0,$5,0,$error)|0);
 $7 = HEAP32[$error>>2]|0;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ($div<<16>>16)==(0);
 L4: do {
  if ($9) {
   $n$0$lcssa = 0;
  } else {
   $n$02 = 0;$read$03 = $1;
   while(1) {
    $10 = HEAP8[$read$03>>0]|0;
    $11 = $10&255;
    $12 = $11 << 8;
    $13 = ((($read$03)) + 1|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14&255;
    $16 = $12 | $15;
    $17 = ($16|0)==(0);
    if ($17) {
     $n$0$lcssa = $n$02;
     break L4;
    }
    $18 = ((($read$03)) + 2|0);
    $$off = (($16) + -32)|0;
    $19 = ($$off>>>0)>(95);
    $20 = $19 ? 63 : $14;
    $21 = (($6) + ($n$02)|0);
    HEAP8[$21>>0] = $20;
    $22 = (($n$02) + 1)|0;
    $23 = ($22>>>0)<($4>>>0);
    if ($23) {
     $n$02 = $22;$read$03 = $18;
    } else {
     $n$0$lcssa = $22;
     break;
    }
   }
  }
 } while(0);
 $24 = (($6) + ($n$0$lcssa)|0);
 HEAP8[$24>>0] = 0;
 $$0 = $6;
 STACKTOP = sp;return ($$0|0);
}
function _t1_cmap_standard_init($cmap) {
 $cmap = $cmap|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _t1_cmap_std_init($cmap,0);
 return 0;
}
function _t1_cmap_std_done($cmap) {
 $cmap = $cmap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 return;
}
function _t1_cmap_std_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$01 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($char_code>>>0)<(256);
 if (!($0)) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $1 = ((($cmap)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($char_code<<1)|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ((($cmap)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 63]($5)|0);
 $9 = ((($cmap)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $12 = ((($cmap)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $n$01 = 0;
 while(1) {
  $14 = (($13) + ($n$01<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = HEAP8[$15>>0]|0;
   $18 = HEAP8[$8>>0]|0;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $20 = (_strcmp($15,$8)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $result$0 = $n$01;
     label = 8;
     break;
    }
   }
  }
  $22 = (($n$01) + 1)|0;
  $23 = HEAP32[$9>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   $n$01 = $22;
  } else {
   $result$0 = 0;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  return ($result$0|0);
 }
 return (0)|0;
}
function _t1_cmap_std_char_next($cmap,$pchar_code) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $char_code$0 = 0, $char_code$0$in = 0, $char_code$1 = 0, $result$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pchar_code>>2]|0;
 $char_code$0$in = $0;
 while(1) {
  $char_code$0 = (($char_code$0$in) + 1)|0;
  $1 = ($char_code$0>>>0)<(256);
  if (!($1)) {
   $char_code$1 = 0;$result$1 = 0;
   break;
  }
  $2 = (_t1_cmap_std_char_index($cmap,$char_code$0)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $char_code$0$in = $char_code$0;
  } else {
   $char_code$1 = $char_code$0;$result$1 = $2;
   break;
  }
 }
 HEAP32[$pchar_code>>2] = $char_code$1;
 return ($result$1|0);
}
function _t1_cmap_expert_init($cmap) {
 $cmap = $cmap|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _t1_cmap_std_init($cmap,1);
 return 0;
}
function _t1_cmap_custom_init($cmap) {
 $cmap = $cmap|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$cmap>>2]|0;
 $1 = ((($0)) + 376|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($cmap)) + 16|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 380|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) - ($2))|0;
 $7 = ((($cmap)) + 20|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($0)) + 384|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($cmap)) + 24|0);
 HEAP32[$10>>2] = $9;
 return 0;
}
function _t1_cmap_custom_done($cmap) {
 $cmap = $cmap|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 24|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($cmap)) + 16|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($cmap)) + 20|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _t1_cmap_custom_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($char_code>>>0);
 if ($2) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $3 = ((($cmap)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1))|0;
 $6 = ($5>>>0)>($char_code>>>0);
 if (!($6)) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $7 = ((($cmap)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($char_code<<1)|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $result$0 = $11;
 return ($result$0|0);
}
function _t1_cmap_custom_char_next($cmap,$pchar_code) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 var $$ = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $char_code$01 = 0, $char_code$01$lcssa = 0, $char_code$1 = 0, $result$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pchar_code>>2]|0;
 $1 = (($0) + 1)|0;
 $2 = ((($cmap)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 $$ = $4 ? $3 : $1;
 $5 = ((($cmap)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($3))|0;
 $8 = ($$>>>0)<($7>>>0);
 L1: do {
  if ($8) {
   $9 = ((($cmap)) + 24|0);
   $10 = HEAP32[$9>>2]|0;
   $char_code$01 = $$;
   while(1) {
    $11 = (($10) + ($char_code$01<<1)|0);
    $12 = HEAP16[$11>>1]|0;
    $13 = ($12<<16>>16)==(0);
    if (!($13)) {
     $$lcssa = $12;$char_code$01$lcssa = $char_code$01;
     break;
    }
    $14 = (($char_code$01) + 1)|0;
    $15 = HEAP32[$2>>2]|0;
    $16 = HEAP32[$5>>2]|0;
    $17 = (($16) + ($15))|0;
    $18 = ($14>>>0)<($17>>>0);
    if ($18) {
     $char_code$01 = $14;
    } else {
     $char_code$1 = 0;$result$1 = 0;
     break L1;
    }
   }
   $19 = $$lcssa&65535;
   $char_code$1 = $char_code$01$lcssa;$result$1 = $19;
  } else {
   $char_code$1 = 0;$result$1 = 0;
  }
 } while(0);
 HEAP32[$pchar_code>>2] = $char_code$1;
 return ($result$1|0);
}
function _t1_cmap_unicode_init($unicodes) {
 $unicodes = $unicodes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$unicodes>>2]|0;
 $1 = ((($0)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 484|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 416|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiiiiii[$6 & 3]($2,$unicodes,$8,156,0,$0)|0);
 return ($9|0);
}
function _t1_cmap_unicode_done($unicodes) {
 $unicodes = $unicodes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$unicodes>>2]|0;
 $1 = ((($0)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($unicodes)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 _ft_mem_free($2,$4);
 HEAP32[$3>>2] = 0;
 $5 = ((($unicodes)) + 16|0);
 HEAP32[$5>>2] = 0;
 return;
}
function _t1_cmap_unicode_char_index($unicodes,$char_code) {
 $unicodes = $unicodes|0;
 $char_code = $char_code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$unicodes>>2]|0;
 $1 = ((($0)) + 484|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iii[$4 & 255]($unicodes,$char_code)|0);
 return ($5|0);
}
function _t1_cmap_unicode_char_next($unicodes,$pchar_code) {
 $unicodes = $unicodes|0;
 $pchar_code = $pchar_code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$unicodes>>2]|0;
 $1 = ((($0)) + 484|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iii[$4 & 255]($unicodes,$pchar_code)|0);
 return ($5|0);
}
function _psaux_get_glyph_name($face,$idx) {
 $face = $face|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 420|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($idx<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _t1_cmap_std_init($cmap,$is_expert) {
 $cmap = $cmap|0;
 $is_expert = $is_expert|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$cmap>>2]|0;
 $1 = ((($0)) + 484|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 416|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($cmap)) + 24|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 420|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($cmap)) + 28|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($2)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($cmap)) + 20|0);
 HEAP32[$11>>2] = $10;
 $12 = ($is_expert|0)==(0);
 $13 = ((($2)) + 28|0);
 $14 = ((($2)) + 24|0);
 $$in = $12 ? $14 : $13;
 $15 = HEAP32[$$in>>2]|0;
 $16 = ((($cmap)) + 16|0);
 HEAP32[$16>>2] = $15;
 return;
}
function _tt_glyphzone_done($zone) {
 $zone = $zone|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$zone>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($zone)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 _ft_mem_free($0,$3);
 HEAP32[$2>>2] = 0;
 $4 = ((($zone)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 _ft_mem_free($0,$5);
 HEAP32[$4>>2] = 0;
 $6 = ((($zone)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 _ft_mem_free($0,$7);
 HEAP32[$6>>2] = 0;
 $8 = ((($zone)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 _ft_mem_free($0,$9);
 HEAP32[$8>>2] = 0;
 $10 = ((($zone)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 _ft_mem_free($0,$11);
 HEAP32[$10>>2] = 0;
 ;HEAP32[$zone>>2]=0|0;HEAP32[$zone+4>>2]=0|0;HEAP32[$zone+8>>2]=0|0;
 return;
}
function _tt_glyphzone_new($memory,$maxPoints,$maxContours,$zone) {
 $memory = $memory|0;
 $maxPoints = $maxPoints|0;
 $maxContours = $maxContours|0;
 $zone = $zone|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 dest=$zone; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$zone>>2] = $memory;
 $0 = $maxPoints&65535;
 $1 = (_ft_mem_realloc($memory,8,0,$0,0,$error)|0);
 $2 = ((($zone)) + 12|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$error>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (_ft_mem_realloc($memory,8,0,$0,0,$error)|0);
  $6 = ((($zone)) + 16|0);
  HEAP32[$6>>2] = $5;
  $7 = HEAP32[$error>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = (_ft_mem_realloc($memory,8,0,$0,0,$error)|0);
   $10 = ((($zone)) + 20|0);
   HEAP32[$10>>2] = $9;
   $11 = HEAP32[$error>>2]|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = (_ft_mem_realloc($memory,1,0,$0,0,$error)|0);
    $14 = ((($zone)) + 24|0);
    HEAP32[$14>>2] = $13;
    $15 = HEAP32[$error>>2]|0;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $maxContours << 16 >> 16;
     $18 = (_ft_mem_realloc($memory,2,0,$17,0,$error)|0);
     $19 = ((($zone)) + 28|0);
     HEAP32[$19>>2] = $18;
     $20 = HEAP32[$error>>2]|0;
     $21 = ($20|0)==(0);
     if ($21) {
      $22 = ((($zone)) + 4|0);
      HEAP16[$22>>1] = $maxPoints;
      $23 = ((($zone)) + 6|0);
      HEAP16[$23>>1] = $maxContours;
      $24 = HEAP32[$error>>2]|0;
      STACKTOP = sp;return ($24|0);
     }
    }
   }
  }
 }
 _tt_glyphzone_done($zone);
 $24 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($24|0);
}
function _tt_face_init($stream,$ttface,$face_index,$num_params,$params) {
 $stream = $stream|0;
 $ttface = $ttface|0;
 $face_index = $face_index|0;
 $num_params = $num_params|0;
 $params = $params|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$3 = 0, $error$4 = 0;
 var $switch$split12D = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ttface)) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_FT_Get_Module_Interface($3,89702)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 11;
  return ($$0|0);
 }
 $6 = (_FT_Stream_Seek($stream,0)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  return ($$0|0);
 }
 $8 = ((($4)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iiiiii[$9 & 63]($stream,$ttface,$face_index,$num_params,$params)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = $10;
  return ($$0|0);
 }
 $12 = ((($ttface)) + 148|0);
 $13 = HEAP32[$12>>2]|0;
 $switch$split2D = ($13|0)<(131072);
 L10: do {
  if ($switch$split2D) {
   switch ($13|0) {
   case 65536:  {
    break L10;
    break;
   }
   default: {
    $$0 = 2;
   }
   }
   return ($$0|0);
  } else {
   $switch$split12D = ($13|0)<(1953658213);
   if ($switch$split12D) {
    switch ($13|0) {
    case 131072:  {
     break L10;
     break;
    }
    default: {
     $$0 = 2;
    }
    }
    return ($$0|0);
   } else {
    switch ($13|0) {
    case 1953658213:  {
     break L10;
     break;
    }
    default: {
     $$0 = 2;
    }
    }
    return ($$0|0);
   }
  }
 } while(0);
 $14 = ((($ttface)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 | 2048;
 HEAP32[$14>>2] = $16;
 $17 = ($face_index|0)<(0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 }
 $18 = ((($4)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_iiiiii[$19 & 63]($stream,$ttface,$face_index,$num_params,$params)|0);
 $21 = ($20|0)==(0);
 if (!($21)) {
  $$0 = $20;
  return ($$0|0);
 }
 $22 = (_tt_check_trickyness($ttface)|0);
 $23 = ($22<<24>>24)==(0);
 if (!($23)) {
  $24 = HEAP32[$14>>2]|0;
  $25 = $24 | 8192;
  HEAP32[$14>>2] = $25;
 }
 $26 = (_tt_face_load_hdmx($ttface,$stream)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  $$0 = $26;
  return ($$0|0);
 }
 $28 = HEAP32[$14>>2]|0;
 $29 = $28 & 1;
 $30 = ($29|0)==(0);
 if ($30) {
  $error$4 = 0;
 } else {
  $31 = ((($ttface)) + 128|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($32)) + 52|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0|0);
  if ($35) {
   $36 = (_tt_face_load_loca($ttface,$stream)|0);
   $37 = ($36|0)==(0);
   if ($37) {
    label = 13;
   } else {
    $error$3 = $36;
   }
  } else {
   label = 13;
  }
  if ((label|0) == 13) {
   $38 = (_tt_face_load_cvt($ttface,$stream)|0);
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = (_tt_face_load_fpgm($ttface,$stream)|0);
    $41 = ($40|0)==(0);
    if ($41) {
     $42 = (_tt_face_load_prep($ttface,$stream)|0);
     $error$3 = $42;
    } else {
     $error$3 = $40;
    }
   } else {
    $error$3 = $38;
   }
  }
  $43 = HEAP32[$31>>2]|0;
  $44 = ((($43)) + 52|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0|0);
  if ($46) {
   $47 = ((($ttface)) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(0);
   if ($49) {
    $error$4 = $error$3;
   } else {
    $50 = ((($ttface)) + 736|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($51|0)==(0|0);
    if ($52) {
     $error$4 = $error$3;
    } else {
     $53 = (_tt_check_single_notdef($ttface)|0);
     $54 = ($53<<24>>24)==(0);
     if ($54) {
      $error$4 = $error$3;
     } else {
      $55 = HEAP32[$14>>2]|0;
      $56 = $55 & -2;
      HEAP32[$14>>2] = $56;
      $error$4 = $error$3;
     }
    }
   }
  } else {
   $error$4 = $error$3;
  }
 }
 _TT_Init_Glyph_Loading($ttface);
 $$0 = $error$4;
 return ($$0|0);
}
function _tt_face_done($ttface) {
 $ttface = $ttface|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ttface|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($ttface)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($ttface)) + 104|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($ttface)) + 532|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($ttface)) + 692|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vi[$9 & 127]($11);
 }
 $12 = ($6|0)==(0|0);
 if (!($12)) {
  $13 = ((($6)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  FUNCTION_TABLE_vi[$14 & 127]($ttface);
 }
 _tt_face_done_loca($ttface);
 _tt_face_free_hdmx($ttface);
 $15 = ((($ttface)) + 672|0);
 $16 = HEAP32[$15>>2]|0;
 _ft_mem_free($2,$16);
 HEAP32[$15>>2] = 0;
 $17 = ((($ttface)) + 668|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($ttface)) + 656|0);
 _FT_Stream_ReleaseFrame($4,$18);
 $19 = ((($ttface)) + 664|0);
 _FT_Stream_ReleaseFrame($4,$19);
 $20 = ((($ttface)) + 652|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($ttface)) + 660|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($ttface)) + 712|0);
 $23 = HEAP32[$22>>2]|0;
 _tt_done_blend($2,$23);
 HEAP32[$22>>2] = 0;
 return;
}
function _tt_size_run_fpgm($size,$pedantic) {
 $size = $size|0;
 $pedantic = $pedantic|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exec$0 = 0, $exec$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($size)) + 292|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $5 = ((($0)) + 96|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 28|0);
  $exec$0$in = $7;
 } else {
  $4 = ((($size)) + 296|0);
  $exec$0$in = $4;
 }
 $exec$0 = HEAP32[$exec$0$in>>2]|0;
 $8 = ($exec$0|0)==(0|0);
 if ($8) {
  $$0 = 153;
  return ($$0|0);
 }
 (_TT_Load_Context($exec$0,$0,$size)|0);
 $9 = ((($exec$0)) + 428|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($exec$0)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($exec$0)) + 476|0);
 HEAP32[$11>>2] = 64;
 $12 = ((($exec$0)) + 480|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($exec$0)) + 484|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($exec$0)) + 488|0);
 HEAP8[$14>>0] = 0;
 $15 = ((($exec$0)) + 564|0);
 HEAP32[$15>>2] = 65536;
 $16 = ((($exec$0)) + 561|0);
 HEAP8[$16>>0] = $pedantic;
 $17 = ((($exec$0)) + 216|0);
 $18 = ((($exec$0)) + 252|0);
 HEAP16[$18>>1] = 0;
 $19 = ((($exec$0)) + 260|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($exec$0)) + 256|0);
 ;HEAP16[$17>>1]=0|0;HEAP16[$17+2>>1]=0|0;HEAP16[$17+4>>1]=0|0;HEAP16[$17+6>>1]=0|0;HEAP16[$17+8>>1]=0|0;HEAP16[$17+10>>1]=0|0;
 HEAP32[$20>>2] = 65536;
 $21 = ((($0)) + 656|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($0)) + 652|0);
 $24 = HEAP32[$23>>2]|0;
 (_TT_Set_CodeRange($exec$0,1,$22,$24)|0);
 (_TT_Clear_CodeRange($exec$0,2)|0);
 (_TT_Clear_CodeRange($exec$0,3)|0);
 $25 = HEAP32[$23>>2]|0;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (_TT_Goto_CodeRange($exec$0,1,0)|0);
  $28 = ($27|0)==(0);
  if (!($28)) {
   $$0 = $27;
   return ($$0|0);
  }
  $29 = ((($0)) + 688|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (FUNCTION_TABLE_ii[$30 & 63]($exec$0)|0);
  $32 = ($31|0)==(0);
  if (!($32)) {
   $$0 = $31;
   return ($$0|0);
  }
 }
 (_TT_Save_Context($exec$0,$size)|0);
 $$0 = 0;
 return ($$0|0);
}
function _tt_size_run_prep($size,$pedantic) {
 $size = $size|0;
 $pedantic = $pedantic|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $exec$0 = 0, $exec$0$in = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($size)) + 292|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $5 = ((($0)) + 96|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 28|0);
  $exec$0$in = $7;
 } else {
  $4 = ((($size)) + 296|0);
  $exec$0$in = $4;
 }
 $exec$0 = HEAP32[$exec$0$in>>2]|0;
 $8 = ($exec$0|0)==(0|0);
 if ($8) {
  $$0 = 153;
  return ($$0|0);
 }
 (_TT_Load_Context($exec$0,$0,$size)|0);
 $9 = ((($exec$0)) + 428|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($exec$0)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($exec$0)) + 488|0);
 HEAP8[$11>>0] = 0;
 $12 = ((($exec$0)) + 561|0);
 HEAP8[$12>>0] = $pedantic;
 $13 = ((($0)) + 664|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($0)) + 660|0);
 $16 = HEAP32[$15>>2]|0;
 (_TT_Set_CodeRange($exec$0,2,$14,$16)|0);
 (_TT_Clear_CodeRange($exec$0,3)|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  $error$0 = 0;
 } else {
  $19 = (_TT_Goto_CodeRange($exec$0,2,0)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = HEAP8[$1>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $23 = ((($0)) + 688|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 63]($exec$0)|0);
    $error$0 = $25;
   } else {
    $error$0 = 0;
   }
  } else {
   $error$0 = $19;
  }
 }
 $26 = ((($size)) + 172|0);
 $27 = ((($exec$0)) + 284|0);
 dest=$26; src=$27; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 (_TT_Save_Context($exec$0,$size)|0);
 $$0 = $error$0;
 return ($$0|0);
}
function _tt_size_ready_bytecode($size,$pedantic) {
 $size = $size|0;
 $pedantic = $pedantic|0;
 var $$op = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$1 = 0, $i$05 = 0, $i$13 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($size)) + 300|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = (_tt_size_init_bytecode($size,$pedantic)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $error$1 = $3;
   return ($error$1|0);
  }
 }
 $5 = ((($size)) + 301|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $error$1 = 0;
  return ($error$1|0);
 }
 $8 = ((($size)) + 240|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = HEAP32[$size>>2]|0;
  $12 = ((($11)) + 672|0);
  $13 = ((($size)) + 88|0);
  $14 = ((($size)) + 244|0);
  $i$05 = 0;
  while(1) {
   $24 = HEAP32[$12>>2]|0;
   $25 = (($24) + ($i$05<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = $26 << 16 >> 16;
   $28 = HEAP32[$13>>2]|0;
   $29 = (_FT_MulFix($27,$28)|0);
   $30 = HEAP32[$14>>2]|0;
   $31 = (($30) + ($i$05<<2)|0);
   HEAP32[$31>>2] = $29;
   $32 = (($i$05) + 1)|0;
   $33 = HEAP32[$8>>2]|0;
   $34 = ($32>>>0)<($33>>>0);
   if ($34) {
    $i$05 = $32;
   } else {
    break;
   }
  }
 }
 $15 = ((($size)) + 264|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = ($16<<16>>16)==(0);
 if (!($17)) {
  $18 = ((($size)) + 268|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($size)) + 272|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP16[$15>>1]|0;
  $23 = $22&65535;
  $i$13 = 0;
  while(1) {
   $38 = (($19) + ($i$13<<3)|0);
   HEAP32[$38>>2] = 0;
   $39 = (((($19) + ($i$13<<3)|0)) + 4|0);
   HEAP32[$39>>2] = 0;
   $40 = (($21) + ($i$13<<3)|0);
   HEAP32[$40>>2] = 0;
   $41 = (((($21) + ($i$13<<3)|0)) + 4|0);
   HEAP32[$41>>2] = 0;
   $42 = (($i$13) + 1)|0;
   $43 = ($42>>>0)<($23>>>0);
   if ($43) {
    $i$13 = $42;
   } else {
    break;
   }
  }
 }
 $35 = ((($size)) + 248|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = ($36<<16>>16)==(0);
 if (!($37)) {
  $44 = ((($size)) + 252|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP16[$35>>1]|0;
  $47 = $46&65535;
  $48 = ($46&65535)>(1);
  $$op = $47 << 2;
  $49 = $48 ? $$op : 4;
  _memset(($45|0),0,($49|0))|0;
 }
 $50 = ((($size)) + 172|0);
 dest=$50; src=12748; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $51 = (_tt_size_run_prep($size,$pedantic)|0);
 $52 = ($51|0)==(0);
 if (!($52)) {
  $error$1 = $51;
  return ($error$1|0);
 }
 HEAP8[$5>>0] = 1;
 $error$1 = 0;
 return ($error$1|0);
}
function _tt_size_init($ttsize) {
 $ttsize = $ttsize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ttsize)) + 300|0);
 HEAP8[$0>>0] = 0;
 $1 = ((($ttsize)) + 301|0);
 HEAP8[$1>>0] = 0;
 $2 = ((($ttsize)) + 72|0);
 $3 = ((($2)) + 36|0);
 HEAP8[$3>>0] = 0;
 $4 = ((($ttsize)) + 112|0);
 HEAP32[$4>>2] = -1;
 return 0;
}
function _tt_size_done($ttsize) {
 $ttsize = $ttsize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ttsize)) + 300|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  _tt_size_done_bytecode($ttsize);
 }
 $3 = ((($ttsize)) + 72|0);
 $4 = ((($3)) + 36|0);
 HEAP8[$4>>0] = 0;
 return;
}
function _tt_size_reset($size) {
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($size)) + 72|0);
 $1 = ((($size)) + 108|0);
 HEAP8[$1>>0] = 0;
 $2 = HEAP32[$size>>2]|0;
 $3 = ((($size)) + 44|0);
 $4 = ((($size)) + 12|0);
 ;HEAP32[$3>>2]=HEAP32[$4>>2]|0;HEAP32[$3+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$3+20>>2]=HEAP32[$4+20>>2]|0;HEAP32[$3+24>>2]=HEAP32[$4+24>>2]|0;
 $5 = HEAP16[$3>>1]|0;
 $6 = $5&65535;
 $7 = ($5<<16>>16)==(0);
 if ($7) {
  $$0 = 151;
  return ($$0|0);
 }
 $8 = ((($size)) + 46|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  $$0 = 151;
  return ($$0|0);
 }
 $11 = ((($2)) + 176|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 & 8;
 $14 = ($13<<16>>16)==(0);
 if (!($14)) {
  $15 = $6 << 6;
  $16 = ((($2)) + 68|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = (_FT_DivFix($15,$18)|0);
  $20 = ((($size)) + 48|0);
  HEAP32[$20>>2] = $19;
  $21 = HEAP16[$8>>1]|0;
  $22 = $21&65535;
  $23 = $22 << 6;
  $24 = HEAP16[$16>>1]|0;
  $25 = $24&65535;
  $26 = (_FT_DivFix($23,$25)|0);
  $27 = ((($size)) + 52|0);
  HEAP32[$27>>2] = $26;
  $28 = ((($2)) + 70|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 << 16 >> 16;
  $31 = (_FT_MulFix($30,$26)|0);
  $32 = (($31) + 32)|0;
  $33 = $32 & -64;
  $34 = ((($size)) + 56|0);
  HEAP32[$34>>2] = $33;
  $35 = ((($2)) + 72|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  $38 = HEAP32[$27>>2]|0;
  $39 = (_FT_MulFix($37,$38)|0);
  $40 = (($39) + 32)|0;
  $41 = $40 & -64;
  $42 = ((($size)) + 60|0);
  HEAP32[$42>>2] = $41;
  $43 = ((($2)) + 74|0);
  $44 = HEAP16[$43>>1]|0;
  $45 = $44 << 16 >> 16;
  $46 = HEAP32[$27>>2]|0;
  $47 = (_FT_MulFix($45,$46)|0);
  $48 = (($47) + 32)|0;
  $49 = $48 & -64;
  $50 = ((($size)) + 64|0);
  HEAP32[$50>>2] = $49;
  $51 = ((($2)) + 76|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = HEAP32[$20>>2]|0;
  $55 = (_FT_MulFix($53,$54)|0);
  $56 = (($55) + 32)|0;
  $57 = $56 & -64;
  $58 = ((($size)) + 68|0);
  HEAP32[$58>>2] = $57;
 }
 $59 = HEAP16[$3>>1]|0;
 $60 = HEAP16[$8>>1]|0;
 $61 = ($59&65535)<($60&65535);
 if ($61) {
  $73 = ((($size)) + 52|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($size)) + 88|0);
  HEAP32[$75>>2] = $74;
  $76 = HEAP16[$8>>1]|0;
  $77 = ((($size)) + 80|0);
  HEAP16[$77>>1] = $76;
  $78 = HEAP16[$3>>1]|0;
  $79 = $78&65535;
  $80 = HEAP16[$8>>1]|0;
  $81 = $80&65535;
  $82 = (_FT_MulDiv($79,65536,$81)|0);
  HEAP32[$0>>2] = $82;
  $83 = ((($size)) + 76|0);
  HEAP32[$83>>2] = 65536;
 } else {
  $62 = ((($size)) + 48|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ((($size)) + 88|0);
  HEAP32[$64>>2] = $63;
  $65 = HEAP16[$3>>1]|0;
  $66 = ((($size)) + 80|0);
  HEAP16[$66>>1] = $65;
  HEAP32[$0>>2] = 65536;
  $67 = HEAP16[$8>>1]|0;
  $68 = $67&65535;
  $69 = HEAP16[$3>>1]|0;
  $70 = $69&65535;
  $71 = (_FT_MulDiv($68,65536,$70)|0);
  $72 = ((($size)) + 76|0);
  HEAP32[$72>>2] = $71;
 }
 $84 = ((($size)) + 301|0);
 HEAP8[$84>>0] = 0;
 HEAP8[$1>>0] = 1;
 $$0 = 0;
 return ($$0|0);
}
function _tt_driver_init($ttdriver) {
 $ttdriver = $ttdriver|0;
 var $$ = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_TT_New_Context($ttdriver)|0);
 $1 = ($0|0)==(0|0);
 $$ = $1 ? 153 : 0;
 return ($$|0);
}
function _tt_driver_done($ttdriver) {
 $ttdriver = $ttdriver|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ttdriver)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 (_TT_Done_Context($1)|0);
 HEAP32[$0>>2] = 0;
 return;
}
function _tt_slot_init($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($slot)) + 156|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_FT_GlyphLoader_CreateExtra($2)|0);
 return ($3|0);
}
function _tt_check_trickyness($face) {
 $face = $face|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($face)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = (_tt_check_trickyness_family($2)|0);
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $6 = (_tt_check_trickyness_sfnt_ids($face)|0);
 $not$ = ($6<<24>>24)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _tt_check_single_notdef($ttface) {
 $ttface = $ttface|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $asize = 0;
 var $buf = 0, $count$06 = 0, $count$1 = 0, $count$1$lcssa = 0, $glyph_index$05 = 0, $glyph_index$1 = 0, $glyph_index$1$lcssa = 0, $i$04 = 0, $or$cond = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $asize = sp;
 $buf = sp + 8|0;
 $0 = ((($ttface)) + 732|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $result$0 = 0;
  } else {
   $count$06 = 0;$glyph_index$05 = 0;$i$04 = 0;
   while(1) {
    (_tt_face_get_location($ttface,$i$04,$asize)|0);
    $3 = HEAP32[$asize>>2]|0;
    $4 = ($3|0)==(0);
    if ($4) {
     $count$1 = $count$06;$glyph_index$1 = $glyph_index$05;
    } else {
     $5 = (($count$06) + 1)|0;
     $6 = ($5>>>0)>(1);
     if ($6) {
      $result$0 = 0;
      break L1;
     } else {
      $count$1 = $5;$glyph_index$1 = $i$04;
     }
    }
    $7 = (($i$04) + 1)|0;
    $8 = HEAP32[$0>>2]|0;
    $9 = ($7>>>0)<($8>>>0);
    if ($9) {
     $count$06 = $count$1;$glyph_index$05 = $glyph_index$1;$i$04 = $7;
    } else {
     $count$1$lcssa = $count$1;$glyph_index$1$lcssa = $glyph_index$1;
     break;
    }
   }
   $10 = ($count$1$lcssa|0)==(1);
   if ($10) {
    $11 = ($glyph_index$1$lcssa|0)==(0);
    if ($11) {
     $result$0 = 1;
    } else {
     $12 = (_FT_Get_Glyph_Name($ttface,$glyph_index$1$lcssa,$buf,8)|0);
     $13 = ($12|0)==(0);
     $14 = HEAP8[$buf>>0]|0;
     $15 = ($14<<24>>24)==(46);
     $or$cond = $13 & $15;
     if ($or$cond) {
      $16 = (_strncmp($buf,89635,8)|0);
      $17 = ($16|0)==(0);
      $$ = $17&1;
      STACKTOP = sp;return ($$|0);
     } else {
      $result$0 = 0;
     }
    }
   } else {
    $result$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($result$0|0);
}
function _tt_size_init_bytecode($ftsize,$pedantic) {
 $ftsize = $ftsize|0;
 $pedantic = $pedantic|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $scevgep = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = HEAP32[$ftsize>>2]|0;
 $1 = ((($0)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($ftsize)) + 300|0);
 HEAP8[$3>>0] = 1;
 $4 = ((($ftsize)) + 301|0);
 HEAP8[$4>>0] = 0;
 $5 = ((($0)) + 280|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ((($ftsize)) + 120|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($0)) + 282|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ((($ftsize)) + 132|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($ftsize)) + 116|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($ftsize)) + 128|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($ftsize)) + 140|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($ftsize)) + 144|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($0)) + 668|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($ftsize)) + 240|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($0)) + 278|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = ((($ftsize)) + 248|0);
 HEAP16[$22>>1] = $21;
 $23 = ((($ftsize)) + 72|0);
 $24 = ((($23)) + 37|0);
 HEAP8[$24>>0] = 0;
 $25 = ((($23)) + 38|0);
 HEAP8[$25>>0] = 0;
 $scevgep = ((($ftsize)) + 92|0);
 ;HEAP32[$scevgep>>2]=0|0;HEAP32[$scevgep+4>>2]=0|0;HEAP32[$scevgep+8>>2]=0|0;HEAP32[$scevgep+12>>2]=0|0;
 $26 = HEAP32[$8>>2]|0;
 $27 = (_ft_mem_realloc($2,20,0,$26,0,$error)|0);
 $28 = ((($ftsize)) + 124|0);
 HEAP32[$28>>2] = $27;
 $29 = HEAP32[$error>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = HEAP32[$12>>2]|0;
  $32 = (_ft_mem_realloc($2,20,0,$31,0,$error)|0);
  $33 = ((($ftsize)) + 136|0);
  HEAP32[$33>>2] = $32;
  $34 = HEAP32[$error>>2]|0;
  $35 = ($34|0)==(0);
  if ($35) {
   $36 = HEAP32[$19>>2]|0;
   $37 = (_ft_mem_realloc($2,4,0,$36,0,$error)|0);
   $38 = ((($ftsize)) + 244|0);
   HEAP32[$38>>2] = $37;
   $39 = HEAP32[$error>>2]|0;
   $40 = ($39|0)==(0);
   if ($40) {
    $41 = HEAP16[$22>>1]|0;
    $42 = $41&65535;
    $43 = (_ft_mem_realloc($2,4,0,$42,0,$error)|0);
    $44 = ((($ftsize)) + 252|0);
    HEAP32[$44>>2] = $43;
    $45 = HEAP32[$error>>2]|0;
    $46 = ($45|0)==(0);
    if ($46) {
     $47 = ((($0)) + 276|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48&65535;
     $50 = (($49) + 4)|0;
     $51 = $50&65535;
     $52 = ((($ftsize)) + 256|0);
     $53 = (_tt_glyphzone_new($2,$51,0,$52)|0);
     HEAP32[$error>>2] = $53;
     $54 = ($53|0)==(0);
     if ($54) {
      $55 = ((($52)) + 8|0);
      HEAP16[$55>>1] = $51;
      $56 = ((($ftsize)) + 172|0);
      dest=$56; src=12748; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      $57 = ((($0)) + 96|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ((($58)) + 4|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ((($60)) + 172|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ((($0)) + 688|0);
      $64 = ($62|0)==(0|0);
      $$ = $64 ? 51 : $62;
      HEAP32[$63>>2] = $$;
      $65 = (_tt_size_run_fpgm($ftsize,$pedantic)|0);
      HEAP32[$error>>2] = $65;
      $66 = ($65|0)==(0);
      if ($66) {
       $67 = HEAP32[$error>>2]|0;
       STACKTOP = sp;return ($67|0);
      }
     }
    }
   }
  }
 }
 _tt_size_done_bytecode($ftsize);
 $67 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($67|0);
}
function _tt_size_done_bytecode($ftsize) {
 $ftsize = $ftsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ftsize>>2]|0;
 $1 = ((($0)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($ftsize)) + 292|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $6 = ((($ftsize)) + 296|0);
  HEAP32[$6>>2] = 0;
  HEAP8[$3>>0] = 0;
 }
 $7 = ((($ftsize)) + 244|0);
 $8 = HEAP32[$7>>2]|0;
 _ft_mem_free($2,$8);
 HEAP32[$7>>2] = 0;
 $9 = ((($ftsize)) + 240|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($ftsize)) + 252|0);
 $11 = HEAP32[$10>>2]|0;
 _ft_mem_free($2,$11);
 HEAP32[$10>>2] = 0;
 $12 = ((($ftsize)) + 248|0);
 HEAP16[$12>>1] = 0;
 $13 = ((($ftsize)) + 256|0);
 _tt_glyphzone_done($13);
 $14 = ((($ftsize)) + 124|0);
 $15 = HEAP32[$14>>2]|0;
 _ft_mem_free($2,$15);
 HEAP32[$14>>2] = 0;
 $16 = ((($ftsize)) + 136|0);
 $17 = HEAP32[$16>>2]|0;
 _ft_mem_free($2,$17);
 $18 = ((($ftsize)) + 116|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($ftsize)) + 120|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($ftsize)) + 128|0);
 $21 = ((($ftsize)) + 300|0);
 HEAP8[$21>>0] = 0;
 $22 = ((($ftsize)) + 301|0);
 ;HEAP32[$20>>2]=0|0;HEAP32[$20+4>>2]=0|0;HEAP32[$20+8>>2]=0|0;HEAP32[$20+12>>2]=0|0;HEAP32[$20+16>>2]=0|0;
 HEAP8[$22>>0] = 0;
 return;
}
function _tt_check_trickyness_family($name) {
 $name = $name|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strstr($name,87964)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  return 1;
 }
 $2 = (_strstr($name,(87981))|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  return 1;
 }
 $4 = (_strstr($name,(87998))|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  return 1;
 }
 $6 = (_strstr($name,(88015))|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  return 1;
 }
 $8 = (_strstr($name,(88032))|0);
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  return 1;
 }
 $10 = (_strstr($name,(88049))|0);
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  return 1;
 }
 $12 = (_strstr($name,(88066))|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = (_strstr($name,(88083))|0);
  $not$ = ($14|0)!=(0|0);
  $$ = $not$&1;
  return ($$|0);
 } else {
  return 1;
 }
 return (0)|0;
}
function _tt_check_trickyness_sfnt_ids($face) {
 $face = $face|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $checksum$05 = 0, $checksum$1 = 0, $checksum$2 = 0, $has_cvt$0$lcssa = 0, $has_cvt$08 = 0, $has_cvt$1 = 0, $has_cvt$2 = 0, $i$09 = 0, $j$06 = 0, $j$14 = 0, $k$0 = 0, $num_matched_ids = 0, $or$cond = 0, $switch$split12D = 0, $switch$split2D = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $num_matched_ids = sp;
 dest=$num_matched_ids; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($face)) + 152|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 L1: do {
  if ($2) {
   $has_cvt$0$lcssa = 0;
  } else {
   $3 = ((($face)) + 156|0);
   $7 = 0;$has_cvt$08 = 0;$i$09 = 0;
   L3: while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = (($5) + ($7<<4)|0);
    $8 = HEAP32[$6>>2]|0;
    $switch$split2D = ($8|0)<(1718642541);
    L5: do {
     if ($switch$split2D) {
      switch ($8|0) {
      case 1668707360:  {
       $has_cvt$1 = 1;$k$0 = 0;
       label = 7;
       break;
      }
      default: {
       $has_cvt$2 = $has_cvt$08;
      }
      }
     } else {
      $switch$split12D = ($8|0)<(1886545264);
      if ($switch$split12D) {
       switch ($8|0) {
       case 1718642541:  {
        break;
       }
       default: {
        $has_cvt$2 = $has_cvt$08;
        break L5;
       }
       }
       $has_cvt$1 = $has_cvt$08;$k$0 = 1;
       label = 7;
       break;
      } else {
       switch ($8|0) {
       case 1886545264:  {
        break;
       }
       default: {
        $has_cvt$2 = $has_cvt$08;
        break L5;
       }
       }
       $has_cvt$1 = $has_cvt$08;$k$0 = 2;
       label = 7;
       break;
      }
     }
    } while(0);
    if ((label|0) == 7) {
     label = 0;
     $checksum$05 = 0;$j$06 = 0;
     while(1) {
      $9 = HEAP32[$3>>2]|0;
      $10 = (((($9) + ($7<<4)|0)) + 12|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = ((((12340 + (($j$06*24)|0)|0) + ($k$0<<3)|0)) + 4|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ($11|0)==($13|0);
      if ($14) {
       $15 = ($checksum$05|0)==(0);
       if ($15) {
        $16 = (_tt_get_sfnt_checksum($face,$i$09)|0);
        $checksum$1 = $16;
       } else {
        $checksum$1 = $checksum$05;
       }
       $17 = ((12340 + (($j$06*24)|0)|0) + ($k$0<<3)|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = ($18|0)==($checksum$1|0);
       if ($19) {
        $20 = (($num_matched_ids) + ($j$06<<2)|0);
        $21 = HEAP32[$20>>2]|0;
        $22 = (($21) + 1)|0;
        HEAP32[$20>>2] = $22;
       }
       $23 = (($num_matched_ids) + ($j$06<<2)|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = ($24|0)==(3);
       if ($25) {
        $$0 = 1;
        break L3;
       } else {
        $checksum$2 = $checksum$1;
       }
      } else {
       $checksum$2 = $checksum$05;
      }
      $26 = (($j$06) + 1)|0;
      $27 = ($26|0)<(17);
      if ($27) {
       $checksum$05 = $checksum$2;$j$06 = $26;
      } else {
       $has_cvt$2 = $has_cvt$1;
       break;
      }
     }
    }
    $28 = (($i$09) + 1)<<16>>16;
    $29 = $28&65535;
    $30 = HEAP16[$0>>1]|0;
    $31 = ($28&65535)<($30&65535);
    if ($31) {
     $7 = $29;$has_cvt$08 = $has_cvt$2;$i$09 = $28;
    } else {
     $has_cvt$0$lcssa = $has_cvt$2;
     break L1;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $4 = ($has_cvt$0$lcssa<<24>>24)!=(0);
 $j$14 = 0;
 while(1) {
  $34 = ($j$14>>>0)<(5);
  $or$cond = $4 | $34;
  if (!($or$cond)) {
   $35 = (($num_matched_ids) + ($j$14<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($36) + 1)|0;
   HEAP32[$35>>2] = $37;
  }
  $38 = (($num_matched_ids) + ($j$14<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(3);
  $33 = (($j$14) + 1)|0;
  if ($40) {
   $$0 = 1;
   label = 20;
   break;
  }
  $32 = ($33|0)<(17);
  if ($32) {
   $j$14 = $33;
  } else {
   $$0 = 0;
   label = 20;
   break;
  }
 }
 if ((label|0) == 20) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _tt_get_sfnt_checksum($face,$i) {
 $face = $face|0;
 $i = $i|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 508|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = $i&65535;
 $4 = ((($face)) + 156|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<4)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($face)) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iiiii[$1 & 63]($face,$7,$9,0)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = HEAP32[$8>>2]|0;
 $13 = HEAP32[$4>>2]|0;
 $14 = (((($13) + ($3<<4)|0)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_tt_synth_sfnt_checksum($12,$15)|0);
 $$0 = $16;
 return ($$0|0);
}
function _tt_synth_sfnt_checksum($stream,$length) {
 $stream = $stream|0;
 $length = $length|0;
 var $$0 = 0, $$01$lcssa = 0, $$016 = 0, $$13 = 0, $$lcssa16 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $checksum$0$lcssa = 0, $checksum$07 = 0, $checksum$1$lcssa = 0, $checksum$14 = 0, $i$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FT_Stream_EnterFrame($stream,$length)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ($length>>>0)>(3);
 if ($2) {
  $$016 = $length;$checksum$07 = 0;
  while(1) {
   $5 = (_FT_Stream_GetULong($stream)|0);
   $6 = (($5) + ($checksum$07))|0;
   $7 = (($$016) + -4)|0;
   $8 = ($7>>>0)>(3);
   if ($8) {
    $$016 = $7;$checksum$07 = $6;
   } else {
    $$lcssa16 = $6;
    break;
   }
  }
  $3 = $length & 3;
  $$01$lcssa = $3;$checksum$0$lcssa = $$lcssa16;
 } else {
  $$01$lcssa = $length;$checksum$0$lcssa = 0;
 }
 $4 = ($$01$lcssa|0)==(0);
 if ($4) {
  $checksum$1$lcssa = $checksum$0$lcssa;
 } else {
  $$13 = $$01$lcssa;$checksum$14 = $checksum$0$lcssa;$i$05 = 3;
  while(1) {
   $9 = (_FT_Stream_GetChar($stream)|0);
   $10 = $9&255;
   $11 = $i$05 << 3;
   $12 = $10 << $11;
   $13 = (($12) + ($checksum$14))|0;
   $14 = (($$13) + -1)|0;
   $15 = (($i$05) + -1)|0;
   $16 = ($14|0)==(0);
   if ($16) {
    $checksum$1$lcssa = $13;
    break;
   } else {
    $$13 = $14;$checksum$14 = $13;$i$05 = $15;
   }
  }
 }
 _FT_Stream_ExitFrame($stream);
 $$0 = $checksum$1$lcssa;
 return ($$0|0);
}
function _tt_face_load_loca($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dist$0$lcssa = 0, $dist$03 = 0, $dist$1 = 0;
 var $dist$1$lcssa = 0, $dist$2 = 0, $entry$0$lcssa = 0, $entry$02 = 0, $error$0 = 0, $or$cond = 0, $or$cond1 = 0, $scevgep = 0, $scevgep5 = 0, $scevgep8 = 0, $shift$0 = 0, $table_len = 0, $uglygep = 0, $uglygep7 = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $table_len = sp;
 $0 = ((($face)) + 508|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 704|0);
 $3 = (FUNCTION_TABLE_iiiii[$1 & 63]($face,1735162214,$stream,$2)|0);
 switch ($3|0) {
 case 142:  {
  HEAP32[$2>>2] = 0;
  break;
 }
 case 0:  {
  break;
 }
 default: {
  $error$0 = $3;
  STACKTOP = sp;return ($error$0|0);
 }
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (FUNCTION_TABLE_iiiii[$4 & 63]($face,1819239265,$stream,$table_len)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $error$0 = 144;
  STACKTOP = sp;return ($error$0|0);
 }
 $7 = ((($face)) + 210|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($8<<16>>16)==(0);
 $10 = HEAP32[$table_len>>2]|0;
 do {
  if ($9) {
   $14 = ($10>>>0)>(131071);
   if ($14) {
    $error$0 = 8;
    STACKTOP = sp;return ($error$0|0);
   } else {
    $15 = $10 >>> 1;
    $16 = ((($face)) + 732|0);
    HEAP32[$16>>2] = $15;
    $shift$0 = 1;
    break;
   }
  } else {
   $11 = ($10>>>0)>(262143);
   if ($11) {
    $error$0 = 8;
    STACKTOP = sp;return ($error$0|0);
   } else {
    $12 = $10 >>> 2;
    $13 = ((($face)) + 732|0);
    HEAP32[$13>>2] = $12;
    $shift$0 = 2;
    break;
   }
  }
 } while(0);
 $17 = ((($face)) + 732|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($face)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 $22 = ($18|0)==($21|0);
 $23 = ($18>>>0)>($20>>>0);
 $or$cond = $23 | $22;
 if (!($or$cond)) {
  $24 = (($20) + 1)|0;
  $25 = $24 << $shift$0;
  $26 = ((($face)) + 156|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($face)) + 152|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29&65535;
  $31 = (($27) + ($30<<4)|0);
  $32 = (_FT_Stream_Pos($stream)|0);
  $33 = ($29<<16>>16)==(0);
  if ($33) {
   $dist$0$lcssa = 2147483647;$entry$0$lcssa = $27;
  } else {
   $34 = $27;
   $35 = $29&65535;
   $scevgep = (($27) + ($35<<4)|0);
   $scevgep5 = ((($27)) + 16|0);
   $36 = ($scevgep>>>0)>($scevgep5>>>0);
   $umax = $36 ? $scevgep : $scevgep5;
   $37 = $34 ^ -1;
   $uglygep = (($umax) + ($37)|0);
   $uglygep7 = $uglygep;
   $38 = $uglygep7 >>> 4;
   $39 = (($38) + 1)|0;
   $dist$03 = 2147483647;$entry$02 = $27;
   while(1) {
    $40 = ((($entry$02)) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) - ($32))|0;
    $43 = ($42|0)>(0);
    $44 = ($42|0)<($dist$03|0);
    $or$cond1 = $43 & $44;
    $dist$1 = $or$cond1 ? $42 : $dist$03;
    $45 = ((($entry$02)) + 16|0);
    $46 = ($45>>>0)<($31>>>0);
    if ($46) {
     $dist$03 = $dist$1;$entry$02 = $45;
    } else {
     $dist$1$lcssa = $dist$1;
     break;
    }
   }
   $scevgep8 = (($27) + ($39<<4)|0);
   $dist$0$lcssa = $dist$1$lcssa;$entry$0$lcssa = $scevgep8;
  }
  $47 = ($entry$0$lcssa|0)==($31|0);
  if ($47) {
   $48 = ((($stream)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) - ($32))|0;
   $dist$2 = $50;
  } else {
   $dist$2 = $dist$0$lcssa;
  }
  $51 = ($25|0)>($dist$2|0);
  if (!($51)) {
   $52 = HEAP32[$19>>2]|0;
   $53 = (($52) + 1)|0;
   HEAP32[$17>>2] = $53;
   HEAP32[$table_len>>2] = $25;
  }
 }
 $54 = HEAP32[$table_len>>2]|0;
 $55 = ((($face)) + 736|0);
 $56 = (_FT_Stream_ExtractFrame($stream,$54,$55)|0);
 $error$0 = $56;
 STACKTOP = sp;return ($error$0|0);
}
function _tt_face_get_location($face,$gindex,$asize) {
 $face = $face|0;
 $gindex = $gindex|0;
 $asize = $asize|0;
 var $$$pos2$1 = 0, $$0 = 0, $$pos2$1 = 0, $$sum1011 = 0, $$sum1213 = 0, $$sum1415 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum34 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $pos1$0 = 0, $pos1$021 = 0, $pos2$0 = 0, $pos2$1 = 0, $pos2$122 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 732|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($gindex>>>0);
 if ($2) {
  $5 = ((($face)) + 210|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = ($6<<16>>16)==(0);
  $8 = ((($face)) + 736|0);
  $9 = HEAP32[$8>>2]|0;
  if ($7) {
   $49 = $gindex << 1;
   $50 = $1 << 1;
   $51 = (($9) + ($49)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $53 << 8;
   $$sum34 = $49 | 1;
   $55 = (($9) + ($$sum34)|0);
   $56 = HEAP8[$55>>0]|0;
   $57 = $56&255;
   $58 = $54 | $57;
   $$sum5 = (($49) + 4)|0;
   $59 = ($$sum5|0)>($50|0);
   if ($59) {
    $pos2$0 = $58;
   } else {
    $$sum6 = (($49) + 2)|0;
    $60 = (($9) + ($$sum6)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = $62 << 8;
    $$sum7 = (($49) + 3)|0;
    $64 = (($9) + ($$sum7)|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65&255;
    $67 = $63 | $66;
    $pos2$0 = $67;
   }
   $68 = $58 << 1;
   $69 = $pos2$0 << 1;
   $pos1$0 = $68;$pos2$1 = $69;
  } else {
   $10 = $gindex << 2;
   $11 = $1 << 2;
   $12 = (($9) + ($10)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = $14 << 24;
   $$sum1011 = $10 | 1;
   $16 = (($9) + ($$sum1011)|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = $18 << 16;
   $20 = $19 | $15;
   $$sum1213 = $10 | 2;
   $21 = (($9) + ($$sum1213)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $23 << 8;
   $25 = $20 | $24;
   $$sum1415 = $10 | 3;
   $26 = (($9) + ($$sum1415)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $25 | $28;
   $$sum16 = (($10) + 8)|0;
   $30 = ($$sum16|0)>($11|0);
   if ($30) {
    $pos1$0 = $29;$pos2$1 = $29;
   } else {
    $$sum17 = (($10) + 4)|0;
    $31 = (($9) + ($$sum17)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = $33 << 24;
    $$sum18 = (($10) + 5)|0;
    $35 = (($9) + ($$sum18)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = $37 << 16;
    $39 = $38 | $34;
    $$sum19 = (($10) + 6)|0;
    $40 = (($9) + ($$sum19)|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = $42 << 8;
    $44 = $39 | $43;
    $$sum20 = (($10) + 7)|0;
    $45 = (($9) + ($$sum20)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = $44 | $47;
    $pos1$0 = $29;$pos2$1 = $48;
   }
  }
  $70 = ((($face)) + 704|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($pos1$0>>>0)>($71>>>0);
  if ($72) {
   $$0 = 0;$storemerge1 = 0;
   HEAP32[$asize>>2] = $storemerge1;
   return ($$0|0);
  } else {
   $74 = $71;$pos1$021 = $pos1$0;$pos2$122 = $pos2$1;
  }
 } else {
  $3 = ((($face)) + 704|0);
  $4 = HEAP32[$3>>2]|0;
  $74 = $4;$pos1$021 = 0;$pos2$122 = 0;
 }
 $73 = ($pos2$122>>>0)>($74>>>0);
 $$pos2$1 = $73 ? $74 : $pos2$122;
 $75 = ($$pos2$1>>>0)<($pos1$021>>>0);
 $$$pos2$1 = $75 ? $74 : $$pos2$1;
 $storemerge = (($$$pos2$1) - ($pos1$021))|0;
 $$0 = $pos1$021;$storemerge1 = $storemerge;
 HEAP32[$asize>>2] = $storemerge1;
 return ($$0|0);
}
function _tt_face_done_loca($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 736|0);
 _FT_Stream_ReleaseFrame($1,$2);
 $3 = ((($face)) + 732|0);
 HEAP32[$3>>2] = 0;
 return;
}
function _tt_face_load_cvt($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur$01 = 0, $error = 0, $table_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 4|0;
 $table_len = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 508|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiii[$3 & 63]($face,1668707360,$stream,$table_len)|0);
 HEAP32[$error>>2] = $4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = ((($face)) + 668|0);
  HEAP32[$6>>2] = 0;
  $7 = ((($face)) + 672|0);
  HEAP32[$7>>2] = 0;
  HEAP32[$error>>2] = 0;
  $30 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($30|0);
 }
 $8 = HEAP32[$table_len>>2]|0;
 $9 = $8 >>> 1;
 $10 = ((($face)) + 668|0);
 HEAP32[$10>>2] = $9;
 $11 = (_ft_mem_realloc($1,2,0,$9,0,$error)|0);
 $12 = ((($face)) + 672|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$error>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $30 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($30|0);
 }
 $15 = HEAP32[$10>>2]|0;
 $16 = $15 << 1;
 $17 = (_FT_Stream_EnterFrame($stream,$16)|0);
 HEAP32[$error>>2] = $17;
 $18 = ($17|0)==(0);
 if (!($18)) {
  $30 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($30|0);
 }
 $19 = HEAP32[$12>>2]|0;
 $20 = HEAP32[$10>>2]|0;
 $21 = (($19) + ($20<<1)|0);
 $22 = ($20|0)>(0);
 if ($22) {
  $cur$01 = $19;
  while(1) {
   $23 = (_FT_Stream_GetUShort($stream)|0);
   HEAP16[$cur$01>>1] = $23;
   $24 = ((($cur$01)) + 2|0);
   $25 = ($24>>>0)<($21>>>0);
   if ($25) {
    $cur$01 = $24;
   } else {
    break;
   }
  }
 }
 _FT_Stream_ExitFrame($stream);
 $26 = ((($face)) + 708|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $30 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($30|0);
 }
 $29 = (_tt_face_vary_cvt($face,$stream)|0);
 HEAP32[$error>>2] = $29;
 $30 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($30|0);
}
function _tt_face_load_fpgm($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $table_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $table_len = sp;
 $0 = ((($face)) + 508|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iiiii[$1 & 63]($face,1718642541,$stream,$table_len)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $6 = HEAP32[$table_len>>2]|0;
  $7 = ((($face)) + 652|0);
  HEAP32[$7>>2] = $6;
  $8 = HEAP32[$table_len>>2]|0;
  $9 = ((($face)) + 656|0);
  $10 = (_FT_Stream_ExtractFrame($stream,$8,$9)|0);
  $error$0 = $10;
  STACKTOP = sp;return ($error$0|0);
 } else {
  $4 = ((($face)) + 656|0);
  HEAP32[$4>>2] = 0;
  $5 = ((($face)) + 652|0);
  HEAP32[$5>>2] = 0;
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 }
 return (0)|0;
}
function _tt_face_load_prep($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $table_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $table_len = sp;
 $0 = ((($face)) + 508|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iiiii[$1 & 63]($face,1886545264,$stream,$table_len)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $6 = HEAP32[$table_len>>2]|0;
  $7 = ((($face)) + 660|0);
  HEAP32[$7>>2] = $6;
  $8 = HEAP32[$table_len>>2]|0;
  $9 = ((($face)) + 664|0);
  $10 = (_FT_Stream_ExtractFrame($stream,$8,$9)|0);
  $error$0 = $10;
  STACKTOP = sp;return ($error$0|0);
 } else {
  $4 = ((($face)) + 664|0);
  HEAP32[$4>>2] = 0;
  $5 = ((($face)) + 660|0);
  HEAP32[$5>>2] = 0;
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 }
 return (0)|0;
}
function _tt_face_load_hdmx($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $error = 0, $nn$0$lcssa = 0, $nn$06 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $p$07 = 0;
 var $table_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 4|0;
 $table_size = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 508|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiii[$3 & 63]($face,1751412088,$stream,$table_size)|0);
 HEAP32[$error>>2] = $4;
 $5 = ($4|0)!=(0);
 $6 = HEAP32[$table_size>>2]|0;
 $7 = ($6>>>0)<(8);
 $or$cond = $5 | $7;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ((($face)) + 740|0);
 $9 = (_FT_Stream_ExtractFrame($stream,$6,$8)|0);
 HEAP32[$error>>2] = $9;
 $10 = ($9|0)==(0);
 do {
  if ($10) {
   $11 = HEAP32[$8>>2]|0;
   $12 = HEAP32[$table_size>>2]|0;
   $13 = (($11) + ($12)|0);
   $14 = HEAP8[$11>>0]|0;
   $15 = $14&255;
   $16 = $15 << 8;
   $17 = ((($11)) + 1|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&255;
   $20 = $16 | $19;
   $21 = ((($11)) + 2|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $23 << 8;
   $25 = ((($11)) + 3|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = $24 | $27;
   $29 = ((($11)) + 4|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = $31 << 24;
   $33 = ((($11)) + 5|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $35 << 16;
   $37 = $36 | $32;
   $38 = ((($11)) + 6|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $40 << 8;
   $42 = $37 | $41;
   $43 = ((($11)) + 7|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = $42 | $45;
   $47 = ($46>>>0)>(4294901759);
   $48 = $46 & 65535;
   $$ = $47 ? $48 : $46;
   $49 = ($20|0)!=(0);
   $50 = ($28>>>0)>(255);
   $or$cond3 = $49 | $50;
   $51 = ($$>>>0)>(65537);
   $or$cond5 = $or$cond3 | $51;
   if ($or$cond5) {
    HEAP32[$error>>2] = 3;
   } else {
    $52 = (_ft_mem_realloc($1,1,0,$28,0,$error)|0);
    $53 = ((($face)) + 756|0);
    HEAP32[$53>>2] = $52;
    $54 = HEAP32[$error>>2]|0;
    $55 = ($54|0)==(0);
    if ($55) {
     $56 = ($28|0)==(0);
     L10: do {
      if ($56) {
       $nn$0$lcssa = 0;
      } else {
       $57 = ((($11)) + 8|0);
       $nn$06 = 0;$p$07 = $57;
       while(1) {
        $58 = (($p$07) + ($$)|0);
        $59 = ($58>>>0)>($13>>>0);
        if ($59) {
         $nn$0$lcssa = $nn$06;
         break L10;
        }
        $60 = HEAP8[$p$07>>0]|0;
        $61 = HEAP32[$53>>2]|0;
        $62 = (($61) + ($nn$06)|0);
        HEAP8[$62>>0] = $60;
        $63 = (($nn$06) + 1)|0;
        $64 = ($63>>>0)<($28>>>0);
        if ($64) {
         $nn$06 = $63;$p$07 = $58;
        } else {
         $nn$0$lcssa = $63;
         break;
        }
       }
      }
     } while(0);
     $65 = ((($face)) + 748|0);
     HEAP32[$65>>2] = $nn$0$lcssa;
     $66 = HEAP32[$table_size>>2]|0;
     $67 = ((($face)) + 744|0);
     HEAP32[$67>>2] = $66;
     $68 = ((($face)) + 752|0);
     HEAP32[$68>>2] = $$;
     break;
    }
   }
   _FT_Stream_ReleaseFrame($stream,$8);
   $70 = ((($face)) + 744|0);
   HEAP32[$70>>2] = 0;
  }
 } while(0);
 $69 = HEAP32[$error>>2]|0;
 $$0 = $69;
 STACKTOP = sp;return ($$0|0);
}
function _tt_face_free_hdmx($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 756|0);
 $5 = HEAP32[$4>>2]|0;
 _ft_mem_free($3,$5);
 HEAP32[$4>>2] = 0;
 $6 = ((($face)) + 740|0);
 _FT_Stream_ReleaseFrame($1,$6);
 return;
}
function _tt_face_get_device_metrics($face,$ppem,$gindex) {
 $face = $face|0;
 $ppem = $ppem|0;
 $gindex = $gindex|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $nn$03 = 0, $nn$03$lcssa = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 752|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 740|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 748|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $7 = ((($face)) + 756|0);
 $8 = HEAP32[$7>>2]|0;
 $nn$03 = 0;
 while(1) {
  $9 = (($8) + ($nn$03)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)==($ppem|0);
  if ($12) {
   $nn$03$lcssa = $nn$03;
   break;
  }
  $17 = (($nn$03) + 1)|0;
  $18 = HEAP32[$4>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   $nn$03 = $17;
  } else {
   $result$0 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($result$0|0);
 }
 $13 = (($gindex) + 2)|0;
 $14 = ($13>>>0)<($1>>>0);
 if (!($14)) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $15 = Math_imul($nn$03$lcssa, $1)|0;
 $$sum = (($gindex) + 10)|0;
 $$sum1 = (($$sum) + ($15))|0;
 $16 = (($3) + ($$sum1)|0);
 $result$0 = $16;
 return ($result$0|0);
}
function _TT_Goto_CodeRange($exec,$range,$IP) {
 $exec = $exec|0;
 $range = $range|0;
 $IP = $IP|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($range) + -1)|0;
 $1 = (((($exec)) + 444|0) + ($0<<3)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($exec)) + 356|0);
 HEAP32[$3>>2] = $2;
 $4 = (((((($exec)) + 444|0) + ($0<<3)|0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($exec)) + 364|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($exec)) + 360|0);
 HEAP32[$7>>2] = $IP;
 $8 = ((($exec)) + 352|0);
 HEAP32[$8>>2] = $range;
 return 0;
}
function _TT_Set_CodeRange($exec,$range,$base,$length) {
 $exec = $exec|0;
 $range = $range|0;
 $base = $base|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($range) + -1)|0;
 $1 = (((($exec)) + 444|0) + ($0<<3)|0);
 HEAP32[$1>>2] = $base;
 $2 = (((((($exec)) + 444|0) + ($0<<3)|0)) + 4|0);
 HEAP32[$2>>2] = $length;
 return 0;
}
function _TT_Clear_CodeRange($exec,$range) {
 $exec = $exec|0;
 $range = $range|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($range) + -1)|0;
 $1 = (((($exec)) + 444|0) + ($0<<3)|0);
 HEAP32[$1>>2] = 0;
 $2 = (((((($exec)) + 444|0) + ($0<<3)|0)) + 4|0);
 HEAP32[$2>>2] = 0;
 return 0;
}
function _TT_Done_Context($exec) {
 $exec = $exec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exec)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($exec)) + 440|0);
 HEAP16[$2>>1] = 0;
 $3 = ((($exec)) + 442|0);
 HEAP16[$3>>1] = 0;
 $4 = ((($exec)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 _ft_mem_free($1,$5);
 HEAP32[$4>>2] = 0;
 $6 = ((($exec)) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($exec)) + 436|0);
 $8 = HEAP32[$7>>2]|0;
 _ft_mem_free($1,$8);
 HEAP32[$7>>2] = 0;
 $9 = ((($exec)) + 432|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($exec)) + 428|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($exec)) + 392|0);
 $12 = HEAP32[$11>>2]|0;
 _ft_mem_free($1,$12);
 HEAP32[$11>>2] = 0;
 $13 = ((($exec)) + 388|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($exec)) + 4|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$exec>>2] = 0;
 _ft_mem_free($1,$exec);
 return 0;
}
function _Update_Max($memory,$size,$multiplier,$_pbuff,$new_max) {
 $memory = $memory|0;
 $size = $size|0;
 $multiplier = $multiplier|0;
 $_pbuff = $_pbuff|0;
 $new_max = $new_max|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = HEAP32[$size>>2]|0;
 $1 = ($0>>>0)<($new_max>>>0);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = Math_imul($0, $multiplier)|0;
 $3 = Math_imul($new_max, $multiplier)|0;
 $4 = HEAP32[$_pbuff>>2]|0;
 $5 = (_ft_mem_realloc($memory,1,$2,$3,$4,$error)|0);
 HEAP32[$_pbuff>>2] = $5;
 $6 = HEAP32[$error>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$size>>2] = $new_max;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _TT_Load_Context($exec,$face,$size) {
 $exec = $exec|0;
 $face = $face|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $tmp = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp = sp;
 HEAP32[$exec>>2] = $face;
 $0 = ((($exec)) + 4|0);
 HEAP32[$0>>2] = $size;
 $1 = ($size|0)==(0|0);
 if (!($1)) {
  $2 = ((($size)) + 116|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($exec)) + 396|0);
  HEAP32[$4>>2] = $3;
  $5 = ((($size)) + 120|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($exec)) + 400|0);
  HEAP32[$7>>2] = $6;
  $8 = ((($size)) + 128|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($exec)) + 408|0);
  HEAP32[$10>>2] = $9;
  $11 = ((($size)) + 132|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($exec)) + 412|0);
  HEAP32[$13>>2] = $12;
  $14 = ((($size)) + 124|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($exec)) + 404|0);
  HEAP32[$16>>2] = $15;
  $17 = ((($size)) + 136|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($exec)) + 416|0);
  HEAP32[$19>>2] = $18;
  $20 = ((($exec)) + 244|0);
  $21 = ((($size)) + 72|0);
  dest=$20; src=$21; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $22 = ((($exec)) + 216|0);
  $23 = ((($size)) + 44|0);
  ;HEAP32[$22>>2]=HEAP32[$23>>2]|0;HEAP32[$22+4>>2]=HEAP32[$23+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$23+8>>2]|0;HEAP32[$22+12>>2]=HEAP32[$23+12>>2]|0;HEAP32[$22+16>>2]=HEAP32[$23+16>>2]|0;HEAP32[$22+20>>2]=HEAP32[$23+20>>2]|0;HEAP32[$22+24>>2]=HEAP32[$23+24>>2]|0;
  $24 = ((($size)) + 140|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($exec)) + 420|0);
  HEAP32[$26>>2] = $25;
  $27 = ((($size)) + 144|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($exec)) + 424|0);
  HEAP32[$29>>2] = $28;
  $30 = ((($exec)) + 444|0);
  $31 = ((($size)) + 148|0);
  $32 = $31;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = $30;
  $39 = $38;
  HEAP32[$39>>2] = $34;
  $40 = (($38) + 4)|0;
  $41 = $40;
  HEAP32[$41>>2] = $37;
  $42 = ((($exec)) + 452|0);
  $43 = ((($size)) + 156|0);
  $44 = $43;
  $45 = $44;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($44) + 4)|0;
  $48 = $47;
  $49 = HEAP32[$48>>2]|0;
  $50 = $42;
  $51 = $50;
  HEAP32[$51>>2] = $46;
  $52 = (($50) + 4)|0;
  $53 = $52;
  HEAP32[$53>>2] = $49;
  $54 = ((($exec)) + 460|0);
  $55 = ((($size)) + 164|0);
  $56 = $55;
  $57 = $56;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($56) + 4)|0;
  $60 = $59;
  $61 = HEAP32[$60>>2]|0;
  $62 = $54;
  $63 = $62;
  HEAP32[$63>>2] = $58;
  $64 = (($62) + 4)|0;
  $65 = $64;
  HEAP32[$65>>2] = $61;
  $66 = ((($exec)) + 284|0);
  $67 = ((($size)) + 172|0);
  dest=$66; src=$67; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $68 = ((($size)) + 240|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($exec)) + 380|0);
  HEAP32[$70>>2] = $69;
  $71 = ((($size)) + 244|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ((($exec)) + 384|0);
  HEAP32[$73>>2] = $72;
  $74 = ((($size)) + 248|0);
  $75 = HEAP16[$74>>1]|0;
  $76 = ((($exec)) + 468|0);
  HEAP16[$76>>1] = $75;
  $77 = ((($size)) + 252|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($exec)) + 472|0);
  HEAP32[$79>>2] = $78;
  $80 = ((($exec)) + 180|0);
  $81 = ((($size)) + 256|0);
  dest=$80; src=$81; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $82 = ((($exec)) + 36|0);
  dest=$82; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $83 = ((($exec)) + 72|0);
  dest=$83; src=$82; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $84 = ((($exec)) + 108|0);
  dest=$84; src=$82; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 }
 $85 = ((($exec)) + 20|0);
 $86 = HEAP32[$85>>2]|0;
 HEAP32[$tmp>>2] = $86;
 $87 = ((($exec)) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ((($exec)) + 24|0);
 $90 = ((($face)) + 284|0);
 $91 = HEAP16[$90>>1]|0;
 $92 = $91&65535;
 $93 = (($92) + 32)|0;
 $94 = (_Update_Max($88,$tmp,4,$89,$93)|0);
 $95 = HEAP32[$tmp>>2]|0;
 HEAP32[$85>>2] = $95;
 $96 = ($94|0)==(0);
 if (!($96)) {
  $$0 = $94;
  STACKTOP = sp;return ($$0|0);
 }
 $97 = ((($exec)) + 388|0);
 $98 = HEAP32[$97>>2]|0;
 HEAP32[$tmp>>2] = $98;
 $99 = HEAP32[$87>>2]|0;
 $100 = ((($exec)) + 392|0);
 $101 = ((($face)) + 286|0);
 $102 = HEAP16[$101>>1]|0;
 $103 = $102&65535;
 $104 = (_Update_Max($99,$tmp,1,$100,$103)|0);
 $105 = HEAP32[$tmp>>2]|0;
 $106 = $105 & 65535;
 HEAP32[$97>>2] = $106;
 $107 = ($104|0)==(0);
 if (!($107)) {
  $$0 = $104;
  STACKTOP = sp;return ($$0|0);
 }
 $108 = ((($exec)) + 144|0);
 $109 = ((($exec)) + 152|0);
 HEAP16[$109>>1] = 0;
 $110 = ((($exec)) + 154|0);
 HEAP16[$110>>1] = 0;
 $111 = ((($exec)) + 72|0);
 dest=$111; src=$108; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $112 = ((($exec)) + 108|0);
 dest=$112; src=$108; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $113 = ((($exec)) + 36|0);
 dest=$113; src=$108; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $114 = ((($exec)) + 488|0);
 HEAP8[$114>>0] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _TT_Save_Context($exec,$size) {
 $exec = $exec|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exec)) + 396|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($size)) + 116|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($exec)) + 408|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($size)) + 128|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($exec)) + 420|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($size)) + 140|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($exec)) + 424|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($size)) + 144|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($size)) + 148|0);
 $13 = ((($exec)) + 444|0);
 $14 = $13;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = $12;
 $21 = $20;
 HEAP32[$21>>2] = $16;
 $22 = (($20) + 4)|0;
 $23 = $22;
 HEAP32[$23>>2] = $19;
 $24 = ((($size)) + 156|0);
 $25 = ((($exec)) + 452|0);
 $26 = $25;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $24;
 $33 = $32;
 HEAP32[$33>>2] = $28;
 $34 = (($32) + 4)|0;
 $35 = $34;
 HEAP32[$35>>2] = $31;
 $36 = ((($size)) + 164|0);
 $37 = ((($exec)) + 460|0);
 $38 = $37;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $36;
 $45 = $44;
 HEAP32[$45>>2] = $40;
 $46 = (($44) + 4)|0;
 $47 = $46;
 HEAP32[$47>>2] = $43;
 return 0;
}
function _TT_Run_Context($exec,$debug) {
 $exec = $exec|0;
 $debug = $debug|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 (_TT_Goto_CodeRange($exec,3,0)|0);
 $0 = ((($exec)) + 36|0);
 $1 = ((($exec)) + 144|0);
 dest=$0; src=$1; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $2 = ((($exec)) + 72|0);
 dest=$2; src=$1; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $3 = ((($exec)) + 108|0);
 dest=$3; src=$1; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($exec)) + 344|0);
 HEAP16[$4>>1] = 1;
 $5 = ((($exec)) + 346|0);
 HEAP16[$5>>1] = 1;
 $6 = ((($exec)) + 348|0);
 HEAP16[$6>>1] = 1;
 $7 = ((($exec)) + 294|0);
 HEAP16[$7>>1] = 16384;
 $8 = ((($exec)) + 296|0);
 HEAP16[$8>>1] = 0;
 $9 = ((($exec)) + 298|0);
 $10 = HEAPU16[$7>>1]|(HEAPU16[$7+2>>1]<<16);
 HEAP16[$9>>1]=$10&65535;HEAP16[$9+2>>1]=$10>>>16;
 $11 = ((($exec)) + 290|0);
 $12 = HEAPU16[$7>>1]|(HEAPU16[$7+2>>1]<<16);
 HEAP16[$11>>1]=$12&65535;HEAP16[$11+2>>1]=$12>>>16;
 $13 = ((($exec)) + 312|0);
 HEAP32[$13>>2] = 1;
 $14 = ((($exec)) + 304|0);
 HEAP32[$14>>2] = 1;
 $15 = ((($exec)) + 16|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($exec)) + 428|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$exec>>2]|0;
 $18 = ((($17)) + 688|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_ii[$19 & 63]($exec)|0);
 return ($20|0);
}
function _TT_New_Context($driver) {
 $driver = $driver|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($driver)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($driver)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $5 = (_ft_mem_alloc($1,608,$error)|0);
   $6 = HEAP32[$error>>2]|0;
   $7 = ($6|0)==(0);
   if (!($7)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $8 = (_Init_Context($5,$1)|0);
   HEAP32[$error>>2] = $8;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$2>>2] = $5;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $10 = HEAP32[$2>>2]|0;
 $$0 = $10;
 STACKTOP = sp;return ($$0|0);
}
function _TT_RunIns($exc) {
 $exc = $exc|0;
 var $$0 = 0, $$pr = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum25 = 0;
 var $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $def$043 = 0, $def$043$lcssa = 0, $i$042 = 0, $ins_counter$0 = 0, $ins_counter$1 = 0, $or$cond30 = 0, $sext = 0, $sext24 = 0;
 var $sext26 = 0, $sext27 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 256|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($exc)) + 216|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ((($exc)) + 218|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($2<<16>>16)==($4<<16>>16);
 $6 = ((($exc)) + 592|0);
 if ($5) {
  HEAP32[$6>>2] = 158;
  $9 = ((($exc)) + 596|0);
  HEAP32[$9>>2] = 16;
  $10 = ((($exc)) + 600|0);
  HEAP32[$10>>2] = 17;
 } else {
  HEAP32[$6>>2] = 157;
  $7 = ((($exc)) + 596|0);
  HEAP32[$7>>2] = 14;
  $8 = ((($exc)) + 600|0);
  HEAP32[$8>>2] = 15;
 }
 _Compute_Funcs($exc);
 $11 = ((($exc)) + 312|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12&255;
 _Compute_Round($exc,$13);
 $14 = ((($exc)) + 360|0);
 $15 = ((($exc)) + 356|0);
 $16 = ((($exc)) + 368|0);
 $17 = ((($exc)) + 372|0);
 $18 = ((($exc)) + 364|0);
 $19 = ((($exc)) + 364|0);
 $20 = ((($exc)) + 16|0);
 $21 = ((($exc)) + 28|0);
 $22 = ((($exc)) + 561|0);
 $23 = ((($exc)) + 24|0);
 $24 = ((($exc)) + 32|0);
 $25 = ((($exc)) + 20|0);
 $26 = ((($exc)) + 376|0);
 $27 = ((($exc)) + 12|0);
 $28 = ((($exc)) + 24|0);
 $29 = ((($exc)) + 488|0);
 $30 = ((($exc)) + 416|0);
 $31 = ((($exc)) + 408|0);
 $32 = ((($exc)) + 428|0);
 $33 = ((($exc)) + 432|0);
 $34 = ((($exc)) + 436|0);
 $35 = ((($exc)) + 352|0);
 $36 = ((($exc)) + 294|0);
 $37 = ((($exc)) + 296|0);
 $38 = ((($exc)) + 290|0);
 $39 = ((($exc)) + 292|0);
 $40 = ((($exc)) + 298|0);
 $41 = ((($exc)) + 300|0);
 $42 = ((($exc)) + 294|0);
 $43 = ((($exc)) + 290|0);
 $44 = ((($exc)) + 298|0);
 $45 = ((($exc)) + 294|0);
 $46 = ((($exc)) + 290|0);
 $47 = ((($exc)) + 298|0);
 $48 = ((($exc)) + 294|0);
 $49 = ((($exc)) + 296|0);
 $50 = ((($exc)) + 298|0);
 $51 = ((($exc)) + 300|0);
 $52 = ((($exc)) + 298|0);
 $53 = ((($exc)) + 294|0);
 $54 = ((($exc)) + 284|0);
 $55 = ((($exc)) + 286|0);
 $56 = ((($exc)) + 288|0);
 $57 = ((($exc)) + 304|0);
 $58 = ((($exc)) + 568|0);
 $59 = ((($exc)) + 568|0);
 $60 = ((($exc)) + 308|0);
 $61 = ((($exc)) + 428|0);
 $62 = ((($exc)) + 436|0);
 $63 = ((($exc)) + 320|0);
 $64 = ((($exc)) + 324|0);
 $65 = ((($exc)) + 260|0);
 $66 = ((($exc)) + 328|0);
 $67 = ((($exc)) + 561|0);
 $68 = ((($exc)) + 568|0);
 $69 = ((($exc)) + 468|0);
 $70 = ((($exc)) + 472|0);
 $71 = ((($exc)) + 561|0);
 $72 = ((($exc)) + 468|0);
 $73 = ((($exc)) + 472|0);
 $74 = ((($exc)) + 561|0);
 $75 = ((($exc)) + 380|0);
 $76 = ((($exc)) + 596|0);
 $77 = ((($exc)) + 561|0);
 $78 = ((($exc)) + 380|0);
 $79 = ((($exc)) + 561|0);
 $80 = ((($exc)) + 316|0);
 $81 = ((($exc)) + 316|0);
 $82 = ((($exc)) + 568|0);
 $83 = ((($exc)) + 568|0);
 $84 = ((($exc)) + 332|0);
 $85 = ((($exc)) + 334|0);
 $86 = ((($exc)) + 568|0);
 $87 = ((($exc)) + 380|0);
 $88 = ((($exc)) + 260|0);
 $89 = ((($exc)) + 384|0);
 $90 = ((($exc)) + 561|0);
 $91 = ((($exc)) + 568|0);
 $92 = ((($exc)) + 568|0);
 $93 = ((($exc)) + 428|0);
 $94 = ((($exc)) + 436|0);
 $95 = ((($exc)) + 428|0);
 $96 = ((($exc)) + 436|0);
 $97 = ((($exc)) + 568|0);
 $98 = ((($exc)) + 568|0);
 $99 = ((($exc)) + 568|0);
 $ins_counter$0 = 0;
 L5: while(1) {
  $100 = HEAP32[$14>>2]|0;
  $101 = HEAP32[$15>>2]|0;
  $102 = (($101) + ($100)|0);
  $103 = HEAP8[$102>>0]|0;
  HEAP8[$16>>0] = $103;
  $104 = $103&255;
  $105 = (88100 + ($104)|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = $106 << 24 >> 24;
  HEAP32[$17>>2] = $107;
  $108 = $104 & 254;
  $109 = ($108|0)==(64);
  if ($109) {
   $110 = HEAP32[$14>>2]|0;
   $111 = (($110) + 1)|0;
   $112 = HEAP32[$18>>2]|0;
   $113 = ($111|0)<($112|0);
   if (!($113)) {
    label = 209;
    break;
   }
   $114 = HEAP32[$15>>2]|0;
   $115 = (($114) + ($111)|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = $116&255;
   $118 = Math_imul($117, $107)|0;
   $119 = (2 - ($118))|0;
   HEAP32[$17>>2] = $119;
  }
  $120 = HEAP32[$14>>2]|0;
  $121 = HEAP32[$17>>2]|0;
  $122 = (($121) + ($120))|0;
  $123 = HEAP32[$19>>2]|0;
  $124 = ($122|0)>($123|0);
  if ($124) {
   label = 209;
   break;
  }
  $125 = HEAP32[$20>>2]|0;
  $126 = HEAP8[$16>>0]|0;
  $127 = $126&255;
  $128 = (88356 + ($127)|0);
  $129 = HEAP8[$128>>0]|0;
  $130 = $129&255;
  $131 = $130 >>> 4;
  $132 = (($125) - ($131))|0;
  HEAP32[$21>>2] = $132;
  $133 = ($132|0)<(0);
  if ($133) {
   $134 = HEAP8[$22>>0]|0;
   $135 = ($134<<24>>24)==(0);
   if (!($135)) {
    label = 12;
    break;
   }
   $136 = HEAP8[$16>>0]|0;
   $137 = $136&255;
   $138 = (88356 + ($137)|0);
   $139 = HEAP8[$138>>0]|0;
   $140 = ($139&255)>(15);
   if ($140) {
    $144 = 0;$i$042 = 0;
    while(1) {
     $142 = HEAP32[$23>>2]|0;
     $143 = (($142) + ($144<<2)|0);
     HEAP32[$143>>2] = 0;
     $145 = (($i$042) + 1)<<16>>16;
     $146 = $145&65535;
     $147 = HEAP8[$16>>0]|0;
     $148 = $147&255;
     $149 = (88356 + ($148)|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = $151 >>> 4;
     $153 = ($146>>>0)<($152>>>0);
     if ($153) {
      $144 = $146;$i$042 = $145;
     } else {
      break;
     }
    }
   }
   HEAP32[$21>>2] = 0;
  }
  $154 = HEAP32[$21>>2]|0;
  $155 = HEAP8[$16>>0]|0;
  $156 = $155&255;
  $157 = (88356 + ($156)|0);
  $158 = HEAP8[$157>>0]|0;
  $159 = $158&255;
  $160 = $159 & 15;
  $161 = (($160) + ($154))|0;
  HEAP32[$24>>2] = $161;
  $162 = HEAP32[$25>>2]|0;
  $163 = ($161>>>0)>($162>>>0);
  if ($163) {
   label = 16;
   break;
  }
  HEAP8[$26>>0] = 1;
  HEAP32[$27>>2] = 0;
  $165 = HEAP32[$28>>2]|0;
  $166 = HEAP32[$21>>2]|0;
  $167 = (($165) + ($166<<2)|0);
  $168 = HEAP8[$16>>0]|0;
  $169 = $168&255;
  L21: do {
   switch ($169|0) {
   case 79:  {
    label = 109;
    break L5;
    break;
   }
   case 5: case 4: case 3: case 2: case 1: case 0:  {
    $170 = $169 << 14;
    $171 = $170 & 16384;
    $172 = $171&65535;
    $173 = $171 ^ 16384;
    $174 = $173&65535;
    $175 = ($168&255)<(4);
    if ($175) {
     HEAP16[$36>>1] = $172;
     HEAP16[$37>>1] = $174;
     HEAP16[$38>>1] = $172;
     HEAP16[$39>>1] = $174;
    }
    $176 = $169 & 2;
    $177 = ($176|0)==(0);
    if ($177) {
     HEAP16[$40>>1] = $172;
     HEAP16[$41>>1] = $174;
    }
    _Compute_Funcs($exc);
    break;
   }
   case 7: case 6:  {
    $$sum29 = (($166) + 1)|0;
    $178 = (($165) + ($$sum29<<2)|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = $179&65535;
    $181 = HEAP32[$167>>2]|0;
    $182 = $181&65535;
    $183 = HEAP8[$16>>0]|0;
    $184 = $183&255;
    $185 = (_Ins_SxVTL($exc,$180,$182,$184,$42)|0);
    $186 = ($185<<24>>24)==(0);
    if ($186) {
     $187 = HEAPU16[$42>>1]|(HEAPU16[$42+2>>1]<<16);
     HEAP16[$43>>1]=$187&65535;HEAP16[$43+2>>1]=$187>>>16;
     _Compute_Funcs($exc);
    }
    break;
   }
   case 9: case 8:  {
    $$sum28 = (($166) + 1)|0;
    $188 = (($165) + ($$sum28<<2)|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = $189&65535;
    $191 = HEAP32[$167>>2]|0;
    $192 = $191&65535;
    $193 = HEAP8[$16>>0]|0;
    $194 = $193&255;
    $195 = (_Ins_SxVTL($exc,$190,$192,$194,$44)|0);
    $196 = ($195<<24>>24)==(0);
    if ($196) {
     _Compute_Funcs($exc);
    }
    break;
   }
   case 10:  {
    $$sum25 = (($166) + 1)|0;
    $197 = (($165) + ($$sum25<<2)|0);
    $198 = HEAP32[$197>>2]|0;
    $sext26 = $198 << 16;
    $199 = $sext26 >> 16;
    $200 = HEAP32[$167>>2]|0;
    $sext27 = $200 << 16;
    $201 = $sext27 >> 16;
    _Normalize($201,$199,$45);
    $202 = HEAPU16[$45>>1]|(HEAPU16[$45+2>>1]<<16);
    HEAP16[$46>>1]=$202&65535;HEAP16[$46+2>>1]=$202>>>16;
    _Compute_Funcs($exc);
    break;
   }
   case 11:  {
    $$sum23 = (($166) + 1)|0;
    $203 = (($165) + ($$sum23<<2)|0);
    $204 = HEAP32[$203>>2]|0;
    $sext = $204 << 16;
    $205 = $sext >> 16;
    $206 = HEAP32[$167>>2]|0;
    $sext24 = $206 << 16;
    $207 = $sext24 >> 16;
    _Normalize($207,$205,$47);
    _Compute_Funcs($exc);
    break;
   }
   case 12:  {
    $208 = HEAP16[$48>>1]|0;
    $209 = $208 << 16 >> 16;
    HEAP32[$167>>2] = $209;
    $210 = HEAP16[$49>>1]|0;
    $211 = $210 << 16 >> 16;
    $$sum22 = (($166) + 1)|0;
    $212 = (($165) + ($$sum22<<2)|0);
    HEAP32[$212>>2] = $211;
    break;
   }
   case 13:  {
    $213 = HEAP16[$50>>1]|0;
    $214 = $213 << 16 >> 16;
    HEAP32[$167>>2] = $214;
    $215 = HEAP16[$51>>1]|0;
    $216 = $215 << 16 >> 16;
    $$sum21 = (($166) + 1)|0;
    $217 = (($165) + ($$sum21<<2)|0);
    HEAP32[$217>>2] = $216;
    break;
   }
   case 14:  {
    $218 = HEAPU16[$53>>1]|(HEAPU16[$53+2>>1]<<16);
    HEAP16[$52>>1]=$218&65535;HEAP16[$52+2>>1]=$218>>>16;
    _Compute_Funcs($exc);
    break;
   }
   case 15:  {
    _Ins_ISECT($exc,$167);
    break;
   }
   case 16:  {
    $219 = HEAP32[$167>>2]|0;
    $220 = $219&65535;
    HEAP16[$54>>1] = $220;
    break;
   }
   case 17:  {
    $221 = HEAP32[$167>>2]|0;
    $222 = $221&65535;
    HEAP16[$55>>1] = $222;
    break;
   }
   case 18:  {
    $223 = HEAP32[$167>>2]|0;
    $224 = $223&65535;
    HEAP16[$56>>1] = $224;
    break;
   }
   case 19:  {
    _Ins_SZP0($exc,$167);
    break;
   }
   case 20:  {
    _Ins_SZP1($exc,$167);
    break;
   }
   case 21:  {
    _Ins_SZP2($exc,$167);
    break;
   }
   case 22:  {
    _Ins_SZPS($exc,$167);
    break;
   }
   case 23:  {
    $225 = HEAP32[$167>>2]|0;
    $226 = ($225|0)<(0);
    if ($226) {
     label = 41;
     break L5;
    }
    HEAP32[$57>>2] = $225;
    break;
   }
   case 24:  {
    HEAP32[$11>>2] = 1;
    HEAP32[$58>>2] = 52;
    break;
   }
   case 25:  {
    HEAP32[$11>>2] = 0;
    HEAP32[$59>>2] = 53;
    break;
   }
   case 26:  {
    $227 = HEAP32[$167>>2]|0;
    HEAP32[$60>>2] = $227;
    break;
   }
   case 27:  {
    _Ins_ELSE($exc);
    break;
   }
   case 28:  {
    $228 = HEAP32[$167>>2]|0;
    $229 = $228 | $166;
    $230 = ($229|0)==(0);
    if ($230) {
     HEAP32[$27>>2] = 132;
    }
    $231 = HEAP32[$167>>2]|0;
    $232 = HEAP32[$14>>2]|0;
    $233 = (($232) + ($231))|0;
    HEAP32[$14>>2] = $233;
    $234 = ($233|0)<(0);
    if ($234) {
     label = 52;
    } else {
     $235 = HEAP32[$61>>2]|0;
     $236 = ($235|0)>(0);
     if ($236) {
      $237 = (($235) + -1)|0;
      $238 = HEAP32[$62>>2]|0;
      $239 = (((($238) + (($237*20)|0)|0)) + 16|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = ($233|0)>($240|0);
      if ($241) {
       label = 52;
      }
     }
    }
    if ((label|0) == 52) {
     label = 0;
     HEAP32[$27>>2] = 132;
    }
    HEAP8[$26>>0] = 0;
    break;
   }
   case 29:  {
    $242 = HEAP32[$167>>2]|0;
    HEAP32[$63>>2] = $242;
    break;
   }
   case 30:  {
    $243 = HEAP32[$167>>2]|0;
    HEAP32[$64>>2] = $243;
    break;
   }
   case 31:  {
    $244 = HEAP32[$167>>2]|0;
    $245 = HEAP32[$65>>2]|0;
    $246 = (_FT_MulFix($244,$245)|0);
    HEAP32[$66>>2] = $246;
    break;
   }
   case 32:  {
    $247 = HEAP32[$167>>2]|0;
    $$sum20 = (($166) + 1)|0;
    $248 = (($165) + ($$sum20<<2)|0);
    HEAP32[$248>>2] = $247;
    break;
   }
   case 127: case 126: case 89: case 33:  {
    break;
   }
   case 34:  {
    HEAP32[$24>>2] = 0;
    break;
   }
   case 35:  {
    $249 = HEAP32[$167>>2]|0;
    $$sum19 = (($166) + 1)|0;
    $250 = (($165) + ($$sum19<<2)|0);
    $251 = HEAP32[$250>>2]|0;
    HEAP32[$167>>2] = $251;
    HEAP32[$250>>2] = $249;
    break;
   }
   case 36:  {
    $252 = HEAP32[$20>>2]|0;
    HEAP32[$167>>2] = $252;
    break;
   }
   case 37:  {
    $253 = HEAP32[$167>>2]|0;
    $254 = ($253|0)<(1);
    $255 = ($166|0)<($253|0);
    $or$cond30 = $254 | $255;
    if (!($or$cond30)) {
     $258 = (($166) - ($253))|0;
     $259 = (($165) + ($258<<2)|0);
     $260 = HEAP32[$259>>2]|0;
     HEAP32[$167>>2] = $260;
     break L21;
    }
    $256 = HEAP8[$67>>0]|0;
    $257 = ($256<<24>>24)==(0);
    if (!($257)) {
     HEAP32[$27>>2] = 134;
    }
    HEAP32[$167>>2] = 0;
    break;
   }
   case 38:  {
    _Ins_MINDEX($exc,$167);
    break;
   }
   case 39:  {
    _Ins_ALIGNPTS($exc,$167);
    break;
   }
   case 40:  {
    _Ins_UNKNOWN($exc);
    break;
   }
   case 41:  {
    _Ins_UTP($exc,$167);
    break;
   }
   case 42:  {
    _Ins_LOOPCALL($exc,$167);
    break;
   }
   case 43:  {
    _Ins_CALL($exc,$167);
    break;
   }
   case 44:  {
    _Ins_FDEF($exc,$167);
    break;
   }
   case 45:  {
    _Ins_ENDF($exc);
    break;
   }
   case 47: case 46:  {
    _Ins_MDAP($exc,$167);
    break;
   }
   case 49: case 48:  {
    _Ins_IUP($exc);
    break;
   }
   case 51: case 50:  {
    _Ins_SHP($exc);
    break;
   }
   case 53: case 52:  {
    _Ins_SHC($exc,$167);
    break;
   }
   case 55: case 54:  {
    _Ins_SHZ($exc,$167);
    break;
   }
   case 56:  {
    _Ins_SHPIX($exc,$167);
    break;
   }
   case 57:  {
    _Ins_IP($exc);
    break;
   }
   case 59: case 58:  {
    _Ins_MSIRP($exc,$167);
    break;
   }
   case 60:  {
    _Ins_ALIGNRP($exc);
    break;
   }
   case 61:  {
    HEAP32[$11>>2] = 2;
    HEAP32[$68>>2] = 54;
    break;
   }
   case 63: case 62:  {
    _Ins_MIAP($exc,$167);
    break;
   }
   case 64:  {
    _Ins_NPUSHB($exc,$167);
    break;
   }
   case 65:  {
    _Ins_NPUSHW($exc,$167);
    break;
   }
   case 66:  {
    $261 = HEAP32[$167>>2]|0;
    $262 = HEAP16[$69>>1]|0;
    $263 = $262&65535;
    $264 = ($261>>>0)<($263>>>0);
    if ($264) {
     $$sum18 = (($166) + 1)|0;
     $267 = (($165) + ($$sum18<<2)|0);
     $268 = HEAP32[$267>>2]|0;
     $269 = HEAP32[$70>>2]|0;
     $270 = (($269) + ($261<<2)|0);
     HEAP32[$270>>2] = $268;
     break L21;
    } else {
     $265 = HEAP8[$71>>0]|0;
     $266 = ($265<<24>>24)==(0);
     if ($266) {
      break L21;
     } else {
      label = 90;
      break L5;
     }
    }
    break;
   }
   case 67:  {
    $271 = HEAP32[$167>>2]|0;
    $272 = HEAP16[$72>>1]|0;
    $273 = $272&65535;
    $274 = ($271>>>0)<($273>>>0);
    if ($274) {
     $277 = HEAP32[$73>>2]|0;
     $278 = (($277) + ($271<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     HEAP32[$167>>2] = $279;
     break L21;
    }
    $275 = HEAP8[$74>>0]|0;
    $276 = ($275<<24>>24)==(0);
    if (!($276)) {
     label = 90;
     break L5;
    }
    HEAP32[$167>>2] = 0;
    break;
   }
   case 68:  {
    $280 = HEAP32[$167>>2]|0;
    $281 = HEAP32[$75>>2]|0;
    $282 = ($280>>>0)<($281>>>0);
    if ($282) {
     $285 = HEAP32[$76>>2]|0;
     $$sum17 = (($166) + 1)|0;
     $286 = (($165) + ($$sum17<<2)|0);
     $287 = HEAP32[$286>>2]|0;
     FUNCTION_TABLE_viii[$285 & 31]($exc,$280,$287);
     break L21;
    } else {
     $283 = HEAP8[$77>>0]|0;
     $284 = ($283<<24>>24)==(0);
     if ($284) {
      break L21;
     } else {
      label = 90;
      break L5;
     }
    }
    break;
   }
   case 69:  {
    $288 = HEAP32[$167>>2]|0;
    $289 = HEAP32[$78>>2]|0;
    $290 = ($288>>>0)<($289>>>0);
    if ($290) {
     $293 = HEAP32[$6>>2]|0;
     $294 = (FUNCTION_TABLE_iii[$293 & 255]($exc,$288)|0);
     HEAP32[$167>>2] = $294;
     break L21;
    }
    $291 = HEAP8[$79>>0]|0;
    $292 = ($291<<24>>24)==(0);
    if (!($292)) {
     label = 90;
     break L5;
    }
    HEAP32[$167>>2] = 0;
    break;
   }
   case 71: case 70:  {
    _Ins_GC($exc,$167);
    break;
   }
   case 72:  {
    _Ins_SCFS($exc,$167);
    break;
   }
   case 74: case 73:  {
    _Ins_MD($exc,$167);
    break;
   }
   case 75:  {
    $295 = (_Current_Ppem($exc)|0);
    HEAP32[$167>>2] = $295;
    break;
   }
   case 76:  {
    $296 = (_Current_Ppem($exc)|0);
    HEAP32[$167>>2] = $296;
    break;
   }
   case 77:  {
    HEAP8[$80>>0] = 1;
    break;
   }
   case 78:  {
    HEAP8[$81>>0] = 0;
    break;
   }
   case 80:  {
    $297 = HEAP32[$167>>2]|0;
    $$sum16 = (($166) + 1)|0;
    $298 = (($165) + ($$sum16<<2)|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = ($297|0)<($299|0);
    $301 = $300&1;
    HEAP32[$167>>2] = $301;
    break;
   }
   case 81:  {
    $302 = HEAP32[$167>>2]|0;
    $$sum15 = (($166) + 1)|0;
    $303 = (($165) + ($$sum15<<2)|0);
    $304 = HEAP32[$303>>2]|0;
    $305 = ($302|0)<=($304|0);
    $306 = $305&1;
    HEAP32[$167>>2] = $306;
    break;
   }
   case 82:  {
    $307 = HEAP32[$167>>2]|0;
    $$sum14 = (($166) + 1)|0;
    $308 = (($165) + ($$sum14<<2)|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = ($307|0)>($309|0);
    $311 = $310&1;
    HEAP32[$167>>2] = $311;
    break;
   }
   case 83:  {
    $312 = HEAP32[$167>>2]|0;
    $$sum13 = (($166) + 1)|0;
    $313 = (($165) + ($$sum13<<2)|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = ($312|0)>=($314|0);
    $316 = $315&1;
    HEAP32[$167>>2] = $316;
    break;
   }
   case 84:  {
    $317 = HEAP32[$167>>2]|0;
    $$sum12 = (($166) + 1)|0;
    $318 = (($165) + ($$sum12<<2)|0);
    $319 = HEAP32[$318>>2]|0;
    $320 = ($317|0)==($319|0);
    $321 = $320&1;
    HEAP32[$167>>2] = $321;
    break;
   }
   case 85:  {
    $322 = HEAP32[$167>>2]|0;
    $$sum11 = (($166) + 1)|0;
    $323 = (($165) + ($$sum11<<2)|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = ($322|0)!=($324|0);
    $326 = $325&1;
    HEAP32[$167>>2] = $326;
    break;
   }
   case 86:  {
    $327 = HEAP32[$82>>2]|0;
    $328 = HEAP32[$167>>2]|0;
    $329 = (FUNCTION_TABLE_iiii[$327 & 127]($exc,$328,0)|0);
    $330 = $329 & 127;
    $331 = ($330|0)==(64);
    $332 = $331&1;
    HEAP32[$167>>2] = $332;
    break;
   }
   case 87:  {
    $333 = HEAP32[$83>>2]|0;
    $334 = HEAP32[$167>>2]|0;
    $335 = (FUNCTION_TABLE_iiii[$333 & 127]($exc,$334,0)|0);
    $336 = $335 & 127;
    $337 = ($336|0)==(0);
    $338 = $337&1;
    HEAP32[$167>>2] = $338;
    break;
   }
   case 88:  {
    _Ins_IF($exc,$167);
    break;
   }
   case 90:  {
    $339 = HEAP32[$167>>2]|0;
    $340 = ($339|0)==(0);
    if ($340) {
     $345 = 0;
    } else {
     $$sum10 = (($166) + 1)|0;
     $341 = (($165) + ($$sum10<<2)|0);
     $342 = HEAP32[$341>>2]|0;
     $343 = ($342|0)!=(0);
     $345 = $343;
    }
    $344 = $345&1;
    HEAP32[$167>>2] = $344;
    break;
   }
   case 91:  {
    $346 = HEAP32[$167>>2]|0;
    $347 = ($346|0)==(0);
    if ($347) {
     $$sum9 = (($166) + 1)|0;
     $348 = (($165) + ($$sum9<<2)|0);
     $349 = HEAP32[$348>>2]|0;
     $350 = ($349|0)!=(0);
     $352 = $350;
    } else {
     $352 = 1;
    }
    $351 = $352&1;
    HEAP32[$167>>2] = $351;
    break;
   }
   case 92:  {
    $353 = HEAP32[$167>>2]|0;
    $354 = ($353|0)==(0);
    $355 = $354&1;
    HEAP32[$167>>2] = $355;
    break;
   }
   case 93:  {
    _Ins_DELTAP($exc,$167);
    break;
   }
   case 94:  {
    $356 = HEAP32[$167>>2]|0;
    $357 = $356&65535;
    HEAP16[$84>>1] = $357;
    break;
   }
   case 95:  {
    $358 = HEAP32[$167>>2]|0;
    $359 = $358&65535;
    HEAP16[$85>>1] = $359;
    break;
   }
   case 96:  {
    $$sum8 = (($166) + 1)|0;
    $360 = (($165) + ($$sum8<<2)|0);
    $361 = HEAP32[$360>>2]|0;
    $362 = HEAP32[$167>>2]|0;
    $363 = (($362) + ($361))|0;
    HEAP32[$167>>2] = $363;
    break;
   }
   case 97:  {
    $$sum7 = (($166) + 1)|0;
    $364 = (($165) + ($$sum7<<2)|0);
    $365 = HEAP32[$364>>2]|0;
    $366 = HEAP32[$167>>2]|0;
    $367 = (($366) - ($365))|0;
    HEAP32[$167>>2] = $367;
    break;
   }
   case 98:  {
    $$sum6 = (($166) + 1)|0;
    $368 = (($165) + ($$sum6<<2)|0);
    $369 = HEAP32[$368>>2]|0;
    $370 = ($369|0)==(0);
    if ($370) {
     label = 132;
     break L5;
    }
    $371 = HEAP32[$167>>2]|0;
    $372 = (_FT_MulDiv_No_Round($371,64,$369)|0);
    HEAP32[$167>>2] = $372;
    break;
   }
   case 99:  {
    $373 = HEAP32[$167>>2]|0;
    $$sum5 = (($166) + 1)|0;
    $374 = (($165) + ($$sum5<<2)|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = (_FT_MulDiv($373,$375,64)|0);
    HEAP32[$167>>2] = $376;
    break;
   }
   case 100:  {
    $377 = HEAP32[$167>>2]|0;
    $378 = ($377|0)<(0);
    $379 = (0 - ($377))|0;
    $380 = $378 ? $379 : $377;
    HEAP32[$167>>2] = $380;
    break;
   }
   case 101:  {
    $381 = HEAP32[$167>>2]|0;
    $382 = (0 - ($381))|0;
    HEAP32[$167>>2] = $382;
    break;
   }
   case 102:  {
    $383 = HEAP32[$167>>2]|0;
    $384 = $383 & -64;
    HEAP32[$167>>2] = $384;
    break;
   }
   case 103:  {
    $385 = HEAP32[$167>>2]|0;
    $386 = (($385) + 63)|0;
    $387 = $386 & -64;
    HEAP32[$167>>2] = $387;
    break;
   }
   case 107: case 106: case 105: case 104:  {
    $388 = HEAP32[$86>>2]|0;
    $389 = HEAP32[$167>>2]|0;
    $390 = HEAP8[$16>>0]|0;
    $391 = $390&255;
    $392 = (($391) + -104)|0;
    $393 = (((($exc)) + 264|0) + ($392<<2)|0);
    $394 = HEAP32[$393>>2]|0;
    $395 = (FUNCTION_TABLE_iiii[$388 & 127]($exc,$389,$394)|0);
    HEAP32[$167>>2] = $395;
    break;
   }
   case 111: case 110: case 109: case 108:  {
    $396 = HEAP32[$167>>2]|0;
    $397 = HEAP8[$16>>0]|0;
    $398 = $397&255;
    $399 = (($398) + -108)|0;
    $400 = (((($exc)) + 264|0) + ($399<<2)|0);
    $401 = HEAP32[$400>>2]|0;
    $402 = (_Round_None($exc,$396,$401)|0);
    HEAP32[$167>>2] = $402;
    break;
   }
   case 112:  {
    $403 = HEAP32[$167>>2]|0;
    $404 = HEAP32[$87>>2]|0;
    $405 = ($403>>>0)<($404>>>0);
    if ($405) {
     $$sum4 = (($166) + 1)|0;
     $408 = (($165) + ($$sum4<<2)|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = HEAP32[$88>>2]|0;
     $411 = (_FT_MulFix($409,$410)|0);
     $412 = HEAP32[$89>>2]|0;
     $413 = (($412) + ($403<<2)|0);
     HEAP32[$413>>2] = $411;
     break L21;
    } else {
     $406 = HEAP8[$90>>0]|0;
     $407 = ($406<<24>>24)==(0);
     if ($407) {
      break L21;
     } else {
      label = 90;
      break L5;
     }
    }
    break;
   }
   case 114: case 113:  {
    _Ins_DELTAP($exc,$167);
    break;
   }
   case 117: case 116: case 115:  {
    _Ins_DELTAC($exc,$167);
    break;
   }
   case 118:  {
    $414 = HEAP32[$167>>2]|0;
    _SetSuperRound($exc,16384,$414);
    HEAP32[$11>>2] = 6;
    HEAP32[$91>>2] = 55;
    break;
   }
   case 119:  {
    $415 = HEAP32[$167>>2]|0;
    _SetSuperRound($exc,11585,$415);
    HEAP32[$11>>2] = 7;
    HEAP32[$92>>2] = 56;
    break;
   }
   case 120:  {
    $$sum3 = (($166) + 1)|0;
    $416 = (($165) + ($$sum3<<2)|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = ($417|0)==(0);
    if (!($418)) {
     $419 = HEAP32[$167>>2]|0;
     $420 = $419 | $166;
     $421 = ($420|0)==(0);
     if ($421) {
      HEAP32[$27>>2] = 132;
     }
     $422 = HEAP32[$167>>2]|0;
     $423 = HEAP32[$14>>2]|0;
     $424 = (($423) + ($422))|0;
     HEAP32[$14>>2] = $424;
     $425 = ($424|0)<(0);
     if ($425) {
      label = 154;
     } else {
      $426 = HEAP32[$93>>2]|0;
      $427 = ($426|0)>(0);
      if ($427) {
       $428 = (($426) + -1)|0;
       $429 = HEAP32[$94>>2]|0;
       $430 = (((($429) + (($428*20)|0)|0)) + 16|0);
       $431 = HEAP32[$430>>2]|0;
       $432 = ($424|0)>($431|0);
       if ($432) {
        label = 154;
       }
      }
     }
     if ((label|0) == 154) {
      label = 0;
      HEAP32[$27>>2] = 132;
     }
     HEAP8[$26>>0] = 0;
    }
    break;
   }
   case 121:  {
    $$sum2 = (($166) + 1)|0;
    $433 = (($165) + ($$sum2<<2)|0);
    $434 = HEAP32[$433>>2]|0;
    $435 = ($434|0)==(0);
    if ($435) {
     $436 = HEAP32[$167>>2]|0;
     $437 = $436 | $166;
     $438 = ($437|0)==(0);
     if ($438) {
      HEAP32[$27>>2] = 132;
     }
     $439 = HEAP32[$167>>2]|0;
     $440 = HEAP32[$14>>2]|0;
     $441 = (($440) + ($439))|0;
     HEAP32[$14>>2] = $441;
     $442 = ($441|0)<(0);
     if ($442) {
      label = 162;
     } else {
      $443 = HEAP32[$95>>2]|0;
      $444 = ($443|0)>(0);
      if ($444) {
       $445 = (($443) + -1)|0;
       $446 = HEAP32[$96>>2]|0;
       $447 = (((($446) + (($445*20)|0)|0)) + 16|0);
       $448 = HEAP32[$447>>2]|0;
       $449 = ($441|0)>($448|0);
       if ($449) {
        label = 162;
       }
      }
     }
     if ((label|0) == 162) {
      label = 0;
      HEAP32[$27>>2] = 132;
     }
     HEAP8[$26>>0] = 0;
    }
    break;
   }
   case 122:  {
    HEAP32[$11>>2] = 5;
    HEAP32[$97>>2] = 57;
    break;
   }
   case 123:  {
    _Ins_UNKNOWN($exc);
    break;
   }
   case 124:  {
    HEAP32[$11>>2] = 4;
    HEAP32[$98>>2] = 58;
    break;
   }
   case 125:  {
    HEAP32[$11>>2] = 3;
    HEAP32[$99>>2] = 59;
    break;
   }
   case 128:  {
    _Ins_FLIPPT($exc);
    break;
   }
   case 129:  {
    _Ins_FLIPRGON($exc,$167);
    break;
   }
   case 130:  {
    _Ins_FLIPRGOFF($exc,$167);
    break;
   }
   case 132: case 131:  {
    _Ins_UNKNOWN($exc);
    break;
   }
   case 133:  {
    _Ins_SCANCTRL($exc,$167);
    break;
   }
   case 135: case 134:  {
    _Ins_SDPVTL($exc,$167);
    break;
   }
   case 136:  {
    _Ins_GETINFO($exc,$167);
    break;
   }
   case 137:  {
    _Ins_IDEF($exc,$167);
    break;
   }
   case 138:  {
    _Ins_ROLL($167);
    break;
   }
   case 139:  {
    $$sum1 = (($166) + 1)|0;
    $450 = (($165) + ($$sum1<<2)|0);
    $451 = HEAP32[$450>>2]|0;
    $452 = HEAP32[$167>>2]|0;
    $453 = ($451|0)>($452|0);
    if ($453) {
     HEAP32[$167>>2] = $451;
    }
    break;
   }
   case 140:  {
    $$sum = (($166) + 1)|0;
    $454 = (($165) + ($$sum<<2)|0);
    $455 = HEAP32[$454>>2]|0;
    $456 = HEAP32[$167>>2]|0;
    $457 = ($455|0)<($456|0);
    if ($457) {
     HEAP32[$167>>2] = $455;
    }
    break;
   }
   case 141:  {
    _Ins_SCANTYPE($exc,$167);
    break;
   }
   case 142:  {
    _Ins_INSTCTRL($exc,$167);
    break;
   }
   case 143:  {
    _Ins_UNKNOWN($exc);
    break;
   }
   default: {
    $458 = ($168&255)>(223);
    if ($458) {
     _Ins_MIRP($exc,$167);
     break L21;
    }
    $459 = ($168&255)>(191);
    if ($459) {
     _Ins_MDRP($exc,$167);
     break L21;
    }
    $460 = ($168&255)>(183);
    if ($460) {
     _Ins_PUSHW($exc,$167);
     break L21;
    }
    $461 = ($168&255)>(175);
    if ($461) {
     _Ins_PUSHB($exc,$167);
     break L21;
    } else {
     _Ins_UNKNOWN($exc);
     break L21;
    }
   }
   }
  } while(0);
  $$pr = HEAP32[$27>>2]|0;
  switch ($$pr|0) {
  case 0:  {
   $496 = HEAP32[$24>>2]|0;
   HEAP32[$20>>2] = $496;
   $497 = HEAP8[$26>>0]|0;
   $498 = ($497<<24>>24)==(0);
   if (!($498)) {
    $499 = HEAP32[$17>>2]|0;
    $500 = HEAP32[$14>>2]|0;
    $501 = (($500) + ($499))|0;
    HEAP32[$14>>2] = $501;
   }
   $502 = (($ins_counter$0) + 1)|0;
   $503 = ($ins_counter$0|0)>(999999);
   if ($503) {
    $$0 = 139;
    label = 214;
    break L5;
   } else {
    $ins_counter$1 = $502;
   }
   break;
  }
  case 128:  {
   $462 = HEAP32[$30>>2]|0;
   $463 = HEAP32[$31>>2]|0;
   $464 = (($462) + (($463*20)|0)|0);
   $465 = ($463|0)>(0);
   if ($465) {
    $def$043 = $462;
   } else {
    label = 201;
    break L5;
   }
   while(1) {
    $466 = ((($def$043)) + 16|0);
    $467 = HEAP8[$466>>0]|0;
    $468 = ($467<<24>>24)==(0);
    if (!($468)) {
     $469 = HEAP8[$16>>0]|0;
     $470 = ((($def$043)) + 12|0);
     $471 = HEAP32[$470>>2]|0;
     $472 = $471&255;
     $473 = ($469<<24>>24)==($472<<24>>24);
     if ($473) {
      $def$043$lcssa = $def$043;
      break;
     }
    }
    $494 = ((($def$043)) + 20|0);
    $495 = ($494>>>0)<($464>>>0);
    if ($495) {
     $def$043 = $494;
    } else {
     label = 201;
     break L5;
    }
   }
   $474 = HEAP32[$32>>2]|0;
   $475 = HEAP32[$33>>2]|0;
   $476 = ($474|0)<($475|0);
   if (!($476)) {
    label = 198;
    break L5;
   }
   $477 = HEAP32[$34>>2]|0;
   $478 = HEAP32[$35>>2]|0;
   $479 = (($477) + (($474*20)|0)|0);
   HEAP32[$479>>2] = $478;
   $480 = HEAP32[$14>>2]|0;
   $481 = (($480) + 1)|0;
   $482 = (((($477) + (($474*20)|0)|0)) + 4|0);
   HEAP32[$482>>2] = $481;
   $483 = (((($477) + (($474*20)|0)|0)) + 8|0);
   HEAP32[$483>>2] = 1;
   $484 = ((($def$043$lcssa)) + 4|0);
   $485 = HEAP32[$484>>2]|0;
   $486 = (((($477) + (($474*20)|0)|0)) + 12|0);
   HEAP32[$486>>2] = $485;
   $487 = ((($def$043$lcssa)) + 8|0);
   $488 = HEAP32[$487>>2]|0;
   $489 = (((($477) + (($474*20)|0)|0)) + 16|0);
   HEAP32[$489>>2] = $488;
   $490 = HEAP32[$def$043$lcssa>>2]|0;
   $491 = HEAP32[$484>>2]|0;
   $492 = (_Ins_Goto_CodeRange($exc,$490,$491)|0);
   $493 = ($492<<24>>24)==(1);
   if ($493) {
    break L5;
   } else {
    $ins_counter$1 = $ins_counter$0;
   }
   break;
  }
  default: {
   break L5;
  }
  }
  $504 = HEAP32[$14>>2]|0;
  $505 = HEAP32[$19>>2]|0;
  $506 = ($504|0)<($505|0);
  if (!($506)) {
   label = 206;
   break;
  }
  $510 = HEAP8[$29>>0]|0;
  $511 = ($510<<24>>24)==(0);
  if ($511) {
   $ins_counter$0 = $ins_counter$1;
  } else {
   $$0 = 0;
   label = 214;
   break;
  }
 }
 switch (label|0) {
  case 12: {
   $141 = ((($exc)) + 12|0);
   HEAP32[$141>>2] = 129;
   break;
  }
  case 16: {
   $164 = ((($exc)) + 12|0);
   HEAP32[$164>>2] = 130;
   break;
  }
  case 41: {
   HEAP32[$27>>2] = 132;
   break;
  }
  case 90: {
   HEAP32[$27>>2] = 134;
   break;
  }
  case 109: {
   HEAP32[$27>>2] = 135;
   break;
  }
  case 132: {
   HEAP32[$27>>2] = 133;
   break;
  }
  case 198: {
   HEAP32[$27>>2] = 134;
   break;
  }
  case 201: {
   HEAP32[$27>>2] = 128;
   break;
  }
  case 206: {
   $507 = ((($exc)) + 428|0);
   $508 = HEAP32[$507>>2]|0;
   $509 = ($508|0)>(0);
   if ($509) {
    HEAP32[$27>>2] = 131;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
   break;
  }
  case 209: {
   $512 = ((($exc)) + 12|0);
   HEAP32[$512>>2] = 131;
   break;
  }
  case 214: {
   return ($$0|0);
   break;
  }
 }
 $513 = ((($exc)) + 12|0);
 $514 = HEAP32[$513>>2]|0;
 $515 = ($514|0)==(0);
 if (!($515)) {
  $516 = ((($exc)) + 488|0);
  $517 = HEAP8[$516>>0]|0;
  $518 = ($517<<24>>24)==(0);
  if ($518) {
   $519 = ((($exc)) + 4|0);
   $520 = HEAP32[$519>>2]|0;
   $521 = ((($520)) + 301|0);
   HEAP8[$521>>0] = 0;
  }
 }
 $522 = HEAP32[$513>>2]|0;
 $$0 = $522;
 return ($$0|0);
}
function _Init_Context($exec,$memory) {
 $exec = $exec|0;
 $memory = $memory|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($exec)) + 8|0);
 HEAP32[$0>>2] = $memory;
 $1 = ((($exec)) + 432|0);
 HEAP32[$1>>2] = 32;
 $2 = (_ft_mem_realloc($memory,20,0,32,0,$error)|0);
 $3 = ((($exec)) + 436|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$error>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ((($exec)) + 440|0);
  HEAP16[$6>>1] = 0;
  $7 = ((($exec)) + 442|0);
  HEAP16[$7>>1] = 0;
  $8 = ((($exec)) + 20|0);
  HEAP32[$8>>2] = 0;
  $9 = ((($exec)) + 388|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($exec)) + 24|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($exec)) + 392|0);
  HEAP32[$11>>2] = 0;
  HEAP32[$exec>>2] = 0;
  $12 = ((($exec)) + 4|0);
  HEAP32[$12>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  (_TT_Done_Context($exec)|0);
  $13 = HEAP32[$error>>2]|0;
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _Read_CVT_Stretched($exc,$idx) {
 $exc = $exc|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 384|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($idx<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_Current_Ratio($exc)|0);
 $5 = (_FT_MulFix($3,$4)|0);
 return ($5|0);
}
function _Write_CVT_Stretched($exc,$idx,$value) {
 $exc = $exc|0;
 $idx = $idx|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_Current_Ratio($exc)|0);
 $1 = (_FT_DivFix($value,$0)|0);
 $2 = ((($exc)) + 384|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($idx<<2)|0);
 HEAP32[$4>>2] = $1;
 return;
}
function _Move_CVT_Stretched($exc,$idx,$value) {
 $exc = $exc|0;
 $idx = $idx|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_Current_Ratio($exc)|0);
 $1 = (_FT_DivFix($value,$0)|0);
 $2 = ((($exc)) + 384|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($idx<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($1))|0;
 HEAP32[$4>>2] = $6;
 return;
}
function _Read_CVT($exc,$idx) {
 $exc = $exc|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 384|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($idx<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 return ($3|0);
}
function _Write_CVT($exc,$idx,$value) {
 $exc = $exc|0;
 $idx = $idx|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 384|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($idx<<2)|0);
 HEAP32[$2>>2] = $value;
 return;
}
function _Move_CVT($exc,$idx,$value) {
 $exc = $exc|0;
 $idx = $idx|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 384|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($idx<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($value))|0;
 HEAP32[$2>>2] = $4;
 return;
}
function _Compute_Funcs($exc) {
 $exc = $exc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 298|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ($1<<16>>16)==(16384);
 do {
  if ($3) {
   $4 = ((($exc)) + 294|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5 << 16 >> 16;
   $7 = $6 << 16;
   $8 = ((($exc)) + 564|0);
   HEAP32[$8>>2] = $7;
  } else {
   $9 = ((($exc)) + 300|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = ($10<<16>>16)==(16384);
   if ($11) {
    $12 = ((($exc)) + 296|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = $13 << 16 >> 16;
    $15 = $14 << 16;
    $16 = ((($exc)) + 564|0);
    HEAP32[$16>>2] = $15;
    break;
   } else {
    $17 = $10 << 16 >> 16;
    $18 = ((($exc)) + 294|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = $19 << 16 >> 16;
    $21 = Math_imul($20, $2)|0;
    $22 = ((($exc)) + 296|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = $23 << 16 >> 16;
    $25 = Math_imul($24, $17)|0;
    $26 = (($25) + ($21))|0;
    $27 = $26 << 2;
    $28 = ((($exc)) + 564|0);
    HEAP32[$28>>2] = $27;
    break;
   }
  }
 } while(0);
 $29 = ((($exc)) + 294|0);
 $30 = HEAP16[$29>>1]|0;
 $31 = ($30<<16>>16)==(16384);
 do {
  if ($31) {
   $32 = ((($exc)) + 572|0);
   HEAP32[$32>>2] = 60;
  } else {
   $33 = ((($exc)) + 296|0);
   $34 = HEAP16[$33>>1]|0;
   $35 = ($34<<16>>16)==(16384);
   $36 = ((($exc)) + 572|0);
   if ($35) {
    HEAP32[$36>>2] = 61;
    break;
   } else {
    HEAP32[$36>>2] = 62;
    break;
   }
  }
 } while(0);
 $37 = ((($exc)) + 290|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = ($38<<16>>16)==(16384);
 do {
  if ($39) {
   $40 = ((($exc)) + 576|0);
   HEAP32[$40>>2] = 60;
  } else {
   $41 = ((($exc)) + 292|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = ($42<<16>>16)==(16384);
   $44 = ((($exc)) + 576|0);
   if ($43) {
    HEAP32[$44>>2] = 61;
    break;
   } else {
    HEAP32[$44>>2] = 63;
    break;
   }
  }
 } while(0);
 $45 = ((($exc)) + 584|0);
 HEAP32[$45>>2] = 7;
 $46 = ((($exc)) + 588|0);
 HEAP32[$46>>2] = 8;
 $47 = ((($exc)) + 564|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ($48|0)==(1073741824);
 do {
  if ($49) {
   $50 = HEAP16[$0>>1]|0;
   $51 = ($50<<16>>16)==(16384);
   if ($51) {
    HEAP32[$45>>2] = 9;
    HEAP32[$46>>2] = 10;
    break;
   }
   $52 = ((($exc)) + 300|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = ($53<<16>>16)==(16384);
   if ($54) {
    HEAP32[$45>>2] = 11;
    HEAP32[$46>>2] = 12;
   }
  }
 } while(0);
 $55 = HEAP32[$47>>2]|0;
 $56 = ($55|0)<(0);
 $57 = (0 - ($55))|0;
 $58 = $56 ? $57 : $55;
 $59 = ($58|0)<(67108864);
 if (!($59)) {
  $60 = ((($exc)) + 256|0);
  HEAP32[$60>>2] = 0;
  return;
 }
 HEAP32[$47>>2] = 1073741824;
 $60 = ((($exc)) + 256|0);
 HEAP32[$60>>2] = 0;
 return;
}
function _Compute_Round($exc,$round_mode) {
 $exc = $exc|0;
 $round_mode = $round_mode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $round_mode&255;
 switch ($0|0) {
 case 5:  {
  $1 = ((($exc)) + 568|0);
  HEAP32[$1>>2] = 57;
  return;
  break;
 }
 case 1:  {
  $2 = ((($exc)) + 568|0);
  HEAP32[$2>>2] = 52;
  return;
  break;
 }
 case 4:  {
  $3 = ((($exc)) + 568|0);
  HEAP32[$3>>2] = 58;
  return;
  break;
 }
 case 3:  {
  $4 = ((($exc)) + 568|0);
  HEAP32[$4>>2] = 59;
  return;
  break;
 }
 case 0:  {
  $5 = ((($exc)) + 568|0);
  HEAP32[$5>>2] = 53;
  return;
  break;
 }
 case 2:  {
  $6 = ((($exc)) + 568|0);
  HEAP32[$6>>2] = 54;
  return;
  break;
 }
 case 6:  {
  $7 = ((($exc)) + 568|0);
  HEAP32[$7>>2] = 55;
  return;
  break;
 }
 case 7:  {
  $8 = ((($exc)) + 568|0);
  HEAP32[$8>>2] = 56;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _Ins_SxVTL($exc,$aIdx1,$aIdx2,$aOpc,$Vec) {
 $exc = $exc|0;
 $aIdx1 = $aIdx1|0;
 $aIdx2 = $aIdx2|0;
 $aOpc = $aOpc|0;
 $Vec = $Vec|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $A$1 = 0, $B$0 = 0, $aOpc$op = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $aIdx1&65535;
 $1 = ((($exc)) + 116|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2&65535)>($aIdx1&65535);
 if ($3) {
  $4 = ((($exc)) + 80|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = ($5&65535)>($aIdx2&65535);
  if ($6) {
   $11 = $aIdx2&65535;
   $12 = ((($exc)) + 88|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($exc)) + 124|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($13) + ($11<<3)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($15) + ($0<<3)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) - ($19))|0;
   $21 = (((($13) + ($11<<3)|0)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (((($15) + ($0<<3)|0)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) - ($24))|0;
   $26 = ($17|0)==($19|0);
   $27 = ($22|0)==($24|0);
   $or$cond = $26 & $27;
   $$ = $or$cond ? 16384 : $20;
   $aOpc$op = $aOpc & 1;
   $28 = ($aOpc$op|0)==(0);
   $29 = $28 | $or$cond;
   $30 = (0 - ($25))|0;
   $B$0 = $29 ? $25 : $$;
   $A$1 = $29 ? $$ : $30;
   _Normalize($A$1,$B$0,$Vec);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $7 = ((($exc)) + 561|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $$0 = 1;
  return ($$0|0);
 }
 $10 = ((($exc)) + 12|0);
 HEAP32[$10>>2] = 134;
 $$0 = 1;
 return ($$0|0);
}
function _Normalize($Vx,$Vy,$R) {
 $Vx = $Vx|0;
 $Vy = $Vy|0;
 $R = $R|0;
 var $$ = 0, $$01$lcssa = 0, $$0112 = 0, $$02 = 0, $$1 = 0, $$13$lcssa = 0, $$1311 = 0, $$2$lcssa = 0, $$24 = 0, $$29 = 0, $$3 = 0, $$35$ = 0, $$35$lcssa = 0, $$358 = 0, $$4 = 0, $$46 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $W$0$lcssa = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($Vx|0)<(0);
 $1 = (0 - ($Vx))|0;
 $2 = $0 ? $1 : $Vx;
 $3 = ($2|0)<(65536);
 if ($3) {
  $4 = ($Vy|0)<(0);
  $5 = (0 - ($Vy))|0;
  $6 = $4 ? $5 : $Vy;
  $7 = ($6|0)<(65536);
  if ($7) {
   $8 = $Vx << 8;
   $9 = $Vy << 8;
   $10 = (_TT_VecLen($8,$9)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    return;
   }
   $12 = (_FT_MulDiv($8,16384,$10)|0);
   $13 = $12&65535;
   HEAP16[$R>>1] = $13;
   $14 = (_FT_MulDiv($9,16384,$10)|0);
   $15 = $14&65535;
   $16 = ((($R)) + 2|0);
   HEAP16[$16>>1] = $15;
   return;
  }
 }
 $17 = (_TT_VecLen($Vx,$Vy)|0);
 $18 = (_FT_MulDiv($Vx,16384,$17)|0);
 $19 = (_FT_MulDiv($Vy,16384,$17)|0);
 $20 = Math_imul($18, $18)|0;
 $21 = Math_imul($19, $19)|0;
 $22 = (($21) + ($20))|0;
 $23 = ($18|0)<(0);
 $24 = (0 - ($18))|0;
 $$02 = $23 ? $24 : $18;
 $25 = ($19|0)<(0);
 $26 = (0 - ($19))|0;
 $$ = $25 ? $26 : $19;
 $27 = ($22|0)<(268435456);
 if ($27) {
  $$0112 = $$;$$1311 = $$02;
  while(1) {
   $29 = ($$1311|0)<($$0112|0);
   $30 = $29&1;
   $$24 = (($30) + ($$1311))|0;
   $31 = $29&1;
   $32 = $31 ^ 1;
   $$1 = (($32) + ($$0112))|0;
   $33 = Math_imul($$24, $$24)|0;
   $34 = Math_imul($$1, $$1)|0;
   $35 = (($34) + ($33))|0;
   $36 = ($35|0)<(268435456);
   if ($36) {
    $$0112 = $$1;$$1311 = $$24;
   } else {
    $$01$lcssa = $$1;$$13$lcssa = $$24;$W$0$lcssa = $35;
    break;
   }
  }
 } else {
  $$01$lcssa = $$;$$13$lcssa = $$02;$W$0$lcssa = $22;
 }
 $28 = ($W$0$lcssa|0)>(268451839);
 if ($28) {
  $$29 = $$01$lcssa;$$358 = $$13$lcssa;
  while(1) {
   $37 = ($$358|0)<($$29|0);
   $38 = $37 << 31 >> 31;
   $$46 = (($38) + ($$358))|0;
   $not$ = $37 ^ 1;
   $39 = $not$ << 31 >> 31;
   $$3 = (($39) + ($$29))|0;
   $40 = Math_imul($$46, $$46)|0;
   $41 = Math_imul($$3, $$3)|0;
   $42 = (($40) + ($41))|0;
   $43 = ($42|0)>(268451839);
   if ($43) {
    $$29 = $$3;$$358 = $$46;
   } else {
    $$2$lcssa = $$3;$$35$lcssa = $$46;
    break;
   }
  }
 } else {
  $$2$lcssa = $$01$lcssa;$$35$lcssa = $$13$lcssa;
 }
 $44 = ($18|0)>(-1);
 $45 = (0 - ($$35$lcssa))|0;
 $$35$ = $44 ? $$35$lcssa : $45;
 $46 = ($19|0)>(-1);
 $47 = (0 - ($$2$lcssa))|0;
 $$4 = $46 ? $$2$lcssa : $47;
 $48 = $$35$&65535;
 HEAP16[$R>>1] = $48;
 $49 = $$4&65535;
 $50 = ((($R)) + 2|0);
 HEAP16[$50>>1] = $49;
 return;
}
function _Ins_ISECT($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = ((($args)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($args)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($args)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 65535;
 $8 = ((($exc)) + 44|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = ($7>>>0)<($10>>>0);
 if ($11) {
  $12 = ((($args)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 65535;
  $15 = ($14>>>0)<($10>>>0);
  if ($15) {
   $16 = $2 & 65535;
   $17 = ((($exc)) + 80|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = $18&65535;
   $20 = ($16>>>0)<($19>>>0);
   if ($20) {
    $21 = $4 & 65535;
    $22 = ($21>>>0)<($19>>>0);
    if ($22) {
     $23 = $0 & 65535;
     $24 = ((($exc)) + 116|0);
     $25 = HEAP16[$24>>1]|0;
     $26 = $25&65535;
     $27 = ($23>>>0)<($26>>>0);
     if ($27) {
      $32 = ((($exc)) + 52|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (($33) + ($14<<3)|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (($33) + ($7<<3)|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (($35) - ($37))|0;
      $39 = (((($33) + ($14<<3)|0)) + 4|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (((($33) + ($7<<3)|0)) + 4|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ((($exc)) + 88|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = (($44) + ($21<<3)|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = (($44) + ($16<<3)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (($46) - ($48))|0;
      $50 = (((($44) + ($21<<3)|0)) + 4|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (((($44) + ($16<<3)|0)) + 4|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (($51) - ($53))|0;
      $55 = ((($exc)) + 132|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = (($56) + ($23)|0);
      $58 = HEAP8[$57>>0]|0;
      $59 = $58&255;
      $60 = $59 | 24;
      $61 = $60&255;
      HEAP8[$57>>0] = $61;
      $62 = (($42) - ($40))|0;
      $63 = (_FT_MulDiv($49,$62,64)|0);
      $64 = (_FT_MulDiv($54,$38,64)|0);
      $65 = (($64) + ($63))|0;
      $66 = ($65|0)<(0);
      $67 = (0 - ($65))|0;
      $68 = $66 ? $67 : $65;
      $69 = ($68|0)>(63);
      if ($69) {
       $70 = (($42) - ($53))|0;
       $71 = (($37) - ($48))|0;
       $72 = (_FT_MulDiv($71,$62,64)|0);
       $73 = (_FT_MulDiv($70,$38,64)|0);
       $74 = (($73) + ($72))|0;
       $75 = (_FT_MulDiv($74,$49,$65)|0);
       $76 = (_FT_MulDiv($74,$54,$65)|0);
       $77 = HEAP32[$43>>2]|0;
       $78 = (($77) + ($16<<3)|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = (($79) + ($75))|0;
       $81 = ((($exc)) + 124|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (($82) + ($23<<3)|0);
       HEAP32[$83>>2] = $80;
       $84 = HEAP32[$43>>2]|0;
       $85 = (((($84) + ($16<<3)|0)) + 4|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = (($86) + ($76))|0;
       $88 = HEAP32[$81>>2]|0;
       $89 = (((($88) + ($23<<3)|0)) + 4|0);
       HEAP32[$89>>2] = $87;
       return;
      } else {
       $90 = HEAP32[$43>>2]|0;
       $91 = (($90) + ($16<<3)|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (($90) + ($21<<3)|0);
       $94 = HEAP32[$93>>2]|0;
       $95 = (($94) + ($92))|0;
       $96 = HEAP32[$32>>2]|0;
       $97 = (($96) + ($7<<3)|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (($95) + ($98))|0;
       $100 = (($96) + ($14<<3)|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = (($99) + ($101))|0;
       $103 = (($102|0) / 4)&-1;
       $104 = ((($exc)) + 124|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = (($105) + ($23<<3)|0);
       HEAP32[$106>>2] = $103;
       $107 = HEAP32[$43>>2]|0;
       $108 = (((($107) + ($16<<3)|0)) + 4|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (((($107) + ($21<<3)|0)) + 4|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = (($111) + ($109))|0;
       $113 = HEAP32[$32>>2]|0;
       $114 = (((($113) + ($7<<3)|0)) + 4|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = (($112) + ($115))|0;
       $117 = (((($113) + ($14<<3)|0)) + 4|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (($116) + ($118))|0;
       $120 = (($119|0) / 4)&-1;
       $121 = HEAP32[$104>>2]|0;
       $122 = (((($121) + ($23<<3)|0)) + 4|0);
       HEAP32[$122>>2] = $120;
       return;
      }
     }
    }
   }
  }
 }
 $28 = ((($exc)) + 561|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  return;
 }
 $31 = ((($exc)) + 12|0);
 HEAP32[$31>>2] = 134;
 return;
}
function _Ins_SZP0($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 switch ($0|0) {
 case 0:  {
  $1 = ((($exc)) + 36|0);
  $2 = ((($exc)) + 180|0);
  dest=$1; src=$2; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 1:  {
  $3 = ((($exc)) + 36|0);
  $4 = ((($exc)) + 144|0);
  dest=$3; src=$4; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  break;
 }
 default: {
  $5 = ((($exc)) + 561|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   return;
  }
  $8 = ((($exc)) + 12|0);
  HEAP32[$8>>2] = 134;
  return;
 }
 }
 $9 = HEAP32[$args>>2]|0;
 $10 = $9&65535;
 $11 = ((($exc)) + 344|0);
 HEAP16[$11>>1] = $10;
 return;
}
function _Ins_SZP1($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 switch ($0|0) {
 case 0:  {
  $1 = ((($exc)) + 72|0);
  $2 = ((($exc)) + 180|0);
  dest=$1; src=$2; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 1:  {
  $3 = ((($exc)) + 72|0);
  $4 = ((($exc)) + 144|0);
  dest=$3; src=$4; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  break;
 }
 default: {
  $5 = ((($exc)) + 561|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   return;
  }
  $8 = ((($exc)) + 12|0);
  HEAP32[$8>>2] = 134;
  return;
 }
 }
 $9 = HEAP32[$args>>2]|0;
 $10 = $9&65535;
 $11 = ((($exc)) + 346|0);
 HEAP16[$11>>1] = $10;
 return;
}
function _Ins_SZP2($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 switch ($0|0) {
 case 0:  {
  $1 = ((($exc)) + 108|0);
  $2 = ((($exc)) + 180|0);
  dest=$1; src=$2; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 1:  {
  $3 = ((($exc)) + 108|0);
  $4 = ((($exc)) + 144|0);
  dest=$3; src=$4; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  break;
 }
 default: {
  $5 = ((($exc)) + 561|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   return;
  }
  $8 = ((($exc)) + 12|0);
  HEAP32[$8>>2] = 134;
  return;
 }
 }
 $9 = HEAP32[$args>>2]|0;
 $10 = $9&65535;
 $11 = ((($exc)) + 348|0);
 HEAP16[$11>>1] = $10;
 return;
}
function _Ins_SZPS($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 switch ($0|0) {
 case 0:  {
  $1 = ((($exc)) + 36|0);
  $2 = ((($exc)) + 180|0);
  dest=$1; src=$2; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  break;
 }
 case 1:  {
  $3 = ((($exc)) + 36|0);
  $4 = ((($exc)) + 144|0);
  dest=$3; src=$4; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  break;
 }
 default: {
  $5 = ((($exc)) + 561|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   return;
  }
  $8 = ((($exc)) + 12|0);
  HEAP32[$8>>2] = 134;
  return;
 }
 }
 $9 = ((($exc)) + 72|0);
 $10 = ((($exc)) + 36|0);
 dest=$9; src=$10; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $11 = ((($exc)) + 108|0);
 dest=$11; src=$10; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $12 = HEAP32[$args>>2]|0;
 $13 = $12&65535;
 $14 = ((($exc)) + 344|0);
 HEAP16[$14>>1] = $13;
 $15 = HEAP32[$args>>2]|0;
 $16 = $15&65535;
 $17 = ((($exc)) + 346|0);
 HEAP16[$17>>1] = $16;
 $18 = HEAP32[$args>>2]|0;
 $19 = $18&65535;
 $20 = ((($exc)) + 348|0);
 HEAP16[$20>>1] = $19;
 return;
}
function _Round_To_Grid($exc,$distance,$compensation) {
 $exc = $exc|0;
 $distance = $distance|0;
 $compensation = $compensation|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($distance|0)>(-1);
 if (!($0)) {
  $6 = (32 - ($distance))|0;
  $7 = (($6) + ($compensation))|0;
  $8 = $7 & -64;
  $9 = (0 - ($8))|0;
  $10 = ($9|0)>(0);
  $$ = $10 ? 0 : $9;
  $val$0 = $$;
  return ($val$0|0);
 }
 $1 = (($compensation) + ($distance))|0;
 $2 = ($distance|0)!=(0);
 $3 = ($1|0)>(-32);
 $or$cond = $2 & $3;
 if (!($or$cond)) {
  $val$0 = 0;
  return ($val$0|0);
 }
 $4 = (($1) + 32)|0;
 $5 = $4 & -64;
 $val$0 = $5;
 return ($val$0|0);
}
function _Round_To_Half_Grid($exc,$distance,$compensation) {
 $exc = $exc|0;
 $distance = $distance|0;
 $compensation = $compensation|0;
 var $$ = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($distance|0)>(-1);
 if ($0) {
  $1 = (($compensation) + ($distance))|0;
  $2 = $1 & -64;
  $3 = $2 | 32;
  $4 = ($distance|0)!=(0);
  $5 = ($3|0)<(0);
  $or$cond = $4 & $5;
  $$2 = $or$cond ? 0 : $3;
  $val$0 = $$2;
  return ($val$0|0);
 } else {
  $6 = (($compensation) - ($distance))|0;
  $7 = $6 & -64;
  $8 = $7 | 32;
  $9 = (0 - ($8))|0;
  $10 = ($9|0)>(0);
  $$ = $10 ? 0 : $9;
  $val$0 = $$;
  return ($val$0|0);
 }
 return (0)|0;
}
function _Ins_ELSE($exc) {
 $exc = $exc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $nIfs$0$ph = 0, $nIfs$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 368|0);
 $nIfs$0$ph = 1;
 L1: while(1) {
  L3: while(1) {
   $1 = (_SkipCode($exc)|0);
   $2 = ($1<<24>>24)==(1);
   if ($2) {
    label = 8;
    break L1;
   }
   $3 = HEAP8[$0>>0]|0;
   $4 = $3&255;
   switch ($4|0) {
   case 88:  {
    label = 5;
    break L3;
    break;
   }
   case 89:  {
    label = 6;
    break L3;
    break;
   }
   default: {
   }
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $5 = (($nIfs$0$ph) + 1)|0;
   $nIfs$1 = $5;
  }
  else if ((label|0) == 6) {
   label = 0;
   $6 = (($nIfs$0$ph) + -1)|0;
   $nIfs$1 = $6;
  }
  $7 = ($nIfs$1|0)==(0);
  if ($7) {
   label = 8;
   break;
  } else {
   $nIfs$0$ph = $nIfs$1;
  }
 }
 if ((label|0) == 8) {
  return;
 }
}
function _Ins_MINDEX($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = ($0|0)<(1);
 if (!($1)) {
  $2 = ((($exc)) + 28|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)<($0|0);
  if (!($4)) {
   $9 = (($3) - ($0))|0;
   $10 = ((($exc)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($9<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($9) + 1)|0;
   $15 = (($11) + ($14<<2)|0);
   $16 = $0 << 2;
   $17 = (($16) + -4)|0;
   _memmove(($12|0),($15|0),($17|0))|0;
   $18 = HEAP32[$2>>2]|0;
   $19 = (($18) + -1)|0;
   $20 = HEAP32[$10>>2]|0;
   $21 = (($20) + ($19<<2)|0);
   HEAP32[$21>>2] = $13;
   return;
  }
 }
 $5 = ((($exc)) + 561|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  return;
 }
 $8 = ((($exc)) + 12|0);
 HEAP32[$8>>2] = 134;
 return;
}
function _Ins_ALIGNPTS($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = $0&65535;
 $2 = ((($args)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&65535;
 $5 = $0 & 65535;
 $6 = ((($exc)) + 72|0);
 $7 = ((($exc)) + 80|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = ($5>>>0)<($9>>>0);
 if ($10) {
  $11 = $3 & 65535;
  $12 = ((($exc)) + 44|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = $13&65535;
  $15 = ($11>>>0)<($14>>>0);
  if ($15) {
   $20 = ((($exc)) + 36|0);
   $21 = ((($exc)) + 572|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($exc)) + 52|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($11<<3)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($exc)) + 88|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + ($5<<3)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($26) - ($30))|0;
   $32 = (((($24) + ($11<<3)|0)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (((($28) + ($5<<3)|0)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($33) - ($35))|0;
   $37 = (FUNCTION_TABLE_iiii[$22 & 127]($exc,$31,$36)|0);
   $38 = (($37|0) / 2)&-1;
   $39 = ((($exc)) + 584|0);
   $40 = HEAP32[$39>>2]|0;
   FUNCTION_TABLE_viiii[$40 & 15]($exc,$6,$1,$38);
   $41 = HEAP32[$39>>2]|0;
   $42 = (0 - ($38))|0;
   FUNCTION_TABLE_viiii[$41 & 15]($exc,$20,$4,$42);
   return;
  }
 }
 $16 = ((($exc)) + 561|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  return;
 }
 $19 = ((($exc)) + 12|0);
 HEAP32[$19>>2] = 134;
 return;
}
function _Ins_UNKNOWN($exc) {
 $exc = $exc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $def$02 = 0, $def$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 416|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($exc)) + 408|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*20)|0)|0);
 $5 = ($3|0)>(0);
 L1: do {
  if ($5) {
   $6 = ((($exc)) + 368|0);
   $7 = HEAP8[$6>>0]|0;
   $def$02 = $1;
   while(1) {
    $8 = ((($def$02)) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = $9&255;
    $11 = ($7<<24>>24)==($10<<24>>24);
    if ($11) {
     $12 = ((($def$02)) + 16|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if (!($14)) {
      $def$02$lcssa = $def$02;
      break;
     }
    }
    $41 = ((($def$02)) + 20|0);
    $42 = ($41>>>0)<($4>>>0);
    if ($42) {
     $def$02 = $41;
    } else {
     break L1;
    }
   }
   $15 = ((($exc)) + 428|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($exc)) + 432|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)<($18|0);
   if ($19) {
    $21 = ((($exc)) + 436|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($16) + 1)|0;
    HEAP32[$15>>2] = $23;
    $24 = ((($exc)) + 352|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($22) + (($16*20)|0)|0);
    HEAP32[$26>>2] = $25;
    $27 = ((($exc)) + 360|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 1)|0;
    $30 = (((($22) + (($16*20)|0)|0)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (((($22) + (($16*20)|0)|0)) + 8|0);
    HEAP32[$31>>2] = 1;
    $32 = ((($def$02$lcssa)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (((($22) + (($16*20)|0)|0)) + 12|0);
    HEAP32[$34>>2] = $33;
    $35 = ((($def$02$lcssa)) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (((($22) + (($16*20)|0)|0)) + 16|0);
    HEAP32[$37>>2] = $36;
    $38 = HEAP32[$def$02$lcssa>>2]|0;
    $39 = HEAP32[$32>>2]|0;
    (_Ins_Goto_CodeRange($exc,$38,$39)|0);
    $40 = ((($exc)) + 376|0);
    HEAP8[$40>>0] = 0;
    return;
   } else {
    $20 = ((($exc)) + 12|0);
    HEAP32[$20>>2] = 130;
    return;
   }
  }
 } while(0);
 $43 = ((($exc)) + 12|0);
 HEAP32[$43>>2] = 128;
 return;
}
function _Ins_UTP($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mask$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = $0 & 65535;
 $2 = ((($exc)) + 44|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ($1>>>0)<($4>>>0);
 if ($5) {
  $10 = ((($exc)) + 298|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = ($11<<16>>16)==(0);
  $$ = $12 ? -1 : -9;
  $13 = ((($exc)) + 300|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = ($14<<16>>16)==(0);
  if ($15) {
   $mask$1 = $$;
  } else {
   $16 = $$&255;
   $17 = $16 & 239;
   $18 = $17&255;
   $mask$1 = $18;
  }
  $19 = ((($exc)) + 60|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($1)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 & $mask$1;
  HEAP8[$21>>0] = $23;
  return;
 } else {
  $6 = ((($exc)) + 561|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   return;
  }
  $9 = ((($exc)) + 12|0);
  HEAP32[$9>>2] = 134;
  return;
 }
}
function _Ins_LOOPCALL($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $def$0$lcssa = 0, $def$01 = 0, $def$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($args)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($exc)) + 420|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ($1>>>0)<($4>>>0);
 do {
  if ($5) {
   $6 = ((($exc)) + 404|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($exc)) + 396|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($4|0)==($9|0);
   if ($10) {
    $11 = (($7) + (($1*20)|0)|0);
    $12 = (((($7) + (($1*20)|0)|0)) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==($1|0);
    if ($14) {
     $def$1 = $11;
    } else {
     $$pr = HEAP32[$8>>2]|0;
     $17 = $$pr;
     label = 5;
    }
   } else {
    $17 = $9;
    label = 5;
   }
   if ((label|0) == 5) {
    $15 = HEAP32[$6>>2]|0;
    $16 = (($15) + (($17*20)|0)|0);
    $18 = ($17|0)>(0);
    L8: do {
     if ($18) {
      $def$01 = $15;
      while(1) {
       $19 = ((($def$01)) + 12|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = ($20|0)==($1|0);
       if ($21) {
        $def$0$lcssa = $def$01;
        break L8;
       }
       $22 = ((($def$01)) + 20|0);
       $23 = ($22>>>0)<($16>>>0);
       if ($23) {
        $def$01 = $22;
       } else {
        $def$0$lcssa = $22;
        break;
       }
      }
     } else {
      $def$0$lcssa = $15;
     }
    } while(0);
    $24 = ($def$0$lcssa|0)==($16|0);
    if ($24) {
     break;
    } else {
     $def$1 = $def$0$lcssa;
    }
   }
   $25 = ((($def$1)) + 16|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = ($26<<24>>24)==(0);
   if (!($27)) {
    $28 = ((($exc)) + 428|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($exc)) + 432|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($29|0)<($31|0);
    if (!($32)) {
     $33 = ((($exc)) + 12|0);
     HEAP32[$33>>2] = 130;
     return;
    }
    $34 = HEAP32[$args>>2]|0;
    $35 = ($34|0)>(0);
    if (!($35)) {
     return;
    }
    $36 = ((($exc)) + 436|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ((($exc)) + 352|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = (($37) + (($29*20)|0)|0);
    HEAP32[$40>>2] = $39;
    $41 = ((($exc)) + 360|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + 1)|0;
    $44 = (((($37) + (($29*20)|0)|0)) + 4|0);
    HEAP32[$44>>2] = $43;
    $45 = HEAP32[$args>>2]|0;
    $46 = (((($37) + (($29*20)|0)|0)) + 8|0);
    HEAP32[$46>>2] = $45;
    $47 = ((($def$1)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (((($37) + (($29*20)|0)|0)) + 12|0);
    HEAP32[$49>>2] = $48;
    $50 = ((($def$1)) + 8|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (((($37) + (($29*20)|0)|0)) + 16|0);
    HEAP32[$52>>2] = $51;
    $53 = HEAP32[$28>>2]|0;
    $54 = (($53) + 1)|0;
    HEAP32[$28>>2] = $54;
    $55 = HEAP32[$def$1>>2]|0;
    $56 = HEAP32[$47>>2]|0;
    (_Ins_Goto_CodeRange($exc,$55,$56)|0);
    $57 = ((($exc)) + 376|0);
    HEAP8[$57>>0] = 0;
    return;
   }
  }
 } while(0);
 $58 = ((($exc)) + 12|0);
 HEAP32[$58>>2] = 134;
 return;
}
function _Ins_CALL($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $def$0$lcssa = 0, $def$01 = 0, $def$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = ((($exc)) + 420|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ($0>>>0)<($3>>>0);
 do {
  if ($4) {
   $5 = ((($exc)) + 404|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($exc)) + 396|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($3|0)==($8|0);
   if ($9) {
    $10 = (($6) + (($0*20)|0)|0);
    $11 = (((($6) + (($0*20)|0)|0)) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($0|0);
    if ($13) {
     $def$1 = $10;
    } else {
     $$pr = HEAP32[$7>>2]|0;
     $16 = $$pr;
     label = 5;
    }
   } else {
    $16 = $8;
    label = 5;
   }
   if ((label|0) == 5) {
    $14 = HEAP32[$5>>2]|0;
    $15 = (($14) + (($16*20)|0)|0);
    $17 = ($16|0)>(0);
    L8: do {
     if ($17) {
      $def$01 = $14;
      while(1) {
       $18 = ((($def$01)) + 12|0);
       $19 = HEAP32[$18>>2]|0;
       $20 = ($19|0)==($0|0);
       if ($20) {
        $def$0$lcssa = $def$01;
        break L8;
       }
       $21 = ((($def$01)) + 20|0);
       $22 = ($21>>>0)<($15>>>0);
       if ($22) {
        $def$01 = $21;
       } else {
        $def$0$lcssa = $21;
        break;
       }
      }
     } else {
      $def$0$lcssa = $14;
     }
    } while(0);
    $23 = ($def$0$lcssa|0)==($15|0);
    if ($23) {
     break;
    } else {
     $def$1 = $def$0$lcssa;
    }
   }
   $24 = ((($def$1)) + 16|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = ($25<<24>>24)==(0);
   if (!($26)) {
    $27 = ((($exc)) + 428|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ((($exc)) + 432|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($28|0)<($30|0);
    if ($31) {
     $33 = ((($exc)) + 436|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($exc)) + 352|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = (($34) + (($28*20)|0)|0);
     HEAP32[$37>>2] = $36;
     $38 = ((($exc)) + 360|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (($39) + 1)|0;
     $41 = (((($34) + (($28*20)|0)|0)) + 4|0);
     HEAP32[$41>>2] = $40;
     $42 = (((($34) + (($28*20)|0)|0)) + 8|0);
     HEAP32[$42>>2] = 1;
     $43 = ((($def$1)) + 4|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (((($34) + (($28*20)|0)|0)) + 12|0);
     HEAP32[$45>>2] = $44;
     $46 = ((($def$1)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = (((($34) + (($28*20)|0)|0)) + 16|0);
     HEAP32[$48>>2] = $47;
     $49 = HEAP32[$27>>2]|0;
     $50 = (($49) + 1)|0;
     HEAP32[$27>>2] = $50;
     $51 = HEAP32[$def$1>>2]|0;
     $52 = HEAP32[$43>>2]|0;
     (_Ins_Goto_CodeRange($exc,$51,$52)|0);
     $53 = ((($exc)) + 376|0);
     HEAP8[$53>>0] = 0;
     return;
    } else {
     $32 = ((($exc)) + 12|0);
     HEAP32[$32>>2] = 130;
     return;
    }
   }
  }
 } while(0);
 $54 = ((($exc)) + 12|0);
 HEAP32[$54>>2] = 134;
 return;
}
function _Ins_FDEF($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $rec$0$lcssa = 0, $rec$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 404|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($exc)) + 396|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*20)|0)|0);
 $5 = HEAP32[$args>>2]|0;
 $6 = ($3|0)>(0);
 L1: do {
  if ($6) {
   $rec$01 = $1;
   while(1) {
    $7 = ((($rec$01)) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==($5|0);
    if ($9) {
     $rec$0$lcssa = $rec$01;
     break L1;
    }
    $10 = ((($rec$01)) + 20|0);
    $11 = ($10>>>0)<($4>>>0);
    if ($11) {
     $rec$01 = $10;
    } else {
     $rec$0$lcssa = $10;
     break;
    }
   }
  } else {
   $rec$0$lcssa = $1;
  }
 } while(0);
 $12 = ($rec$0$lcssa|0)==($4|0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ((($exc)) + 400|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if ($16) {
    $18 = (($13) + 1)|0;
    HEAP32[$2>>2] = $18;
    break;
   }
   $17 = ((($exc)) + 12|0);
   HEAP32[$17>>2] = 140;
   return;
  }
 } while(0);
 $19 = ($5>>>0)>(65535);
 if ($19) {
  $20 = ((($exc)) + 12|0);
  HEAP32[$20>>2] = 140;
  return;
 }
 $21 = ((($exc)) + 352|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$rec$0$lcssa>>2] = $22;
 $23 = $5 & 65535;
 $24 = ((($rec$0$lcssa)) + 12|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($exc)) + 360|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 1)|0;
 $28 = ((($rec$0$lcssa)) + 4|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($rec$0$lcssa)) + 16|0);
 HEAP8[$29>>0] = 1;
 $30 = ((($exc)) + 420|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($5>>>0)>($31>>>0);
 if ($32) {
  HEAP32[$30>>2] = $23;
 }
 $33 = ((($exc)) + 368|0);
 L20: while(1) {
  $34 = (_SkipCode($exc)|0);
  $35 = ($34<<24>>24)==(0);
  if (!($35)) {
   label = 17;
   break;
  }
  $36 = HEAP8[$33>>0]|0;
  $37 = $36&255;
  switch ($37|0) {
  case 44: case 137:  {
   label = 15;
   break L20;
   break;
  }
  case 45:  {
   label = 16;
   break L20;
   break;
  }
  default: {
  }
  }
 }
 if ((label|0) == 15) {
  $38 = ((($exc)) + 12|0);
  HEAP32[$38>>2] = 137;
  return;
 }
 else if ((label|0) == 16) {
  $39 = HEAP32[$25>>2]|0;
  $40 = ((($rec$0$lcssa)) + 8|0);
  HEAP32[$40>>2] = $39;
  return;
 }
 else if ((label|0) == 17) {
  return;
 }
}
function _Ins_ENDF($exc) {
 $exc = $exc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 428|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(1);
 if ($2) {
  $3 = ((($exc)) + 12|0);
  HEAP32[$3>>2] = 136;
  return;
 }
 $4 = (($1) + -1)|0;
 HEAP32[$0>>2] = $4;
 $5 = ((($exc)) + 436|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (((($6) + (($4*20)|0)|0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -1)|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($exc)) + 376|0);
 HEAP8[$10>>0] = 0;
 $11 = HEAP32[$7>>2]|0;
 $12 = ($11|0)>(0);
 if ($12) {
  $13 = HEAP32[$0>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$0>>2] = $14;
  $15 = (((($6) + (($4*20)|0)|0)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($exc)) + 360|0);
  HEAP32[$17>>2] = $16;
  return;
 } else {
  $18 = (($6) + (($4*20)|0)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (((($6) + (($4*20)|0)|0)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  (_Ins_Goto_CodeRange($exc,$19,$21)|0);
  return;
 }
}
function _Ins_MDAP($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $distance$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = $0&65535;
 $2 = $0 & 65535;
 $3 = ((($exc)) + 36|0);
 $4 = ((($exc)) + 44|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($2>>>0)<($6>>>0);
 if ($7) {
  $12 = ((($exc)) + 368|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 & 1;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   $distance$0 = 0;
  } else {
   $16 = ((($exc)) + 572|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($exc)) + 52|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($2<<3)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (((($19) + ($2<<3)|0)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (FUNCTION_TABLE_iiii[$17 & 127]($exc,$21,$23)|0);
   $25 = ((($exc)) + 568|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($exc)) + 264|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$26 & 127]($exc,$24,$28)|0);
   $30 = (($29) - ($24))|0;
   $distance$0 = $30;
  }
  $31 = ((($exc)) + 584|0);
  $32 = HEAP32[$31>>2]|0;
  FUNCTION_TABLE_viiii[$32 & 15]($exc,$3,$1,$distance$0);
  $33 = ((($exc)) + 284|0);
  HEAP16[$33>>1] = $1;
  $34 = ((($exc)) + 286|0);
  HEAP16[$34>>1] = $1;
  return;
 } else {
  $8 = ((($exc)) + 561|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)==(0);
  if ($10) {
   return;
  }
  $11 = ((($exc)) + 12|0);
  HEAP32[$11>>2] = 134;
  return;
 }
}
function _Ins_IUP($exc) {
 $exc = $exc|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $V = 0, $contour$0 = 0, $cur_touched$0$ph = 0, $cur_touched$0$ph$lcssa = 0, $mask$0 = 0, $point$0 = 0, $point$15 = 0, $point$15$lcssa = 0, $point$2 = 0, $point$2$in = 0, $point$2$in$lcssa19 = 0, $point$2$lcssa = 0;
 var $point$2$lcssa20 = 0, $point$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $V = sp;
 $0 = ((($exc)) + 154|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = ((($exc)) + 368|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 1;
 $6 = ($5<<24>>24)==(0);
 $7 = ((($exc)) + 156|0);
 if ($6) {
  $15 = HEAP32[$7>>2]|0;
  $16 = ((($15)) + 4|0);
  HEAP32[$V>>2] = $16;
  $17 = ((($exc)) + 160|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 4|0);
  $20 = ((($V)) + 4|0);
  HEAP32[$20>>2] = $19;
  $21 = ((($exc)) + 164|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 4|0);
  $24 = ((($V)) + 8|0);
  HEAP32[$24>>2] = $23;
  $mask$0 = 16;
 } else {
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$V>>2] = $8;
  $9 = ((($exc)) + 160|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($V)) + 4|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($exc)) + 164|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($V)) + 8|0);
  HEAP32[$14>>2] = $13;
  $mask$0 = 8;
 }
 $25 = ((($exc)) + 152|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = ((($V)) + 12|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($exc)) + 172|0);
 $30 = ((($exc)) + 176|0);
 $31 = ((($exc)) + 168|0);
 $contour$0 = 0;$point$0 = 0;
 while(1) {
  $32 = $contour$0 << 16 >> 16;
  $33 = HEAP32[$29>>2]|0;
  $34 = (($33) + ($32<<1)|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35&65535;
  $37 = HEAP16[$30>>1]|0;
  $38 = $37&65535;
  $39 = (($36) - ($38))|0;
  $40 = HEAP16[$25>>1]|0;
  $41 = $40&65535;
  $42 = ($39>>>0)<($41>>>0);
  $43 = (($41) + -1)|0;
  $$ = $42 ? $39 : $43;
  $44 = ($point$0>>>0)>($$>>>0);
  L10: do {
   if ($44) {
    $point$3 = $point$0;
   } else {
    $45 = HEAP32[$31>>2]|0;
    $point$15 = $point$0;
    while(1) {
     $46 = (($45) + ($point$15)|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = $47 & $mask$0;
     $49 = ($48<<24>>24)==(0);
     if (!($49)) {
      $point$15$lcssa = $point$15;
      break;
     }
     $50 = (($point$15) + 1)|0;
     $51 = ($50>>>0)>($$>>>0);
     if ($51) {
      $point$3 = $50;
      break L10;
     } else {
      $point$15 = $50;
     }
    }
    $cur_touched$0$ph = $point$15$lcssa;
    L16: while(1) {
     $point$2$in = $cur_touched$0$ph;
     while(1) {
      $point$2 = (($point$2$in) + 1)|0;
      $52 = ($point$2>>>0)>($$>>>0);
      if ($52) {
       $cur_touched$0$ph$lcssa = $cur_touched$0$ph;$point$2$lcssa = $point$2;
       break L16;
      }
      $53 = HEAP32[$31>>2]|0;
      $54 = (($53) + ($point$2)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55 & $mask$0;
      $57 = ($56<<24>>24)==(0);
      if ($57) {
       $point$2$in = $point$2;
      } else {
       $point$2$in$lcssa19 = $point$2$in;$point$2$lcssa20 = $point$2;
       break;
      }
     }
     $58 = (($cur_touched$0$ph) + 1)|0;
     __iup_worker_interpolate($V,$58,$point$2$in$lcssa19,$cur_touched$0$ph,$point$2$lcssa20);
     $cur_touched$0$ph = $point$2$lcssa20;
    }
    $59 = ($cur_touched$0$ph$lcssa|0)==($point$15$lcssa|0);
    if ($59) {
     __iup_worker_shift($V,$point$0,$$,$cur_touched$0$ph$lcssa);
     $point$3 = $point$2$lcssa;
     break;
    }
    $60 = (($cur_touched$0$ph$lcssa) + 1)|0;
    $61 = $60 & 65535;
    __iup_worker_interpolate($V,$61,$$,$cur_touched$0$ph$lcssa,$point$15$lcssa);
    $62 = ($point$15$lcssa|0)==(0);
    if ($62) {
     $point$3 = $point$2$lcssa;
    } else {
     $63 = (($point$15$lcssa) + -1)|0;
     __iup_worker_interpolate($V,$point$0,$63,$cur_touched$0$ph$lcssa,$point$15$lcssa);
     $point$3 = $point$2$lcssa;
    }
   }
  } while(0);
  $64 = (($contour$0) + 1)<<16>>16;
  $65 = HEAP16[$0>>1]|0;
  $66 = ($64<<16>>16)<($65<<16>>16);
  if ($66) {
   $contour$0 = $64;$point$0 = $point$3;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _Ins_SHP($exc) {
 $exc = $exc|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dx = 0, $dy = 0;
 var $refp = 0, $zp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $zp = sp + 8|0;
 $refp = sp + 44|0;
 $dx = sp + 4|0;
 $dy = sp;
 $0 = ((($exc)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($exc)) + 304|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 L1: do {
  if ($4) {
   $5 = ((($exc)) + 561|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if (!($7)) {
    $8 = ((($exc)) + 12|0);
    HEAP32[$8>>2] = 134;
   }
  } else {
   $9 = (_Compute_Point_Displacement($exc,$dx,$dy,$zp,$refp)|0);
   $10 = ($9<<24>>24)==(0);
   if (!($10)) {
    STACKTOP = sp;return;
   }
   $$pr = HEAP32[$2>>2]|0;
   $11 = ($$pr|0)>(0);
   if ($11) {
    $12 = ((($exc)) + 28|0);
    $13 = ((($exc)) + 24|0);
    $14 = ((($exc)) + 116|0);
    $15 = HEAP32[$dx>>2]|0;
    $16 = HEAP32[$dy>>2]|0;
    $17 = ((($exc)) + 561|0);
    while(1) {
     $18 = HEAP32[$12>>2]|0;
     $19 = (($18) + -1)|0;
     HEAP32[$12>>2] = $19;
     $20 = HEAP32[$13>>2]|0;
     $21 = (($20) + ($19<<2)|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = $22 & 65535;
     $24 = HEAP16[$14>>1]|0;
     $25 = $24&65535;
     $26 = ($23>>>0)<($25>>>0);
     if ($26) {
      $30 = $22&65535;
      _Move_Zp2_Point($exc,$30,$15,$16,1);
     } else {
      $27 = HEAP8[$17>>0]|0;
      $28 = ($27<<24>>24)==(0);
      if (!($28)) {
       break;
      }
     }
     $31 = HEAP32[$2>>2]|0;
     $32 = (($31) + -1)|0;
     HEAP32[$2>>2] = $32;
     $33 = ($31|0)>(1);
     if (!($33)) {
      break L1;
     }
    }
    $29 = ((($exc)) + 12|0);
    HEAP32[$29>>2] = 134;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 HEAP32[$2>>2] = 1;
 $34 = ((($exc)) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($exc)) + 32|0);
 HEAP32[$36>>2] = $35;
 STACKTOP = sp;return;
}
function _Ins_SHC($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dx = 0, $dy = 0, $i$03 = 0, $limit$0 = 0;
 var $or$cond = 0, $refp = 0, $sext = 0, $start$0 = 0, $zp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $zp = sp + 8|0;
 $refp = sp + 44|0;
 $dx = sp + 4|0;
 $dy = sp;
 $0 = HEAP32[$args>>2]|0;
 $1 = ((($exc)) + 348|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = ($2<<16>>16)==(0);
 if ($3) {
  $8 = 1;
 } else {
  $4 = ((($exc)) + 118|0);
  $5 = HEAP16[$4>>1]|0;
  $8 = $5;
 }
 $sext = $0 << 16;
 $6 = $sext >> 16;
 $7 = $8 << 16 >> 16;
 $9 = ($6>>>0)<($7>>>0);
 if (!($9)) {
  $10 = ((($exc)) + 561|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)==(0);
  if ($12) {
   STACKTOP = sp;return;
  }
  $13 = ((($exc)) + 12|0);
  HEAP32[$13>>2] = 134;
  STACKTOP = sp;return;
 }
 $14 = (_Compute_Point_Displacement($exc,$dx,$dy,$zp,$refp)|0);
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ($6|0)==(0);
 if ($16) {
  $start$0 = 0;
 } else {
  $17 = (($6) + -1)|0;
  $18 = ((($exc)) + 136|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($17<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21&65535;
  $23 = (($22) + 1)|0;
  $24 = ((($exc)) + 140|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = (($23) - ($26))|0;
  $28 = $27&65535;
  $start$0 = $28;
 }
 $29 = HEAP16[$1>>1]|0;
 $30 = ($29<<16>>16)==(0);
 if ($30) {
  $31 = ((($exc)) + 116|0);
  $32 = HEAP16[$31>>1]|0;
  $limit$0 = $32;
 } else {
  $33 = ((($exc)) + 136|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($6<<1)|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36&65535;
  $38 = ((($exc)) + 140|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39&65535;
  $41 = (($37) + 1)|0;
  $42 = (($41) - ($40))|0;
  $43 = $42&65535;
  $limit$0 = $43;
 }
 $44 = ($start$0&65535)<($limit$0&65535);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = ((($zp)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($exc)) + 124|0);
 $48 = HEAP16[$refp>>1]|0;
 $49 = HEAP32[$dx>>2]|0;
 $50 = HEAP32[$dy>>2]|0;
 $i$03 = $start$0;
 while(1) {
  $51 = HEAP32[$47>>2]|0;
  $52 = ($46|0)==($51|0);
  $53 = ($48<<16>>16)==($i$03<<16>>16);
  $or$cond = $52 & $53;
  if (!($or$cond)) {
   _Move_Zp2_Point($exc,$i$03,$49,$50,1);
  }
  $54 = (($i$03) + 1)<<16>>16;
  $55 = ($54&65535)<($limit$0&65535);
  if ($55) {
   $i$03 = $54;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _Ins_SHZ($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dx = 0, $dy = 0, $i$02 = 0, $limit$0 = 0;
 var $or$cond = 0, $refp = 0, $zp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $zp = sp + 8|0;
 $refp = sp + 44|0;
 $dx = sp + 4|0;
 $dy = sp;
 $0 = HEAP32[$args>>2]|0;
 $1 = ($0>>>0)>(1);
 if ($1) {
  $2 = ((($exc)) + 561|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if ($4) {
   STACKTOP = sp;return;
  }
  $5 = ((($exc)) + 12|0);
  HEAP32[$5>>2] = 134;
  STACKTOP = sp;return;
 }
 $6 = (_Compute_Point_Displacement($exc,$dx,$dy,$zp,$refp)|0);
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = ((($exc)) + 348|0);
 $9 = HEAP16[$8>>1]|0;
 L11: do {
  switch ($9<<16>>16) {
  case 0:  {
   $10 = ((($exc)) + 116|0);
   $11 = HEAP16[$10>>1]|0;
   $limit$0 = $11;
   break;
  }
  case 1:  {
   $12 = ((($exc)) + 118|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = ($13<<16>>16)>(0);
   if ($14) {
    $15 = $13 << 16 >> 16;
    $16 = (($15) + -1)|0;
    $17 = ((($exc)) + 136|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) + ($16<<1)|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = $20&65535;
    $22 = (($21) + 1)|0;
    $23 = $22&65535;
    $limit$0 = $23;
    break L11;
   } else {
    STACKTOP = sp;return;
   }
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $24 = ($limit$0<<16>>16)==(0);
 if ($24) {
  STACKTOP = sp;return;
 }
 $25 = ((($zp)) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($exc)) + 124|0);
 $28 = HEAP16[$refp>>1]|0;
 $29 = HEAP32[$dx>>2]|0;
 $30 = HEAP32[$dy>>2]|0;
 $i$02 = 0;
 while(1) {
  $31 = HEAP32[$27>>2]|0;
  $32 = ($26|0)==($31|0);
  $33 = ($28<<16>>16)==($i$02<<16>>16);
  $or$cond = $32 & $33;
  if (!($or$cond)) {
   _Move_Zp2_Point($exc,$i$02,$29,$30,0);
  }
  $34 = (($i$02) + 1)<<16>>16;
  $35 = ($34&65535)<($limit$0&65535);
  if ($35) {
   $i$02 = $34;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _Ins_SHPIX($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($exc)) + 304|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ($1|0)<($4|0);
 L1: do {
  if ($5) {
   $6 = ((($exc)) + 561|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if (!($8)) {
    $9 = ((($exc)) + 12|0);
    HEAP32[$9>>2] = 134;
   }
  } else {
   $10 = HEAP32[$args>>2]|0;
   $11 = ((($exc)) + 298|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = $12 << 16 >> 16;
   $14 = (_TT_MulFix14($10,$13)|0);
   $15 = ((($exc)) + 300|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16 << 16 >> 16;
   $18 = (_TT_MulFix14($10,$17)|0);
   $$pr = HEAP32[$2>>2]|0;
   $19 = ($$pr|0)>(0);
   if ($19) {
    $20 = ((($exc)) + 28|0);
    $21 = ((($exc)) + 24|0);
    $22 = ((($exc)) + 116|0);
    $23 = ((($exc)) + 561|0);
    while(1) {
     $24 = HEAP32[$20>>2]|0;
     $25 = (($24) + -1)|0;
     HEAP32[$20>>2] = $25;
     $26 = HEAP32[$21>>2]|0;
     $27 = (($26) + ($25<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = $28 & 65535;
     $30 = HEAP16[$22>>1]|0;
     $31 = $30&65535;
     $32 = ($29>>>0)<($31>>>0);
     if ($32) {
      $36 = $28&65535;
      _Move_Zp2_Point($exc,$36,$14,$18,1);
     } else {
      $33 = HEAP8[$23>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       break;
      }
     }
     $37 = HEAP32[$2>>2]|0;
     $38 = (($37) + -1)|0;
     HEAP32[$2>>2] = $38;
     $39 = ($37|0)>(1);
     if (!($39)) {
      break L1;
     }
    }
    $35 = ((($exc)) + 12|0);
    HEAP32[$35>>2] = 134;
    return;
   }
  }
 } while(0);
 HEAP32[$2>>2] = 1;
 $40 = ((($exc)) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($exc)) + 32|0);
 HEAP32[$42>>2] = $41;
 return;
}
function _Ins_IP($exc) {
 $exc = $exc|0;
 var $$mux = 0, $$pn = 0, $$pn$in = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $cur_range$0$ph = 0, $new_dist$0 = 0, $old_range$0 = 0, $old_range$1$ph = 0, $org_dist$0 = 0, $orus_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($exc)) + 304|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 L1: do {
  if ($4) {
   $5 = ((($exc)) + 561|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if (!($7)) {
    $8 = ((($exc)) + 12|0);
    HEAP32[$8>>2] = 134;
   }
  } else {
   $9 = ((($exc)) + 344|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = ($10<<16>>16)==(0);
   if ($11) {
    $30 = 1;
   } else {
    $12 = ((($exc)) + 346|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = ($13<<16>>16)==(0);
    if ($14) {
     $30 = 1;
    } else {
     $15 = ((($exc)) + 348|0);
     $16 = HEAP16[$15>>1]|0;
     $17 = ($16<<16>>16)==(0);
     $30 = $17;
    }
   }
   $18 = ((($exc)) + 286|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = $19&65535;
   $21 = ((($exc)) + 44|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = ($19&65535)<($22&65535);
   if (!($23)) {
    $24 = ((($exc)) + 561|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)==(0);
    if ($26) {
     break;
    }
    $27 = ((($exc)) + 12|0);
    HEAP32[$27>>2] = 134;
    break;
   }
   $28 = ((($exc)) + 48|0);
   $29 = ((($exc)) + 56|0);
   $$pn$in = $30 ? $28 : $29;
   $$pn = HEAP32[$$pn$in>>2]|0;
   $orus_base$0 = (($$pn) + ($20<<3)|0);
   $31 = ((($exc)) + 52|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($20<<3)|0);
   $34 = ((($exc)) + 288|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35&65535;
   $37 = ((($exc)) + 80|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = ($35&65535)<($38&65535);
   if ($39) {
    do {
     if ($30) {
      $40 = ((($exc)) + 576|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ((($exc)) + 84|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (($43) + ($36<<3)|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = HEAP32[$orus_base$0>>2]|0;
      $47 = (($45) - ($46))|0;
      $48 = (((($43) + ($36<<3)|0)) + 4|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = (((($$pn) + ($20<<3)|0)) + 4|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (($49) - ($51))|0;
      $53 = (FUNCTION_TABLE_iiii[$41 & 127]($exc,$47,$52)|0);
      $old_range$0 = $53;
     } else {
      $54 = ((($exc)) + 220|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ((($exc)) + 224|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($55|0)==($57|0);
      if ($58) {
       $59 = ((($exc)) + 576|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ((($exc)) + 92|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (($62) + ($36<<3)|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = HEAP32[$orus_base$0>>2]|0;
       $66 = (($64) - ($65))|0;
       $67 = (((($62) + ($36<<3)|0)) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = (((($$pn) + ($20<<3)|0)) + 4|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = (($68) - ($70))|0;
       $72 = (FUNCTION_TABLE_iiii[$60 & 127]($exc,$66,$71)|0);
       $old_range$0 = $72;
       break;
      } else {
       $73 = ((($exc)) + 92|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (($74) + ($36<<3)|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = HEAP32[$orus_base$0>>2]|0;
       $78 = (($76) - ($77))|0;
       $79 = (_FT_MulFix($78,$55)|0);
       $80 = HEAP16[$34>>1]|0;
       $81 = $80&65535;
       $82 = HEAP32[$73>>2]|0;
       $83 = (((($82) + ($81<<3)|0)) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (((($$pn) + ($20<<3)|0)) + 4|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = (($84) - ($86))|0;
       $88 = HEAP32[$56>>2]|0;
       $89 = (_FT_MulFix($87,$88)|0);
       $90 = ((($exc)) + 576|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = (FUNCTION_TABLE_iiii[$91 & 127]($exc,$79,$89)|0);
       $old_range$0 = $92;
       break;
      }
     }
    } while(0);
    $93 = ((($exc)) + 572|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = HEAP16[$34>>1]|0;
    $96 = $95&65535;
    $97 = ((($exc)) + 88|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($98) + ($96<<3)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = HEAP32[$33>>2]|0;
    $102 = (($100) - ($101))|0;
    $103 = (((($98) + ($96<<3)|0)) + 4|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (((($32) + ($20<<3)|0)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (($104) - ($106))|0;
    $108 = (FUNCTION_TABLE_iiii[$94 & 127]($exc,$102,$107)|0);
    $cur_range$0$ph = $108;$old_range$1$ph = $old_range$0;
   } else {
    $cur_range$0$ph = 0;$old_range$1$ph = 0;
   }
   $$pr = HEAP32[$2>>2]|0;
   $109 = ($$pr|0)>(0);
   if ($109) {
    $110 = ((($exc)) + 28|0);
    $111 = ((($exc)) + 24|0);
    $112 = ((($exc)) + 108|0);
    $113 = ((($exc)) + 116|0);
    $114 = ((($exc)) + 576|0);
    $115 = ((($exc)) + 120|0);
    $116 = (((($$pn) + ($20<<3)|0)) + 4|0);
    $117 = ((($exc)) + 572|0);
    $118 = ((($exc)) + 124|0);
    $119 = (((($32) + ($20<<3)|0)) + 4|0);
    $120 = ((($exc)) + 584|0);
    $121 = ($old_range$1$ph|0)==(0);
    $122 = ((($exc)) + 220|0);
    $123 = ((($exc)) + 224|0);
    $124 = ((($exc)) + 576|0);
    $125 = ((($exc)) + 128|0);
    $126 = (((($$pn) + ($20<<3)|0)) + 4|0);
    $127 = ((($exc)) + 128|0);
    $128 = (((($$pn) + ($20<<3)|0)) + 4|0);
    $129 = ((($exc)) + 576|0);
    $130 = ((($exc)) + 561|0);
    while(1) {
     $131 = HEAP32[$110>>2]|0;
     $132 = (($131) + -1)|0;
     HEAP32[$110>>2] = $132;
     $133 = HEAP32[$111>>2]|0;
     $134 = (($133) + ($132<<2)|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = HEAP16[$113>>1]|0;
     $137 = $136&65535;
     $138 = ($135>>>0)<($137>>>0);
     if ($138) {
      do {
       if ($30) {
        $142 = HEAP32[$114>>2]|0;
        $143 = HEAP32[$115>>2]|0;
        $144 = (($143) + ($135<<3)|0);
        $145 = HEAP32[$144>>2]|0;
        $146 = HEAP32[$orus_base$0>>2]|0;
        $147 = (($145) - ($146))|0;
        $148 = (((($143) + ($135<<3)|0)) + 4|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = HEAP32[$116>>2]|0;
        $151 = (($149) - ($150))|0;
        $152 = (FUNCTION_TABLE_iiii[$142 & 127]($exc,$147,$151)|0);
        $org_dist$0 = $152;
       } else {
        $153 = HEAP32[$122>>2]|0;
        $154 = HEAP32[$123>>2]|0;
        $155 = ($153|0)==($154|0);
        if ($155) {
         $156 = HEAP32[$124>>2]|0;
         $157 = HEAP32[$125>>2]|0;
         $158 = (($157) + ($135<<3)|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = HEAP32[$orus_base$0>>2]|0;
         $161 = (($159) - ($160))|0;
         $162 = (((($157) + ($135<<3)|0)) + 4|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = HEAP32[$126>>2]|0;
         $165 = (($163) - ($164))|0;
         $166 = (FUNCTION_TABLE_iiii[$156 & 127]($exc,$161,$165)|0);
         $org_dist$0 = $166;
         break;
        } else {
         $167 = HEAP32[$127>>2]|0;
         $168 = (($167) + ($135<<3)|0);
         $169 = HEAP32[$168>>2]|0;
         $170 = HEAP32[$orus_base$0>>2]|0;
         $171 = (($169) - ($170))|0;
         $172 = (_FT_MulFix($171,$153)|0);
         $173 = HEAP32[$127>>2]|0;
         $174 = (((($173) + ($135<<3)|0)) + 4|0);
         $175 = HEAP32[$174>>2]|0;
         $176 = HEAP32[$128>>2]|0;
         $177 = (($175) - ($176))|0;
         $178 = HEAP32[$123>>2]|0;
         $179 = (_FT_MulFix($177,$178)|0);
         $180 = HEAP32[$129>>2]|0;
         $181 = (FUNCTION_TABLE_iiii[$180 & 127]($exc,$172,$179)|0);
         $org_dist$0 = $181;
         break;
        }
       }
      } while(0);
      $182 = HEAP32[$117>>2]|0;
      $183 = HEAP32[$118>>2]|0;
      $184 = (($183) + ($135<<3)|0);
      $185 = HEAP32[$184>>2]|0;
      $186 = HEAP32[$33>>2]|0;
      $187 = (($185) - ($186))|0;
      $188 = (((($183) + ($135<<3)|0)) + 4|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = HEAP32[$119>>2]|0;
      $191 = (($189) - ($190))|0;
      $192 = (FUNCTION_TABLE_iiii[$182 & 127]($exc,$187,$191)|0);
      $193 = ($org_dist$0|0)==(0);
      $brmerge = $193 | $121;
      $$mux = $193 ? 0 : $192;
      if ($brmerge) {
       $new_dist$0 = $$mux;
      } else {
       $194 = (_FT_MulDiv($org_dist$0,$cur_range$0$ph,$old_range$1$ph)|0);
       $new_dist$0 = $194;
      }
      $195 = HEAP32[$120>>2]|0;
      $196 = $135&65535;
      $197 = (($new_dist$0) - ($192))|0;
      FUNCTION_TABLE_viiii[$195 & 15]($exc,$112,$196,$197);
     } else {
      $139 = HEAP8[$130>>0]|0;
      $140 = ($139<<24>>24)==(0);
      if (!($140)) {
       break;
      }
     }
     $198 = HEAP32[$2>>2]|0;
     $199 = (($198) + -1)|0;
     HEAP32[$2>>2] = $199;
     $200 = ($198|0)>(1);
     if (!($200)) {
      break L1;
     }
    }
    $141 = ((($exc)) + 12|0);
    HEAP32[$141>>2] = 134;
    return;
   }
  }
 } while(0);
 HEAP32[$2>>2] = 1;
 $201 = ((($exc)) + 28|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = ((($exc)) + 32|0);
 HEAP32[$203>>2] = $202;
 return;
}
function _Ins_MSIRP($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = $0&65535;
 $2 = $0 & 65535;
 $3 = ((($exc)) + 72|0);
 $4 = ((($exc)) + 80|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($2>>>0)<($6>>>0);
 if ($7) {
  $8 = ((($exc)) + 284|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = ((($exc)) + 44|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ($9&65535)<($12&65535);
  if ($13) {
   $18 = ((($exc)) + 346|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = ($19<<16>>16)==(0);
   if ($20) {
    $21 = ((($exc)) + 84|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + ($2<<3)|0);
    $24 = ((($exc)) + 48|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + ($10<<3)|0);
    $27 = $26;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 4)|0;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = $23;
    $34 = $33;
    HEAP32[$34>>2] = $29;
    $35 = (($33) + 4)|0;
    $36 = $35;
    HEAP32[$36>>2] = $32;
    $37 = ((($exc)) + 588|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($args)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    FUNCTION_TABLE_viiii[$38 & 15]($exc,$3,$1,$40);
    $41 = ((($exc)) + 88|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + ($2<<3)|0);
    $44 = HEAP32[$21>>2]|0;
    $45 = (($44) + ($2<<3)|0);
    $46 = $45;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    $49 = (($46) + 4)|0;
    $50 = $49;
    $51 = HEAP32[$50>>2]|0;
    $52 = $43;
    $53 = $52;
    HEAP32[$53>>2] = $48;
    $54 = (($52) + 4)|0;
    $55 = $54;
    HEAP32[$55>>2] = $51;
   }
   $56 = ((($exc)) + 572|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ((($exc)) + 88|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + ($2<<3)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ((($exc)) + 52|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = HEAP16[$8>>1]|0;
   $65 = $64&65535;
   $66 = (($63) + ($65<<3)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($61) - ($67))|0;
   $69 = (((($59) + ($2<<3)|0)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (((($63) + ($65<<3)|0)) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($70) - ($72))|0;
   $74 = (FUNCTION_TABLE_iiii[$57 & 127]($exc,$68,$73)|0);
   $75 = ((($exc)) + 584|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($args)) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($78) - ($74))|0;
   FUNCTION_TABLE_viiii[$76 & 15]($exc,$3,$1,$79);
   $80 = HEAP16[$8>>1]|0;
   $81 = ((($exc)) + 286|0);
   HEAP16[$81>>1] = $80;
   $82 = ((($exc)) + 288|0);
   HEAP16[$82>>1] = $1;
   $83 = ((($exc)) + 368|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $84 & 1;
   $86 = ($85<<24>>24)==(0);
   if ($86) {
    return;
   }
   HEAP16[$8>>1] = $1;
   return;
  }
 }
 $14 = ((($exc)) + 561|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  return;
 }
 $17 = ((($exc)) + 12|0);
 HEAP32[$17>>2] = 134;
 return;
}
function _Ins_ALIGNRP($exc) {
 $exc = $exc|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($exc)) + 304|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 L1: do {
  if ($4) {
   label = 3;
  } else {
   $5 = ((($exc)) + 284|0);
   $6 = HEAP16[$5>>1]|0;
   $7 = ((($exc)) + 44|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = ($6&65535)<($8&65535);
   if ($9) {
    $$pr = HEAP32[$2>>2]|0;
    $14 = ($$pr|0)>(0);
    if ($14) {
     $15 = ((($exc)) + 28|0);
     $16 = ((($exc)) + 24|0);
     $17 = ((($exc)) + 80|0);
     $18 = ((($exc)) + 72|0);
     $19 = ((($exc)) + 572|0);
     $20 = ((($exc)) + 88|0);
     $21 = ((($exc)) + 52|0);
     $22 = ((($exc)) + 584|0);
     $23 = ((($exc)) + 561|0);
     while(1) {
      $24 = HEAP32[$15>>2]|0;
      $25 = (($24) + -1)|0;
      HEAP32[$15>>2] = $25;
      $26 = HEAP32[$16>>2]|0;
      $27 = (($26) + ($25<<2)|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = $28 & 65535;
      $30 = HEAP16[$17>>1]|0;
      $31 = $30&65535;
      $32 = ($29>>>0)<($31>>>0);
      if ($32) {
       $36 = $28&65535;
       $37 = HEAP32[$19>>2]|0;
       $38 = HEAP32[$20>>2]|0;
       $39 = (($38) + ($29<<3)|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = HEAP32[$21>>2]|0;
       $42 = HEAP16[$5>>1]|0;
       $43 = $42&65535;
       $44 = (($41) + ($43<<3)|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = (($40) - ($45))|0;
       $47 = (((($38) + ($29<<3)|0)) + 4|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = (((($41) + ($43<<3)|0)) + 4|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = (($48) - ($50))|0;
       $52 = (FUNCTION_TABLE_iiii[$37 & 127]($exc,$46,$51)|0);
       $53 = HEAP32[$22>>2]|0;
       $54 = (0 - ($52))|0;
       FUNCTION_TABLE_viiii[$53 & 15]($exc,$18,$36,$54);
      } else {
       $33 = HEAP8[$23>>0]|0;
       $34 = ($33<<24>>24)==(0);
       if (!($34)) {
        break;
       }
      }
      $55 = HEAP32[$2>>2]|0;
      $56 = (($55) + -1)|0;
      HEAP32[$2>>2] = $56;
      $57 = ($55|0)>(1);
      if (!($57)) {
       break L1;
      }
     }
     $35 = ((($exc)) + 12|0);
     HEAP32[$35>>2] = 134;
     return;
    }
   } else {
    label = 3;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $10 = ((($exc)) + 561|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)==(0);
  if (!($12)) {
   $13 = ((($exc)) + 12|0);
   HEAP32[$13>>2] = 134;
  }
 }
 HEAP32[$2>>2] = 1;
 $58 = ((($exc)) + 28|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($exc)) + 32|0);
 HEAP32[$60>>2] = $59;
 return;
}
function _Round_To_Double_Grid($exc,$distance,$compensation) {
 $exc = $exc|0;
 $distance = $distance|0;
 $compensation = $compensation|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($distance|0)>(-1);
 if (!($0)) {
  $6 = (16 - ($distance))|0;
  $7 = (($6) + ($compensation))|0;
  $8 = $7 & -32;
  $9 = (0 - ($8))|0;
  $10 = ($9|0)>(0);
  $$ = $10 ? 0 : $9;
  $val$0 = $$;
  return ($val$0|0);
 }
 $1 = (($compensation) + ($distance))|0;
 $2 = ($distance|0)!=(0);
 $3 = ($1|0)>(-16);
 $or$cond = $2 & $3;
 if (!($or$cond)) {
  $val$0 = 0;
  return ($val$0|0);
 }
 $4 = (($1) + 16)|0;
 $5 = $4 & -32;
 $val$0 = $5;
 return ($val$0|0);
}
function _Ins_MIAP($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $9 = 0, $distance$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($args)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$args>>2]|0;
 $3 = $2&65535;
 $4 = $2 & 65535;
 $5 = ((($exc)) + 36|0);
 $6 = ((($exc)) + 44|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ($4>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($exc)) + 380|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($1>>>0)<($11>>>0);
  if ($12) {
   $17 = ((($exc)) + 592|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iii[$18 & 255]($exc,$1)|0);
   $20 = ((($exc)) + 344|0);
   $21 = HEAP16[$20>>1]|0;
   $22 = ($21<<16>>16)==(0);
   if ($22) {
    $23 = ((($exc)) + 298|0);
    $24 = HEAP16[$23>>1]|0;
    $25 = $24 << 16 >> 16;
    $26 = (_TT_MulFix14($19,$25)|0);
    $27 = ((($exc)) + 48|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($4<<3)|0);
    HEAP32[$29>>2] = $26;
    $30 = ((($exc)) + 300|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = $31 << 16 >> 16;
    $33 = (_TT_MulFix14($19,$32)|0);
    $34 = HEAP32[$27>>2]|0;
    $35 = (((($34) + ($4<<3)|0)) + 4|0);
    HEAP32[$35>>2] = $33;
    $36 = ((($exc)) + 52|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + ($4<<3)|0);
    $39 = HEAP32[$27>>2]|0;
    $40 = (($39) + ($4<<3)|0);
    $41 = $40;
    $42 = $41;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($41) + 4)|0;
    $45 = $44;
    $46 = HEAP32[$45>>2]|0;
    $47 = $38;
    $48 = $47;
    HEAP32[$48>>2] = $43;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $46;
   }
   $51 = ((($exc)) + 572|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($exc)) + 52|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + ($4<<3)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (((($54) + ($4<<3)|0)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (FUNCTION_TABLE_iiii[$52 & 127]($exc,$56,$58)|0);
   $60 = ((($exc)) + 368|0);
   $61 = HEAP8[$60>>0]|0;
   $62 = $61 & 1;
   $63 = ($62<<24>>24)==(0);
   if ($63) {
    $distance$1 = $19;
   } else {
    $64 = (($19) - ($59))|0;
    $65 = ($64|0)<(0);
    $66 = (0 - ($64))|0;
    $67 = $65 ? $66 : $64;
    $68 = ((($exc)) + 320|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($67|0)>($69|0);
    $$ = $70 ? $59 : $19;
    $71 = ((($exc)) + 568|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((($exc)) + 264|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (FUNCTION_TABLE_iiii[$72 & 127]($exc,$$,$74)|0);
    $distance$1 = $75;
   }
   $76 = ((($exc)) + 584|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($distance$1) - ($59))|0;
   FUNCTION_TABLE_viiii[$77 & 15]($exc,$5,$3,$78);
   $79 = ((($exc)) + 284|0);
   HEAP16[$79>>1] = $3;
   $80 = ((($exc)) + 286|0);
   HEAP16[$80>>1] = $3;
   return;
  }
 }
 $13 = ((($exc)) + 561|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $79 = ((($exc)) + 284|0);
  HEAP16[$79>>1] = $3;
  $80 = ((($exc)) + 286|0);
  HEAP16[$80>>1] = $3;
  return;
 }
 $16 = ((($exc)) + 12|0);
 HEAP32[$16>>2] = 134;
 $79 = ((($exc)) + 284|0);
 HEAP16[$79>>1] = $3;
 $80 = ((($exc)) + 286|0);
 HEAP16[$80>>1] = $3;
 return;
}
function _Ins_NPUSHB($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $K$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 360|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ((($exc)) + 356|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ((($exc)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 $11 = ((($exc)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) - ($12))|0;
 $14 = ($7>>>0)<($13>>>0);
 if (!($14)) {
  $16 = ((($exc)) + 12|0);
  HEAP32[$16>>2] = 130;
  return;
 }
 $15 = ($6<<24>>24)==(0);
 if (!($15)) {
  $19 = 1;$K$01 = 1;
  while(1) {
   $17 = HEAP32[$0>>2]|0;
   $18 = (($19) + 1)|0;
   $20 = (($18) + ($17))|0;
   $21 = HEAP32[$3>>2]|0;
   $22 = (($21) + ($20)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = (($19) + -1)|0;
   $26 = (($args) + ($25<<2)|0);
   HEAP32[$26>>2] = $24;
   $27 = (($K$01) + 1)<<16>>16;
   $28 = $27&65535;
   $29 = ($28>>>0)>($7>>>0);
   if ($29) {
    break;
   } else {
    $19 = $28;$K$01 = $27;
   }
  }
 }
 $30 = ((($exc)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($7))|0;
 HEAP32[$30>>2] = $32;
 return;
}
function _Ins_NPUSHW($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $K$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 360|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = ((($exc)) + 356|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ((($exc)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 $11 = ((($exc)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) - ($12))|0;
 $14 = ($7>>>0)<($13>>>0);
 if (!($14)) {
  $15 = ((($exc)) + 12|0);
  HEAP32[$15>>2] = 130;
  return;
 }
 $16 = (($1) + 2)|0;
 HEAP32[$0>>2] = $16;
 $17 = ($6<<24>>24)==(0);
 if (!($17)) {
  $21 = 0;$K$01 = 0;
  while(1) {
   $18 = (_GetShortIns($exc)|0);
   $19 = $18 << 16 >> 16;
   $20 = (($args) + ($21<<2)|0);
   HEAP32[$20>>2] = $19;
   $22 = (($K$01) + 1)<<16>>16;
   $23 = $22&65535;
   $24 = ($23>>>0)<($7>>>0);
   if ($24) {
    $21 = $23;$K$01 = $22;
   } else {
    break;
   }
  }
 }
 $25 = ((($exc)) + 376|0);
 HEAP8[$25>>0] = 0;
 $26 = ((($exc)) + 32|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + ($7))|0;
 HEAP32[$26>>2] = $28;
 return;
}
function _Ins_GC($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $R$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = ((($exc)) + 116|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ($0>>>0)<($3>>>0);
 if (!($4)) {
  $5 = ((($exc)) + 561|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $R$0 = 0;
   HEAP32[$args>>2] = $R$0;
   return;
  }
  $8 = ((($exc)) + 12|0);
  HEAP32[$8>>2] = 134;
  $R$0 = 0;
  HEAP32[$args>>2] = $R$0;
  return;
 }
 $9 = ((($exc)) + 368|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $22 = ((($exc)) + 572|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($exc)) + 124|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($0<<3)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (((($25) + ($0<<3)|0)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (FUNCTION_TABLE_iiii[$23 & 127]($exc,$27,$29)|0);
  $R$0 = $30;
  HEAP32[$args>>2] = $R$0;
  return;
 } else {
  $13 = ((($exc)) + 576|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($exc)) + 120|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($0<<3)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (((($16) + ($0<<3)|0)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$14 & 127]($exc,$18,$20)|0);
  $R$0 = $21;
  HEAP32[$args>>2] = $R$0;
  return;
 }
}
function _Ins_SCFS($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = $0 & 65535;
 $2 = ((($exc)) + 116|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ($1>>>0)<($4>>>0);
 if ($5) {
  $10 = ((($exc)) + 108|0);
  $11 = $0&65535;
  $12 = ((($exc)) + 572|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($exc)) + 124|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($1<<3)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (((($15) + ($1<<3)|0)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_iiii[$13 & 127]($exc,$17,$19)|0);
  $21 = ((($exc)) + 584|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($args)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) - ($20))|0;
  FUNCTION_TABLE_viiii[$22 & 15]($exc,$10,$11,$25);
  $26 = ((($exc)) + 348|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = ($27<<16>>16)==(0);
  if (!($28)) {
   return;
  }
  $29 = ((($exc)) + 120|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + ($1<<3)|0);
  $32 = HEAP32[$14>>2]|0;
  $33 = (($32) + ($1<<3)|0);
  $34 = $33;
  $35 = $34;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) + 4)|0;
  $38 = $37;
  $39 = HEAP32[$38>>2]|0;
  $40 = $31;
  $41 = $40;
  HEAP32[$41>>2] = $36;
  $42 = (($40) + 4)|0;
  $43 = $42;
  HEAP32[$43>>2] = $39;
  return;
 } else {
  $6 = ((($exc)) + 561|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   return;
  }
  $9 = ((($exc)) + 12|0);
  HEAP32[$9>>2] = 134;
  return;
 }
}
function _Ins_MD($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $D$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = $0 & 65535;
 $2 = ((($exc)) + 44|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ($1>>>0)<($4>>>0);
 if ($5) {
  $6 = ((($args)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & 65535;
  $9 = ((($exc)) + 80|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = ($8>>>0)<($11>>>0);
  if ($12) {
   $17 = ((($exc)) + 368|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if (!($20)) {
    $21 = ((($exc)) + 572|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($exc)) + 52|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (($24) + ($1<<3)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($exc)) + 88|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($8<<3)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($26) - ($30))|0;
    $32 = (((($24) + ($1<<3)|0)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (((($28) + ($8<<3)|0)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($33) - ($35))|0;
    $37 = (FUNCTION_TABLE_iiii[$22 & 127]($exc,$31,$36)|0);
    $D$0 = $37;
    HEAP32[$args>>2] = $D$0;
    return;
   }
   $38 = ((($exc)) + 344|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = ($39<<16>>16)==(0);
   if (!($40)) {
    $41 = ((($exc)) + 346|0);
    $42 = HEAP16[$41>>1]|0;
    $43 = ($42<<16>>16)==(0);
    if (!($43)) {
     $61 = ((($exc)) + 56|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (($62) + ($1<<3)|0);
     $64 = ((($exc)) + 92|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($65) + ($8<<3)|0);
     $67 = ((($exc)) + 220|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($exc)) + 224|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($68|0)==($70|0);
     if ($71) {
      $72 = ((($exc)) + 576|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = HEAP32[$63>>2]|0;
      $75 = HEAP32[$66>>2]|0;
      $76 = (($74) - ($75))|0;
      $77 = (((($62) + ($1<<3)|0)) + 4|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (((($65) + ($8<<3)|0)) + 4|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) - ($80))|0;
      $82 = (FUNCTION_TABLE_iiii[$73 & 127]($exc,$76,$81)|0);
      $83 = HEAP32[$67>>2]|0;
      $84 = (_FT_MulFix($82,$83)|0);
      $D$0 = $84;
      HEAP32[$args>>2] = $D$0;
      return;
     } else {
      $85 = HEAP32[$63>>2]|0;
      $86 = HEAP32[$66>>2]|0;
      $87 = (($85) - ($86))|0;
      $88 = (_FT_MulFix($87,$68)|0);
      $89 = (((($62) + ($1<<3)|0)) + 4|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (((($65) + ($8<<3)|0)) + 4|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (($90) - ($92))|0;
      $94 = HEAP32[$69>>2]|0;
      $95 = (_FT_MulFix($93,$94)|0);
      $96 = ((($exc)) + 576|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = (FUNCTION_TABLE_iiii[$97 & 127]($exc,$88,$95)|0);
      $D$0 = $98;
      HEAP32[$args>>2] = $D$0;
      return;
     }
    }
   }
   $44 = ((($exc)) + 48|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($exc)) + 84|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ((($exc)) + 576|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($45) + ($1<<3)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($47) + ($8<<3)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($51) - ($53))|0;
   $55 = (((($45) + ($1<<3)|0)) + 4|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (((($47) + ($8<<3)|0)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($56) - ($58))|0;
   $60 = (FUNCTION_TABLE_iiii[$49 & 127]($exc,$54,$59)|0);
   $D$0 = $60;
   HEAP32[$args>>2] = $D$0;
   return;
  }
 }
 $13 = ((($exc)) + 561|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $D$0 = 0;
  HEAP32[$args>>2] = $D$0;
  return;
 }
 $16 = ((($exc)) + 12|0);
 HEAP32[$16>>2] = 134;
 $D$0 = 0;
 HEAP32[$args>>2] = $D$0;
 return;
}
function _Current_Ppem($exc) {
 $exc = $exc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 252|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = (_Current_Ratio($exc)|0);
 $4 = (_FT_MulFix($2,$3)|0);
 return ($4|0);
}
function _Ins_IF($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nIfs$0$ph$ph$be = 0, $nIfs$0$ph$ph5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = ($0|0)==(0);
 if (!($1)) {
  return;
 }
 $2 = ((($exc)) + 368|0);
 $3 = (_SkipCode($exc)|0);
 $4 = ($3<<24>>24)==(1);
 if ($4) {
  return;
 } else {
  $15 = 1;$nIfs$0$ph$ph5 = 1;
 }
 L6: while(1) {
  L8: while(1) {
   $5 = HEAP8[$2>>0]|0;
   $6 = $5&255;
   switch ($6|0) {
   case 88:  {
    label = 6;
    break L8;
    break;
   }
   case 89:  {
    label = 9;
    break L8;
    break;
   }
   case 27:  {
    if ($15) {
     label = 10;
     break L6;
    }
    break;
   }
   default: {
   }
   }
   $7 = (_SkipCode($exc)|0);
   $8 = ($7<<24>>24)==(1);
   if ($8) {
    label = 10;
    break L6;
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $9 = (($nIfs$0$ph$ph5) + 1)|0;
   $nIfs$0$ph$ph$be = $9;
  }
  else if ((label|0) == 9) {
   label = 0;
   $13 = (($nIfs$0$ph$ph5) + -1)|0;
   $14 = ($13|0)==(0);
   if ($14) {
    label = 10;
    break;
   } else {
    $nIfs$0$ph$ph$be = $13;
   }
  }
  $10 = ($nIfs$0$ph$ph$be|0)==(1);
  $11 = (_SkipCode($exc)|0);
  $12 = ($11<<24>>24)==(1);
  if ($12) {
   label = 10;
   break;
  } else {
   $15 = $10;$nIfs$0$ph$ph5 = $nIfs$0$ph$ph$be;
  }
 }
 if ((label|0) == 10) {
  return;
 }
}
function _Ins_DELTAP($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $C$0 = 0;
 var $k$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $55 = ((($exc)) + 28|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($exc)) + 32|0);
  HEAP32[$57>>2] = $56;
  return;
 }
 $2 = ((($exc)) + 28|0);
 $3 = ((($exc)) + 24|0);
 $4 = ((($exc)) + 36|0);
 $5 = ((($exc)) + 44|0);
 $6 = ((($exc)) + 368|0);
 $7 = ((($exc)) + 332|0);
 $8 = ((($exc)) + 334|0);
 $9 = ((($exc)) + 584|0);
 $10 = ((($exc)) + 561|0);
 $11 = ((($exc)) + 12|0);
 $k$01 = 1;
 while(1) {
  $12 = HEAP32[$2>>2]|0;
  $13 = ($12|0)<(2);
  if ($13) {
   break;
  }
  $18 = (($12) + -2)|0;
  HEAP32[$2>>2] = $18;
  $19 = (($12) + -1)|0;
  $20 = HEAP32[$3>>2]|0;
  $21 = (($20) + ($19<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22&65535;
  $24 = (($20) + ($18<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $22 & 65535;
  $27 = HEAP16[$5>>1]|0;
  $28 = $27&65535;
  $29 = ($26>>>0)<($28>>>0);
  if ($29) {
   $30 = $25 >>> 4;
   $31 = $30 & 15;
   $32 = HEAP8[$6>>0]|0;
   $33 = $32&255;
   switch ($33|0) {
   case 114:  {
    $35 = $31 | 32;
    $C$0 = $35;
    break;
   }
   case 113:  {
    $34 = $31 | 16;
    $C$0 = $34;
    break;
   }
   default: {
    $C$0 = $31;
   }
   }
   $36 = HEAP16[$7>>1]|0;
   $37 = $36 << 16 >> 16;
   $38 = (($37) + ($C$0))|0;
   $39 = (_Current_Ppem($exc)|0);
   $40 = ($39|0)==($38|0);
   if ($40) {
    $41 = $25 & 15;
    $42 = (($41) + -8)|0;
    $43 = ($42|0)>(-1);
    $44 = (($41) + -7)|0;
    $$ = $43 ? $44 : $42;
    $45 = $$ << 6;
    $46 = HEAP16[$8>>1]|0;
    $47 = $46 << 16 >> 16;
    $48 = 1 << $47;
    $49 = (($45|0) / ($48|0))&-1;
    $50 = HEAP32[$9>>2]|0;
    FUNCTION_TABLE_viiii[$50 & 15]($exc,$4,$23,$49);
   }
  } else {
   $51 = HEAP8[$10>>0]|0;
   $52 = ($51<<24>>24)==(0);
   if (!($52)) {
    HEAP32[$11>>2] = 134;
   }
  }
  $53 = (($k$01) + 1)|0;
  $54 = ($53>>>0)>($0>>>0);
  if ($54) {
   label = 16;
   break;
  } else {
   $k$01 = $53;
  }
 }
 if ((label|0) == 16) {
  $55 = ((($exc)) + 28|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($exc)) + 32|0);
  HEAP32[$57>>2] = $56;
  return;
 }
 $14 = ((($exc)) + 561|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(0);
 if (!($16)) {
  $17 = ((($exc)) + 12|0);
  HEAP32[$17>>2] = 129;
 }
 HEAP32[$2>>2] = 0;
 $55 = ((($exc)) + 28|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($exc)) + 32|0);
 HEAP32[$57>>2] = $56;
 return;
}
function _Round_None($exc,$distance,$compensation) {
 $exc = $exc|0;
 $distance = $distance|0;
 $compensation = $compensation|0;
 var $$ = 0, $$2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($distance|0)>(-1);
 if ($0) {
  $1 = (($compensation) + ($distance))|0;
  $2 = ($distance|0)!=(0);
  $3 = ($1|0)<(0);
  $or$cond = $2 & $3;
  $$2 = $or$cond ? 0 : $1;
  $val$0 = $$2;
  return ($val$0|0);
 } else {
  $4 = (($distance) - ($compensation))|0;
  $5 = ($4|0)>(0);
  $$ = $5 ? 0 : $4;
  $val$0 = $$;
  return ($val$0|0);
 }
 return (0)|0;
}
function _Ins_DELTAC($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $C$0 = 0, $k$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = ($0|0)==(0);
 L1: do {
  if (!($1)) {
   $2 = ((($exc)) + 28|0);
   $3 = ((($exc)) + 24|0);
   $4 = ((($exc)) + 380|0);
   $5 = ((($exc)) + 368|0);
   $6 = ((($exc)) + 332|0);
   $7 = ((($exc)) + 334|0);
   $8 = ((($exc)) + 600|0);
   $9 = ((($exc)) + 561|0);
   $k$02 = 1;
   while(1) {
    $10 = HEAP32[$2>>2]|0;
    $11 = ($10|0)<(2);
    if ($11) {
     break;
    }
    $16 = (($10) + -2)|0;
    HEAP32[$2>>2] = $16;
    $17 = (($10) + -1)|0;
    $18 = HEAP32[$3>>2]|0;
    $19 = (($18) + ($17<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($18) + ($16<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$4>>2]|0;
    $24 = ($20>>>0)<($23>>>0);
    if ($24) {
     $28 = $22 >>> 4;
     $29 = $28 & 15;
     $30 = HEAP8[$5>>0]|0;
     $31 = $30&255;
     switch ($31|0) {
     case 117:  {
      $33 = $29 | 32;
      $C$0 = $33;
      break;
     }
     case 116:  {
      $32 = $29 | 16;
      $C$0 = $32;
      break;
     }
     default: {
      $C$0 = $29;
     }
     }
     $34 = HEAP16[$6>>1]|0;
     $35 = $34 << 16 >> 16;
     $36 = (($35) + ($C$0))|0;
     $37 = (_Current_Ppem($exc)|0);
     $38 = ($37|0)==($36|0);
     if ($38) {
      $39 = $22 & 15;
      $40 = (($39) + -8)|0;
      $41 = ($40|0)>(-1);
      $42 = (($39) + -7)|0;
      $$ = $41 ? $42 : $40;
      $43 = $$ << 6;
      $44 = HEAP16[$7>>1]|0;
      $45 = $44 << 16 >> 16;
      $46 = 1 << $45;
      $47 = (($43|0) / ($46|0))&-1;
      $48 = HEAP32[$8>>2]|0;
      FUNCTION_TABLE_viii[$48 & 31]($exc,$20,$47);
     }
    } else {
     $25 = HEAP8[$9>>0]|0;
     $26 = ($25<<24>>24)==(0);
     if (!($26)) {
      label = 9;
      break;
     }
    }
    $49 = (($k$02) + 1)|0;
    $50 = ($49>>>0)>($0>>>0);
    if ($50) {
     break L1;
    } else {
     $k$02 = $49;
    }
   }
   if ((label|0) == 9) {
    $27 = ((($exc)) + 12|0);
    HEAP32[$27>>2] = 134;
    return;
   }
   $12 = ((($exc)) + 561|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = ($13<<24>>24)==(0);
   if (!($14)) {
    $15 = ((($exc)) + 12|0);
    HEAP32[$15>>2] = 129;
   }
   HEAP32[$2>>2] = 0;
  }
 } while(0);
 $51 = ((($exc)) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($exc)) + 32|0);
 HEAP32[$53>>2] = $52;
 return;
}
function _SetSuperRound($exc,$GridPeriod,$selector) {
 $exc = $exc|0;
 $GridPeriod = $GridPeriod|0;
 $selector = $selector|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $selector & 192;
 switch ($0|0) {
 case 0:  {
  $1 = (($GridPeriod|0) / 2)&-1;
  $2 = ((($exc)) + 476|0);
  HEAP32[$2>>2] = $1;
  break;
 }
 case 64:  {
  $3 = ((($exc)) + 476|0);
  HEAP32[$3>>2] = $GridPeriod;
  break;
 }
 case 128:  {
  $4 = $GridPeriod << 1;
  $5 = ((($exc)) + 476|0);
  HEAP32[$5>>2] = $4;
  break;
 }
 case 192:  {
  $6 = ((($exc)) + 476|0);
  HEAP32[$6>>2] = $GridPeriod;
  break;
 }
 default: {
 }
 }
 $7 = $selector & 48;
 switch ($7|0) {
 case 0:  {
  $8 = ((($exc)) + 480|0);
  HEAP32[$8>>2] = 0;
  break;
 }
 case 16:  {
  $9 = ((($exc)) + 476|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10|0) / 4)&-1;
  $12 = ((($exc)) + 480|0);
  HEAP32[$12>>2] = $11;
  break;
 }
 case 32:  {
  $13 = ((($exc)) + 476|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14|0) / 2)&-1;
  $16 = ((($exc)) + 480|0);
  HEAP32[$16>>2] = $15;
  break;
 }
 case 48:  {
  $17 = ((($exc)) + 476|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18*3)|0;
  $20 = (($19|0) / 4)&-1;
  $21 = ((($exc)) + 480|0);
  HEAP32[$21>>2] = $20;
  break;
 }
 default: {
 }
 }
 $22 = $selector & 15;
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = ((($exc)) + 476|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + -1)|0;
  $27 = ((($exc)) + 484|0);
  HEAP32[$27>>2] = $26;
 } else {
  $28 = (($22) + -4)|0;
  $29 = ((($exc)) + 476|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = Math_imul($30, $28)|0;
  $32 = (($31|0) / 8)&-1;
  $33 = ((($exc)) + 484|0);
  HEAP32[$33>>2] = $32;
 }
 $34 = ((($exc)) + 476|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35|0) / 256)&-1;
 HEAP32[$34>>2] = $36;
 $37 = ((($exc)) + 480|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38|0) / 256)&-1;
 HEAP32[$37>>2] = $39;
 $40 = ((($exc)) + 484|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41|0) / 256)&-1;
 HEAP32[$40>>2] = $42;
 return;
}
function _Round_Super($exc,$distance,$compensation) {
 $exc = $exc|0;
 $distance = $distance|0;
 $compensation = $compensation|0;
 var $$ = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($distance|0)>(-1);
 if ($0) {
  $1 = ((($exc)) + 480|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($exc)) + 484|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($compensation) + ($distance))|0;
  $6 = (($5) - ($2))|0;
  $7 = (($6) + ($4))|0;
  $8 = ((($exc)) + 476|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (0 - ($9))|0;
  $11 = $7 & $10;
  $12 = ($distance|0)!=(0);
  $13 = ($11|0)<(0);
  $or$cond = $12 & $13;
  $$2 = $or$cond ? 0 : $11;
  $14 = (($$2) + ($2))|0;
  $val$0 = $14;
  return ($val$0|0);
 } else {
  $15 = ((($exc)) + 484|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($exc)) + 480|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($compensation) - ($distance))|0;
  $20 = (($19) + ($16))|0;
  $21 = (($20) - ($18))|0;
  $22 = ((($exc)) + 476|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (0 - ($23))|0;
  $25 = $21 & $24;
  $26 = (0 - ($25))|0;
  $27 = ($26|0)>(0);
  $$ = $27 ? 0 : $26;
  $28 = (($$) - ($18))|0;
  $val$0 = $28;
  return ($val$0|0);
 }
 return (0)|0;
}
function _Round_Super_45($exc,$distance,$compensation) {
 $exc = $exc|0;
 $distance = $distance|0;
 $compensation = $compensation|0;
 var $$ = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($distance|0)>(-1);
 if ($0) {
  $1 = ((($exc)) + 480|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($exc)) + 484|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($compensation) + ($distance))|0;
  $6 = (($5) - ($2))|0;
  $7 = (($6) + ($4))|0;
  $8 = ((($exc)) + 476|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($7|0) % ($9|0))&-1;
  $11 = (($7) - ($10))|0;
  $12 = ($distance|0)!=(0);
  $13 = ($11|0)<(0);
  $or$cond = $12 & $13;
  $$2 = $or$cond ? 0 : $11;
  $14 = (($$2) + ($2))|0;
  $val$0 = $14;
  return ($val$0|0);
 } else {
  $15 = ((($exc)) + 484|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($exc)) + 480|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($compensation) - ($distance))|0;
  $20 = (($19) + ($16))|0;
  $21 = (($20) - ($18))|0;
  $22 = ((($exc)) + 476|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21|0) % ($23|0))&-1;
  $25 = (($24) - ($21))|0;
  $26 = ($25|0)>(0);
  $$ = $26 ? 0 : $25;
  $27 = (($$) - ($18))|0;
  $val$0 = $27;
  return ($val$0|0);
 }
 return (0)|0;
}
function _Round_Up_To_Grid($exc,$distance,$compensation) {
 $exc = $exc|0;
 $distance = $distance|0;
 $compensation = $compensation|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($distance|0)>(-1);
 if (!($0)) {
  $6 = (63 - ($distance))|0;
  $7 = (($6) + ($compensation))|0;
  $8 = $7 & -64;
  $9 = (0 - ($8))|0;
  $10 = ($9|0)>(0);
  $$ = $10 ? 0 : $9;
  $val$0 = $$;
  return ($val$0|0);
 }
 $1 = (($compensation) + ($distance))|0;
 $2 = ($distance|0)!=(0);
 $3 = ($1|0)>(-63);
 $or$cond = $2 & $3;
 if (!($or$cond)) {
  $val$0 = 0;
  return ($val$0|0);
 }
 $4 = (($1) + 63)|0;
 $5 = $4 & -64;
 $val$0 = $5;
 return ($val$0|0);
}
function _Round_Down_To_Grid($exc,$distance,$compensation) {
 $exc = $exc|0;
 $distance = $distance|0;
 $compensation = $compensation|0;
 var $$ = 0, $$2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($distance|0)>(-1);
 if ($0) {
  $1 = (($compensation) + ($distance))|0;
  $2 = ($distance|0)!=(0);
  $3 = ($1|0)>(0);
  $or$cond = $2 & $3;
  $4 = $1 & -64;
  $$2 = $or$cond ? $4 : 0;
  return ($$2|0);
 } else {
  $5 = (($compensation) - ($distance))|0;
  $6 = $5 & -64;
  $7 = (0 - ($6))|0;
  $8 = ($7|0)>(0);
  $$ = $8 ? 0 : $7;
  return ($$|0);
 }
 return (0)|0;
}
function _Ins_FLIPPT($exc) {
 $exc = $exc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($exc)) + 304|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 L1: do {
  if ($4) {
   $11 = ((($exc)) + 561|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(0);
   if (!($13)) {
    $14 = ((($exc)) + 12|0);
    HEAP32[$14>>2] = 129;
   }
  } else {
   $5 = ($3|0)>(0);
   if ($5) {
    $6 = ((($exc)) + 28|0);
    $7 = ((($exc)) + 24|0);
    $8 = ((($exc)) + 152|0);
    $9 = ((($exc)) + 168|0);
    $10 = ((($exc)) + 561|0);
    while(1) {
     $15 = HEAP32[$6>>2]|0;
     $16 = (($15) + -1)|0;
     HEAP32[$6>>2] = $16;
     $17 = HEAP32[$7>>2]|0;
     $18 = (($17) + ($16<<2)|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = $19 & 65535;
     $21 = HEAP16[$8>>1]|0;
     $22 = $21&65535;
     $23 = ($20>>>0)<($22>>>0);
     if ($23) {
      $27 = HEAP32[$9>>2]|0;
      $28 = (($27) + ($20)|0);
      $29 = HEAP8[$28>>0]|0;
      $30 = $29&255;
      $31 = $30 ^ 1;
      $32 = $31&255;
      HEAP8[$28>>0] = $32;
     } else {
      $24 = HEAP8[$10>>0]|0;
      $25 = ($24<<24>>24)==(0);
      if (!($25)) {
       break;
      }
     }
     $33 = HEAP32[$2>>2]|0;
     $34 = (($33) + -1)|0;
     HEAP32[$2>>2] = $34;
     $35 = ($33|0)>(1);
     if (!($35)) {
      break L1;
     }
    }
    $26 = ((($exc)) + 12|0);
    HEAP32[$26>>2] = 134;
    return;
   }
  }
 } while(0);
 HEAP32[$2>>2] = 1;
 $36 = ((($exc)) + 28|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($exc)) + 32|0);
 HEAP32[$38>>2] = $37;
 return;
}
function _Ins_FLIPRGON($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $I$02 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($args)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$args>>2]|0;
 $3 = $2&65535;
 $4 = $1 & 65535;
 $5 = ((($exc)) + 152|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ($4>>>0)<($7>>>0);
 $9 = $2 & 65535;
 $10 = ($9>>>0)<($7>>>0);
 $or$cond = $8 & $10;
 if (!($or$cond)) {
  $14 = ((($exc)) + 561|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   return;
  }
  $17 = ((($exc)) + 12|0);
  HEAP32[$17>>2] = 134;
  return;
 }
 $11 = $2 & 65535;
 $12 = ($11>>>0)>($4>>>0);
 if ($12) {
  return;
 }
 $13 = ((($exc)) + 168|0);
 $20 = $11;$I$02 = $3;
 while(1) {
  $18 = HEAP32[$13>>2]|0;
  $19 = (($18) + ($20)|0);
  $21 = HEAP8[$19>>0]|0;
  $22 = $21&255;
  $23 = $22 | 1;
  $24 = $23&255;
  HEAP8[$19>>0] = $24;
  $25 = (($I$02) + 1)<<16>>16;
  $26 = $25&65535;
  $27 = ($26>>>0)>($4>>>0);
  if ($27) {
   break;
  } else {
   $20 = $26;$I$02 = $25;
  }
 }
 return;
}
function _Ins_FLIPRGOFF($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $I$02 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($args)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$args>>2]|0;
 $3 = $2&65535;
 $4 = $1 & 65535;
 $5 = ((($exc)) + 152|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ($4>>>0)<($7>>>0);
 $9 = $2 & 65535;
 $10 = ($9>>>0)<($7>>>0);
 $or$cond = $8 & $10;
 if (!($or$cond)) {
  $14 = ((($exc)) + 561|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   return;
  }
  $17 = ((($exc)) + 12|0);
  HEAP32[$17>>2] = 134;
  return;
 }
 $11 = $2 & 65535;
 $12 = ($11>>>0)>($4>>>0);
 if ($12) {
  return;
 }
 $13 = ((($exc)) + 168|0);
 $20 = $11;$I$02 = $3;
 while(1) {
  $18 = HEAP32[$13>>2]|0;
  $19 = (($18) + ($20)|0);
  $21 = HEAP8[$19>>0]|0;
  $22 = $21&255;
  $23 = $22 & 254;
  $24 = $23&255;
  HEAP8[$19>>0] = $24;
  $25 = (($I$02) + 1)<<16>>16;
  $26 = $25&65535;
  $27 = ($26>>>0)>($4>>>0);
  if ($27) {
   break;
  } else {
   $20 = $26;$I$02 = $25;
  }
 }
 return;
}
function _Ins_SCANCTRL($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = $0 & 255;
 switch ($1|0) {
 case 255:  {
  $2 = ((($exc)) + 337|0);
  HEAP8[$2>>0] = 1;
  return;
  break;
 }
 case 0:  {
  $3 = ((($exc)) + 337|0);
  HEAP8[$3>>0] = 0;
  return;
  break;
 }
 default: {
  $4 = $0 & 256;
  $5 = ($4|0)==(0);
  if (!($5)) {
   $6 = ((($exc)) + 252|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = $7&65535;
   $9 = ($8>>>0)>($1>>>0);
   if (!($9)) {
    $10 = ((($exc)) + 337|0);
    HEAP8[$10>>0] = 1;
   }
  }
  $11 = HEAP32[$args>>2]|0;
  $12 = $11 & 512;
  $13 = ($12|0)==(0);
  if (!($13)) {
   $14 = ((($exc)) + 281|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(0);
   if (!($16)) {
    $17 = ((($exc)) + 337|0);
    HEAP8[$17>>0] = 1;
   }
  }
  $18 = HEAP32[$args>>2]|0;
  $19 = $18 & 1024;
  $20 = ($19|0)==(0);
  if (!($20)) {
   $21 = ((($exc)) + 282|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = ($22<<24>>24)==(0);
   if (!($23)) {
    $24 = ((($exc)) + 337|0);
    HEAP8[$24>>0] = 1;
   }
  }
  $25 = HEAP32[$args>>2]|0;
  $26 = $25 & 2048;
  $27 = ($26|0)==(0);
  if (!($27)) {
   $28 = ((($exc)) + 252|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = $29&65535;
   $31 = ($30>>>0)>($1>>>0);
   if ($31) {
    $32 = ((($exc)) + 337|0);
    HEAP8[$32>>0] = 0;
   }
  }
  $33 = HEAP32[$args>>2]|0;
  $34 = $33 & 4096;
  $35 = ($34|0)==(0);
  if (!($35)) {
   $36 = ((($exc)) + 281|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = ($37<<24>>24)==(0);
   if (!($38)) {
    $39 = ((($exc)) + 337|0);
    HEAP8[$39>>0] = 0;
   }
  }
  $40 = HEAP32[$args>>2]|0;
  $41 = $40 & 8192;
  $42 = ($41|0)==(0);
  if ($42) {
   return;
  }
  $43 = ((($exc)) + 282|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = ($44<<24>>24)==(0);
  if ($45) {
   return;
  }
  $46 = ((($exc)) + 337|0);
  HEAP8[$46>>0] = 0;
  return;
 }
 }
}
function _Ins_SDPVTL($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $$2 = 0, $$3 = 0, $$4 = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $A$1 = 0;
 var $B$0 = 0, $not$or$cond = 0, $not$or$cond$demorgan = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 368|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = HEAP32[$args>>2]|0;
 $3 = $2 & 65535;
 $4 = ((($exc)) + 80|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($3>>>0)<($6>>>0);
 if ($7) {
  $8 = ((($args)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & 65535;
  $11 = ((($exc)) + 116|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = ($10>>>0)<($13>>>0);
  if ($14) {
   $19 = ((($exc)) + 84|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($exc)) + 120|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + ($3<<3)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + ($10<<3)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = (($24) - ($26))|0;
   $28 = (((($20) + ($3<<3)|0)) + 4|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (((($22) + ($10<<3)|0)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($29) - ($31))|0;
   $33 = ($24|0)==($26|0);
   $34 = ($29|0)==($31|0);
   $or$cond = $33 & $34;
   $$2 = $or$cond ? 16384 : $27;
   $$op = $1 & 1;
   $35 = ($$op<<24>>24)!=(0);
   $not$or$cond$demorgan = $33 & $34;
   $not$or$cond = $not$or$cond$demorgan ^ 1;
   $36 = $35 & $not$or$cond;
   $37 = (0 - ($32))|0;
   $B$0 = $36 ? $$2 : $32;
   $A$1 = $36 ? $37 : $$2;
   $38 = ((($exc)) + 290|0);
   _Normalize($A$1,$B$0,$38);
   $39 = ((($exc)) + 88|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($exc)) + 124|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + ($3<<3)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($42) + ($10<<3)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($44) - ($46))|0;
   $48 = (((($40) + ($3<<3)|0)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (((($42) + ($10<<3)|0)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($49) - ($51))|0;
   $53 = (0 - ($52))|0;
   $$3 = $36 ? $47 : $52;
   $$4 = $36 ? $53 : $47;
   $54 = ((($exc)) + 294|0);
   _Normalize($$4,$$3,$54);
   _Compute_Funcs($exc);
   return;
  }
 }
 $15 = ((($exc)) + 561|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  return;
 }
 $18 = ((($exc)) + 12|0);
 HEAP32[$18>>2] = 134;
 return;
}
function _Ins_GETINFO($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $$ = 0, $$$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $K$0 = 0, $K$0$ = 0, $K$1 = 0, $K$1$ = 0, $K$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = $0 & 1;
 $2 = ($1|0)!=(0);
 $$ = $2 ? 35 : 0;
 $3 = $0 & 2;
 $4 = ($3|0)==(0);
 if ($4) {
  $K$0 = $$;
 } else {
  $5 = ((($exc)) + 281|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  $8 = $$ | 128;
  $$$ = $7 ? $$ : $8;
  $K$0 = $$$;
 }
 $9 = HEAP32[$args>>2]|0;
 $10 = $9 & 4;
 $11 = ($10|0)==(0);
 if ($11) {
  $K$1 = $K$0;
 } else {
  $12 = ((($exc)) + 282|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(0);
  $15 = $K$0 | 256;
  $K$0$ = $14 ? $K$0 : $15;
  $K$1 = $K$0$;
 }
 $16 = HEAP32[$args>>2]|0;
 $17 = $16 & 32;
 $18 = ($17|0)==(0);
 if ($18) {
  $K$2 = $K$1;
  HEAP32[$args>>2] = $K$2;
  return;
 }
 $19 = ((($exc)) + 604|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)==(0);
 $22 = $K$1 | 4096;
 $K$1$ = $21 ? $K$1 : $22;
 $K$2 = $K$1$;
 HEAP32[$args>>2] = $K$2;
 return;
}
function _Ins_IDEF($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $def$0$lcssa = 0, $def$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 416|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($exc)) + 408|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + (($3*20)|0)|0);
 $5 = ($3|0)>(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$args>>2]|0;
   $def$01 = $1;
   while(1) {
    $7 = ((($def$01)) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==($6|0);
    if ($9) {
     $def$0$lcssa = $def$01;
     break L1;
    }
    $10 = ((($def$01)) + 20|0);
    $11 = ($10>>>0)<($4>>>0);
    if ($11) {
     $def$01 = $10;
    } else {
     $def$0$lcssa = $10;
     break;
    }
   }
  } else {
   $def$0$lcssa = $1;
  }
 } while(0);
 $12 = ($def$0$lcssa|0)==($4|0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ((($exc)) + 412|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($13>>>0)<($15>>>0);
   if ($16) {
    $18 = (($13) + 1)|0;
    HEAP32[$2>>2] = $18;
    break;
   }
   $17 = ((($exc)) + 12|0);
   HEAP32[$17>>2] = 141;
   return;
  }
 } while(0);
 $19 = HEAP32[$args>>2]|0;
 $20 = ($19>>>0)>(255);
 if ($20) {
  $21 = ((($exc)) + 12|0);
  HEAP32[$21>>2] = 141;
  return;
 }
 $22 = $19 & 255;
 $23 = ((($def$0$lcssa)) + 12|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($exc)) + 360|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 1)|0;
 $27 = ((($def$0$lcssa)) + 4|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($exc)) + 352|0);
 $29 = HEAP32[$28>>2]|0;
 HEAP32[$def$0$lcssa>>2] = $29;
 $30 = ((($def$0$lcssa)) + 16|0);
 HEAP8[$30>>0] = 1;
 $31 = HEAP32[$args>>2]|0;
 $32 = ((($exc)) + 424|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($31>>>0)>($33>>>0);
 if ($34) {
  $35 = $31 & 255;
  HEAP32[$32>>2] = $35;
 }
 $36 = ((($exc)) + 368|0);
 L21: while(1) {
  $37 = (_SkipCode($exc)|0);
  $38 = ($37<<24>>24)==(0);
  if (!($38)) {
   label = 17;
   break;
  }
  $39 = HEAP8[$36>>0]|0;
  $40 = $39&255;
  switch ($40|0) {
  case 44: case 137:  {
   label = 16;
   break L21;
   break;
  }
  case 45:  {
   label = 17;
   break L21;
   break;
  }
  default: {
  }
  }
 }
 if ((label|0) == 16) {
  $41 = ((($exc)) + 12|0);
  HEAP32[$41>>2] = 137;
  return;
 }
 else if ((label|0) == 17) {
  return;
 }
}
function _Ins_ROLL($args) {
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($args)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($args)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$args>>2]|0;
 HEAP32[$0>>2] = $4;
 HEAP32[$2>>2] = $1;
 HEAP32[$args>>2] = $3;
 return;
}
function _Ins_SCANTYPE($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = ($0|0)>(-1);
 if (!($1)) {
  return;
 }
 $2 = ((($exc)) + 340|0);
 HEAP32[$2>>2] = $0;
 return;
}
function _Ins_INSTCTRL($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $$ = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($args)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $$off = (($1) + -1)|0;
 $2 = ($$off>>>0)>(1);
 if (!($2)) {
  $7 = HEAP32[$args>>2]|0;
  $8 = ($7|0)==(0);
  $$ = $8 ? 0 : $1;
  $9 = ((($exc)) + 336|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $1 ^ 255;
  $13 = $11 & $12;
  $14 = $13 | $$;
  $15 = $14&255;
  HEAP8[$9>>0] = $15;
  return;
 }
 $3 = ((($exc)) + 561|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  return;
 }
 $6 = ((($exc)) + 12|0);
 HEAP32[$6>>2] = 134;
 return;
}
function _Ins_MIRP($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $$ = 0, $$cvt_dist$2 = 0, $$distance$0 = 0, $$distance$02 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cvt_dist$0 = 0;
 var $cvt_dist$1 = 0, $cvt_dist$2 = 0, $cvt_dist$3 = 0, $distance$0 = 0, $distance$1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = $0&65535;
 $2 = ((($args)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = $0 & 65535;
 $6 = ((($exc)) + 72|0);
 $7 = ((($exc)) + 80|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = ($5>>>0)<($9>>>0);
 if ($10) {
  $11 = ((($exc)) + 380|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 1)|0;
  $14 = ($4>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($exc)) + 284|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = ((($exc)) + 44|0);
   $18 = HEAP16[$17>>1]|0;
   $19 = ($16&65535)<($18&65535);
   if ($19) {
    $24 = ($4|0)==(0);
    if ($24) {
     $cvt_dist$0 = 0;
    } else {
     $25 = ((($exc)) + 592|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = (FUNCTION_TABLE_iii[$26 & 255]($exc,$3)|0);
     $cvt_dist$0 = $27;
    }
    $28 = ((($exc)) + 328|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($cvt_dist$0) - ($29))|0;
    $31 = ($30|0)<(0);
    $32 = (0 - ($30))|0;
    $33 = $31 ? $32 : $30;
    $34 = ((($exc)) + 324|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($33|0)<($35|0);
    if ($36) {
     $37 = ($cvt_dist$0|0)>(-1);
     $38 = (0 - ($29))|0;
     $$ = $37 ? $29 : $38;
     $cvt_dist$1 = $$;
    } else {
     $cvt_dist$1 = $cvt_dist$0;
    }
    $39 = ((($exc)) + 346|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = ($40<<16>>16)==(0);
    if ($41) {
     $42 = HEAP16[$15>>1]|0;
     $43 = $42&65535;
     $44 = ((($exc)) + 48|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (($45) + ($43<<3)|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ((($exc)) + 298|0);
     $49 = HEAP16[$48>>1]|0;
     $50 = $49 << 16 >> 16;
     $51 = (_TT_MulFix14($cvt_dist$1,$50)|0);
     $52 = (($51) + ($47))|0;
     $53 = ((($exc)) + 84|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($54) + ($5<<3)|0);
     HEAP32[$55>>2] = $52;
     $56 = HEAP16[$15>>1]|0;
     $57 = $56&65535;
     $58 = HEAP32[$44>>2]|0;
     $59 = (((($58) + ($57<<3)|0)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ((($exc)) + 300|0);
     $62 = HEAP16[$61>>1]|0;
     $63 = $62 << 16 >> 16;
     $64 = (_TT_MulFix14($cvt_dist$1,$63)|0);
     $65 = (($64) + ($60))|0;
     $66 = HEAP32[$53>>2]|0;
     $67 = (((($66) + ($5<<3)|0)) + 4|0);
     HEAP32[$67>>2] = $65;
     $68 = ((($exc)) + 88|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (($69) + ($5<<3)|0);
     $71 = HEAP32[$53>>2]|0;
     $72 = (($71) + ($5<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = $70;
     $80 = $79;
     HEAP32[$80>>2] = $75;
     $81 = (($79) + 4)|0;
     $82 = $81;
     HEAP32[$82>>2] = $78;
    }
    $83 = ((($exc)) + 576|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ((($exc)) + 84|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($5<<3)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = HEAP16[$15>>1]|0;
    $90 = $89&65535;
    $91 = ((($exc)) + 48|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + ($90<<3)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($88) - ($94))|0;
    $96 = (((($86) + ($5<<3)|0)) + 4|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (((($92) + ($90<<3)|0)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (($97) - ($99))|0;
    $101 = (FUNCTION_TABLE_iiii[$84 & 127]($exc,$95,$100)|0);
    $102 = ((($exc)) + 572|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ((($exc)) + 88|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) + ($5<<3)|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = HEAP16[$15>>1]|0;
    $109 = $108&65535;
    $110 = ((($exc)) + 52|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + ($109<<3)|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($107) - ($113))|0;
    $115 = (((($105) + ($5<<3)|0)) + 4|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (((($111) + ($109<<3)|0)) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($116) - ($118))|0;
    $120 = (FUNCTION_TABLE_iiii[$103 & 127]($exc,$114,$119)|0);
    $121 = ((($exc)) + 316|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = ($122<<24>>24)!=(0);
    $124 = $101 ^ $cvt_dist$1;
    $125 = ($124|0)<(0);
    $or$cond = $125 & $123;
    $126 = (0 - ($cvt_dist$1))|0;
    $cvt_dist$2 = $or$cond ? $126 : $cvt_dist$1;
    $127 = ((($exc)) + 368|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = $129 & 4;
    $131 = ($130|0)==(0);
    if ($131) {
     $151 = $129 & 3;
     $152 = (((($exc)) + 264|0) + ($151<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = (_Round_None($exc,$cvt_dist$2,$153)|0);
     $distance$0 = $154;
    } else {
     $132 = ((($exc)) + 344|0);
     $133 = HEAP16[$132>>1]|0;
     $134 = HEAP16[$39>>1]|0;
     $135 = ($133<<16>>16)==($134<<16>>16);
     if ($135) {
      $136 = (($cvt_dist$2) - ($101))|0;
      $137 = ($136|0)<(0);
      $138 = (0 - ($136))|0;
      $139 = $137 ? $138 : $136;
      $140 = ((($exc)) + 320|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($139|0)>($141|0);
      $$cvt_dist$2 = $142 ? $101 : $cvt_dist$2;
      $cvt_dist$3 = $$cvt_dist$2;
     } else {
      $cvt_dist$3 = $cvt_dist$2;
     }
     $143 = ((($exc)) + 568|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = HEAP8[$127>>0]|0;
     $146 = $145&255;
     $147 = $146 & 3;
     $148 = (((($exc)) + 264|0) + ($147<<2)|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = (FUNCTION_TABLE_iiii[$144 & 127]($exc,$cvt_dist$3,$149)|0);
     $distance$0 = $150;
    }
    $155 = HEAP8[$127>>0]|0;
    $156 = $155 & 8;
    $157 = ($156<<24>>24)==(0);
    do {
     if ($157) {
      $distance$1 = $distance$0;
     } else {
      $158 = ($101|0)>(-1);
      $159 = ((($exc)) + 308|0);
      $160 = HEAP32[$159>>2]|0;
      if ($158) {
       $161 = ($distance$0|0)<($160|0);
       $$distance$0 = $161 ? $160 : $distance$0;
       $distance$1 = $$distance$0;
       break;
      } else {
       $162 = (0 - ($160))|0;
       $163 = ($distance$0|0)>($162|0);
       $$distance$02 = $163 ? $162 : $distance$0;
       $distance$1 = $$distance$02;
       break;
      }
     }
    } while(0);
    $164 = ((($exc)) + 584|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = (($distance$1) - ($120))|0;
    FUNCTION_TABLE_viiii[$165 & 15]($exc,$6,$1,$166);
   } else {
    label = 4;
   }
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $20 = ((($exc)) + 561|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if (!($22)) {
   $23 = ((($exc)) + 12|0);
   HEAP32[$23>>2] = 134;
  }
 }
 $167 = ((($exc)) + 284|0);
 $168 = HEAP16[$167>>1]|0;
 $169 = ((($exc)) + 286|0);
 HEAP16[$169>>1] = $168;
 $170 = ((($exc)) + 368|0);
 $171 = HEAP8[$170>>0]|0;
 $172 = $171 & 16;
 $173 = ($172<<24>>24)==(0);
 if ($173) {
  $174 = ((($exc)) + 288|0);
  HEAP16[$174>>1] = $1;
  return;
 }
 HEAP16[$167>>1] = $1;
 $174 = ((($exc)) + 288|0);
 HEAP16[$174>>1] = $1;
 return;
}
function _Ins_MDRP($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $$ = 0, $$distance$0 = 0, $$distance$01 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $distance$0 = 0, $distance$1 = 0, $org_dist$0 = 0, $org_dist$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$args>>2]|0;
 $1 = $0&65535;
 $2 = $0 & 65535;
 $3 = ((($exc)) + 72|0);
 $4 = ((($exc)) + 80|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($2>>>0)<($6>>>0);
 if ($7) {
  $8 = ((($exc)) + 284|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $11 = ((($exc)) + 44|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ($9&65535)<($12&65535);
  if ($13) {
   $18 = ((($exc)) + 344|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = ($19<<16>>16)==(0);
   do {
    if ($20) {
     label = 7;
    } else {
     $21 = ((($exc)) + 346|0);
     $22 = HEAP16[$21>>1]|0;
     $23 = ($22<<16>>16)==(0);
     if ($23) {
      label = 7;
     } else {
      $43 = ((($exc)) + 92|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = (($44) + ($2<<3)|0);
      $46 = ((($exc)) + 56|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = (($47) + ($10<<3)|0);
      $49 = ((($exc)) + 220|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ((($exc)) + 224|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = ($50|0)==($52|0);
      if ($53) {
       $54 = ((($exc)) + 576|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = HEAP32[$45>>2]|0;
       $57 = HEAP32[$48>>2]|0;
       $58 = (($56) - ($57))|0;
       $59 = (((($44) + ($2<<3)|0)) + 4|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = (((($47) + ($10<<3)|0)) + 4|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (($60) - ($62))|0;
       $64 = (FUNCTION_TABLE_iiii[$55 & 127]($exc,$58,$63)|0);
       $65 = HEAP32[$49>>2]|0;
       $66 = (_FT_MulFix($64,$65)|0);
       $org_dist$0 = $66;
       break;
      } else {
       $67 = HEAP32[$45>>2]|0;
       $68 = HEAP32[$48>>2]|0;
       $69 = (($67) - ($68))|0;
       $70 = (_FT_MulFix($69,$50)|0);
       $71 = (((($44) + ($2<<3)|0)) + 4|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = (((($47) + ($10<<3)|0)) + 4|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (($72) - ($74))|0;
       $76 = HEAP32[$51>>2]|0;
       $77 = (_FT_MulFix($75,$76)|0);
       $78 = ((($exc)) + 576|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = (FUNCTION_TABLE_iiii[$79 & 127]($exc,$70,$77)|0);
       $org_dist$0 = $80;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 7) {
    $24 = ((($exc)) + 84|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP16[$8>>1]|0;
    $27 = $26&65535;
    $28 = ((($exc)) + 48|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($exc)) + 576|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($25) + ($2<<3)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($29) + ($27<<3)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($33) - ($35))|0;
    $37 = (((($25) + ($2<<3)|0)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (((($29) + ($27<<3)|0)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($38) - ($40))|0;
    $42 = (FUNCTION_TABLE_iiii[$31 & 127]($exc,$36,$41)|0);
    $org_dist$0 = $42;
   }
   $81 = ((($exc)) + 328|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($org_dist$0) - ($82))|0;
   $84 = ($83|0)<(0);
   $85 = (0 - ($83))|0;
   $86 = $84 ? $85 : $83;
   $87 = ((($exc)) + 324|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($86|0)<($88|0);
   if ($89) {
    $90 = ($org_dist$0|0)>(-1);
    $91 = (0 - ($82))|0;
    $$ = $90 ? $82 : $91;
    $org_dist$1 = $$;
   } else {
    $org_dist$1 = $org_dist$0;
   }
   $92 = ((($exc)) + 368|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = $94 & 4;
   $96 = ($95|0)==(0);
   if ($96) {
    $103 = $94 & 3;
    $104 = (((($exc)) + 264|0) + ($103<<2)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (_Round_None($exc,$org_dist$1,$105)|0);
    $distance$0 = $106;
   } else {
    $97 = ((($exc)) + 568|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $94 & 3;
    $100 = (((($exc)) + 264|0) + ($99<<2)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (FUNCTION_TABLE_iiii[$98 & 127]($exc,$org_dist$1,$101)|0);
    $distance$0 = $102;
   }
   $107 = HEAP8[$92>>0]|0;
   $108 = $107 & 8;
   $109 = ($108<<24>>24)==(0);
   do {
    if ($109) {
     $distance$1 = $distance$0;
    } else {
     $110 = ($org_dist$1|0)>(-1);
     $111 = ((($exc)) + 308|0);
     $112 = HEAP32[$111>>2]|0;
     if ($110) {
      $113 = ($distance$0|0)<($112|0);
      $$distance$0 = $113 ? $112 : $distance$0;
      $distance$1 = $$distance$0;
      break;
     } else {
      $114 = (0 - ($112))|0;
      $115 = ($distance$0|0)>($114|0);
      $$distance$01 = $115 ? $114 : $distance$0;
      $distance$1 = $$distance$01;
      break;
     }
    }
   } while(0);
   $116 = ((($exc)) + 572|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((($exc)) + 88|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) + ($2<<3)|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = ((($exc)) + 52|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = HEAP16[$8>>1]|0;
   $125 = $124&65535;
   $126 = (($123) + ($125<<3)|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($121) - ($127))|0;
   $129 = (((($119) + ($2<<3)|0)) + 4|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (((($123) + ($125<<3)|0)) + 4|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (($130) - ($132))|0;
   $134 = (FUNCTION_TABLE_iiii[$117 & 127]($exc,$128,$133)|0);
   $135 = ((($exc)) + 584|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($distance$1) - ($134))|0;
   FUNCTION_TABLE_viiii[$136 & 15]($exc,$3,$1,$137);
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $14 = ((($exc)) + 561|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if (!($16)) {
   $17 = ((($exc)) + 12|0);
   HEAP32[$17>>2] = 134;
  }
 }
 $138 = ((($exc)) + 284|0);
 $139 = HEAP16[$138>>1]|0;
 $140 = ((($exc)) + 286|0);
 HEAP16[$140>>1] = $139;
 $141 = ((($exc)) + 288|0);
 HEAP16[$141>>1] = $1;
 $142 = ((($exc)) + 368|0);
 $143 = HEAP8[$142>>0]|0;
 $144 = $143 & 16;
 $145 = ($144<<24>>24)==(0);
 if ($145) {
  return;
 }
 HEAP16[$138>>1] = $1;
 return;
}
function _Ins_PUSHW($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $K$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 368|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + 65353)|0;
 $4 = $3 & 65535;
 $5 = ((($exc)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = ((($exc)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 $11 = ($4>>>0)<($10>>>0);
 if (!($11)) {
  $12 = ((($exc)) + 12|0);
  HEAP32[$12>>2] = 130;
  return;
 }
 $13 = ((($exc)) + 360|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 HEAP32[$13>>2] = $15;
 $16 = ($4|0)==(0);
 if (!($16)) {
  $20 = 0;$K$01 = 0;
  while(1) {
   $17 = (_GetShortIns($exc)|0);
   $18 = $17 << 16 >> 16;
   $19 = (($args) + ($20<<2)|0);
   HEAP32[$19>>2] = $18;
   $21 = (($K$01) + 1)<<16>>16;
   $22 = $21&65535;
   $23 = ($22>>>0)<($4>>>0);
   if ($23) {
    $20 = $22;$K$01 = $21;
   } else {
    break;
   }
  }
 }
 $24 = ((($exc)) + 376|0);
 HEAP8[$24>>0] = 0;
 return;
}
function _Ins_PUSHB($exc,$args) {
 $exc = $exc|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $K$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 368|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + 65361)|0;
 $4 = $3 & 65535;
 $5 = ((($exc)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = ((($exc)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 $11 = ($4>>>0)<($10>>>0);
 if (!($11)) {
  $15 = ((($exc)) + 12|0);
  HEAP32[$15>>2] = 130;
  return;
 }
 $12 = ($4|0)==(0);
 if ($12) {
  return;
 }
 $13 = ((($exc)) + 360|0);
 $14 = ((($exc)) + 356|0);
 $18 = 1;$K$01 = 1;
 while(1) {
  $16 = HEAP32[$13>>2]|0;
  $17 = (($16) + ($18))|0;
  $19 = HEAP32[$14>>2]|0;
  $20 = (($19) + ($17)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = (($18) + -1)|0;
  $24 = (($args) + ($23<<2)|0);
  HEAP32[$24>>2] = $22;
  $25 = (($K$01) + 1)<<16>>16;
  $26 = $25&65535;
  $27 = ($26>>>0)>($4>>>0);
  if ($27) {
   break;
  } else {
   $18 = $26;$K$01 = $25;
  }
 }
 return;
}
function _Ins_Goto_CodeRange($exc,$aRange,$aIP) {
 $exc = $exc|0;
 $aRange = $aRange|0;
 $aIP = $aIP|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aRange$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $aRange$off = (($aRange) + -1)|0;
 $0 = ($aRange$off>>>0)>(2);
 if ($0) {
  $1 = ((($exc)) + 12|0);
  HEAP32[$1>>2] = 132;
  $$0 = 1;
  return ($$0|0);
 }
 $2 = (($aRange) + -1)|0;
 $3 = (((($exc)) + 444|0) + ($2<<3)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = ((($exc)) + 12|0);
  HEAP32[$6>>2] = 138;
  $$0 = 1;
  return ($$0|0);
 }
 $7 = (((((($exc)) + 444|0) + ($2<<3)|0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)<($aIP>>>0);
 if ($9) {
  $10 = ((($exc)) + 12|0);
  HEAP32[$10>>2] = 131;
  $$0 = 1;
  return ($$0|0);
 } else {
  $11 = ((($exc)) + 356|0);
  HEAP32[$11>>2] = $4;
  $12 = HEAP32[$7>>2]|0;
  $13 = ((($exc)) + 364|0);
  HEAP32[$13>>2] = $12;
  $14 = ((($exc)) + 360|0);
  HEAP32[$14>>2] = $aIP;
  $15 = ((($exc)) + 352|0);
  HEAP32[$15>>2] = $aRange;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _GetShortIns($exc) {
 $exc = $exc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 360|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 2)|0;
 HEAP32[$0>>2] = $2;
 $3 = ((($exc)) + 356|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 8;
 $9 = (($1) + 1)|0;
 $10 = (($4) + ($9)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $8 | $12;
 $14 = $13&65535;
 return ($14|0);
}
function _TT_MulFix14($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$01 = 0, $$a = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $b ^ $a;
 $1 = ($a|0)<(0);
 $2 = (0 - ($a))|0;
 $$a = $1 ? $2 : $a;
 $3 = ($b|0)<(0);
 $4 = (0 - ($b))|0;
 $$01 = $3 ? $4 : $b;
 $5 = $$a >>> 16;
 $6 = $$a & 65535;
 $7 = Math_imul($6, $$01)|0;
 $8 = Math_imul($5, $$01)|0;
 $9 = $8 >>> 16;
 $10 = $8 << 16;
 $11 = $10 | 8192;
 $12 = (($11) + ($7))|0;
 $13 = ($12>>>0)<($11>>>0);
 $14 = $13&1;
 $$ = (($14) + ($9))|0;
 $15 = $12 >>> 14;
 $16 = $$ << 18;
 $17 = $16 | $15;
 $18 = ($0|0)>(-1);
 $19 = (0 - ($17))|0;
 $20 = $18 ? $17 : $19;
 return ($20|0);
}
function _SkipCode($exc) {
 $exc = $exc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 372|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($exc)) + 360|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 HEAP32[$2>>2] = $4;
 $5 = ((($exc)) + 364|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 do {
  if ($7) {
   $8 = ((($exc)) + 356|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + ($4)|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ((($exc)) + 368|0);
   HEAP8[$12>>0] = $11;
   $13 = $11&255;
   $14 = (88100 + ($13)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 << 24 >> 24;
   HEAP32[$0>>2] = $16;
   $17 = $13 & 254;
   $18 = ($17|0)==(64);
   if ($18) {
    $19 = HEAP32[$2>>2]|0;
    $20 = (($19) + 1)|0;
    $21 = HEAP32[$5>>2]|0;
    $22 = ($20|0)<($21|0);
    if (!($22)) {
     break;
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = (($23) + ($20)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = Math_imul($26, $16)|0;
    $28 = (2 - ($27))|0;
    HEAP32[$0>>2] = $28;
   }
   $29 = HEAP32[$2>>2]|0;
   $30 = HEAP32[$0>>2]|0;
   $31 = (($30) + ($29))|0;
   $32 = HEAP32[$5>>2]|0;
   $33 = ($31|0)>($32|0);
   if (!($33)) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 } while(0);
 $34 = ((($exc)) + 12|0);
 HEAP32[$34>>2] = 131;
 $$0 = 1;
 return ($$0|0);
}
function _Current_Ratio($exc) {
 $exc = $exc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 244|0);
 $1 = ((($exc)) + 256|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $22 = HEAP32[$1>>2]|0;
  return ($22|0);
 }
 $4 = ((($exc)) + 296|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5<<16>>16)==(0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  HEAP32[$1>>2] = $7;
  $22 = HEAP32[$1>>2]|0;
  return ($22|0);
 }
 $8 = ((($exc)) + 294|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ($9<<16>>16)==(0);
 if ($10) {
  $11 = ((($exc)) + 248|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$1>>2] = $12;
  $22 = HEAP32[$1>>2]|0;
  return ($22|0);
 } else {
  $13 = $9 << 16 >> 16;
  $14 = HEAP32[$0>>2]|0;
  $15 = (_FT_MulDiv($13,$14,16384)|0);
  $16 = HEAP16[$4>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = ((($exc)) + 248|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_FT_MulDiv($17,$19,16384)|0);
  $21 = (_TT_VecLen($15,$20)|0);
  HEAP32[$1>>2] = $21;
  $22 = HEAP32[$1>>2]|0;
  return ($22|0);
 }
 return (0)|0;
}
function _TT_VecLen($X,$Y) {
 $X = $X|0;
 $Y = $Y|0;
 var $0 = 0, $1 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $v = sp;
 HEAP32[$v>>2] = $X;
 $0 = ((($v)) + 4|0);
 HEAP32[$0>>2] = $Y;
 $1 = (_FT_Vector_Length($v)|0);
 STACKTOP = sp;return ($1|0);
}
function _Move_Zp2_Point($exc,$point,$dx,$dy,$touch) {
 $exc = $exc|0;
 $point = $point|0;
 $dx = $dx|0;
 $dy = $dy|0;
 $touch = $touch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 298|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if (!($2)) {
  $3 = $point&65535;
  $4 = ((($exc)) + 124|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($3<<3)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($dx))|0;
  HEAP32[$6>>2] = $8;
  $9 = ($touch<<24>>24)==(0);
  if (!($9)) {
   $10 = ((($exc)) + 132|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + ($3)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = $14 | 8;
   $16 = $15&255;
   HEAP8[$12>>0] = $16;
  }
 }
 $17 = ((($exc)) + 300|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = ($18<<16>>16)==(0);
 if ($19) {
  return;
 }
 $20 = $point&65535;
 $21 = ((($exc)) + 124|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (((($22) + ($20<<3)|0)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($dy))|0;
 HEAP32[$23>>2] = $25;
 $26 = ($touch<<24>>24)==(0);
 if ($26) {
  return;
 }
 $27 = ((($exc)) + 132|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($20)|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $31 | 16;
 $33 = $32&255;
 HEAP8[$29>>0] = $33;
 return;
}
function _Compute_Point_Displacement($exc,$x,$y,$zone,$refp) {
 $exc = $exc|0;
 $x = $x|0;
 $y = $y|0;
 $zone = $zone|0;
 $refp = $refp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $9 = 0, $p$0 = 0, $p$0$in = 0, $zp$sroa$10 = 0, $zp$sroa$5$0 = 0, $zp$sroa$6$0 = 0, $zp$sroa$61$0 = 0, $zp$sroa$8$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $zp$sroa$10 = sp;
 $0 = ((($exc)) + 368|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $21 = ((($exc)) + 72|0);
  $22 = $21;
  $23 = $22;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + 4)|0;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($exc)) + 80|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = ((($exc)) + 82|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = ((($exc)) + 84|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($exc)) + 88|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($exc)) + 92|0);
  ;HEAP32[$zp$sroa$10>>2]=HEAP32[$36>>2]|0;HEAP32[$zp$sroa$10+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$zp$sroa$10+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$zp$sroa$10+12>>2]=HEAP32[$36+12>>2]|0;
  $37 = ((($exc)) + 288|0);
  $46 = $24;$49 = $27;$p$0$in = $37;$zp$sroa$5$0 = $29;$zp$sroa$6$0 = $31;$zp$sroa$61$0 = $33;$zp$sroa$8$0 = $35;
 } else {
  $4 = ((($exc)) + 36|0);
  $5 = $4;
  $6 = $5;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($5) + 4)|0;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($exc)) + 44|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ((($exc)) + 46|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = ((($exc)) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($exc)) + 52|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($exc)) + 56|0);
  ;HEAP32[$zp$sroa$10>>2]=HEAP32[$19>>2]|0;HEAP32[$zp$sroa$10+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$zp$sroa$10+8>>2]=HEAP32[$19+8>>2]|0;HEAP32[$zp$sroa$10+12>>2]=HEAP32[$19+12>>2]|0;
  $20 = ((($exc)) + 286|0);
  $46 = $7;$49 = $10;$p$0$in = $20;$zp$sroa$5$0 = $12;$zp$sroa$6$0 = $14;$zp$sroa$61$0 = $16;$zp$sroa$8$0 = $18;
 }
 $p$0 = HEAP16[$p$0$in>>1]|0;
 $38 = $p$0&65535;
 $39 = ($p$0&65535)<($zp$sroa$5$0&65535);
 if ($39) {
  $44 = $zone;
  $45 = $44;
  HEAP32[$45>>2] = $46;
  $47 = (($44) + 4)|0;
  $48 = $47;
  HEAP32[$48>>2] = $49;
  $50 = ((($zone)) + 8|0);
  HEAP16[$50>>1] = $zp$sroa$5$0;
  $51 = ((($zone)) + 10|0);
  HEAP16[$51>>1] = $zp$sroa$6$0;
  $52 = ((($zone)) + 12|0);
  HEAP32[$52>>2] = $zp$sroa$61$0;
  $53 = ((($zone)) + 16|0);
  HEAP32[$53>>2] = $zp$sroa$8$0;
  $54 = ((($zone)) + 20|0);
  ;HEAP32[$54>>2]=HEAP32[$zp$sroa$10>>2]|0;HEAP32[$54+4>>2]=HEAP32[$zp$sroa$10+4>>2]|0;HEAP32[$54+8>>2]=HEAP32[$zp$sroa$10+8>>2]|0;HEAP32[$54+12>>2]=HEAP32[$zp$sroa$10+12>>2]|0;
  HEAP16[$refp>>1] = $p$0;
  $55 = ((($exc)) + 572|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($zp$sroa$8$0) + ($38<<3)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($zp$sroa$61$0) + ($38<<3)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) - ($60))|0;
  $62 = (((($zp$sroa$8$0) + ($38<<3)|0)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (((($zp$sroa$61$0) + ($38<<3)|0)) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($63) - ($65))|0;
  $67 = (FUNCTION_TABLE_iiii[$56 & 127]($exc,$61,$66)|0);
  $68 = ((($exc)) + 298|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = $69 << 16 >> 16;
  $71 = $70 << 16;
  $72 = ((($exc)) + 564|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (_FT_MulDiv($67,$71,$73)|0);
  HEAP32[$x>>2] = $74;
  $75 = ((($exc)) + 300|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76 << 16 >> 16;
  $78 = $77 << 16;
  $79 = HEAP32[$72>>2]|0;
  $80 = (_FT_MulDiv($67,$78,$79)|0);
  HEAP32[$y>>2] = $80;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $40 = ((($exc)) + 561|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = ($41<<24>>24)==(0);
 if (!($42)) {
  $43 = ((($exc)) + 12|0);
  HEAP32[$43>>2] = 134;
 }
 HEAP16[$refp>>1] = 0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __iup_worker_interpolate($worker,$p1,$p2,$ref1,$ref2) {
 $worker = $worker|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $ref1 = $ref1|0;
 $ref2 = $ref2|0;
 var $$ = 0, $$2 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$06 = 0;
 var $i$17 = 0, $or$cond = 0, $ref1$ref2 = 0, $ref2$ref1 = 0, $scale$08 = 0, $scale$1 = 0, $scale$2 = 0, $scale_valid$09 = 0, $scale_valid$1 = 0, $scale_valid$2 = 0, $x$0 = 0, $x1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p1>>>0)>($p2>>>0);
 if ($0) {
  return;
 }
 $1 = ((($worker)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)>($ref1>>>0);
 $4 = ($2>>>0)>($ref2>>>0);
 $or$cond = $3 & $4;
 if (!($or$cond)) {
  return;
 }
 $5 = ((($worker)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($ref1<<3)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + ($ref2<<3)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)>($10|0);
 $$ = $11 ? $8 : $10;
 $$2 = $11 ? $10 : $8;
 $ref1$ref2 = $11 ? $ref1 : $ref2;
 $ref2$ref1 = $11 ? $ref2 : $ref1;
 $12 = HEAP32[$worker>>2]|0;
 $13 = (($12) + ($ref2$ref1<<3)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) + ($ref1$ref2<<3)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($worker)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($ref2$ref1<<3)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) - ($14))|0;
 $22 = (($18) + ($ref1$ref2<<3)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) - ($16))|0;
 $25 = ($$|0)==($$2|0);
 $26 = ($p1>>>0)>($p2>>>0);
 if ($25) {
  if ($26) {
   return;
  }
  $29 = HEAP32[$worker>>2]|0;
  $30 = HEAP32[$17>>2]|0;
  $i$06 = $p1;
  while(1) {
   $31 = (($29) + ($i$06<<3)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)>($14|0);
   $$3 = $33 ? $24 : $21;
   $x$0 = (($$3) + ($32))|0;
   $34 = (($30) + ($i$06<<3)|0);
   HEAP32[$34>>2] = $x$0;
   $35 = (($i$06) + 1)|0;
   $36 = ($35>>>0)>($p2>>>0);
   if ($36) {
    break;
   } else {
    $i$06 = $35;
   }
  }
  return;
 }
 if ($26) {
  return;
 }
 $27 = (($23) - ($20))|0;
 $28 = (($$) - ($$2))|0;
 $i$17 = $p1;$scale$08 = 0;$scale_valid$09 = 0;
 while(1) {
  $37 = HEAP32[$worker>>2]|0;
  $38 = (($37) + ($i$17<<3)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)>($14|0);
  do {
   if ($40) {
    $42 = ($39|0)<($16|0);
    if (!($42)) {
     $43 = (($39) + ($24))|0;
     $scale$2 = $scale$08;$scale_valid$2 = $scale_valid$09;$x1$0 = $43;
     break;
    }
    $44 = ($scale_valid$09<<24>>24)==(0);
    if ($44) {
     $45 = (_FT_MulDiv($27,65536,$28)|0);
     $scale$1 = $45;$scale_valid$1 = 1;
    } else {
     $scale$1 = $scale$08;$scale_valid$1 = $scale_valid$09;
    }
    $46 = HEAP32[$5>>2]|0;
    $47 = (($46) + ($i$17<<3)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) - ($$2))|0;
    $50 = (_FT_MulFix($49,$scale$1)|0);
    $51 = (($50) + ($20))|0;
    $scale$2 = $scale$1;$scale_valid$2 = $scale_valid$1;$x1$0 = $51;
   } else {
    $41 = (($39) + ($21))|0;
    $scale$2 = $scale$08;$scale_valid$2 = $scale_valid$09;$x1$0 = $41;
   }
  } while(0);
  $52 = HEAP32[$17>>2]|0;
  $53 = (($52) + ($i$17<<3)|0);
  HEAP32[$53>>2] = $x1$0;
  $54 = (($i$17) + 1)|0;
  $55 = ($54>>>0)>($p2>>>0);
  if ($55) {
   break;
  } else {
   $i$17 = $54;$scale$08 = $scale$2;$scale_valid$09 = $scale_valid$2;
  }
 }
 return;
}
function __iup_worker_shift($worker,$p1,$p2,$p) {
 $worker = $worker|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $i$04 = 0, $i$1 = 0, $i$12 = 0, $i$13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($worker)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($p<<3)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$worker>>2]|0;
 $5 = (($4) + ($p<<3)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($3) - ($6))|0;
 $8 = ($3|0)==($6|0);
 if ($8) {
  return;
 }
 $9 = ($p1>>>0)<($p>>>0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  $i$04 = $p1;
  while(1) {
   $13 = (($10) + ($i$04<<3)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($7))|0;
   HEAP32[$13>>2] = $15;
   $16 = (($i$04) + 1)|0;
   $exitcond = ($16|0)==($p|0);
   if ($exitcond) {
    break;
   } else {
    $i$04 = $16;
   }
  }
 }
 $i$12 = (($p) + 1)|0;
 $11 = ($i$12>>>0)>($p2>>>0);
 if ($11) {
  return;
 }
 $12 = HEAP32[$0>>2]|0;
 $i$13 = $i$12;
 while(1) {
  $17 = (($12) + ($i$13<<3)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + ($7))|0;
  HEAP32[$17>>2] = $19;
  $i$1 = (($i$13) + 1)|0;
  $20 = ($i$1>>>0)>($p2>>>0);
  if ($20) {
   break;
  } else {
   $i$13 = $i$1;
  }
 }
 return;
}
function _Project_x($exc,$dx,$dy) {
 $exc = $exc|0;
 $dx = $dx|0;
 $dy = $dy|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($dx|0);
}
function _Project_y($exc,$dx,$dy) {
 $exc = $exc|0;
 $dx = $dx|0;
 $dy = $dy|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($dy|0);
}
function _Project($exc,$dx,$dy) {
 $exc = $exc|0;
 $dx = $dx|0;
 $dy = $dy|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 294|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ((($exc)) + 296|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = (_TT_DotFix14($dx,$dy,$2,$5)|0);
 return ($6|0);
}
function _Dual_Project($exc,$dx,$dy) {
 $exc = $exc|0;
 $dx = $dx|0;
 $dy = $dy|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 290|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ((($exc)) + 292|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = (_TT_DotFix14($dx,$dy,$2,$5)|0);
 return ($6|0);
}
function _Direct_Move($exc,$zone,$point,$distance) {
 $exc = $exc|0;
 $zone = $zone|0;
 $point = $point|0;
 $distance = $distance|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 298|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if (!($2)) {
  $3 = $1 << 16 >> 16;
  $4 = $3 << 16;
  $5 = ((($exc)) + 564|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_FT_MulDiv($distance,$4,$6)|0);
  $8 = $point&65535;
  $9 = ((($zone)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($8<<3)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($7))|0;
  HEAP32[$11>>2] = $13;
  $14 = ((($zone)) + 24|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($8)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 | 8;
  $20 = $19&255;
  HEAP8[$16>>0] = $20;
 }
 $21 = ((($exc)) + 300|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ($22<<16>>16)==(0);
 if ($23) {
  return;
 }
 $24 = $22 << 16 >> 16;
 $25 = $24 << 16;
 $26 = ((($exc)) + 564|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_FT_MulDiv($distance,$25,$27)|0);
 $29 = $point&65535;
 $30 = ((($zone)) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (((($31) + ($29<<3)|0)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($28))|0;
 HEAP32[$32>>2] = $34;
 $35 = ((($zone)) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($29)|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 | 16;
 $41 = $40&255;
 HEAP8[$37>>0] = $41;
 return;
}
function _Direct_Move_Orig($exc,$zone,$point,$distance) {
 $exc = $exc|0;
 $zone = $zone|0;
 $point = $point|0;
 $distance = $distance|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($exc)) + 298|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($1<<16>>16)==(0);
 if (!($2)) {
  $3 = $1 << 16 >> 16;
  $4 = $3 << 16;
  $5 = ((($exc)) + 564|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_FT_MulDiv($distance,$4,$6)|0);
  $8 = $point&65535;
  $9 = ((($zone)) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($8<<3)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($7))|0;
  HEAP32[$11>>2] = $13;
 }
 $14 = ((($exc)) + 300|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = ($15<<16>>16)==(0);
 if ($16) {
  return;
 }
 $17 = $15 << 16 >> 16;
 $18 = $17 << 16;
 $19 = ((($exc)) + 564|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_FT_MulDiv($distance,$18,$20)|0);
 $22 = $point&65535;
 $23 = ((($zone)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (((($24) + ($22<<3)|0)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($21))|0;
 HEAP32[$25>>2] = $27;
 return;
}
function _Direct_Move_X($exc,$zone,$point,$distance) {
 $exc = $exc|0;
 $zone = $zone|0;
 $point = $point|0;
 $distance = $distance|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $point&65535;
 $1 = ((($zone)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0<<3)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($distance))|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($zone)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($0)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 | 8;
 $12 = $11&255;
 HEAP8[$8>>0] = $12;
 return;
}
function _Direct_Move_Orig_X($exc,$zone,$point,$distance) {
 $exc = $exc|0;
 $zone = $zone|0;
 $point = $point|0;
 $distance = $distance|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $point&65535;
 $1 = ((($zone)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($0<<3)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($distance))|0;
 HEAP32[$3>>2] = $5;
 return;
}
function _Direct_Move_Y($exc,$zone,$point,$distance) {
 $exc = $exc|0;
 $zone = $zone|0;
 $point = $point|0;
 $distance = $distance|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $point&65535;
 $1 = ((($zone)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (((($2) + ($0<<3)|0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($distance))|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($zone)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($0)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 | 16;
 $12 = $11&255;
 HEAP8[$8>>0] = $12;
 return;
}
function _Direct_Move_Orig_Y($exc,$zone,$point,$distance) {
 $exc = $exc|0;
 $zone = $zone|0;
 $point = $point|0;
 $distance = $distance|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $point&65535;
 $1 = ((($zone)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (((($2) + ($0<<3)|0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($distance))|0;
 HEAP32[$3>>2] = $5;
 return;
}
function _TT_DotFix14($ax,$ay,$bx,$by) {
 $ax = $ax|0;
 $ay = $ay|0;
 $bx = $bx|0;
 $by = $by|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $ax & 65535;
 $1 = Math_imul($0, $bx)|0;
 $2 = $ax >> 16;
 $3 = Math_imul($2, $bx)|0;
 $4 = $3 << 16;
 $5 = (($4) + ($1))|0;
 $6 = $3 >> 16;
 $7 = $1 >> 31;
 $8 = ($5>>>0)<($1>>>0);
 $9 = $8&1;
 $10 = $ay & 65535;
 $11 = Math_imul($10, $by)|0;
 $12 = $ay >> 16;
 $13 = Math_imul($12, $by)|0;
 $14 = $13 << 16;
 $15 = (($14) + ($11))|0;
 $16 = $13 >> 16;
 $17 = $11 >> 31;
 $18 = ($15>>>0)<($11>>>0);
 $19 = $18&1;
 $20 = (($15) + ($5))|0;
 $21 = ($20>>>0)<($5>>>0);
 $22 = $21&1;
 $23 = (($6) + ($7))|0;
 $24 = (($23) + ($17))|0;
 $25 = (($24) + ($16))|0;
 $26 = (($25) + ($9))|0;
 $27 = (($26) + ($19))|0;
 $28 = (($27) + ($22))|0;
 $29 = $28 >> 31;
 $30 = (($29) + ($20))|0;
 $31 = ($30>>>0)<($20>>>0);
 $32 = $31&1;
 $33 = (($30) + 8192)|0;
 $34 = ($30>>>0)>(4294959103);
 $35 = $34&1;
 $36 = (($29) + ($28))|0;
 $37 = (($36) + ($32))|0;
 $38 = (($37) + ($35))|0;
 $39 = $38 << 18;
 $40 = $33 >>> 14;
 $41 = $39 | $40;
 return ($41|0);
}
function _tt_face_load_eblc($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $count$018 = 0, $count2$011 = 0, $count23$04 = 0, $count23$16 = 0, $error = 0, $or$cond = 0, $range$03 = 0, $range$15 = 0;
 var $strike$017 = 0, $strike1$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 612|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($face)) + 508|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiiii[$4 & 63]($face,1161972803,$stream,0)|0);
 HEAP32[$error>>2] = $5;
 $6 = ($5|0)==(0);
 if ($6) {
  label = 3;
 } else {
  $7 = HEAP32[$3>>2]|0;
  $8 = (FUNCTION_TABLE_iiiii[$7 & 63]($face,1651273571,$stream,0)|0);
  HEAP32[$error>>2] = $8;
  $9 = ($8|0)==(0);
  if ($9) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $10 = (_FT_Stream_Pos($stream)|0);
   $11 = (_FT_Stream_EnterFrame($stream,8)|0);
   HEAP32[$error>>2] = $11;
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = (_FT_Stream_GetULong($stream)|0);
    $14 = (_FT_Stream_GetULong($stream)|0);
    _FT_Stream_ExitFrame($stream);
    $15 = ($13|0)!=(131072);
    $16 = ($14>>>0)>(65535);
    $or$cond = $15 | $16;
    if ($or$cond) {
     HEAP32[$error>>2] = 3;
     break;
    }
    $17 = (_ft_mem_realloc($1,48,0,$14,0,$error)|0);
    $18 = ((($face)) + 616|0);
    HEAP32[$18>>2] = $17;
    $19 = HEAP32[$error>>2]|0;
    $20 = ($19|0)==(0);
    if ($20) {
     HEAP32[$2>>2] = $14;
     $21 = HEAP32[$18>>2]|0;
     $22 = ($14*48)|0;
     $23 = (_FT_Stream_EnterFrame($stream,$22)|0);
     HEAP32[$error>>2] = $23;
     $24 = ($23|0)==(0);
     if ($24) {
      $25 = ($14|0)==(0);
      if ($25) {
       _FT_Stream_ExitFrame($stream);
       break;
      } else {
       $count$018 = $14;$strike$017 = $21;
      }
      while(1) {
       $26 = (_FT_Stream_ReadFields($stream,23602,$strike$017)|0);
       HEAP32[$error>>2] = $26;
       $27 = ($26|0)==(0);
       if (!($27)) {
        break;
       }
       $28 = ((($strike$017)) + 16|0);
       $29 = (_FT_Stream_ReadFields($stream,23622,$28)|0);
       HEAP32[$error>>2] = $29;
       $30 = ($29|0)==(0);
       if (!($30)) {
        break;
       }
       $31 = ((($strike$017)) + 28|0);
       $32 = (_FT_Stream_ReadFields($stream,23622,$31)|0);
       HEAP32[$error>>2] = $32;
       $33 = ($32|0)==(0);
       if (!($33)) {
        break;
       }
       $34 = (_FT_Stream_ReadFields($stream,23674,$strike$017)|0);
       HEAP32[$error>>2] = $34;
       $35 = ($34|0)==(0);
       if (!($35)) {
        break;
       }
       $36 = (($count$018) + -1)|0;
       $37 = ((($strike$017)) + 48|0);
       $38 = ($36|0)==(0);
       if ($38) {
        break;
       } else {
        $count$018 = $36;$strike$017 = $37;
       }
      }
      _FT_Stream_ExitFrame($stream);
      $39 = ($14|0)==(0);
      if (!($39)) {
       $40 = HEAP32[$18>>2]|0;
       $count2$011 = $14;$strike1$010 = $40;
       while(1) {
        $41 = HEAP32[$strike1$010>>2]|0;
        $42 = ((($strike1$010)) + 8|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = (($43) + ($10))|0;
        $45 = (_FT_Stream_Seek($stream,$44)|0);
        HEAP32[$error>>2] = $45;
        $46 = ($45|0)==(0);
        if (!($46)) {
         break L3;
        }
        $47 = HEAP32[$strike1$010>>2]|0;
        $48 = $47 << 3;
        $49 = (_FT_Stream_EnterFrame($stream,$48)|0);
        HEAP32[$error>>2] = $49;
        $50 = ($49|0)==(0);
        if (!($50)) {
         break L3;
        }
        $51 = HEAP32[$strike1$010>>2]|0;
        $52 = (_ft_mem_realloc($1,40,0,$51,0,$error)|0);
        $53 = ((($strike1$010)) + 4|0);
        HEAP32[$53>>2] = $52;
        $54 = HEAP32[$error>>2]|0;
        $55 = ($54|0)==(0);
        if (!($55)) {
         break L3;
        }
        $56 = ($41|0)==(0);
        if (!($56)) {
         $count23$04 = $41;$range$03 = $52;
         while(1) {
          $57 = (_FT_Stream_GetUShort($stream)|0);
          HEAP16[$range$03>>1] = $57;
          $58 = (_FT_Stream_GetUShort($stream)|0);
          $59 = ((($range$03)) + 2|0);
          HEAP16[$59>>1] = $58;
          $60 = HEAP32[$42>>2]|0;
          $61 = (($60) + ($10))|0;
          $62 = (_FT_Stream_GetULong($stream)|0);
          $63 = (($61) + ($62))|0;
          $64 = ((($range$03)) + 36|0);
          HEAP32[$64>>2] = $63;
          $65 = (($count23$04) + -1)|0;
          $66 = ((($range$03)) + 40|0);
          $67 = ($65|0)==(0);
          if ($67) {
           break;
          } else {
           $count23$04 = $65;$range$03 = $66;
          }
         }
        }
        _FT_Stream_ExitFrame($stream);
        $68 = HEAP32[$strike1$010>>2]|0;
        $69 = ($68|0)==(0);
        if (!($69)) {
         $70 = HEAP32[$53>>2]|0;
         $count23$16 = $68;$range$15 = $70;
         while(1) {
          $71 = ((($range$15)) + 36|0);
          $72 = HEAP32[$71>>2]|0;
          $73 = (_FT_Stream_Seek($stream,$72)|0);
          HEAP32[$error>>2] = $73;
          $74 = ($73|0)==(0);
          if (!($74)) {
           break L3;
          }
          $75 = (_FT_Stream_EnterFrame($stream,8)|0);
          HEAP32[$error>>2] = $75;
          $76 = ($75|0)==(0);
          if (!($76)) {
           break L3;
          }
          $77 = (_FT_Stream_GetUShort($stream)|0);
          $78 = ((($range$15)) + 4|0);
          HEAP16[$78>>1] = $77;
          $79 = (_FT_Stream_GetUShort($stream)|0);
          $80 = ((($range$15)) + 6|0);
          HEAP16[$80>>1] = $79;
          $81 = (_FT_Stream_GetULong($stream)|0);
          $82 = ((($range$15)) + 8|0);
          HEAP32[$82>>2] = $81;
          _FT_Stream_ExitFrame($stream);
          $83 = (_Load_SBit_Range($range$15,$stream)|0);
          HEAP32[$error>>2] = $83;
          $84 = ($83|0)==(0);
          if (!($84)) {
           break L3;
          }
          $85 = (($count23$16) + -1)|0;
          $86 = ((($range$15)) + 40|0);
          $87 = ($85|0)==(0);
          if ($87) {
           break;
          } else {
           $count23$16 = $85;$range$15 = $86;
          }
         }
        }
        $88 = (($count2$011) + -1)|0;
        $89 = ((($strike1$010)) + 48|0);
        $90 = ($88|0)==(0);
        if ($90) {
         break;
        } else {
         $count2$011 = $88;$strike1$010 = $89;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $91 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($91|0);
}
function _tt_face_free_eblc($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $range$02 = 0, $strike$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 616|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 612|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + (($5*48)|0)|0);
 $7 = ($3|0)==(0|0);
 if ($7) {
  HEAP32[$4>>2] = 0;
  return;
 }
 $8 = ($5|0)>(0);
 if ($8) {
  $strike$03 = $3;
  while(1) {
   $9 = ((($strike$03)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$strike$03>>2]|0;
   $12 = (($10) + (($11*40)|0)|0);
   $13 = ($10|0)!=(0|0);
   $14 = ($11|0)>(0);
   $or$cond = $13 & $14;
   if ($or$cond) {
    $range$02 = $10;
    while(1) {
     $15 = ((($range$02)) + 28|0);
     $16 = HEAP32[$15>>2]|0;
     _ft_mem_free($1,$16);
     HEAP32[$15>>2] = 0;
     $17 = ((($range$02)) + 32|0);
     $18 = HEAP32[$17>>2]|0;
     _ft_mem_free($1,$18);
     HEAP32[$17>>2] = 0;
     $19 = ((($range$02)) + 40|0);
     $20 = ($19>>>0)<($12>>>0);
     if ($20) {
      $range$02 = $19;
     } else {
      break;
     }
    }
   }
   $21 = HEAP32[$9>>2]|0;
   _ft_mem_free($1,$21);
   HEAP32[$9>>2] = 0;
   HEAP32[$strike$03>>2] = 0;
   $22 = ((($strike$03)) + 48|0);
   $23 = ($22>>>0)<($6>>>0);
   if ($23) {
    $strike$03 = $22;
   } else {
    break;
   }
  }
 }
 $24 = HEAP32[$2>>2]|0;
 _ft_mem_free($1,$24);
 HEAP32[$2>>2] = 0;
 HEAP32[$4>>2] = 0;
 return;
}
function _tt_face_set_sbit_strike($face,$req,$astrike_index) {
 $face = $face|0;
 $req = $req|0;
 $astrike_index = $astrike_index|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_FT_Match_Size($face,$req,0,$astrike_index)|0);
 return ($0|0);
}
function _tt_face_load_strike_metrics($face,$strike_index,$metrics) {
 $face = $face|0;
 $strike_index = $strike_index|0;
 $metrics = $metrics|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 612|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($strike_index>>>0);
 if (!($2)) {
  $$0 = 6;
  return ($$0|0);
 }
 $3 = ((($face)) + 616|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (((($4) + (($strike_index*48)|0)|0)) + 44|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 HEAP16[$metrics>>1] = $7;
 $8 = (((($4) + (($strike_index*48)|0)|0)) + 45|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ((($metrics)) + 2|0);
 HEAP16[$11>>1] = $10;
 $12 = (((($4) + (($strike_index*48)|0)|0)) + 16|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 << 24 >> 24;
 $15 = $14 << 6;
 $16 = ((($metrics)) + 12|0);
 HEAP32[$16>>2] = $15;
 $17 = (((($4) + (($strike_index*48)|0)|0)) + 17|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18 << 24 >> 24;
 $20 = $19 << 6;
 $21 = ((($metrics)) + 16|0);
 HEAP32[$21>>2] = $20;
 $22 = (((($4) + (($strike_index*48)|0)|0)) + 22|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23 << 24 >> 24;
 $25 = (((($4) + (($strike_index*48)|0)|0)) + 18|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = (($27) + ($24))|0;
 $29 = (((($4) + (($strike_index*48)|0)|0)) + 23|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30 << 24 >> 24;
 $32 = (($28) + ($31))|0;
 $33 = $32 << 6;
 $34 = ((($metrics)) + 24|0);
 HEAP32[$34>>2] = $33;
 $35 = HEAP32[$16>>2]|0;
 $36 = HEAP32[$21>>2]|0;
 $37 = (($35) - ($36))|0;
 $38 = ((($metrics)) + 20|0);
 HEAP32[$38>>2] = $37;
 $$0 = 0;
 return ($$0|0);
}
function _tt_find_sbit_image($face,$glyph_index,$strike_index,$arange,$astrike,$aglyph_offset) {
 $face = $face|0;
 $glyph_index = $glyph_index|0;
 $strike_index = $strike_index|0;
 $arange = $arange|0;
 $astrike = $astrike|0;
 $aglyph_offset = $aglyph_offset|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 616|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($face)) + 612|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4>>>0)>($strike_index>>>0);
  if ($5) {
   $6 = (($1) + (($strike_index*48)|0)|0);
   $7 = (_find_sbit_range($glyph_index,$6,$arange,$aglyph_offset)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    HEAP32[$astrike>>2] = $6;
    $$0 = 0;
    return ($$0|0);
   }
  }
 }
 HEAP32[$arange>>2] = 0;
 HEAP32[$astrike>>2] = 0;
 HEAP32[$aglyph_offset>>2] = 0;
 $$0 = 6;
 return ($$0|0);
}
function _tt_load_sbit_metrics($stream,$range,$metrics) {
 $stream = $stream|0;
 $range = $range|0;
 $metrics = $metrics|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $smetrics = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $smetrics = sp;
 $0 = ((($range)) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 switch ($2|0) {
 case 8: case 2: case 1:  {
  $3 = (_FT_Stream_ReadFields($stream,23702,$smetrics)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $$0 = $3;
   STACKTOP = sp;return ($$0|0);
  }
  $5 = HEAP8[$smetrics>>0]|0;
  HEAP8[$metrics>>0] = $5;
  $6 = ((($smetrics)) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ((($metrics)) + 1|0);
  HEAP8[$8>>0] = $7;
  $9 = ((($smetrics)) + 2|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($metrics)) + 2|0);
  HEAP8[$11>>0] = $10;
  $12 = ((($smetrics)) + 3|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = ((($metrics)) + 3|0);
  HEAP8[$14>>0] = $13;
  $15 = ((($smetrics)) + 4|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ((($metrics)) + 4|0);
  HEAP8[$17>>0] = $16;
  $18 = ((($metrics)) + 5|0);
  HEAP8[$18>>0] = 0;
  $19 = ((($metrics)) + 6|0);
  HEAP8[$19>>0] = 0;
  $20 = ((($metrics)) + 7|0);
  HEAP8[$20>>0] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 9: case 7: case 6:  {
  $21 = (_FT_Stream_ReadFields($stream,23730,$metrics)|0);
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $22 = ((($range)) + 4|0);
  $23 = HEAP16[$22>>1]|0;
  switch ($23<<16>>16) {
  case 5: case 2:  {
   break;
  }
  default: {
   $$0 = 3;
   STACKTOP = sp;return ($$0|0);
  }
  }
  $24 = ((($range)) + 16|0);
  $25 = $24;
  $26 = $25;
  $27 = HEAPU8[$26>>0]|(HEAPU8[$26+1>>0]<<8)|(HEAPU8[$26+2>>0]<<16)|(HEAPU8[$26+3>>0]<<24);
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAPU8[$29>>0]|(HEAPU8[$29+1>>0]<<8)|(HEAPU8[$29+2>>0]<<16)|(HEAPU8[$29+3>>0]<<24);
  $31 = $metrics;
  $32 = $31;
  HEAP8[$32>>0]=$27&255;HEAP8[$32+1>>0]=($27>>8)&255;HEAP8[$32+2>>0]=($27>>16)&255;HEAP8[$32+3>>0]=$27>>24;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP8[$34>>0]=$30&255;HEAP8[$34+1>>0]=($30>>8)&255;HEAP8[$34+2>>0]=($30>>16)&255;HEAP8[$34+3>>0]=$30>>24;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _tt_face_load_sbit_image($face,$strike_index,$glyph_index,$load_flags,$stream,$map,$metrics) {
 $face = $face|0;
 $strike_index = $strike_index|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 $stream = $stream|0;
 $map = $map|0;
 $metrics = $metrics|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$1 = 0, $glyph_offset = 0, $range = 0, $strike = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $glyph_offset = sp + 8|0;
 $strike = sp + 4|0;
 $range = sp;
 $0 = (_tt_find_sbit_image($face,$glyph_index,$strike_index,$range,$strike,$glyph_offset)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $error$1 = $0;
  STACKTOP = sp;return ($error$1|0);
 }
 $2 = ((($face)) + 508|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiii[$3 & 63]($face,1161970772,$stream,0)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = HEAP32[$2>>2]|0;
  $7 = (FUNCTION_TABLE_iiiii[$6 & 63]($face,1650745716,$stream,0)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $error$1 = $7;
   STACKTOP = sp;return ($error$1|0);
  }
 }
 $9 = (_FT_Stream_Pos($stream)|0);
 $10 = HEAP32[$strike>>2]|0;
 $11 = HEAP32[$range>>2]|0;
 $12 = HEAP32[$glyph_offset>>2]|0;
 $13 = ((($face)) + 84|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_Load_SBit_Image($10,$11,$9,$12,$14,0,0,$stream,$metrics,0)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $error$1 = $15;
  STACKTOP = sp;return ($error$1|0);
 }
 $17 = HEAP32[$strike>>2]|0;
 $18 = ((($17)) + 47|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 & 1;
 $21 = ($20<<24>>24)==(0);
 if (!($21)) {
  $22 = ((($17)) + 16|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23 << 24 >> 24;
  $25 = ((($17)) + 17|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = (($24) - ($27))|0;
  $29 = ((($metrics)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (($31|0) / -2)&-1;
  $33 = $32&255;
  $34 = ((($metrics)) + 5|0);
  HEAP8[$34>>0] = $33;
  $35 = HEAP8[$metrics>>0]|0;
  $36 = $35&255;
  $37 = (($28) - ($36))|0;
  $38 = (($37|0) / 2)&-1;
  $39 = $38&255;
  $40 = ((($metrics)) + 6|0);
  HEAP8[$40>>0] = $39;
  $41 = ($28*12)|0;
  $42 = (($41|0) / 10)&-1;
  $43 = $42&255;
  $44 = ((($metrics)) + 7|0);
  HEAP8[$44>>0] = $43;
 }
 $45 = $load_flags & 64;
 $46 = ($45|0)==(0);
 if ($46) {
  $error$1 = $15;
  STACKTOP = sp;return ($error$1|0);
 }
 _crop_bitmap($map,$metrics);
 $error$1 = $15;
 STACKTOP = sp;return ($error$1|0);
}
function _Load_SBit_Range($range,$stream) {
 $range = $range|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $exitcond = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($range)) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 L1: do {
  switch ($4|0) {
  case 3: case 1:  {
   $5 = ((($range)) + 2|0);
   $6 = HEAP16[$5>>1]|0;
   $7 = HEAP16[$range>>1]|0;
   $8 = ($6&65535)<($7&65535);
   if ($8) {
    HEAP32[$error>>2] = 3;
    break L1;
   }
   $9 = $6&65535;
   $10 = $7&65535;
   $11 = HEAP16[$2>>1]|0;
   $12 = ($11<<16>>16)==(1);
   $13 = (($9) - ($10))|0;
   $14 = (($13) + 1)|0;
   $15 = ((($range)) + 24|0);
   HEAP32[$15>>2] = $14;
   $16 = (($13) + 2)|0;
   $17 = (_ft_mem_realloc($1,4,0,$16,0,$error)|0);
   $18 = ((($range)) + 28|0);
   HEAP32[$18>>2] = $17;
   $19 = HEAP32[$error>>2]|0;
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = $12 ? 4 : 2;
    $22 = Math_imul($21, $16)|0;
    $23 = (_FT_Stream_EnterFrame($stream,$22)|0);
    HEAP32[$error>>2] = $23;
    $24 = ($23|0)==(0);
    if ($24) {
     $25 = ($16|0)==(0);
     if (!($25)) {
      $26 = ((($range)) + 8|0);
      $27 = $6&65535;
      $28 = (($27) + 2)|0;
      $29 = $7&65535;
      $30 = (($28) - ($29))|0;
      $n$01 = 0;
      while(1) {
       $31 = HEAP32[$26>>2]|0;
       if ($12) {
        $32 = (_FT_Stream_GetULong($stream)|0);
        $36 = $32;
       } else {
        $33 = (_FT_Stream_GetUShort($stream)|0);
        $34 = $33&65535;
        $36 = $34;
       }
       $35 = (($36) + ($31))|0;
       $37 = HEAP32[$18>>2]|0;
       $38 = (($37) + ($n$01<<2)|0);
       HEAP32[$38>>2] = $35;
       $39 = (($n$01) + 1)|0;
       $exitcond = ($39|0)==($30|0);
       if ($exitcond) {
        break;
       } else {
        $n$01 = $39;
       }
      }
     }
     _FT_Stream_ExitFrame($stream);
    }
   }
   break;
  }
  case 2:  {
   $40 = (_Load_SBit_Const_Metrics($range,$stream)|0);
   HEAP32[$error>>2] = $40;
   break;
  }
  case 4:  {
   $41 = (_Load_SBit_Range_Codes($range,$stream,1)|0);
   HEAP32[$error>>2] = $41;
   break;
  }
  case 5:  {
   $42 = (_Load_SBit_Const_Metrics($range,$stream)|0);
   HEAP32[$error>>2] = $42;
   $43 = ($42|0)==(0);
   if ($43) {
    $44 = (_Load_SBit_Range_Codes($range,$stream,0)|0);
    HEAP32[$error>>2] = $44;
   }
   break;
  }
  default: {
   HEAP32[$error>>2] = 3;
  }
  }
 } while(0);
 $45 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($45|0);
}
function _find_sbit_range($glyph_index,$strike,$arange,$aglyph_offset) {
 $glyph_index = $glyph_index|0;
 $strike = $strike|0;
 $arange = $arange|0;
 $aglyph_offset = $aglyph_offset|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $n$06 = 0, $n$06$lcssa = 0, $or$cond = 0, $range$07 = 0, $range$07$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($strike)) + 40|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = ($2>>>0)>($glyph_index>>>0);
 L1: do {
  if (!($3)) {
   $4 = ((($strike)) + 42|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5&65535;
   $7 = ($6>>>0)<($glyph_index>>>0);
   if (!($7)) {
    $8 = ((($strike)) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$strike>>2]|0;
    $11 = (($9) + (($10*40)|0)|0);
    $12 = ($9|0)!=(0|0);
    $13 = ($10|0)>(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $range$07 = $9;
     while(1) {
      $14 = HEAP16[$range$07>>1]|0;
      $15 = $14&65535;
      $16 = ($15>>>0)>($glyph_index>>>0);
      if (!($16)) {
       $17 = ((($range$07)) + 2|0);
       $18 = HEAP16[$17>>1]|0;
       $19 = $18&65535;
       $20 = ($19>>>0)<($glyph_index>>>0);
       if (!($20)) {
        $$lcssa = $15;$range$07$lcssa = $range$07;
        break;
       }
      }
      $61 = ((($range$07)) + 40|0);
      $62 = ($61>>>0)<($11>>>0);
      if ($62) {
       $range$07 = $61;
      } else {
       break L1;
      }
     }
     $21 = (($glyph_index) - ($$lcssa))|0;
     $22 = ((($range$07$lcssa)) + 4|0);
     $23 = HEAP16[$22>>1]|0;
     $24 = $23&65535;
     L10: do {
      switch ($24|0) {
      case 3: case 1:  {
       $30 = $21 & 65535;
       $31 = ((($range$07$lcssa)) + 28|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (($32) + ($30<<2)|0);
       $34 = HEAP32[$33>>2]|0;
       HEAP32[$aglyph_offset>>2] = $34;
       break;
      }
      case 2:  {
       $35 = ((($range$07$lcssa)) + 8|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = ((($range$07$lcssa)) + 12|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = $21 & 65535;
       $40 = Math_imul($38, $39)|0;
       $41 = (($40) + ($36))|0;
       HEAP32[$aglyph_offset>>2] = $41;
       break;
      }
      case 5: case 4:  {
       $25 = ((($range$07$lcssa)) + 24|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(0);
       if ($27) {
        break L1;
       }
       $28 = ((($range$07$lcssa)) + 32|0);
       $29 = HEAP32[$28>>2]|0;
       $n$06 = 0;
       while(1) {
        $42 = (($29) + ($n$06<<1)|0);
        $43 = HEAP16[$42>>1]|0;
        $44 = $43&65535;
        $45 = ($44|0)==($glyph_index|0);
        if ($45) {
         $n$06$lcssa = $n$06;
         break;
        }
        $58 = (($n$06) + 1)|0;
        $59 = HEAP32[$25>>2]|0;
        $60 = ($58>>>0)<($59>>>0);
        if ($60) {
         $n$06 = $58;
        } else {
         break L1;
        }
       }
       $46 = HEAP16[$22>>1]|0;
       $47 = ($46<<16>>16)==(4);
       if ($47) {
        $48 = ((($range$07$lcssa)) + 28|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = (($49) + ($n$06$lcssa<<2)|0);
        $51 = HEAP32[$50>>2]|0;
        HEAP32[$aglyph_offset>>2] = $51;
        break L10;
       } else {
        $52 = ((($range$07$lcssa)) + 8|0);
        $53 = HEAP32[$52>>2]|0;
        $54 = ((($range$07$lcssa)) + 12|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = Math_imul($55, $n$06$lcssa)|0;
        $57 = (($56) + ($53))|0;
        HEAP32[$aglyph_offset>>2] = $57;
        break L10;
       }
       break;
      }
      default: {
       break L1;
      }
      }
     } while(0);
     HEAP32[$arange>>2] = $range$07$lcssa;
     $$0 = 0;
     return ($$0|0);
    }
   }
  }
 } while(0);
 HEAP32[$arange>>2] = 0;
 HEAP32[$aglyph_offset>>2] = 0;
 $$0 = 6;
 return ($$0|0);
}
function _Load_SBit_Image($strike,$range,$ebdt_pos,$glyph_offset,$slot,$x_offset,$y_offset,$stream,$metrics,$depth) {
 $strike = $strike|0;
 $range = $range|0;
 $ebdt_pos = $ebdt_pos|0;
 $glyph_offset = $glyph_offset|0;
 $slot = $slot|0;
 $x_offset = $x_offset|0;
 $y_offset = $y_offset|0;
 $stream = $stream|0;
 $metrics = $metrics|0;
 $depth = $depth|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $comp$05 = 0, $comp$11 = 0, $count$06 = 0, $count$12 = 0, $elem_metrics = 0;
 var $elem_offset = 0, $elem_range = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $error = sp + 8|0;
 $elem_range = sp + 4|0;
 $elem_metrics = sp + 16|0;
 $elem_offset = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($slot)) + 76|0);
 $3 = (($glyph_offset) + ($ebdt_pos))|0;
 $4 = (_FT_Stream_Seek($stream,$3)|0);
 HEAP32[$error>>2] = $4;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = (_tt_load_sbit_metrics($stream,$range,$metrics)|0);
   HEAP32[$error>>2] = $6;
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = ($depth|0)==(0);
    if ($8) {
     $9 = ((($metrics)) + 1|0);
     $10 = HEAP8[$9>>0]|0;
     $11 = $10&255;
     $12 = ((($slot)) + 80|0);
     HEAP32[$12>>2] = $11;
     $13 = HEAP8[$metrics>>0]|0;
     $14 = $13&255;
     HEAP32[$2>>2] = $14;
     $15 = ((($strike)) + 46|0);
     $16 = HEAP8[$15>>0]|0;
     $17 = $16&255;
     switch ($17|0) {
     case 1:  {
      $18 = ((($slot)) + 94|0);
      HEAP8[$18>>0] = 1;
      $19 = HEAP32[$12>>2]|0;
      $20 = (($19) + 7)|0;
      $21 = $20 >> 3;
      $22 = ((($slot)) + 84|0);
      HEAP32[$22>>2] = $21;
      break;
     }
     case 2:  {
      $23 = ((($slot)) + 94|0);
      HEAP8[$23>>0] = 3;
      $24 = HEAP32[$12>>2]|0;
      $25 = (($24) + 3)|0;
      $26 = $25 >> 2;
      $27 = ((($slot)) + 84|0);
      HEAP32[$27>>2] = $26;
      break;
     }
     case 4:  {
      $28 = ((($slot)) + 94|0);
      HEAP8[$28>>0] = 4;
      $29 = HEAP32[$12>>2]|0;
      $30 = (($29) + 1)|0;
      $31 = $30 >> 1;
      $32 = ((($slot)) + 84|0);
      HEAP32[$32>>2] = $31;
      break;
     }
     case 8:  {
      $33 = ((($slot)) + 94|0);
      HEAP8[$33>>0] = 2;
      $34 = HEAP32[$12>>2]|0;
      $35 = ((($slot)) + 84|0);
      HEAP32[$35>>2] = $34;
      break;
     }
     default: {
      $$0 = 3;
      STACKTOP = sp;return ($$0|0);
     }
     }
     $36 = HEAP32[$2>>2]|0;
     $37 = ((($slot)) + 84|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = Math_imul($38, $36)|0;
     $40 = ($39|0)==(0);
     if ($40) {
      break;
     }
     $41 = (_ft_glyphslot_alloc_bitmap($slot,$39)|0);
     HEAP32[$error>>2] = $41;
     $42 = ($41|0)==(0);
     if (!($42)) {
      break;
     }
    }
    $43 = ((($range)) + 6|0);
    $44 = HEAP16[$43>>1]|0;
    $45 = $44&65535;
    switch ($45|0) {
    case 7: case 6: case 5: case 2: case 1:  {
     $46 = ((($strike)) + 46|0);
     $47 = HEAP8[$46>>0]|0;
     $48 = $47&255;
     $49 = HEAP16[$43>>1]|0;
     $50 = (_Load_SBit_Single($2,$x_offset,$y_offset,$48,$49,$metrics,$stream)|0);
     $$0 = $50;
     STACKTOP = sp;return ($$0|0);
     break;
    }
    case 8:  {
     $51 = (_FT_Stream_Skip($stream,1)|0);
     HEAP32[$error>>2] = $51;
     $52 = ($51|0)==(0);
     if (!($52)) {
      HEAP32[$error>>2] = 83;
      break L1;
     }
     break;
    }
    case 9:  {
     break;
    }
    default: {
     $$0 = 3;
     STACKTOP = sp;return ($$0|0);
    }
    }
    $53 = (_FT_Stream_ReadUShort($stream,$error)|0);
    $54 = HEAP32[$error>>2]|0;
    $55 = ($54|0)==(0);
    if ($55) {
     $56 = $53&65535;
     $57 = (_ft_mem_realloc($1,4,0,$56,0,$error)|0);
     $58 = HEAP32[$error>>2]|0;
     $59 = ($58|0)==(0);
     if ($59) {
      $60 = $56 << 2;
      $61 = (_FT_Stream_EnterFrame($stream,$60)|0);
      HEAP32[$error>>2] = $61;
      $62 = ($61|0)==(0);
      L24: do {
       if ($62) {
        $63 = ($53<<16>>16)==(0);
        if ($63) {
         _FT_Stream_ExitFrame($stream);
         break;
        } else {
         $comp$05 = $57;$count$06 = $53;
        }
        while(1) {
         $64 = (_FT_Stream_GetUShort($stream)|0);
         HEAP16[$comp$05>>1] = $64;
         $65 = (_FT_Stream_GetChar($stream)|0);
         $66 = ((($comp$05)) + 2|0);
         HEAP8[$66>>0] = $65;
         $67 = (_FT_Stream_GetChar($stream)|0);
         $68 = ((($comp$05)) + 3|0);
         HEAP8[$68>>0] = $67;
         $69 = (($count$06) + -1)<<16>>16;
         $70 = ((($comp$05)) + 4|0);
         $71 = ($69<<16>>16)==(0);
         if ($71) {
          break;
         } else {
          $comp$05 = $70;$count$06 = $69;
         }
        }
        _FT_Stream_ExitFrame($stream);
        $72 = ($53<<16>>16)==(0);
        if (!($72)) {
         $73 = (($depth) + 1)|0;
         $comp$11 = $57;$count$12 = $53;
         while(1) {
          $74 = HEAP16[$comp$11>>1]|0;
          $75 = $74&65535;
          $76 = (_find_sbit_range($75,$strike,$elem_range,$elem_offset)|0);
          HEAP32[$error>>2] = $76;
          $77 = ($76|0)==(0);
          if (!($77)) {
           break L24;
          }
          $78 = HEAP32[$elem_range>>2]|0;
          $79 = HEAP32[$elem_offset>>2]|0;
          $80 = ((($comp$11)) + 2|0);
          $81 = HEAP8[$80>>0]|0;
          $82 = $81 << 24 >> 24;
          $83 = (($82) + ($x_offset))|0;
          $84 = ((($comp$11)) + 3|0);
          $85 = HEAP8[$84>>0]|0;
          $86 = $85 << 24 >> 24;
          $87 = (($86) + ($y_offset))|0;
          $88 = (_Load_SBit_Image($strike,$78,$ebdt_pos,$79,$slot,$83,$87,$stream,$elem_metrics,$73)|0);
          HEAP32[$error>>2] = $88;
          $89 = ($88|0)==(0);
          if (!($89)) {
           break L24;
          }
          $90 = (($count$12) + -1)<<16>>16;
          $91 = ((($comp$11)) + 4|0);
          $92 = ($90<<16>>16)==(0);
          if ($92) {
           break;
          } else {
           $comp$11 = $91;$count$12 = $90;
          }
         }
        }
       }
      } while(0);
      _ft_mem_free($1,$57);
     }
    }
   }
  }
 } while(0);
 $93 = HEAP32[$error>>2]|0;
 $$0 = $93;
 STACKTOP = sp;return ($$0|0);
}
function _crop_bitmap($map,$metrics) {
 $map = $map|0;
 $metrics = $metrics|0;
 var $$lcssa6 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$048 = 0, $count$048$lcssa = 0, $count$110 = 0, $count$138 = 0, $cur$043 = 0, $cur1$033 = 0, $cur4$0$lcssa = 0, $cur4$021 = 0, $indvars$iv = 0, $line$047 = 0, $line$137 = 0;
 var $line$215 = 0, $line$327 = 0, $line$414 = 0, $n$020 = 0, $old$0 = 0, $old$0$in = 0, $old$0$in$lcssa = 0, $old$0$in$lcssa84 = 0, $old$0$in19 = 0, $old$0$in22 = 0, $rows$0 = 0, $rows$1$ph = 0, $scevgep = 0, $scevgep6062 = 0, $scevgep61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($map)) + 12|0);
 $1 = HEAP32[$map>>2]|0;
 $2 = ((($map)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)>(0);
 L1: do {
  if ($4) {
   $5 = HEAP32[$0>>2]|0;
   $6 = ($3|0)>(0);
   $count$048 = 0;$line$047 = $5;
   L3: while(1) {
    $7 = (($line$047) + ($3)|0);
    if ($6) {
     $cur$043 = $line$047;
     while(1) {
      $10 = HEAP8[$cur$043>>0]|0;
      $11 = ($10<<24>>24)==(0);
      $9 = ((($cur$043)) + 1|0);
      if (!($11)) {
       $count$048$lcssa = $count$048;
       break L3;
      }
      $8 = ($9>>>0)<($7>>>0);
      if ($8) {
       $cur$043 = $9;
      } else {
       break;
      }
     }
    }
    $12 = (($count$048) + 1)|0;
    $13 = ($1|0)>($12|0);
    if ($13) {
     $count$048 = $12;$line$047 = $7;
    } else {
     break L1;
    }
   }
   $14 = ($count$048$lcssa|0)>(0);
   if ($14) {
    $15 = HEAP32[$0>>2]|0;
    $16 = Math_imul($count$048$lcssa, $3)|0;
    $17 = (($15) + ($16)|0);
    $18 = (($1) - ($count$048$lcssa))|0;
    $19 = Math_imul($18, $3)|0;
    _memmove(($15|0),($17|0),($19|0))|0;
    $20 = HEAP8[$metrics>>0]|0;
    $21 = $20&255;
    $22 = (($21) - ($count$048$lcssa))|0;
    $23 = $22&255;
    HEAP8[$metrics>>0] = $23;
    $24 = ((($metrics)) + 3|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = (($26) - ($count$048$lcssa))|0;
    $28 = $27&255;
    HEAP8[$24>>0] = $28;
    $29 = ((($metrics)) + 6|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = (($31) - ($count$048$lcssa))|0;
    $33 = $32&255;
    HEAP8[$29>>0] = $33;
    $34 = HEAP32[$map>>2]|0;
    $35 = (($34) - ($count$048$lcssa))|0;
    HEAP32[$map>>2] = $35;
    $rows$0 = $18;
   } else {
    $rows$0 = $1;
   }
   $36 = ($rows$0|0)>(0);
   if ($36) {
    $37 = HEAP32[$0>>2]|0;
    $38 = (($rows$0) + -1)|0;
    $39 = Math_imul($38, $3)|0;
    $40 = (($37) + ($39)|0);
    $41 = (0 - ($3))|0;
    $42 = ($3|0)>(0);
    $count$138 = 0;$line$137 = $40;
    L16: while(1) {
     $43 = (($line$137) + ($3)|0);
     if ($42) {
      $cur1$033 = $line$137;
      while(1) {
       $46 = HEAP8[$cur1$033>>0]|0;
       $47 = ($46<<24>>24)==(0);
       $45 = ((($cur1$033)) + 1|0);
       if (!($47)) {
        $count$110 = $count$138;
        break L16;
       }
       $44 = ($45>>>0)<($43>>>0);
       if ($44) {
        $cur1$033 = $45;
       } else {
        break;
       }
      }
     }
     $48 = (($line$137) + ($41)|0);
     $49 = (($count$138) + 1)|0;
     $50 = ($rows$0|0)>($49|0);
     if ($50) {
      $count$138 = $49;$line$137 = $48;
     } else {
      $count$110 = $49;
      break;
     }
    }
    $51 = ($count$110|0)>(0);
    if ($51) {
     $52 = HEAP8[$metrics>>0]|0;
     $53 = $52&255;
     $54 = (($53) - ($count$110))|0;
     $55 = $54&255;
     HEAP8[$metrics>>0] = $55;
     $56 = (($rows$0) - ($count$110))|0;
     $57 = HEAP32[$map>>2]|0;
     $58 = (($57) - ($count$110))|0;
     HEAP32[$map>>2] = $58;
     $rows$1$ph = $56;
    } else {
     $rows$1$ph = $rows$0;
    }
   } else {
    $rows$1$ph = $rows$0;
   }
   $59 = Math_imul($rows$1$ph, $3)|0;
   $60 = ((($map)) + 4|0);
   $61 = ((($metrics)) + 2|0);
   $62 = ((($metrics)) + 5|0);
   $63 = ((($metrics)) + 1|0);
   $64 = ($59|0)>(0);
   $65 = ($59|0)>(0);
   L26: while(1) {
    $66 = HEAP32[$0>>2]|0;
    $67 = (($66) + ($59)|0);
    if ($64) {
     $line$215 = $66;
     while(1) {
      $69 = HEAP8[$line$215>>0]|0;
      $70 = ($69<<24>>24)<(0);
      if ($70) {
       break L26;
      }
      $71 = (($line$215) + ($3)|0);
      $72 = ($71>>>0)<($67>>>0);
      if ($72) {
       $line$215 = $71;
      } else {
       break;
      }
     }
     $73 = HEAP32[$0>>2]|0;
     $74 = (($73) + ($59)|0);
     $75 = HEAP32[$60>>2]|0;
     if ($65) {
      $scevgep = ((($73)) + 1|0);
      $79 = $75;$indvars$iv = $scevgep;$line$327 = $73;
      while(1) {
       $76 = HEAP8[$line$327>>0]|0;
       $77 = $76&255;
       $old$0$in19 = $77 << 1;
       $78 = ($79|0)>(8);
       if ($78) {
        $80 = (($79) + -9)|0;
        $81 = $80 >>> 3;
        $cur4$021 = $line$327;$n$020 = 8;$old$0$in22 = $old$0$in19;
        while(1) {
         $82 = ((($cur4$021)) + 1|0);
         $83 = HEAP8[$82>>0]|0;
         $84 = $83&255;
         $85 = $84 >>> 7;
         $86 = $85 | $old$0$in22;
         $87 = $86&255;
         HEAP8[$cur4$021>>0] = $87;
         $88 = (($n$020) + 8)|0;
         $old$0$in = $84 << 1;
         $89 = ($88|0)<($79|0);
         if ($89) {
          $cur4$021 = $82;$n$020 = $88;$old$0$in22 = $old$0$in;
         } else {
          $old$0$in$lcssa84 = $old$0$in;
          break;
         }
        }
        $scevgep61 = (($indvars$iv) + ($81)|0);
        $cur4$0$lcssa = $scevgep61;$old$0$in$lcssa = $old$0$in$lcssa84;
       } else {
        $cur4$0$lcssa = $line$327;$old$0$in$lcssa = $old$0$in19;
       }
       $old$0 = $old$0$in$lcssa&255;
       HEAP8[$cur4$0$lcssa>>0] = $old$0;
       $90 = (($line$327) + ($3)|0);
       $91 = ($90>>>0)<($74>>>0);
       $92 = HEAP32[$60>>2]|0;
       $scevgep6062 = (($indvars$iv) + ($3)|0);
       if ($91) {
        $79 = $92;$indvars$iv = $scevgep6062;$line$327 = $90;
       } else {
        $$lcssa6 = $92;
        break;
       }
      }
     } else {
      $$lcssa6 = $75;
     }
    } else {
     $68 = HEAP32[$60>>2]|0;
     $$lcssa6 = $68;
    }
    $93 = (($$lcssa6) + -1)|0;
    HEAP32[$60>>2] = $93;
    $94 = HEAP8[$61>>0]|0;
    $95 = (($94) + 1)<<24>>24;
    HEAP8[$61>>0] = $95;
    $96 = HEAP8[$62>>0]|0;
    $97 = (($96) + 1)<<24>>24;
    HEAP8[$62>>0] = $97;
    $98 = HEAP8[$63>>0]|0;
    $99 = (($98) + -1)<<24>>24;
    HEAP8[$63>>0] = $99;
    $100 = HEAP32[$60>>2]|0;
    $101 = ($100|0)>(0);
    if (!($101)) {
     break;
    }
   }
   $102 = ((($map)) + 4|0);
   $103 = ((($metrics)) + 1|0);
   L45: while(1) {
    $104 = HEAP32[$102>>2]|0;
    $105 = (($104) + -1)|0;
    $106 = HEAP32[$0>>2]|0;
    $107 = $105 >> 3;
    $$sum = (($107) + ($59))|0;
    $108 = (($106) + ($$sum)|0);
    $109 = ($107|0)<($$sum|0);
    if ($109) {
     $110 = (($106) + ($107)|0);
     $111 = $105 & 7;
     $112 = 128 >>> $111;
     $line$414 = $110;
     while(1) {
      $113 = HEAP8[$line$414>>0]|0;
      $114 = $113&255;
      $115 = $112 & $114;
      $116 = ($115|0)==(0);
      if (!($116)) {
       label = 37;
       break L45;
      }
      $117 = (($line$414) + ($3)|0);
      $118 = ($117>>>0)<($108>>>0);
      if ($118) {
       $line$414 = $117;
      } else {
       break;
      }
     }
    }
    $119 = HEAP32[$102>>2]|0;
    $120 = (($119) + -1)|0;
    HEAP32[$102>>2] = $120;
    $121 = HEAP8[$103>>0]|0;
    $122 = (($121) + -1)<<24>>24;
    HEAP8[$103>>0] = $122;
    $123 = HEAP32[$102>>2]|0;
    $124 = ($123|0)>(0);
    if (!($124)) {
     label = 37;
     break;
    }
   }
   if ((label|0) == 37) {
    return;
   }
  }
 } while(0);
 $125 = ((($map)) + 4|0);
 HEAP32[$125>>2] = 0;
 HEAP32[$map>>2] = 0;
 HEAP32[$2>>2] = 0;
 $126 = ((($map)) + 18|0);
 HEAP8[$126>>0] = 1;
 return;
}
function _Load_SBit_Single($map,$x_offset,$y_offset,$pix_bits,$image_format,$metrics,$stream) {
 $map = $map|0;
 $x_offset = $x_offset|0;
 $y_offset = $y_offset|0;
 $pix_bits = $pix_bits|0;
 $image_format = $image_format|0;
 $metrics = $metrics|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $glyph_size$0 = 0, $line_length$0 = 0, $or$cond = 0, $pad_bytes$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x_offset|0)<(0);
 if ($0) {
  $$0 = 6;
  return ($$0|0);
 }
 $1 = ((($metrics)) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (($3) + ($x_offset))|0;
 $5 = ((($map)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)>($6|0);
 $8 = ($y_offset|0)<(0);
 $or$cond = $8 | $7;
 if ($or$cond) {
  $$0 = 6;
  return ($$0|0);
 }
 $9 = HEAP8[$metrics>>0]|0;
 $10 = $9&255;
 $11 = (($10) + ($y_offset))|0;
 $12 = HEAP32[$map>>2]|0;
 $13 = ($11|0)>($12|0);
 if ($13) {
  $$0 = 6;
  return ($$0|0);
 }
 $14 = Math_imul($3, $pix_bits)|0;
 $15 = $image_format&65535;
 switch ($15|0) {
 case 6: case 1:  {
  switch ($pix_bits|0) {
  case 1:  {
   $16 = (($3) + 7)|0;
   $17 = $16 >>> 3;
   $line_length$0 = $17;
   break;
  }
  case 2:  {
   $18 = (($3) + 3)|0;
   $19 = $18 >>> 2;
   $line_length$0 = $19;
   break;
  }
  case 4:  {
   $20 = (($3) + 1)|0;
   $21 = $20 >>> 1;
   $line_length$0 = $21;
   break;
  }
  default: {
   $line_length$0 = $3;
  }
  }
  $22 = Math_imul($line_length$0, $10)|0;
  $glyph_size$0 = $22;$pad_bytes$0 = 1;
  break;
 }
 case 7: case 5: case 2:  {
  $23 = Math_imul($10, $14)|0;
  $24 = (($23) + 7)|0;
  $25 = $24 >> 3;
  $glyph_size$0 = $25;$pad_bytes$0 = 0;
  break;
 }
 default: {
  $$0 = 3;
  return ($$0|0);
 }
 }
 $26 = (_FT_Stream_EnterFrame($stream,$glyph_size$0)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  $$0 = $26;
  return ($$0|0);
 }
 $28 = ((($stream)) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = Math_imul($pix_bits, $x_offset)|0;
 $31 = HEAP8[$metrics>>0]|0;
 $32 = $31&255;
 _blit_sbit($map,$29,$14,$pad_bytes$0,$30,$y_offset,$32);
 _FT_Stream_ExitFrame($stream);
 $$0 = 0;
 return ($$0|0);
}
function _blit_sbit($target,$source,$line_bits,$byte_padded,$x_offset,$y_offset,$source_height) {
 $target = $target|0;
 $source = $source|0;
 $line_bits = $line_bits|0;
 $byte_padded = $byte_padded|0;
 $x_offset = $x_offset|0;
 $y_offset = $y_offset|0;
 $source_height = $source_height|0;
 var $$07 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $acc$04 = 0, $acc$1 = 0, $acc$2 = 0, $acc$3 = 0, $acc$4 = 0, $acc$5 = 0, $acc$5$ = 0, $count$0 = 0, $count$1 = 0, $cur$0 = 0, $cur$1 = 0, $height$05 = 0, $indvars$iv = 0, $line_buff$0 = 0, $line_buff$16 = 0, $loaded$03 = 0;
 var $loaded$1 = 0, $loaded$2 = 0, $loaded$3 = 0, $loaded$4 = 0, $loaded$5 = 0, $loaded$5$ = 0, $scevgep = 0, $scevgep1112 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($target)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($target)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<(0);
 if ($4) {
  $5 = HEAP32[$target>>2]|0;
  $6 = (($5) + -1)|0;
  $7 = (0 - ($1))|0;
  $8 = Math_imul($6, $7)|0;
  $9 = (($3) + ($8)|0);
  $line_buff$0 = $9;
 } else {
  $line_buff$0 = $3;
 }
 $10 = ($source_height|0)>(0);
 if (!($10)) {
  return;
 }
 $11 = Math_imul($1, $y_offset)|0;
 $12 = $x_offset >> 3;
 $13 = (($11) + ($12))|0;
 $14 = (($line_buff$0) + ($13)|0);
 $15 = $x_offset & 7;
 $16 = (8 - ($15))|0;
 $17 = ($line_bits|0)>(7);
 $18 = (($line_bits) + -8)|0;
 $19 = ($15|0)==(0);
 $20 = ($byte_padded<<24>>24)==(0);
 $21 = $18 >>> 3;
 $22 = (($12) + ($21))|0;
 $23 = Math_imul($1, $y_offset)|0;
 $24 = (($22) + ($23))|0;
 $25 = (($24) + 1)|0;
 $scevgep = (($line_buff$0) + ($25)|0);
 $26 = (($line_bits) + -8)|0;
 $27 = $21 << 3;
 $28 = (($26) - ($27))|0;
 $$07 = $source;$acc$04 = 0;$height$05 = $source_height;$indvars$iv = $scevgep;$line_buff$16 = $14;$loaded$03 = 0;
 while(1) {
  if ($17) {
   $$1 = $$07;$acc$1 = $acc$04;$count$0 = $18;$cur$0 = $line_buff$16;$loaded$1 = $loaded$03;
   while(1) {
    $29 = ($loaded$1>>>0)<(8);
    if ($29) {
     $30 = ((($$1)) + 1|0);
     $31 = HEAP8[$$1>>0]|0;
     $32 = $31&255;
     $33 = (8 - ($loaded$1))|0;
     $34 = $32 << $33;
     $35 = $acc$1&65535;
     $36 = $34 | $35;
     $37 = $36&65535;
     $38 = (($loaded$1) + 8)|0;
     $$2 = $30;$acc$2 = $37;$loaded$2 = $38;
    } else {
     $$2 = $$1;$acc$2 = $acc$1;$loaded$2 = $loaded$1;
    }
    $39 = $acc$2&65535;
    $40 = ($acc$2&65535) >>> 8;
    $41 = $40&65535;
    if ($19) {
     $53 = HEAP8[$cur$0>>0]|0;
     $54 = $53&255;
     $55 = $54 | $41;
     $56 = $55&255;
     HEAP8[$cur$0>>0] = $56;
    } else {
     $42 = $41 >>> $15;
     $43 = HEAP8[$cur$0>>0]|0;
     $44 = $43&255;
     $45 = $44 | $42;
     $46 = $45&255;
     HEAP8[$cur$0>>0] = $46;
     $47 = $41 << $16;
     $48 = ((($cur$0)) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49&255;
     $51 = $50 | $47;
     $52 = $51&255;
     HEAP8[$48>>0] = $52;
    }
    $57 = ((($cur$0)) + 1|0);
    $58 = $39 << 8;
    $59 = $58&65535;
    $60 = (($loaded$2) + -8)|0;
    $61 = (($count$0) + -8)|0;
    $62 = ($61|0)>(-1);
    if ($62) {
     $$1 = $$2;$acc$1 = $59;$count$0 = $61;$cur$0 = $57;$loaded$1 = $60;
    } else {
     $$3 = $$2;$acc$3 = $59;$count$1 = $28;$cur$1 = $indvars$iv;$loaded$3 = $60;
     break;
    }
   }
  } else {
   $$3 = $$07;$acc$3 = $acc$04;$count$1 = $line_bits;$cur$1 = $line_buff$16;$loaded$3 = $loaded$03;
  }
  $63 = ($count$1|0)>(0);
  if ($63) {
   $64 = ($loaded$3|0)<($count$1|0);
   if ($64) {
    $65 = ((($$3)) + 1|0);
    $66 = HEAP8[$$3>>0]|0;
    $67 = $66&255;
    $68 = (8 - ($loaded$3))|0;
    $69 = $67 << $68;
    $70 = $acc$3&65535;
    $71 = $69 | $70;
    $72 = $71&65535;
    $73 = (($loaded$3) + 8)|0;
    $$4 = $65;$acc$4 = $72;$loaded$4 = $73;
   } else {
    $$4 = $$3;$acc$4 = $acc$3;$loaded$4 = $loaded$3;
   }
   $74 = $acc$4&65535;
   $75 = ($acc$4&65535) >>> 8;
   $76 = $75&65535;
   $77 = 255 >>> $count$1;
   $78 = $77 ^ 255;
   $79 = $76 & $78;
   $80 = $79 >>> $15;
   $81 = HEAP8[$cur$1>>0]|0;
   $82 = $81&255;
   $83 = $80 | $82;
   $84 = $83&255;
   HEAP8[$cur$1>>0] = $84;
   $85 = ($count$1|0)>($16|0);
   if ($85) {
    $86 = $79 << $16;
    $87 = ((($cur$1)) + 1|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88&255;
    $90 = $89 | $86;
    $91 = $90&255;
    HEAP8[$87>>0] = $91;
   }
   $92 = $74 << $count$1;
   $93 = $92&65535;
   $94 = (($loaded$4) - ($count$1))|0;
   $$5 = $$4;$acc$5 = $93;$loaded$5 = $94;
  } else {
   $$5 = $$3;$acc$5 = $acc$3;$loaded$5 = $loaded$3;
  }
  $loaded$5$ = $20 ? $loaded$5 : 0;
  $acc$5$ = $20 ? $acc$5 : 0;
  $95 = (($line_buff$16) + ($1)|0);
  $96 = (($height$05) + -1)|0;
  $97 = ($height$05|0)>(1);
  $scevgep1112 = (($indvars$iv) + ($1)|0);
  if ($97) {
   $$07 = $$5;$acc$04 = $acc$5$;$height$05 = $96;$indvars$iv = $scevgep1112;$line_buff$16 = $95;$loaded$03 = $loaded$5$;
  } else {
   break;
  }
 }
 return;
}
function _Load_SBit_Const_Metrics($range,$stream) {
 $range = $range|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = (_FT_Stream_ReadULong($stream,$error)|0);
 $1 = ((($range)) + 12|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$error>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($range)) + 16|0);
 $5 = (_FT_Stream_ReadFields($stream,23730,$4)|0);
 HEAP32[$error>>2] = $5;
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 $$0 = $7;
 STACKTOP = sp;return ($$0|0);
}
function _Load_SBit_Range_Codes($range,$stream,$load_offsets) {
 $range = $range|0;
 $stream = $stream|0;
 $load_offsets = $load_offsets|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $exitcond = 0, $n$01 = 0, $size$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_FT_Stream_ReadULong($stream,$error)|0);
 $3 = HEAP32[$error>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $32 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $5 = ((($range)) + 24|0);
 HEAP32[$5>>2] = $2;
 $6 = ($load_offsets<<24>>24)!=(0);
 do {
  if ($6) {
   $7 = (_ft_mem_realloc($1,4,0,$2,0,$error)|0);
   $8 = ((($range)) + 28|0);
   HEAP32[$8>>2] = $7;
   $9 = HEAP32[$error>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = $2 << 2;
    $size$0 = $11;
    break;
   } else {
    $32 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($32|0);
   }
  } else {
   $12 = $2 << 1;
   $size$0 = $12;
  }
 } while(0);
 $13 = (_ft_mem_realloc($1,2,0,$2,0,$error)|0);
 $14 = ((($range)) + 32|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$error>>2]|0;
 $16 = ($15|0)==(0);
 if (!($16)) {
  $32 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $17 = (_FT_Stream_EnterFrame($stream,$size$0)|0);
 HEAP32[$error>>2] = $17;
 $18 = ($17|0)==(0);
 if (!($18)) {
  $32 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($32|0);
 }
 $19 = ($2|0)==(0);
 if (!($19)) {
  $20 = ((($range)) + 8|0);
  $21 = ((($range)) + 28|0);
  $n$01 = 0;
  while(1) {
   $22 = (_FT_Stream_GetUShort($stream)|0);
   $23 = HEAP32[$14>>2]|0;
   $24 = (($23) + ($n$01<<1)|0);
   HEAP16[$24>>1] = $22;
   if ($6) {
    $25 = HEAP32[$20>>2]|0;
    $26 = (_FT_Stream_GetUShort($stream)|0);
    $27 = $26&65535;
    $28 = (($27) + ($25))|0;
    $29 = HEAP32[$21>>2]|0;
    $30 = (($29) + ($n$01<<2)|0);
    HEAP32[$30>>2] = $28;
   }
   $31 = (($n$01) + 1)|0;
   $exitcond = ($31|0)==($2|0);
   if ($exitcond) {
    break;
   } else {
    $n$01 = $31;
   }
  }
 }
 _FT_Stream_ExitFrame($stream);
 $32 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($32|0);
}
function _tt_face_load_hmtx($face,$stream,$vertical) {
 $face = $face|0;
 $stream = $stream|0;
 $vertical = $vertical|0;
 var $$ = 0, $$2 = 0, $$3 = 0, $$op = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cur$09 = 0, $cur3$0$lcssa = 0, $cur3$06 = 0, $cur3$14 = 0, $error = 0, $longs$0$in = 0, $num_longs$2 = 0, $or$cond = 0, $p$0$lcssa = 0, $p$08 = 0, $p$15 = 0, $scevgep = 0, $scevgep16 = 0, $scevgep19 = 0, $scevgep20 = 0, $scevgep21 = 0, $scevgep26 = 0;
 var $shorts$0$in = 0, $smax15 = 0, $table_len = 0, $uglygep = 0, $uglygep18 = 0, $uglygep24 = 0, $uglygep2425 = 0, $umax = 0, $umax22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 4|0;
 $table_len = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($vertical<<24>>24)!=(0);
 $3 = ((($face)) + 508|0);
 $4 = HEAP32[$3>>2]|0;
 do {
  if ($2) {
   $5 = (FUNCTION_TABLE_iiiii[$4 & 63]($face,1986884728,$stream,$table_len)|0);
   HEAP32[$error>>2] = $5;
   $6 = ($5|0)==(0);
   if ($6) {
    $7 = ((($face)) + 340|0);
    $8 = ((($face)) + 336|0);
    $9 = ((($face)) + 334|0);
    $10 = HEAP16[$9>>1]|0;
    $11 = $10&65535;
    $12 = HEAP32[$table_len>>2]|0;
    $13 = $12 >>> 2;
    $14 = ($11>>>0)>($13>>>0);
    $$ = $14 ? $13 : $11;
    HEAP16[$9>>1] = 0;
    $longs$0$in = $8;$num_longs$2 = $$;$shorts$0$in = $7;
    break;
   } else {
    $118 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($118|0);
   }
  } else {
   $15 = (FUNCTION_TABLE_iiiii[$4 & 63]($face,1752003704,$stream,$table_len)|0);
   HEAP32[$error>>2] = $15;
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = ((($face)) + 256|0);
    $18 = ((($face)) + 252|0);
    $19 = ((($face)) + 250|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = $20&65535;
    $22 = HEAP32[$table_len>>2]|0;
    $23 = $22 >>> 2;
    $24 = ($21>>>0)>($23>>>0);
    $$2 = $24 ? $23 : $21;
    HEAP16[$19>>1] = 0;
    $longs$0$in = $18;$num_longs$2 = $$2;$shorts$0$in = $17;
    break;
   } else {
    $118 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($118|0);
   }
  }
 } while(0);
 $25 = ((($face)) + 264|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = (($27) - ($num_longs$2))|0;
 $29 = HEAP32[$table_len>>2]|0;
 $30 = $num_longs$2 << 2;
 $31 = (($29) - ($30))|0;
 $32 = $31 >>> 1;
 $33 = ($28|0)<(0);
 $$3 = $33 ? 0 : $28;
 $34 = (_ft_mem_realloc($1,4,0,$num_longs$2,0,$error)|0);
 HEAP32[$longs$0$in>>2] = $34;
 $35 = HEAP32[$error>>2]|0;
 $36 = ($35|0)==(0);
 if (!($36)) {
  $118 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($118|0);
 }
 $37 = (_ft_mem_realloc($1,2,0,$$3,0,$error)|0);
 HEAP32[$shorts$0$in>>2] = $37;
 $38 = HEAP32[$error>>2]|0;
 $39 = ($38|0)==(0);
 if (!($39)) {
  $118 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($118|0);
 }
 $40 = HEAP32[$table_len>>2]|0;
 $41 = (_FT_Stream_EnterFrame($stream,$40)|0);
 HEAP32[$error>>2] = $41;
 $42 = ($41|0)==(0);
 if (!($42)) {
  $118 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($118|0);
 }
 $43 = ((($stream)) + 32|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$longs$0$in>>2]|0;
 $46 = (($45) + ($num_longs$2<<2)|0);
 $47 = ($num_longs$2|0)>(0);
 if ($47) {
  $48 = $45;
  $scevgep20 = (($45) + ($num_longs$2<<2)|0);
  $scevgep21 = ((($45)) + 4|0);
  $49 = ($scevgep20>>>0)>($scevgep21>>>0);
  $umax22 = $49 ? $scevgep20 : $scevgep21;
  $50 = $48 ^ -1;
  $uglygep24 = (($umax22) + ($50)|0);
  $uglygep2425 = $uglygep24;
  $51 = (($uglygep2425) + 4)|0;
  $52 = $51 & -4;
  $cur$09 = $45;$p$08 = $44;
  while(1) {
   $53 = HEAP8[$p$08>>0]|0;
   $54 = $53&255;
   $55 = $54 << 8;
   $56 = ((($p$08)) + 1|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $55 | $58;
   $60 = $59&65535;
   HEAP16[$cur$09>>1] = $60;
   $61 = ((($p$08)) + 4|0);
   $62 = ((($p$08)) + 2|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63 << 24 >> 24;
   $65 = $64 << 8;
   $66 = ((($p$08)) + 3|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = $65 | $68;
   $70 = $69&65535;
   $71 = ((($cur$09)) + 2|0);
   HEAP16[$71>>1] = $70;
   $72 = ((($cur$09)) + 4|0);
   $73 = ($72>>>0)<($46>>>0);
   if ($73) {
    $cur$09 = $72;$p$08 = $61;
   } else {
    break;
   }
  }
  $scevgep26 = (($44) + ($52)|0);
  $p$0$lcssa = $scevgep26;
 } else {
  $p$0$lcssa = $44;
 }
 $74 = HEAP32[$shorts$0$in>>2]|0;
 $75 = ($$3|0)<($32|0);
 $76 = $75 ? $$3 : $32;
 $77 = (($74) + ($76<<1)|0);
 $78 = ($76|0)>(0);
 if ($78) {
  $79 = $74;
  $80 = $26&65535;
  $81 = (($80) - ($num_longs$2))|0;
  $82 = ($81|0)>(0);
  $$op = $81 ^ -1;
  $83 = $82 ? $$op : -1;
  $84 = $num_longs$2 << 2;
  $85 = (($29) - ($84))|0;
  $86 = $85 >>> 1;
  $87 = $86 ^ -1;
  $88 = ($83|0)>($87|0);
  $smax15 = $88 ? $83 : $87;
  $89 = $smax15 ^ -1;
  $scevgep = (($74) + ($89<<1)|0);
  $scevgep16 = ((($74)) + 2|0);
  $90 = ($scevgep>>>0)>($scevgep16>>>0);
  $umax = $90 ? $scevgep : $scevgep16;
  $91 = $79 ^ -1;
  $uglygep = (($umax) + ($91)|0);
  $uglygep18 = $uglygep;
  $92 = $uglygep18 >>> 1;
  $93 = (($92) + 1)|0;
  $cur3$06 = $74;$p$15 = $p$0$lcssa;
  while(1) {
   $94 = ((($p$15)) + 2|0);
   $95 = HEAP8[$p$15>>0]|0;
   $96 = $95 << 24 >> 24;
   $97 = $96 << 8;
   $98 = ((($p$15)) + 1|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = $99&255;
   $101 = $97 | $100;
   $102 = $101&65535;
   HEAP16[$cur3$06>>1] = $102;
   $103 = ((($cur3$06)) + 2|0);
   $104 = ($103>>>0)<($77>>>0);
   if ($104) {
    $cur3$06 = $103;$p$15 = $94;
   } else {
    break;
   }
  }
  $scevgep19 = (($74) + ($93<<1)|0);
  $cur3$0$lcssa = $scevgep19;
 } else {
  $cur3$0$lcssa = $74;
 }
 $105 = ($$3|0)>($32|0);
 $106 = ($32|0)!=(0);
 $or$cond = $106 & $105;
 if ($or$cond) {
  $107 = (($32) + -1)|0;
  $108 = HEAP32[$shorts$0$in>>2]|0;
  $109 = (($108) + ($107<<1)|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = (($108) + ($$3<<1)|0);
  $112 = ($cur3$0$lcssa>>>0)<($111>>>0);
  if ($112) {
   $cur3$14 = $cur3$0$lcssa;
   while(1) {
    HEAP16[$cur3$14>>1] = $110;
    $113 = ((($cur3$14)) + 2|0);
    $114 = ($113>>>0)<($111>>>0);
    if ($114) {
     $cur3$14 = $113;
    } else {
     break;
    }
   }
  }
 }
 _FT_Stream_ExitFrame($stream);
 $115 = $num_longs$2&65535;
 if ($2) {
  $116 = ((($face)) + 334|0);
  HEAP16[$116>>1] = $115;
  $118 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($118|0);
 } else {
  $117 = ((($face)) + 250|0);
  HEAP16[$117>>1] = $115;
  $118 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($118|0);
 }
 return (0)|0;
}
function _tt_face_load_hhea($face,$stream,$vertical) {
 $face = $face|0;
 $stream = $stream|0;
 $vertical = $vertical|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $header$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($vertical<<24>>24)==(0);
 $1 = ((($face)) + 508|0);
 $2 = HEAP32[$1>>2]|0;
 do {
  if ($0) {
   $6 = (FUNCTION_TABLE_iiiii[$2 & 63]($face,1751672161,$stream,0)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = ((($face)) + 216|0);
    $header$0 = $8;
    break;
   } else {
    $error$0 = $6;
    return ($error$0|0);
   }
  } else {
   $3 = (FUNCTION_TABLE_iiiii[$2 & 63]($face,1986553185,$stream,0)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = ((($face)) + 300|0);
    $header$0 = $5;
    break;
   } else {
    $error$0 = $3;
    return ($error$0|0);
   }
  }
 } while(0);
 $9 = (_FT_Stream_ReadFields($stream,23770,$header$0)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $error$0 = $9;
  return ($error$0|0);
 }
 $11 = ((($header$0)) + 36|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($header$0)) + 40|0);
 HEAP32[$12>>2] = 0;
 $error$0 = 0;
 return ($error$0|0);
}
function _tt_face_get_metrics($face,$vertical,$gindex,$abearing,$aadvance) {
 $face = $face|0;
 $vertical = $vertical|0;
 $gindex = $gindex|0;
 $abearing = $abearing|0;
 $aadvance = $aadvance|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, $storemerge$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 300|0);
 $1 = ((($face)) + 216|0);
 $2 = ($vertical<<24>>24)!=(0);
 $$sink = $2 ? $0 : $1;
 $3 = ((($$sink)) + 34|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = ($4<<16>>16)==(0);
 if (!($6)) {
  $7 = ((($$sink)) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   $10 = ((($face)) + 264|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = $11&65535;
   $13 = ($12>>>0)>($gindex>>>0);
   if ($13) {
    $14 = ($5>>>0)>($gindex>>>0);
    if ($14) {
     $15 = (((($8) + ($gindex<<2)|0)) + 2|0);
     $16 = HEAP16[$15>>1]|0;
     HEAP16[$abearing>>1] = $16;
     $17 = (($8) + ($gindex<<2)|0);
     $storemerge$in = $17;
    } else {
     $18 = (($gindex) - ($5))|0;
     $19 = ((($$sink)) + 40|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + ($18<<1)|0);
     $22 = HEAP16[$21>>1]|0;
     HEAP16[$abearing>>1] = $22;
     $23 = (($5) + -1)|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (($24) + ($23<<2)|0);
     $storemerge$in = $25;
    }
    $storemerge = HEAP16[$storemerge$in>>1]|0;
    HEAP16[$aadvance>>1] = $storemerge;
    return 0;
   }
  }
 }
 HEAP16[$aadvance>>1] = 0;
 HEAP16[$abearing>>1] = 0;
 return 0;
}
function _TT_Get_HMetrics($face,$idx,$lsb,$aw) {
 $face = $face|0;
 $idx = $idx|0;
 $lsb = $lsb|0;
 $aw = $aw|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 532|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 156|0);
 $3 = HEAP32[$2>>2]|0;
 (FUNCTION_TABLE_iiiiii[$3 & 63]($face,0,$idx,$lsb,$aw)|0);
 return;
}
function _TT_Get_VMetrics($face,$idx,$tsb,$ah) {
 $face = $face|0;
 $idx = $idx|0;
 $tsb = $tsb|0;
 $ah = $ah|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 296|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  HEAP16[$tsb>>1] = 0;
  $7 = ((($face)) + 68|0);
  $8 = HEAP16[$7>>1]|0;
  HEAP16[$ah>>1] = $8;
  return;
 } else {
  $3 = ((($face)) + 532|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4)) + 156|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiiiii[$6 & 63]($face,1,$idx,$tsb,$ah)|0);
  return;
 }
}
function _TT_Init_Glyph_Loading($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 512|0);
 HEAP32[$0>>2] = 41;
 $1 = ((($face)) + 520|0);
 HEAP32[$1>>2] = 52;
 $2 = ((($face)) + 524|0);
 HEAP32[$2>>2] = 53;
 $3 = ((($face)) + 528|0);
 HEAP32[$3>>2] = 54;
 $4 = ((($face)) + 516|0);
 HEAP32[$4>>2] = 66;
 return;
}
function _TT_Load_Glyph($size,$glyph,$glyph_index,$load_flags) {
 $size = $size|0;
 $glyph = $glyph|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $9 = 0, $loader = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $loader = sp;
 $0 = ((($size)) + 112|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(-1);
 $3 = $load_flags & 8;
 $4 = ($3|0)==(0);
 $or$cond = $4 & $2;
 if ($or$cond) {
  $5 = (_load_sbit_image($size,$glyph,$glyph_index,$load_flags)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = ((($glyph)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 & 1;
   $12 = ($11|0)==(0);
   if ($12) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   (_tt_loader_init($loader,$size,$glyph,$load_flags,1)|0);
   (_load_truetype_glyph($loader,$glyph_index,0,1)|0);
   $13 = ((($loader)) + 60|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($glyph)) + 56|0);
   HEAP32[$15>>2] = $14;
   $16 = ((($loader)) + 176|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($loader)) + 48|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($17))|0;
   $21 = ((($loader)) + 180|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) - ($22))|0;
   $24 = ((($glyph)) + 60|0);
   HEAP32[$24>>2] = $23;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $25 = $load_flags & 1;
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $27 = ((($size)) + 108|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = ($28<<24>>24)==(0);
  if ($29) {
   $$0 = 36;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $30 = $load_flags & 16384;
 $31 = ($30|0)==(0);
 if (!($31)) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = (_tt_loader_init($loader,$size,$glyph,$load_flags,0)|0);
 $33 = ($32|0)==(0);
 if (!($33)) {
  $$0 = $32;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = ((($glyph)) + 72|0);
 HEAP32[$34>>2] = 1869968492;
 $35 = ((($glyph)) + 128|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($glyph)) + 108|0);
 $37 = ((($glyph)) + 124|0);
 HEAP32[$37>>2] = 0;
 $38 = (_load_truetype_glyph($loader,$glyph_index,0,0)|0);
 $39 = ($38|0)==(0);
 if ($39) {
  $40 = HEAP32[$34>>2]|0;
  $41 = ($40|0)==(1668246896);
  $42 = ((($loader)) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  if ($41) {
   $44 = ((($43)) + 48|0);
   $45 = HEAP32[$44>>2]|0;
   HEAP32[$35>>2] = $45;
   $46 = HEAP32[$42>>2]|0;
   $47 = ((($46)) + 52|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ((($glyph)) + 132|0);
   HEAP32[$49>>2] = $48;
  } else {
   $50 = ((($43)) + 20|0);
   ;HEAP32[$36>>2]=HEAP32[$50>>2]|0;HEAP32[$36+4>>2]=HEAP32[$50+4>>2]|0;HEAP32[$36+8>>2]=HEAP32[$50+8>>2]|0;HEAP32[$36+12>>2]=HEAP32[$50+12>>2]|0;HEAP32[$36+16>>2]=HEAP32[$50+16>>2]|0;
   $51 = HEAP32[$37>>2]|0;
   $52 = $51 & -513;
   HEAP32[$37>>2] = $52;
   $53 = ((($loader)) + 68|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(0);
   if (!($55)) {
    $56 = (0 - ($54))|0;
    _FT_Outline_Translate($36,$56,0);
   }
  }
  $57 = $load_flags & 2;
  $58 = ($57|0)==(0);
  L26: do {
   if ($58) {
    $59 = ((($loader)) + 160|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ((($60)) + 337|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = ($62<<24>>24)==(0);
    if ($63) {
     $74 = HEAP32[$37>>2]|0;
     $75 = $74 | 8;
     HEAP32[$37>>2] = $75;
     break;
    }
    $64 = ((($60)) + 340|0);
    $65 = HEAP32[$64>>2]|0;
    switch ($65|0) {
    case 1:  {
     break L26;
     break;
    }
    case 0:  {
     $66 = HEAP32[$37>>2]|0;
     $67 = $66 | 32;
     HEAP32[$37>>2] = $67;
     break L26;
     break;
    }
    case 4:  {
     $68 = HEAP32[$37>>2]|0;
     $69 = $68 | 48;
     HEAP32[$37>>2] = $69;
     break L26;
     break;
    }
    case 5:  {
     $70 = HEAP32[$37>>2]|0;
     $71 = $70 | 16;
     HEAP32[$37>>2] = $71;
     break L26;
     break;
    }
    default: {
     $72 = HEAP32[$37>>2]|0;
     $73 = $72 | 8;
     HEAP32[$37>>2] = $73;
     break L26;
    }
    }
   }
  } while(0);
  _compute_glyph_metrics($loader,$glyph_index);
 }
 if ($26) {
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 $76 = ((($size)) + 14|0);
 $77 = HEAP16[$76>>1]|0;
 $78 = ($77&65535)<(24);
 if (!($78)) {
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 $79 = HEAP32[$37>>2]|0;
 $80 = $79 | 256;
 HEAP32[$37>>2] = $80;
 $$0 = $38;
 STACKTOP = sp;return ($$0|0);
}
function _TT_Access_Glyph_Frame($loader,$glyph_index,$offset,$byte_count) {
 $loader = $loader|0;
 $glyph_index = $glyph_index|0;
 $offset = $offset|0;
 $byte_count = $byte_count|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_FT_Stream_Seek($1,$offset)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = (_FT_Stream_EnterFrame($1,$byte_count)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  return ($$0|0);
 }
 $6 = ((($1)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($loader)) + 200|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($1)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($loader)) + 204|0);
 HEAP32[$11>>2] = $10;
 $$0 = 0;
 return ($$0|0);
}
function _TT_Load_Glyph_Header($loader) {
 $loader = $loader|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 200|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($loader)) + 204|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 10|0);
 $5 = ($4>>>0)>($3>>>0);
 if ($5) {
  $$0 = 20;
  return ($$0|0);
 }
 $6 = HEAP8[$1>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = $7 << 8;
 $9 = ((($1)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $8 | $11;
 $13 = $12&65535;
 $14 = ((($loader)) + 32|0);
 HEAP16[$14>>1] = $13;
 $15 = ((($1)) + 2|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16 << 24 >> 24;
 $18 = $17 << 8;
 $19 = ((($1)) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $18 | $21;
 $23 = ((($loader)) + 36|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($1)) + 4|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 << 24 >> 24;
 $27 = $26 << 8;
 $28 = ((($1)) + 5|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $27 | $30;
 $32 = ((($loader)) + 40|0);
 HEAP32[$32>>2] = $31;
 $33 = ((($1)) + 6|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34 << 24 >> 24;
 $36 = $35 << 8;
 $37 = ((($1)) + 7|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $36 | $39;
 $41 = ((($loader)) + 44|0);
 HEAP32[$41>>2] = $40;
 $42 = ((($1)) + 8|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43 << 24 >> 24;
 $45 = $44 << 8;
 $46 = ((($1)) + 9|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $47&255;
 $49 = $45 | $48;
 $50 = ((($loader)) + 48|0);
 HEAP32[$50>>2] = $49;
 HEAP32[$0>>2] = $4;
 $$0 = 0;
 return ($$0|0);
}
function _TT_Load_Simple_Glyph($load) {
 $load = $load|0;
 var $$ = 0, $$3 = 0, $$lcssa = 0, $$pn = 0, $$pn$lcssa = 0, $$pn10 = 0, $$pn10$in = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cont$0 = 0, $error$0 = 0, $flag$0$be = 0, $flag$038 = 0, $flag$229 = 0, $flag$325 = 0, $n_points$05 = 0, $n_points$069 = 0, $p$0 = 0, $p$0$lcssa = 0;
 var $p$1$be = 0, $p$1$lcssa = 0, $p$139 = 0, $p$230 = 0, $p$3 = 0, $p$3$lcssa = 0, $p$4$lcssa = 0, $p$426 = 0, $p$5 = 0, $prev_cont$0 = 0, $scevgep$sum = 0, $scevgep48 = 0, $scevgep49 = 0, $vec$027 = 0, $vec$123 = 0, $x$028 = 0, $x$124 = 0, $y$0 = 0, $y1$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($load)) + 200|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($load)) + 204|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($load)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($load)) + 32|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = HEAP32[$load>>2]|0;
 $10 = ($7<<16>>16)==(0);
 if (!($10)) {
  $11 = ((($5)) + 20|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = ((($5)) + 56|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15 << 16 >> 16;
  $17 = (($13) + ($8))|0;
  $18 = (($17) + ($16))|0;
  $19 = ((($5)) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($18>>>0)>($20>>>0);
  if ($21) {
   $22 = (_FT_GlyphLoader_CheckPoints($5,0,$8)|0);
   $23 = ($22|0)==(0);
   if (!($23)) {
    $error$0 = $22;
    return ($error$0|0);
   }
  }
  $24 = ($7<<16>>16)>(4094);
  if ($24) {
   $error$0 = 20;
   return ($error$0|0);
  }
 }
 $$pn10$in = ((($5)) + 68|0);
 $$pn10 = HEAP32[$$pn10$in>>2]|0;
 $25 = (($$pn10) + ($8<<1)|0);
 $26 = $8 << 1;
 $27 = (($26) + 2)|0;
 $28 = (($1) + ($27)|0);
 $29 = ($28>>>0)>($3>>>0);
 if ($29) {
  $error$0 = 20;
  return ($error$0|0);
 }
 $30 = HEAP8[$1>>0]|0;
 $31 = $30 << 24 >> 24;
 $32 = $31 << 8;
 $33 = ((($1)) + 1|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = $32 | $35;
 $37 = ($7<<16>>16)>(0);
 if ($37) {
  $38 = $36&65535;
  HEAP16[$$pn10>>1] = $38;
 }
 $39 = ($36|0)<(0);
 if ($39) {
  $error$0 = 20;
  return ($error$0|0);
 } else {
  $$pn = $$pn10;$40 = $1;$prev_cont$0 = $36;
 }
 while(1) {
  $p$0 = ((($40)) + 2|0);
  $cont$0 = ((($$pn)) + 2|0);
  $41 = ($cont$0>>>0)<($25>>>0);
  if (!($41)) {
   $$lcssa = $40;$$pn$lcssa = $$pn;$p$0$lcssa = $p$0;
   break;
  }
  $42 = HEAP8[$p$0>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = $43 << 8;
  $45 = ((($40)) + 3|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $44 | $47;
  $49 = $48&65535;
  HEAP16[$cont$0>>1] = $49;
  $50 = ($48|0)>($prev_cont$0|0);
  if ($50) {
   $$pn = $cont$0;$40 = $p$0;$prev_cont$0 = $48;
  } else {
   $error$0 = 20;
   label = 49;
   break;
  }
 }
 if ((label|0) == 49) {
  return ($error$0|0);
 }
 do {
  if ($37) {
   $51 = HEAP16[$$pn$lcssa>>1]|0;
   $52 = $51 << 16 >> 16;
   $53 = (($52) + 1)|0;
   $54 = ($51<<16>>16)<(-1);
   if ($54) {
    $error$0 = 20;
    return ($error$0|0);
   } else {
    $55 = (($52) + 5)|0;
    $56 = ($55|0)==(0);
    if ($56) {
     $n_points$069 = $53;
     break;
    } else {
     $64 = $55;$n_points$05 = $53;
     label = 14;
     break;
    }
   }
  } else {
   $64 = 4;$n_points$05 = 0;
   label = 14;
  }
 } while(0);
 if ((label|0) == 14) {
  $57 = ((($5)) + 22|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58 << 16 >> 16;
  $60 = ((($5)) + 58|0);
  $61 = HEAP16[$60>>1]|0;
  $62 = $61 << 16 >> 16;
  $63 = (($59) + ($64))|0;
  $65 = (($63) + ($62))|0;
  $66 = ((($5)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($65>>>0)>($67>>>0);
  if ($68) {
   $69 = (_FT_GlyphLoader_CheckPoints($5,$64,0)|0);
   $70 = ($69|0)==(0);
   if ($70) {
    $n_points$069 = $n_points$05;
   } else {
    $error$0 = $69;
    return ($error$0|0);
   }
  } else {
   $n_points$069 = $n_points$05;
  }
 }
 $71 = ((($load)) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($72)) + 140|0);
 HEAP32[$73>>2] = 0;
 $74 = HEAP32[$71>>2]|0;
 $75 = ((($74)) + 136|0);
 HEAP32[$75>>2] = 0;
 $76 = ((($$lcssa)) + 4|0);
 $77 = ($76>>>0)>($3>>>0);
 if ($77) {
  $error$0 = 20;
  return ($error$0|0);
 }
 $78 = HEAP8[$p$0$lcssa>>0]|0;
 $79 = $78&255;
 $80 = $79 << 8;
 $81 = ((($$lcssa)) + 3|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = $80 | $83;
 $85 = ((($9)) + 286|0);
 $86 = HEAP16[$85>>1]|0;
 $87 = $86&65535;
 $88 = ($84>>>0)>($87>>>0);
 if ($88) {
  $error$0 = 22;
  return ($error$0|0);
 }
 $89 = $3;
 $90 = $76;
 $91 = (($89) - ($90))|0;
 $92 = ($91|0)<($84|0);
 if ($92) {
  $error$0 = 22;
  return ($error$0|0);
 }
 $93 = ((($load)) + 16|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $94 & 2;
 $96 = ($95|0)==(0);
 if ($96) {
  $97 = HEAP32[$71>>2]|0;
  $98 = ((($97)) + 140|0);
  HEAP32[$98>>2] = $84;
  $99 = ((($load)) + 160|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($100)) + 392|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = HEAP32[$71>>2]|0;
  $104 = ((($103)) + 136|0);
  HEAP32[$104>>2] = $102;
  $105 = HEAP32[$99>>2]|0;
  $106 = ((($105)) + 392|0);
  $107 = HEAP32[$106>>2]|0;
  _memcpy(($107|0),($76|0),($84|0))|0;
 }
 $$sum = (($84) + 4)|0;
 $108 = (($$lcssa) + ($$sum)|0);
 $109 = ((($5)) + 64|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = (($110) + ($n_points$069)|0);
 $112 = ($n_points$069|0)>(0);
 L45: do {
  if ($112) {
   $flag$038 = $110;$p$139 = $108;
   while(1) {
    $119 = ((($p$139)) + 1|0);
    $120 = ($119>>>0)>($3>>>0);
    if ($120) {
     $error$0 = 20;
     label = 49;
     break;
    }
    $117 = HEAP8[$p$139>>0]|0;
    $121 = ((($flag$038)) + 1|0);
    HEAP8[$flag$038>>0] = $117;
    $122 = $117 & 8;
    $123 = ($122<<24>>24)==(0);
    if ($123) {
     $flag$0$be = $121;$p$1$be = $119;
    } else {
     $125 = ((($p$139)) + 2|0);
     $126 = ($125>>>0)>($3>>>0);
     if ($126) {
      $error$0 = 20;
      label = 49;
      break;
     }
     $114 = HEAP8[$119>>0]|0;
     $127 = $114&255;
     $$sum1 = (($127) + 1)|0;
     $128 = (($flag$038) + ($$sum1)|0);
     $129 = ($128>>>0)>($111>>>0);
     if ($129) {
      $error$0 = 20;
      label = 49;
      break;
     }
     $130 = ($114<<24>>24)==(0);
     if ($130) {
      $flag$0$be = $121;$p$1$be = $125;
     } else {
      $113 = (($114) + -1)<<24>>24;
      $scevgep49 = ((($flag$038)) + 1|0);
      $115 = $113&255;
      $116 = (($115) + 1)|0;
      _memset(($scevgep49|0),($117|0),($116|0))|0;
      $118 = $113&255;
      $scevgep$sum = (($118) + 2)|0;
      $scevgep48 = (($flag$038) + ($scevgep$sum)|0);
      $flag$0$be = $scevgep48;$p$1$be = $125;
     }
    }
    $124 = ($flag$0$be>>>0)<($111>>>0);
    if ($124) {
     $flag$038 = $flag$0$be;$p$139 = $p$1$be;
    } else {
     $p$1$lcssa = $p$1$be;
     break L45;
    }
   }
   if ((label|0) == 49) {
    return ($error$0|0);
   }
  } else {
   $p$1$lcssa = $108;
  }
 } while(0);
 $131 = ((($5)) + 60|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($132) + ($n_points$069<<3)|0);
 $134 = ($p$1$lcssa>>>0)>($3>>>0);
 if ($134) {
  $error$0 = 20;
  return ($error$0|0);
 }
 $135 = ($n_points$069|0)>(0);
 L63: do {
  if ($135) {
   $136 = HEAP32[$109>>2]|0;
   $flag$229 = $136;$p$230 = $p$1$lcssa;$vec$027 = $132;$x$028 = 0;
   while(1) {
    $137 = HEAP8[$flag$229>>0]|0;
    $138 = $137&255;
    $139 = $138 & 2;
    $140 = ($139|0)==(0);
    if ($140) {
     $148 = $138 & 16;
     $149 = ($148|0)==(0);
     if ($149) {
      $150 = ((($p$230)) + 2|0);
      $151 = ($150>>>0)>($3>>>0);
      if ($151) {
       $error$0 = 20;
       label = 49;
       break;
      }
      $152 = HEAP8[$p$230>>0]|0;
      $153 = $152 << 24 >> 24;
      $154 = $153 << 8;
      $155 = ((($p$230)) + 1|0);
      $156 = HEAP8[$155>>0]|0;
      $157 = $156&255;
      $158 = $154 | $157;
      $p$3 = $150;$y$0 = $158;
     } else {
      $p$3 = $p$230;$y$0 = 0;
     }
    } else {
     $141 = ((($p$230)) + 1|0);
     $142 = ($141>>>0)>($3>>>0);
     if ($142) {
      $error$0 = 20;
      label = 49;
      break;
     }
     $143 = HEAP8[$p$230>>0]|0;
     $144 = $143&255;
     $145 = $138 & 16;
     $146 = ($145|0)==(0);
     $147 = (0 - ($144))|0;
     $$ = $146 ? $147 : $144;
     $p$3 = $141;$y$0 = $$;
    }
    $159 = (($y$0) + ($x$028))|0;
    HEAP32[$vec$027>>2] = $159;
    $160 = $138 & 237;
    $161 = $160&255;
    HEAP8[$flag$229>>0] = $161;
    $162 = ((($vec$027)) + 8|0);
    $163 = ((($flag$229)) + 1|0);
    $164 = ($162>>>0)<($133>>>0);
    if ($164) {
     $flag$229 = $163;$p$230 = $p$3;$vec$027 = $162;$x$028 = $159;
    } else {
     $p$3$lcssa = $p$3;
     label = 39;
     break;
    }
   }
   if ((label|0) == 39) {
    $165 = HEAP32[$131>>2]|0;
    $166 = (($165) + ($n_points$069<<3)|0);
    $167 = ($n_points$069|0)>(0);
    if (!($167)) {
     $p$4$lcssa = $p$3$lcssa;
     break;
    }
    $168 = HEAP32[$109>>2]|0;
    $flag$325 = $168;$p$426 = $p$3$lcssa;$vec$123 = $165;$x$124 = 0;
    while(1) {
     $169 = HEAP8[$flag$325>>0]|0;
     $170 = $169&255;
     $171 = $170 & 4;
     $172 = ($171|0)==(0);
     if ($172) {
      $180 = $170 & 32;
      $181 = ($180|0)==(0);
      if ($181) {
       $182 = ((($p$426)) + 2|0);
       $183 = ($182>>>0)>($3>>>0);
       if ($183) {
        $error$0 = 20;
        label = 49;
        break;
       }
       $184 = HEAP8[$p$426>>0]|0;
       $185 = $184 << 24 >> 24;
       $186 = $185 << 8;
       $187 = ((($p$426)) + 1|0);
       $188 = HEAP8[$187>>0]|0;
       $189 = $188&255;
       $190 = $186 | $189;
       $p$5 = $182;$y1$0 = $190;
      } else {
       $p$5 = $p$426;$y1$0 = 0;
      }
     } else {
      $173 = ((($p$426)) + 1|0);
      $174 = ($173>>>0)>($3>>>0);
      if ($174) {
       $error$0 = 20;
       label = 49;
       break;
      }
      $175 = HEAP8[$p$426>>0]|0;
      $176 = $175&255;
      $177 = $170 & 32;
      $178 = ($177|0)==(0);
      $179 = (0 - ($176))|0;
      $$3 = $178 ? $179 : $176;
      $p$5 = $173;$y1$0 = $$3;
     }
     $191 = (($y1$0) + ($x$124))|0;
     $192 = ((($vec$123)) + 4|0);
     HEAP32[$192>>2] = $191;
     $193 = $170 & 1;
     $194 = $193&255;
     HEAP8[$flag$325>>0] = $194;
     $195 = ((($vec$123)) + 8|0);
     $196 = ((($flag$325)) + 1|0);
     $197 = ($195>>>0)<($166>>>0);
     if ($197) {
      $flag$325 = $196;$p$426 = $p$5;$vec$123 = $195;$x$124 = $191;
     } else {
      $p$4$lcssa = $p$5;
      break L63;
     }
    }
    if ((label|0) == 49) {
     return ($error$0|0);
    }
   }
   else if ((label|0) == 49) {
    return ($error$0|0);
   }
  } else {
   $p$4$lcssa = $p$1$lcssa;
  }
 } while(0);
 $198 = $n_points$069&65535;
 $199 = ((($5)) + 58|0);
 HEAP16[$199>>1] = $198;
 $200 = ((($5)) + 56|0);
 HEAP16[$200>>1] = $7;
 HEAP32[$0>>2] = $p$4$lcssa;
 $error$0 = 0;
 return ($error$0|0);
}
function _TT_Load_Composite_Glyph($loader) {
 $loader = $loader|0;
 var $$lcssa28 = 0, $$lcssa29 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$1 = 0, $error$0 = 0, $num_subglyphs$0 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$lcssa = 0;
 var $storemerge = 0, $xx$0 = 0, $xy$0 = 0, $yx$0 = 0, $yy$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 200|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($loader)) + 204|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($loader)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 88|0);
 $num_subglyphs$0 = 0;$p$0 = $1;
 while(1) {
  $7 = (($num_subglyphs$0) + 1)|0;
  $8 = (_FT_GlyphLoader_CheckSubGlyphs($5,$7)|0);
  $9 = ($8|0)==(0);
  if (!($9)) {
   $error$0 = $8;
   label = 21;
   break;
  }
  $10 = ((($p$0)) + 4|0);
  $11 = ($10>>>0)>($3>>>0);
  if ($11) {
   $error$0 = 21;
   label = 21;
   break;
  }
  $12 = HEAP32[$6>>2]|0;
  $13 = (((($12) + ($num_subglyphs$0<<5)|0)) + 12|0);
  HEAP32[$13>>2] = 0;
  $14 = (((($12) + ($num_subglyphs$0<<5)|0)) + 8|0);
  HEAP32[$14>>2] = 0;
  $15 = HEAP8[$p$0>>0]|0;
  $16 = $15&255;
  $17 = $16 << 8;
  $18 = ((($p$0)) + 1|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $17 | $20;
  $22 = $21&65535;
  $23 = (((($12) + ($num_subglyphs$0<<5)|0)) + 4|0);
  HEAP16[$23>>1] = $22;
  $24 = ((($p$0)) + 2|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 8;
  $28 = ((($p$0)) + 3|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $27 | $30;
  $32 = (($12) + ($num_subglyphs$0<<5)|0);
  HEAP32[$32>>2] = $31;
  $33 = HEAP16[$23>>1]|0;
  $34 = $33 & 1;
  $35 = $34&65535;
  $36 = $35 << 1;
  $37 = (($36) + 2)|0;
  $38 = $33&65535;
  $39 = $38 & 8;
  $40 = ($39|0)==(0);
  do {
   if ($40) {
    $42 = $38 & 64;
    $43 = ($42|0)==(0);
    if ($43) {
     $45 = $38 >>> 4;
     $46 = $45 & 8;
     $47 = $37 | $46;
     $count$1 = $47;
     break;
    } else {
     $44 = (($36) + 6)|0;
     $count$1 = $44;
     break;
    }
   } else {
    $41 = $36 | 4;
    $count$1 = $41;
   }
  } while(0);
  $$sum = (($count$1) + 4)|0;
  $48 = (($p$0) + ($$sum)|0);
  $49 = ($48>>>0)>($3>>>0);
  if ($49) {
   $error$0 = 21;
   label = 21;
   break;
  }
  $50 = HEAP16[$23>>1]|0;
  $51 = $50 & 1;
  $52 = ($51<<16>>16)==(0);
  if ($52) {
   $69 = ((($p$0)) + 5|0);
   $70 = HEAP8[$10>>0]|0;
   $71 = $70 << 24 >> 24;
   HEAP32[$14>>2] = $71;
   $72 = ((($p$0)) + 6|0);
   $73 = HEAP8[$69>>0]|0;
   $74 = $73 << 24 >> 24;
   $101 = 10;$107 = 9;$136 = 11;$142 = 14;$144 = 12;$149 = 13;$80 = 8;$85 = 7;$p$1 = $72;$storemerge = $74;
  } else {
   $53 = HEAP8[$10>>0]|0;
   $54 = $53 << 24 >> 24;
   $55 = $54 << 8;
   $56 = ((($p$0)) + 5|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $55 | $58;
   HEAP32[$14>>2] = $59;
   $60 = ((($p$0)) + 8|0);
   $61 = ((($p$0)) + 6|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62 << 24 >> 24;
   $64 = $63 << 8;
   $65 = ((($p$0)) + 7|0);
   $66 = HEAP8[$65>>0]|0;
   $67 = $66&255;
   $68 = $64 | $67;
   $101 = 12;$107 = 11;$136 = 13;$142 = 16;$144 = 14;$149 = 15;$80 = 10;$85 = 9;$p$1 = $60;$storemerge = $68;
  }
  HEAP32[$13>>2] = $storemerge;
  $75 = HEAP16[$23>>1]|0;
  $76 = $75&65535;
  $77 = $76 & 8;
  $78 = ($77|0)==(0);
  do {
   if ($78) {
    $90 = $76 & 64;
    $91 = ($90|0)==(0);
    if (!($91)) {
     $92 = HEAP8[$p$1>>0]|0;
     $93 = $92 << 24 >> 24;
     $94 = $93 << 8;
     $95 = (($p$0) + ($85)|0);
     $96 = HEAP8[$95>>0]|0;
     $97 = $96&255;
     $98 = $94 | $97;
     $99 = $98 << 2;
     $100 = (($p$0) + ($101)|0);
     $102 = (($p$0) + ($80)|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = $103 << 24 >> 24;
     $105 = $104 << 8;
     $106 = (($p$0) + ($107)|0);
     $108 = HEAP8[$106>>0]|0;
     $109 = $108&255;
     $110 = $105 | $109;
     $111 = $110 << 2;
     $p$2 = $100;$xx$0 = $99;$xy$0 = 0;$yx$0 = 0;$yy$0 = $111;
     break;
    }
    $112 = $76 & 128;
    $113 = ($112|0)==(0);
    if ($113) {
     $p$2 = $p$1;$xx$0 = 65536;$xy$0 = 0;$yx$0 = 0;$yy$0 = 65536;
    } else {
     $114 = HEAP8[$p$1>>0]|0;
     $115 = $114 << 24 >> 24;
     $116 = $115 << 8;
     $117 = (($p$0) + ($85)|0);
     $118 = HEAP8[$117>>0]|0;
     $119 = $118&255;
     $120 = $116 | $119;
     $121 = $120 << 2;
     $122 = (($p$0) + ($80)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123 << 24 >> 24;
     $125 = $124 << 8;
     $126 = (($p$0) + ($107)|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = $127&255;
     $129 = $125 | $128;
     $130 = $129 << 2;
     $131 = (($p$0) + ($101)|0);
     $132 = HEAP8[$131>>0]|0;
     $133 = $132 << 24 >> 24;
     $134 = $133 << 8;
     $135 = (($p$0) + ($136)|0);
     $137 = HEAP8[$135>>0]|0;
     $138 = $137&255;
     $139 = $134 | $138;
     $140 = $139 << 2;
     $141 = (($p$0) + ($142)|0);
     $143 = (($p$0) + ($144)|0);
     $145 = HEAP8[$143>>0]|0;
     $146 = $145 << 24 >> 24;
     $147 = $146 << 8;
     $148 = (($p$0) + ($149)|0);
     $150 = HEAP8[$148>>0]|0;
     $151 = $150&255;
     $152 = $147 | $151;
     $153 = $152 << 2;
     $p$2 = $141;$xx$0 = $121;$xy$0 = $140;$yx$0 = $130;$yy$0 = $153;
    }
   } else {
    $79 = (($p$0) + ($80)|0);
    $81 = HEAP8[$p$1>>0]|0;
    $82 = $81 << 24 >> 24;
    $83 = $82 << 8;
    $84 = (($p$0) + ($85)|0);
    $86 = HEAP8[$84>>0]|0;
    $87 = $86&255;
    $88 = $83 | $87;
    $89 = $88 << 2;
    $p$2 = $79;$xx$0 = $89;$xy$0 = 0;$yx$0 = 0;$yy$0 = $89;
   }
  } while(0);
  $154 = (((($12) + ($num_subglyphs$0<<5)|0)) + 16|0);
  HEAP32[$154>>2] = $xx$0;
  $155 = (((($12) + ($num_subglyphs$0<<5)|0)) + 20|0);
  HEAP32[$155>>2] = $xy$0;
  $156 = (((($12) + ($num_subglyphs$0<<5)|0)) + 24|0);
  HEAP32[$156>>2] = $yx$0;
  $157 = (((($12) + ($num_subglyphs$0<<5)|0)) + 28|0);
  HEAP32[$157>>2] = $yy$0;
  $158 = HEAP16[$23>>1]|0;
  $159 = $158 & 32;
  $160 = ($159<<16>>16)==(0);
  if ($160) {
   $$lcssa28 = $7;$$lcssa29 = $8;$p$2$lcssa = $p$2;
   label = 20;
   break;
  } else {
   $num_subglyphs$0 = $7;$p$0 = $p$2;
  }
 }
 if ((label|0) == 20) {
  $161 = ((($5)) + 84|0);
  HEAP32[$161>>2] = $$lcssa28;
  $162 = ((($loader)) + 24|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (_FT_Stream_Pos($163)|0);
  $165 = (($p$2$lcssa) + ($164)|0);
  $166 = $165;
  $167 = $3;
  $168 = (($166) - ($167))|0;
  $169 = ((($loader)) + 168|0);
  HEAP32[$169>>2] = $168;
  HEAP32[$0>>2] = $p$2$lcssa;
  $error$0 = $$lcssa29;
  return ($error$0|0);
 }
 else if ((label|0) == 21) {
  return ($error$0|0);
 }
 return (0)|0;
}
function _TT_Forget_Glyph_Frame($loader) {
 $loader = $loader|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 _FT_Stream_ExitFrame($1);
 return;
}
function _load_sbit_image($size,$glyph,$glyph_index,$load_flags) {
 $size = $size|0;
 $glyph = $glyph|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $metrics = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $metrics = sp;
 $0 = ((($glyph)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 532|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 104|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($size)) + 112|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($glyph)) + 76|0);
 $11 = (FUNCTION_TABLE_iiiiiiii[$7 & 1]($1,$9,$glyph_index,$load_flags,$5,$10,$metrics)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  STACKTOP = sp;return ($11|0);
 }
 $13 = ((($glyph)) + 110|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($glyph)) + 108|0);
 HEAP16[$14>>1] = 0;
 $15 = ((($metrics)) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 << 6;
 $19 = ((($glyph)) + 24|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP8[$metrics>>0]|0;
 $21 = $20&255;
 $22 = $21 << 6;
 $23 = ((($glyph)) + 28|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($metrics)) + 2|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25 << 24 >> 24;
 $27 = $26 << 6;
 $28 = ((($glyph)) + 32|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($metrics)) + 3|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30 << 24 >> 24;
 $32 = $31 << 6;
 $33 = ((($glyph)) + 36|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($metrics)) + 4|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $36 << 6;
 $38 = ((($glyph)) + 40|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($metrics)) + 5|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40 << 24 >> 24;
 $42 = $41 << 6;
 $43 = ((($glyph)) + 44|0);
 HEAP32[$43>>2] = $42;
 $44 = ((($metrics)) + 6|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45 << 24 >> 24;
 $47 = $46 << 6;
 $48 = ((($glyph)) + 48|0);
 HEAP32[$48>>2] = $47;
 $49 = ((($metrics)) + 7|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 << 6;
 $53 = ((($glyph)) + 52|0);
 HEAP32[$53>>2] = $52;
 $54 = ((($glyph)) + 72|0);
 HEAP32[$54>>2] = 1651078259;
 $55 = $load_flags & 16;
 $56 = ($55|0)==(0);
 if ($56) {
  $63 = HEAP8[$24>>0]|0;
  $64 = $63 << 24 >> 24;
  $65 = ((($glyph)) + 100|0);
  HEAP32[$65>>2] = $64;
  $66 = HEAP8[$29>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ((($glyph)) + 104|0);
  HEAP32[$68>>2] = $67;
  STACKTOP = sp;return ($11|0);
 } else {
  $57 = HEAP8[$39>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = ((($glyph)) + 100|0);
  HEAP32[$59>>2] = $58;
  $60 = HEAP8[$44>>0]|0;
  $61 = $60 << 24 >> 24;
  $62 = ((($glyph)) + 104|0);
  HEAP32[$62>>2] = $61;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _tt_loader_init($loader,$size,$glyph,$load_flags,$glyf_table_only) {
 $loader = $loader|0;
 $size = $size|0;
 $glyph = $glyph|0;
 $load_flags = $load_flags|0;
 $glyf_table_only = $glyf_table_only|0;
 var $$0 = 0, $$1 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $i$03 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = $load_flags & 128;
 $1 = $0&255;
 $2 = ((($glyph)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 104|0);
 $5 = HEAP32[$4>>2]|0;
 _memset(($loader|0),0,208)|0;
 $6 = $load_flags & 2;
 $7 = ($6|0)!=(0);
 $8 = ($glyf_table_only<<24>>24)!=(0);
 $or$cond = $7 | $8;
 if ($or$cond) {
  $$1 = $load_flags;
 } else {
  $9 = ((($size)) + 301|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $12 = (_tt_size_ready_bytecode($size,$1)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    $$0 = $12;
    return ($$0|0);
   }
  }
  $14 = ((($size)) + 292|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   $18 = ((($3)) + 96|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 28|0);
   $$in = $20;
  } else {
   $17 = ((($size)) + 296|0);
   $$in = $17;
  }
  $21 = HEAP32[$$in>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = 153;
   return ($$0|0);
  }
  $23 = $load_flags & 983040;
  $24 = ($23|0)!=(131072);
  (_TT_Load_Context($21,$3,$size)|0);
  $25 = $24&1;
  $26 = ((($21)) + 604|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = ($25|0)==($28|0);
  if (!($29)) {
   $30 = $24&1;
   HEAP8[$26>>0] = $30;
   $31 = ((($size)) + 240|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if (!($33)) {
    $34 = ((($3)) + 672|0);
    $35 = ((($size)) + 88|0);
    $36 = ((($size)) + 244|0);
    $i$03 = 0;
    while(1) {
     $37 = HEAP32[$34>>2]|0;
     $38 = (($37) + ($i$03<<1)|0);
     $39 = HEAP16[$38>>1]|0;
     $40 = $39 << 16 >> 16;
     $41 = HEAP32[$35>>2]|0;
     $42 = (_FT_MulFix($40,$41)|0);
     $43 = HEAP32[$36>>2]|0;
     $44 = (($43) + ($i$03<<2)|0);
     HEAP32[$44>>2] = $42;
     $45 = (($i$03) + 1)|0;
     $46 = HEAP32[$31>>2]|0;
     $47 = ($45>>>0)<($46>>>0);
     if ($47) {
      $i$03 = $45;
     } else {
      break;
     }
    }
   }
   (_tt_size_run_prep($size,$1)|0);
  }
  $48 = ((($21)) + 336|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49 & 1;
  $51 = $50&255;
  $52 = $51 << 1;
  $53 = $52 | $load_flags;
  $54 = $49 & 2;
  $55 = ($54<<24>>24)==(0);
  if (!($55)) {
   $56 = ((($21)) + 284|0);
   dest=$56; src=12748; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  }
  $57 = $load_flags & 128;
  $58 = $57&255;
  $59 = ((($21)) + 561|0);
  HEAP8[$59>>0] = $58;
  $60 = ((($loader)) + 160|0);
  HEAP32[$60>>2] = $21;
  $61 = ((($21)) + 392|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($loader)) + 164|0);
  HEAP32[$63>>2] = $62;
  $$1 = $53;
 }
 $64 = ((($3)) + 128|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ((($65)) + 52|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(0|0);
 L26: do {
  if ($68) {
   $70 = ((($3)) + 508|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (FUNCTION_TABLE_iiiii[$71 & 63]($3,1735162214,$5,0)|0);
   switch ($72|0) {
   case 142:  {
    $73 = ((($loader)) + 84|0);
    HEAP32[$73>>2] = 0;
    break L26;
    break;
   }
   case 0:  {
    $74 = (_FT_Stream_Pos($5)|0);
    $75 = ((($loader)) + 84|0);
    HEAP32[$75>>2] = $74;
    break L26;
    break;
   }
   default: {
    $$0 = $72;
    return ($$0|0);
   }
   }
  } else {
   $69 = ((($loader)) + 84|0);
   HEAP32[$69>>2] = 0;
  }
 } while(0);
 if (!($8)) {
  $76 = ((($glyph)) + 156|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  _FT_GlyphLoader_Rewind($78);
  $79 = ((($loader)) + 12|0);
  HEAP32[$79>>2] = $78;
 }
 $80 = ((($loader)) + 16|0);
 HEAP32[$80>>2] = $$1;
 HEAP32[$loader>>2] = $3;
 $81 = ((($loader)) + 4|0);
 HEAP32[$81>>2] = $size;
 $82 = ((($loader)) + 8|0);
 HEAP32[$82>>2] = $glyph;
 $83 = ((($loader)) + 24|0);
 HEAP32[$83>>2] = $5;
 $$0 = 0;
 return ($$0|0);
}
function _load_truetype_glyph($loader,$glyph_index,$recurse_count,$header_only) {
 $loader = $loader|0;
 $glyph_index = $glyph_index|0;
 $recurse_count = $recurse_count|0;
 $header_only = $header_only|0;
 var $$lcssa36 = 0, $$lcssa37 = 0, $$lcssa38 = 0, $$pr = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $deltas = 0, $error$1 = 0, $error$2 = 0, $error$3$lcssa = 0;
 var $error$4 = 0, $error$45 = 0, $error$459 = 0, $error$48 = 0, $exitcond = 0, $glyph_data = 0, $glyph_data_loaded$0 = 0, $i$0$lcssa = 0, $i$018 = 0, $inc_stream = 0, $n$013 = 0, $num_points$0$lcssa = 0, $offset$0 = 0, $opened_frame$0 = 0, $or$cond = 0, $or$cond3 = 0, $sext = 0, $sext2 = 0, $subglyph$017 = 0, $subglyph2$0$lcssa = 0;
 var $x_scale$0 = 0, $y_scale$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $deltas = sp + 8|0;
 $inc_stream = sp + 16|0;
 $glyph_data = sp;
 $0 = HEAP32[$loader>>2]|0;
 $1 = ((($loader)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$deltas>>2] = 0;
 $3 = ($recurse_count>>>0)>(1);
 if ($3) {
  $4 = ((($0)) + 290|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5&65535;
  $7 = ($6>>>0)<($recurse_count>>>0);
  if ($7) {
   $error$459 = 21;
   STACKTOP = sp;return ($error$459|0);
  }
 }
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>($glyph_index>>>0);
 if (!($10)) {
  $error$459 = 16;
  STACKTOP = sp;return ($error$459|0);
 }
 $11 = ((($loader)) + 20|0);
 HEAP32[$11>>2] = $glyph_index;
 $12 = ((($loader)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 1;
 $15 = ($14|0)==(0);
 if ($15) {
  $16 = ((($loader)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($17)) + 52|0);
  $21 = HEAP32[$20>>2]|0;
  $x_scale$0 = $19;$y_scale$0 = $21;
 } else {
  $x_scale$0 = 65536;$y_scale$0 = 65536;
 }
 _tt_get_metrics($loader,$glyph_index);
 $22 = ((($0)) + 128|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($23)) + 52|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 do {
  if ($26) {
   $39 = ((($loader)) + 28|0);
   $40 = (_tt_face_get_location($0,$glyph_index,$39)|0);
   $glyph_data_loaded$0 = 0;$offset$0 = $40;
  } else {
   $27 = HEAP32[$25>>2]|0;
   $28 = HEAP32[$27>>2]|0;
   $29 = ((($25)) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (FUNCTION_TABLE_iiii[$28 & 127]($30,$glyph_index,$glyph_data)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = ((($glyph_data)) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($loader)) + 28|0);
    HEAP32[$35>>2] = $34;
    dest=$inc_stream; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $36 = HEAP32[$glyph_data>>2]|0;
    $37 = HEAP32[$33>>2]|0;
    _FT_Stream_OpenMemory($inc_stream,$36,$37);
    $38 = ((($loader)) + 24|0);
    HEAP32[$38>>2] = $inc_stream;
    $glyph_data_loaded$0 = 1;$offset$0 = 0;
    break;
   } else {
    $error$459 = $31;
    STACKTOP = sp;return ($error$459|0);
   }
  }
 } while(0);
 $41 = ((($loader)) + 28|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)>(0);
 do {
  if ($43) {
   $44 = ((($loader)) + 84|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)==(0);
   if ($46) {
    $47 = HEAP32[$22>>2]|0;
    $48 = ((($47)) + 52|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)==(0|0);
    if ($50) {
     $error$45 = 8;
     break;
    }
   }
   $51 = ((($0)) + 512|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = HEAP32[$44>>2]|0;
   $54 = (($53) + ($offset$0))|0;
   $55 = HEAP32[$41>>2]|0;
   $56 = (FUNCTION_TABLE_iiiii[$52 & 63]($loader,$glyph_index,$54,$55)|0);
   $57 = ($56|0)==(0);
   if ($57) {
    $58 = ((($0)) + 520|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (FUNCTION_TABLE_ii[$59 & 63]($loader)|0);
    $61 = ($60|0)==(0);
    $62 = ($header_only<<24>>24)==(0);
    $or$cond = $62 & $61;
    if ($or$cond) {
     $$pr = HEAP32[$41>>2]|0;
     $64 = $$pr;$error$1 = $60;$opened_frame$0 = 1;
     label = 16;
    } else {
     $error$48 = $60;
     label = 55;
    }
   } else {
    $error$45 = $56;
   }
  } else {
   $64 = $42;$error$1 = 0;$opened_frame$0 = 0;
   label = 16;
  }
 } while(0);
 L25: do {
  if ((label|0) == 16) {
   $63 = ($64|0)==(0);
   do {
    if ($63) {
     label = 18;
    } else {
     $65 = ((($loader)) + 32|0);
     $66 = HEAP16[$65>>1]|0;
     $67 = ($66<<16>>16)==(0);
     if ($67) {
      label = 18;
     } else {
      $154 = ((($loader)) + 36|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = ((($loader)) + 52|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) - ($157))|0;
      $159 = ((($loader)) + 68|0);
      HEAP32[$159>>2] = $158;
      $160 = ((($loader)) + 72|0);
      HEAP32[$160>>2] = 0;
      $161 = HEAP32[$159>>2]|0;
      $162 = ((($loader)) + 56|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = (($163) + ($161))|0;
      $165 = ((($loader)) + 76|0);
      HEAP32[$165>>2] = $164;
      $166 = ((($loader)) + 80|0);
      HEAP32[$166>>2] = 0;
      $167 = ((($loader)) + 184|0);
      HEAP32[$167>>2] = 0;
      $168 = ((($loader)) + 176|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ((($loader)) + 48|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = (($171) + ($169))|0;
      $173 = ((($loader)) + 188|0);
      HEAP32[$173>>2] = $172;
      $174 = ((($loader)) + 192|0);
      HEAP32[$174>>2] = 0;
      $175 = HEAP32[$173>>2]|0;
      $176 = ((($loader)) + 180|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = (($175) - ($177))|0;
      $179 = ((($loader)) + 196|0);
      HEAP32[$179>>2] = $178;
      _tt_get_metrics_incr_overrides($loader,$glyph_index);
      $180 = HEAP16[$65>>1]|0;
      $181 = ($180<<16>>16)>(0);
      if ($181) {
       $182 = ((($0)) + 524|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (FUNCTION_TABLE_ii[$183 & 63]($loader)|0);
       $185 = ($184|0)==(0);
       if (!($185)) {
        $error$4 = $184;
        break;
       }
       $186 = ((($0)) + 516|0);
       $187 = HEAP32[$186>>2]|0;
       FUNCTION_TABLE_vi[$187 & 127]($loader);
       $188 = (_TT_Process_Simple_Glyph($loader)|0);
       $189 = ($188|0)==(0);
       if (!($189)) {
        $error$45 = $188;
        break L25;
       }
       _FT_GlyphLoader_Add($2);
       $error$45 = 0;
       break L25;
      }
      $190 = ($180<<16>>16)==(-1);
      if ($190) {
       $191 = ((($2)) + 22|0);
       $192 = HEAP16[$191>>1]|0;
       $193 = $192 << 16 >> 16;
       $194 = ((($2)) + 20|0);
       $195 = HEAP16[$194>>1]|0;
       $196 = $195 << 16 >> 16;
       $197 = ((($0)) + 528|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = (FUNCTION_TABLE_ii[$198 & 63]($loader)|0);
       $200 = ($199|0)==(0);
       if ($200) {
        $201 = ((($loader)) + 168|0);
        $202 = HEAP32[$201>>2]|0;
        $203 = ((($0)) + 516|0);
        $204 = HEAP32[$203>>2]|0;
        FUNCTION_TABLE_vi[$204 & 127]($loader);
        $205 = ((($0)) + 708|0);
        $206 = HEAP8[$205>>0]|0;
        $207 = ($206<<24>>24)==(0);
        if ($207) {
         $error$2 = 0;
        } else {
         $208 = ((($0)) + 100|0);
         $209 = HEAP32[$208>>2]|0;
         $210 = ((($2)) + 84|0);
         $211 = HEAP32[$210>>2]|0;
         $212 = (($211) + 4)|0;
         $213 = (_TT_Vary_Get_Glyph_Deltas($0,$glyph_index,$deltas,$212)|0);
         $214 = ($213|0)==(0);
         if (!($214)) {
          $error$45 = $213;
          break L25;
         }
         $215 = HEAP32[$210>>2]|0;
         $216 = ($215|0)>(0);
         if ($216) {
          $217 = ((($2)) + 88|0);
          $218 = HEAP32[$217>>2]|0;
          $219 = ((($2)) + 48|0);
          $220 = HEAP32[$219>>2]|0;
          $221 = (($218) + ($220<<5)|0);
          $222 = HEAP32[$deltas>>2]|0;
          $i$018 = 0;$subglyph$017 = $221;
          while(1) {
           $223 = ((($subglyph$017)) + 4|0);
           $224 = HEAP16[$223>>1]|0;
           $225 = $224 & 2;
           $226 = ($225<<16>>16)==(0);
           if (!($226)) {
            $227 = (($222) + ($i$018<<3)|0);
            $228 = HEAP32[$227>>2]|0;
            $sext = $228 << 16;
            $229 = $sext >> 16;
            $230 = ((($subglyph$017)) + 8|0);
            $231 = HEAP32[$230>>2]|0;
            $232 = (($229) + ($231))|0;
            HEAP32[$230>>2] = $232;
            $233 = (((($222) + ($i$018<<3)|0)) + 4|0);
            $234 = HEAP32[$233>>2]|0;
            $sext2 = $234 << 16;
            $235 = $sext2 >> 16;
            $236 = ((($subglyph$017)) + 12|0);
            $237 = HEAP32[$236>>2]|0;
            $238 = (($235) + ($237))|0;
            HEAP32[$236>>2] = $238;
           }
           $239 = (($i$018) + 1)|0;
           $240 = ((($subglyph$017)) + 32|0);
           $exitcond = ($239|0)==($215|0);
           if ($exitcond) {
            $i$0$lcssa = $215;
            break;
           } else {
            $i$018 = $239;$subglyph$017 = $240;
           }
          }
         } else {
          $i$0$lcssa = 0;
         }
         $241 = HEAP32[$deltas>>2]|0;
         $242 = (($241) + ($i$0$lcssa<<3)|0);
         $243 = HEAP32[$242>>2]|0;
         $244 = HEAP32[$159>>2]|0;
         $245 = (($244) + ($243))|0;
         HEAP32[$159>>2] = $245;
         $246 = HEAP32[$deltas>>2]|0;
         $247 = (((($246) + ($i$0$lcssa<<3)|0)) + 4|0);
         $248 = HEAP32[$247>>2]|0;
         $249 = HEAP32[$160>>2]|0;
         $250 = (($249) + ($248))|0;
         HEAP32[$160>>2] = $250;
         $251 = (($i$0$lcssa) + 1)|0;
         $252 = HEAP32[$deltas>>2]|0;
         $253 = (($252) + ($251<<3)|0);
         $254 = HEAP32[$253>>2]|0;
         $255 = HEAP32[$165>>2]|0;
         $256 = (($255) + ($254))|0;
         HEAP32[$165>>2] = $256;
         $257 = HEAP32[$deltas>>2]|0;
         $258 = (((($257) + ($251<<3)|0)) + 4|0);
         $259 = HEAP32[$258>>2]|0;
         $260 = HEAP32[$166>>2]|0;
         $261 = (($260) + ($259))|0;
         HEAP32[$166>>2] = $261;
         $262 = (($i$0$lcssa) + 2)|0;
         $263 = HEAP32[$deltas>>2]|0;
         $264 = (($263) + ($262<<3)|0);
         $265 = HEAP32[$264>>2]|0;
         $266 = HEAP32[$167>>2]|0;
         $267 = (($266) + ($265))|0;
         HEAP32[$167>>2] = $267;
         $268 = HEAP32[$deltas>>2]|0;
         $269 = (((($268) + ($262<<3)|0)) + 4|0);
         $270 = HEAP32[$269>>2]|0;
         $271 = HEAP32[$173>>2]|0;
         $272 = (($271) + ($270))|0;
         HEAP32[$173>>2] = $272;
         $273 = (($i$0$lcssa) + 3)|0;
         $274 = HEAP32[$deltas>>2]|0;
         $275 = (($274) + ($273<<3)|0);
         $276 = HEAP32[$275>>2]|0;
         $277 = HEAP32[$174>>2]|0;
         $278 = (($277) + ($276))|0;
         HEAP32[$174>>2] = $278;
         $279 = HEAP32[$deltas>>2]|0;
         $280 = (((($279) + ($273<<3)|0)) + 4|0);
         $281 = HEAP32[$280>>2]|0;
         $282 = HEAP32[$179>>2]|0;
         $283 = (($282) + ($281))|0;
         HEAP32[$179>>2] = $283;
         $284 = HEAP32[$deltas>>2]|0;
         _ft_mem_free($209,$284);
         HEAP32[$deltas>>2] = 0;
         $error$2 = $213;
        }
        $285 = HEAP32[$12>>2]|0;
        $286 = $285 & 1;
        $287 = ($286|0)==(0);
        if ($287) {
         $288 = HEAP32[$159>>2]|0;
         $289 = (_FT_MulFix($288,$x_scale$0)|0);
         HEAP32[$159>>2] = $289;
         $290 = HEAP32[$165>>2]|0;
         $291 = (_FT_MulFix($290,$x_scale$0)|0);
         HEAP32[$165>>2] = $291;
         $292 = HEAP32[$173>>2]|0;
         $293 = (_FT_MulFix($292,$y_scale$0)|0);
         HEAP32[$173>>2] = $293;
         $294 = HEAP32[$179>>2]|0;
         $295 = (_FT_MulFix($294,$y_scale$0)|0);
         HEAP32[$179>>2] = $295;
        }
        $296 = HEAP32[$12>>2]|0;
        $297 = $296 & 1024;
        $298 = ($297|0)==(0);
        if (!($298)) {
         _FT_GlyphLoader_Add($2);
         $299 = ((($loader)) + 8|0);
         $300 = HEAP32[$299>>2]|0;
         $301 = ((($300)) + 72|0);
         HEAP32[$301>>2] = 1668246896;
         $error$45 = $error$2;
         break L25;
        }
        $302 = ((($2)) + 84|0);
        $303 = HEAP32[$302>>2]|0;
        $304 = ((($2)) + 48|0);
        $305 = HEAP32[$304>>2]|0;
        $306 = ((($loader)) + 24|0);
        $307 = HEAP32[$306>>2]|0;
        $308 = HEAP32[$41>>2]|0;
        _FT_GlyphLoader_Add($2);
        $309 = ($303|0)==(0);
        if ($309) {
         $error$3$lcssa = $error$2;$num_points$0$lcssa = $193;$subglyph2$0$lcssa = 0;
        } else {
         $310 = ((($2)) + 52|0);
         $311 = (($recurse_count) + 1)|0;
         $n$013 = 0;
         while(1) {
          $312 = HEAP32[$310>>2]|0;
          $$sum = (($n$013) + ($305))|0;
          $313 = $159;
          $314 = $313;
          $315 = HEAP32[$314>>2]|0;
          $316 = (($313) + 4)|0;
          $317 = $316;
          $318 = HEAP32[$317>>2]|0;
          $319 = $165;
          $320 = $319;
          $321 = HEAP32[$320>>2]|0;
          $322 = (($319) + 4)|0;
          $323 = $322;
          $324 = HEAP32[$323>>2]|0;
          $325 = $167;
          $326 = $325;
          $327 = HEAP32[$326>>2]|0;
          $328 = (($325) + 4)|0;
          $329 = $328;
          $330 = HEAP32[$329>>2]|0;
          $331 = $174;
          $332 = $331;
          $333 = HEAP32[$332>>2]|0;
          $334 = (($331) + 4)|0;
          $335 = $334;
          $336 = HEAP32[$335>>2]|0;
          $337 = HEAP16[$191>>1]|0;
          $338 = $337 << 16 >> 16;
          $339 = (($312) + ($$sum<<5)|0);
          $340 = HEAP32[$339>>2]|0;
          $341 = (_load_truetype_glyph($loader,$340,$311,0)|0);
          $342 = ($341|0)==(0);
          if (!($342)) {
           $error$45 = $341;
           break L25;
          }
          $343 = HEAP32[$310>>2]|0;
          $344 = (($343) + ($$sum<<5)|0);
          $345 = (((($343) + ($$sum<<5)|0)) + 4|0);
          $346 = HEAP16[$345>>1]|0;
          $347 = $346 & 512;
          $348 = ($347<<16>>16)==(0);
          if ($348) {
           $349 = $159;
           $350 = $349;
           HEAP32[$350>>2] = $315;
           $351 = (($349) + 4)|0;
           $352 = $351;
           HEAP32[$352>>2] = $318;
           $353 = $165;
           $354 = $353;
           HEAP32[$354>>2] = $321;
           $355 = (($353) + 4)|0;
           $356 = $355;
           HEAP32[$356>>2] = $324;
           $357 = $167;
           $358 = $357;
           HEAP32[$358>>2] = $327;
           $359 = (($357) + 4)|0;
           $360 = $359;
           HEAP32[$360>>2] = $330;
           $361 = $174;
           $362 = $361;
           HEAP32[$362>>2] = $333;
           $363 = (($361) + 4)|0;
           $364 = $363;
           HEAP32[$364>>2] = $336;
          }
          $365 = HEAP16[$191>>1]|0;
          $366 = ($365<<16>>16)==($337<<16>>16);
          if (!($366)) {
           _TT_Process_Composite_Component($loader,$344,$193,$338);
          }
          $367 = (($n$013) + 1)|0;
          $368 = ($367>>>0)<($303>>>0);
          if ($368) {
           $n$013 = $367;
          } else {
           $$lcssa36 = $341;$$lcssa37 = $344;$$lcssa38 = $365;
           break;
          }
         }
         $369 = $$lcssa38 << 16 >> 16;
         $error$3$lcssa = $$lcssa36;$num_points$0$lcssa = $369;$subglyph2$0$lcssa = $$lcssa37;
        }
        HEAP32[$306>>2] = $307;
        HEAP32[$41>>2] = $308;
        HEAP32[$201>>2] = $202;
        $370 = HEAP32[$12>>2]|0;
        $371 = $370 & 2;
        $372 = ($371|0)==(0);
        if (!($372)) {
         $error$45 = $error$3$lcssa;
         break L25;
        }
        $373 = ((($subglyph2$0$lcssa)) + 4|0);
        $374 = HEAP16[$373>>1]|0;
        $375 = $374 & 256;
        $376 = ($375<<16>>16)!=(0);
        $377 = ($num_points$0$lcssa>>>0)>($193>>>0);
        $or$cond3 = $377 & $376;
        if (!($or$cond3)) {
         $error$45 = $error$3$lcssa;
         break L25;
        }
        _TT_Process_Composite_Glyph($loader,$193,$196);
        $error$45 = $error$3$lcssa;
        break L25;
       } else {
        $error$4 = $199;
       }
      } else {
       $error$4 = 20;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 18) {
     $68 = ((($loader)) + 36|0);
     $69 = ($header_only<<24>>24)==(0);
     ;HEAP32[$68>>2]=0|0;HEAP32[$68+4>>2]=0|0;HEAP32[$68+8>>2]=0|0;HEAP32[$68+12>>2]=0|0;
     if ($69) {
      $70 = ((($loader)) + 48|0);
      $71 = HEAP32[$68>>2]|0;
      $72 = ((($loader)) + 52|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) - ($73))|0;
      $75 = ((($loader)) + 68|0);
      HEAP32[$75>>2] = $74;
      $76 = ((($loader)) + 72|0);
      HEAP32[$76>>2] = 0;
      $77 = HEAP32[$75>>2]|0;
      $78 = ((($loader)) + 56|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (($79) + ($77))|0;
      $81 = ((($loader)) + 76|0);
      HEAP32[$81>>2] = $80;
      $82 = ((($loader)) + 80|0);
      HEAP32[$82>>2] = 0;
      $83 = ((($loader)) + 184|0);
      HEAP32[$83>>2] = 0;
      $84 = ((($loader)) + 176|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = HEAP32[$70>>2]|0;
      $87 = (($86) + ($85))|0;
      $88 = ((($loader)) + 188|0);
      HEAP32[$88>>2] = $87;
      $89 = ((($loader)) + 192|0);
      HEAP32[$89>>2] = 0;
      $90 = HEAP32[$88>>2]|0;
      $91 = ((($loader)) + 180|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (($90) - ($92))|0;
      $94 = ((($loader)) + 196|0);
      HEAP32[$94>>2] = $93;
      _tt_get_metrics_incr_overrides($loader,$glyph_index);
      $95 = HEAP32[$loader>>2]|0;
      $96 = ((($95)) + 708|0);
      $97 = HEAP8[$96>>0]|0;
      $98 = ($97<<24>>24)==(0);
      if (!($98)) {
       $99 = ((($95)) + 100|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = (_TT_Vary_Get_Glyph_Deltas($95,$glyph_index,$deltas,4)|0);
       $102 = ($101|0)==(0);
       if (!($102)) {
        $error$4 = $101;
        break;
       }
       $103 = HEAP32[$deltas>>2]|0;
       $104 = HEAP32[$103>>2]|0;
       $105 = HEAP32[$75>>2]|0;
       $106 = (($105) + ($104))|0;
       HEAP32[$75>>2] = $106;
       $107 = HEAP32[$deltas>>2]|0;
       $108 = ((($107)) + 4|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = HEAP32[$76>>2]|0;
       $111 = (($110) + ($109))|0;
       HEAP32[$76>>2] = $111;
       $112 = HEAP32[$deltas>>2]|0;
       $113 = ((($112)) + 8|0);
       $114 = HEAP32[$113>>2]|0;
       $115 = HEAP32[$81>>2]|0;
       $116 = (($115) + ($114))|0;
       HEAP32[$81>>2] = $116;
       $117 = HEAP32[$deltas>>2]|0;
       $118 = ((($117)) + 12|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = HEAP32[$82>>2]|0;
       $121 = (($120) + ($119))|0;
       HEAP32[$82>>2] = $121;
       $122 = HEAP32[$deltas>>2]|0;
       $123 = ((($122)) + 16|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = HEAP32[$83>>2]|0;
       $126 = (($125) + ($124))|0;
       HEAP32[$83>>2] = $126;
       $127 = HEAP32[$deltas>>2]|0;
       $128 = ((($127)) + 20|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = HEAP32[$88>>2]|0;
       $131 = (($130) + ($129))|0;
       HEAP32[$88>>2] = $131;
       $132 = HEAP32[$deltas>>2]|0;
       $133 = ((($132)) + 24|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = HEAP32[$89>>2]|0;
       $136 = (($135) + ($134))|0;
       HEAP32[$89>>2] = $136;
       $137 = HEAP32[$deltas>>2]|0;
       $138 = ((($137)) + 28|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = HEAP32[$94>>2]|0;
       $141 = (($140) + ($139))|0;
       HEAP32[$94>>2] = $141;
       $142 = HEAP32[$deltas>>2]|0;
       _ft_mem_free($100,$142);
       HEAP32[$deltas>>2] = 0;
      }
      $143 = HEAP32[$12>>2]|0;
      $144 = $143 & 1;
      $145 = ($144|0)==(0);
      if ($145) {
       $146 = HEAP32[$75>>2]|0;
       $147 = (_FT_MulFix($146,$x_scale$0)|0);
       HEAP32[$75>>2] = $147;
       $148 = HEAP32[$81>>2]|0;
       $149 = (_FT_MulFix($148,$x_scale$0)|0);
       HEAP32[$81>>2] = $149;
       $150 = HEAP32[$88>>2]|0;
       $151 = (_FT_MulFix($150,$y_scale$0)|0);
       HEAP32[$88>>2] = $151;
       $152 = HEAP32[$94>>2]|0;
       $153 = (_FT_MulFix($152,$y_scale$0)|0);
       HEAP32[$94>>2] = $153;
       $error$4 = 0;
      } else {
       $error$4 = 0;
      }
     } else {
      $error$4 = $error$1;
     }
    }
   } while(0);
   $378 = ($opened_frame$0<<24>>24)==(0);
   if ($378) {
    $error$45 = $error$4;
   } else {
    $error$48 = $error$4;
    label = 55;
   }
  }
 } while(0);
 if ((label|0) == 55) {
  $379 = ((($0)) + 516|0);
  $380 = HEAP32[$379>>2]|0;
  FUNCTION_TABLE_vi[$380 & 127]($loader);
  $error$45 = $error$48;
 }
 $381 = ($glyph_data_loaded$0<<24>>24)==(0);
 if ($381) {
  $error$459 = $error$45;
  STACKTOP = sp;return ($error$459|0);
 }
 $382 = ((($0)) + 128|0);
 $383 = HEAP32[$382>>2]|0;
 $384 = ((($383)) + 52|0);
 $385 = HEAP32[$384>>2]|0;
 $386 = HEAP32[$385>>2]|0;
 $387 = ((($386)) + 4|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = ((($385)) + 4|0);
 $390 = HEAP32[$389>>2]|0;
 FUNCTION_TABLE_vii[$388 & 31]($390,$glyph_data);
 $error$459 = $error$45;
 STACKTOP = sp;return ($error$459|0);
}
function _compute_glyph_metrics($loader,$glyph_index) {
 $loader = $loader|0;
 $glyph_index = $glyph_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $advance$0 = 0, $advance$1 = 0, $advance$2 = 0, $advance$3 = 0, $bbox = 0, $metrics = 0, $sext = 0, $sext1 = 0, $top$0 = 0, $top$1 = 0;
 var $top$2 = 0, $y_scale$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $bbox = sp + 16|0;
 $metrics = sp;
 $0 = HEAP32[$loader>>2]|0;
 $1 = ((($loader)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($loader)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($loader)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = ((($4)) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $y_scale$0 = $10;
 } else {
  $y_scale$0 = 65536;
 }
 $11 = ((($2)) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1668246896);
 if ($13) {
  $15 = ((($loader)) + 36|0);
  ;HEAP32[$bbox>>2]=HEAP32[$15>>2]|0;HEAP32[$bbox+4>>2]=HEAP32[$15+4>>2]|0;HEAP32[$bbox+8>>2]=HEAP32[$15+8>>2]|0;HEAP32[$bbox+12>>2]=HEAP32[$15+12>>2]|0;
 } else {
  $14 = ((($2)) + 108|0);
  _FT_Outline_Get_CBox($14,$bbox);
 }
 $16 = ((($loader)) + 60|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($2)) + 56|0);
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[$bbox>>2]|0;
 $20 = ((($2)) + 32|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($bbox)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($2)) + 36|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($loader)) + 76|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($loader)) + 68|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) - ($27))|0;
 $29 = ((($2)) + 40|0);
 HEAP32[$29>>2] = $28;
 $30 = ((($0)) + 480|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  $33 = HEAP32[$5>>2]|0;
  $34 = $33 & 2;
  $35 = ($34|0)==(0);
  if ($35) {
   $36 = ((($4)) + 12|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = $37&65535;
   $39 = (_tt_face_get_device_metrics($0,$38,$glyph_index)|0);
   $40 = ($39|0)==(0|0);
   if (!($40)) {
    $41 = HEAP8[$39>>0]|0;
    $42 = $41&255;
    $43 = $42 << 6;
    HEAP32[$29>>2] = $43;
   }
  }
 }
 $44 = ((($bbox)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$bbox>>2]|0;
 $47 = (($45) - ($46))|0;
 $48 = ((($2)) + 24|0);
 HEAP32[$48>>2] = $47;
 $49 = HEAP32[$21>>2]|0;
 $50 = ((($bbox)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) - ($51))|0;
 $53 = ((($2)) + 28|0);
 HEAP32[$53>>2] = $52;
 $54 = ((($0)) + 296|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = ($55<<24>>24)==(0);
 if ($56) {
  label = 14;
 } else {
  $57 = ((($0)) + 334|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = ($58<<16>>16)==(0);
  if ($59) {
   label = 14;
  } else {
   $60 = ((($loader)) + 188|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = HEAP32[$21>>2]|0;
   $63 = (($61) - ($62))|0;
   $64 = (_FT_DivFix($63,$y_scale$0)|0);
   $sext1 = $64 << 16;
   $65 = $sext1 >> 16;
   $66 = HEAP32[$60>>2]|0;
   $67 = ((($loader)) + 196|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)>($68|0);
   if ($69) {
    $70 = (($66) - ($68))|0;
    $71 = (_FT_DivFix($70,$y_scale$0)|0);
    $72 = $71 & 65535;
    $advance$1 = $72;$top$0 = $65;
   } else {
    $advance$1 = 0;$top$0 = $65;
   }
  }
 }
 if ((label|0) == 14) {
  $73 = HEAP32[$21>>2]|0;
  $74 = HEAP32[$50>>2]|0;
  $75 = (($73) - ($74))|0;
  $76 = (_FT_DivFix($75,$y_scale$0)|0);
  $sext = $76 << 16;
  $77 = $sext >> 16;
  $78 = ((($0)) + 368|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = ($79<<16>>16)==(-1);
  if ($80) {
   $88 = ((($0)) + 220|0);
   $89 = HEAP16[$88>>1]|0;
   $90 = $89 << 16 >> 16;
   $91 = ((($0)) + 222|0);
   $92 = HEAP16[$91>>1]|0;
   $93 = $92 << 16 >> 16;
   $94 = (($90) - ($93))|0;
   $advance$0 = $94;
  } else {
   $81 = ((($0)) + 438|0);
   $82 = HEAP16[$81>>1]|0;
   $83 = $82 << 16 >> 16;
   $84 = ((($0)) + 440|0);
   $85 = HEAP16[$84>>1]|0;
   $86 = $85 << 16 >> 16;
   $87 = (($83) - ($86))|0;
   $advance$0 = $87;
  }
  $95 = (($advance$0) - ($77))|0;
  $96 = (($95|0) / 2)&-1;
  $advance$1 = $advance$0;$top$0 = $96;
 }
 $97 = ((($0)) + 128|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ((($98)) + 52|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)==(0|0);
 do {
  if ($101) {
   $advance$2 = $advance$1;$top$1 = $top$0;
  } else {
   $102 = HEAP32[$100>>2]|0;
   $103 = ((($102)) + 8|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = ($104|0)==(0|0);
   if ($105) {
    $advance$2 = $advance$1;$top$1 = $top$0;
   } else {
    HEAP32[$metrics>>2] = 0;
    $106 = ((($metrics)) + 4|0);
    HEAP32[$106>>2] = $top$0;
    $107 = ((($metrics)) + 8|0);
    HEAP32[$107>>2] = $advance$1;
    $108 = HEAP32[$100>>2]|0;
    $109 = ((($108)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ((($100)) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = (FUNCTION_TABLE_iiiii[$110 & 63]($112,$glyph_index,1,$metrics)|0);
    $114 = ($113|0)==(0);
    if ($114) {
     $115 = HEAP32[$106>>2]|0;
     $116 = HEAP32[$107>>2]|0;
     $advance$2 = $116;$top$1 = $115;
     break;
    } else {
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $117 = ((($2)) + 60|0);
 HEAP32[$117>>2] = $advance$2;
 $118 = HEAP32[$5>>2]|0;
 $119 = $118 & 1;
 $120 = ($119|0)==(0);
 if ($120) {
  $121 = (_FT_MulFix($top$1,$y_scale$0)|0);
  $122 = (_FT_MulFix($advance$2,$y_scale$0)|0);
  $advance$3 = $122;$top$2 = $121;
 } else {
  $advance$3 = $advance$2;$top$2 = $top$1;
 }
 $123 = HEAP32[$20>>2]|0;
 $124 = HEAP32[$29>>2]|0;
 $125 = (($124|0) / 2)&-1;
 $126 = (($123) - ($125))|0;
 $127 = ((($2)) + 44|0);
 HEAP32[$127>>2] = $126;
 $128 = ((($2)) + 48|0);
 HEAP32[$128>>2] = $top$2;
 $129 = ((($2)) + 52|0);
 HEAP32[$129>>2] = $advance$3;
 STACKTOP = sp;return;
}
function _tt_get_metrics($loader,$glyph_index) {
 $loader = $loader|0;
 $glyph_index = $glyph_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $advance_height = 0;
 var $advance_width = 0, $left_bearing = 0, $top_bearing = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $left_bearing = sp + 6|0;
 $top_bearing = sp + 4|0;
 $advance_width = sp + 2|0;
 $advance_height = sp;
 $0 = HEAP32[$loader>>2]|0;
 HEAP16[$left_bearing>>1] = 0;
 HEAP16[$top_bearing>>1] = 0;
 HEAP16[$advance_width>>1] = 0;
 HEAP16[$advance_height>>1] = 0;
 _TT_Get_HMetrics($0,$glyph_index,$left_bearing,$advance_width);
 _TT_Get_VMetrics($0,$glyph_index,$top_bearing,$advance_height);
 $1 = HEAP16[$left_bearing>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = ((($loader)) + 52|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP16[$advance_width>>1]|0;
 $5 = $4&65535;
 $6 = ((($loader)) + 56|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP16[$top_bearing>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = ((($loader)) + 176|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP16[$advance_height>>1]|0;
 $11 = $10&65535;
 $12 = ((($loader)) + 180|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($loader)) + 64|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 HEAP8[$13>>0] = 1;
 $16 = HEAP16[$advance_width>>1]|0;
 $17 = $16&65535;
 $18 = ((($loader)) + 60|0);
 HEAP32[$18>>2] = $17;
 STACKTOP = sp;return;
}
function _tt_get_metrics_incr_overrides($loader,$glyph_index) {
 $loader = $loader|0;
 $glyph_index = $glyph_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $metrics = 0, $sext = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $metrics = sp;
 $0 = HEAP32[$loader>>2]|0;
 $1 = ((($0)) + 128|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$4>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = ((($loader)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$metrics>>2] = $11;
 $12 = ((($metrics)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($loader)) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($metrics)) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($metrics)) + 12|0);
 HEAP32[$16>>2] = 0;
 $17 = HEAP32[$1>>2]|0;
 $18 = ((($17)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($19)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (FUNCTION_TABLE_iiiii[$22 & 63]($24,$glyph_index,0,$metrics)|0);
 $26 = ($25|0)==(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$metrics>>2]|0;
 $28 = HEAP32[$15>>2]|0;
 $sext = $27 << 16;
 $29 = $sext >> 16;
 HEAP32[$10>>2] = $29;
 $30 = $28 & 65535;
 HEAP32[$13>>2] = $30;
 $31 = ((($loader)) + 176|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($loader)) + 180|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($loader)) + 64|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ($34<<24>>24)==(0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 HEAP8[$33>>0] = 1;
 $36 = ((($loader)) + 60|0);
 HEAP32[$36>>2] = $30;
 STACKTOP = sp;return;
}
function _TT_Process_Simple_Glyph($loader) {
 $loader = $loader|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $deltas = 0, $error$0 = 0, $i$02 = 0, $vec$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $deltas = sp;
 $0 = ((($loader)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 56|0);
 $3 = ((($1)) + 58|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4 << 16 >> 16;
 $6 = ((($1)) + 60|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5<<3)|0);
 $9 = ((($loader)) + 68|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $8;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $20 = (($5) + 1)|0;
 $21 = HEAP32[$6>>2]|0;
 $22 = (($21) + ($20<<3)|0);
 $23 = ((($loader)) + 76|0);
 $24 = $23;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 $30 = $22;
 $31 = $30;
 HEAP32[$31>>2] = $26;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $29;
 $34 = (($5) + 2)|0;
 $35 = HEAP32[$6>>2]|0;
 $36 = (($35) + ($34<<3)|0);
 $37 = ((($loader)) + 184|0);
 $38 = $37;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $36;
 $45 = $44;
 HEAP32[$45>>2] = $40;
 $46 = (($44) + 4)|0;
 $47 = $46;
 HEAP32[$47>>2] = $43;
 $48 = (($5) + 3)|0;
 $49 = HEAP32[$6>>2]|0;
 $50 = (($49) + ($48<<3)|0);
 $51 = ((($loader)) + 192|0);
 $52 = $51;
 $53 = $52;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($52) + 4)|0;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = $50;
 $59 = $58;
 HEAP32[$59>>2] = $54;
 $60 = (($58) + 4)|0;
 $61 = $60;
 HEAP32[$61>>2] = $57;
 $62 = ((($1)) + 64|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + ($5)|0);
 HEAP8[$64>>0] = 0;
 $65 = HEAP32[$62>>2]|0;
 $66 = (($65) + ($20)|0);
 HEAP8[$66>>0] = 0;
 $67 = HEAP32[$62>>2]|0;
 $68 = (($67) + ($34)|0);
 HEAP8[$68>>0] = 0;
 $69 = HEAP32[$62>>2]|0;
 $70 = (($69) + ($48)|0);
 HEAP8[$70>>0] = 0;
 $71 = (($5) + 4)|0;
 $72 = HEAP32[$loader>>2]|0;
 $73 = ((($72)) + 708|0);
 $74 = HEAP8[$73>>0]|0;
 $75 = ($74<<24>>24)==(0);
 if ($75) {
  $error$0 = 0;
 } else {
  $76 = ((($72)) + 100|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($loader)) + 20|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (_TT_Vary_Get_Glyph_Deltas($72,$79,$deltas,$71)|0);
  $81 = ($80|0)==(0);
  if (!($81)) {
   $$0 = $80;
   STACKTOP = sp;return ($$0|0);
  }
  $82 = ($4<<16>>16)>(-4);
  if ($82) {
   $83 = HEAP32[$deltas>>2]|0;
   $84 = HEAP32[$6>>2]|0;
   $i$02 = 0;
   while(1) {
    $85 = (($83) + ($i$02<<3)|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($84) + ($i$02<<3)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (($88) + ($86))|0;
    HEAP32[$87>>2] = $89;
    $90 = (((($83) + ($i$02<<3)|0)) + 4|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (((($84) + ($i$02<<3)|0)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + ($91))|0;
    HEAP32[$92>>2] = $94;
    $95 = (($i$02) + 1)|0;
    $96 = ($95|0)<($71|0);
    if ($96) {
     $i$02 = $95;
    } else {
     break;
    }
   }
  }
  $97 = HEAP32[$deltas>>2]|0;
  _ft_mem_free($77,$97);
  HEAP32[$deltas>>2] = 0;
  $error$0 = $80;
 }
 $98 = ((($loader)) + 16|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $99 & 2;
 $101 = ($100|0)==(0);
 if ($101) {
  $102 = ((($loader)) + 124|0);
  _tt_prepare_zone($102,$2,0,0);
  $103 = ((($loader)) + 144|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ((($loader)) + 140|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ((($loader)) + 132|0);
  $108 = HEAP16[$107>>1]|0;
  $109 = $108&65535;
  $110 = $109 << 3;
  $111 = (($110) + 32)|0;
  _memcpy(($104|0),($106|0),($111|0))|0;
 }
 $112 = HEAP32[$98>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[$6>>2]|0;
  $116 = (($115) + ($71<<3)|0);
  $117 = ((($loader)) + 4|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = ((($118)) + 48|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ((($118)) + 52|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($4<<16>>16)>(-4);
  if ($123) {
   $vec$01 = $115;
   while(1) {
    $124 = HEAP32[$vec$01>>2]|0;
    $125 = (_FT_MulFix($124,$120)|0);
    HEAP32[$vec$01>>2] = $125;
    $126 = ((($vec$01)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (_FT_MulFix($127,$122)|0);
    HEAP32[$126>>2] = $128;
    $129 = ((($vec$01)) + 8|0);
    $130 = ($129>>>0)<($116>>>0);
    if ($130) {
     $vec$01 = $129;
    } else {
     break;
    }
   }
  }
  $131 = HEAP32[$6>>2]|0;
  $132 = (($131) + ($5<<3)|0);
  $133 = $132;
  $134 = $133;
  $135 = HEAP32[$134>>2]|0;
  $136 = (($133) + 4)|0;
  $137 = $136;
  $138 = HEAP32[$137>>2]|0;
  $139 = $9;
  $140 = $139;
  HEAP32[$140>>2] = $135;
  $141 = (($139) + 4)|0;
  $142 = $141;
  HEAP32[$142>>2] = $138;
  $143 = HEAP32[$6>>2]|0;
  $144 = (($143) + ($20<<3)|0);
  $145 = $144;
  $146 = $145;
  $147 = HEAP32[$146>>2]|0;
  $148 = (($145) + 4)|0;
  $149 = $148;
  $150 = HEAP32[$149>>2]|0;
  $151 = $23;
  $152 = $151;
  HEAP32[$152>>2] = $147;
  $153 = (($151) + 4)|0;
  $154 = $153;
  HEAP32[$154>>2] = $150;
  $155 = HEAP32[$6>>2]|0;
  $156 = (($155) + ($34<<3)|0);
  $157 = $156;
  $158 = $157;
  $159 = HEAP32[$158>>2]|0;
  $160 = (($157) + 4)|0;
  $161 = $160;
  $162 = HEAP32[$161>>2]|0;
  $163 = $37;
  $164 = $163;
  HEAP32[$164>>2] = $159;
  $165 = (($163) + 4)|0;
  $166 = $165;
  HEAP32[$166>>2] = $162;
  $167 = HEAP32[$6>>2]|0;
  $168 = (($167) + ($48<<3)|0);
  $169 = $168;
  $170 = $169;
  $171 = HEAP32[$170>>2]|0;
  $172 = (($169) + 4)|0;
  $173 = $172;
  $174 = HEAP32[$173>>2]|0;
  $175 = $51;
  $176 = $175;
  HEAP32[$176>>2] = $171;
  $177 = (($175) + 4)|0;
  $178 = $177;
  HEAP32[$178>>2] = $174;
 }
 $179 = HEAP32[$98>>2]|0;
 $180 = $179 & 2;
 $181 = ($180|0)==(0);
 if (!($181)) {
  $$0 = $error$0;
  STACKTOP = sp;return ($$0|0);
 }
 $182 = ((($loader)) + 132|0);
 $183 = HEAP16[$182>>1]|0;
 $184 = $183&65535;
 $185 = (($184) + 4)|0;
 $186 = $185&65535;
 HEAP16[$182>>1] = $186;
 $187 = (_TT_Hint_Glyph($loader,0)|0);
 $$0 = $187;
 STACKTOP = sp;return ($$0|0);
}
function _TT_Process_Composite_Component($loader,$subglyph,$start_point,$num_base_points) {
 $loader = $loader|0;
 $subglyph = $subglyph|0;
 $start_point = $start_point|0;
 $num_base_points = $num_base_points|0;
 var $$not = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $exitcond = 0, $i$03 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond4 = 0, $x$0 = 0, $x$1 = 0, $y$0 = 0, $y$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 22|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 << 16 >> 16;
 $7 = ((($subglyph)) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 & 200;
 $10 = ($9<<16>>16)==(0);
 $$not = $10 ^ 1;
 $11 = ($6>>>0)>($num_base_points>>>0);
 $or$cond4 = $11 & $$not;
 if ($or$cond4) {
  $12 = ((($subglyph)) + 16|0);
  $13 = $5 << 16 >> 16;
  $i$03 = $num_base_points;
  while(1) {
   $14 = (($3) + ($i$03<<3)|0);
   _FT_Vector_Transform($14,$12);
   $15 = (($i$03) + 1)|0;
   $exitcond = ($15|0)==($13|0);
   if ($exitcond) {
    break;
   } else {
    $i$03 = $15;
   }
  }
 }
 $16 = HEAP16[$7>>1]|0;
 $17 = $16&65535;
 $18 = $17 & 2;
 $19 = ($18|0)==(0);
 $20 = ((($subglyph)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($subglyph)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 do {
  if ($19) {
   $24 = (($21) + ($start_point))|0;
   $25 = (($23) + ($num_base_points))|0;
   $26 = ($24>>>0)<($num_base_points>>>0);
   $27 = ($25>>>0)<($6>>>0);
   $or$cond = $26 & $27;
   if ($or$cond) {
    $28 = HEAP32[$2>>2]|0;
    $29 = (($28) + ($24<<3)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + ($25<<3)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($30) - ($32))|0;
    $34 = (((($28) + ($24<<3)|0)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (((($28) + ($25<<3)|0)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($35) - ($37))|0;
    $x$1 = $33;$y$1 = $38;
    break;
   } else {
    return;
   }
  } else {
   $39 = $23 | $21;
   $40 = ($39|0)==(0);
   if ($40) {
    return;
   }
   $41 = $17 & 2048;
   $42 = ($41|0)==(0);
   $or$cond2 = $10 | $42;
   if ($or$cond2) {
    $x$0 = $21;$y$0 = $23;
   } else {
    $43 = ((($subglyph)) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (_FT_MulFix($44,$44)|0);
    $46 = ((($subglyph)) + 20|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (_FT_MulFix($47,$47)|0);
    $49 = (($48) + ($45))|0;
    $50 = (_FT_SqrtFixed($49)|0);
    $51 = ((($subglyph)) + 28|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (_FT_MulFix($52,$52)|0);
    $54 = ((($subglyph)) + 24|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (_FT_MulFix($55,$55)|0);
    $57 = (($56) + ($53))|0;
    $58 = (_FT_SqrtFixed($57)|0);
    $59 = (_FT_MulFix($21,$50)|0);
    $60 = (_FT_MulFix($23,$58)|0);
    $x$0 = $59;$y$0 = $60;
   }
   $61 = ((($loader)) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62 & 1;
   $64 = ($63|0)==(0);
   if ($64) {
    $65 = ((($loader)) + 4|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ((($66)) + 48|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((($66)) + 52|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (_FT_MulFix($x$0,$68)|0);
    $72 = (_FT_MulFix($y$0,$70)|0);
    $73 = HEAP16[$7>>1]|0;
    $74 = $73 & 4;
    $75 = ($74<<16>>16)==(0);
    if ($75) {
     $x$1 = $71;$y$1 = $72;
    } else {
     $76 = (($71) + 32)|0;
     $77 = $76 & -64;
     $78 = (($72) + 32)|0;
     $79 = $78 & -64;
     $x$1 = $77;$y$1 = $79;
    }
   } else {
    $x$1 = $x$0;$y$1 = $y$0;
   }
  }
 } while(0);
 $80 = $x$1 | $y$1;
 $81 = ($80|0)==(0);
 if ($81) {
  return;
 }
 $82 = (($6) - ($num_base_points))|0;
 $83 = (($3) + ($num_base_points<<3)|0);
 _translate_array($82,$83,$x$1,$y$1);
 return;
}
function _TT_Process_Composite_Glyph($loader,$start_point,$start_contour) {
 $loader = $loader|0;
 $start_point = $start_point|0;
 $start_contour = $start_contour|0;
 var $$lcssa1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $i$02 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 4|0;
 $tmp = sp;
 $0 = ((($loader)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 22|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = (($4) + 4)|0;
 $6 = ($5|0)==(0);
 if ($6) {
  label = 3;
 } else {
  $7 = ((($1)) + 58|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 << 16 >> 16;
  $10 = (($5) + ($4))|0;
  $11 = (($10) + ($9))|0;
  $12 = ((($1)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)>($13>>>0);
  if ($14) {
   $15 = (_FT_GlyphLoader_CheckPoints($1,$5,0)|0);
   HEAP32[$error>>2] = $15;
   $16 = ($15|0)==(0);
   if (!($16)) {
    STACKTOP = sp;return;
   }
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  HEAP32[$error>>2] = 0;
 }
 $17 = HEAP16[$2>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = ((($1)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($18<<3)|0);
 $22 = ((($loader)) + 68|0);
 $23 = $22;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $21;
 $30 = $29;
 HEAP32[$30>>2] = $25;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = HEAP16[$2>>1]|0;
 $34 = $33 << 16 >> 16;
 $35 = (($34) + 1)|0;
 $36 = HEAP32[$19>>2]|0;
 $37 = (($36) + ($35<<3)|0);
 $38 = ((($loader)) + 76|0);
 $39 = $38;
 $40 = $39;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4)|0;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = $37;
 $46 = $45;
 HEAP32[$46>>2] = $41;
 $47 = (($45) + 4)|0;
 $48 = $47;
 HEAP32[$48>>2] = $44;
 $49 = HEAP16[$2>>1]|0;
 $50 = $49 << 16 >> 16;
 $51 = (($50) + 2)|0;
 $52 = HEAP32[$19>>2]|0;
 $53 = (($52) + ($51<<3)|0);
 $54 = ((($loader)) + 184|0);
 $55 = $54;
 $56 = $55;
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 4)|0;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = $53;
 $62 = $61;
 HEAP32[$62>>2] = $57;
 $63 = (($61) + 4)|0;
 $64 = $63;
 HEAP32[$64>>2] = $60;
 $65 = HEAP16[$2>>1]|0;
 $66 = $65 << 16 >> 16;
 $67 = (($66) + 3)|0;
 $68 = HEAP32[$19>>2]|0;
 $69 = (($68) + ($67<<3)|0);
 $70 = ((($loader)) + 192|0);
 $71 = $70;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = $69;
 $78 = $77;
 HEAP32[$78>>2] = $73;
 $79 = (($77) + 4)|0;
 $80 = $79;
 HEAP32[$80>>2] = $76;
 $81 = HEAP16[$2>>1]|0;
 $82 = $81 << 16 >> 16;
 $83 = ((($1)) + 28|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + ($82)|0);
 HEAP8[$85>>0] = 0;
 $86 = HEAP16[$2>>1]|0;
 $87 = $86 << 16 >> 16;
 $88 = (($87) + 1)|0;
 $89 = HEAP32[$83>>2]|0;
 $90 = (($89) + ($88)|0);
 HEAP8[$90>>0] = 0;
 $91 = HEAP16[$2>>1]|0;
 $92 = $91 << 16 >> 16;
 $93 = (($92) + 2)|0;
 $94 = HEAP32[$83>>2]|0;
 $95 = (($94) + ($93)|0);
 HEAP8[$95>>0] = 0;
 $96 = HEAP16[$2>>1]|0;
 $97 = $96 << 16 >> 16;
 $98 = (($97) + 3)|0;
 $99 = HEAP32[$83>>2]|0;
 $100 = (($99) + ($98)|0);
 HEAP8[$100>>0] = 0;
 $101 = ((($loader)) + 24|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ((($loader)) + 168|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (_FT_Stream_Seek($102,$104)|0);
 HEAP32[$error>>2] = $105;
 $106 = ($105|0)==(0);
 if (!($106)) {
  STACKTOP = sp;return;
 }
 $107 = (_FT_Stream_ReadUShort($102,$error)|0);
 $108 = HEAP32[$error>>2]|0;
 $109 = ($108|0)==(0);
 if (!($109)) {
  STACKTOP = sp;return;
 }
 $110 = HEAP32[$loader>>2]|0;
 $111 = ((($110)) + 286|0);
 $112 = HEAP16[$111>>1]|0;
 $113 = $107&65535;
 $114 = ($107&65535)>($112&65535);
 if ($114) {
  $115 = ((($loader)) + 28|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($113|0)>($116|0);
  if ($117) {
   STACKTOP = sp;return;
  }
  $118 = ((($loader)) + 160|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ((($119)) + 388|0);
  $121 = HEAP32[$120>>2]|0;
  HEAP32[$tmp>>2] = $121;
  $122 = HEAP32[$118>>2]|0;
  $123 = ((($122)) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ((($122)) + 392|0);
  $126 = (_Update_Max($124,$tmp,1,$125,$113)|0);
  HEAP32[$error>>2] = $126;
  $127 = HEAP32[$tmp>>2]|0;
  $128 = $127 & 65535;
  $129 = HEAP32[$118>>2]|0;
  $130 = ((($129)) + 388|0);
  HEAP32[$130>>2] = $128;
  $131 = HEAP32[$error>>2]|0;
  $132 = ($131|0)==(0);
  if (!($132)) {
   STACKTOP = sp;return;
  }
 } else {
  $133 = ($107<<16>>16)==(0);
  if ($133) {
   STACKTOP = sp;return;
  }
 }
 $134 = ((($loader)) + 160|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ((($135)) + 392|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = (_FT_Stream_Read($102,$137,$113)|0);
 HEAP32[$error>>2] = $138;
 $139 = ($138|0)==(0);
 if (!($139)) {
  STACKTOP = sp;return;
 }
 $140 = HEAP32[$134>>2]|0;
 $141 = ((($140)) + 392|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ((($loader)) + 8|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = ((($144)) + 136|0);
 HEAP32[$145>>2] = $142;
 $146 = HEAP32[$143>>2]|0;
 $147 = ((($146)) + 140|0);
 HEAP32[$147>>2] = $113;
 $148 = ((($loader)) + 124|0);
 $149 = HEAP32[$0>>2]|0;
 $150 = ((($149)) + 20|0);
 _tt_prepare_zone($148,$150,$start_point,$start_contour);
 $151 = ((($loader)) + 132|0);
 $152 = HEAP16[$151>>1]|0;
 $153 = $152&65535;
 $154 = ($153>>>0)>($start_point>>>0);
 if ($154) {
  $155 = ((($loader)) + 148|0);
  $i$02 = $start_point;
  while(1) {
   $156 = HEAP32[$155>>2]|0;
   $157 = (($156) + ($i$02)|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158&255;
   $160 = $159 & 231;
   $161 = $160&255;
   HEAP8[$157>>0] = $161;
   $162 = (($i$02) + 1)|0;
   $163 = HEAP16[$151>>1]|0;
   $164 = $163&65535;
   $165 = ($162>>>0)<($164>>>0);
   if ($165) {
    $i$02 = $162;
   } else {
    $$lcssa1 = $164;
    break;
   }
  }
 } else {
  $$lcssa1 = $153;
 }
 $166 = (($$lcssa1) + 4)|0;
 $167 = $166&65535;
 HEAP16[$151>>1] = $167;
 (_TT_Hint_Glyph($loader,1)|0);
 STACKTOP = sp;return;
}
function _tt_prepare_zone($zone,$load,$start_point,$start_contour) {
 $zone = $zone|0;
 $load = $load|0;
 $start_point = $start_point|0;
 $start_contour = $start_contour|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($load)) + 2|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1&65535;
 $3 = (($2) - ($start_point))|0;
 $4 = $3&65535;
 $5 = ((($zone)) + 8|0);
 HEAP16[$5>>1] = $4;
 $6 = HEAP16[$load>>1]|0;
 $7 = $6&65535;
 $8 = (($7) - ($start_contour))|0;
 $9 = $8&65535;
 $10 = ((($zone)) + 10|0);
 HEAP16[$10>>1] = $9;
 $11 = ((($load)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($start_point<<3)|0);
 $14 = ((($zone)) + 12|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($load)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($start_point<<3)|0);
 $18 = ((($zone)) + 16|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($load)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($start_point<<3)|0);
 $22 = ((($zone)) + 20|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($load)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($start_point)|0);
 $26 = ((($zone)) + 24|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($load)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($start_contour<<1)|0);
 $30 = ((($zone)) + 28|0);
 HEAP32[$30>>2] = $29;
 $31 = $start_point&65535;
 $32 = ((($zone)) + 32|0);
 HEAP16[$32>>1] = $31;
 return;
}
function _TT_Hint_Glyph($loader,$is_composite) {
 $loader = $loader|0;
 $is_composite = $is_composite|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 124|0);
 $1 = ((($loader)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 140|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($loader)) + 132|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = (($7) + -4)|0;
 $9 = ((($loader)) + 140|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8<<3)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 32)|0;
 $14 = $13 & -64;
 $15 = ($14|0)==($12|0);
 if (!($15)) {
  $16 = (($14) - ($12))|0;
  _translate_array($7,$10,$16,0);
 }
 $17 = ($4|0)!=(0);
 if ($17) {
  $18 = ((($loader)) + 136|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$9>>2]|0;
  $21 = HEAP16[$5>>1]|0;
  $22 = $21&65535;
  $23 = $22 << 3;
  _memcpy(($19|0),($20|0),($23|0))|0;
 }
 $24 = ((($loader)) + 160|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 284|0);
 $27 = ((($loader)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($28)) + 172|0);
 dest=$26; src=$29; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $30 = ($is_composite<<24>>24)==(0);
 if ($30) {
  $41 = HEAP32[$27>>2]|0;
  $42 = ((($41)) + 48|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$24>>2]|0;
  $45 = ((($44)) + 220|0);
  HEAP32[$45>>2] = $43;
  $46 = HEAP32[$27>>2]|0;
  $47 = ((($46)) + 52|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$24>>2]|0;
  $50 = ((($49)) + 224|0);
  HEAP32[$50>>2] = $48;
 } else {
  $31 = HEAP32[$24>>2]|0;
  $32 = ((($31)) + 220|0);
  HEAP32[$32>>2] = 65536;
  $33 = HEAP32[$24>>2]|0;
  $34 = ((($33)) + 224|0);
  HEAP32[$34>>2] = 65536;
  $35 = ((($loader)) + 144|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$9>>2]|0;
  $38 = HEAP16[$5>>1]|0;
  $39 = $38&65535;
  $40 = $39 << 3;
  _memcpy(($36|0),($37|0),($40|0))|0;
 }
 $51 = HEAP16[$5>>1]|0;
 $52 = $51&65535;
 $53 = (($52) + -3)|0;
 $54 = HEAP32[$9>>2]|0;
 $55 = (($54) + ($53<<3)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + 32)|0;
 $58 = $57 & -64;
 HEAP32[$55>>2] = $58;
 $59 = HEAP16[$5>>1]|0;
 $60 = $59&65535;
 $61 = (($60) + -1)|0;
 $62 = HEAP32[$9>>2]|0;
 $63 = (((($62) + ($61<<3)|0)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + 32)|0;
 $66 = $65 & -64;
 HEAP32[$63>>2] = $66;
 if ($17) {
  $67 = ((($loader)) + 12|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ((($68)) + 64|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = HEAP32[$24>>2]|0;
  $72 = ((($71)) + 392|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (_TT_Set_CodeRange($71,3,$73,$4)|0);
  $75 = ($74|0)==(0);
  if (!($75)) {
   $$0 = $74;
   return ($$0|0);
  }
  $76 = HEAP32[$24>>2]|0;
  $77 = ((($76)) + 560|0);
  HEAP8[$77>>0] = $is_composite;
  $78 = HEAP32[$24>>2]|0;
  $79 = ((($78)) + 144|0);
  dest=$79; src=$0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $80 = ((($loader)) + 16|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $81 & 1;
  $83 = ($82|0)==(0);
  if ($83) {
   $84 = HEAP32[$27>>2]|0;
   $85 = ((($84)) + 292|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = ($86<<24>>24)!=(0);
   $phitmp = $87&1;
   $89 = $phitmp;
  } else {
   $89 = 0;
  }
  $88 = HEAP32[$24>>2]|0;
  $90 = (_TT_Run_Context($88,$89)|0);
  $91 = ($90|0)==(0);
  if (!($91)) {
   $92 = HEAP32[$24>>2]|0;
   $93 = ((($92)) + 561|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = ($94<<24>>24)==(0);
   if (!($95)) {
    $$0 = $90;
    return ($$0|0);
   }
  }
  $96 = HEAP32[$24>>2]|0;
  $97 = ((($96)) + 340|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $98 << 5;
  $100 = HEAP8[$70>>0]|0;
  $101 = $100&255;
  $102 = $99 | $101;
  $103 = $102 | 4;
  $104 = $103&255;
  HEAP8[$70>>0] = $104;
 }
 $105 = ((($loader)) + 65|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = ($106<<24>>24)==(0);
 if (!($107)) {
  $$0 = 0;
  return ($$0|0);
 }
 $108 = ((($loader)) + 68|0);
 $109 = HEAP16[$5>>1]|0;
 $110 = $109&65535;
 $111 = (($110) + -4)|0;
 $112 = HEAP32[$9>>2]|0;
 $113 = (($112) + ($111<<3)|0);
 $114 = $113;
 $115 = $114;
 $116 = HEAP32[$115>>2]|0;
 $117 = (($114) + 4)|0;
 $118 = $117;
 $119 = HEAP32[$118>>2]|0;
 $120 = $108;
 $121 = $120;
 HEAP32[$121>>2] = $116;
 $122 = (($120) + 4)|0;
 $123 = $122;
 HEAP32[$123>>2] = $119;
 $124 = ((($loader)) + 76|0);
 $125 = HEAP16[$5>>1]|0;
 $126 = $125&65535;
 $127 = (($126) + -3)|0;
 $128 = HEAP32[$9>>2]|0;
 $129 = (($128) + ($127<<3)|0);
 $130 = $129;
 $131 = $130;
 $132 = HEAP32[$131>>2]|0;
 $133 = (($130) + 4)|0;
 $134 = $133;
 $135 = HEAP32[$134>>2]|0;
 $136 = $124;
 $137 = $136;
 HEAP32[$137>>2] = $132;
 $138 = (($136) + 4)|0;
 $139 = $138;
 HEAP32[$139>>2] = $135;
 $140 = ((($loader)) + 184|0);
 $141 = HEAP16[$5>>1]|0;
 $142 = $141&65535;
 $143 = (($142) + -2)|0;
 $144 = HEAP32[$9>>2]|0;
 $145 = (($144) + ($143<<3)|0);
 $146 = $145;
 $147 = $146;
 $148 = HEAP32[$147>>2]|0;
 $149 = (($146) + 4)|0;
 $150 = $149;
 $151 = HEAP32[$150>>2]|0;
 $152 = $140;
 $153 = $152;
 HEAP32[$153>>2] = $148;
 $154 = (($152) + 4)|0;
 $155 = $154;
 HEAP32[$155>>2] = $151;
 $156 = ((($loader)) + 192|0);
 $157 = HEAP16[$5>>1]|0;
 $158 = $157&65535;
 $159 = (($158) + -1)|0;
 $160 = HEAP32[$9>>2]|0;
 $161 = (($160) + ($159<<3)|0);
 $162 = $161;
 $163 = $162;
 $164 = HEAP32[$163>>2]|0;
 $165 = (($162) + 4)|0;
 $166 = $165;
 $167 = HEAP32[$166>>2]|0;
 $168 = $156;
 $169 = $168;
 HEAP32[$169>>2] = $164;
 $170 = (($168) + 4)|0;
 $171 = $170;
 HEAP32[$171>>2] = $167;
 $$0 = 0;
 return ($$0|0);
}
function _translate_array($n,$coords,$delta_x,$delta_y) {
 $n = $n|0;
 $coords = $coords|0;
 $delta_x = $delta_x|0;
 $delta_y = $delta_y|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0, $k$04 = 0, $k$13 = 0, $or$cond = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($delta_x|0)==(0);
 $1 = ($n|0)==(0);
 $or$cond = $0 | $1;
 if (!($or$cond)) {
  $k$04 = 0;
  while(1) {
   $2 = (($coords) + ($k$04<<3)|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + ($delta_x))|0;
   HEAP32[$2>>2] = $4;
   $5 = (($k$04) + 1)|0;
   $exitcond6 = ($5|0)==($n|0);
   if ($exitcond6) {
    break;
   } else {
    $k$04 = $5;
   }
  }
 }
 $6 = ($delta_y|0)==(0);
 $7 = ($n|0)==(0);
 $or$cond7 = $6 | $7;
 if ($or$cond7) {
  return;
 } else {
  $k$13 = 0;
 }
 while(1) {
  $8 = (((($coords) + ($k$13<<3)|0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($delta_y))|0;
  HEAP32[$8>>2] = $10;
  $11 = (($k$13) + 1)|0;
  $exitcond = ($11|0)==($n|0);
  if ($exitcond) {
   break;
  } else {
   $k$13 = $11;
  }
 }
 return;
}
function _t1_decoder_parse_charstrings($decoder,$charstring_base,$charstring_len) {
 $decoder = $decoder|0;
 $charstring_base = $charstring_base|0;
 $charstring_len = $charstring_len|0;
 var $$ = 0, $$0 = 0, $$53 = 0, $$54 = 0, $$55 = 0, $$lcssa240 = 0, $$lcssa240$lcssa = 0, $$lcssa240$lcssa$lcssa243 = 0, $$lcssa253 = 0, $$lcssa256 = 0, $$lcssa258 = 0, $$off = 0, $$off51 = 0, $$sum = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0;
 var $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum38 = 0, $$sum39 = 0, $$sum40 = 0, $$sum41 = 0;
 var $$sum42 = 0, $$sum43 = 0, $$sum44 = 0, $$sum45 = 0, $$sum46 = 0, $$sum47 = 0, $$sum48 = 0, $$sum49 = 0, $$sum50 = 0, $$sum52 = 0, $$value$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $delta$0102 = 0, $delta$1$lcssa = 0, $delta$196 = 0, $exitcond = 0, $ip$0$ph$ph119 = 0, $ip$0$ph109 = 0, $ip$081 = 0, $ip$1 = 0, $ip$2 = 0, $ip$2$lcssa = 0;
 var $ip$2$lcssa$lcssa = 0, $ip$3 = 0, $known_othersubr_result_cnt$0$ph$ph114 = 0, $known_othersubr_result_cnt$0$ph108 = 0, $known_othersubr_result_cnt$0$ph108$lcssa249 = 0, $known_othersubr_result_cnt$1 = 0, $known_othersubr_result_cnt$2 = 0, $large_int$0$ = 0, $large_int$0$ph$ph112 = 0, $large_int$0$ph106 = 0, $large_int$079 = 0, $large_int$1 = 0, $large_int$1$ = 0, $large_int$1$$lcssa = 0, $large_int$1$$lcssa$lcssa = 0, $large_int$3 = 0, $limit$0$ph$ph118 = 0, $limit$1 = 0, $mm$095 = 0, $nn$0101 = 0;
 var $op$0 = 0, $op$0$lcssa = 0, $op$0$lcssa$lcssa = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0, $orig_x$0$ph$ph115 = 0, $orig_x$1 = 0, $seed = 0, $storemerge = 0, $switch = 0, $tmp$0$lcssa = 0, $tmp$097 = 0, $top$0 = 0, $top$1 = 0, $unknown_othersubr_result_cnt$0$ph$ph113 = 0, $unknown_othersubr_result_cnt$0$ph107 = 0, $unknown_othersubr_result_cnt$080 = 0;
 var $unknown_othersubr_result_cnt$1 = 0, $unknown_othersubr_result_cnt$1$lcssa = 0, $unknown_othersubr_result_cnt$1$lcssa$lcssa = 0, $unknown_othersubr_result_cnt$2 = 0, $unknown_othersubr_result_cnt$3 = 0, $value$0 = 0, $value$1 = 0, $values$0103 = 0, $x$0$ph$ph117 = 0, $x$1 = 0, $x$2 = 0, $y$0$ph$ph116 = 0, $y$1 = 0, $y$2 = 0, $zone$0$ph$ph120 = 0, $zone$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 $seed = sp;
 HEAP32[$0>>2] = $decoder;
 HEAP32[$1>>2] = $charstring_base;
 $2 = $seed;
 $3 = $0;
 $4 = $1;
 $5 = $4 ^ $3;
 $6 = $5 ^ $2;
 $7 = $6 >>> 10;
 $8 = $7 ^ $6;
 $9 = $6 >> 20;
 $10 = $8 ^ $9;
 $11 = $10 & 65535;
 $12 = ($11|0)==(0);
 $$ = $12 ? 29572 : $11;
 HEAP32[$seed>>2] = $$;
 $13 = HEAP32[$0>>2]|0;
 $14 = ((($13)) + 112|0);
 $15 = ((($13)) + 1136|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$0>>2]|0;
 $17 = ((($16)) + 1140|0);
 $18 = ((($16)) + 1344|0);
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[$0>>2]|0;
 $20 = ((($19)) + 1140|0);
 $21 = ((($decoder)) + 64|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($decoder)) + 72|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = ((($24)) + 1488|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  $28 = ((($24)) + 1492|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0);
  if (!($30)) {
   $31 = $29 << 2;
   _memset(($26|0),0,($31|0))|0;
  }
 }
 $32 = HEAP32[$1>>2]|0;
 $33 = ((($19)) + 1144|0);
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$1>>2]|0;
 $35 = (($34) + ($charstring_len)|0);
 $36 = ((($19)) + 1148|0);
 HEAP32[$36>>2] = $35;
 $37 = HEAP32[$33>>2]|0;
 HEAP32[$20>>2] = $37;
 $38 = ((($decoder)) + 24|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($decoder)) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($23|0)!=(0|0);
 if ($42) {
  $43 = ((($23)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$23>>2]|0;
  FUNCTION_TABLE_vi[$44 & 127]($45);
 }
 $46 = ($37>>>0)<($35>>>0);
 if (!($46)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $47 = ((($23)) + 20|0);
 $48 = ((($decoder)) + 20|0);
 $49 = ((($decoder)) + 32|0);
 $50 = ((($decoder)) + 40|0);
 $51 = ((($decoder)) + 44|0);
 $52 = ((($decoder)) + 70|0);
 $53 = ((($decoder)) + 32|0);
 $54 = ((($decoder)) + 36|0);
 $55 = ((($decoder)) + 40|0);
 $56 = ((($decoder)) + 44|0);
 $57 = ((($decoder)) + 70|0);
 $58 = ((($23)) + 12|0);
 $59 = ((($23)) + 16|0);
 $60 = ((($23)) + 12|0);
 $61 = ((($23)) + 16|0);
 $ip$0$ph$ph119 = $37;$known_othersubr_result_cnt$0$ph$ph114 = 0;$large_int$0$ph$ph112 = 0;$limit$0$ph$ph118 = $35;$orig_x$0$ph$ph115 = $39;$unknown_othersubr_result_cnt$0$ph$ph113 = 0;$x$0$ph$ph117 = $39;$y$0$ph$ph116 = $41;$zone$0$ph$ph120 = $20;
 L11: while(1) {
  $ip$0$ph109 = $ip$0$ph$ph119;$known_othersubr_result_cnt$0$ph108 = $known_othersubr_result_cnt$0$ph$ph114;$large_int$0$ph106 = $large_int$0$ph$ph112;$unknown_othersubr_result_cnt$0$ph107 = $unknown_othersubr_result_cnt$0$ph$ph113;
  while(1) {
   $ip$081 = $ip$0$ph109;$large_int$079 = $large_int$0$ph106;$unknown_othersubr_result_cnt$080 = $unknown_othersubr_result_cnt$0$ph107;
   while(1) {
    $62 = HEAP32[$0>>2]|0;
    $63 = ((($62)) + 1136|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ((($ip$081)) + 1|0);
    $66 = HEAP8[$ip$081>>0]|0;
    $67 = $66&255;
    L17: do {
     switch ($67|0) {
     case 1:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 16;$value$1 = 0;
      break;
     }
     case 3:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 18;$value$1 = 0;
      break;
     }
     case 4:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 14;$value$1 = 0;
      break;
     }
     case 5:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 9;$value$1 = 0;
      break;
     }
     case 6:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 6;$value$1 = 0;
      break;
     }
     case 7:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 13;$value$1 = 0;
      break;
     }
     case 8:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 11;$value$1 = 0;
      break;
     }
     case 9:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 5;$value$1 = 0;
      break;
     }
     case 10:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 22;$value$1 = 0;
      break;
     }
     case 11:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 24;$value$1 = 0;
      break;
     }
     case 13:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 2;$value$1 = 0;
      break;
     }
     case 14:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 1;$value$1 = 0;
      break;
     }
     case 15:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 26;$value$1 = 0;
      break;
     }
     case 21:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 10;$value$1 = 0;
      break;
     }
     case 22:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 7;$value$1 = 0;
      break;
     }
     case 30:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 12;$value$1 = 0;
      break;
     }
     case 31:  {
      $ip$2 = $65;$large_int$1 = $large_int$079;$op$0 = 8;$value$1 = 0;
      break;
     }
     case 12:  {
      $68 = ($65>>>0)>($limit$0$ph$ph118>>>0);
      if ($68) {
       $$0 = 160;
       label = 171;
       break L11;
      }
      $69 = ((($ip$081)) + 2|0);
      $70 = HEAP8[$65>>0]|0;
      $71 = $70&255;
      switch ($71|0) {
      case 0:  {
       $ip$2 = $69;$large_int$1 = $large_int$079;$op$0 = 15;$value$1 = 0;
       break L17;
       break;
      }
      case 1:  {
       $ip$2 = $69;$large_int$1 = $large_int$079;$op$0 = 19;$value$1 = 0;
       break L17;
       break;
      }
      case 2:  {
       $ip$2 = $69;$large_int$1 = $large_int$079;$op$0 = 17;$value$1 = 0;
       break L17;
       break;
      }
      case 6:  {
       $ip$2 = $69;$large_int$1 = $large_int$079;$op$0 = 3;$value$1 = 0;
       break L17;
       break;
      }
      case 7:  {
       $ip$2 = $69;$large_int$1 = $large_int$079;$op$0 = 4;$value$1 = 0;
       break L17;
       break;
      }
      case 12:  {
       $ip$2 = $69;$large_int$1 = $large_int$079;$op$0 = 20;$value$1 = 0;
       break L17;
       break;
      }
      case 16:  {
       $ip$2 = $69;$large_int$1 = $large_int$079;$op$0 = 21;$value$1 = 0;
       break L17;
       break;
      }
      case 17:  {
       $ip$2 = $69;$large_int$1 = $large_int$079;$op$0 = 23;$value$1 = 0;
       break L17;
       break;
      }
      case 33:  {
       $ip$2 = $69;$large_int$1 = $large_int$079;$op$0 = 25;$value$1 = 0;
       break L17;
       break;
      }
      default: {
       $$0 = 160;
       label = 171;
       break L11;
      }
      }
      break;
     }
     case 255:  {
      $72 = ((($ip$081)) + 5|0);
      $73 = ($72>>>0)>($limit$0$ph$ph118>>>0);
      if ($73) {
       $$0 = 160;
       label = 171;
       break L11;
      }
      $74 = HEAP8[$65>>0]|0;
      $75 = $74&255;
      $76 = $75 << 24;
      $77 = ((($ip$081)) + 2|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = $78&255;
      $80 = $79 << 16;
      $81 = $80 | $76;
      $82 = ((($ip$081)) + 3|0);
      $83 = HEAP8[$82>>0]|0;
      $84 = $83&255;
      $85 = $84 << 8;
      $86 = $81 | $85;
      $87 = ((($ip$081)) + 4|0);
      $88 = HEAP8[$87>>0]|0;
      $89 = $88&255;
      $90 = $86 | $89;
      $$off = (($90) + 32000)|0;
      $91 = ($$off>>>0)>(64000);
      $92 = ($large_int$079<<24>>24)!=(0);
      if ($91) {
       $large_int$0$ = $92 ? $large_int$079 : 1;
       $ip$2 = $72;$large_int$1 = $large_int$0$;$op$0 = 0;$value$1 = $90;
       break L17;
      } else {
       $93 = $90 << 16;
       $$53 = $92 ? $90 : $93;
       $ip$2 = $72;$large_int$1 = $large_int$079;$op$0 = 0;$value$1 = $$53;
       break L17;
      }
      break;
     }
     default: {
      $94 = ($66&255)>(31);
      if (!($94)) {
       $$0 = 160;
       label = 171;
       break L11;
      }
      $95 = ($66&255)<(247);
      do {
       if ($95) {
        $96 = (($67) + -139)|0;
        $ip$1 = $65;$value$0 = $96;
       } else {
        $97 = ((($ip$081)) + 2|0);
        $98 = ($97>>>0)>($limit$0$ph$ph118>>>0);
        if ($98) {
         $$0 = 160;
         label = 171;
         break L11;
        }
        $99 = ($66&255)<(251);
        $100 = $67 << 8;
        if ($99) {
         $101 = (($100) + -63232)|0;
         $102 = HEAP8[$65>>0]|0;
         $103 = $102&255;
         $104 = $103 | $101;
         $105 = (($104) + 108)|0;
         $ip$1 = $97;$value$0 = $105;
         break;
        } else {
         $106 = (($100) + -64256)|0;
         $107 = HEAP8[$65>>0]|0;
         $108 = $107&255;
         $109 = $108 | $106;
         $110 = (-108 - ($109))|0;
         $ip$1 = $97;$value$0 = $110;
         break;
        }
       }
      } while(0);
      $111 = ($large_int$079<<24>>24)==(0);
      $112 = $value$0 << 16;
      $$value$0 = $111 ? $112 : $value$0;
      $ip$2 = $ip$1;$large_int$1 = $large_int$079;$op$0 = 0;$value$1 = $$value$0;
     }
     }
    } while(0);
    $113 = ($unknown_othersubr_result_cnt$080|0)>(0);
    L61: do {
     if ($113) {
      switch ($op$0|0) {
      case 23: case 0: case 24: case 22:  {
       $unknown_othersubr_result_cnt$1 = $unknown_othersubr_result_cnt$080;
       break L61;
       break;
      }
      default: {
      }
      }
      $unknown_othersubr_result_cnt$1 = 0;
     } else {
      $unknown_othersubr_result_cnt$1 = $unknown_othersubr_result_cnt$080;
     }
    } while(0);
    $114 = ($large_int$1<<24>>24)==(0);
    $115 = ($op$0|0)==(0);
    $or$cond3 = $115 | $114;
    $116 = ($op$0|0)==(20);
    $or$cond5 = $116 | $or$cond3;
    $large_int$1$ = $or$cond5 ? $large_int$1 : 0;
    if (!($115)) {
     $$lcssa240 = $64;$ip$2$lcssa = $ip$2;$large_int$1$$lcssa = $large_int$1$;$op$0$lcssa = $op$0;$unknown_othersubr_result_cnt$1$lcssa = $unknown_othersubr_result_cnt$1;
     break;
    }
    $117 = HEAP32[$0>>2]|0;
    $118 = ((($117)) + 112|0);
    $119 = $64;
    $120 = $118;
    $121 = (($119) - ($120))|0;
    $122 = ($121|0)>(1020);
    if ($122) {
     $$0 = 160;
     label = 171;
     break L11;
    }
    $123 = ((($64)) + 4|0);
    HEAP32[$64>>2] = $value$1;
    $124 = HEAP32[$0>>2]|0;
    $125 = ((($124)) + 1136|0);
    HEAP32[$125>>2] = $123;
    $126 = ($ip$2>>>0)<($limit$0$ph$ph118>>>0);
    if ($126) {
     $ip$081 = $ip$2;$large_int$079 = $large_int$1$;$unknown_othersubr_result_cnt$080 = $unknown_othersubr_result_cnt$1;
    } else {
     $$0 = 0;
     label = 171;
     break L11;
    }
   }
   $127 = ($op$0$lcssa|0)==(21);
   if (!($127)) {
    $$lcssa240$lcssa = $$lcssa240;$ip$2$lcssa$lcssa = $ip$2$lcssa;$known_othersubr_result_cnt$0$ph108$lcssa249 = $known_othersubr_result_cnt$0$ph108;$large_int$1$$lcssa$lcssa = $large_int$1$$lcssa;$op$0$lcssa$lcssa = $op$0$lcssa;$unknown_othersubr_result_cnt$1$lcssa$lcssa = $unknown_othersubr_result_cnt$1$lcssa;
    break;
   }
   $128 = HEAP32[$0>>2]|0;
   $129 = ((($128)) + 112|0);
   $130 = $$lcssa240;
   $131 = $129;
   $132 = (($130) - ($131))|0;
   $133 = ($132|0)<(8);
   if ($133) {
    $$0 = 161;
    label = 171;
    break L11;
   }
   $134 = ((($$lcssa240)) + -8|0);
   $135 = ((($$lcssa240)) + -4|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $136 >> 16;
   $138 = HEAP32[$134>>2]|0;
   $139 = $138 >> 16;
   $140 = $134;
   $141 = (($140) - ($131))|0;
   $142 = $141 >> 2;
   $143 = ($139|0)>($142|0);
   if ($143) {
    $$0 = 161;
    label = 171;
    break L11;
   }
   $$sum41 = (-2 - ($139))|0;
   $144 = (($$lcssa240) + ($$sum41<<2)|0);
   do {
    switch ($137|0) {
    case 0:  {
     $145 = ($139|0)==(3);
     if (!($145)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $146 = ((($128)) + 1400|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($147|0)==(0);
     if ($148) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $149 = ((($128)) + 1404|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==(7);
     if (!($151)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     HEAP32[$144>>2] = $x$0$ph$ph117;
     $$sum52 = (($$sum41) + 1)|0;
     $152 = (($$lcssa240) + ($$sum52<<2)|0);
     HEAP32[$152>>2] = $y$0$ph$ph116;
     $known_othersubr_result_cnt$1 = 2;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     break;
    }
    case 1:  {
     $153 = ($139|0)==(0);
     if (!($153)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $154 = ((($128)) + 1400|0);
     HEAP32[$154>>2] = 1;
     $155 = HEAP32[$0>>2]|0;
     $156 = ((($155)) + 1404|0);
     HEAP32[$156>>2] = 0;
     $157 = (_t1_builder_start_point($decoder,$x$0$ph$ph117,$y$0$ph$ph116)|0);
     $158 = ($157|0)==(0);
     if (!($158)) {
      $$0 = $157;
      label = 171;
      break L11;
     }
     $159 = (_t1_builder_check_points($decoder,6)|0);
     $160 = ($159|0)==(0);
     if ($160) {
      $known_othersubr_result_cnt$1 = 0;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     } else {
      $$0 = $159;
      label = 171;
      break L11;
     }
     break;
    }
    case 2:  {
     $161 = ($139|0)==(0);
     if (!($161)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $162 = ((($128)) + 1400|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0);
     if ($164) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $165 = ((($128)) + 1404|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (($166) + 1)|0;
     HEAP32[$165>>2] = $167;
     $$off51 = (($166) + -1)|0;
     $168 = ($$off51>>>0)<(6);
     if ($168) {
      $169 = ($166|0)==(3);
      $170 = ($166|0)==(6);
      $171 = $169 | $170;
      $172 = $171&1;
      _t1_builder_add_point($decoder,$x$0$ph$ph117,$y$0$ph$ph116,$172);
      $known_othersubr_result_cnt$1 = 0;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     } else {
      $known_othersubr_result_cnt$1 = 0;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     }
     break;
    }
    case 3:  {
     $173 = ($139|0)==(1);
     if (!($173)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     if ($42) {
      $174 = HEAP32[$47>>2]|0;
      $175 = HEAP32[$23>>2]|0;
      $176 = HEAP32[$48>>2]|0;
      $177 = ((($176)) + 2|0);
      $178 = HEAP16[$177>>1]|0;
      $179 = $178 << 16 >> 16;
      FUNCTION_TABLE_vii[$174 & 31]($175,$179);
      $known_othersubr_result_cnt$1 = 1;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     } else {
      $known_othersubr_result_cnt$1 = 1;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     }
     break;
    }
    case 13: case 12:  {
     $180 = HEAP32[$0>>2]|0;
     $181 = ((($180)) + 112|0);
     $known_othersubr_result_cnt$1 = 0;$top$0 = $181;$unknown_othersubr_result_cnt$2 = 0;
     break;
    }
    case 18: case 17: case 16: case 15: case 14:  {
     $182 = HEAP32[$0>>2]|0;
     $183 = ((($182)) + 1464|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($184|0)==(0|0);
     if ($185) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $186 = (($137) + -13)|0;
     $187 = ($137|0)==(18);
     $188 = $187&1;
     $189 = (($186) + ($188))|0;
     $190 = HEAP32[$184>>2]|0;
     $191 = Math_imul($190, $189)|0;
     $192 = ($139|0)==($191|0);
     if (!($192)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $193 = ($189|0)==(0);
     if ($193) {
      $known_othersubr_result_cnt$1 = 0;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     } else {
      $$sum50 = (($189) + ($$sum41))|0;
      $194 = (($$lcssa240) + ($$sum50<<2)|0);
      $195 = ((($184)) + 136|0);
      $196 = (($137) + -13)|0;
      $197 = $187&1;
      $198 = (($196) + ($197))|0;
      $delta$0102 = $194;$nn$0101 = 0;$values$0103 = $144;
      while(1) {
       $199 = HEAP32[$values$0103>>2]|0;
       $200 = HEAP32[$184>>2]|0;
       $201 = ($200>>>0)>(1);
       if ($201) {
        $delta$196 = $delta$0102;$mm$095 = 1;$tmp$097 = $199;
        while(1) {
         $202 = ((($delta$196)) + 4|0);
         $203 = HEAP32[$delta$196>>2]|0;
         $204 = HEAP32[$195>>2]|0;
         $205 = (($204) + ($mm$095<<2)|0);
         $206 = HEAP32[$205>>2]|0;
         $207 = (_FT_MulFix($203,$206)|0);
         $208 = (($207) + ($tmp$097))|0;
         $209 = (($mm$095) + 1)|0;
         $210 = HEAP32[$184>>2]|0;
         $211 = ($209>>>0)<($210>>>0);
         if ($211) {
          $delta$196 = $202;$mm$095 = $209;$tmp$097 = $208;
         } else {
          $delta$1$lcssa = $202;$tmp$0$lcssa = $208;
          break;
         }
        }
       } else {
        $delta$1$lcssa = $delta$0102;$tmp$0$lcssa = $199;
       }
       $212 = ((($values$0103)) + 4|0);
       HEAP32[$values$0103>>2] = $tmp$0$lcssa;
       $213 = (($nn$0101) + 1)|0;
       $exitcond = ($213|0)==($198|0);
       if ($exitcond) {
        $known_othersubr_result_cnt$1 = $189;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
        break;
       } else {
        $delta$0102 = $delta$1$lcssa;$nn$0101 = $213;$values$0103 = $212;
       }
      }
     }
     break;
    }
    case 19:  {
     $214 = ((($128)) + 1464|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = ($139|0)!=(1);
     $217 = ($215|0)==(0|0);
     $or$cond9 = $216 | $217;
     if ($or$cond9) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $218 = HEAP32[$144>>2]|0;
     $219 = $218 >> 16;
     $220 = ($219|0)<(0);
     if ($220) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $221 = HEAP32[$215>>2]|0;
     $222 = (($221) + ($219))|0;
     $223 = ((($128)) + 1492|0);
     $224 = HEAP32[$223>>2]|0;
     $225 = ($222>>>0)>($224>>>0);
     if ($225) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $226 = ((($128)) + 1488|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = (($227) + ($219<<2)|0);
     $229 = ((($215)) + 136|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = $221 << 2;
     _memcpy(($228|0),($230|0),($231|0))|0;
     $known_othersubr_result_cnt$1 = 0;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     break;
    }
    case 20:  {
     $232 = ($139|0)==(2);
     if (!($232)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $$sum49 = (($$sum41) + 1)|0;
     $233 = (($$lcssa240) + ($$sum49<<2)|0);
     $234 = HEAP32[$233>>2]|0;
     $235 = HEAP32[$144>>2]|0;
     $236 = (($235) + ($234))|0;
     HEAP32[$144>>2] = $236;
     $known_othersubr_result_cnt$1 = 1;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     break;
    }
    case 21:  {
     $237 = ($139|0)==(2);
     if (!($237)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $$sum48 = (($$sum41) + 1)|0;
     $238 = (($$lcssa240) + ($$sum48<<2)|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = HEAP32[$144>>2]|0;
     $241 = (($240) - ($239))|0;
     HEAP32[$144>>2] = $241;
     $known_othersubr_result_cnt$1 = 1;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     break;
    }
    case 22:  {
     $242 = ($139|0)==(2);
     if (!($242)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $243 = HEAP32[$144>>2]|0;
     $$sum47 = (($$sum41) + 1)|0;
     $244 = (($$lcssa240) + ($$sum47<<2)|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = (_FT_MulFix($243,$245)|0);
     HEAP32[$144>>2] = $246;
     $known_othersubr_result_cnt$1 = 1;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     break;
    }
    case 23:  {
     $247 = ($139|0)==(2);
     if (!($247)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $$sum46 = (($$sum41) + 1)|0;
     $248 = (($$lcssa240) + ($$sum46<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0);
     if ($250) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $251 = HEAP32[$144>>2]|0;
     $252 = (_FT_DivFix($251,$249)|0);
     HEAP32[$144>>2] = $252;
     $known_othersubr_result_cnt$1 = 1;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     break;
    }
    case 24:  {
     $253 = ((($128)) + 1464|0);
     $254 = HEAP32[$253>>2]|0;
     $255 = ($139|0)!=(2);
     $256 = ($254|0)==(0|0);
     $or$cond11 = $255 | $256;
     if ($or$cond11) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $$sum45 = (($$sum41) + 1)|0;
     $257 = (($$lcssa240) + ($$sum45<<2)|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = $258 >> 16;
     $260 = ($259|0)<(0);
     if ($260) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $261 = ((($128)) + 1492|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = ($259>>>0)<($262>>>0);
     if (!($263)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $264 = HEAP32[$144>>2]|0;
     $265 = ((($128)) + 1488|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = (($266) + ($259<<2)|0);
     HEAP32[$267>>2] = $264;
     $known_othersubr_result_cnt$1 = 0;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     break;
    }
    case 25:  {
     $268 = ((($128)) + 1464|0);
     $269 = HEAP32[$268>>2]|0;
     $270 = ($139|0)!=(1);
     $271 = ($269|0)==(0|0);
     $or$cond13 = $270 | $271;
     if ($or$cond13) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $272 = HEAP32[$144>>2]|0;
     $273 = $272 >> 16;
     $274 = ($273|0)<(0);
     if ($274) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $275 = ((($128)) + 1492|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($273>>>0)<($276>>>0);
     if (!($277)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $278 = ((($128)) + 1488|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = (($279) + ($273<<2)|0);
     $281 = HEAP32[$280>>2]|0;
     HEAP32[$144>>2] = $281;
     $known_othersubr_result_cnt$1 = 1;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     break;
    }
    case 27:  {
     $282 = ($139|0)==(4);
     if (!($282)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $$sum42 = (($$sum41) + 2)|0;
     $283 = (($$lcssa240) + ($$sum42<<2)|0);
     $284 = HEAP32[$283>>2]|0;
     $$sum43 = (($$sum41) + 3)|0;
     $285 = (($$lcssa240) + ($$sum43<<2)|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = ($284|0)>($286|0);
     if ($287) {
      $$sum44 = (($$sum41) + 1)|0;
      $288 = (($$lcssa240) + ($$sum44<<2)|0);
      $289 = HEAP32[$288>>2]|0;
      HEAP32[$144>>2] = $289;
      $known_othersubr_result_cnt$1 = 1;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     } else {
      $known_othersubr_result_cnt$1 = 1;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     }
     break;
    }
    case 28:  {
     $290 = ($139|0)==(0);
     if (!($290)) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     $291 = HEAP32[$seed>>2]|0;
     $292 = ($291|0)>(32767);
     $293 = $292&1;
     $$54 = (($293) + ($291))|0;
     HEAP32[$144>>2] = $$54;
     $294 = HEAP32[$seed>>2]|0;
     $295 = (65536 - ($294))|0;
     $296 = (_FT_MulFix($294,$295)|0);
     $297 = ($296|0)==(0);
     $298 = (($296) + 10355)|0;
     $storemerge = $297 ? $298 : $296;
     HEAP32[$seed>>2] = $storemerge;
     $known_othersubr_result_cnt$1 = 1;$top$0 = $144;$unknown_othersubr_result_cnt$2 = 0;
     break;
    }
    default: {
     $299 = $139 | $137;
     $300 = ($299|0)>(-1);
     if ($300) {
      $known_othersubr_result_cnt$1 = 0;$top$0 = $144;$unknown_othersubr_result_cnt$2 = $139;
     } else {
      $$0 = 160;
      label = 171;
      break L11;
     }
    }
    }
   } while(0);
   $301 = (($top$0) + ($known_othersubr_result_cnt$1<<2)|0);
   $302 = HEAP32[$0>>2]|0;
   $303 = ((($302)) + 1136|0);
   HEAP32[$303>>2] = $301;
   $304 = ($ip$2$lcssa>>>0)<($limit$0$ph$ph118>>>0);
   if ($304) {
    $ip$0$ph109 = $ip$2$lcssa;$known_othersubr_result_cnt$0$ph108 = $known_othersubr_result_cnt$1;$large_int$0$ph106 = $large_int$1$$lcssa;$unknown_othersubr_result_cnt$0$ph107 = $unknown_othersubr_result_cnt$2;
   } else {
    $$0 = 0;
    label = 171;
    break L11;
   }
  }
  $305 = (12816 + ($op$0$lcssa$lcssa<<2)|0);
  $306 = HEAP32[$305>>2]|0;
  $307 = HEAP32[$0>>2]|0;
  $308 = ((($307)) + 112|0);
  $309 = $$lcssa240$lcssa;
  $310 = $308;
  $311 = (($309) - ($310))|0;
  $312 = $311 >> 2;
  $313 = ($312|0)<($306|0);
  if ($313) {
   $$0 = 161;
   label = 171;
   break;
  }
  $314 = (0 - ($306))|0;
  $315 = (($$lcssa240$lcssa) + ($314<<2)|0);
  L127: do {
   switch ($op$0$lcssa$lcssa|0) {
   case 1:  {
    label = 111;
    break L11;
    break;
   }
   case 3:  {
    $$lcssa240$lcssa$lcssa243 = $$lcssa240$lcssa;$$lcssa253 = $306;$$lcssa256 = $307;$$lcssa258 = $315;
    label = 116;
    break L11;
    break;
   }
   case 2:  {
    HEAP32[$21>>2] = 1;
    $337 = HEAP32[$315>>2]|0;
    $338 = HEAP32[$49>>2]|0;
    $339 = (($338) + ($337))|0;
    HEAP32[$49>>2] = $339;
    $$sum40 = (1 - ($306))|0;
    $340 = (($$lcssa240$lcssa) + ($$sum40<<2)|0);
    $341 = HEAP32[$340>>2]|0;
    HEAP32[$50>>2] = $341;
    HEAP32[$51>>2] = 0;
    $342 = HEAP32[$38>>2]|0;
    $343 = HEAP32[$315>>2]|0;
    $344 = (($343) + ($342))|0;
    $345 = HEAP32[$40>>2]|0;
    $346 = HEAP8[$52>>0]|0;
    $347 = ($346<<24>>24)==(0);
    if ($347) {
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $344;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $344;$y$2 = $345;$zone$1 = $zone$0$ph$ph120;
    } else {
     $$0 = 0;
     label = 171;
     break L11;
    }
    break;
   }
   case 4:  {
    HEAP32[$21>>2] = 1;
    $360 = HEAP32[$315>>2]|0;
    $361 = HEAP32[$53>>2]|0;
    $362 = (($361) + ($360))|0;
    HEAP32[$53>>2] = $362;
    $$sum33 = (1 - ($306))|0;
    $363 = (($$lcssa240$lcssa) + ($$sum33<<2)|0);
    $364 = HEAP32[$363>>2]|0;
    $365 = HEAP32[$54>>2]|0;
    $366 = (($365) + ($364))|0;
    HEAP32[$54>>2] = $366;
    $$sum34 = (2 - ($306))|0;
    $367 = (($$lcssa240$lcssa) + ($$sum34<<2)|0);
    $368 = HEAP32[$367>>2]|0;
    HEAP32[$55>>2] = $368;
    $$sum35 = (3 - ($306))|0;
    $369 = (($$lcssa240$lcssa) + ($$sum35<<2)|0);
    $370 = HEAP32[$369>>2]|0;
    HEAP32[$56>>2] = $370;
    $371 = HEAP32[$38>>2]|0;
    $372 = HEAP32[$315>>2]|0;
    $373 = (($372) + ($371))|0;
    $374 = HEAP32[$40>>2]|0;
    $375 = HEAP32[$363>>2]|0;
    $376 = (($375) + ($374))|0;
    $377 = HEAP8[$57>>0]|0;
    $378 = ($377<<24>>24)==(0);
    if ($378) {
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $373;$y$2 = $376;$zone$1 = $zone$0$ph$ph120;
    } else {
     $$0 = 0;
     label = 171;
     break L11;
    }
    break;
   }
   case 5:  {
    $379 = HEAP32[$21>>2]|0;
    $380 = $379 & -2;
    $switch = ($380|0)==(2);
    if ($switch) {
     _t1_builder_close_contour($decoder);
    }
    HEAP32[$21>>2] = 1;
    $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    break;
   }
   case 6:  {
    $381 = (_t1_builder_start_point($decoder,$x$0$ph$ph117,$y$0$ph$ph116)|0);
    $382 = ($381|0)==(0);
    if (!($382)) {
     $$0 = $381;
     label = 171;
     break L11;
    }
    $383 = HEAP32[$315>>2]|0;
    $384 = (($383) + ($x$0$ph$ph117))|0;
    $x$1 = $384;$y$1 = $y$0$ph$ph116;
    label = 131;
    break;
   }
   case 7:  {
    $385 = HEAP32[$315>>2]|0;
    $386 = (($385) + ($x$0$ph$ph117))|0;
    $387 = ((($307)) + 1400|0);
    $388 = HEAP32[$387>>2]|0;
    $389 = ($388|0)==(0);
    if ($389) {
     $390 = HEAP32[$21>>2]|0;
     $391 = ($390|0)==(0);
     if ($391) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     HEAP32[$21>>2] = 2;
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $386;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    } else {
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $386;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    }
    break;
   }
   case 8:  {
    $392 = (_t1_builder_start_point($decoder,$x$0$ph$ph117,$y$0$ph$ph116)|0);
    $393 = ($392|0)==(0);
    if (!($393)) {
     $$0 = $392;
     label = 171;
     break L11;
    }
    $394 = (_t1_builder_check_points($decoder,3)|0);
    $395 = ($394|0)==(0);
    if (!($395)) {
     $$0 = $394;
     label = 171;
     break L11;
    }
    $396 = HEAP32[$315>>2]|0;
    $397 = (($396) + ($x$0$ph$ph117))|0;
    _t1_builder_add_point($decoder,$397,$y$0$ph$ph116,0);
    $$sum30 = (1 - ($306))|0;
    $398 = (($$lcssa240$lcssa) + ($$sum30<<2)|0);
    $399 = HEAP32[$398>>2]|0;
    $400 = (($399) + ($397))|0;
    $$sum31 = (2 - ($306))|0;
    $401 = (($$lcssa240$lcssa) + ($$sum31<<2)|0);
    $402 = HEAP32[$401>>2]|0;
    $403 = (($402) + ($y$0$ph$ph116))|0;
    _t1_builder_add_point($decoder,$400,$403,0);
    $$sum32 = (3 - ($306))|0;
    $404 = (($$lcssa240$lcssa) + ($$sum32<<2)|0);
    $405 = HEAP32[$404>>2]|0;
    $406 = (($405) + ($403))|0;
    _t1_builder_add_point($decoder,$400,$406,1);
    $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $400;$y$2 = $406;$zone$1 = $zone$0$ph$ph120;
    break;
   }
   case 9:  {
    $407 = (_t1_builder_start_point($decoder,$x$0$ph$ph117,$y$0$ph$ph116)|0);
    $408 = ($407|0)==(0);
    if (!($408)) {
     $$0 = $407;
     label = 171;
     break L11;
    }
    $409 = HEAP32[$315>>2]|0;
    $410 = (($409) + ($x$0$ph$ph117))|0;
    $$sum29 = (1 - ($306))|0;
    $411 = (($$lcssa240$lcssa) + ($$sum29<<2)|0);
    $412 = HEAP32[$411>>2]|0;
    $413 = (($412) + ($y$0$ph$ph116))|0;
    $x$1 = $410;$y$1 = $413;
    label = 131;
    break;
   }
   case 10:  {
    $416 = HEAP32[$315>>2]|0;
    $417 = (($416) + ($x$0$ph$ph117))|0;
    $$sum28 = (1 - ($306))|0;
    $418 = (($$lcssa240$lcssa) + ($$sum28<<2)|0);
    $419 = HEAP32[$418>>2]|0;
    $420 = (($419) + ($y$0$ph$ph116))|0;
    $421 = ((($307)) + 1400|0);
    $422 = HEAP32[$421>>2]|0;
    $423 = ($422|0)==(0);
    if ($423) {
     $424 = HEAP32[$21>>2]|0;
     $425 = ($424|0)==(0);
     if ($425) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     HEAP32[$21>>2] = 2;
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $417;$y$2 = $420;$zone$1 = $zone$0$ph$ph120;
    } else {
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $417;$y$2 = $420;$zone$1 = $zone$0$ph$ph120;
    }
    break;
   }
   case 11:  {
    $426 = (_t1_builder_start_point($decoder,$x$0$ph$ph117,$y$0$ph$ph116)|0);
    $427 = ($426|0)==(0);
    if (!($427)) {
     $$0 = $426;
     label = 171;
     break L11;
    }
    $428 = (_t1_builder_check_points($decoder,3)|0);
    $429 = ($428|0)==(0);
    if (!($429)) {
     $$0 = $428;
     label = 171;
     break L11;
    }
    $430 = HEAP32[$315>>2]|0;
    $431 = (($430) + ($x$0$ph$ph117))|0;
    $$sum23 = (1 - ($306))|0;
    $432 = (($$lcssa240$lcssa) + ($$sum23<<2)|0);
    $433 = HEAP32[$432>>2]|0;
    $434 = (($433) + ($y$0$ph$ph116))|0;
    _t1_builder_add_point($decoder,$431,$434,0);
    $$sum24 = (2 - ($306))|0;
    $435 = (($$lcssa240$lcssa) + ($$sum24<<2)|0);
    $436 = HEAP32[$435>>2]|0;
    $437 = (($436) + ($431))|0;
    $$sum25 = (3 - ($306))|0;
    $438 = (($$lcssa240$lcssa) + ($$sum25<<2)|0);
    $439 = HEAP32[$438>>2]|0;
    $440 = (($439) + ($434))|0;
    _t1_builder_add_point($decoder,$437,$440,0);
    $$sum26 = (4 - ($306))|0;
    $441 = (($$lcssa240$lcssa) + ($$sum26<<2)|0);
    $442 = HEAP32[$441>>2]|0;
    $443 = (($442) + ($437))|0;
    $$sum27 = (5 - ($306))|0;
    $444 = (($$lcssa240$lcssa) + ($$sum27<<2)|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = (($445) + ($440))|0;
    _t1_builder_add_point($decoder,$443,$446,1);
    $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $443;$y$2 = $446;$zone$1 = $zone$0$ph$ph120;
    break;
   }
   case 12:  {
    $447 = (_t1_builder_start_point($decoder,$x$0$ph$ph117,$y$0$ph$ph116)|0);
    $448 = ($447|0)==(0);
    if (!($448)) {
     $$0 = $447;
     label = 171;
     break L11;
    }
    $449 = (_t1_builder_check_points($decoder,3)|0);
    $450 = ($449|0)==(0);
    if (!($450)) {
     $$0 = $449;
     label = 171;
     break L11;
    }
    $451 = HEAP32[$315>>2]|0;
    $452 = (($451) + ($y$0$ph$ph116))|0;
    _t1_builder_add_point($decoder,$x$0$ph$ph117,$452,0);
    $$sum20 = (1 - ($306))|0;
    $453 = (($$lcssa240$lcssa) + ($$sum20<<2)|0);
    $454 = HEAP32[$453>>2]|0;
    $455 = (($454) + ($x$0$ph$ph117))|0;
    $$sum21 = (2 - ($306))|0;
    $456 = (($$lcssa240$lcssa) + ($$sum21<<2)|0);
    $457 = HEAP32[$456>>2]|0;
    $458 = (($457) + ($452))|0;
    _t1_builder_add_point($decoder,$455,$458,0);
    $$sum22 = (3 - ($306))|0;
    $459 = (($$lcssa240$lcssa) + ($$sum22<<2)|0);
    $460 = HEAP32[$459>>2]|0;
    $461 = (($460) + ($455))|0;
    _t1_builder_add_point($decoder,$461,$458,1);
    $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $461;$y$2 = $458;$zone$1 = $zone$0$ph$ph120;
    break;
   }
   case 13:  {
    $462 = (_t1_builder_start_point($decoder,$x$0$ph$ph117,$y$0$ph$ph116)|0);
    $463 = ($462|0)==(0);
    if (!($463)) {
     $$0 = $462;
     label = 171;
     break L11;
    }
    $464 = HEAP32[$315>>2]|0;
    $465 = (($464) + ($y$0$ph$ph116))|0;
    $x$1 = $x$0$ph$ph117;$y$1 = $465;
    label = 131;
    break;
   }
   case 14:  {
    $466 = HEAP32[$315>>2]|0;
    $467 = (($466) + ($y$0$ph$ph116))|0;
    $468 = ((($307)) + 1400|0);
    $469 = HEAP32[$468>>2]|0;
    $470 = ($469|0)==(0);
    if ($470) {
     $471 = HEAP32[$21>>2]|0;
     $472 = ($471|0)==(0);
     if ($472) {
      $$0 = 160;
      label = 171;
      break L11;
     }
     HEAP32[$21>>2] = 2;
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $467;$zone$1 = $zone$0$ph$ph120;
    } else {
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $467;$zone$1 = $zone$0$ph$ph120;
    }
    break;
   }
   case 20:  {
    $473 = HEAP32[$315>>2]|0;
    $$sum19 = (1 - ($306))|0;
    $474 = (($$lcssa240$lcssa) + ($$sum19<<2)|0);
    $475 = HEAP32[$474>>2]|0;
    $476 = (_FT_DivFix($473,$475)|0);
    HEAP32[$315>>2] = $476;
    $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = 0;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $474;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    break;
   }
   case 22:  {
    $477 = HEAP32[$315>>2]|0;
    $478 = $477 >> 16;
    $479 = ($478|0)<(0);
    if ($479) {
     $$0 = 160;
     label = 171;
     break L11;
    }
    $480 = ((($307)) + 1364|0);
    $481 = HEAP32[$480>>2]|0;
    $482 = ($478|0)<($481|0);
    if (!($482)) {
     $$0 = 160;
     label = 171;
     break L11;
    }
    $483 = ((($307)) + 1140|0);
    $484 = $zone$0$ph$ph120;
    $485 = $483;
    $486 = (($484) - ($485))|0;
    $487 = ($486|0)>(180);
    if ($487) {
     $$0 = 160;
     label = 171;
     break L11;
    }
    HEAP32[$zone$0$ph$ph120>>2] = $ip$2$lcssa$lcssa;
    $488 = ((($zone$0$ph$ph120)) + 12|0);
    $489 = HEAP32[$0>>2]|0;
    $490 = ((($489)) + 1368|0);
    $491 = HEAP32[$490>>2]|0;
    $492 = (($491) + ($478<<2)|0);
    $493 = HEAP32[$492>>2]|0;
    $494 = ((($zone$0$ph$ph120)) + 16|0);
    HEAP32[$494>>2] = $493;
    $495 = HEAP32[$0>>2]|0;
    $496 = ((($495)) + 1372|0);
    $497 = HEAP32[$496>>2]|0;
    $498 = ($497|0)==(0|0);
    if ($498) {
     $503 = ((($495)) + 1360|0);
     $504 = HEAP32[$503>>2]|0;
     $505 = ($504|0)<(0);
     $$55 = $505 ? 0 : $504;
     $506 = (($493) + ($$55)|0);
     HEAP32[$494>>2] = $506;
     $507 = (($478) + 1)|0;
     $508 = HEAP32[$0>>2]|0;
     $509 = ((($508)) + 1368|0);
     $510 = HEAP32[$509>>2]|0;
     $511 = (($510) + ($507<<2)|0);
     $512 = HEAP32[$511>>2]|0;
     $513 = ((($zone$0$ph$ph120)) + 20|0);
     HEAP32[$513>>2] = $512;
    } else {
     $499 = (($497) + ($478<<2)|0);
     $500 = HEAP32[$499>>2]|0;
     $501 = (($493) + ($500)|0);
     $502 = ((($zone$0$ph$ph120)) + 20|0);
     HEAP32[$502>>2] = $501;
    }
    $514 = HEAP32[$494>>2]|0;
    HEAP32[$488>>2] = $514;
    $515 = HEAP32[$494>>2]|0;
    $516 = ($515|0)==(0|0);
    if ($516) {
     $$0 = 160;
     label = 171;
     break L11;
    }
    $517 = HEAP32[$0>>2]|0;
    $518 = ((($517)) + 1344|0);
    HEAP32[$518>>2] = $488;
    $519 = HEAP32[$494>>2]|0;
    $520 = ((($zone$0$ph$ph120)) + 20|0);
    $521 = HEAP32[$520>>2]|0;
    $ip$3 = $519;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $521;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $488;
    break;
   }
   case 23:  {
    $522 = ($known_othersubr_result_cnt$0$ph108$lcssa249|0)>(0);
    if ($522) {
     $523 = (($known_othersubr_result_cnt$0$ph108$lcssa249) + -1)|0;
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $523;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
     break L127;
    }
    $524 = ($unknown_othersubr_result_cnt$1$lcssa$lcssa|0)==(0);
    if ($524) {
     $$0 = 160;
     label = 171;
     break L11;
    }
    $525 = (($unknown_othersubr_result_cnt$1$lcssa$lcssa) + -1)|0;
    $$sum18 = (1 - ($306))|0;
    $526 = (($$lcssa240$lcssa) + ($$sum18<<2)|0);
    $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $526;$unknown_othersubr_result_cnt$3 = $525;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    break;
   }
   case 24:  {
    $527 = ((($307)) + 1140|0);
    $528 = ($zone$0$ph$ph120>>>0)>($527>>>0);
    if (!($528)) {
     $$0 = 160;
     label = 171;
     break L11;
    }
    $529 = ((($zone$0$ph$ph120)) + -12|0);
    $530 = HEAP32[$529>>2]|0;
    $531 = ((($zone$0$ph$ph120)) + -4|0);
    $532 = HEAP32[$531>>2]|0;
    $533 = ((($307)) + 1344|0);
    HEAP32[$533>>2] = $529;
    $ip$3 = $530;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $532;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $529;
    break;
   }
   case 26: case 15:  {
    $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    break;
   }
   case 16:  {
    if ($42) {
     $534 = HEAP32[$58>>2]|0;
     $535 = HEAP32[$23>>2]|0;
     FUNCTION_TABLE_viii[$534 & 31]($535,1,$315);
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    } else {
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    }
    break;
   }
   case 17:  {
    if ($42) {
     $536 = HEAP32[$59>>2]|0;
     $537 = HEAP32[$23>>2]|0;
     FUNCTION_TABLE_viii[$536 & 31]($537,1,$315);
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    } else {
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    }
    break;
   }
   case 18:  {
    if ($42) {
     $538 = HEAP32[$315>>2]|0;
     $539 = (($538) + ($orig_x$0$ph$ph115))|0;
     HEAP32[$315>>2] = $539;
     $540 = HEAP32[$60>>2]|0;
     $541 = HEAP32[$23>>2]|0;
     FUNCTION_TABLE_viii[$540 & 31]($541,0,$315);
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    } else {
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    }
    break;
   }
   case 19:  {
    if ($42) {
     $542 = HEAP32[$315>>2]|0;
     $543 = (($542) + ($orig_x$0$ph$ph115))|0;
     HEAP32[$315>>2] = $543;
     $$sum16 = (2 - ($306))|0;
     $544 = (($$lcssa240$lcssa) + ($$sum16<<2)|0);
     $545 = HEAP32[$544>>2]|0;
     $546 = (($545) + ($orig_x$0$ph$ph115))|0;
     HEAP32[$544>>2] = $546;
     $$sum17 = (4 - ($306))|0;
     $547 = (($$lcssa240$lcssa) + ($$sum17<<2)|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = (($548) + ($orig_x$0$ph$ph115))|0;
     HEAP32[$547>>2] = $549;
     $550 = HEAP32[$61>>2]|0;
     $551 = HEAP32[$23>>2]|0;
     FUNCTION_TABLE_viii[$550 & 31]($551,0,$315);
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    } else {
     $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$0$ph$ph117;$y$2 = $y$0$ph$ph116;$zone$1 = $zone$0$ph$ph120;
    }
    break;
   }
   case 25:  {
    $552 = HEAP32[$315>>2]|0;
    $$sum = (1 - ($306))|0;
    $553 = (($$lcssa240$lcssa) + ($$sum<<2)|0);
    $554 = HEAP32[$553>>2]|0;
    $555 = ((($307)) + 1400|0);
    HEAP32[$555>>2] = 0;
    $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $552;$y$2 = $554;$zone$1 = $zone$0$ph$ph120;
    break;
   }
   default: {
    $$0 = 160;
    label = 171;
    break L11;
   }
   }
  } while(0);
  if ((label|0) == 131) {
   label = 0;
   $414 = (_t1_builder_add_point1($decoder,$x$1,$y$1)|0);
   $415 = ($414|0)==(0);
   if ($415) {
    $ip$3 = $ip$2$lcssa$lcssa;$known_othersubr_result_cnt$2 = $known_othersubr_result_cnt$0$ph108$lcssa249;$large_int$3 = $large_int$1$$lcssa$lcssa;$limit$1 = $limit$0$ph$ph118;$orig_x$1 = $orig_x$0$ph$ph115;$top$1 = $315;$unknown_othersubr_result_cnt$3 = $unknown_othersubr_result_cnt$1$lcssa$lcssa;$x$2 = $x$1;$y$2 = $y$1;$zone$1 = $zone$0$ph$ph120;
   } else {
    $$0 = $414;
    label = 171;
    break;
   }
  }
  $556 = HEAP32[$0>>2]|0;
  $557 = ((($556)) + 1136|0);
  HEAP32[$557>>2] = $top$1;
  $558 = ($ip$3>>>0)<($limit$1>>>0);
  if ($558) {
   $ip$0$ph$ph119 = $ip$3;$known_othersubr_result_cnt$0$ph$ph114 = $known_othersubr_result_cnt$2;$large_int$0$ph$ph112 = $large_int$3;$limit$0$ph$ph118 = $limit$1;$orig_x$0$ph$ph115 = $orig_x$1;$unknown_othersubr_result_cnt$0$ph$ph113 = $unknown_othersubr_result_cnt$3;$x$0$ph$ph117 = $x$2;$y$0$ph$ph116 = $y$2;$zone$0$ph$ph120 = $zone$1;
  } else {
   $$0 = 0;
   label = 171;
   break;
  }
 }
 if ((label|0) == 111) {
  _t1_builder_close_contour($decoder);
  do {
   if ($42) {
    $316 = ((($23)) + 8|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = HEAP32[$23>>2]|0;
    $319 = ((($decoder)) + 20|0);
    $320 = HEAP32[$319>>2]|0;
    $321 = ((($320)) + 2|0);
    $322 = HEAP16[$321>>1]|0;
    $323 = $322 << 16 >> 16;
    $324 = (FUNCTION_TABLE_iii[$317 & 255]($318,$323)|0);
    $325 = ($324|0)==(0);
    if ($325) {
     $326 = ((($23)) + 24|0);
     $327 = HEAP32[$326>>2]|0;
     $328 = HEAP32[$23>>2]|0;
     $329 = HEAP32[$319>>2]|0;
     $330 = ((($decoder)) + 76|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = HEAP32[$0>>2]|0;
     $333 = ((($332)) + 1468|0);
     $334 = HEAP32[$333>>2]|0;
     (FUNCTION_TABLE_iiiii[$327 & 63]($328,$329,$331,$334)|0);
     break;
    } else {
     $$0 = 160;
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $335 = ((($decoder)) + 12|0);
  $336 = HEAP32[$335>>2]|0;
  _FT_GlyphLoader_Add($336);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 116) {
  $348 = HEAP32[$$lcssa258>>2]|0;
  $$sum36 = (1 - ($$lcssa253))|0;
  $349 = (($$lcssa240$lcssa$lcssa243) + ($$sum36<<2)|0);
  $350 = HEAP32[$349>>2]|0;
  $$sum37 = (2 - ($$lcssa253))|0;
  $351 = (($$lcssa240$lcssa$lcssa243) + ($$sum37<<2)|0);
  $352 = HEAP32[$351>>2]|0;
  $$sum38 = (3 - ($$lcssa253))|0;
  $353 = (($$lcssa240$lcssa$lcssa243) + ($$sum38<<2)|0);
  $354 = HEAP32[$353>>2]|0;
  $355 = $354 >> 16;
  $$sum39 = (4 - ($$lcssa253))|0;
  $356 = (($$lcssa240$lcssa$lcssa243) + ($$sum39<<2)|0);
  $357 = HEAP32[$356>>2]|0;
  $358 = $357 >> 16;
  $359 = (_t1operator_seac($$lcssa256,$348,$350,$352,$355,$358)|0);
  $$0 = $359;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 171) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _t1_decoder_parse_glyph($decoder,$glyph) {
 $decoder = $decoder|0;
 $glyph = $glyph|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($decoder)) + 1472|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iii[$1 & 255]($decoder,$glyph)|0);
 return ($2|0);
}
function _t1_decoder_init($decoder,$face,$size,$slot,$glyph_names,$blend,$hinting,$hint_mode,$parse_callback) {
 $decoder = $decoder|0;
 $face = $face|0;
 $size = $size|0;
 $slot = $slot|0;
 $glyph_names = $glyph_names|0;
 $blend = $blend|0;
 $hinting = $hinting|0;
 $hint_mode = $hint_mode|0;
 $parse_callback = $parse_callback|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($decoder|0),0,1500)|0;
 $0 = ((($face)) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_ft_module_get_service($1,89321)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 7;
  return ($$0|0);
 }
 $4 = ((($decoder)) + 1348|0);
 HEAP32[$4>>2] = $2;
 _t1_builder_init($decoder,$face,$size,$slot,$hinting);
 $5 = ((($face)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($decoder)) + 1352|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($decoder)) + 1356|0);
 HEAP32[$8>>2] = $glyph_names;
 $9 = ((($decoder)) + 1468|0);
 HEAP32[$9>>2] = $hint_mode;
 $10 = ((($decoder)) + 1464|0);
 HEAP32[$10>>2] = $blend;
 $11 = ((($decoder)) + 1472|0);
 HEAP32[$11>>2] = $parse_callback;
 $12 = ((($decoder)) + 1476|0);
 ;HEAP32[$12>>2]=HEAP32[11236>>2]|0;HEAP32[$12+4>>2]=HEAP32[11236+4>>2]|0;HEAP32[$12+8>>2]=HEAP32[11236+8>>2]|0;
 $$0 = 0;
 return ($$0|0);
}
function _t1_decoder_done($decoder) {
 $decoder = $decoder|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _t1_builder_done($decoder);
 return;
}
function _t1operator_seac($decoder,$asb,$adx,$ady,$bchar,$achar) {
 $decoder = $decoder|0;
 $asb = $asb|0;
 $adx = $adx|0;
 $ady = $ady|0;
 $bchar = $bchar|0;
 $achar = $achar|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $achar_index$0 = 0, $bchar_index$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($decoder)) + 1496|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $$0 = 160;
  return ($$0|0);
 }
 $5 = ((($decoder)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($adx))|0;
 $8 = ((($decoder)) + 1356|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $11 = ((($1)) + 128|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($12)) + 52|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = 160;
   return ($$0|0);
  }
 }
 $16 = ((($1)) + 128|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = (_t1_lookup_glyph_by_stdcharcode($decoder,$bchar)|0);
  $22 = (_t1_lookup_glyph_by_stdcharcode($decoder,$achar)|0);
  $achar_index$0 = $22;$bchar_index$0 = $21;
 } else {
  $achar_index$0 = $achar;$bchar_index$0 = $bchar;
 }
 $23 = $bchar_index$0 | $achar_index$0;
 $24 = ($23|0)<(0);
 if ($24) {
  $$0 = 160;
  return ($$0|0);
 }
 $25 = ((($decoder)) + 69|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)==(0);
 if (!($27)) {
  $28 = ((($decoder)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 156|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = (_FT_GlyphLoader_CheckSubGlyphs($32,2)|0);
  $34 = ($33|0)==(0);
  if (!($34)) {
   $$0 = $33;
   return ($$0|0);
  }
  $35 = ((($32)) + 88|0);
  $36 = HEAP32[$35>>2]|0;
  HEAP32[$36>>2] = $bchar_index$0;
  $37 = ((($36)) + 4|0);
  HEAP16[$37>>1] = 514;
  $38 = ((($36)) + 8|0);
  HEAP32[$38>>2] = 0;
  $39 = ((($36)) + 12|0);
  HEAP32[$39>>2] = 0;
  $40 = ((($36)) + 32|0);
  HEAP32[$40>>2] = $achar_index$0;
  $41 = ((($36)) + 36|0);
  HEAP16[$41>>1] = 2;
  $42 = (($7) - ($asb))|0;
  $43 = (_FT_RoundFix($42)|0);
  $44 = $43 >> 16;
  $45 = ((($36)) + 40|0);
  HEAP32[$45>>2] = $44;
  $46 = (_FT_RoundFix($ady)|0);
  $47 = $46 >> 16;
  $48 = ((($36)) + 44|0);
  HEAP32[$48>>2] = $47;
  $49 = ((($29)) + 128|0);
  HEAP32[$49>>2] = 2;
  $50 = ((($32)) + 52|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($29)) + 132|0);
  HEAP32[$52>>2] = $51;
  $53 = ((($29)) + 72|0);
  HEAP32[$53>>2] = 1668246896;
  $54 = ((($32)) + 84|0);
  HEAP32[$54>>2] = 2;
  $$0 = 0;
  return ($$0|0);
 }
 $55 = ((($decoder)) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 _FT_GlyphLoader_Prepare($56);
 HEAP8[$2>>0] = 1;
 $57 = (_t1_decoder_parse_glyph($decoder,$bchar_index$0)|0);
 HEAP8[$2>>0] = 0;
 $58 = ($57|0)==(0);
 if (!($58)) {
  $$0 = $57;
  return ($$0|0);
 }
 $59 = $5;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (($59) + 4)|0;
 $63 = $62;
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($decoder)) + 40|0);
 $66 = $65;
 $67 = $66;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($66) + 4)|0;
 $70 = $69;
 $71 = HEAP32[$70>>2]|0;
 HEAP32[$5>>2] = 0;
 $72 = ((($decoder)) + 36|0);
 HEAP32[$72>>2] = 0;
 $73 = (($7) - ($asb))|0;
 $74 = ((($decoder)) + 24|0);
 HEAP32[$74>>2] = $73;
 $75 = ((($decoder)) + 28|0);
 HEAP32[$75>>2] = $ady;
 HEAP8[$2>>0] = 1;
 $76 = (_t1_decoder_parse_glyph($decoder,$achar_index$0)|0);
 HEAP8[$2>>0] = 0;
 $77 = ($76|0)==(0);
 if (!($77)) {
  $$0 = $76;
  return ($$0|0);
 }
 $78 = $5;
 $79 = $78;
 HEAP32[$79>>2] = $61;
 $80 = (($78) + 4)|0;
 $81 = $80;
 HEAP32[$81>>2] = $64;
 $82 = $65;
 $83 = $82;
 HEAP32[$83>>2] = $68;
 $84 = (($82) + 4)|0;
 $85 = $84;
 HEAP32[$85>>2] = $71;
 HEAP32[$74>>2] = 0;
 HEAP32[$75>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _t1_lookup_glyph_by_stdcharcode($decoder,$charcode) {
 $decoder = $decoder|0;
 $charcode = $charcode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($decoder)) + 1348|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($charcode>>>0)>(255);
 if ($2) {
  $$0 = -1;
  return ($$0|0);
 }
 $3 = ((($1)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($charcode<<1)|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&65535;
 $10 = (FUNCTION_TABLE_ii[$4 & 63]($9)|0);
 $11 = ((($decoder)) + 1352|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = -1;
  return ($$0|0);
 }
 $14 = ((($decoder)) + 1356|0);
 $15 = HEAP32[$14>>2]|0;
 $n$02 = 0;
 while(1) {
  $16 = (($15) + ($n$02<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $19 = HEAP8[$17>>0]|0;
   $20 = HEAP8[$10>>0]|0;
   $21 = ($19<<24>>24)==($20<<24>>24);
   if ($21) {
    $22 = (_strcmp($17,$10)|0);
    $23 = ($22|0)==(0);
    if ($23) {
     $$0 = $n$02;
     label = 8;
     break;
    }
   }
  }
  $24 = (($n$02) + 1)|0;
  $25 = HEAP32[$11>>2]|0;
  $26 = ($24>>>0)<($25>>>0);
  if ($26) {
   $n$02 = $24;
  } else {
   $$0 = -1;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  return ($$0|0);
 }
 return (0)|0;
}
function _TT_Get_MM_Var($face,$master) {
 $face = $face|0;
 $master = $master|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$022 = 0, $a$16 = 0, $axis_rec = 0;
 var $error = 0, $fvar_head = 0, $i$031 = 0, $i$126 = 0, $i$221 = 0, $i$317 = 0, $j$013 = 0, $n$09 = 0, $n$17 = 0, $next_coords$0$lcssa = 0, $next_coords$032 = 0, $next_coords$1$lcssa = 0, $next_coords$18 = 0, $next_name$027 = 0, $next_name$15 = 0, $ns$018 = 0, $scevgep = 0, $scevgep39 = 0, $smax = 0, $switch$split12D = 0;
 var $switch$split2D = 0, $switch$split42D = 0, $table_len = 0, $tmp1 = 0, $tmp2 = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $table_len = sp + 44|0;
 $error = sp + 40|0;
 $fvar_head = sp + 24|0;
 $axis_rec = sp;
 $0 = ((($face)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$error>>2] = 0;
 $4 = ((($face)) + 712|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 L1: do {
  if ($6) {
   $7 = ((($face)) + 508|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (FUNCTION_TABLE_iiiii[$8 & 63]($face,1735811442,$1,$table_len)|0);
   HEAP32[$error>>2] = $9;
   $10 = ($9|0)==(0);
   if (!($10)) {
    $236 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($236|0);
   }
   $11 = HEAP32[$7>>2]|0;
   $12 = (FUNCTION_TABLE_iiiii[$11 & 63]($face,1719034226,$1,$table_len)|0);
   HEAP32[$error>>2] = $12;
   $13 = ($12|0)==(0);
   if (!($13)) {
    $236 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($236|0);
   }
   $14 = (_FT_Stream_Pos($1)|0);
   $15 = (_FT_Stream_ReadFields($1,23846,$fvar_head)|0);
   HEAP32[$error>>2] = $15;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $236 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($236|0);
   }
   $17 = HEAP32[$fvar_head>>2]|0;
   $18 = ($17|0)==(65536);
   if ($18) {
    $19 = ((($fvar_head)) + 6|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = ($20<<16>>16)==(2);
    if ($21) {
     $22 = ((($fvar_head)) + 10|0);
     $23 = HEAP16[$22>>1]|0;
     $24 = ($23<<16>>16)==(20);
     if ($24) {
      $25 = ((($fvar_head)) + 8|0);
      $26 = HEAP16[$25>>1]|0;
      $27 = $26&65535;
      $28 = ($26&65535)>(16382);
      if (!($28)) {
       $29 = ((($fvar_head)) + 14|0);
       $30 = HEAP16[$29>>1]|0;
       $31 = $30&65535;
       $32 = $27 << 2;
       $33 = (($32) + 4)|0;
       $34 = ($31|0)==($33|0);
       if ($34) {
        $35 = ((($fvar_head)) + 12|0);
        $36 = HEAP16[$35>>1]|0;
        $37 = ($36&65535)>(32511);
        if (!($37)) {
         $38 = $36&65535;
         $39 = ((($fvar_head)) + 4|0);
         $40 = HEAP16[$39>>1]|0;
         $41 = $40&65535;
         $42 = ($27*20)|0;
         $43 = Math_imul($38, $31)|0;
         $44 = (($43) + ($42))|0;
         $45 = (($44) + ($41))|0;
         $46 = HEAP32[$table_len>>2]|0;
         $47 = ($45>>>0)>($46>>>0);
         if (!($47)) {
          $48 = (_ft_mem_alloc($3,40,$error)|0);
          HEAP32[$4>>2] = $48;
          $49 = HEAP32[$error>>2]|0;
          $50 = ($49|0)==(0);
          if (!($50)) {
           $236 = HEAP32[$error>>2]|0;
           STACKTOP = sp;return ($236|0);
          }
          $51 = HEAP16[$25>>1]|0;
          $52 = $51&65535;
          $53 = HEAP16[$35>>1]|0;
          $54 = $53&65535;
          $55 = $54 << 3;
          $56 = $54 << 2;
          $tmp1 = (($56) + 29)|0;
          $tmp2 = Math_imul($tmp1, $52)|0;
          $57 = (($55) + 20)|0;
          $58 = (($57) + ($tmp2))|0;
          $59 = ((($48)) + 12|0);
          HEAP32[$59>>2] = $58;
          $60 = HEAP32[$4>>2]|0;
          $61 = ((($60)) + 12|0);
          $62 = HEAP32[$61>>2]|0;
          $63 = (_ft_mem_alloc($3,$62,$error)|0);
          $64 = HEAP32[$error>>2]|0;
          $65 = ($64|0)==(0);
          if (!($65)) {
           $236 = HEAP32[$error>>2]|0;
           STACKTOP = sp;return ($236|0);
          }
          $66 = HEAP32[$4>>2]|0;
          $67 = ((($66)) + 8|0);
          HEAP32[$67>>2] = $63;
          $68 = HEAP16[$25>>1]|0;
          $69 = $68&65535;
          HEAP32[$63>>2] = $69;
          $70 = ((($63)) + 4|0);
          HEAP32[$70>>2] = -1;
          $71 = HEAP16[$35>>1]|0;
          $72 = $71&65535;
          $73 = ((($63)) + 8|0);
          HEAP32[$73>>2] = $72;
          $74 = ((($63)) + 20|0);
          $75 = ((($63)) + 12|0);
          HEAP32[$75>>2] = $74;
          $76 = HEAP16[$25>>1]|0;
          $77 = $76&65535;
          $78 = (($74) + (($77*24)|0)|0);
          $79 = ((($63)) + 16|0);
          HEAP32[$79>>2] = $78;
          $80 = HEAP16[$35>>1]|0;
          $81 = $80&65535;
          $82 = (($78) + ($81<<3)|0);
          $83 = ($80<<16>>16)==(0);
          if ($83) {
           $next_coords$0$lcssa = $82;
          } else {
           $84 = HEAP32[$79>>2]|0;
           $85 = HEAP16[$25>>1]|0;
           $86 = $85&65535;
           $87 = HEAP16[$35>>1]|0;
           $88 = $87&65535;
           $89 = $87&65535;
           $90 = ($89>>>0)>(1);
           $smax = $90 ? $89 : 1;
           $91 = $85&65535;
           $92 = Math_imul($smax, $91)|0;
           $93 = $92 << 2;
           $94 = $76&65535;
           $95 = ($94*24)|0;
           $96 = (($93) + ($95))|0;
           $97 = $80&65535;
           $98 = $97 << 3;
           $99 = (($96) + ($98))|0;
           $100 = (($99) + 20)|0;
           $scevgep39 = (($63) + ($100)|0);
           $i$031 = 0;$next_coords$032 = $82;
           while(1) {
            $101 = (($84) + ($i$031<<3)|0);
            HEAP32[$101>>2] = $next_coords$032;
            $102 = (($next_coords$032) + ($86<<2)|0);
            $103 = (($i$031) + 1)|0;
            $104 = ($103|0)<($88|0);
            if ($104) {
             $i$031 = $103;$next_coords$032 = $102;
            } else {
             break;
            }
           }
           $next_coords$0$lcssa = $scevgep39;
          }
          $105 = HEAP16[$25>>1]|0;
          $106 = ($105<<16>>16)==(0);
          if (!($106)) {
           $107 = HEAP32[$75>>2]|0;
           $108 = HEAP16[$25>>1]|0;
           $109 = $108&65535;
           $i$126 = 0;$next_name$027 = $next_coords$0$lcssa;
           while(1) {
            $110 = (($107) + (($i$126*24)|0)|0);
            HEAP32[$110>>2] = $next_name$027;
            $111 = ((($next_name$027)) + 5|0);
            $112 = (($i$126) + 1)|0;
            $113 = ($112|0)<($109|0);
            if ($113) {
             $i$126 = $112;$next_name$027 = $111;
            } else {
             break;
            }
           }
          }
          $114 = HEAP16[$39>>1]|0;
          $115 = $114&65535;
          $116 = (($115) + ($14))|0;
          $117 = (_FT_Stream_Seek($1,$116)|0);
          HEAP32[$error>>2] = $117;
          $118 = ($117|0)==(0);
          if (!($118)) {
           $236 = HEAP32[$error>>2]|0;
           STACKTOP = sp;return ($236|0);
          }
          $119 = HEAP16[$25>>1]|0;
          $120 = ($119<<16>>16)==(0);
          L40: do {
           if (!($120)) {
            $121 = HEAP32[$75>>2]|0;
            $122 = ((($axis_rec)) + 4|0);
            $123 = ((($axis_rec)) + 8|0);
            $124 = ((($axis_rec)) + 12|0);
            $125 = ((($axis_rec)) + 18|0);
            $a$022 = $121;$i$221 = 0;
            while(1) {
             $126 = (_FT_Stream_ReadFields($1,23882,$axis_rec)|0);
             HEAP32[$error>>2] = $126;
             $127 = ($126|0)==(0);
             if (!($127)) {
              break;
             }
             $128 = HEAP32[$axis_rec>>2]|0;
             $129 = ((($a$022)) + 16|0);
             HEAP32[$129>>2] = $128;
             $130 = HEAP32[$122>>2]|0;
             $131 = ((($a$022)) + 4|0);
             HEAP32[$131>>2] = $130;
             $132 = HEAP32[$123>>2]|0;
             $133 = ((($a$022)) + 8|0);
             HEAP32[$133>>2] = $132;
             $134 = HEAP32[$124>>2]|0;
             $135 = ((($a$022)) + 12|0);
             HEAP32[$135>>2] = $134;
             $136 = HEAP16[$125>>1]|0;
             $137 = $136&65535;
             $138 = ((($a$022)) + 20|0);
             HEAP32[$138>>2] = $137;
             $139 = HEAP32[$129>>2]|0;
             $140 = $139 >>> 24;
             $141 = $140&255;
             $142 = HEAP32[$a$022>>2]|0;
             HEAP8[$142>>0] = $141;
             $143 = HEAP32[$129>>2]|0;
             $144 = $143 >>> 16;
             $145 = $144&255;
             $146 = HEAP32[$a$022>>2]|0;
             $147 = ((($146)) + 1|0);
             HEAP8[$147>>0] = $145;
             $148 = HEAP32[$129>>2]|0;
             $149 = $148 >>> 8;
             $150 = $149&255;
             $151 = HEAP32[$a$022>>2]|0;
             $152 = ((($151)) + 2|0);
             HEAP8[$152>>0] = $150;
             $153 = HEAP32[$129>>2]|0;
             $154 = $153&255;
             $155 = HEAP32[$a$022>>2]|0;
             $156 = ((($155)) + 3|0);
             HEAP8[$156>>0] = $154;
             $157 = HEAP32[$a$022>>2]|0;
             $158 = ((($157)) + 4|0);
             HEAP8[$158>>0] = 0;
             $159 = ((($a$022)) + 24|0);
             $160 = (($i$221) + 1)|0;
             $161 = HEAP16[$25>>1]|0;
             $162 = $161&65535;
             $163 = ($160|0)<($162|0);
             if ($163) {
              $a$022 = $159;$i$221 = $160;
             } else {
              break L40;
             }
            }
            $236 = HEAP32[$error>>2]|0;
            STACKTOP = sp;return ($236|0);
           }
          } while(0);
          $164 = HEAP16[$35>>1]|0;
          $165 = ($164<<16>>16)==(0);
          if ($165) {
           break;
          }
          $166 = HEAP32[$79>>2]|0;
          $i$317 = 0;$ns$018 = $166;
          while(1) {
           $167 = HEAP16[$25>>1]|0;
           $168 = $167&65535;
           $169 = $168 << 2;
           $170 = (($169) + 4)|0;
           $171 = (_FT_Stream_EnterFrame($1,$170)|0);
           HEAP32[$error>>2] = $171;
           $172 = ($171|0)==(0);
           if (!($172)) {
            break;
           }
           $173 = (_FT_Stream_GetUShort($1)|0);
           $174 = $173&65535;
           $175 = ((($ns$018)) + 4|0);
           HEAP32[$175>>2] = $174;
           (_FT_Stream_GetUShort($1)|0);
           $176 = HEAP16[$25>>1]|0;
           $177 = ($176<<16>>16)==(0);
           if (!($177)) {
            $j$013 = 0;
            while(1) {
             $178 = (_FT_Stream_GetULong($1)|0);
             $179 = HEAP32[$ns$018>>2]|0;
             $180 = (($179) + ($j$013<<2)|0);
             HEAP32[$180>>2] = $178;
             $181 = (($j$013) + 1)|0;
             $182 = HEAP16[$25>>1]|0;
             $183 = $182&65535;
             $184 = ($181|0)<($183|0);
             if ($184) {
              $j$013 = $181;
             } else {
              break;
             }
            }
           }
           _FT_Stream_ExitFrame($1);
           $185 = (($i$317) + 1)|0;
           $186 = ((($ns$018)) + 8|0);
           $187 = HEAP16[$35>>1]|0;
           $188 = $187&65535;
           $189 = ($185|0)<($188|0);
           if ($189) {
            $i$317 = $185;$ns$018 = $186;
           } else {
            break L1;
           }
          }
          $236 = HEAP32[$error>>2]|0;
          STACKTOP = sp;return ($236|0);
         }
        }
       }
      }
     }
    }
   }
   HEAP32[$error>>2] = 8;
   $236 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($236|0);
  }
 } while(0);
 $190 = ($master|0)==(0|0);
 if ($190) {
  $236 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($236|0);
 }
 $191 = HEAP32[$4>>2]|0;
 $192 = ((($191)) + 12|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = (_ft_mem_alloc($3,$193,$error)|0);
 $195 = HEAP32[$error>>2]|0;
 $196 = ($195|0)==(0);
 if (!($196)) {
  $236 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($236|0);
 }
 $197 = HEAP32[$4>>2]|0;
 $198 = ((($197)) + 8|0);
 $199 = HEAP32[$198>>2]|0;
 $200 = ((($197)) + 12|0);
 $201 = HEAP32[$200>>2]|0;
 _memcpy(($194|0),($199|0),($201|0))|0;
 $202 = ((($194)) + 20|0);
 $203 = ((($194)) + 12|0);
 HEAP32[$203>>2] = $202;
 $204 = HEAP32[$194>>2]|0;
 $205 = (($202) + (($204*24)|0)|0);
 $206 = ((($194)) + 16|0);
 HEAP32[$206>>2] = $205;
 $207 = ((($194)) + 8|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = (($205) + ($208<<3)|0);
 $210 = ($208|0)==(0);
 if ($210) {
  $next_coords$1$lcssa = $209;
 } else {
  $211 = HEAP32[$206>>2]|0;
  $212 = HEAP32[$194>>2]|0;
  $213 = HEAP32[$207>>2]|0;
  $214 = ($213>>>0)>(1);
  $umax = $214 ? $213 : 1;
  $215 = Math_imul($212, $umax)|0;
  $216 = $215 << 2;
  $217 = ($204*24)|0;
  $218 = (($216) + ($217))|0;
  $219 = $208 << 3;
  $220 = (($218) + ($219))|0;
  $221 = (($220) + 20)|0;
  $scevgep = (($194) + ($221)|0);
  $n$09 = 0;$next_coords$18 = $209;
  while(1) {
   $222 = (($211) + ($n$09<<3)|0);
   HEAP32[$222>>2] = $next_coords$18;
   $223 = (($next_coords$18) + ($212<<2)|0);
   $224 = (($n$09) + 1)|0;
   $225 = ($224>>>0)<($213>>>0);
   if ($225) {
    $n$09 = $224;$next_coords$18 = $223;
   } else {
    break;
   }
  }
  $next_coords$1$lcssa = $scevgep;
 }
 $226 = HEAP32[$194>>2]|0;
 $227 = ($226|0)==(0);
 if (!($227)) {
  $228 = HEAP32[$203>>2]|0;
  $229 = HEAP32[$194>>2]|0;
  $a$16 = $228;$n$17 = 0;$next_name$15 = $next_coords$1$lcssa;
  while(1) {
   HEAP32[$a$16>>2] = $next_name$15;
   $230 = ((($a$16)) + 16|0);
   $231 = HEAP32[$230>>2]|0;
   $switch$split2D = ($231|0)<(2003072104);
   L76: do {
    if ($switch$split2D) {
     $switch$split12D = ($231|0)<(1936486004);
     if ($switch$split12D) {
      switch ($231|0) {
      case 1869640570:  {
       break;
      }
      default: {
       break L76;
      }
      }
      HEAP32[$a$16>>2] = 88645;
      break;
     } else {
      switch ($231|0) {
      case 1936486004:  {
       break;
      }
      default: {
       break L76;
      }
      }
      HEAP32[$a$16>>2] = 88612;
      break;
     }
    } else {
     $switch$split42D = ($231|0)<(2003265652);
     if ($switch$split42D) {
      switch ($231|0) {
      case 2003072104:  {
       break;
      }
      default: {
       break L76;
      }
      }
      HEAP32[$a$16>>2] = 88639;
      break;
     } else {
      switch ($231|0) {
      case 2003265652:  {
       break;
      }
      default: {
       break L76;
      }
      }
      HEAP32[$a$16>>2] = 89472;
      break;
     }
    }
   } while(0);
   $232 = ((($next_name$15)) + 5|0);
   $233 = ((($a$16)) + 24|0);
   $234 = (($n$17) + 1)|0;
   $235 = ($234>>>0)<($229>>>0);
   if ($235) {
    $a$16 = $233;$n$17 = $234;$next_name$15 = $232;
   } else {
    break;
   }
  }
 }
 HEAP32[$master>>2] = $194;
 $236 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($236|0);
}
function _TT_Set_MM_Blend($face,$num_coords,$coords) {
 $face = $face|0;
 $num_coords = $num_coords|0;
 $coords = $coords|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $i$05 = 0, $i$12 = 0, $manageCvt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 708|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($face)) + 712|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (_TT_Get_MM_Var($face,0)|0);
  HEAP32[$error>>2] = $6;
  $7 = ($6|0)==(0);
  if ($7) {
   label = 3;
  }
 } else {
  label = 3;
 }
 L3: do {
  if ((label|0) == 3) {
   $8 = HEAP32[$3>>2]|0;
   $9 = ((($8)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($num_coords|0);
   if (!($12)) {
    HEAP32[$error>>2] = 6;
    break;
   }
   $13 = ($num_coords|0)==(0);
   L8: do {
    if (!($13)) {
     $i$05 = 0;
     while(1) {
      $16 = (($coords) + ($i$05<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $$off = (($17) + 65536)|0;
      $18 = ($$off>>>0)>(131072);
      $15 = (($i$05) + 1)|0;
      if ($18) {
       break;
      }
      $14 = ($15>>>0)<($num_coords>>>0);
      if ($14) {
       $i$05 = $15;
      } else {
       break L8;
      }
     }
     HEAP32[$error>>2] = 6;
     break L3;
    }
   } while(0);
   $19 = ((($8)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    $22 = (_ft_var_load_gvar($face)|0);
    HEAP32[$error>>2] = $22;
    $23 = ($22|0)==(0);
    if (!($23)) {
     break;
    }
   }
   $24 = ((($8)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   L17: do {
    if ($26) {
     $29 = (_ft_mem_realloc($1,4,0,$num_coords,0,$error)|0);
     HEAP32[$24>>2] = $29;
     $30 = HEAP32[$error>>2]|0;
     $31 = ($30|0)==(0);
     if ($31) {
      $manageCvt$0 = 1;
     } else {
      break L3;
     }
    } else {
     $27 = ($num_coords|0)==(0);
     if ($27) {
      $manageCvt$0 = 0;
     } else {
      $28 = HEAP32[$24>>2]|0;
      $i$12 = 0;
      while(1) {
       $34 = (($28) + ($i$12<<2)|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = (($coords) + ($i$12<<2)|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($35|0)==($37|0);
       $33 = (($i$12) + 1)|0;
       if (!($38)) {
        $manageCvt$0 = 2;
        break L17;
       }
       $32 = ($33>>>0)<($num_coords>>>0);
       if ($32) {
        $i$12 = $33;
       } else {
        $manageCvt$0 = 0;
        break;
       }
      }
     }
    }
   } while(0);
   HEAP32[$8>>2] = $num_coords;
   $39 = HEAP32[$24>>2]|0;
   $40 = $num_coords << 2;
   _memcpy(($39|0),($coords|0),($40|0))|0;
   HEAP8[$2>>0] = 1;
   $41 = ((($face)) + 672|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if (!($43)) {
    switch ($manageCvt$0|0) {
    case 2:  {
     _ft_mem_free($1,$42);
     HEAP32[$41>>2] = 0;
     $44 = ((($face)) + 104|0);
     $45 = HEAP32[$44>>2]|0;
     (_tt_face_load_cvt($face,$45)|0);
     break L3;
     break;
    }
    case 1:  {
     $46 = ((($face)) + 104|0);
     $47 = HEAP32[$46>>2]|0;
     (_tt_face_vary_cvt($face,$47)|0);
     break L3;
     break;
    }
    default: {
     break L3;
    }
    }
   }
  }
 } while(0);
 $48 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($48|0);
}
function _tt_face_vary_cvt($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $$lcssa = 0, $$mask = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $exitcond = 0, $i$024 = 0, $im_end_coords$0 = 0, $im_end_coords$1 = 0, $im_start_coords$0 = 0, $im_start_coords$1 = 0, $j$013 = 0, $j$122 = 0, $j$214 = 0;
 var $j$316 = 0, $j$420 = 0, $j$518 = 0, $offsetToData$025 = 0, $offsetToData$1 = 0, $or$cond = 0, $or$cond3 = 0, $point_count = 0, $table_len = 0, $tuple_coords$0 = 0, $tuple_coords$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 8|0;
 $table_len = sp + 4|0;
 $point_count = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 712|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$error>>2] = 0;
  $im_end_coords$1 = 0;$im_start_coords$1 = 0;$tuple_coords$1 = 0;
  _ft_mem_free($1,$tuple_coords$1);
  _ft_mem_free($1,$im_start_coords$1);
  _ft_mem_free($1,$im_end_coords$1);
  $147 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($147|0);
 }
 $5 = ((($face)) + 672|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$error>>2] = 0;
  $im_end_coords$1 = 0;$im_start_coords$1 = 0;$tuple_coords$1 = 0;
  _ft_mem_free($1,$tuple_coords$1);
  _ft_mem_free($1,$im_start_coords$1);
  _ft_mem_free($1,$im_end_coords$1);
  $147 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($147|0);
 }
 $8 = ((($face)) + 508|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iiiii[$9 & 63]($face,1668702578,$stream,$table_len)|0);
 HEAP32[$error>>2] = $10;
 $11 = ($10|0)==(0);
 if (!($11)) {
  HEAP32[$error>>2] = 0;
  $im_end_coords$1 = 0;$im_start_coords$1 = 0;$tuple_coords$1 = 0;
  _ft_mem_free($1,$tuple_coords$1);
  _ft_mem_free($1,$im_start_coords$1);
  _ft_mem_free($1,$im_end_coords$1);
  $147 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($147|0);
 }
 $12 = HEAP32[$table_len>>2]|0;
 $13 = (_FT_Stream_EnterFrame($stream,$12)|0);
 HEAP32[$error>>2] = $13;
 $14 = ($13|0)==(0);
 if (!($14)) {
  HEAP32[$error>>2] = 0;
  $im_end_coords$1 = 0;$im_start_coords$1 = 0;$tuple_coords$1 = 0;
  _ft_mem_free($1,$tuple_coords$1);
  _ft_mem_free($1,$im_start_coords$1);
  _ft_mem_free($1,$im_end_coords$1);
  $147 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($147|0);
 }
 $15 = ((($stream)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$stream>>2]|0;
 $18 = $16;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (_FT_Stream_GetULong($stream)|0);
 $22 = ($21|0)==(65536);
 if ($22) {
  $23 = HEAP32[$3>>2]|0;
  $24 = (_ft_mem_realloc($1,4,0,$23,0,$error)|0);
  $25 = HEAP32[$error>>2]|0;
  $26 = ($25|0)==(0);
  if ($26) {
   $27 = HEAP32[$3>>2]|0;
   $28 = (_ft_mem_realloc($1,4,0,$27,0,$error)|0);
   $29 = HEAP32[$error>>2]|0;
   $30 = ($29|0)==(0);
   if ($30) {
    $31 = HEAP32[$3>>2]|0;
    $32 = (_ft_mem_realloc($1,4,0,$31,0,$error)|0);
    $33 = HEAP32[$error>>2]|0;
    $34 = ($33|0)==(0);
    if ($34) {
     $35 = (_FT_Stream_GetUShort($stream)|0);
     $36 = (_FT_Stream_GetUShort($stream)|0);
     $37 = $35 & 4095;
     $38 = ($37<<16>>16)==(0);
     if ($38) {
      $im_end_coords$0 = $32;$im_start_coords$0 = $28;$tuple_coords$0 = $24;
     } else {
      $39 = $36&65535;
      $40 = (($20) + ($39))|0;
      $41 = ((($face)) + 668|0);
      $42 = ((($face)) + 668|0);
      $43 = $35&65535;
      $44 = $43 & 4095;
      $i$024 = 0;$offsetToData$025 = $40;
      while(1) {
       $45 = (_FT_Stream_GetUShort($stream)|0);
       $46 = $45&65535;
       $47 = (_FT_Stream_GetUShort($stream)|0);
       $48 = $47&65535;
       $49 = $48 & 32768;
       $50 = ($49|0)==(0);
       if ($50) {
        $60 = $48 & 16384;
        $61 = ($60|0)==(0);
        if (!($61)) {
         $62 = HEAP32[$3>>2]|0;
         $$mask = $62 & 2147483647;
         $63 = ($$mask|0)==(0);
         if (!($63)) {
          $j$122 = 0;
          while(1) {
           (_FT_Stream_GetUShort($stream)|0);
           $64 = (($j$122) + 1)|0;
           $65 = HEAP32[$3>>2]|0;
           $66 = $65 << 1;
           $67 = ($64>>>0)<($66>>>0);
           if ($67) {
            $j$122 = $64;
           } else {
            break;
           }
          }
         }
        }
       } else {
        $51 = HEAP32[$3>>2]|0;
        $52 = ($51|0)==(0);
        if (!($52)) {
         $j$013 = 0;
         while(1) {
          $53 = (_FT_Stream_GetUShort($stream)|0);
          $54 = $53 << 16 >> 16;
          $55 = $54 << 2;
          $56 = (($24) + ($j$013<<2)|0);
          HEAP32[$56>>2] = $55;
          $57 = (($j$013) + 1)|0;
          $58 = HEAP32[$3>>2]|0;
          $59 = ($57>>>0)<($58>>>0);
          if ($59) {
           $j$013 = $57;
          } else {
           break;
          }
         }
        }
        $68 = $48 & 16384;
        $69 = ($68|0)==(0);
        if (!($69)) {
         $70 = HEAP32[$3>>2]|0;
         $71 = ($70|0)==(0);
         if (!($71)) {
          $j$214 = 0;
          while(1) {
           $73 = (_FT_Stream_GetUShort($stream)|0);
           $74 = $73 << 16 >> 16;
           $75 = $74 << 2;
           $76 = (($28) + ($j$214<<2)|0);
           HEAP32[$76>>2] = $75;
           $77 = (($j$214) + 1)|0;
           $78 = HEAP32[$3>>2]|0;
           $79 = ($77>>>0)<($78>>>0);
           if ($79) {
            $j$214 = $77;
           } else {
            $$lcssa = $78;
            break;
           }
          }
          $72 = ($$lcssa|0)==(0);
          if (!($72)) {
           $j$316 = 0;
           while(1) {
            $80 = (_FT_Stream_GetUShort($stream)|0);
            $81 = $80 << 16 >> 16;
            $82 = $81 << 2;
            $83 = (($32) + ($j$316<<2)|0);
            HEAP32[$83>>2] = $82;
            $84 = (($j$316) + 1)|0;
            $85 = HEAP32[$3>>2]|0;
            $86 = ($84>>>0)<($85>>>0);
            if ($86) {
             $j$316 = $84;
            } else {
             break;
            }
           }
          }
         }
        }
        $87 = (_ft_var_apply_tuple($3,$47,$24,$28,$32)|0);
        $88 = ($87|0)==(0);
        $89 = $48 & 8192;
        $90 = ($89|0)==(0);
        $or$cond3 = $90 | $88;
        if (!($or$cond3)) {
         $91 = HEAP32[$15>>2]|0;
         $92 = HEAP32[$stream>>2]|0;
         $93 = $91;
         $94 = $92;
         $95 = (($93) - ($94))|0;
         $96 = (($92) + ($offsetToData$025)|0);
         HEAP32[$15>>2] = $96;
         $97 = (_ft_var_readpackedpoints($stream,$point_count)|0);
         $98 = HEAP32[$point_count>>2]|0;
         $99 = ($98|0)==(0);
         if ($99) {
          $100 = HEAP32[$41>>2]|0;
          $101 = $100;
         } else {
          $101 = $98;
         }
         $102 = (_ft_var_readpackeddeltas($stream,$101)|0);
         $103 = ($97|0)==(0|0);
         $104 = ($102|0)==(0|0);
         $or$cond = $103 | $104;
         L47: do {
          if ($or$cond) {
           label = 37;
          } else {
           $105 = ($97|0)==((-1)|0);
           if ($105) {
            $109 = HEAP32[$42>>2]|0;
            $110 = ($109|0)==(0);
            if ($110) {
             break;
            } else {
             $j$420 = 0;
            }
            while(1) {
             $111 = HEAP32[$5>>2]|0;
             $112 = (($111) + ($j$420<<1)|0);
             $113 = HEAP16[$112>>1]|0;
             $114 = $113&65535;
             $115 = (($102) + ($j$420<<1)|0);
             $116 = HEAP16[$115>>1]|0;
             $117 = $116 << 16 >> 16;
             $118 = (_FT_MulFix($117,$87)|0);
             $119 = (($118) + ($114))|0;
             $120 = $119&65535;
             $121 = HEAP32[$5>>2]|0;
             $122 = (($121) + ($j$420<<1)|0);
             HEAP16[$122>>1] = $120;
             $123 = (($j$420) + 1)|0;
             $124 = HEAP32[$42>>2]|0;
             $125 = ($123>>>0)<($124>>>0);
             if ($125) {
              $j$420 = $123;
             } else {
              label = 37;
              break L47;
             }
            }
           }
           $106 = HEAP32[$point_count>>2]|0;
           $107 = ($106|0)==(0);
           if ($107) {
            label = 38;
            break;
           }
           $108 = HEAP32[$point_count>>2]|0;
           $j$518 = 0;
           while(1) {
            $126 = (($97) + ($j$518<<1)|0);
            $127 = HEAP16[$126>>1]|0;
            $128 = $127&65535;
            $129 = HEAP32[$5>>2]|0;
            $130 = (($129) + ($128<<1)|0);
            $131 = HEAP16[$130>>1]|0;
            $132 = $131&65535;
            $133 = (($102) + ($j$518<<1)|0);
            $134 = HEAP16[$133>>1]|0;
            $135 = $134 << 16 >> 16;
            $136 = (_FT_MulFix($135,$87)|0);
            $137 = (($136) + ($132))|0;
            $138 = $137&65535;
            $139 = HEAP32[$5>>2]|0;
            $140 = (($139) + ($128<<1)|0);
            HEAP16[$140>>1] = $138;
            $141 = (($j$518) + 1)|0;
            $142 = ($141>>>0)<($108>>>0);
            if ($142) {
             $j$518 = $141;
            } else {
             label = 37;
             break;
            }
           }
          }
         } while(0);
         if ((label|0) == 37) {
          label = 0;
          $143 = ($97|0)==((-1)|0);
          if (!($143)) {
           label = 38;
          }
         }
         if ((label|0) == 38) {
          label = 0;
          _ft_mem_free($1,$97);
         }
         _ft_mem_free($1,$102);
         $144 = HEAP32[$stream>>2]|0;
         $145 = (($144) + ($95)|0);
         HEAP32[$15>>2] = $145;
        }
       }
       $offsetToData$1 = (($46) + ($offsetToData$025))|0;
       $146 = (($i$024) + 1)|0;
       $exitcond = ($146|0)==($44|0);
       if ($exitcond) {
        $im_end_coords$0 = $32;$im_start_coords$0 = $28;$tuple_coords$0 = $24;
        break;
       } else {
        $i$024 = $146;$offsetToData$025 = $offsetToData$1;
       }
      }
     }
    } else {
     $im_end_coords$0 = $32;$im_start_coords$0 = $28;$tuple_coords$0 = $24;
    }
   } else {
    $im_end_coords$0 = 0;$im_start_coords$0 = $28;$tuple_coords$0 = $24;
   }
  } else {
   $im_end_coords$0 = 0;$im_start_coords$0 = 0;$tuple_coords$0 = $24;
  }
 } else {
  HEAP32[$error>>2] = 0;
  $im_end_coords$0 = 0;$im_start_coords$0 = 0;$tuple_coords$0 = 0;
 }
 _FT_Stream_ExitFrame($stream);
 $im_end_coords$1 = $im_end_coords$0;$im_start_coords$1 = $im_start_coords$0;$tuple_coords$1 = $tuple_coords$0;
 _ft_mem_free($1,$tuple_coords$1);
 _ft_mem_free($1,$im_start_coords$1);
 _ft_mem_free($1,$im_end_coords$1);
 $147 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($147|0);
}
function _TT_Set_Var_Design($face,$num_coords,$coords) {
 $face = $face|0;
 $num_coords = $num_coords|0;
 $coords = $coords|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $a$012 = 0, $av$010 = 0, $error = 0, $i$011 = 0, $i$19 = 0, $j$08 = 0, $j$08$lcssa = 0, $normalized$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 712|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (_TT_Get_MM_Var($face,0)|0);
  HEAP32[$error>>2] = $5;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $normalized$0 = 0;
   _ft_mem_free($1,$normalized$0);
   $88 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($88|0);
  }
 }
 $7 = HEAP32[$2>>2]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==($num_coords|0);
 if (!($11)) {
  HEAP32[$error>>2] = 6;
  $normalized$0 = 0;
  _ft_mem_free($1,$normalized$0);
  $88 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($88|0);
 }
 $12 = (_ft_mem_realloc($1,4,0,$10,0,$error)|0);
 $13 = HEAP32[$error>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $normalized$0 = $12;
  _ft_mem_free($1,$normalized$0);
  $88 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($88|0);
 }
 $15 = HEAP32[$9>>2]|0;
 $16 = ($15|0)==(0);
 L12: do {
  if (!($16)) {
   $17 = ((($9)) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $a$012 = $18;$i$011 = 0;
   while(1) {
    $19 = (($coords) + ($i$011<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($a$012)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($20|0)>($22|0);
    if ($23) {
     break;
    }
    $24 = ((($a$012)) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($20|0)<($25|0);
    if ($26) {
     break;
    }
    $27 = ((($a$012)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($20|0)<($28|0);
    do {
     if ($29) {
      $30 = (($20) - ($28))|0;
      $31 = (($25) - ($28))|0;
      $32 = (_FT_MulDiv($30,65536,$31)|0);
      $33 = (0 - ($32))|0;
      $34 = (($12) + ($i$011<<2)|0);
      HEAP32[$34>>2] = $33;
     } else {
      $35 = ($22|0)==($28|0);
      if ($35) {
       $36 = (($12) + ($i$011<<2)|0);
       HEAP32[$36>>2] = 0;
       break;
      } else {
       $37 = (($20) - ($28))|0;
       $38 = (($22) - ($28))|0;
       $39 = (_FT_MulDiv($37,65536,$38)|0);
       $40 = (($12) + ($i$011<<2)|0);
       HEAP32[$40>>2] = $39;
       break;
      }
     }
    } while(0);
    $41 = (($i$011) + 1)|0;
    $42 = ((($a$012)) + 24|0);
    $43 = HEAP32[$9>>2]|0;
    $44 = ($41>>>0)<($43>>>0);
    if ($44) {
     $a$012 = $42;$i$011 = $41;
    } else {
     break L12;
    }
   }
   HEAP32[$error>>2] = 6;
   $normalized$0 = $12;
   _ft_mem_free($1,$normalized$0);
   $88 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($88|0);
  }
 } while(0);
 $45 = ((($7)) + 16|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = ($46<<24>>24)==(0);
 if ($47) {
  _ft_var_load_avar($face);
 }
 $48 = ((($7)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0|0);
 if (!($50)) {
  $51 = HEAP32[$9>>2]|0;
  $52 = ($51|0)==(0);
  if (!($52)) {
   $av$010 = $49;$i$19 = 0;
   while(1) {
    $53 = HEAP16[$av$010>>1]|0;
    $54 = ($53&65535)>(1);
    L35: do {
     if ($54) {
      $55 = (($12) + ($i$19<<2)|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ((($av$010)) + 4|0);
      $58 = HEAP32[$57>>2]|0;
      $j$08 = 1;
      while(1) {
       $59 = (($58) + ($j$08<<3)|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($56|0)<($60|0);
       if ($61) {
        $$lcssa = $60;$j$08$lcssa = $j$08;
        break;
       }
       $79 = (($j$08) + 1)|0;
       $80 = HEAP16[$av$010>>1]|0;
       $81 = $80&65535;
       $82 = ($79>>>0)<($81>>>0);
       if ($82) {
        $j$08 = $79;
       } else {
        break L35;
       }
      }
      $62 = (($j$08$lcssa) + -1)|0;
      $63 = (($58) + ($62<<3)|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = (($56) - ($64))|0;
      $66 = (($$lcssa) - ($64))|0;
      $67 = (_FT_MulDiv($65,65536,$66)|0);
      $68 = HEAP32[$57>>2]|0;
      $69 = (((($68) + ($j$08$lcssa<<3)|0)) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (((($68) + ($62<<3)|0)) + 4|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = (($70) - ($72))|0;
      $74 = (_FT_MulDiv($67,$73,65536)|0);
      $75 = HEAP32[$57>>2]|0;
      $76 = (((($75) + ($62<<3)|0)) + 4|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($77) + ($74))|0;
      HEAP32[$55>>2] = $78;
     }
    } while(0);
    $83 = (($i$19) + 1)|0;
    $84 = ((($av$010)) + 8|0);
    $85 = HEAP32[$9>>2]|0;
    $86 = ($83>>>0)<($85>>>0);
    if ($86) {
     $av$010 = $84;$i$19 = $83;
    } else {
     break;
    }
   }
  }
 }
 $87 = (_TT_Set_MM_Blend($face,$num_coords,$12)|0);
 HEAP32[$error>>2] = $87;
 $normalized$0 = $12;
 _ft_mem_free($1,$normalized$0);
 $88 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($88|0);
}
function _TT_Vary_Get_Glyph_Deltas($face,$glyph_index,$deltas,$n_points) {
 $face = $face|0;
 $glyph_index = $glyph_index|0;
 $deltas = $deltas|0;
 $n_points = $n_points|0;
 var $$0 = 0, $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $exitcond = 0, $i$023 = 0, $j$014 = 0, $j$115 = 0;
 var $j$217 = 0, $j$321 = 0, $j$419 = 0, $localpoints$024 = 0, $localpoints$1 = 0, $localpoints$2 = 0, $localpoints$3 = 0, $offsetToData$0 = 0, $offsetToData$125 = 0, $offsetToData$2 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $point_count = 0, $points$0 = 0, $sharedpoints$0 = 0, $spoint_count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 8|0;
 $point_count = sp + 4|0;
 $spoint_count = sp;
 $0 = ((($face)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 712|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$spoint_count>>2] = 0;
 $6 = ((($face)) + 708|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 $9 = ($5|0)==(0|0);
 $or$cond = $9 | $8;
 if ($or$cond) {
  $$0 = 6;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_ft_mem_realloc($3,8,0,$n_points,0,$error)|0);
 $11 = HEAP32[$error>>2]|0;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   HEAP32[$deltas>>2] = $10;
   $13 = ((($5)) + 32|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14>>>0)>($glyph_index>>>0);
   if (!($15)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $16 = ((($5)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + ($glyph_index<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($glyph_index) + 1)|0;
   $21 = (($17) + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($19|0)==($22|0);
   if ($23) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $24 = (_FT_Stream_Seek($1,$19)|0);
   HEAP32[$error>>2] = $24;
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = HEAP32[$16>>2]|0;
    $27 = (($26) + ($20<<2)|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($26) + ($glyph_index<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) - ($30))|0;
    $32 = (_FT_Stream_EnterFrame($1,$31)|0);
    HEAP32[$error>>2] = $32;
    $33 = ($32|0)==(0);
    if ($33) {
     $34 = ((($1)) + 32|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = HEAP32[$1>>2]|0;
     $37 = $35;
     $38 = $36;
     $39 = (($37) - ($38))|0;
     $40 = HEAP32[$5>>2]|0;
     $41 = (_ft_mem_realloc($3,4,0,$40,0,$error)|0);
     $42 = HEAP32[$error>>2]|0;
     $43 = ($42|0)==(0);
     if ($43) {
      $44 = HEAP32[$5>>2]|0;
      $45 = (_ft_mem_realloc($3,4,0,$44,0,$error)|0);
      $46 = HEAP32[$error>>2]|0;
      $47 = ($46|0)==(0);
      if ($47) {
       $48 = HEAP32[$5>>2]|0;
       $49 = (_ft_mem_realloc($3,4,0,$48,0,$error)|0);
       $50 = HEAP32[$error>>2]|0;
       $51 = ($50|0)==(0);
       if ($51) {
        $52 = (_FT_Stream_GetUShort($1)|0);
        $53 = $52&65535;
        $54 = (_FT_Stream_GetUShort($1)|0);
        $55 = $54&65535;
        $56 = (($55) + ($39))|0;
        $57 = $53 & 32768;
        $58 = ($57|0)==(0);
        if ($58) {
         $offsetToData$0 = $56;$sharedpoints$0 = 0;
        } else {
         $59 = HEAP32[$34>>2]|0;
         $60 = HEAP32[$1>>2]|0;
         $61 = $59;
         $62 = $60;
         $63 = (($61) - ($62))|0;
         $64 = (($60) + ($56)|0);
         HEAP32[$34>>2] = $64;
         $65 = (_ft_var_readpackedpoints($1,$spoint_count)|0);
         $66 = HEAP32[$34>>2]|0;
         $67 = HEAP32[$1>>2]|0;
         $68 = $66;
         $69 = $67;
         $70 = (($68) - ($69))|0;
         $71 = (($67) + ($63)|0);
         HEAP32[$34>>2] = $71;
         $offsetToData$0 = $70;$sharedpoints$0 = $65;
        }
        $72 = $53 & 4095;
        $73 = ($72|0)==(0);
        L22: do {
         if (!($73)) {
          $74 = ((($5)) + 24|0);
          $75 = ((($5)) + 28|0);
          $76 = HEAP32[$spoint_count>>2]|0;
          $77 = ($n_points|0)==(0);
          $i$023 = 0;$localpoints$024 = 0;$offsetToData$125 = $offsetToData$0;
          while(1) {
           $78 = (_FT_Stream_GetUShort($1)|0);
           $79 = $78&65535;
           $80 = (_FT_Stream_GetUShort($1)|0);
           $81 = $80&65535;
           $82 = $81 & 32768;
           $83 = ($82|0)==(0);
           if ($83) {
            $93 = $81 & 4095;
            $94 = HEAP32[$74>>2]|0;
            $95 = ($93>>>0)<($94>>>0);
            if (!($95)) {
             break;
            }
            $96 = HEAP32[$5>>2]|0;
            $97 = Math_imul($96, $93)|0;
            $98 = HEAP32[$75>>2]|0;
            $99 = (($98) + ($97<<2)|0);
            $100 = $96 << 2;
            _memcpy(($41|0),($99|0),($100|0))|0;
           } else {
            $84 = HEAP32[$5>>2]|0;
            $85 = ($84|0)==(0);
            if (!($85)) {
             $j$014 = 0;
             while(1) {
              $86 = (_FT_Stream_GetUShort($1)|0);
              $87 = $86 << 16 >> 16;
              $88 = $87 << 2;
              $89 = (($41) + ($j$014<<2)|0);
              HEAP32[$89>>2] = $88;
              $90 = (($j$014) + 1)|0;
              $91 = HEAP32[$5>>2]|0;
              $92 = ($90>>>0)<($91>>>0);
              if ($92) {
               $j$014 = $90;
              } else {
               break;
              }
             }
            }
           }
           $101 = $81 & 16384;
           $102 = ($101|0)==(0);
           do {
            if (!($102)) {
             $103 = HEAP32[$5>>2]|0;
             $104 = ($103|0)==(0);
             if (!($104)) {
              $j$115 = 0;
              while(1) {
               $106 = (_FT_Stream_GetUShort($1)|0);
               $107 = $106 << 16 >> 16;
               $108 = $107 << 2;
               $109 = (($45) + ($j$115<<2)|0);
               HEAP32[$109>>2] = $108;
               $110 = (($j$115) + 1)|0;
               $111 = HEAP32[$5>>2]|0;
               $112 = ($110>>>0)<($111>>>0);
               if ($112) {
                $j$115 = $110;
               } else {
                $$lcssa = $111;
                break;
               }
              }
              $105 = ($$lcssa|0)==(0);
              if ($105) {
               break;
              } else {
               $j$217 = 0;
              }
              while(1) {
               $113 = (_FT_Stream_GetUShort($1)|0);
               $114 = $113 << 16 >> 16;
               $115 = $114 << 2;
               $116 = (($49) + ($j$217<<2)|0);
               HEAP32[$116>>2] = $115;
               $117 = (($j$217) + 1)|0;
               $118 = HEAP32[$5>>2]|0;
               $119 = ($117>>>0)<($118>>>0);
               if ($119) {
                $j$217 = $117;
               } else {
                break;
               }
              }
             }
            }
           } while(0);
           $120 = (_ft_var_apply_tuple($5,$80,$41,$45,$49)|0);
           $121 = ($120|0)==(0);
           if ($121) {
            $localpoints$3 = $localpoints$024;
           } else {
            $122 = HEAP32[$34>>2]|0;
            $123 = HEAP32[$1>>2]|0;
            $124 = $122;
            $125 = $123;
            $126 = (($124) - ($125))|0;
            $127 = $81 & 8192;
            $128 = ($127|0)==(0);
            if ($128) {
             HEAP32[$point_count>>2] = $76;
             $localpoints$1 = $localpoints$024;$points$0 = $sharedpoints$0;
            } else {
             $129 = (($123) + ($offsetToData$125)|0);
             HEAP32[$34>>2] = $129;
             $130 = (_ft_var_readpackedpoints($1,$point_count)|0);
             $localpoints$1 = $130;$points$0 = $130;
            }
            $131 = HEAP32[$point_count>>2]|0;
            $132 = ($131|0)==(0);
            $133 = $132 ? $n_points : $131;
            $134 = (_ft_var_readpackeddeltas($1,$133)|0);
            $135 = HEAP32[$point_count>>2]|0;
            $136 = ($135|0)==(0);
            $137 = $136 ? $n_points : $135;
            $138 = (_ft_var_readpackeddeltas($1,$137)|0);
            $139 = ($points$0|0)==(0|0);
            $140 = ($138|0)==(0|0);
            $or$cond3 = $139 | $140;
            $141 = ($134|0)==(0|0);
            $or$cond5 = $141 | $or$cond3;
            L47: do {
             if (!($or$cond5)) {
              $142 = ($points$0|0)==((-1)|0);
              if ($142) {
               if ($77) {
                break;
               } else {
                $j$321 = 0;
               }
               while(1) {
                $146 = (($134) + ($j$321<<1)|0);
                $147 = HEAP16[$146>>1]|0;
                $148 = $147 << 16 >> 16;
                $149 = (_FT_MulFix($148,$120)|0);
                $150 = (($10) + ($j$321<<3)|0);
                $151 = HEAP32[$150>>2]|0;
                $152 = (($151) + ($149))|0;
                HEAP32[$150>>2] = $152;
                $153 = (($138) + ($j$321<<1)|0);
                $154 = HEAP16[$153>>1]|0;
                $155 = $154 << 16 >> 16;
                $156 = (_FT_MulFix($155,$120)|0);
                $157 = (((($10) + ($j$321<<3)|0)) + 4|0);
                $158 = HEAP32[$157>>2]|0;
                $159 = (($158) + ($156))|0;
                HEAP32[$157>>2] = $159;
                $160 = (($j$321) + 1)|0;
                $exitcond = ($160|0)==($n_points|0);
                if ($exitcond) {
                 break L47;
                } else {
                 $j$321 = $160;
                }
               }
              }
              $143 = HEAP32[$point_count>>2]|0;
              $144 = ($143|0)==(0);
              if ($144) {
               break;
              }
              $145 = HEAP32[$point_count>>2]|0;
              $j$419 = 0;
              while(1) {
               $161 = (($localpoints$1) + ($j$419<<1)|0);
               $162 = HEAP16[$161>>1]|0;
               $163 = $162&65535;
               $164 = ($163>>>0)<($n_points>>>0);
               if ($164) {
                $165 = (($134) + ($j$419<<1)|0);
                $166 = HEAP16[$165>>1]|0;
                $167 = $166 << 16 >> 16;
                $168 = (_FT_MulFix($167,$120)|0);
                $169 = HEAP16[$161>>1]|0;
                $170 = $169&65535;
                $171 = (($10) + ($170<<3)|0);
                $172 = HEAP32[$171>>2]|0;
                $173 = (($172) + ($168))|0;
                HEAP32[$171>>2] = $173;
                $174 = (($138) + ($j$419<<1)|0);
                $175 = HEAP16[$174>>1]|0;
                $176 = $175 << 16 >> 16;
                $177 = (_FT_MulFix($176,$120)|0);
                $178 = HEAP16[$161>>1]|0;
                $179 = $178&65535;
                $180 = (((($10) + ($179<<3)|0)) + 4|0);
                $181 = HEAP32[$180>>2]|0;
                $182 = (($181) + ($177))|0;
                HEAP32[$180>>2] = $182;
               }
               $183 = (($j$419) + 1)|0;
               $184 = ($183>>>0)<($145>>>0);
               if ($184) {
                $j$419 = $183;
               } else {
                break;
               }
              }
             }
            } while(0);
            $185 = ($localpoints$1|0)==((-1)|0);
            if ($185) {
             $localpoints$2 = (-1);
            } else {
             _ft_mem_free($3,$localpoints$1);
             $localpoints$2 = 0;
            }
            _ft_mem_free($3,$134);
            _ft_mem_free($3,$138);
            $186 = HEAP32[$1>>2]|0;
            $187 = (($186) + ($126)|0);
            HEAP32[$34>>2] = $187;
            $localpoints$3 = $localpoints$2;
           }
           $offsetToData$2 = (($79) + ($offsetToData$125))|0;
           $188 = (($i$023) + 1)|0;
           $189 = ($188>>>0)<($72>>>0);
           if ($189) {
            $i$023 = $188;$localpoints$024 = $localpoints$3;$offsetToData$125 = $offsetToData$2;
           } else {
            break L22;
           }
          }
          HEAP32[$error>>2] = 8;
         }
        } while(0);
        _ft_mem_free($3,$41);
        _ft_mem_free($3,$45);
        _ft_mem_free($3,$49);
       }
      }
     }
     _FT_Stream_ExitFrame($1);
     $$pr = HEAP32[$error>>2]|0;
     $190 = ($$pr|0)==(0);
     if ($190) {
      break;
     }
    }
   }
   _ft_mem_free($3,$10);
   HEAP32[$deltas>>2] = 0;
  }
 } while(0);
 $191 = HEAP32[$error>>2]|0;
 $$0 = $191;
 STACKTOP = sp;return ($$0|0);
}
function _tt_done_blend($memory,$blend) {
 $memory = $memory|0;
 $blend = $blend|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($blend|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($blend)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _ft_mem_free($memory,$2);
 HEAP32[$1>>2] = 0;
 $3 = ((($blend)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 _ft_mem_free($memory,$4);
 HEAP32[$3>>2] = 0;
 $5 = ((($blend)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = HEAP32[$blend>>2]|0;
  $9 = ($8|0)==(0);
  if (!($9)) {
   $i$01 = 0;
   while(1) {
    $10 = HEAP32[$5>>2]|0;
    $11 = (((($10) + ($i$01<<3)|0)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    _ft_mem_free($memory,$12);
    $13 = HEAP32[$5>>2]|0;
    $14 = (((($13) + ($i$01<<3)|0)) + 4|0);
    HEAP32[$14>>2] = 0;
    $15 = (($i$01) + 1)|0;
    $16 = HEAP32[$blend>>2]|0;
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $i$01 = $15;
    } else {
     break;
    }
   }
  }
  $18 = HEAP32[$5>>2]|0;
  _ft_mem_free($memory,$18);
  HEAP32[$5>>2] = 0;
 }
 $19 = ((($blend)) + 28|0);
 $20 = HEAP32[$19>>2]|0;
 _ft_mem_free($memory,$20);
 HEAP32[$19>>2] = 0;
 $21 = ((($blend)) + 36|0);
 $22 = HEAP32[$21>>2]|0;
 _ft_mem_free($memory,$22);
 HEAP32[$21>>2] = 0;
 _ft_mem_free($memory,$blend);
 return;
}
function _ft_var_load_gvar($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $gvar_head = 0, $i$09 = 0, $i$18 = 0, $i$25 = 0, $j$04 = 0, $table_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $error = sp + 24|0;
 $table_len = sp + 20|0;
 $gvar_head = sp;
 $0 = ((($face)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 712|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($face)) + 508|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiiii[$7 & 63]($face,1735811442,$1,$table_len)|0);
 HEAP32[$error>>2] = $8;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $107 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($107|0);
 }
 $10 = (_FT_Stream_Pos($1)|0);
 $11 = (_FT_Stream_ReadFields($1,23914,$gvar_head)|0);
 HEAP32[$error>>2] = $11;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $107 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($107|0);
 }
 $13 = ((($gvar_head)) + 6|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = ((($5)) + 24|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($gvar_head)) + 12|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = ((($5)) + 32|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($gvar_head)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + ($10))|0;
 $24 = HEAP32[$gvar_head>>2]|0;
 $25 = ($24|0)==(65536);
 if ($25) {
  $26 = ((($gvar_head)) + 4|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = ((($5)) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = $30&65535;
  $32 = ($27<<16>>16)==($31<<16>>16);
  if ($32) {
   $33 = (($19) + 1)|0;
   $34 = (_ft_mem_realloc($3,4,0,$33,0,$error)|0);
   $35 = ((($5)) + 36|0);
   HEAP32[$35>>2] = $34;
   $36 = HEAP32[$error>>2]|0;
   $37 = ($36|0)==(0);
   if (!($37)) {
    $107 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($107|0);
   }
   $38 = ((($gvar_head)) + 14|0);
   $39 = HEAP16[$38>>1]|0;
   $40 = $39 & 1;
   $41 = ($40<<16>>16)==(0);
   $42 = HEAP32[$20>>2]|0;
   $43 = (($42) + 1)|0;
   if ($41) {
    $54 = $43 << 1;
    $55 = (_FT_Stream_EnterFrame($1,$54)|0);
    HEAP32[$error>>2] = $55;
    $56 = ($55|0)==(0);
    if ($56) {
     $i$18 = 0;
    } else {
     $107 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($107|0);
    }
    while(1) {
     $57 = (_FT_Stream_GetUShort($1)|0);
     $58 = $57&65535;
     $59 = $58 << 1;
     $60 = (($59) + ($23))|0;
     $61 = HEAP32[$35>>2]|0;
     $62 = (($61) + ($i$18<<2)|0);
     HEAP32[$62>>2] = $60;
     $63 = (($i$18) + 1)|0;
     $64 = HEAP32[$20>>2]|0;
     $65 = ($63>>>0)>($64>>>0);
     if ($65) {
      break;
     } else {
      $i$18 = $63;
     }
    }
    _FT_Stream_ExitFrame($1);
   } else {
    $44 = $43 << 2;
    $45 = (_FT_Stream_EnterFrame($1,$44)|0);
    HEAP32[$error>>2] = $45;
    $46 = ($45|0)==(0);
    if ($46) {
     $i$09 = 0;
    } else {
     $107 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($107|0);
    }
    while(1) {
     $47 = (_FT_Stream_GetULong($1)|0);
     $48 = (($47) + ($23))|0;
     $49 = HEAP32[$35>>2]|0;
     $50 = (($49) + ($i$09<<2)|0);
     HEAP32[$50>>2] = $48;
     $51 = (($i$09) + 1)|0;
     $52 = HEAP32[$20>>2]|0;
     $53 = ($51>>>0)>($52>>>0);
     if ($53) {
      break;
     } else {
      $i$09 = $51;
     }
    }
    _FT_Stream_ExitFrame($1);
   }
   $66 = HEAP32[$16>>2]|0;
   $67 = ($66|0)==(0);
   if ($67) {
    $107 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($107|0);
   }
   $68 = HEAP16[$26>>1]|0;
   $69 = $68&65535;
   $70 = Math_imul($69, $66)|0;
   $71 = (_ft_mem_realloc($3,4,0,$70,0,$error)|0);
   $72 = ((($5)) + 28|0);
   HEAP32[$72>>2] = $71;
   $73 = HEAP32[$error>>2]|0;
   $74 = ($73|0)==(0);
   if (!($74)) {
    $107 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($107|0);
   }
   $75 = ((($gvar_head)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + ($10))|0;
   $78 = (_FT_Stream_Seek($1,$77)|0);
   HEAP32[$error>>2] = $78;
   $79 = ($78|0)==(0);
   if (!($79)) {
    $107 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($107|0);
   }
   $80 = HEAP32[$16>>2]|0;
   $81 = HEAP16[$26>>1]|0;
   $82 = $81&65535;
   $83 = $80 << 1;
   $84 = Math_imul($83, $82)|0;
   $85 = (_FT_Stream_EnterFrame($1,$84)|0);
   HEAP32[$error>>2] = $85;
   $86 = ($85|0)==(0);
   if (!($86)) {
    $107 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($107|0);
   }
   $87 = HEAP32[$16>>2]|0;
   $88 = ($87|0)==(0);
   if (!($88)) {
    $i$25 = 0;
    while(1) {
     $89 = HEAP16[$26>>1]|0;
     $90 = ($89<<16>>16)==(0);
     if (!($90)) {
      $j$04 = 0;
      while(1) {
       $91 = (_FT_Stream_GetUShort($1)|0);
       $92 = $91 << 16 >> 16;
       $93 = $92 << 2;
       $94 = HEAP16[$26>>1]|0;
       $95 = $94&65535;
       $96 = Math_imul($95, $i$25)|0;
       $97 = (($96) + ($j$04))|0;
       $98 = HEAP32[$72>>2]|0;
       $99 = (($98) + ($97<<2)|0);
       HEAP32[$99>>2] = $93;
       $100 = (($j$04) + 1)|0;
       $101 = HEAP16[$26>>1]|0;
       $102 = $101&65535;
       $103 = ($100>>>0)<($102>>>0);
       if ($103) {
        $j$04 = $100;
       } else {
        break;
       }
      }
     }
     $104 = (($i$25) + 1)|0;
     $105 = HEAP32[$16>>2]|0;
     $106 = ($104>>>0)<($105>>>0);
     if ($106) {
      $i$25 = $104;
     } else {
      break;
     }
    }
   }
   _FT_Stream_ExitFrame($1);
   $107 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($107|0);
  }
 }
 HEAP32[$error>>2] = 8;
 $107 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($107|0);
}
function _ft_var_apply_tuple($blend,$tupleIndex,$tuple_coords,$im_start_coords,$im_end_coords) {
 $blend = $blend|0;
 $tupleIndex = $tupleIndex|0;
 $tuple_coords = $tuple_coords|0;
 $im_start_coords = $im_start_coords|0;
 $im_end_coords = $im_end_coords|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $apply$03 = 0, $apply$1 = 0, $apply$2 = 0, $i$02 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($blend)) + 4|0);
 $1 = HEAP32[$blend>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $apply$2 = 65536;
  return ($apply$2|0);
 }
 $3 = $tupleIndex & 16384;
 $4 = ($3<<16>>16)==(0);
 $apply$03 = 65536;$i$02 = 0;
 L4: while(1) {
  $5 = (($tuple_coords) + ($i$02<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  do {
   if ($7) {
    $apply$1 = $apply$03;
   } else {
    $8 = HEAP32[$0>>2]|0;
    $9 = (($8) + ($i$02<<2)|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0);
    if ($11) {
     $apply$2 = 0;
     label = 15;
     break L4;
    }
    $12 = ($10|0)<(0);
    $13 = ($6|0)>(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $apply$2 = 0;
     label = 15;
     break L4;
    }
    $14 = ($10|0)>(0);
    $15 = ($6|0)<(0);
    $or$cond1 = $15 & $14;
    if ($or$cond1) {
     $apply$2 = 0;
     label = 15;
     break L4;
    }
    $16 = HEAP32[$0>>2]|0;
    $17 = (($16) + ($i$02<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    if ($4) {
     $19 = ($18|0)>(0);
     $20 = (0 - ($18))|0;
     $21 = $19 ? $18 : $20;
     $22 = (_FT_MulDiv($apply$03,$21,65536)|0);
     $apply$1 = $22;
     break;
    }
    $23 = (($im_start_coords) + ($i$02<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($18|0)>($24|0);
    if (!($25)) {
     $apply$2 = 0;
     label = 15;
     break L4;
    }
    $26 = (($im_end_coords) + ($i$02<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)>($18|0);
    if (!($28)) {
     $apply$2 = 0;
     label = 15;
     break L4;
    }
    $29 = HEAP32[$5>>2]|0;
    $30 = ($18|0)<($29|0);
    if ($30) {
     $31 = (($18) - ($24))|0;
     $32 = (($29) - ($24))|0;
     $33 = (_FT_MulDiv($31,65536,$32)|0);
     $34 = (_FT_MulDiv($apply$03,$33,65536)|0);
     $apply$1 = $34;
     break;
    } else {
     $35 = (($27) - ($18))|0;
     $36 = (($27) - ($29))|0;
     $37 = (_FT_MulDiv($35,65536,$36)|0);
     $38 = (_FT_MulDiv($apply$03,$37,65536)|0);
     $apply$1 = $38;
     break;
    }
   }
  } while(0);
  $39 = (($i$02) + 1)|0;
  $40 = HEAP32[$blend>>2]|0;
  $41 = ($39>>>0)<($40>>>0);
  if ($41) {
   $apply$03 = $apply$1;$i$02 = $39;
  } else {
   $apply$2 = $apply$1;
   label = 15;
   break;
  }
 }
 if ((label|0) == 15) {
  return ($apply$2|0);
 }
 return (0)|0;
}
function _ft_var_readpackedpoints($stream,$point_cnt) {
 $stream = $stream|0;
 $point_cnt = $point_cnt|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $error = 0, $exitcond = 0, $exitcond21 = 0, $first$010 = 0, $first$113 = 0, $i$0$be = 0, $i$016 = 0, $i$18 = 0, $i$211 = 0, $j$09 = 0, $j$112 = 0, $n$0 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = (_FT_Stream_GetChar($stream)|0);
 $3 = $2&255;
 HEAP32[$point_cnt>>2] = $3;
 $4 = ($2<<24>>24)==(0);
 if ($4) {
  $$0 = (-1);
  STACKTOP = sp;return ($$0|0);
 }
 $5 = $3 & 128;
 $6 = ($5|0)==(0);
 if ($6) {
  $n$0 = $3;
 } else {
  $7 = (_FT_Stream_GetChar($stream)|0);
  $8 = $7&255;
  $9 = $3 << 8;
  $10 = $9 & 32512;
  $11 = $8 | $10;
  $n$0 = $11;
 }
 $12 = (_ft_mem_realloc($1,2,0,$n$0,0,$error)|0);
 $13 = HEAP32[$error>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ($n$0|0)>(0);
 if ($15) {
  $i$016 = 0;
 } else {
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $23 = (_FT_Stream_GetChar($stream)|0);
  $24 = $23&255;
  $25 = $24 & 128;
  $26 = ($25|0)==(0);
  if ($26) {
   $44 = (_FT_Stream_GetChar($stream)|0);
   $45 = $44&255;
   $46 = (($i$016) + 1)|0;
   $47 = (($12) + ($i$016<<1)|0);
   HEAP16[$47>>1] = $45;
   $48 = $44&255;
   $49 = ($23<<24>>24)!=(0);
   $50 = (($24) + ($46))|0;
   $51 = ($50|0)<($n$0|0);
   $or$cond3 = $49 & $51;
   if (!($or$cond3)) {
    $$0 = $12;
    label = 18;
    break;
   }
   $52 = ($23<<24>>24)==(0);
   if ($52) {
    $i$0$be = $46;
   } else {
    $18 = $23&255;
    $first$113 = $48;$i$211 = $46;$j$112 = 0;
    while(1) {
     $53 = (_FT_Stream_GetChar($stream)|0);
     $54 = $53&255;
     $55 = (($54) + ($first$113))|0;
     $56 = $55&65535;
     $57 = (($i$211) + 1)|0;
     $58 = (($12) + ($i$211<<1)|0);
     HEAP16[$58>>1] = $56;
     $59 = (($j$112) + 1)|0;
     $exitcond21 = ($59|0)==($18|0);
     if ($exitcond21) {
      break;
     } else {
      $first$113 = $55;$i$211 = $57;$j$112 = $59;
     }
    }
    $16 = (($i$016) + 1)|0;
    $17 = (($16) + ($18))|0;
    $i$0$be = $17;
   }
  } else {
   $27 = $24 & 127;
   $28 = (_FT_Stream_GetUShort($stream)|0);
   $29 = (($i$016) + 1)|0;
   $30 = (($12) + ($i$016<<1)|0);
   HEAP16[$30>>1] = $28;
   $31 = $28&65535;
   $32 = ($27|0)!=(0);
   $33 = (($27) + ($29))|0;
   $34 = ($33|0)<($n$0|0);
   $or$cond = $32 & $34;
   if (!($or$cond)) {
    $$0 = $12;
    label = 18;
    break;
   }
   $35 = ($27|0)==(0);
   if ($35) {
    $i$0$be = $29;
   } else {
    $36 = $23&255;
    $22 = $36 & 127;
    $first$010 = $31;$i$18 = $29;$j$09 = 0;
    while(1) {
     $37 = (_FT_Stream_GetUShort($stream)|0);
     $38 = $37&65535;
     $39 = (($38) + ($first$010))|0;
     $40 = $39&65535;
     $41 = (($i$18) + 1)|0;
     $42 = (($12) + ($i$18<<1)|0);
     HEAP16[$42>>1] = $40;
     $43 = (($j$09) + 1)|0;
     $exitcond = ($43|0)==($22|0);
     if ($exitcond) {
      break;
     } else {
      $first$010 = $39;$i$18 = $41;$j$09 = $43;
     }
    }
    $20 = (($i$016) + 1)|0;
    $21 = (($20) + ($22))|0;
    $i$0$be = $21;
   }
  }
  $19 = ($i$0$be|0)<($n$0|0);
  if ($19) {
   $i$016 = $i$0$be;
  } else {
   $$0 = $12;
   label = 18;
   break;
  }
 }
 if ((label|0) == 18) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _ft_var_readpackeddeltas($stream,$delta_cnt) {
 $stream = $stream|0;
 $delta_cnt = $delta_cnt|0;
 var $$0 = 0, $$not = 0, $$not35 = 0, $$not36 = 0, $$not37 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $exitcond = 0, $exitcond34 = 0, $i$0 = 0, $i$215 = 0, $i$321 = 0, $i$4 = 0, $j$116 = 0, $j$222 = 0;
 var $j$3 = 0, $scevgep = 0, $umax = 0, $umax31 = 0, $umax32 = 0, $umax33 = 0, $umax33$pn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = (_ft_mem_realloc($1,2,0,$delta_cnt,0,$error)|0);
 $3 = HEAP32[$error>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $i$0 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $5 = ($i$0>>>0)<($delta_cnt>>>0);
  if (!($5)) {
   $$0 = $2;
   label = 15;
   break;
  }
  $6 = (_FT_Stream_GetChar($stream)|0);
  $7 = $6&255;
  $8 = $7 & 128;
  $9 = ($8|0)==(0);
  if ($9) {
   $11 = $7 & 64;
   $12 = ($11|0)==(0);
   $13 = ($i$0>>>0)<($delta_cnt>>>0);
   if ($12) {
    if (!($13)) {
     break;
    }
    $19 = (($i$0) - ($delta_cnt))|0;
    $20 = $6&255;
    $$not37 = $20 | -64;
    $21 = $$not37 ^ 63;
    $22 = ($19>>>0)>($21>>>0);
    $umax33 = $22 ? $19 : $21;
    $23 = (0 - ($umax33))|0;
    $i$321 = $i$0;$j$222 = 0;
    while(1) {
     $28 = (_FT_Stream_GetChar($stream)|0);
     $29 = $28 << 24 >> 24;
     $30 = (($i$321) + 1)|0;
     $31 = (($2) + ($i$321<<1)|0);
     HEAP16[$31>>1] = $29;
     $32 = (($j$222) + 1)|0;
     $exitcond34 = ($32|0)==($23|0);
     if ($exitcond34) {
      $j$3 = $23;$umax33$pn = $umax33;
      break;
     } else {
      $i$321 = $30;$j$222 = $32;
     }
    }
   } else {
    if (!($13)) {
     break;
    }
    $14 = (($i$0) - ($delta_cnt))|0;
    $15 = $6&255;
    $$not36 = $15 | -64;
    $16 = $$not36 ^ 63;
    $17 = ($14>>>0)>($16>>>0);
    $umax32 = $17 ? $14 : $16;
    $18 = (0 - ($umax32))|0;
    $i$215 = $i$0;$j$116 = 0;
    while(1) {
     $24 = (_FT_Stream_GetUShort($stream)|0);
     $25 = (($i$215) + 1)|0;
     $26 = (($2) + ($i$215<<1)|0);
     HEAP16[$26>>1] = $24;
     $27 = (($j$116) + 1)|0;
     $exitcond = ($27|0)==($18|0);
     if ($exitcond) {
      $j$3 = $18;$umax33$pn = $umax32;
      break;
     } else {
      $i$215 = $25;$j$116 = $27;
     }
    }
   }
  } else {
   $10 = ($i$0>>>0)<($delta_cnt>>>0);
   if (!($10)) {
    break;
   }
   $33 = (($i$0) - ($delta_cnt))|0;
   $34 = $6&255;
   $$not = $34 | -64;
   $35 = $$not ^ 63;
   $36 = ($33>>>0)>($35>>>0);
   $umax = $36 ? $33 : $35;
   $37 = $i$0 << 1;
   $scevgep = (($2) + ($37)|0);
   $38 = (($i$0) - ($delta_cnt))|0;
   $39 = $6&255;
   $$not35 = $39 | -64;
   $40 = $$not35 ^ 63;
   $41 = ($38>>>0)>($40>>>0);
   $umax31 = $41 ? $38 : $40;
   $42 = Math_imul($umax31, -2)|0;
   _memset(($scevgep|0),0,($42|0))|0;
   $43 = (0 - ($umax))|0;
   $j$3 = $43;$umax33$pn = $umax;
  }
  $i$4 = (($i$0) - ($umax33$pn))|0;
  $44 = $7 & 63;
  $45 = ($j$3>>>0)>($44>>>0);
  if ($45) {
   $i$0 = $i$4;
  } else {
   break;
  }
 }
 if ((label|0) == 15) {
  STACKTOP = sp;return ($$0|0);
 }
 _ft_mem_free($1,$2);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ft_var_load_avar($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0;
 var $i$09 = 0, $i$09$lcssa = 0, $j$04 = 0, $j$04$in = 0, $j$15 = 0, $or$cond = 0, $segment$08 = 0, $table_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 4|0;
 $table_len = sp;
 $0 = ((($face)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 712|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 HEAP8[$6>>0] = 1;
 $7 = ((($face)) + 508|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiiii[$8 & 63]($face,1635148146,$1,$table_len)|0);
 HEAP32[$error>>2] = $9;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$table_len>>2]|0;
 $12 = (_FT_Stream_EnterFrame($1,$11)|0);
 HEAP32[$error>>2] = $12;
 $13 = ($12|0)==(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = (_FT_Stream_GetULong($1)|0);
 $15 = (_FT_Stream_GetULong($1)|0);
 $16 = ($14|0)==(65536);
 L7: do {
  if ($16) {
   $17 = ((($5)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($15|0)==($19|0);
   if ($20) {
    $21 = (_ft_mem_realloc($3,8,0,$15,0,$error)|0);
    $22 = ((($5)) + 20|0);
    HEAP32[$22>>2] = $21;
    $23 = HEAP32[$error>>2]|0;
    $24 = ($23|0)==(0);
    $25 = ($15|0)>(0);
    $or$cond = $24 & $25;
    if ($or$cond) {
     $i$09 = 0;$segment$08 = $21;
     while(1) {
      $26 = (_FT_Stream_GetUShort($1)|0);
      HEAP16[$segment$08>>1] = $26;
      $27 = $26&65535;
      $28 = (_ft_mem_realloc($3,8,0,$27,0,$error)|0);
      $29 = ((($segment$08)) + 4|0);
      HEAP32[$29>>2] = $28;
      $30 = HEAP32[$error>>2]|0;
      $31 = ($30|0)==(0);
      if (!($31)) {
       $i$09$lcssa = $i$09;
       break;
      }
      $32 = HEAP16[$segment$08>>1]|0;
      $33 = ($32<<16>>16)==(0);
      if (!($33)) {
       $j$15 = 0;
       while(1) {
        $42 = (_FT_Stream_GetUShort($1)|0);
        $43 = $42 << 16 >> 16;
        $44 = $43 << 2;
        $45 = HEAP32[$29>>2]|0;
        $46 = (($45) + ($j$15<<3)|0);
        HEAP32[$46>>2] = $44;
        $47 = (_FT_Stream_GetUShort($1)|0);
        $48 = $47 << 16 >> 16;
        $49 = $48 << 2;
        $50 = HEAP32[$29>>2]|0;
        $51 = (((($50) + ($j$15<<3)|0)) + 4|0);
        HEAP32[$51>>2] = $49;
        $52 = (($j$15) + 1)|0;
        $53 = HEAP16[$segment$08>>1]|0;
        $54 = $53&65535;
        $55 = ($52|0)<($54|0);
        if ($55) {
         $j$15 = $52;
        } else {
         break;
        }
       }
      }
      $56 = (($i$09) + 1)|0;
      $57 = ((($segment$08)) + 8|0);
      $58 = ($56|0)<($15|0);
      if ($58) {
       $i$09 = $56;$segment$08 = $57;
      } else {
       break L7;
      }
     }
     $34 = ($i$09$lcssa|0)>(0);
     if ($34) {
      $j$04$in = $i$09$lcssa;
      while(1) {
       $j$04 = (($j$04$in) + -1)|0;
       $35 = HEAP32[$22>>2]|0;
       $36 = (((($35) + ($j$04<<3)|0)) + 4|0);
       $37 = HEAP32[$36>>2]|0;
       _ft_mem_free($3,$37);
       $38 = HEAP32[$22>>2]|0;
       $39 = (((($38) + ($j$04<<3)|0)) + 4|0);
       HEAP32[$39>>2] = 0;
       $40 = ($j$04$in|0)>(1);
       if ($40) {
        $j$04$in = $j$04;
       } else {
        break;
       }
      }
     }
     $41 = HEAP32[$22>>2]|0;
     _ft_mem_free($3,$41);
     HEAP32[$22>>2] = 0;
    }
   }
  }
 } while(0);
 _FT_Stream_ExitFrame($1);
 STACKTOP = sp;return;
}
function _T1_Parse_Glyph_And_Get_Char_String($decoder,$glyph_index,$char_string) {
 $decoder = $decoder|0;
 $glyph_index = $glyph_index|0;
 $char_string = $char_string|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $error$2 = 0, $metrics = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $metrics = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 128|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 52|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($decoder)) + 1376|0);
 $7 = ((($1)) + 436|0);
 ;HEAP32[$6>>2]=HEAP32[$7>>2]|0;HEAP32[$6+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$7+12>>2]|0;
 $8 = ((($decoder)) + 1392|0);
 $9 = ((($1)) + 452|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $8;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $20 = ($5|0)!=(0|0);
 if ($20) {
  $30 = HEAP32[$5>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($5)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (FUNCTION_TABLE_iiii[$31 & 127]($33,$glyph_index,$char_string)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $error$2 = $34;
   STACKTOP = sp;return ($error$2|0);
  }
 } else {
  $21 = ((($1)) + 424|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($glyph_index<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$char_string>>2] = $24;
  $25 = ((($1)) + 428|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($glyph_index<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($char_string)) + 4|0);
  HEAP32[$29>>2] = $28;
 }
 $36 = ((($decoder)) + 1484|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$char_string>>2]|0;
 $39 = ((($char_string)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (FUNCTION_TABLE_iiii[$37 & 127]($decoder,$38,$40)|0);
 $42 = ($41|0)==(0);
 $or$cond = $20 & $42;
 if (!($or$cond)) {
  $error$2 = $41;
  STACKTOP = sp;return ($error$2|0);
 }
 $43 = HEAP32[$5>>2]|0;
 $44 = ((($43)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  $error$2 = $41;
  STACKTOP = sp;return ($error$2|0);
 }
 $47 = ((($decoder)) + 32|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (_FT_RoundFix($48)|0);
 $50 = $49 >> 16;
 HEAP32[$metrics>>2] = $50;
 $51 = ((($metrics)) + 4|0);
 HEAP32[$51>>2] = 0;
 $52 = ((($decoder)) + 40|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (_FT_RoundFix($53)|0);
 $55 = $54 >> 16;
 $56 = ((($metrics)) + 8|0);
 HEAP32[$56>>2] = $55;
 $57 = ((($decoder)) + 44|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (_FT_RoundFix($58)|0);
 $60 = $59 >> 16;
 $61 = ((($metrics)) + 12|0);
 HEAP32[$61>>2] = $60;
 $62 = HEAP32[$5>>2]|0;
 $63 = ((($62)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ((($5)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (FUNCTION_TABLE_iiiii[$64 & 63]($66,$glyph_index,0,$metrics)|0);
 $68 = HEAP32[$metrics>>2]|0;
 $69 = $68 << 16;
 HEAP32[$47>>2] = $69;
 $70 = HEAP32[$56>>2]|0;
 $71 = $70 << 16;
 HEAP32[$52>>2] = $71;
 $72 = HEAP32[$61>>2]|0;
 $73 = $72 << 16;
 HEAP32[$57>>2] = $73;
 $error$2 = $67;
 STACKTOP = sp;return ($error$2|0);
}
function _T1_Compute_Max_Advance($face,$max_advance) {
 $face = $face|0;
 $max_advance = $max_advance|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $decoder = 0, $glyph_index$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1504|0;
 $decoder = sp;
 $0 = ((($face)) + 488|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$max_advance>>2] = 0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($face)) + 420|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($face)) + 532|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_iiiiiiiiii[$4 & 1]($decoder,$face,0,0,$6,$8,0,0,159)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($decoder)) + 70|0);
 HEAP8[$11>>0] = 1;
 $12 = ((($decoder)) + 68|0);
 HEAP8[$12>>0] = 0;
 $13 = ((($face)) + 404|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($decoder)) + 1364|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($face)) + 408|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($decoder)) + 1368|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($face)) + 412|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($decoder)) + 1372|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($face)) + 548|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($decoder)) + 1488|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($face)) + 544|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($decoder)) + 1492|0);
 HEAP32[$27>>2] = $26;
 HEAP32[$max_advance>>2] = 0;
 $28 = ((($face)) + 416|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)>(0);
 if ($30) {
  $31 = ((($decoder)) + 40|0);
  $32 = ((($decoder)) + 40|0);
  $glyph_index$01 = 0;
  while(1) {
   (_T1_Parse_Glyph($decoder,$glyph_index$01)|0);
   $33 = ($glyph_index$01|0)==(0);
   if ($33) {
    label = 6;
   } else {
    $34 = HEAP32[$32>>2]|0;
    $35 = HEAP32[$max_advance>>2]|0;
    $36 = ($34|0)>($35|0);
    if ($36) {
     label = 6;
    }
   }
   if ((label|0) == 6) {
    label = 0;
    $37 = HEAP32[$31>>2]|0;
    HEAP32[$max_advance>>2] = $37;
   }
   $38 = (($glyph_index$01) + 1)|0;
   $39 = HEAP32[$28>>2]|0;
   $40 = ($38|0)<($39|0);
   if ($40) {
    $glyph_index$01 = $38;
   } else {
    break;
   }
  }
 }
 $41 = HEAP32[$2>>2]|0;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 FUNCTION_TABLE_vi[$43 & 127]($decoder);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _T1_Get_Advances($t1face,$first,$count,$load_flags,$advances) {
 $t1face = $t1face|0;
 $first = $first|0;
 $count = $count|0;
 $load_flags = $load_flags|0;
 $advances = $advances|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $decoder = 0, $exitcond = 0, $nn$12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1504|0;
 $decoder = sp;
 $0 = $load_flags & 16;
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = ($count|0)==(0);
  if ($2) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $42 = $count << 2;
  _memset(($advances|0),0,($42|0))|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($t1face)) + 488|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($t1face)) + 420|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($t1face)) + 532|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiiiiiiiii[$7 & 1]($decoder,$t1face,0,0,$9,$11,0,0,159)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ((($decoder)) + 70|0);
 HEAP8[$14>>0] = 1;
 $15 = ((($decoder)) + 68|0);
 HEAP8[$15>>0] = 0;
 $16 = ((($t1face)) + 404|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($decoder)) + 1364|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($t1face)) + 408|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($decoder)) + 1368|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($t1face)) + 412|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($decoder)) + 1372|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($t1face)) + 548|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($decoder)) + 1488|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($t1face)) + 544|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($decoder)) + 1492|0);
 HEAP32[$30>>2] = $29;
 $31 = ($count|0)==(0);
 if ($31) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = ((($decoder)) + 40|0);
 $nn$12 = 0;
 while(1) {
  $33 = (($nn$12) + ($first))|0;
  $34 = (_T1_Parse_Glyph($decoder,$33)|0);
  $35 = ($34|0)==(0);
  if ($35) {
   $36 = HEAP32[$32>>2]|0;
   $37 = (_FT_RoundFix($36)|0);
   $38 = $37 >> 16;
   $39 = (($advances) + ($nn$12<<2)|0);
   HEAP32[$39>>2] = $38;
  } else {
   $40 = (($advances) + ($nn$12<<2)|0);
   HEAP32[$40>>2] = 0;
  }
  $41 = (($nn$12) + 1)|0;
  $exitcond = ($41|0)==($count|0);
  if ($exitcond) {
   $$0 = 0;
   break;
  } else {
   $nn$12 = $41;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _T1_Load_Glyph($t1glyph,$t1size,$glyph_index,$load_flags) {
 $t1glyph = $t1glyph|0;
 $t1size = $t1size|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 var $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $advance = 0, $cbox = 0, $decoder = 0, $error$025 = 0, $font_matrix = 0, $glyph_data = 0, $load_flags$ = 0, $n$08 = 0;
 var $vec$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1552|0;
 $decoder = sp + 48|0;
 $font_matrix = sp + 32|0;
 $glyph_data = sp + 24|0;
 $cbox = sp + 8|0;
 $advance = sp;
 $0 = ((($t1glyph)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 488|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>($glyph_index>>>0);
 if (!($8)) {
  $9 = ((($1)) + 128|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $error$025 = 6;
   STACKTOP = sp;return ($error$025|0);
  }
 }
 $14 = $load_flags & 1024;
 $15 = ($14|0)==(0);
 $16 = $load_flags | 3;
 $load_flags$ = $15 ? $load_flags : $16;
 $17 = ($t1size|0)!=(0|0);
 if ($17) {
  $18 = ((($t1size)) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($t1glyph)) + 172|0);
  HEAP32[$20>>2] = $19;
  $21 = ((($t1size)) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($t1glyph)) + 176|0);
  HEAP32[$23>>2] = $22;
 } else {
  $24 = ((($t1glyph)) + 172|0);
  HEAP32[$24>>2] = 65536;
  $25 = ((($t1glyph)) + 176|0);
  HEAP32[$25>>2] = 65536;
 }
 $26 = ((($t1glyph)) + 108|0);
 $27 = ((($t1glyph)) + 110|0);
 HEAP16[$27>>1] = 0;
 HEAP16[$26>>1] = 0;
 $28 = $load_flags$ & 1;
 $29 = ($28|0)==(0);
 $30 = $load_flags$ & 3;
 $31 = ($30|0)==(0);
 $32 = $31&1;
 $33 = ((($t1glyph)) + 72|0);
 HEAP32[$33>>2] = 1869968492;
 $34 = HEAP32[$5>>2]|0;
 $35 = HEAP32[$0>>2]|0;
 $36 = ((($1)) + 420|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($1)) + 532|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $load_flags$ >>> 16;
 $41 = $40 & 15;
 $42 = (FUNCTION_TABLE_iiiiiiiiii[$34 & 1]($decoder,$35,$t1size,$t1glyph,$37,$39,$32,$41,159)|0);
 $43 = ($42|0)==(0);
 if (!($43)) {
  $error$025 = $42;
  STACKTOP = sp;return ($error$025|0);
 }
 $44 = $load_flags$ & 1024;
 $$lobit = $44 >>> 10;
 $45 = $$lobit&255;
 $46 = ((($decoder)) + 69|0);
 HEAP8[$46>>0] = $45;
 $47 = ((($1)) + 404|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = ((($decoder)) + 1364|0);
 HEAP32[$49>>2] = $48;
 $50 = ((($1)) + 408|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($decoder)) + 1368|0);
 HEAP32[$52>>2] = $51;
 $53 = ((($1)) + 412|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ((($decoder)) + 1372|0);
 HEAP32[$55>>2] = $54;
 $56 = ((($1)) + 548|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($decoder)) + 1488|0);
 HEAP32[$58>>2] = $57;
 $59 = ((($1)) + 544|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ((($decoder)) + 1492|0);
 HEAP32[$61>>2] = $60;
 $62 = (_T1_Parse_Glyph_And_Get_Char_String($decoder,$glyph_index,$glyph_data)|0);
 $63 = ($62|0)==(0);
 if (!($63)) {
  $209 = ((($5)) + 4|0);
  $210 = HEAP32[$209>>2]|0;
  FUNCTION_TABLE_vi[$210 & 127]($decoder);
  $error$025 = $62;
  STACKTOP = sp;return ($error$025|0);
 }
 $64 = ($44|0)==(0);
 $65 = ((($decoder)) + 1376|0);
 ;HEAP32[$font_matrix>>2]=HEAP32[$65>>2]|0;HEAP32[$font_matrix+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$font_matrix+8>>2]=HEAP32[$65+8>>2]|0;HEAP32[$font_matrix+12>>2]=HEAP32[$65+12>>2]|0;
 $66 = ((($decoder)) + 1392|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ((($decoder)) + 1396|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ((($5)) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 FUNCTION_TABLE_vi[$71 & 127]($decoder);
 $72 = ((($t1glyph)) + 124|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $73 & 1;
 $75 = $74 | 4;
 HEAP32[$72>>2] = $75;
 if ($64) {
  $92 = ((($t1glyph)) + 24|0);
  $93 = ((($decoder)) + 40|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (_FT_RoundFix($94)|0);
  $96 = $95 >> 16;
  $97 = ((($t1glyph)) + 40|0);
  HEAP32[$97>>2] = $96;
  $98 = HEAP32[$93>>2]|0;
  $99 = (_FT_RoundFix($98)|0);
  $100 = $99 >> 16;
  $101 = ((($t1glyph)) + 56|0);
  HEAP32[$101>>2] = $100;
  $102 = ((($t1glyph)) + 156|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ((($103)) + 8|0);
  HEAP8[$104>>0] = 0;
  $105 = $load_flags$ & 16;
  $106 = ($105|0)!=(0);
  if ($106) {
   $107 = ((($1)) + 472|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = ((($1)) + 464|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (($108) - ($110))|0;
   $112 = $111 >> 16;
   $113 = ((($t1glyph)) + 52|0);
   HEAP32[$113>>2] = $112;
   $114 = ((($t1glyph)) + 60|0);
   HEAP32[$114>>2] = $112;
  } else {
   $115 = ((($decoder)) + 44|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (_FT_RoundFix($116)|0);
   $118 = $117 >> 16;
   $119 = ((($t1glyph)) + 52|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[$115>>2]|0;
   $121 = (_FT_RoundFix($120)|0);
   $122 = $121 >> 16;
   $123 = ((($t1glyph)) + 60|0);
   HEAP32[$123>>2] = $122;
  }
  HEAP32[$33>>2] = 1869968492;
  if ($17) {
   $124 = ((($t1size)) + 14|0);
   $125 = HEAP16[$124>>1]|0;
   $126 = ($125&65535)<(24);
   if ($126) {
    $127 = HEAP32[$72>>2]|0;
    $128 = $127 | 256;
    HEAP32[$72>>2] = $128;
   }
  }
  $129 = HEAP32[$font_matrix>>2]|0;
  $130 = ($129|0)==(65536);
  if ($130) {
   $131 = ((($font_matrix)) + 12|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($132|0)==($129|0);
   if ($133) {
    $134 = ((($font_matrix)) + 4|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($135|0)==(0);
    if ($136) {
     $137 = ((($font_matrix)) + 8|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==(0);
     if (!($139)) {
      label = 20;
     }
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
  } else {
   label = 20;
  }
  if ((label|0) == 20) {
   _FT_Outline_Transform($26,$font_matrix);
  }
  $140 = $69 | $67;
  $141 = ($140|0)==(0);
  if (!($141)) {
   _FT_Outline_Translate($26,$67,$69);
  }
  $142 = HEAP32[$97>>2]|0;
  HEAP32[$advance>>2] = $142;
  $143 = ((($advance)) + 4|0);
  HEAP32[$143>>2] = 0;
  _FT_Vector_Transform($advance,$font_matrix);
  $144 = HEAP32[$advance>>2]|0;
  $145 = (($144) + ($67))|0;
  HEAP32[$97>>2] = $145;
  HEAP32[$advance>>2] = 0;
  $146 = ((($t1glyph)) + 52|0);
  $147 = HEAP32[$146>>2]|0;
  HEAP32[$143>>2] = $147;
  _FT_Vector_Transform($advance,$font_matrix);
  $148 = HEAP32[$143>>2]|0;
  $149 = (($148) + ($69))|0;
  HEAP32[$146>>2] = $149;
  if ($29) {
   $150 = ((($decoder)) + 16|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = ((($151)) + 4|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = ((($t1glyph)) + 172|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ((($t1glyph)) + 176|0);
   $157 = HEAP32[$156>>2]|0;
   if ($31) {
    $158 = ((($decoder)) + 72|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==(0|0);
    if ($160) {
     label = 26;
    }
   } else {
    label = 26;
   }
   if ((label|0) == 26) {
    $161 = ((($151)) + 2|0);
    $162 = HEAP16[$161>>1]|0;
    $163 = ($162<<16>>16)>(0);
    if ($163) {
     $164 = $162 << 16 >> 16;
     $n$08 = $164;$vec$09 = $153;
     while(1) {
      $165 = HEAP32[$vec$09>>2]|0;
      $166 = (_FT_MulFix($165,$155)|0);
      HEAP32[$vec$09>>2] = $166;
      $167 = ((($vec$09)) + 4|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = (_FT_MulFix($168,$157)|0);
      HEAP32[$167>>2] = $169;
      $170 = (($n$08) + -1)|0;
      $171 = ((($vec$09)) + 8|0);
      $172 = ($n$08|0)>(1);
      if ($172) {
       $n$08 = $170;$vec$09 = $171;
      } else {
       break;
      }
     }
    }
   }
   $173 = HEAP32[$97>>2]|0;
   $174 = (_FT_MulFix($173,$155)|0);
   HEAP32[$97>>2] = $174;
   $175 = HEAP32[$146>>2]|0;
   $176 = (_FT_MulFix($175,$157)|0);
   HEAP32[$146>>2] = $176;
  }
  _FT_Outline_Get_CBox($26,$cbox);
  $177 = ((($cbox)) + 8|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = HEAP32[$cbox>>2]|0;
  $180 = (($178) - ($179))|0;
  HEAP32[$92>>2] = $180;
  $181 = ((($cbox)) + 12|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = ((($cbox)) + 4|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = (($182) - ($184))|0;
  $186 = ((($t1glyph)) + 28|0);
  HEAP32[$186>>2] = $185;
  $187 = HEAP32[$cbox>>2]|0;
  $188 = ((($t1glyph)) + 32|0);
  HEAP32[$188>>2] = $187;
  $189 = HEAP32[$181>>2]|0;
  $190 = ((($t1glyph)) + 36|0);
  HEAP32[$190>>2] = $189;
  if ($106) {
   $191 = HEAP32[$146>>2]|0;
   _ft_synthesize_vertical_metrics($92,$191);
  }
 } else {
  $76 = ((($t1glyph)) + 156|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($decoder)) + 32|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (_FT_RoundFix($79)|0);
  $81 = $80 >> 16;
  $82 = ((($t1glyph)) + 32|0);
  HEAP32[$82>>2] = $81;
  $83 = ((($decoder)) + 40|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (_FT_RoundFix($84)|0);
  $86 = $85 >> 16;
  $87 = ((($t1glyph)) + 40|0);
  HEAP32[$87>>2] = $86;
  $88 = ((($77)) + 12|0);
  ;HEAP32[$88>>2]=HEAP32[$font_matrix>>2]|0;HEAP32[$88+4>>2]=HEAP32[$font_matrix+4>>2]|0;HEAP32[$88+8>>2]=HEAP32[$font_matrix+8>>2]|0;HEAP32[$88+12>>2]=HEAP32[$font_matrix+12>>2]|0;
  $89 = ((($77)) + 28|0);
  HEAP32[$89>>2] = $67;
  $90 = ((($77)) + 32|0);
  HEAP32[$90>>2] = $69;
  $91 = ((($77)) + 8|0);
  HEAP8[$91>>0] = 1;
 }
 $192 = HEAP32[$glyph_data>>2]|0;
 $193 = ((($t1glyph)) + 136|0);
 HEAP32[$193>>2] = $192;
 $194 = ((($glyph_data)) + 4|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = ((($t1glyph)) + 140|0);
 HEAP32[$196>>2] = $195;
 $197 = ((($1)) + 128|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = ((($198)) + 52|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = ($200|0)==(0|0);
 if ($201) {
  $error$025 = $62;
  STACKTOP = sp;return ($error$025|0);
 }
 $202 = HEAP32[$200>>2]|0;
 $203 = ((($202)) + 4|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = ((($200)) + 4|0);
 $206 = HEAP32[$205>>2]|0;
 FUNCTION_TABLE_vii[$204 & 31]($206,$glyph_data);
 $207 = ((($t1glyph)) + 136|0);
 HEAP32[$207>>2] = 0;
 $208 = ((($t1glyph)) + 140|0);
 HEAP32[$208>>2] = 0;
 $error$025 = $62;
 STACKTOP = sp;return ($error$025|0);
}
function _T1_Parse_Glyph($decoder,$glyph_index) {
 $decoder = $decoder|0;
 $glyph_index = $glyph_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $glyph_data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $glyph_data = sp;
 $0 = (_T1_Parse_Glyph_And_Get_Char_String($decoder,$glyph_index,$glyph_data)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return ($0|0);
 }
 $2 = ((($decoder)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 128|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return ($0|0);
 }
 $9 = HEAP32[$7>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_vii[$11 & 31]($13,$glyph_data);
 STACKTOP = sp;return ($0|0);
}
function _Get_Interface($module,$t1_interface) {
 $module = $module|0;
 $t1_interface = $t1_interface|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_service_list_lookup(13028,$t1_interface)|0);
 return ($0|0);
}
function _Get_Kerning($t1face,$left_glyph,$right_glyph,$kerning) {
 $t1face = $t1face|0;
 $left_glyph = $left_glyph|0;
 $right_glyph = $right_glyph|0;
 $kerning = $kerning|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$kerning>>2] = 0;
 $0 = ((($kerning)) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($t1face)) + 492|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return 0;
 }
 _T1_Get_Kerning($2,$left_glyph,$right_glyph,$kerning);
 return 0;
}
function _t1_ps_get_font_info($face,$afont_info) {
 $face = $face|0;
 $afont_info = $afont_info|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 132|0);
 ;HEAP32[$afont_info>>2]=HEAP32[$0>>2]|0;HEAP32[$afont_info+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$afont_info+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$afont_info+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$afont_info+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$afont_info+20>>2]=HEAP32[$0+20>>2]|0;HEAP32[$afont_info+24>>2]=HEAP32[$0+24>>2]|0;HEAP32[$afont_info+28>>2]=HEAP32[$0+28>>2]|0;
 return 0;
}
function _t1_ps_get_font_extra($face,$afont_extra) {
 $face = $face|0;
 $afont_extra = $afont_extra|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 164|0);
 $1 = HEAP16[$0>>1]|0;
 HEAP16[$afont_extra>>1] = $1;
 return 0;
}
function _t1_ps_has_glyph_names($face) {
 $face = $face|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _t1_ps_get_font_private($face,$afont_private) {
 $face = $face|0;
 $afont_private = $afont_private|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 168|0);
 _memcpy(($afont_private|0),($0|0),196)|0;
 return 0;
}
function _t1_ps_get_font_value($face,$key,$idx,$value,$value_len) {
 $face = $face|0;
 $key = $key|0;
 $idx = $idx|0;
 $value = $value|0;
 $value_len = $value_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond10 = 0, $or$cond11 = 0, $or$cond12 = 0, $or$cond13 = 0, $or$cond14 = 0, $or$cond15 = 0, $or$cond16 = 0;
 var $or$cond17 = 0, $or$cond18 = 0, $or$cond19 = 0, $or$cond2 = 0, $or$cond20 = 0, $or$cond21 = 0, $or$cond22 = 0, $or$cond23 = 0, $or$cond24 = 0, $or$cond25 = 0, $or$cond26 = 0, $or$cond27 = 0, $or$cond28 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond30 = 0, $or$cond31 = 0, $or$cond32 = 0, $or$cond33 = 0, $or$cond34 = 0;
 var $or$cond35 = 0, $or$cond36 = 0, $or$cond37 = 0, $or$cond38 = 0, $or$cond39 = 0, $or$cond4 = 0, $or$cond40 = 0, $or$cond41 = 0, $or$cond42 = 0, $or$cond43 = 0, $or$cond44 = 0, $or$cond45 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond9 = 0, $retval$0 = 0, $val$0 = 0, $val1$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 132|0);
 do {
  switch ($key|0) {
  case 0:  {
   $1 = ($value|0)!=(0|0);
   $2 = ($value_len|0)>(0);
   $or$cond = $1 & $2;
   if ($or$cond) {
    $3 = ((($0)) + 301|0);
    $4 = HEAP8[$3>>0]|0;
    HEAP8[$value>>0] = $4;
    $retval$0 = 1;
   } else {
    $retval$0 = 1;
   }
   break;
  }
  case 1:  {
   $5 = ($idx>>>0)<(4);
   if ($5) {
    $6 = ($value|0)!=(0|0);
    $7 = ($value_len|0)>(3);
    $or$cond1 = $6 & $7;
    if ($or$cond1) {
     switch ($idx|0) {
     case 0:  {
      $8 = ((($face)) + 436|0);
      $9 = HEAP32[$8>>2]|0;
      $val$0 = $9;
      break;
     }
     case 1:  {
      $10 = ((($face)) + 436|0);
      $11 = ((($10)) + 4|0);
      $12 = HEAP32[$11>>2]|0;
      $val$0 = $12;
      break;
     }
     case 2:  {
      $13 = ((($face)) + 436|0);
      $14 = ((($13)) + 8|0);
      $15 = HEAP32[$14>>2]|0;
      $val$0 = $15;
      break;
     }
     case 3:  {
      $16 = ((($face)) + 436|0);
      $17 = ((($16)) + 12|0);
      $18 = HEAP32[$17>>2]|0;
      $val$0 = $18;
      break;
     }
     default: {
      $val$0 = 0;
     }
     }
     HEAP32[$value>>2] = $val$0;
     $retval$0 = 4;
    } else {
     $retval$0 = 4;
    }
   } else {
    $retval$0 = -1;
   }
   break;
  }
  case 2:  {
   $19 = ($idx>>>0)<(4);
   if ($19) {
    $20 = ($value|0)!=(0|0);
    $21 = ($value_len|0)>(3);
    $or$cond2 = $20 & $21;
    if ($or$cond2) {
     switch ($idx|0) {
     case 0:  {
      $22 = ((($face)) + 460|0);
      $23 = HEAP32[$22>>2]|0;
      $val1$0 = $23;
      break;
     }
     case 1:  {
      $24 = ((($face)) + 460|0);
      $25 = ((($24)) + 4|0);
      $26 = HEAP32[$25>>2]|0;
      $val1$0 = $26;
      break;
     }
     case 2:  {
      $27 = ((($face)) + 460|0);
      $28 = ((($27)) + 8|0);
      $29 = HEAP32[$28>>2]|0;
      $val1$0 = $29;
      break;
     }
     case 3:  {
      $30 = ((($face)) + 460|0);
      $31 = ((($30)) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $val1$0 = $32;
      break;
     }
     default: {
      $val1$0 = 0;
     }
     }
     HEAP32[$value>>2] = $val1$0;
     $retval$0 = 4;
    } else {
     $retval$0 = 4;
    }
   } else {
    $retval$0 = -1;
   }
   break;
  }
  case 3:  {
   $33 = ($value|0)!=(0|0);
   $34 = ($value_len|0)>(0);
   $or$cond3 = $33 & $34;
   if ($or$cond3) {
    $35 = ((($face)) + 432|0);
    $36 = HEAP8[$35>>0]|0;
    HEAP8[$value>>0] = $36;
    $retval$0 = 1;
   } else {
    $retval$0 = 1;
   }
   break;
  }
  case 4:  {
   $37 = ((($face)) + 364|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (_strlen($38)|0);
   $40 = (($39) + 1)|0;
   $41 = ($value|0)==(0|0);
   $42 = ($40|0)>($value_len|0);
   $or$cond4 = $41 | $42;
   if ($or$cond4) {
    $retval$0 = $40;
   } else {
    _memcpy(($value|0),($38|0),($40|0))|0;
    $retval$0 = $40;
   }
   break;
  }
  case 5:  {
   $43 = ($value|0)!=(0|0);
   $44 = ($value_len|0)>(3);
   $or$cond5 = $43 & $44;
   if ($or$cond5) {
    $45 = ((($face)) + 168|0);
    $46 = HEAP32[$45>>2]|0;
    HEAP32[$value>>2] = $46;
    $retval$0 = 4;
   } else {
    $retval$0 = 4;
   }
   break;
  }
  case 6:  {
   $47 = ($value|0)!=(0|0);
   $48 = ($value_len|0)>(3);
   $or$cond6 = $47 & $48;
   if ($or$cond6) {
    $49 = ((($face)) + 416|0);
    $50 = HEAP32[$49>>2]|0;
    HEAP32[$value>>2] = $50;
    $retval$0 = 4;
   } else {
    $retval$0 = 4;
   }
   break;
  }
  case 7:  {
   $51 = ((($face)) + 416|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52>>>0)>($idx>>>0);
   if ($53) {
    $54 = ((($face)) + 420|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($55) + ($idx<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (_strlen($57)|0);
    $59 = (($58) + 1)|0;
    $60 = ($value|0)==(0|0);
    $61 = ($59|0)>($value_len|0);
    $or$cond7 = $60 | $61;
    if ($or$cond7) {
     $retval$0 = $59;
    } else {
     _memcpy(($value|0),($57|0),($59|0))|0;
     $62 = (($value) + ($58)|0);
     HEAP8[$62>>0] = 0;
     $retval$0 = $59;
    }
   } else {
    $retval$0 = -1;
   }
   break;
  }
  case 8:  {
   $63 = ((($face)) + 416|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64>>>0)>($idx>>>0);
   if ($65) {
    $66 = ((($face)) + 428|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (($67) + ($idx<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (($69) + 1)|0;
    $71 = ($value|0)!=(0|0);
    $72 = ($69|0)<($value_len|0);
    $or$cond8 = $71 & $72;
    if ($or$cond8) {
     $73 = ((($face)) + 424|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($74) + ($idx<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     _memcpy(($value|0),($76|0),($69|0))|0;
     $77 = (($value) + ($69)|0);
     HEAP8[$77>>0] = 0;
     $retval$0 = $70;
    } else {
     $retval$0 = $70;
    }
   } else {
    $retval$0 = -1;
   }
   break;
  }
  case 9:  {
   $78 = ($value|0)!=(0|0);
   $79 = ($value_len|0)>(3);
   $or$cond9 = $78 & $79;
   if ($or$cond9) {
    $80 = ((($face)) + 368|0);
    $81 = HEAP32[$80>>2]|0;
    HEAP32[$value>>2] = $81;
    $retval$0 = 4;
   } else {
    $retval$0 = 4;
   }
   break;
  }
  case 10:  {
   $82 = ((($face)) + 368|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($83|0)==(1);
   if ($84) {
    $85 = ((($face)) + 372|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86>>>0)>($idx>>>0);
    if ($87) {
     $88 = ((($85)) + 16|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = (($89) + ($idx<<2)|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (_strlen($91)|0);
     $93 = (($92) + 1)|0;
     $94 = ($value|0)==(0|0);
     $95 = ($93|0)>($value_len|0);
     $or$cond10 = $94 | $95;
     if ($or$cond10) {
      $retval$0 = $93;
     } else {
      _memcpy(($value|0),($91|0),($92|0))|0;
      $96 = (($value) + ($92)|0);
      HEAP8[$96>>0] = 0;
      $retval$0 = $93;
     }
    } else {
     $retval$0 = -1;
    }
   } else {
    $retval$0 = -1;
   }
   break;
  }
  case 11:  {
   $97 = ($value|0)!=(0|0);
   $98 = ($value_len|0)>(3);
   $or$cond11 = $97 & $98;
   if ($or$cond11) {
    $99 = ((($face)) + 404|0);
    $100 = HEAP32[$99>>2]|0;
    HEAP32[$value>>2] = $100;
    $retval$0 = 4;
   } else {
    $retval$0 = 4;
   }
   break;
  }
  case 12:  {
   $101 = ((($face)) + 404|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102>>>0)>($idx>>>0);
   if ($103) {
    $104 = ((($face)) + 412|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = (($105) + ($idx<<2)|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($107) + 1)|0;
    $109 = ($value|0)!=(0|0);
    $110 = ($107|0)<($value_len|0);
    $or$cond12 = $109 & $110;
    if ($or$cond12) {
     $111 = ((($face)) + 408|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = (($112) + ($idx<<2)|0);
     $114 = HEAP32[$113>>2]|0;
     _memcpy(($value|0),($114|0),($107|0))|0;
     $115 = (($value) + ($107)|0);
     HEAP8[$115>>0] = 0;
     $retval$0 = $108;
    } else {
     $retval$0 = $108;
    }
   } else {
    $retval$0 = -1;
   }
   break;
  }
  case 13:  {
   $116 = ($value|0)!=(0|0);
   $117 = ($value_len|0)>(1);
   $or$cond13 = $116 & $117;
   if ($or$cond13) {
    $118 = ((($face)) + 168|0);
    $119 = ((($118)) + 120|0);
    $120 = HEAP16[$119>>1]|0;
    HEAP16[$value>>1] = $120;
    $retval$0 = 2;
   } else {
    $retval$0 = 2;
   }
   break;
  }
  case 14:  {
   $121 = ($value|0)!=(0|0);
   $122 = ($value_len|0)>(1);
   $or$cond14 = $121 & $122;
   if ($or$cond14) {
    $123 = ((($face)) + 168|0);
    $124 = ((($123)) + 122|0);
    $125 = HEAP16[$124>>1]|0;
    HEAP16[$value>>1] = $125;
    $retval$0 = 2;
   } else {
    $retval$0 = 2;
   }
   break;
  }
  case 15:  {
   $126 = ($value|0)!=(0|0);
   $127 = ($value_len|0)>(0);
   $or$cond15 = $126 & $127;
   if ($or$cond15) {
    $128 = ((($face)) + 168|0);
    $129 = ((($128)) + 8|0);
    $130 = HEAP8[$129>>0]|0;
    HEAP8[$value>>0] = $130;
    $retval$0 = 1;
   } else {
    $retval$0 = 1;
   }
   break;
  }
  case 16:  {
   $131 = ((($face)) + 168|0);
   $132 = ((($131)) + 8|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = ($134>>>0)>($idx>>>0);
   if ($135) {
    $136 = ($value|0)!=(0|0);
    $137 = ($value_len|0)>(1);
    $or$cond16 = $136 & $137;
    if ($or$cond16) {
     $138 = ((($131)) + 12|0);
     $139 = (($138) + ($idx<<1)|0);
     $140 = HEAP16[$139>>1]|0;
     HEAP16[$value>>1] = $140;
     $retval$0 = 2;
    } else {
     $retval$0 = 2;
    }
   } else {
    $retval$0 = -1;
   }
   break;
  }
  case 24:  {
   $141 = ($value|0)!=(0|0);
   $142 = ($value_len|0)>(3);
   $or$cond17 = $141 & $142;
   if ($or$cond17) {
    $143 = ((($face)) + 168|0);
    $144 = ((($143)) + 108|0);
    $145 = HEAP32[$144>>2]|0;
    HEAP32[$value>>2] = $145;
    $retval$0 = 4;
   } else {
    $retval$0 = 4;
   }
   break;
  }
  case 17:  {
   $146 = ($value|0)!=(0|0);
   $147 = ($value_len|0)>(3);
   $or$cond18 = $146 & $147;
   if ($or$cond18) {
    $148 = ((($face)) + 168|0);
    $149 = ((($148)) + 116|0);
    $150 = HEAP32[$149>>2]|0;
    HEAP32[$value>>2] = $150;
    $retval$0 = 4;
   } else {
    $retval$0 = 4;
   }
   break;
  }
  case 25:  {
   $151 = ($value|0)!=(0|0);
   $152 = ($value_len|0)>(3);
   $or$cond19 = $151 & $152;
   if ($or$cond19) {
    $153 = ((($face)) + 168|0);
    $154 = ((($153)) + 112|0);
    $155 = HEAP32[$154>>2]|0;
    HEAP32[$value>>2] = $155;
    $retval$0 = 4;
   } else {
    $retval$0 = 4;
   }
   break;
  }
  case 18:  {
   $156 = ($value|0)!=(0|0);
   $157 = ($value_len|0)>(0);
   $or$cond20 = $156 & $157;
   if ($or$cond20) {
    $158 = ((($face)) + 168|0);
    $159 = ((($158)) + 9|0);
    $160 = HEAP8[$159>>0]|0;
    HEAP8[$value>>0] = $160;
    $retval$0 = 1;
   } else {
    $retval$0 = 1;
   }
   break;
  }
  case 19:  {
   $161 = ((($face)) + 168|0);
   $162 = ((($161)) + 9|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = ($164>>>0)>($idx>>>0);
   if ($165) {
    $166 = ($value|0)!=(0|0);
    $167 = ($value_len|0)>(1);
    $or$cond21 = $166 & $167;
    if ($or$cond21) {
     $168 = ((($161)) + 40|0);
     $169 = (($168) + ($idx<<1)|0);
     $170 = HEAP16[$169>>1]|0;
     HEAP16[$value>>1] = $170;
     $retval$0 = 2;
    } else {
     $retval$0 = 2;
    }
   } else {
    $retval$0 = -1;
   }
   break;
  }
  case 20:  {
   $171 = ($value|0)!=(0|0);
   $172 = ($value_len|0)>(0);
   $or$cond22 = $171 & $172;
   if ($or$cond22) {
    $173 = ((($face)) + 168|0);
    $174 = ((($173)) + 10|0);
    $175 = HEAP8[$174>>0]|0;
    HEAP8[$value>>0] = $175;
    $retval$0 = 1;
   } else {
    $retval$0 = 1;
   }
   break;
  }
  case 21:  {
   $176 = ((($face)) + 168|0);
   $177 = ((($176)) + 10|0);
   $178 = HEAP8[$177>>0]|0;
   $179 = $178&255;
   $180 = ($179>>>0)>($idx>>>0);
   if ($180) {
    $181 = ($value|0)!=(0|0);
    $182 = ($value_len|0)>(1);
    $or$cond23 = $181 & $182;
    if ($or$cond23) {
     $183 = ((($176)) + 60|0);
     $184 = (($183) + ($idx<<1)|0);
     $185 = HEAP16[$184>>1]|0;
     HEAP16[$value>>1] = $185;
     $retval$0 = 2;
    } else {
     $retval$0 = 2;
    }
   } else {
    $retval$0 = -1;
   }
   break;
  }
  case 22:  {
   $186 = ($value|0)!=(0|0);
   $187 = ($value_len|0)>(0);
   $or$cond24 = $186 & $187;
   if ($or$cond24) {
    $188 = ((($face)) + 168|0);
    $189 = ((($188)) + 11|0);
    $190 = HEAP8[$189>>0]|0;
    HEAP8[$value>>0] = $190;
    $retval$0 = 1;
   } else {
    $retval$0 = 1;
   }
   break;
  }
  case 23:  {
   $191 = ((($face)) + 168|0);
   $192 = ((($191)) + 11|0);
   $193 = HEAP8[$192>>0]|0;
   $194 = $193&255;
   $195 = ($194>>>0)>($idx>>>0);
   if ($195) {
    $196 = ($value|0)!=(0|0);
    $197 = ($value_len|0)>(1);
    $or$cond25 = $196 & $197;
    if ($or$cond25) {
     $198 = ((($191)) + 88|0);
     $199 = (($198) + ($idx<<1)|0);
     $200 = HEAP16[$199>>1]|0;
     HEAP16[$value>>1] = $200;
     $retval$0 = 2;
    } else {
     $retval$0 = 2;
    }
   } else {
    $retval$0 = -1;
   }
   break;
  }
  case 26:  {
   $201 = ($value|0)!=(0|0);
   $202 = ($value_len|0)>(0);
   $or$cond26 = $201 & $202;
   if ($or$cond26) {
    $203 = ((($face)) + 168|0);
    $204 = ((($203)) + 124|0);
    $205 = HEAP8[$204>>0]|0;
    HEAP8[$value>>0] = $205;
    $retval$0 = 1;
   } else {
    $retval$0 = 1;
   }
   break;
  }
  case 27:  {
   $206 = ((($face)) + 168|0);
   $207 = ((($206)) + 124|0);
   $208 = HEAP8[$207>>0]|0;
   $209 = $208&255;
   $210 = ($209>>>0)>($idx>>>0);
   if ($210) {
    $211 = ($value|0)!=(0|0);
    $212 = ($value_len|0)>(1);
    $or$cond27 = $211 & $212;
    if ($or$cond27) {
     $213 = ((($206)) + 128|0);
     $214 = (($213) + ($idx<<1)|0);
     $215 = HEAP16[$214>>1]|0;
     HEAP16[$value>>1] = $215;
     $retval$0 = 2;
    } else {
     $retval$0 = 2;
    }
   } else {
    $retval$0 = -1;
   }
   break;
  }
  case 28:  {
   $216 = ($value|0)!=(0|0);
   $217 = ($value_len|0)>(0);
   $or$cond28 = $216 & $217;
   if ($or$cond28) {
    $218 = ((($face)) + 168|0);
    $219 = ((($218)) + 125|0);
    $220 = HEAP8[$219>>0]|0;
    HEAP8[$value>>0] = $220;
    $retval$0 = 1;
   } else {
    $retval$0 = 1;
   }
   break;
  }
  case 29:  {
   $221 = ((($face)) + 168|0);
   $222 = ((($221)) + 125|0);
   $223 = HEAP8[$222>>0]|0;
   $224 = $223&255;
   $225 = ($224>>>0)>($idx>>>0);
   if ($225) {
    $226 = ($value|0)!=(0|0);
    $227 = ($value_len|0)>(1);
    $or$cond29 = $226 & $227;
    if ($or$cond29) {
     $228 = (((($221)) + 154|0) + ($idx<<1)|0);
     $229 = HEAP16[$228>>1]|0;
     HEAP16[$value>>1] = $229;
     $retval$0 = 2;
    } else {
     $retval$0 = 2;
    }
   } else {
    $retval$0 = -1;
   }
   break;
  }
  case 31:  {
   $230 = ($value|0)!=(0|0);
   $231 = ($value_len|0)>(0);
   $or$cond30 = $230 & $231;
   if ($or$cond30) {
    $232 = ((($face)) + 168|0);
    $233 = ((($232)) + 127|0);
    $234 = HEAP8[$233>>0]|0;
    HEAP8[$value>>0] = $234;
    $retval$0 = 1;
   } else {
    $retval$0 = 1;
   }
   break;
  }
  case 30:  {
   $235 = ($value|0)!=(0|0);
   $236 = ($value_len|0)>(0);
   $or$cond31 = $235 & $236;
   if ($or$cond31) {
    $237 = ((($face)) + 168|0);
    $238 = ((($237)) + 126|0);
    $239 = HEAP8[$238>>0]|0;
    HEAP8[$value>>0] = $239;
    $retval$0 = 1;
   } else {
    $retval$0 = 1;
   }
   break;
  }
  case 32:  {
   $240 = ($idx>>>0)<(2);
   if ($240) {
    $241 = ($value|0)!=(0|0);
    $242 = ($value_len|0)>(1);
    $or$cond32 = $241 & $242;
    if ($or$cond32) {
     $243 = ((($face)) + 168|0);
     $244 = ((($243)) + 192|0);
     $245 = (($244) + ($idx<<1)|0);
     $246 = HEAP16[$245>>1]|0;
     HEAP16[$value>>1] = $246;
     $retval$0 = 2;
    } else {
     $retval$0 = 2;
    }
   } else {
    $retval$0 = -1;
   }
   break;
  }
  case 33:  {
   $247 = ($value|0)!=(0|0);
   $248 = ($value_len|0)>(3);
   $or$cond33 = $247 & $248;
   if ($or$cond33) {
    $249 = ((($face)) + 168|0);
    $250 = ((($249)) + 4|0);
    $251 = HEAP32[$250>>2]|0;
    HEAP32[$value>>2] = $251;
    $retval$0 = 4;
   } else {
    $retval$0 = 4;
   }
   break;
  }
  case 34:  {
   $252 = ($value|0)!=(0|0);
   $253 = ($value_len|0)>(3);
   $or$cond34 = $252 & $253;
   if ($or$cond34) {
    $254 = ((($face)) + 168|0);
    $255 = ((($254)) + 188|0);
    $256 = HEAP32[$255>>2]|0;
    HEAP32[$value>>2] = $256;
    $retval$0 = 4;
   } else {
    $retval$0 = 4;
   }
   break;
  }
  case 35:  {
   $257 = ($value|0)!=(0|0);
   $258 = ($value_len|0)>(3);
   $or$cond35 = $257 & $258;
   if ($or$cond35) {
    $259 = ((($face)) + 168|0);
    $260 = ((($259)) + 184|0);
    $261 = HEAP32[$260>>2]|0;
    HEAP32[$value>>2] = $261;
    $retval$0 = 4;
   } else {
    $retval$0 = 4;
   }
   break;
  }
  case 41:  {
   $262 = ($value|0)!=(0|0);
   $263 = ($value_len|0)>(0);
   $or$cond36 = $262 & $263;
   if ($or$cond36) {
    $264 = ((($face)) + 156|0);
    $265 = HEAP8[$264>>0]|0;
    HEAP8[$value>>0] = $265;
    $retval$0 = 1;
   } else {
    $retval$0 = 1;
   }
   break;
  }
  case 42:  {
   $266 = ($value|0)!=(0|0);
   $267 = ($value_len|0)>(1);
   $or$cond37 = $266 & $267;
   if ($or$cond37) {
    $268 = ((($0)) + 26|0);
    $269 = HEAP16[$268>>1]|0;
    HEAP16[$value>>1] = $269;
    $retval$0 = 2;
   } else {
    $retval$0 = 2;
   }
   break;
  }
  case 43:  {
   $270 = ($value|0)!=(0|0);
   $271 = ($value_len|0)>(1);
   $or$cond38 = $270 & $271;
   if ($or$cond38) {
    $272 = ((($face)) + 160|0);
    $273 = HEAP16[$272>>1]|0;
    HEAP16[$value>>1] = $273;
    $retval$0 = 2;
   } else {
    $retval$0 = 2;
   }
   break;
  }
  case 44:  {
   $274 = ($value|0)!=(0|0);
   $275 = ($value_len|0)>(1);
   $or$cond39 = $274 & $275;
   if ($or$cond39) {
    $276 = ((($face)) + 164|0);
    $277 = HEAP16[$276>>1]|0;
    HEAP16[$value>>1] = $277;
    $retval$0 = 2;
   } else {
    $retval$0 = 2;
   }
   break;
  }
  case 36:  {
   $278 = HEAP32[$0>>2]|0;
   $279 = (_strlen($278)|0);
   $280 = (($279) + 1)|0;
   $281 = ($value|0)==(0|0);
   $282 = ($280|0)>($value_len|0);
   $or$cond40 = $281 | $282;
   if ($or$cond40) {
    $retval$0 = $280;
   } else {
    _memcpy(($value|0),($278|0),($280|0))|0;
    $retval$0 = $280;
   }
   break;
  }
  case 37:  {
   $283 = ((($face)) + 136|0);
   $284 = HEAP32[$283>>2]|0;
   $285 = (_strlen($284)|0);
   $286 = (($285) + 1)|0;
   $287 = ($value|0)==(0|0);
   $288 = ($286|0)>($value_len|0);
   $or$cond41 = $287 | $288;
   if ($or$cond41) {
    $retval$0 = $286;
   } else {
    _memcpy(($value|0),($284|0),($286|0))|0;
    $retval$0 = $286;
   }
   break;
  }
  case 38:  {
   $289 = ((($face)) + 140|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = (_strlen($290)|0);
   $292 = (($291) + 1)|0;
   $293 = ($value|0)==(0|0);
   $294 = ($292|0)>($value_len|0);
   $or$cond42 = $293 | $294;
   if ($or$cond42) {
    $retval$0 = $292;
   } else {
    _memcpy(($value|0),($290|0),($292|0))|0;
    $retval$0 = $292;
   }
   break;
  }
  case 39:  {
   $295 = ((($face)) + 144|0);
   $296 = HEAP32[$295>>2]|0;
   $297 = (_strlen($296)|0);
   $298 = (($297) + 1)|0;
   $299 = ($value|0)==(0|0);
   $300 = ($298|0)>($value_len|0);
   $or$cond43 = $299 | $300;
   if ($or$cond43) {
    $retval$0 = $298;
   } else {
    _memcpy(($value|0),($296|0),($298|0))|0;
    $retval$0 = $298;
   }
   break;
  }
  case 40:  {
   $301 = ((($face)) + 148|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = (_strlen($302)|0);
   $304 = (($303) + 1)|0;
   $305 = ($value|0)==(0|0);
   $306 = ($304|0)>($value_len|0);
   $or$cond44 = $305 | $306;
   if ($or$cond44) {
    $retval$0 = $304;
   } else {
    _memcpy(($value|0),($302|0),($304|0))|0;
    $retval$0 = $304;
   }
   break;
  }
  case 45:  {
   $307 = ($value|0)!=(0|0);
   $308 = ($value_len|0)>(3);
   $or$cond45 = $307 & $308;
   if ($or$cond45) {
    $309 = ((($face)) + 152|0);
    $310 = HEAP32[$309>>2]|0;
    HEAP32[$value>>2] = $310;
    $retval$0 = 4;
   } else {
    $retval$0 = 4;
   }
   break;
  }
  default: {
   $retval$0 = -1;
  }
  }
 } while(0);
 return ($retval$0|0);
}
function _t1_get_glyph_name($face,$glyph_index,$buffer,$buffer_max) {
 $face = $face|0;
 $glyph_index = $glyph_index|0;
 $buffer = $buffer|0;
 $buffer_max = $buffer_max|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 420|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($glyph_index<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 (_ft_mem_strcpyn($buffer,$3,$buffer_max)|0);
 return 0;
}
function _t1_get_name_index($face,$glyph_name) {
 $face = $face|0;
 $glyph_name = $glyph_name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 416|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($face)) + 420|0);
 $4 = HEAP32[$3>>2]|0;
 $i$01 = 0;
 while(1) {
  $5 = (($4) + ($i$01<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_strcmp($glyph_name,$6)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = $i$01;
   label = 5;
   break;
  }
  $9 = (($i$01) + 1)|0;
  $10 = HEAP32[$0>>2]|0;
  $11 = ($9|0)<($10|0);
  if ($11) {
   $i$01 = $9;
  } else {
   $$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _t1_get_ps_name($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 364|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _tt_face_load_kern($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $$ = 0, $$1 = 0, $$3 = 0, $$masked = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avail$0$lcssa = 0, $avail$09 = 0, $avail$1 = 0, $cond = 0, $cond5 = 0, $count$0 = 0, $count$04 = 0, $count$08 = 0;
 var $error$0 = 0, $nn$0$lcssa = 0, $nn$012 = 0, $old_pair$07 = 0, $or$cond = 0, $ordered$0$lcssa = 0, $ordered$010 = 0, $ordered$1 = 0, $p$013 = 0, $p$16 = 0, $table_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $table_size = sp;
 $0 = ((($face)) + 508|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iiiii[$1 & 63]($face,1801810542,$stream,$table_size)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $error$0 = $2;
  STACKTOP = sp;return ($error$0|0);
 }
 $4 = HEAP32[$table_size>>2]|0;
 $5 = ($4>>>0)<(4);
 if ($5) {
  $error$0 = 142;
  STACKTOP = sp;return ($error$0|0);
 }
 $6 = ((($face)) + 772|0);
 $7 = (_FT_Stream_ExtractFrame($stream,$4,$6)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $error$0 = $7;
  STACKTOP = sp;return ($error$0|0);
 }
 $9 = HEAP32[$table_size>>2]|0;
 $10 = ((($face)) + 776|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$6>>2]|0;
 $12 = HEAP32[$table_size>>2]|0;
 $13 = (($11) + ($12)|0);
 $14 = ((($11)) + 2|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 8;
 $18 = ((($11)) + 3|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $17 | $20;
 $22 = ($21>>>0)>(32);
 $$ = $22 ? 32 : $21;
 $23 = ($$|0)==(0);
 L10: do {
  if ($23) {
   $avail$0$lcssa = 0;$nn$0$lcssa = 0;$ordered$0$lcssa = 0;
  } else {
   $24 = ((($11)) + 4|0);
   $avail$09 = 0;$nn$012 = 0;$ordered$010 = 0;$p$013 = $24;
   while(1) {
    $25 = 1 << $nn$012;
    $26 = ((($p$013)) + 6|0);
    $27 = ($26>>>0)>($13>>>0);
    if ($27) {
     $avail$0$lcssa = $avail$09;$nn$0$lcssa = $nn$012;$ordered$0$lcssa = $ordered$010;
     break L10;
    }
    $28 = ((($p$013)) + 2|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = $30 << 8;
    $32 = ((($p$013)) + 3|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $35 = $31 | $34;
    $36 = ($35>>>0)<(7);
    if ($36) {
     $avail$0$lcssa = $avail$09;$nn$0$lcssa = $nn$012;$ordered$0$lcssa = $ordered$010;
     break L10;
    }
    $37 = ((($p$013)) + 5|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38&255;
    $40 = ((($p$013)) + 4|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = $42 << 8;
    $44 = (($p$013) + ($35)|0);
    $45 = ($44>>>0)>($13>>>0);
    $$1 = $45 ? $13 : $44;
    $$masked = $39 & 247;
    $46 = $43 | $$masked;
    $47 = ($46|0)!=(1);
    $48 = ((($p$013)) + 14|0);
    $49 = ($48>>>0)>($13>>>0);
    $or$cond = $49 | $47;
    L16: do {
     if ($or$cond) {
      $avail$1 = $avail$09;$ordered$1 = $ordered$010;
     } else {
      $50 = HEAP8[$26>>0]|0;
      $51 = $50&255;
      $52 = $51 << 8;
      $53 = ((($p$013)) + 7|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = $52 | $55;
      $57 = $$1;
      $58 = $48;
      $59 = (($57) - ($58))|0;
      $60 = ($56*6)|0;
      $61 = ($59|0)<($60|0);
      $62 = (($59|0) / 6)&-1;
      $$3 = $61 ? $62 : $56;
      $63 = $25 | $avail$09;
      $64 = ($$3|0)==(0);
      if ($64) {
       $avail$1 = $63;$ordered$1 = $ordered$010;
      } else {
       $count$04 = (($$3) + -1)|0;
       $cond5 = ($count$04|0)==(0);
       if (!($cond5)) {
        $65 = ((($p$013)) + 20|0);
        $66 = ((($p$013)) + 15|0);
        $67 = HEAP8[$66>>0]|0;
        $68 = $67&255;
        $69 = $68 << 16;
        $70 = HEAP8[$48>>0]|0;
        $71 = $70&255;
        $72 = $71 << 24;
        $73 = $69 | $72;
        $74 = ((($p$013)) + 16|0);
        $75 = HEAP8[$74>>0]|0;
        $76 = $75&255;
        $77 = $76 << 8;
        $78 = $73 | $77;
        $79 = ((($p$013)) + 17|0);
        $80 = HEAP8[$79>>0]|0;
        $81 = $80&255;
        $82 = $78 | $81;
        $count$08 = $count$04;$old_pair$07 = $82;$p$16 = $65;
        while(1) {
         $84 = HEAP8[$p$16>>0]|0;
         $85 = $84&255;
         $86 = $85 << 24;
         $87 = ((($p$16)) + 1|0);
         $88 = HEAP8[$87>>0]|0;
         $89 = $88&255;
         $90 = $89 << 16;
         $91 = $90 | $86;
         $92 = ((($p$16)) + 2|0);
         $93 = HEAP8[$92>>0]|0;
         $94 = $93&255;
         $95 = $94 << 8;
         $96 = $91 | $95;
         $97 = ((($p$16)) + 3|0);
         $98 = HEAP8[$97>>0]|0;
         $99 = $98&255;
         $100 = $96 | $99;
         $101 = ($100>>>0)>($old_pair$07>>>0);
         if (!($101)) {
          $avail$1 = $63;$ordered$1 = $ordered$010;
          break L16;
         }
         $83 = ((($p$16)) + 6|0);
         $count$0 = (($count$08) + -1)|0;
         $cond = ($count$0|0)==(0);
         if ($cond) {
          break;
         } else {
          $count$08 = $count$0;$old_pair$07 = $100;$p$16 = $83;
         }
        }
       }
       $102 = $25 | $ordered$010;
       $avail$1 = $63;$ordered$1 = $102;
      }
     }
    } while(0);
    $103 = (($nn$012) + 1)|0;
    $104 = ($103>>>0)<($$>>>0);
    if ($104) {
     $avail$09 = $avail$1;$nn$012 = $103;$ordered$010 = $ordered$1;$p$013 = $$1;
    } else {
     $avail$0$lcssa = $avail$1;$nn$0$lcssa = $103;$ordered$0$lcssa = $ordered$1;
     break;
    }
   }
  }
 } while(0);
 $105 = ((($face)) + 780|0);
 HEAP32[$105>>2] = $nn$0$lcssa;
 $106 = ((($face)) + 784|0);
 HEAP32[$106>>2] = $avail$0$lcssa;
 $107 = ((($face)) + 788|0);
 HEAP32[$107>>2] = $ordered$0$lcssa;
 $error$0 = $7;
 STACKTOP = sp;return ($error$0|0);
}
function _tt_face_done_kern($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 772|0);
 _FT_Stream_ReleaseFrame($1,$2);
 $3 = ((($face)) + 776|0);
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 return;
}
function _tt_face_get_kerning($face,$left_glyph,$right_glyph) {
 $face = $face|0;
 $left_glyph = $left_glyph|0;
 $right_glyph = $right_glyph|0;
 var $$ = 0, $$10 = 0, $$lcssa = 0, $$min$0 = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$value$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $count$022 = 0, $count2$017 = 0, $mask$021 = 0, $max$0$ = 0, $max$015 = 0, $min$014 = 0;
 var $or$cond = 0, $or$cond19 = 0, $or$cond9 = 0, $p$020 = 0, $p$116 = 0, $p$116$lcssa = 0, $result$0$lcssa = 0, $result$023 = 0, $result$1 = 0, $value$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 772|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 776|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3)|0);
 $5 = ((($face)) + 780|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 $8 = ($3|0)<(10);
 $or$cond19 = $8 | $7;
 if ($or$cond19) {
  $result$0$lcssa = 0;
  return ($result$0$lcssa|0);
 }
 $9 = ((($1)) + 4|0);
 $10 = ((($1)) + 10|0);
 $11 = ((($face)) + 784|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $left_glyph << 16;
 $14 = $13 | $right_glyph;
 $15 = ((($face)) + 788|0);
 $35 = $10;$count$022 = $6;$mask$021 = 1;$p$020 = $9;$result$023 = 0;
 while(1) {
  $16 = ((($p$020)) + 2|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 << 8;
  $20 = ((($p$020)) + 3|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $19 | $22;
  $24 = ((($p$020)) + 5|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = (($p$020) + ($23)|0);
  $27 = ($26>>>0)>($4>>>0);
  $$ = $27 ? $4 : $26;
  $28 = $12 & $mask$021;
  $29 = ($28|0)==(0);
  $30 = ((($p$020)) + 14|0);
  $31 = ($30>>>0)>($$>>>0);
  $or$cond9 = $29 | $31;
  L6: do {
   if ($or$cond9) {
    $result$1 = $result$023;
   } else {
    $32 = ((($p$020)) + 4|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = HEAP8[$35>>0]|0;
    $36 = $34&255;
    $37 = $36 << 8;
    $38 = ((($p$020)) + 7|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = $37 | $40;
    $42 = $$;
    $43 = $30;
    $44 = (($42) - ($43))|0;
    $45 = ($41*6)|0;
    $46 = ($44|0)<($45|0);
    $47 = (($44|0) / 6)&-1;
    $$10 = $46 ? $47 : $41;
    $cond = ($33<<24>>24)==(0);
    if ($cond) {
     $48 = HEAP32[$15>>2]|0;
     $49 = $48 & $mask$021;
     $50 = ($49|0)==(0);
     $51 = ($$10|0)==(0);
     if ($50) {
      if ($51) {
       $result$1 = $result$023;
       break;
      } else {
       $count2$017 = $$10;$p$116 = $30;
      }
      while(1) {
       $85 = HEAP8[$p$116>>0]|0;
       $86 = $85&255;
       $87 = $86 << 24;
       $88 = ((($p$116)) + 1|0);
       $89 = HEAP8[$88>>0]|0;
       $90 = $89&255;
       $91 = $90 << 16;
       $92 = $91 | $87;
       $93 = ((($p$116)) + 2|0);
       $94 = HEAP8[$93>>0]|0;
       $95 = $94&255;
       $96 = $95 << 8;
       $97 = $92 | $96;
       $98 = ((($p$116)) + 3|0);
       $99 = HEAP8[$98>>0]|0;
       $100 = $99&255;
       $101 = $97 | $100;
       $102 = ($101|0)==($14|0);
       if ($102) {
        $p$116$lcssa = $p$116;
        break;
       }
       $111 = ((($p$116)) + 6|0);
       $112 = (($count2$017) + -1)|0;
       $113 = ($112|0)==(0);
       if ($113) {
        $result$1 = $result$023;
        break L6;
       } else {
        $count2$017 = $112;$p$116 = $111;
       }
      }
      $103 = ((($p$116$lcssa)) + 4|0);
      $104 = HEAP8[$103>>0]|0;
      $105 = $104 << 24 >> 24;
      $106 = $105 << 8;
      $107 = ((($p$116$lcssa)) + 5|0);
      $108 = HEAP8[$107>>0]|0;
      $109 = $108&255;
      $110 = $106 | $109;
      $value$0 = $110;
     } else {
      if ($51) {
       $result$1 = $result$023;
       break;
      } else {
       $max$015 = $$10;$min$014 = 0;
      }
      while(1) {
       $52 = (($max$015) + ($min$014))|0;
       $53 = $52 >>> 1;
       $54 = ($53*6)|0;
       $$sum2 = (($54) + 14)|0;
       $55 = (($p$020) + ($$sum2)|0);
       $56 = HEAP8[$55>>0]|0;
       $57 = $56&255;
       $58 = $57 << 24;
       $$sum3 = (($54) + 15)|0;
       $59 = (($p$020) + ($$sum3)|0);
       $60 = HEAP8[$59>>0]|0;
       $61 = $60&255;
       $62 = $61 << 16;
       $63 = $62 | $58;
       $$sum4 = (($54) + 16)|0;
       $64 = (($p$020) + ($$sum4)|0);
       $65 = HEAP8[$64>>0]|0;
       $66 = $65&255;
       $67 = $66 << 8;
       $68 = $63 | $67;
       $$sum5 = (($54) + 17)|0;
       $69 = (($p$020) + ($$sum5)|0);
       $70 = HEAP8[$69>>0]|0;
       $71 = $70&255;
       $72 = $68 | $71;
       $73 = ($72|0)==($14|0);
       if ($73) {
        $$lcssa = $54;
        break;
       }
       $82 = ($72>>>0)<($14>>>0);
       $83 = (($53) + 1)|0;
       $$min$0 = $82 ? $83 : $min$014;
       $max$0$ = $82 ? $max$015 : $53;
       $84 = ($$min$0>>>0)<($max$0$>>>0);
       if ($84) {
        $max$015 = $max$0$;$min$014 = $$min$0;
       } else {
        $result$1 = $result$023;
        break L6;
       }
      }
      $$sum1 = (($$lcssa) + 18)|0;
      $74 = (($p$020) + ($$sum1)|0);
      $75 = HEAP8[$74>>0]|0;
      $76 = $75 << 24 >> 24;
      $77 = $76 << 8;
      $$sum6 = (($$lcssa) + 19)|0;
      $78 = (($p$020) + ($$sum6)|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = $79&255;
      $81 = $77 | $80;
      $value$0 = $81;
     }
     $114 = $25 & 8;
     $115 = ($114<<24>>24)==(0);
     $116 = $115 ? $result$023 : 0;
     $$value$0 = (($value$0) + ($116))|0;
     $result$1 = $$value$0;
    } else {
     $result$1 = $result$023;
    }
   }
  } while(0);
  $117 = (($count$022) + -1)|0;
  $118 = $mask$021 << 1;
  $119 = ($117|0)==(0);
  $120 = ((($$)) + 6|0);
  $121 = ($120>>>0)>($4>>>0);
  $or$cond = $121 | $119;
  if ($or$cond) {
   $result$0$lcssa = $result$1;
   break;
  } else {
   $35 = $120;$count$022 = $117;$mask$021 = $118;$p$020 = $$;$result$023 = $result$1;
  }
 }
 return ($result$0$lcssa|0);
}
function _T1_Size_Done($t1size) {
 $t1size = $t1size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($t1size)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = (_T1_Size_Get_Globals_Funcs($t1size)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($3)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$0>>2]|0;
  FUNCTION_TABLE_vi[$6 & 127]($7);
 }
 HEAP32[$0>>2] = 0;
 return;
}
function _T1_Size_Init($t1size) {
 $t1size = $t1size|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $globals = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $globals = sp;
 $0 = (_T1_Size_Get_Globals_Funcs($t1size)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 }
 $2 = HEAP32[$t1size>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($2)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 168|0);
 $7 = (FUNCTION_TABLE_iiii[$3 & 127]($5,$6,$globals)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $error$0 = $7;
  STACKTOP = sp;return ($error$0|0);
 }
 $9 = HEAP32[$globals>>2]|0;
 $10 = ((($t1size)) + 40|0);
 HEAP32[$10>>2] = $9;
 $error$0 = 0;
 STACKTOP = sp;return ($error$0|0);
}
function _T1_Size_Request($t1size,$req) {
 $t1size = $t1size|0;
 $req = $req|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_T1_Size_Get_Globals_Funcs($t1size)|0);
 $1 = HEAP32[$t1size>>2]|0;
 _FT_Request_Metrics($1,$req);
 $2 = ($0|0)==(0|0);
 if ($2) {
  return 0;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($t1size)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($t1size)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($t1size)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 (FUNCTION_TABLE_iiiiii[$4 & 63]($6,$8,$10,0,0)|0);
 return 0;
}
function _T1_GlyphSlot_Done($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($slot)) + 156|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _T1_GlyphSlot_Init($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($slot)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 552|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return 0;
 }
 $5 = ((($1)) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_FT_Get_Module($8,88847)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  return 0;
 }
 $11 = ((($3)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 63]($9)|0);
 $14 = ((($slot)) + 156|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 36|0);
 HEAP32[$16>>2] = $13;
 return 0;
}
function _T1_Face_Done($t1face) {
 $t1face = $t1face|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($t1face|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($t1face)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($t1face)) + 132|0);
 $4 = ((($t1face)) + 548|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _ft_mem_free($2,$5);
  HEAP32[$4>>2] = 0;
  $7 = ((($t1face)) + 544|0);
  HEAP32[$7>>2] = 0;
 }
 _T1_Done_Blend($t1face);
 $8 = ((($t1face)) + 532|0);
 HEAP32[$8>>2] = 0;
 $9 = HEAP32[$3>>2]|0;
 _ft_mem_free($2,$9);
 HEAP32[$3>>2] = 0;
 $10 = ((($t1face)) + 136|0);
 $11 = HEAP32[$10>>2]|0;
 _ft_mem_free($2,$11);
 HEAP32[$10>>2] = 0;
 $12 = ((($t1face)) + 140|0);
 $13 = HEAP32[$12>>2]|0;
 _ft_mem_free($2,$13);
 HEAP32[$12>>2] = 0;
 $14 = ((($t1face)) + 144|0);
 $15 = HEAP32[$14>>2]|0;
 _ft_mem_free($2,$15);
 HEAP32[$14>>2] = 0;
 $16 = ((($t1face)) + 148|0);
 $17 = HEAP32[$16>>2]|0;
 _ft_mem_free($2,$17);
 HEAP32[$16>>2] = 0;
 $18 = ((($t1face)) + 428|0);
 $19 = HEAP32[$18>>2]|0;
 _ft_mem_free($2,$19);
 HEAP32[$18>>2] = 0;
 $20 = ((($t1face)) + 424|0);
 $21 = HEAP32[$20>>2]|0;
 _ft_mem_free($2,$21);
 HEAP32[$20>>2] = 0;
 $22 = ((($t1face)) + 420|0);
 $23 = HEAP32[$22>>2]|0;
 _ft_mem_free($2,$23);
 HEAP32[$22>>2] = 0;
 $24 = ((($t1face)) + 408|0);
 $25 = HEAP32[$24>>2]|0;
 _ft_mem_free($2,$25);
 HEAP32[$24>>2] = 0;
 $26 = ((($t1face)) + 412|0);
 $27 = HEAP32[$26>>2]|0;
 _ft_mem_free($2,$27);
 HEAP32[$26>>2] = 0;
 $28 = ((($t1face)) + 392|0);
 $29 = HEAP32[$28>>2]|0;
 _ft_mem_free($2,$29);
 HEAP32[$28>>2] = 0;
 $30 = ((($t1face)) + 396|0);
 $31 = HEAP32[$30>>2]|0;
 _ft_mem_free($2,$31);
 HEAP32[$30>>2] = 0;
 $32 = ((($t1face)) + 400|0);
 $33 = HEAP32[$32>>2]|0;
 _ft_mem_free($2,$33);
 HEAP32[$32>>2] = 0;
 $34 = ((($t1face)) + 372|0);
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 _ft_mem_free($2,$36);
 HEAP32[$35>>2] = 0;
 $37 = ((($34)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 _ft_mem_free($2,$38);
 HEAP32[$37>>2] = 0;
 $39 = ((($t1face)) + 364|0);
 $40 = HEAP32[$39>>2]|0;
 _ft_mem_free($2,$40);
 HEAP32[$39>>2] = 0;
 $41 = ((($t1face)) + 492|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if (!($43)) {
  _T1_Done_Metrics($2,$42);
 }
 $44 = ((($t1face)) + 20|0);
 HEAP32[$44>>2] = 0;
 $45 = ((($t1face)) + 24|0);
 HEAP32[$45>>2] = 0;
 return;
}
function _T1_Face_Init($stream,$t1face,$face_index,$num_params,$params) {
 $stream = $stream|0;
 $t1face = $t1face|0;
 $face_index = $face_index|0;
 $num_params = $num_params|0;
 $params = $params|0;
 var $$ = 0, $$5 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $charmap = 0, $clazz$0 = 0, $clazz$0$in = 0, $error$1 = 0, $family$0$ph$be = 0, $family$0$ph12 = 0, $full$0$ph$be = 0, $full$0$ph13 = 0, $full$011 = 0;
 var $full$011$lcssa = 0, $full$011$lcssa29 = 0, $full$011$lcssa29$lcssa31 = 0, $max_advance = 0, $not$ = 0, $or$cond3 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $max_advance = sp + 12|0;
 $charmap = sp;
 $0 = ((($t1face)) + 132|0);
 HEAP32[$t1face>>2] = 1;
 $1 = ((($t1face)) + 96|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_ft_module_get_service($2,89321)|0);
 $4 = ((($t1face)) + 484|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_FT_Get_Module_Interface($7,89338)|0);
 $9 = ((($t1face)) + 488|0);
 HEAP32[$9>>2] = $8;
 $10 = ($8|0)==(0|0);
 if ($10) {
  $error$1 = 11;
  STACKTOP = sp;return ($error$1|0);
 }
 $11 = HEAP32[$1>>2]|0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_FT_Get_Module_Interface($13,88847)|0);
 $15 = ((($t1face)) + 552|0);
 HEAP32[$15>>2] = $14;
 $16 = (_T1_Open_Face($t1face)|0);
 $17 = ($16|0)!=(0);
 $18 = ($face_index|0)<(0);
 $or$cond3 = $18 | $17;
 if ($or$cond3) {
  $error$1 = $16;
  STACKTOP = sp;return ($error$1|0);
 }
 $19 = ($face_index|0)>(0);
 if ($19) {
  $error$1 = 6;
  STACKTOP = sp;return ($error$1|0);
 }
 $20 = ((($t1face)) + 416|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($t1face)) + 16|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($t1face)) + 4|0);
 HEAP32[$23>>2] = 0;
 $24 = ((($t1face)) + 8|0);
 $25 = ((($t1face)) + 156|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ($26<<24>>24)==(0);
 $$ = $27 ? 2577 : 2581;
 HEAP32[$24>>2] = $$;
 $28 = ((($t1face)) + 532|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  $31 = $$ | 256;
  HEAP32[$24>>2] = $31;
 }
 $32 = ((($t1face)) + 144|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($t1face)) + 20|0);
 HEAP32[$34>>2] = $33;
 $35 = ((($t1face)) + 24|0);
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$34>>2]|0;
 $37 = ($36|0)==(0|0);
 L13: do {
  if ($37) {
   $52 = ((($t1face)) + 364|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   if ($54) {
    label = 20;
   } else {
    HEAP32[$34>>2] = $53;
    label = 20;
   }
  } else {
   $38 = ((($t1face)) + 140|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0|0);
   if ($40) {
    label = 20;
   } else {
    $41 = HEAP8[$39>>0]|0;
    $42 = ($41<<24>>24)==(0);
    L18: do {
     if (!($42)) {
      $147 = $41;$family$0$ph12 = $36;$full$0$ph13 = $39;
      L19: while(1) {
       $43 = HEAP8[$family$0$ph12>>0]|0;
       $45 = $147;$full$011 = $full$0$ph13;
       L21: while(1) {
        $44 = ($45<<24>>24)==($43<<24>>24);
        if ($44) {
         $full$011$lcssa = $full$011;
         label = 11;
         break;
        }
        switch ($45<<24>>24) {
        case 45: case 32:  {
         break;
        }
        default: {
         $full$011$lcssa29 = $full$011;
         label = 15;
         break L21;
        }
        }
        $49 = ((($full$011)) + 1|0);
        $50 = HEAP8[$49>>0]|0;
        $51 = ($50<<24>>24)==(0);
        if ($51) {
         break L18;
        } else {
         $45 = $50;$full$011 = $49;
        }
       }
       if ((label|0) == 11) {
        label = 0;
        $46 = ((($full$011$lcssa)) + 1|0);
        $full$0$ph$be = $46;
       }
       else if ((label|0) == 15) {
        label = 0;
        switch ($43<<24>>24) {
        case 0:  {
         $full$011$lcssa29$lcssa31 = $full$011$lcssa29;
         break L19;
         break;
        }
        case 45: case 32:  {
         $full$0$ph$be = $full$011$lcssa29;
         break;
        }
        default: {
         label = 20;
         break L13;
        }
        }
       }
       $family$0$ph$be = ((($family$0$ph12)) + 1|0);
       $47 = HEAP8[$full$0$ph$be>>0]|0;
       $48 = ($47<<24>>24)==(0);
       if ($48) {
        break L18;
       } else {
        $147 = $47;$family$0$ph12 = $family$0$ph$be;$full$0$ph13 = $full$0$ph$be;
       }
      }
      HEAP32[$35>>2] = $full$011$lcssa29$lcssa31;
      $56 = $full$011$lcssa29$lcssa31;
      label = 21;
      break L13;
     }
    } while(0);
    HEAP32[$35>>2] = 89763;
   }
  }
 } while(0);
 if ((label|0) == 20) {
  $$pr = HEAP32[$35>>2]|0;
  $56 = $$pr;
  label = 21;
 }
 do {
  if ((label|0) == 21) {
   $55 = ($56|0)==(0|0);
   if ($55) {
    $57 = ((($t1face)) + 148|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($58|0)==(0|0);
    if ($59) {
     HEAP32[$35>>2] = 89763;
     break;
    } else {
     HEAP32[$35>>2] = $58;
     break;
    }
   }
  }
 } while(0);
 $60 = ((($t1face)) + 12|0);
 $61 = ((($t1face)) + 152|0);
 $62 = HEAP32[$61>>2]|0;
 $not$ = ($62|0)!=(0);
 $$5 = $not$&1;
 HEAP32[$60>>2] = $$5;
 $63 = ((($t1face)) + 148|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)==(0|0);
 do {
  if (!($65)) {
   $66 = (_strcmp($64,89783)|0);
   $67 = ($66|0)==(0);
   if (!($67)) {
    $68 = (_strcmp($64,88856)|0);
    $69 = ($68|0)==(0);
    if (!($69)) {
     break;
    }
   }
   $70 = HEAP32[$60>>2]|0;
   $71 = $70 | 2;
   HEAP32[$60>>2] = $71;
  }
 } while(0);
 $72 = ((($t1face)) + 28|0);
 HEAP32[$72>>2] = 0;
 $73 = ((($t1face)) + 32|0);
 HEAP32[$73>>2] = 0;
 $74 = ((($t1face)) + 460|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $75 >> 16;
 $77 = ((($t1face)) + 52|0);
 HEAP32[$77>>2] = $76;
 $78 = ((($74)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $79 >> 16;
 $81 = ((($t1face)) + 56|0);
 HEAP32[$81>>2] = $80;
 $82 = ((($74)) + 8|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + 65535)|0;
 $85 = $84 >> 16;
 $86 = ((($t1face)) + 60|0);
 HEAP32[$86>>2] = $85;
 $87 = ((($74)) + 12|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 65535)|0;
 $90 = $89 >> 16;
 $91 = ((($t1face)) + 64|0);
 HEAP32[$91>>2] = $90;
 $92 = ((($t1face)) + 68|0);
 $93 = HEAP16[$92>>1]|0;
 $94 = ($93<<16>>16)==(0);
 if ($94) {
  HEAP16[$92>>1] = 1000;
 }
 $95 = HEAP32[$91>>2]|0;
 $96 = $95&65535;
 $97 = ((($t1face)) + 70|0);
 HEAP16[$97>>1] = $96;
 $98 = HEAP32[$81>>2]|0;
 $99 = $98&65535;
 $100 = ((($t1face)) + 72|0);
 HEAP16[$100>>1] = $99;
 $101 = HEAP16[$92>>1]|0;
 $102 = $101&65535;
 $103 = ($102*12)|0;
 $104 = (($103>>>0) / 10)&-1;
 $105 = $104&65535;
 $106 = ((($t1face)) + 74|0);
 HEAP16[$106>>1] = $105;
 $sext = $104 << 16;
 $107 = $sext >> 16;
 $108 = HEAP16[$97>>1]|0;
 $109 = $108 << 16 >> 16;
 $110 = HEAP16[$100>>1]|0;
 $111 = $110 << 16 >> 16;
 $112 = (($109) - ($111))|0;
 $113 = ($107|0)<($112|0);
 if ($113) {
  $114 = $112&65535;
  HEAP16[$106>>1] = $114;
 }
 $115 = HEAP32[$86>>2]|0;
 $116 = $115&65535;
 $117 = ((($t1face)) + 76|0);
 HEAP16[$117>>1] = $116;
 $118 = (_T1_Compute_Max_Advance($t1face,$max_advance)|0);
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[$max_advance>>2]|0;
  $121 = (_FT_RoundFix($120)|0);
  $122 = $121 >>> 16;
  $123 = $122&65535;
  HEAP16[$117>>1] = $123;
 }
 $124 = HEAP16[$106>>1]|0;
 $125 = ((($t1face)) + 78|0);
 HEAP16[$125>>1] = $124;
 $126 = ((($0)) + 26|0);
 $127 = HEAP16[$126>>1]|0;
 $128 = ((($t1face)) + 80|0);
 HEAP16[$128>>1] = $127;
 $129 = ((($t1face)) + 160|0);
 $130 = HEAP16[$129>>1]|0;
 $131 = ((($t1face)) + 82|0);
 HEAP16[$131>>1] = $130;
 $132 = ($3|0)==(0|0);
 if ($132) {
  $error$1 = 0;
  STACKTOP = sp;return ($error$1|0);
 }
 $133 = ((($8)) + 20|0);
 $134 = HEAP32[$133>>2]|0;
 HEAP32[$charmap>>2] = $t1face;
 $135 = ((($charmap)) + 8|0);
 HEAP16[$135>>1] = 3;
 $136 = ((($charmap)) + 10|0);
 HEAP16[$136>>1] = 1;
 $137 = ((($charmap)) + 4|0);
 HEAP32[$137>>2] = 1970170211;
 $138 = ((($134)) + 12|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (_FT_CMap_New($139,0,$charmap,0)|0);
 switch ($140|0) {
 case 0: case 163:  {
  break;
 }
 default: {
  $error$1 = $140;
  STACKTOP = sp;return ($error$1|0);
 }
 }
 HEAP16[$135>>1] = 7;
 $141 = ((($t1face)) + 368|0);
 $142 = HEAP32[$141>>2]|0;
 switch ($142|0) {
 case 2:  {
  HEAP32[$137>>2] = 1094995778;
  HEAP16[$136>>1] = 0;
  $clazz$0$in = $134;
  break;
 }
 case 4:  {
  HEAP32[$137>>2] = 1094992453;
  HEAP16[$136>>1] = 1;
  $143 = ((($134)) + 4|0);
  $clazz$0$in = $143;
  break;
 }
 case 1:  {
  HEAP32[$137>>2] = 1094992451;
  HEAP16[$136>>1] = 2;
  $144 = ((($134)) + 8|0);
  $clazz$0$in = $144;
  break;
 }
 case 3:  {
  HEAP32[$137>>2] = 1818326065;
  HEAP16[$136>>1] = 3;
  $clazz$0$in = $138;
  break;
 }
 default: {
  $error$1 = 0;
  STACKTOP = sp;return ($error$1|0);
 }
 }
 $clazz$0 = HEAP32[$clazz$0$in>>2]|0;
 $145 = ($clazz$0|0)==(0|0);
 if ($145) {
  $error$1 = 0;
  STACKTOP = sp;return ($error$1|0);
 }
 $146 = (_FT_CMap_New($clazz$0,0,$charmap,0)|0);
 $error$1 = $146;
 STACKTOP = sp;return ($error$1|0);
}
function _T1_Driver_Init($driver) {
 $driver = $driver|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _T1_Driver_Done($driver) {
 $driver = $driver|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _T1_Size_Get_Globals_Funcs($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 552|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 96|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_FT_Get_Module($6,88847)|0);
 $8 = ($7|0)!=(0|0);
 $9 = ($2|0)!=(0|0);
 $or$cond = $9 & $8;
 if (!($or$cond)) {
  $13 = 0;
  return ($13|0);
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $13 = 0;
  return ($13|0);
 }
 $12 = (FUNCTION_TABLE_ii[$10 & 63]($7)|0);
 $13 = $12;
 return ($13|0);
}
function _T1_Done_Metrics($memory,$fi) {
 $memory = $memory|0;
 $fi = $fi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($fi)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 _ft_mem_free($memory,$1);
 HEAP32[$0>>2] = 0;
 $2 = ((($fi)) + 40|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($fi)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 _ft_mem_free($memory,$4);
 HEAP32[$3>>2] = 0;
 $5 = ((($fi)) + 32|0);
 HEAP32[$5>>2] = 0;
 _ft_mem_free($memory,$fi);
 return;
}
function _T1_Read_Metrics($t1_face,$stream) {
 $t1_face = $t1_face|0;
 $stream = $stream|0;
 var $$pr = 0, $$pr2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $fi$0 = 0, $fi$1 = 0, $parser = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $parser = sp + 4|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 2;
 $2 = ((($t1_face)) + 132|0);
 $3 = (_ft_mem_alloc($1,44,$error)|0);
 $4 = HEAP32[$error>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ((($stream)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_FT_Stream_EnterFrame($stream,$7)|0);
  HEAP32[$error>>2] = $8;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = ((($3)) + 4|0);
   $11 = ((($t1_face)) + 460|0);
   ;HEAP32[$10>>2]=HEAP32[$11>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$11+12>>2]|0;
   $12 = ((($11)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($3)) + 20|0);
   HEAP32[$14>>2] = $13;
   $15 = ((($11)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($3)) + 24|0);
   HEAP32[$17>>2] = $16;
   $18 = ((($t1_face)) + 488|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($19)) + 24|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    label = 6;
   } else {
    $23 = HEAP32[$21>>2]|0;
    $24 = HEAP32[$0>>2]|0;
    $25 = ((($stream)) + 32|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($stream)) + 36|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_iiiii[$23 & 63]($parser,$24,$26,$28)|0);
    HEAP32[$error>>2] = $29;
    $30 = ($29|0)==(0);
    if ($30) {
     $31 = ((($parser)) + 8|0);
     HEAP32[$31>>2] = $3;
     $32 = ((($parser)) + 12|0);
     HEAP32[$32>>2] = 64;
     $33 = ((($parser)) + 16|0);
     HEAP32[$33>>2] = $2;
     $34 = HEAP32[$20>>2]|0;
     $35 = ((($34)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = (FUNCTION_TABLE_ii[$36 & 63]($parser)|0);
     HEAP32[$error>>2] = $37;
     $38 = HEAP32[$20>>2]|0;
     $39 = ((($38)) + 4|0);
     $40 = HEAP32[$39>>2]|0;
     FUNCTION_TABLE_vi[$40 & 127]($parser);
     label = 6;
    } else {
     $42 = $29;
    }
   }
   if ((label|0) == 6) {
    $$pr = HEAP32[$error>>2]|0;
    $42 = $$pr;
   }
   $41 = ($42|0)==(2);
   if ($41) {
    $43 = ((($stream)) + 32|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$6>>2]|0;
    $46 = ($45>>>0)>(6);
    if ($46) {
     $47 = ((($44)) + 1|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = ($48&255)<(4);
     if ($49) {
      $50 = ((($44)) + 2|0);
      $51 = ((($44)) + 5|0);
      $52 = HEAP8[$51>>0]|0;
      $53 = $52&255;
      $54 = $53 << 24;
      $55 = ((($44)) + 4|0);
      $56 = HEAP8[$55>>0]|0;
      $57 = $56&255;
      $58 = $57 << 16;
      $59 = $58 | $54;
      $60 = ((($44)) + 3|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61&255;
      $63 = $62 << 8;
      $64 = $59 | $63;
      $65 = HEAP8[$50>>0]|0;
      $66 = $65&255;
      $67 = $64 | $66;
      $68 = ($67|0)==($45|0);
      if ($68) {
       $69 = (_T1_Read_PFM($t1_face,$stream,$3)|0);
       HEAP32[$error>>2] = $69;
       $71 = $69;
      } else {
       label = 12;
      }
     } else {
      label = 12;
     }
    } else {
     label = 12;
    }
   } else {
    label = 12;
   }
   if ((label|0) == 12) {
    $$pr2 = HEAP32[$error>>2]|0;
    $71 = $$pr2;
   }
   $70 = ($71|0)==(0);
   if ($70) {
    ;HEAP32[$11>>2]=HEAP32[$10>>2]|0;HEAP32[$11+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$11+12>>2]=HEAP32[$10+12>>2]|0;
    $72 = HEAP32[$10>>2]|0;
    $73 = $72 >> 16;
    $74 = ((($t1_face)) + 52|0);
    HEAP32[$74>>2] = $73;
    $75 = ((($3)) + 8|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 >> 16;
    $78 = ((($t1_face)) + 56|0);
    HEAP32[$78>>2] = $77;
    $79 = ((($3)) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80) + 65535)|0;
    $82 = $81 >> 16;
    $83 = ((($t1_face)) + 60|0);
    HEAP32[$83>>2] = $82;
    $84 = ((($3)) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($85) + 65535)|0;
    $87 = $86 >> 16;
    $88 = ((($t1_face)) + 64|0);
    HEAP32[$88>>2] = $87;
    $89 = HEAP32[$14>>2]|0;
    $90 = (($89) + 32768)|0;
    $91 = $90 >>> 16;
    $92 = $91&65535;
    $93 = ((($t1_face)) + 70|0);
    HEAP16[$93>>1] = $92;
    $94 = HEAP32[$17>>2]|0;
    $95 = (($94) + 32768)|0;
    $96 = $95 >>> 16;
    $97 = $96&65535;
    $98 = ((($t1_face)) + 72|0);
    HEAP16[$98>>1] = $97;
    $99 = ((($3)) + 40|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($100|0)==(0);
    if ($101) {
     $fi$0 = $3;
    } else {
     $102 = ((($t1_face)) + 8|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $103 | 64;
     HEAP32[$102>>2] = $104;
     $105 = ((($t1_face)) + 492|0);
     HEAP32[$105>>2] = $3;
     $fi$0 = 0;
    }
   } else {
    $fi$0 = $3;
   }
   _FT_Stream_ExitFrame($stream);
   $fi$1 = $fi$0;
  } else {
   $fi$1 = $3;
  }
 } else {
  $fi$1 = $3;
 }
 $106 = ($fi$1|0)==(0|0);
 if ($106) {
  $107 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($107|0);
 }
 _T1_Done_Metrics($1,$fi$1);
 $107 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($107|0);
}
function _T1_Get_Kerning($fi,$glyph1,$glyph2,$kerning) {
 $fi = $fi|0;
 $glyph1 = $glyph1|0;
 $glyph2 = $glyph2|0;
 $kerning = $kerning|0;
 var $$lcssa = 0, $$lcssa38 = 0, $$lcssa40 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max$0$ph7 = 0, $min$0$ph8 = 0, $min$06 = 0;
 var $min$06$lcssa = 0, $min$06$lcssa36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $glyph1 << 16;
 $1 = $0 | $glyph2;
 $2 = ((($fi)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($fi)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $$sum = (($5) + -1)|0;
 $6 = ($$sum|0)<(0);
 L1: do {
  if (!($6)) {
   $7 = (($3) + ($$sum<<4)|0);
   $max$0$ph7 = $7;$min$0$ph8 = $3;
   L3: while(1) {
    $8 = $max$0$ph7;
    $min$06 = $min$0$ph8;
    while(1) {
     $9 = $min$06;
     $10 = (($8) - ($9))|0;
     $11 = $10 >> 4;
     $12 = (($11|0) / 2)&-1;
     $13 = (($min$06) + ($12<<4)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = $14 << 16;
     $16 = (((($min$06) + ($12<<4)|0)) + 4|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = $15 | $17;
     $19 = ($18|0)==($1|0);
     if ($19) {
      $$lcssa = $12;$min$06$lcssa = $min$06;
      break L3;
     }
     $25 = ($18>>>0)<($1>>>0);
     if (!($25)) {
      $$lcssa38 = $10;$$lcssa40 = $12;$min$06$lcssa36 = $min$06;
      break;
     }
     $$sum2 = (($12) + 1)|0;
     $26 = (($min$06) + ($$sum2<<4)|0);
     $27 = ($26>>>0)>($max$0$ph7>>>0);
     if ($27) {
      break L1;
     } else {
      $min$06 = $26;
     }
    }
    $$sum1 = (($$lcssa40) + -1)|0;
    $28 = (($min$06$lcssa36) + ($$sum1<<4)|0);
    $29 = ($$lcssa38|0)<(32);
    if ($29) {
     break L1;
    } else {
     $max$0$ph7 = $28;$min$0$ph8 = $min$06$lcssa36;
    }
   }
   $20 = (((($min$06$lcssa) + ($$lcssa<<4)|0)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$kerning>>2] = $21;
   $22 = (((($min$06$lcssa) + ($$lcssa<<4)|0)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($kerning)) + 4|0);
   HEAP32[$24>>2] = $23;
   return;
  }
 } while(0);
 HEAP32[$kerning>>2] = 0;
 $30 = ((($kerning)) + 4|0);
 HEAP32[$30>>2] = 0;
 return;
}
function _T1_Get_Track_Kerning($face,$ptsize,$degree,$kerning) {
 $face = $face|0;
 $ptsize = $ptsize|0;
 $degree = $degree|0;
 $kerning = $kerning|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 492|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 6;
  return ($$0|0);
 }
 $3 = ((($1)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if (!($5)) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($1)) + 28|0);
 $i$01 = 0;
 while(1) {
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + (($i$01*20)|0)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($degree|0);
  do {
   if ($10) {
    $11 = (((($7) + (($i$01*20)|0)|0)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)>($ptsize|0);
    if ($13) {
     $14 = (((($7) + (($i$01*20)|0)|0)) + 8|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$kerning>>2] = $15;
     break;
    }
    $16 = (((($7) + (($i$01*20)|0)|0)) + 12|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)<($ptsize|0);
    if ($18) {
     $19 = (((($7) + (($i$01*20)|0)|0)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$kerning>>2] = $20;
     break;
    } else {
     $21 = (($ptsize) - ($12))|0;
     $22 = (((($7) + (($i$01*20)|0)|0)) + 16|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = (((($7) + (($i$01*20)|0)|0)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = (($23) - ($25))|0;
     $27 = (($17) - ($12))|0;
     $28 = (_FT_MulDiv($21,$26,$27)|0);
     $29 = HEAP32[$24>>2]|0;
     $30 = (($29) + ($28))|0;
     HEAP32[$kerning>>2] = $30;
     break;
    }
   }
  } while(0);
  $31 = (($i$01) + 1)|0;
  $32 = HEAP32[$3>>2]|0;
  $33 = ($31|0)<($32|0);
  if ($33) {
   $i$01 = $31;
  } else {
   $$0 = 0;
   break;
  }
 }
 return ($$0|0);
}
function _t1_get_index($name,$len,$user_data) {
 $name = $name|0;
 $len = $len|0;
 $user_data = $user_data|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($len>>>0)>(65535);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = ((($user_data)) + 284|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($user_data)) + 288|0);
 $5 = HEAP32[$4>>2]|0;
 $n$01 = 0;
 while(1) {
  $6 = (($5) + ($n$01<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $9 = HEAP8[$7>>0]|0;
   $10 = HEAP8[$name>>0]|0;
   $11 = ($9<<24>>24)==($10<<24>>24);
   if ($11) {
    $12 = (_strlen($7)|0);
    $13 = ($12|0)==($len|0);
    if ($13) {
     $14 = (_strncmp($7,$name,$len)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      $$0 = $n$01;
      label = 9;
      break;
     }
    }
   }
  }
  $16 = (($n$01) + 1)|0;
  $17 = HEAP32[$1>>2]|0;
  $18 = ($16|0)<($17|0);
  if ($18) {
   $n$01 = $16;
  } else {
   $$0 = 0;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($$0|0);
 }
 return (0)|0;
}
function _T1_Read_PFM($t1_face,$stream,$fi) {
 $t1_face = $t1_face|0;
 $stream = $stream|0;
 $fi = $fi|0;
 var $$lcssa = 0, $$pr = 0, $$pr12 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error = 0, $kp$013 = 0, $n$015 = 0, $p$014 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($stream)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($stream)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 101|0);
 $7 = ($6>>>0)>($5>>>0);
 L1: do {
  if ($7) {
   HEAP32[$error>>2] = 2;
  } else {
   $8 = ((($3)) + 99|0);
   $9 = ((($3)) + 100|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 << 8;
   $13 = HEAP8[$8>>0]|0;
   $14 = $13&255;
   $15 = $12 | $14;
   $$sum1 = (($15) + 135)|0;
   $16 = (($3) + ($$sum1)|0);
   $17 = ($16>>>0)>($5>>>0);
   if (!($17)) {
    $$sum = (($15) + 117)|0;
    $18 = (($3) + ($$sum)|0);
    $$sum2 = (($15) + 118)|0;
    $19 = (($3) + ($$sum2)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $22 = $21 << 8;
    $23 = HEAP8[$18>>0]|0;
    $24 = $23&255;
    $25 = $22 | $24;
    $26 = ($25>>>0)<(18);
    if (!($26)) {
     $$sum3 = (($15) + 131)|0;
     $27 = (($3) + ($$sum3)|0);
     $$sum4 = (($15) + 134)|0;
     $28 = (($3) + ($$sum4)|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = $29&255;
     $31 = $30 << 24;
     $$sum5 = (($15) + 133)|0;
     $32 = (($3) + ($$sum5)|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = $33&255;
     $35 = $34 << 16;
     $36 = $35 | $31;
     $$sum6 = (($15) + 132)|0;
     $37 = (($3) + ($$sum6)|0);
     $38 = HEAP8[$37>>0]|0;
     $39 = $38&255;
     $40 = $39 << 8;
     $41 = $36 | $40;
     $42 = HEAP8[$27>>0]|0;
     $43 = $42&255;
     $44 = $41 | $43;
     $45 = (($3) + ($44)|0);
     $46 = ($44|0)==(0);
     if (!($46)) {
      $$sum7 = (($44) + 2)|0;
      $47 = (($3) + ($$sum7)|0);
      $48 = ($47>>>0)>($5>>>0);
      if ($48) {
       HEAP32[$error>>2] = 2;
       break;
      }
      $$sum8 = (($44) + 1)|0;
      $49 = (($3) + ($$sum8)|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = $50&255;
      $52 = $51 << 8;
      $53 = HEAP8[$45>>0]|0;
      $54 = $53&255;
      $55 = $52 | $54;
      $56 = ((($fi)) + 40|0);
      HEAP32[$56>>2] = $55;
      $57 = $55 << 2;
      $$sum9 = (($57) + ($$sum7))|0;
      $58 = (($3) + ($$sum9)|0);
      $59 = ($58>>>0)>($5>>>0);
      if ($59) {
       HEAP32[$error>>2] = 2;
       break;
      }
      $60 = ($55|0)==(0);
      if (!($60)) {
       $61 = (_ft_mem_realloc($1,16,0,$55,0,$error)|0);
       $62 = ((($fi)) + 36|0);
       HEAP32[$62>>2] = $61;
       $63 = HEAP32[$error>>2]|0;
       $64 = ($63|0)==(0);
       if (!($64)) {
        break;
       }
       $65 = HEAP32[$56>>2]|0;
       $66 = $65 << 2;
       $$sum10 = (($66) + ($$sum7))|0;
       $67 = (($3) + ($$sum10)|0);
       $68 = ((($t1_face)) + 92|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ((($t1_face)) + 36|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = ($71|0)>(0);
       L16: do {
        if ($72) {
         $73 = ((($t1_face)) + 40|0);
         $74 = HEAP32[$73>>2]|0;
         $n$015 = 0;
         while(1) {
          $78 = (($74) + ($n$015<<2)|0);
          $79 = HEAP32[$78>>2]|0;
          $80 = ((($79)) + 8|0);
          $81 = HEAP16[$80>>1]|0;
          $82 = ($81<<16>>16)==(7);
          $77 = (($n$015) + 1)|0;
          if ($82) {
           $$lcssa = $79;
           break;
          }
          $75 = HEAP32[$70>>2]|0;
          $76 = ($77|0)<($75|0);
          if ($76) {
           $n$015 = $77;
          } else {
           break L16;
          }
         }
         $83 = (_FT_Set_Charmap($t1_face,$$lcssa)|0);
         HEAP32[$error>>2] = $83;
         $84 = ($83|0)==(0);
         if (!($84)) {
          break L1;
         }
        }
       } while(0);
       $85 = ($$sum7|0)<($$sum10|0);
       if ($85) {
        $kp$013 = $61;$p$014 = $47;
        while(1) {
         $86 = HEAP8[$p$014>>0]|0;
         $87 = $86&255;
         $88 = (_FT_Get_Char_Index($t1_face,$87)|0);
         HEAP32[$kp$013>>2] = $88;
         $89 = ((($p$014)) + 1|0);
         $90 = HEAP8[$89>>0]|0;
         $91 = $90&255;
         $92 = (_FT_Get_Char_Index($t1_face,$91)|0);
         $93 = ((($kp$013)) + 4|0);
         HEAP32[$93>>2] = $92;
         $94 = ((($p$014)) + 2|0);
         $95 = ((($p$014)) + 3|0);
         $96 = HEAP8[$95>>0]|0;
         $97 = $96 << 24 >> 24;
         $98 = $97 << 8;
         $99 = HEAP8[$94>>0]|0;
         $100 = $99&255;
         $101 = $98 | $100;
         $102 = ((($kp$013)) + 8|0);
         HEAP32[$102>>2] = $101;
         $103 = ((($kp$013)) + 12|0);
         HEAP32[$103>>2] = 0;
         $104 = ((($kp$013)) + 16|0);
         $105 = ((($p$014)) + 4|0);
         $106 = ($105>>>0)<($67>>>0);
         if ($106) {
          $kp$013 = $104;$p$014 = $105;
         } else {
          break;
         }
        }
       }
       $107 = ($69|0)==(0|0);
       if ($107) {
        $$pr = HEAP32[$error>>2]|0;
        $110 = $$pr;
       } else {
        $108 = (_FT_Set_Charmap($t1_face,$69)|0);
        HEAP32[$error>>2] = $108;
        $110 = $108;
       }
       $109 = ($110|0)==(0);
       if ($109) {
        $111 = HEAP32[$62>>2]|0;
        $112 = HEAP32[$56>>2]|0;
        _qsort($111,$112,16,160);
       }
      }
     }
    }
   }
   $$pr12 = HEAP32[$error>>2]|0;
   $113 = ($$pr12|0)==(0);
   if ($113) {
    $117 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($117|0);
   }
  }
 } while(0);
 $114 = ((($fi)) + 36|0);
 $115 = HEAP32[$114>>2]|0;
 _ft_mem_free($1,$115);
 HEAP32[$114>>2] = 0;
 $116 = ((($fi)) + 40|0);
 HEAP32[$116>>2] = 0;
 $117 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($117|0);
}
function _compare_kern_pairs($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$a>>2]|0;
 $1 = $0 << 16;
 $2 = ((($a)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1 | $3;
 $5 = HEAP32[$b>>2]|0;
 $6 = $5 << 16;
 $7 = ((($b)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $6 | $8;
 $10 = ($4>>>0)>($9>>>0);
 $11 = ($4>>>0)<($9>>>0);
 $$ = $11 << 31 >> 31;
 $$0 = $10 ? 1 : $$;
 return ($$0|0);
}
function _T1_Get_Multi_Master($face,$master) {
 $face = $face|0;
 $master = $master|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 532|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$master>>2] = $4;
 $5 = HEAP32[$1>>2]|0;
 $6 = ((($master)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$3>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $error$0 = 0;
  return ($error$0|0);
 } else {
  $n$01 = 0;
 }
 while(1) {
  $9 = (((($master)) + 8|0) + (($n$01*12)|0)|0);
  $10 = (((($1)) + 8|0) + ($n$01<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$9>>2] = $11;
  $12 = (((((($1)) + 88|0) + (($n$01*12)|0)|0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (((((($master)) + 8|0) + (($n$01*12)|0)|0)) + 4|0);
  HEAP32[$15>>2] = $14;
  $16 = (((($1)) + 88|0) + (($n$01*12)|0)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($18) + -1)|0;
  $20 = HEAP32[$12>>2]|0;
  $21 = (($20) + ($19<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (((((($master)) + 8|0) + (($n$01*12)|0)|0)) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = (($n$01) + 1)|0;
  $25 = HEAP32[$3>>2]|0;
  $26 = ($24>>>0)<($25>>>0);
  if ($26) {
   $n$01 = $24;
  } else {
   $error$0 = 0;
   break;
  }
 }
 return ($error$0|0);
}
function _mm_axis_unmap($axismap,$ncv) {
 $axismap = $axismap|0;
 $ncv = $ncv|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j$05 = 0, $j$05$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($axismap)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<($ncv|0);
 if (!($3)) {
  $8 = ((($axismap)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 << 16;
  $$0 = $11;
  return ($$0|0);
 }
 $4 = HEAP8[$axismap>>0]|0;
 $5 = $4&255;
 $6 = ($4&255)>(1);
 L5: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $j$05 = 1;
   while(1) {
    $12 = (($7) + ($j$05<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)<($ncv|0);
    if (!($14)) {
     $$lcssa23 = $13;$j$05$lcssa = $j$05;
     break;
    }
    $31 = (($j$05) + 1)|0;
    $32 = HEAP8[$axismap>>0]|0;
    $33 = $32&255;
    $34 = ($31|0)<($33|0);
    if ($34) {
     $j$05 = $31;
    } else {
     $$lcssa = $33;
     break L5;
    }
   }
   $15 = (($j$05$lcssa) + -1)|0;
   $16 = (($7) + ($15<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($ncv) - ($17))|0;
   $19 = (($$lcssa23) - ($17))|0;
   $20 = (_FT_MulDiv($18,65536,$19)|0);
   $21 = ((($axismap)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + ($15<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 << 16;
   $26 = (($22) + ($j$05$lcssa<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) - ($24))|0;
   $29 = (_FT_MulDiv($20,$28,1)|0);
   $30 = (($29) + ($25))|0;
   $$0 = $30;
   return ($$0|0);
  } else {
   $$lcssa = $5;
  }
 } while(0);
 $35 = (($$lcssa) + -1)|0;
 $36 = ((($axismap)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + ($35<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 << 16;
 $$0 = $40;
 return ($$0|0);
}
function _mm_weights_unmap($weights,$axiscoords,$axis_count) {
 $weights = $weights|0;
 $axiscoords = $axiscoords|0;
 $axis_count = $axis_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 switch ($axis_count|0) {
 case 1:  {
  $0 = ((($weights)) + 4|0);
  $1 = HEAP32[$0>>2]|0;
  HEAP32[$axiscoords>>2] = $1;
  return;
  break;
 }
 case 2:  {
  $2 = ((($weights)) + 12|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($weights)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($3))|0;
  HEAP32[$axiscoords>>2] = $6;
  $7 = HEAP32[$2>>2]|0;
  $8 = ((($weights)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($7))|0;
  $11 = ((($axiscoords)) + 4|0);
  HEAP32[$11>>2] = $10;
  return;
  break;
 }
 case 3:  {
  $12 = ((($weights)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($weights)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + ($13))|0;
  $17 = ((($weights)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18))|0;
  $20 = ((($weights)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) + ($21))|0;
  HEAP32[$axiscoords>>2] = $22;
  $23 = HEAP32[$12>>2]|0;
  $24 = ((($weights)) + 24|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($23))|0;
  $27 = HEAP32[$17>>2]|0;
  $28 = (($26) + ($27))|0;
  $29 = ((($weights)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($28) + ($30))|0;
  $32 = ((($axiscoords)) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = HEAP32[$12>>2]|0;
  $34 = HEAP32[$24>>2]|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$14>>2]|0;
  $37 = (($35) + ($36))|0;
  $38 = ((($weights)) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($37) + ($39))|0;
  $41 = ((($axiscoords)) + 8|0);
  HEAP32[$41>>2] = $40;
  return;
  break;
 }
 default: {
  $42 = ((($weights)) + 60|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($weights)) + 52|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($43))|0;
  $47 = ((($weights)) + 44|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + ($48))|0;
  $50 = ((($weights)) + 36|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + ($51))|0;
  $53 = ((($weights)) + 28|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($52) + ($54))|0;
  $56 = ((($weights)) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($55) + ($57))|0;
  $59 = ((($weights)) + 12|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + ($60))|0;
  $62 = ((($weights)) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($61) + ($63))|0;
  HEAP32[$axiscoords>>2] = $64;
  $65 = HEAP32[$42>>2]|0;
  $66 = ((($weights)) + 56|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + ($65))|0;
  $69 = HEAP32[$47>>2]|0;
  $70 = (($68) + ($69))|0;
  $71 = ((($weights)) + 40|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + ($72))|0;
  $74 = HEAP32[$53>>2]|0;
  $75 = (($73) + ($74))|0;
  $76 = ((($weights)) + 24|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($75) + ($77))|0;
  $79 = HEAP32[$59>>2]|0;
  $80 = (($78) + ($79))|0;
  $81 = ((($weights)) + 8|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($80) + ($82))|0;
  $84 = ((($axiscoords)) + 4|0);
  HEAP32[$84>>2] = $83;
  $85 = HEAP32[$42>>2]|0;
  $86 = HEAP32[$66>>2]|0;
  $87 = (($86) + ($85))|0;
  $88 = HEAP32[$44>>2]|0;
  $89 = (($87) + ($88))|0;
  $90 = ((($weights)) + 48|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + ($91))|0;
  $93 = HEAP32[$53>>2]|0;
  $94 = (($92) + ($93))|0;
  $95 = HEAP32[$76>>2]|0;
  $96 = (($94) + ($95))|0;
  $97 = HEAP32[$56>>2]|0;
  $98 = (($96) + ($97))|0;
  $99 = ((($weights)) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = (($98) + ($100))|0;
  $102 = ((($axiscoords)) + 8|0);
  HEAP32[$102>>2] = $101;
  $103 = HEAP32[$42>>2]|0;
  $104 = HEAP32[$66>>2]|0;
  $105 = (($104) + ($103))|0;
  $106 = HEAP32[$44>>2]|0;
  $107 = (($105) + ($106))|0;
  $108 = HEAP32[$90>>2]|0;
  $109 = (($107) + ($108))|0;
  $110 = HEAP32[$47>>2]|0;
  $111 = (($109) + ($110))|0;
  $112 = HEAP32[$71>>2]|0;
  $113 = (($111) + ($112))|0;
  $114 = HEAP32[$50>>2]|0;
  $115 = (($113) + ($114))|0;
  $116 = ((($weights)) + 32|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (($115) + ($117))|0;
  $119 = ((($axiscoords)) + 12|0);
  HEAP32[$119>>2] = $118;
  return;
 }
 }
}
function _T1_Get_MM_Var($face,$master) {
 $face = $face|0;
 $master = $master|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $axiscoords = 0, $error = 0, $i$02 = 0, $i$11 = 0, $mmaster = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $mmaster = sp + 24|0;
 $error = sp + 16|0;
 $axiscoords = sp;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 532|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_T1_Get_Multi_Master($face,$mmaster)|0);
 HEAP32[$error>>2] = $4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $81 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($81|0);
 }
 $6 = HEAP32[$mmaster>>2]|0;
 $7 = ($6*24)|0;
 $8 = (($7) + 20)|0;
 $9 = (_ft_mem_alloc($1,$8,$error)|0);
 $10 = HEAP32[$error>>2]|0;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $81 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($81|0);
 }
 $12 = HEAP32[$mmaster>>2]|0;
 HEAP32[$9>>2] = $12;
 $13 = ((($mmaster)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($9)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($9)) + 8|0);
 HEAP32[$16>>2] = -1;
 $17 = ((($9)) + 20|0);
 $18 = ((($9)) + 12|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($9)) + 16|0);
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$mmaster>>2]|0;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = HEAP32[$mmaster>>2]|0;
  $i$02 = 0;
  while(1) {
   $23 = (((($mmaster)) + 8|0) + (($i$02*12)|0)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$18>>2]|0;
   $26 = (($25) + (($i$02*24)|0)|0);
   HEAP32[$26>>2] = $24;
   $27 = (((((($mmaster)) + 8|0) + (($i$02*12)|0)|0)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 << 16;
   $30 = HEAP32[$18>>2]|0;
   $31 = (((($30) + (($i$02*24)|0)|0)) + 4|0);
   HEAP32[$31>>2] = $29;
   $32 = (((((($mmaster)) + 8|0) + (($i$02*12)|0)|0)) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 << 16;
   $35 = HEAP32[$18>>2]|0;
   $36 = (((($35) + (($i$02*24)|0)|0)) + 12|0);
   HEAP32[$36>>2] = $34;
   $37 = HEAP32[$18>>2]|0;
   $38 = (((($37) + (($i$02*24)|0)|0)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (((($37) + (($i$02*24)|0)|0)) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($39))|0;
   $43 = (($42|0) / 2)&-1;
   $44 = (((($37) + (($i$02*24)|0)|0)) + 8|0);
   HEAP32[$44>>2] = $43;
   $45 = HEAP32[$18>>2]|0;
   $46 = (((($45) + (($i$02*24)|0)|0)) + 20|0);
   HEAP32[$46>>2] = -1;
   $47 = HEAP32[$18>>2]|0;
   $48 = (((($47) + (($i$02*24)|0)|0)) + 16|0);
   HEAP32[$48>>2] = -1;
   $49 = HEAP32[$18>>2]|0;
   $50 = (($49) + (($i$02*24)|0)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (_strcmp($51,89472)|0);
   $53 = ($52|0)==(0);
   do {
    if ($53) {
     $54 = (((($49) + (($i$02*24)|0)|0)) + 16|0);
     HEAP32[$54>>2] = 2003265652;
    } else {
     $55 = (_strcmp($51,88639)|0);
     $56 = ($55|0)==(0);
     if ($56) {
      $57 = (((($49) + (($i$02*24)|0)|0)) + 16|0);
      HEAP32[$57>>2] = 2003072104;
      break;
     }
     $58 = (_strcmp($51,88645)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      $60 = (((($49) + (($i$02*24)|0)|0)) + 16|0);
      HEAP32[$60>>2] = 1869640570;
     }
    }
   } while(0);
   $61 = (($i$02) + 1)|0;
   $62 = ($61>>>0)<($22>>>0);
   if ($62) {
    $i$02 = $61;
   } else {
    break;
   }
  }
 }
 $63 = HEAP32[$3>>2]|0;
 $64 = ((($3)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = 1 << $65;
 $67 = ($63|0)==($66|0);
 if ($67) {
  $68 = ((($3)) + 140|0);
  $69 = HEAP32[$68>>2]|0;
  _mm_weights_unmap($69,$axiscoords,$65);
  $70 = HEAP32[$mmaster>>2]|0;
  $71 = ($70|0)==(0);
  if (!($71)) {
   $72 = HEAP32[$mmaster>>2]|0;
   $i$11 = 0;
   while(1) {
    $73 = (((($3)) + 88|0) + (($i$11*12)|0)|0);
    $74 = (($axiscoords) + ($i$11<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (_mm_axis_unmap($73,$75)|0);
    $77 = HEAP32[$18>>2]|0;
    $78 = (((($77) + (($i$11*24)|0)|0)) + 8|0);
    HEAP32[$78>>2] = $76;
    $79 = (($i$11) + 1)|0;
    $80 = ($79>>>0)<($72>>>0);
    if ($80) {
     $i$11 = $79;
    } else {
     break;
    }
   }
  }
 }
 HEAP32[$master>>2] = $9;
 $81 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($81|0);
}
function _T1_Set_MM_Blend($face,$num_coords,$coords) {
 $face = $face|0;
 $num_coords = $num_coords|0;
 $coords = $coords|0;
 var $$ = 0, $$$ = 0, $$$$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $m$02 = 0, $n$04 = 0, $result$0$lcssa = 0, $result$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 532|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($num_coords|0);
 if (!($5)) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $8 = ((($1)) + 136|0);
 $n$04 = 0;
 while(1) {
  $9 = HEAP32[$3>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $result$0$lcssa = 65536;
  } else {
   $m$02 = 0;$result$03 = 65536;
   while(1) {
    $11 = (($coords) + ($m$02<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)<(0);
    $$ = $13 ? 0 : $12;
    $14 = ($$|0)>(65536);
    $$$ = $14 ? 65536 : $$;
    $15 = 1 << $m$02;
    $16 = $15 & $n$04;
    $17 = ($16|0)==(0);
    $18 = (65536 - ($$$))|0;
    $$$$ = $17 ? $18 : $$$;
    $19 = (_FT_MulFix($result$03,$$$$)|0);
    $20 = (($m$02) + 1)|0;
    $21 = HEAP32[$3>>2]|0;
    $22 = ($20>>>0)<($21>>>0);
    if ($22) {
     $m$02 = $20;$result$03 = $19;
    } else {
     $result$0$lcssa = $19;
     break;
    }
   }
  }
  $23 = HEAP32[$8>>2]|0;
  $24 = (($23) + ($n$04<<2)|0);
  HEAP32[$24>>2] = $result$0$lcssa;
  $25 = (($n$04) + 1)|0;
  $26 = HEAP32[$1>>2]|0;
  $27 = ($25>>>0)<($26>>>0);
  if ($27) {
   $n$04 = $25;
  } else {
   $error$0 = 0;
   break;
  }
 }
 return ($error$0|0);
}
function _T1_Set_MM_Design($face,$num_coords,$coords) {
 $face = $face|0;
 $num_coords = $num_coords|0;
 $coords = $coords|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $after$0 = 0, $before$0$lcssa = 0, $before$05 = 0, $before$05$phi = 0, $error$0 = 0, $final_blends = 0, $n$012 = 0, $p$04 = 0;
 var $p$04$lcssa = 0, $the_blend$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $final_blends = sp;
 $0 = ((($face)) + 532|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $error$0 = 6;
  STACKTOP = sp;return ($error$0|0);
 }
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==($num_coords|0);
 if (!($5)) {
  $error$0 = 6;
  STACKTOP = sp;return ($error$0|0);
 }
 $6 = HEAP32[$3>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $n$012 = 0;
  while(1) {
   $8 = (($coords) + ($n$012<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((((($1)) + 88|0) + (($n$012*12)|0)|0)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (((((($1)) + 88|0) + (($n$012*12)|0)|0)) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (((($1)) + 88|0) + (($n$012*12)|0)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(0);
   do {
    if ($16) {
     label = 10;
    } else {
     $before$05 = -1;$p$04 = 0;
     while(1) {
      $17 = (($11) + ($p$04<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = ($9|0)==($18|0);
      if ($19) {
       $p$04$lcssa = $p$04;
       label = 6;
       break;
      }
      $22 = ($9|0)<($18|0);
      if ($22) {
       $after$0 = $p$04;$before$0$lcssa = $before$05;
       break;
      }
      $23 = (($p$04) + 1)|0;
      $24 = HEAP8[$14>>0]|0;
      $25 = $24&255;
      $26 = ($23>>>0)<($25>>>0);
      if ($26) {
       $before$05$phi = $p$04;$p$04 = $23;$before$05 = $before$05$phi;
      } else {
       $after$0 = -1;$before$0$lcssa = $p$04;
       break;
      }
     }
     if ((label|0) == 6) {
      label = 0;
      $20 = (($13) + ($p$04$lcssa<<2)|0);
      $21 = HEAP32[$20>>2]|0;
      $the_blend$0 = $21;
      break;
     }
     $27 = ($before$0$lcssa|0)<(0);
     if ($27) {
      label = 10;
     } else {
      $29 = ($after$0|0)<(0);
      if ($29) {
       $30 = HEAP8[$14>>0]|0;
       $31 = $30&255;
       $32 = (($31) + -1)|0;
       $33 = (($13) + ($32<<2)|0);
       $34 = HEAP32[$33>>2]|0;
       $the_blend$0 = $34;
       break;
      } else {
       $35 = (($11) + ($before$0$lcssa<<2)|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = (($9) - ($36))|0;
       $38 = (($13) + ($after$0<<2)|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (($13) + ($before$0$lcssa<<2)|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = (($39) - ($41))|0;
       $43 = (($11) + ($after$0<<2)|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = (($44) - ($36))|0;
       $46 = (_FT_MulDiv($37,$42,$45)|0);
       $the_blend$0 = $46;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 10) {
    label = 0;
    $28 = HEAP32[$13>>2]|0;
    $the_blend$0 = $28;
   }
   $47 = (($final_blends) + ($n$012<<2)|0);
   HEAP32[$47>>2] = $the_blend$0;
   $48 = (($n$012) + 1)|0;
   $49 = HEAP32[$3>>2]|0;
   $50 = ($48>>>0)<($49>>>0);
   if ($50) {
    $n$012 = $48;
   } else {
    break;
   }
  }
 }
 $51 = (_T1_Set_MM_Blend($face,$num_coords,$final_blends)|0);
 $error$0 = $51;
 STACKTOP = sp;return ($error$0|0);
}
function _T1_Set_Var_Design($face,$num_coords,$coords) {
 $face = $face|0;
 $num_coords = $num_coords|0;
 $coords = $coords|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $error$0 = 0, $exitcond = 0, $i$02 = 0, $lcoords = 0, $num_coords$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $lcoords = sp;
 $num_coords$off = (($num_coords) + -1)|0;
 $0 = ($num_coords$off>>>0)<(4);
 if ($0) {
  $i$02 = 0;
 } else {
  $error$0 = 6;
  STACKTOP = sp;return ($error$0|0);
 }
 while(1) {
  $1 = (($coords) + ($i$02<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_FT_RoundFix($2)|0);
  $4 = $3 >> 16;
  $5 = (($lcoords) + ($i$02<<2)|0);
  HEAP32[$5>>2] = $4;
  $6 = (($i$02) + 1)|0;
  $exitcond = ($6|0)==($num_coords|0);
  if ($exitcond) {
   break;
  } else {
   $i$02 = $6;
  }
 }
 $7 = (_T1_Set_MM_Design($face,$num_coords,$lcoords)|0);
 $error$0 = $7;
 STACKTOP = sp;return ($error$0|0);
}
function _T1_Done_Blend($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond13 = 0, $exitcond15 = 0;
 var $n$15 = 0, $n$22 = 0, $n$31 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 532|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = HEAP32[$3>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($3)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 _ft_mem_free($1,$9);
 HEAP32[$8>>2] = 0;
 $10 = ($5>>>0)>(1);
 if ($10) {
  $scevgep = ((($3)) + 28|0);
  $11 = $5 << 2;
  $12 = (($11) + -4)|0;
  _memset(($scevgep|0),0,($12|0))|0;
 }
 $13 = ((($3)) + 216|0);
 $14 = HEAP32[$13>>2]|0;
 _ft_mem_free($1,$14);
 HEAP32[$13>>2] = 0;
 $15 = ((($3)) + 148|0);
 $16 = HEAP32[$15>>2]|0;
 _ft_mem_free($1,$16);
 HEAP32[$15>>2] = 0;
 $17 = ((($3)) + 288|0);
 $18 = HEAP32[$17>>2]|0;
 _ft_mem_free($1,$18);
 HEAP32[$17>>2] = 0;
 $19 = ($5|0)==(0);
 if (!($19)) {
  $n$15 = 0;
  while(1) {
   $20 = (((($3)) + 212|0) + ($n$15<<2)|0);
   HEAP32[$20>>2] = 0;
   $21 = (((($3)) + 144|0) + ($n$15<<2)|0);
   HEAP32[$21>>2] = 0;
   $22 = (((($3)) + 284|0) + ($n$15<<2)|0);
   HEAP32[$22>>2] = 0;
   $23 = (($n$15) + 1)|0;
   $exitcond15 = ($23|0)==($5|0);
   if ($exitcond15) {
    break;
   } else {
    $n$15 = $23;
   }
  }
 }
 $24 = ((($3)) + 136|0);
 $25 = HEAP32[$24>>2]|0;
 _ft_mem_free($1,$25);
 HEAP32[$24>>2] = 0;
 $26 = ((($3)) + 140|0);
 HEAP32[$26>>2] = 0;
 $27 = ($7|0)==(0);
 if (!($27)) {
  $n$22 = 0;
  while(1) {
   $29 = (((($3)) + 8|0) + ($n$22<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   _ft_mem_free($1,$30);
   HEAP32[$29>>2] = 0;
   $31 = (($n$22) + 1)|0;
   $exitcond13 = ($31|0)==($7|0);
   if ($exitcond13) {
    break;
   } else {
    $n$22 = $31;
   }
  }
  $28 = ($7|0)==(0);
  if (!($28)) {
   $n$31 = 0;
   while(1) {
    $32 = (((((($3)) + 88|0) + (($n$31*12)|0)|0)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    _ft_mem_free($1,$33);
    HEAP32[$32>>2] = 0;
    $34 = (((($3)) + 88|0) + (($n$31*12)|0)|0);
    HEAP8[$34>>0] = 0;
    $35 = (($n$31) + 1)|0;
    $exitcond = ($35|0)==($7|0);
    if ($exitcond) {
     break;
    } else {
     $n$31 = $35;
    }
   }
  }
 }
 $36 = HEAP32[$2>>2]|0;
 _ft_mem_free($1,$36);
 HEAP32[$2>>2] = 0;
 return;
}
function _T1_Open_Face($face) {
 $face = $face|0;
 var $$lcssa = 0, $$pr = 0, $$pr1$pr = 0, $$pr3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $charcode$0$min_char$0 = 0, $charcode$014 = 0, $error = 0, $i$019 = 0, $idx$011 = 0, $idx$011$lcssa = 0, $loader = 0, $max_char$0$ = 0, $max_char$0$lcssa = 0, $max_char$013 = 0, $max_char$1 = 0, $min_char$0$lcssa = 0, $min_char$012 = 0, $min_char$2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $loader = sp + 8|0;
 $error = sp;
 $0 = ((($face)) + 488|0);
 $1 = HEAP32[$0>>2]|0;
 _t1_init_loader($loader);
 $2 = ((($face)) + 536|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($face)) + 540|0);
 HEAP32[$3>>2] = -1;
 $4 = ((($face)) + 544|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($face)) + 280|0);
 HEAP32[$5>>2] = 7;
 $6 = ((($face)) + 284|0);
 HEAP32[$6>>2] = 1;
 $7 = ((($face)) + 172|0);
 HEAP32[$7>>2] = 4;
 $8 = ((($face)) + 348|0);
 HEAP32[$8>>2] = 3932;
 $9 = ((($face)) + 276|0);
 HEAP32[$9>>2] = 2596864;
 $10 = ((($face)) + 104|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($face)) + 100|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_T1_New_Parser($loader,$11,$13,$1)|0);
 HEAP32[$error>>2] = $14;
 $15 = ($14|0)==(0);
 if (!($15)) {
  _t1_done_loader($loader);
  $160 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 $16 = ((($loader)) + 76|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($loader)) + 80|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_parse_dict($face,$loader,$17,$19)|0);
 HEAP32[$error>>2] = $20;
 $21 = ($20|0)==(0);
 if (!($21)) {
  _t1_done_loader($loader);
  $160 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 $22 = (_T1_Get_Private_Dict($loader,$1)|0);
 HEAP32[$error>>2] = $22;
 $23 = ($22|0)==(0);
 if (!($23)) {
  _t1_done_loader($loader);
  $160 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 $24 = ((($loader)) + 84|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($loader)) + 88|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_parse_dict($face,$loader,$25,$27)|0);
 HEAP32[$error>>2] = $28;
 $29 = ($28|0)==(0);
 if (!($29)) {
  _t1_done_loader($loader);
  $160 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 $30 = ((($face)) + 176|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 & 254;
 $34 = $33&255;
 HEAP8[$30>>0] = $34;
 $35 = ((($face)) + 532|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 L13: do {
  if ($37) {
   label = 23;
  } else {
   $38 = ((($36)) + 416|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0);
   if (!($40)) {
    $41 = ((($36)) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($39|0)==($42|0);
    if (!($43)) {
     HEAP32[$38>>2] = 0;
    }
   }
   $$pr = HEAP32[$35>>2]|0;
   $44 = ($$pr|0)==(0|0);
   L19: do {
    if ($44) {
     label = 18;
    } else {
     $45 = HEAP32[$$pr>>2]|0;
     $46 = ($45|0)==(0);
     if ($46) {
      label = 12;
     } else {
      $47 = ((($$pr)) + 4|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0);
      if ($49) {
       label = 12;
      }
     }
     if ((label|0) == 12) {
      _T1_Done_Blend($face);
     }
     $$pr1$pr = HEAP32[$35>>2]|0;
     $50 = ($$pr1$pr|0)==(0|0);
     if ($50) {
      label = 23;
      break L13;
     }
     $51 = HEAP32[$35>>2]|0;
     $52 = ((($51)) + 4|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $51;
     } else {
      $61 = $51;$i$019 = 0;
      while(1) {
       $60 = (((($61)) + 88|0) + (($i$019*12)|0)|0);
       $62 = HEAP8[$60>>0]|0;
       $63 = ($62<<24>>24)==(0);
       $59 = (($i$019) + 1)|0;
       if ($63) {
        break;
       }
       $55 = HEAP32[$35>>2]|0;
       $56 = ((($55)) + 4|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($59>>>0)<($57>>>0);
       if ($58) {
        $61 = $55;$i$019 = $59;
       } else {
        $65 = $55;
        break L19;
       }
      }
      _T1_Done_Blend($face);
      label = 18;
     }
    }
   } while(0);
   if ((label|0) == 18) {
    $$pr3 = HEAP32[$35>>2]|0;
    $65 = $$pr3;
   }
   $64 = ($65|0)==(0|0);
   if ($64) {
    label = 23;
   } else {
    $66 = HEAP32[$4>>2]|0;
    $67 = ($66|0)==(0);
    if (!($67)) {
     $68 = HEAP32[$12>>2]|0;
     $69 = (_ft_mem_realloc($68,4,0,$66,0,$error)|0);
     $70 = ((($face)) + 548|0);
     HEAP32[$70>>2] = $69;
     $71 = HEAP32[$error>>2]|0;
     $72 = ($71|0)==(0);
     if (!($72)) {
      HEAP32[$4>>2] = 0;
      _t1_done_loader($loader);
      $160 = HEAP32[$error>>2]|0;
      STACKTOP = sp;return ($160|0);
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 23) {
  HEAP32[$4>>2] = 0;
 }
 $73 = ((($loader)) + 152|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($face)) + 416|0);
 HEAP32[$75>>2] = $74;
 $76 = ((($loader)) + 328|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(0);
 if (!($78)) {
  $79 = ((($loader)) + 316|0);
  HEAP32[$76>>2] = 0;
  $80 = ((($loader)) + 312|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($face)) + 404|0);
  HEAP32[$82>>2] = $81;
  $83 = HEAP32[$79>>2]|0;
  $84 = ((($face)) + 392|0);
  HEAP32[$84>>2] = $83;
  $85 = ((($loader)) + 340|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($face)) + 408|0);
  HEAP32[$87>>2] = $86;
  $88 = ((($loader)) + 344|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = ((($face)) + 412|0);
  HEAP32[$90>>2] = $89;
 }
 $91 = ((($face)) + 128|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($92)) + 52|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)==(0|0);
 if ($95) {
  $96 = ((($loader)) + 220|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)==(0);
  if ($98) {
   HEAP32[$error>>2] = 3;
  }
 }
 $99 = ((($loader)) + 208|0);
 $100 = ((($loader)) + 220|0);
 HEAP32[$100>>2] = 0;
 $101 = HEAP32[$99>>2]|0;
 $102 = ((($face)) + 396|0);
 HEAP32[$102>>2] = $101;
 $103 = ((($loader)) + 232|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ((($face)) + 424|0);
 HEAP32[$105>>2] = $104;
 $106 = ((($loader)) + 236|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ((($face)) + 428|0);
 HEAP32[$108>>2] = $107;
 $109 = ((($loader)) + 156|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ((($face)) + 400|0);
 HEAP32[$111>>2] = $110;
 $112 = ((($loader)) + 180|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ((($face)) + 420|0);
 HEAP32[$114>>2] = $113;
 HEAP32[$109>>2] = 0;
 HEAP32[$112>>2] = 0;
 $115 = ((($face)) + 368|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)==(1);
 if (!($117)) {
  _t1_done_loader($loader);
  $160 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($160|0);
 }
 $118 = ((($loader)) + 116|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)>(0);
 if ($120) {
  $121 = ((($face)) + 384|0);
  $122 = ((($face)) + 388|0);
  $123 = ((($loader)) + 124|0);
  $charcode$014 = 0;$max_char$013 = 0;$min_char$012 = 0;
  while(1) {
   $124 = HEAP32[$121>>2]|0;
   $125 = (($124) + ($charcode$014<<1)|0);
   HEAP16[$125>>1] = 0;
   $126 = HEAP32[$122>>2]|0;
   $127 = (($126) + ($charcode$014<<2)|0);
   HEAP32[$127>>2] = 89635;
   $128 = HEAP32[$123>>2]|0;
   $129 = (($128) + ($charcode$014<<2)|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = ($130|0)==(0|0);
   L55: do {
    if ($131) {
     $max_char$1 = $max_char$013;$min_char$2 = $min_char$012;
    } else {
     $132 = HEAP32[$75>>2]|0;
     $133 = ($132|0)>(0);
     if ($133) {
      $134 = HEAP32[$114>>2]|0;
      $idx$011 = 0;
      while(1) {
       $135 = (($134) + ($idx$011<<2)|0);
       $136 = HEAP32[$135>>2]|0;
       $137 = (_strcmp($130,$136)|0);
       $138 = ($137|0)==(0);
       if ($138) {
        $$lcssa = $136;$idx$011$lcssa = $idx$011;
        break;
       }
       $149 = (($idx$011) + 1)|0;
       $150 = HEAP32[$75>>2]|0;
       $151 = ($149|0)<($150|0);
       if ($151) {
        $idx$011 = $149;
       } else {
        $max_char$1 = $max_char$013;$min_char$2 = $min_char$012;
        break L55;
       }
      }
      $139 = $idx$011$lcssa&65535;
      $140 = HEAP32[$121>>2]|0;
      $141 = (($140) + ($charcode$014<<1)|0);
      HEAP16[$141>>1] = $139;
      $142 = HEAP32[$122>>2]|0;
      $143 = (($142) + ($charcode$014<<2)|0);
      HEAP32[$143>>2] = $$lcssa;
      $144 = (_strcmp(89635,$$lcssa)|0);
      $145 = ($144|0)==(0);
      if ($145) {
       $max_char$1 = $max_char$013;$min_char$2 = $min_char$012;
      } else {
       $146 = ($charcode$014|0)<($min_char$012|0);
       $charcode$0$min_char$0 = $146 ? $charcode$014 : $min_char$012;
       $147 = ($charcode$014|0)<($max_char$013|0);
       $148 = (($charcode$014) + 1)|0;
       $max_char$0$ = $147 ? $max_char$013 : $148;
       $max_char$1 = $max_char$0$;$min_char$2 = $charcode$0$min_char$0;
      }
     } else {
      $max_char$1 = $max_char$013;$min_char$2 = $min_char$012;
     }
    }
   } while(0);
   $152 = (($charcode$014) + 1)|0;
   $153 = HEAP32[$118>>2]|0;
   $154 = ($152|0)<($153|0);
   if ($154) {
    $charcode$014 = $152;$max_char$013 = $max_char$1;$min_char$012 = $min_char$2;
   } else {
    $max_char$0$lcssa = $max_char$1;$min_char$0$lcssa = $min_char$2;
    break;
   }
  }
 } else {
  $max_char$0$lcssa = 0;$min_char$0$lcssa = 0;
 }
 $155 = ((($face)) + 376|0);
 HEAP32[$155>>2] = $min_char$0$lcssa;
 $156 = ((($face)) + 380|0);
 HEAP32[$156>>2] = $max_char$0$lcssa;
 $157 = ((($loader)) + 96|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = ((($face)) + 372|0);
 HEAP32[$159>>2] = $158;
 _t1_done_loader($loader);
 $160 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($160|0);
}
function _t1_init_loader($loader) {
 $loader = $loader|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($loader|0),0,376)|0;
 return;
}
function _parse_dict($face,$loader,$base,$size) {
 $face = $face|0;
 $loader = $loader|0;
 $base = $base|0;
 $size = $size|0;
 var $$0 = 0, $$lcssa = 0, $$off = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $b2 = 0, $have_integer$014 = 0, $have_integer$1 = 0, $keyword$013 = 0, $keyword$013$lcssa = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond6 = 0, $or$cond8 = 0, $or$cond9 = 0, $s = 0, $s1 = 0, $start_binary$016 = 0, $start_binary$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $s = sp + 12|0;
 $b = sp + 8|0;
 $s1 = sp + 4|0;
 $b2 = sp;
 HEAP32[$loader>>2] = $base;
 $0 = (($base) + ($size)|0);
 $1 = ((($loader)) + 8|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($loader)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($loader)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 127]($loader);
 $6 = HEAP32[$loader>>2]|0;
 $7 = ($6>>>0)<($3>>>0);
 L1: do {
  if ($7) {
   $8 = ((($loader)) + 372|0);
   $9 = ((($loader)) + 32|0);
   $10 = ((($face)) + 128|0);
   $11 = ((($face)) + 128|0);
   $12 = ((($loader)) + 32|0);
   $13 = ((($loader)) + 372|0);
   $14 = ((($loader)) + 32|0);
   $16 = $6;$have_integer$014 = 0;$start_binary$016 = 0;
   L3: while(1) {
    $15 = HEAP8[$16>>0]|0;
    $17 = ($15<<24>>24)==(101);
    if ($17) {
     $18 = ((($16)) + 6|0);
     $19 = ($18|0)==($3|0);
     if ($19) {
      label = 7;
     } else {
      $20 = ($18>>>0)<($3>>>0);
      if ($20) {
       $21 = ((($16)) + 5|0);
       $22 = HEAP8[$21>>0]|0;
       switch ($22<<24>>24) {
       case 37: case 125: case 123: case 93: case 91: case 62: case 60: case 41: case 40: case 47: case 0: case 12: case 9: case 10: case 13: case 32:  {
        label = 7;
        break;
       }
       default: {
       }
       }
      }
     }
     if ((label|0) == 7) {
      label = 0;
      $23 = (_strncmp($16,88820,5)|0);
      $24 = ($23|0)==(0);
      if ($24) {
       break L1;
      }
     }
     $$pr = HEAP8[$16>>0]|0;
     $26 = $$pr;
    } else {
     $26 = $15;
    }
    $25 = ($26<<24>>24)==(99);
    L14: do {
     if ($25) {
      $27 = ((($16)) + 10|0);
      $28 = ($27|0)==($3|0);
      if (!($28)) {
       $29 = ($27>>>0)<($3>>>0);
       if (!($29)) {
        break;
       }
       $30 = ((($16)) + 9|0);
       $31 = HEAP8[$30>>0]|0;
       switch ($31<<24>>24) {
       case 37: case 125: case 123: case 93: case 91: case 62: case 60: case 41: case 40: case 47: case 0: case 12: case 9: case 10: case 13: case 32:  {
        break;
       }
       default: {
        break L14;
       }
       }
      }
      $32 = (_strncmp($16,88657,9)|0);
      $33 = ($32|0)==(0);
      if ($33) {
       break L1;
      }
     }
    } while(0);
    $34 = HEAP8[$16>>0]|0;
    $35 = ($34<<24>>24)==(70);
    L21: do {
     if ($35) {
      $36 = ((($16)) + 14|0);
      $37 = ($36|0)==($3|0);
      if (!($37)) {
       $38 = ($36>>>0)<($3>>>0);
       if (!($38)) {
        label = 22;
        break;
       }
       $39 = ((($16)) + 13|0);
       $40 = HEAP8[$39>>0]|0;
       switch ($40<<24>>24) {
       case 37: case 125: case 123: case 93: case 91: case 62: case 60: case 41: case 40: case 47: case 0: case 12: case 9: case 10: case 13: case 32:  {
        break;
       }
       default: {
        label = 22;
        break L21;
       }
       }
      }
      $41 = (_strncmp($16,89417,13)|0);
      $42 = ($41|0)==(0);
      if ($42) {
       $43 = HEAP32[$8>>2]|0;
       $44 = $43 & 1;
       $45 = ($44|0)==(0);
       if (!($45)) {
        $46 = $43 | 2;
        HEAP32[$8>>2] = $46;
       }
       $47 = HEAP32[$loader>>2]|0;
       $48 = ((($47)) + 13|0);
       HEAP32[$loader>>2] = $48;
       $have_integer$1 = $have_integer$014;$start_binary$1 = $start_binary$016;
      } else {
       label = 22;
      }
     } else {
      label = 22;
     }
    } while(0);
    L31: do {
     if ((label|0) == 22) {
      label = 0;
      $49 = HEAP8[$16>>0]|0;
      $50 = $49&255;
      $51 = (($50) + -48)|0;
      $52 = ($51>>>0)<(10);
      if ($52) {
       $53 = HEAP32[$9>>2]|0;
       FUNCTION_TABLE_vi[$53 & 127]($loader);
       $54 = HEAP32[$2>>2]|0;
       $55 = ($54|0)==(0);
       if ($55) {
        $have_integer$1 = 1;$start_binary$1 = $16;
        break;
       } else {
        break L1;
       }
      }
      $56 = ($49<<24>>24)==(82);
      $57 = ((($16)) + 6|0);
      $58 = ($57>>>0)<($3>>>0);
      $or$cond = $58 & $56;
      if ($or$cond) {
       $59 = ((($16)) + 1|0);
       $60 = HEAP8[$59>>0]|0;
       $61 = ($60<<24>>24)!=(68);
       $62 = ($have_integer$014<<24>>24)==(0);
       $or$cond3 = $62 | $61;
       if (!($or$cond3)) {
        HEAP32[$loader>>2] = $start_binary$016;
        $63 = HEAP32[$10>>2]|0;
        $64 = ((($63)) + 52|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = ($65|0)!=(0|0);
        $67 = $66&1;
        $68 = (_read_binary_data($loader,$s,$b,$67)|0);
        $69 = ($68|0)==(0);
        if ($69) {
         $$0 = 3;
         label = 47;
         break L3;
        } else {
         $have_integer$1 = 0;$start_binary$1 = $start_binary$016;
         break;
        }
       }
      }
      $70 = HEAP8[$16>>0]|0;
      $71 = ($70<<24>>24)==(45);
      $or$cond5 = $58 & $71;
      if ($or$cond5) {
       $72 = ((($16)) + 1|0);
       $73 = HEAP8[$72>>0]|0;
       $74 = ($73<<24>>24)!=(124);
       $75 = ($have_integer$014<<24>>24)==(0);
       $or$cond6 = $75 | $74;
       if (!($or$cond6)) {
        HEAP32[$loader>>2] = $start_binary$016;
        $76 = HEAP32[$11>>2]|0;
        $77 = ((($76)) + 52|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = ($78|0)!=(0|0);
        $80 = $79&1;
        $81 = (_read_binary_data($loader,$s1,$b2,$80)|0);
        $82 = ($81|0)==(0);
        if ($82) {
         $$0 = 3;
         label = 47;
         break L3;
        } else {
         $have_integer$1 = 0;$start_binary$1 = $start_binary$016;
         break;
        }
       }
      }
      $83 = HEAP8[$16>>0]|0;
      $84 = ($83<<24>>24)==(47);
      $85 = ((($16)) + 2|0);
      $86 = ($85>>>0)<($3>>>0);
      $or$cond8 = $86 & $84;
      if (!($or$cond8)) {
       $123 = HEAP32[$14>>2]|0;
       FUNCTION_TABLE_vi[$123 & 127]($loader);
       $124 = HEAP32[$2>>2]|0;
       $125 = ($124|0)==(0);
       if ($125) {
        $have_integer$1 = 0;$start_binary$1 = $start_binary$016;
        break;
       } else {
        break L1;
       }
      }
      $87 = ((($16)) + 1|0);
      HEAP32[$loader>>2] = $87;
      $88 = HEAP32[$12>>2]|0;
      FUNCTION_TABLE_vi[$88 & 127]($loader);
      $89 = HEAP32[$2>>2]|0;
      $90 = ($89|0)==(0);
      if (!($90)) {
       break L1;
      }
      $91 = HEAP32[$loader>>2]|0;
      $92 = $91;
      $93 = $87;
      $94 = (($92) - ($93))|0;
      $$off = (($94) + -1)|0;
      $95 = ($$off>>>0)<(21);
      $96 = ($91>>>0)<($3>>>0);
      $or$cond9 = $96 & $95;
      if ($or$cond9) {
       $97 = HEAP8[$87>>0]|0;
       $99 = 89437;$keyword$013 = 13140;
       while(1) {
        $98 = HEAP8[$99>>0]|0;
        $100 = ($97<<24>>24)==($98<<24>>24);
        if ($100) {
         $101 = (_strlen($99)|0);
         $102 = ($94|0)==($101|0);
         if ($102) {
          $103 = (_memcmp($87,$99,$94)|0);
          $104 = ($103|0)==(0);
          if ($104) {
           $$lcssa = $99;$keyword$013$lcssa = $keyword$013;
           break;
          }
         }
        }
        $120 = ((($keyword$013)) + 36|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = ($121|0)==(0|0);
        if ($122) {
         $have_integer$1 = 0;$start_binary$1 = $start_binary$016;
         break L31;
        } else {
         $99 = $121;$keyword$013 = $120;
        }
       }
       $105 = HEAP32[$13>>2]|0;
       $106 = $105 & 1;
       $107 = (($106) + 1)|0;
       $108 = ((($keyword$013$lcssa)) + 32|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = $107 & $109;
       $111 = ($110|0)==(0);
       if ($111) {
        $have_integer$1 = 0;$start_binary$1 = $start_binary$016;
       } else {
        $112 = $105 & 2;
        $113 = ($112|0)==(0);
        if (!($113)) {
         $114 = (_strcmp($$lcssa,89617)|0);
         $115 = ($114|0)==(0);
         if (!($115)) {
          $have_integer$1 = 0;$start_binary$1 = $start_binary$016;
          break;
         }
        }
        $116 = (_t1_load_keyword($face,$loader,$keyword$013$lcssa)|0);
        HEAP32[$2>>2] = $116;
        $117 = ($116|0)==(0);
        if ($117) {
         $have_integer$1 = 0;$start_binary$1 = $start_binary$016;
        } else {
         $118 = $116 & 255;
         $119 = ($118|0)==(162);
         if (!($119)) {
          $$0 = $116;
          label = 47;
          break L3;
         }
         HEAP32[$2>>2] = 0;
         $have_integer$1 = 0;$start_binary$1 = $start_binary$016;
        }
       }
      } else {
       $have_integer$1 = 0;$start_binary$1 = $start_binary$016;
      }
     }
    } while(0);
    $126 = HEAP32[$4>>2]|0;
    FUNCTION_TABLE_vi[$126 & 127]($loader);
    $127 = HEAP32[$loader>>2]|0;
    $128 = ($127>>>0)<($3>>>0);
    if ($128) {
     $16 = $127;$have_integer$014 = $have_integer$1;$start_binary$016 = $start_binary$1;
    } else {
     break L1;
    }
   }
   if ((label|0) == 47) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $129 = HEAP32[$2>>2]|0;
 $$0 = $129;
 STACKTOP = sp;return ($$0|0);
}
function _t1_done_loader($loader) {
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 148|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($loader)) + 100|0);
  FUNCTION_TABLE_vi[$1 & 127]($3);
 }
 $4 = ((($loader)) + 256|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($loader)) + 208|0);
  FUNCTION_TABLE_vi[$5 & 127]($7);
 }
 $8 = ((($loader)) + 204|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($loader)) + 156|0);
  FUNCTION_TABLE_vi[$9 & 127]($11);
 }
 $12 = ((($loader)) + 308|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = ((($loader)) + 260|0);
  FUNCTION_TABLE_vi[$13 & 127]($15);
 }
 $16 = ((($loader)) + 364|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  _T1_Finalize_Parser($loader);
  return;
 }
 $19 = ((($loader)) + 316|0);
 FUNCTION_TABLE_vi[$17 & 127]($19);
 _T1_Finalize_Parser($loader);
 return;
}
function _read_binary_data($parser,$size,$base,$incremental) {
 $parser = $parser|0;
 $size = $size|0;
 $base = $base|0;
 $incremental = $incremental|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 127]($parser);
 $4 = HEAP32[$parser>>2]|0;
 $5 = ($4>>>0)<($1>>>0);
 if ($5) {
  $6 = HEAP8[$4>>0]|0;
  $7 = $6&255;
  $8 = (($7) + -48)|0;
  $9 = ($8>>>0)<(10);
  if ($9) {
   $10 = ((($parser)) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (FUNCTION_TABLE_ii[$11 & 63]($parser)|0);
   $13 = ((($parser)) + 32|0);
   $14 = HEAP32[$13>>2]|0;
   FUNCTION_TABLE_vi[$14 & 127]($parser);
   $15 = HEAP32[$parser>>2]|0;
   $16 = ((($15)) + 1|0);
   HEAP32[$base>>2] = $16;
   $17 = ($12|0)>(-1);
   if ($17) {
    $18 = $1;
    $19 = $16;
    $20 = (($18) - ($19))|0;
    $21 = ($12|0)<($20|0);
    if ($21) {
     $22 = (($12) + 1)|0;
     $23 = HEAP32[$parser>>2]|0;
     $24 = (($23) + ($22)|0);
     HEAP32[$parser>>2] = $24;
     HEAP32[$size>>2] = $12;
     $25 = ((($parser)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(0);
     $28 = $27&1;
     $$0 = $28;
     return ($$0|0);
    }
   }
  }
 }
 $29 = ($incremental<<24>>24)==(0);
 if (!($29)) {
  $$0 = 0;
  return ($$0|0);
 }
 $30 = ((($parser)) + 12|0);
 HEAP32[$30>>2] = 3;
 $$0 = 0;
 return ($$0|0);
}
function _t1_load_keyword($face,$loader,$field) {
 $face = $face|0;
 $loader = $loader|0;
 $field = $field|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $blend$0 = 0, $dummy_object = 0, $error$0 = 0, $max_objects$0 = 0, $objects$0 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dummy_object = sp;
 $0 = ((($face)) + 532|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $blend$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0);
  $$ = $4 ? 0 : $1;
  $blend$0 = $$;
 }
 $5 = ((($field)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(10);
 if ($7) {
  $8 = ((($field)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_vii[$9 & 31]($face,$loader);
  $10 = ((($loader)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $error$0 = $11;
  STACKTOP = sp;return ($error$0|0);
 }
 $12 = ((($field)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 switch ($13|0) {
 case 3:  {
  $14 = ((($face)) + 132|0);
  HEAP32[$dummy_object>>2] = $14;
  $15 = ($blend$0|0)==(0|0);
  if ($15) {
   $max_objects$0 = 0;$objects$0 = $dummy_object;
  } else {
   $16 = ((($blend$0)) + 144|0);
   $17 = HEAP32[$blend$0>>2]|0;
   $max_objects$0 = $17;$objects$0 = $16;
  }
  break;
 }
 case 2:  {
  $18 = ((($face)) + 164|0);
  HEAP32[$dummy_object>>2] = $18;
  $max_objects$0 = 0;$objects$0 = $dummy_object;
  break;
 }
 case 4:  {
  $19 = ((($face)) + 168|0);
  HEAP32[$dummy_object>>2] = $19;
  $20 = ($blend$0|0)==(0|0);
  if ($20) {
   $max_objects$0 = 0;$objects$0 = $dummy_object;
  } else {
   $21 = ((($blend$0)) + 212|0);
   $22 = HEAP32[$blend$0>>2]|0;
   $max_objects$0 = $22;$objects$0 = $21;
  }
  break;
 }
 case 5:  {
  $23 = ((($face)) + 460|0);
  HEAP32[$dummy_object>>2] = $23;
  $24 = ($blend$0|0)==(0|0);
  if ($24) {
   $max_objects$0 = 0;$objects$0 = $dummy_object;
  } else {
   $25 = ((($blend$0)) + 284|0);
   $26 = HEAP32[$blend$0>>2]|0;
   $max_objects$0 = $26;$objects$0 = $25;
  }
  break;
 }
 case 6:  {
  HEAP32[$dummy_object>>2] = $loader;
  $max_objects$0 = 0;$objects$0 = $dummy_object;
  break;
 }
 case 7:  {
  HEAP32[$dummy_object>>2] = $face;
  $max_objects$0 = 0;$objects$0 = $dummy_object;
  break;
 }
 case 8:  {
  $27 = HEAP32[$0>>2]|0;
  HEAP32[$dummy_object>>2] = $27;
  $max_objects$0 = 0;$objects$0 = $dummy_object;
  break;
 }
 default: {
  $28 = ((($face)) + 132|0);
  HEAP32[$dummy_object>>2] = $28;
  $max_objects$0 = 0;$objects$0 = $dummy_object;
 }
 }
 $29 = HEAP32[$objects$0>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 }
 $31 = HEAP32[$5>>2]|0;
 $32 = $31 & -2;
 $switch = ($32|0)==(8);
 if ($switch) {
  $33 = ((($loader)) + 68|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (FUNCTION_TABLE_iiiiii[$34 & 63]($loader,$field,$objects$0,$max_objects$0,0)|0);
  $error$0 = $35;
  STACKTOP = sp;return ($error$0|0);
 } else {
  $36 = ((($loader)) + 64|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iiiiii[$37 & 63]($loader,$field,$objects$0,$max_objects$0,0)|0);
  $error$0 = $38;
  STACKTOP = sp;return ($error$0|0);
 }
 return (0)|0;
}
function _t1_parse_font_matrix($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $temp = sp;
 $0 = ((($loader)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iiiii[$1 & 63]($loader,6,$temp,3)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  $4 = ((($loader)) + 12|0);
  HEAP32[$4>>2] = 3;
  STACKTOP = sp;return;
 }
 $5 = ((($temp)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<(0);
 $8 = (0 - ($6))|0;
 $9 = $7 ? $8 : $6;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = ((($loader)) + 12|0);
  HEAP32[$11>>2] = 3;
  STACKTOP = sp;return;
 }
 $12 = (_FT_DivFix(65536000,$9)|0);
 $13 = $12 >>> 16;
 $14 = $13&65535;
 $15 = ((($face)) + 68|0);
 HEAP16[$15>>1] = $14;
 $16 = ($9|0)==(65536);
 if (!($16)) {
  $17 = HEAP32[$temp>>2]|0;
  $18 = (_FT_DivFix($17,$9)|0);
  HEAP32[$temp>>2] = $18;
  $19 = ((($temp)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_FT_DivFix($20,$9)|0);
  HEAP32[$19>>2] = $21;
  $22 = ((($temp)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_FT_DivFix($23,$9)|0);
  HEAP32[$22>>2] = $24;
  $25 = ((($temp)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_FT_DivFix($26,$9)|0);
  HEAP32[$25>>2] = $27;
  $28 = ((($temp)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_FT_DivFix($29,$9)|0);
  HEAP32[$28>>2] = $30;
  $31 = HEAP32[$5>>2]|0;
  $32 = $31 >> 31;
  $33 = $32 & -131072;
  $34 = $33 | 65536;
  HEAP32[$5>>2] = $34;
 }
 $35 = HEAP32[$temp>>2]|0;
 $36 = ((($face)) + 436|0);
 HEAP32[$36>>2] = $35;
 $37 = ((($temp)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($face)) + 444|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($temp)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ((($face)) + 440|0);
 HEAP32[$42>>2] = $41;
 $43 = HEAP32[$5>>2]|0;
 $44 = ((($face)) + 448|0);
 HEAP32[$44>>2] = $43;
 $45 = ((($temp)) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 >> 16;
 $48 = ((($face)) + 452|0);
 HEAP32[$48>>2] = $47;
 $49 = ((($temp)) + 20|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = $50 >> 16;
 $52 = ((($face)) + 456|0);
 HEAP32[$52>>2] = $51;
 STACKTOP = sp;return;
}
function _parse_encoding($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $$lcssa87 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $charcode$0 = 0, $count$0 = 0, $cur$1 = 0, $cur$2 = 0, $error = 0, $exitcond = 0, $n$042 = 0, $n$19 = 0, $n$2 = 0, $only_immediates$0 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond3 = 0, $or$cond4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($loader)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 488|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($loader)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 127]($loader);
 $6 = HEAP32[$loader>>2]|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  $8 = ((($loader)) + 12|0);
  HEAP32[$8>>2] = 3;
  STACKTOP = sp;return;
 }
 $9 = HEAP8[$6>>0]|0;
 $10 = $9&255;
 $11 = (($10) + -48)|0;
 $12 = ($11>>>0)<(10);
 $13 = ($9<<24>>24)==(91);
 $or$cond = $13 | $12;
 if (!($or$cond)) {
  $108 = ((($6)) + 17|0);
  $109 = ($108>>>0)<($1>>>0);
  if ($109) {
   $110 = (_strncmp($6,89643,16)|0);
   $111 = ($110|0)==(0);
   if ($111) {
    $112 = ((($face)) + 368|0);
    HEAP32[$112>>2] = 2;
    STACKTOP = sp;return;
   }
  }
  $113 = ((($6)) + 15|0);
  $114 = ($113>>>0)<($1>>>0);
  if ($114) {
   $115 = (_strncmp($6,89660,14)|0);
   $116 = ($115|0)==(0);
   if ($116) {
    $117 = ((($face)) + 368|0);
    HEAP32[$117>>2] = 4;
    STACKTOP = sp;return;
   }
  }
  $118 = ((($6)) + 18|0);
  $119 = ($118>>>0)<($1>>>0);
  if ($119) {
   $120 = (_strncmp($6,89675,17)|0);
   $121 = ($120|0)==(0);
   if ($121) {
    $122 = ((($face)) + 368|0);
    HEAP32[$122>>2] = 3;
    STACKTOP = sp;return;
   }
  }
  $123 = ((($loader)) + 12|0);
  HEAP32[$123>>2] = 162;
  STACKTOP = sp;return;
 }
 $14 = ((($loader)) + 100|0);
 $15 = ((($loader)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 if ($13) {
  $17 = ((($6)) + 1|0);
  HEAP32[$loader>>2] = $17;
  $count$0 = 256;$only_immediates$0 = 1;
 } else {
  $18 = ((($loader)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 63]($loader)|0);
  $count$0 = $20;$only_immediates$0 = 0;
 }
 $21 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$21 & 127]($loader);
 $22 = HEAP32[$loader>>2]|0;
 $23 = ($22>>>0)<($1>>>0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = ((($face)) + 372|0);
 HEAP32[$24>>2] = $count$0;
 $25 = ((($loader)) + 96|0);
 HEAP32[$25>>2] = $count$0;
 $26 = (_ft_mem_realloc($16,2,0,$count$0,0,$error)|0);
 $27 = ((($face)) + 384|0);
 HEAP32[$27>>2] = $26;
 $28 = HEAP32[$error>>2]|0;
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = (_ft_mem_realloc($16,4,0,$count$0,0,$error)|0);
  $31 = ((($face)) + 388|0);
  HEAP32[$31>>2] = $30;
  $32 = HEAP32[$error>>2]|0;
  $33 = ($32|0)==(0);
  if ($33) {
   $34 = HEAP32[$3>>2]|0;
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_iiii[$35 & 127]($14,$count$0,$16)|0);
   HEAP32[$error>>2] = $36;
   $37 = ($36|0)==(0);
   if ($37) {
    $38 = ($count$0|0)>(0);
    if ($38) {
     $39 = ((($loader)) + 144|0);
     $n$042 = 0;
     while(1) {
      $42 = HEAP32[$39>>2]|0;
      (FUNCTION_TABLE_iiiii[$42 & 63]($14,$n$042,89635,8)|0);
      $43 = (($n$042) + 1)|0;
      $exitcond = ($43|0)==($count$0|0);
      if ($exitcond) {
       break;
      } else {
       $n$042 = $43;
      }
     }
    }
    $44 = HEAP32[$4>>2]|0;
    FUNCTION_TABLE_vi[$44 & 127]($loader);
    $45 = HEAP32[$loader>>2]|0;
    $46 = ($45>>>0)<($1>>>0);
    L40: do {
     if ($46) {
      $47 = ($only_immediates$0<<24>>24)==(0);
      $48 = ((($loader)) + 32|0);
      $49 = ((($loader)) + 12|0);
      $50 = ($only_immediates$0<<24>>24)!=(0);
      $51 = ((($loader)) + 32|0);
      $52 = ((($loader)) + 12|0);
      $53 = ((($loader)) + 144|0);
      $54 = ((($loader)) + 124|0);
      $55 = ((($loader)) + 36|0);
      $57 = $45;$n$19 = 0;
      L42: while(1) {
       $56 = HEAP8[$57>>0]|0;
       $58 = ($56<<24>>24)==(100);
       if ($58) {
        $59 = ((($57)) + 3|0);
        $60 = ($59>>>0)<($1>>>0);
        if ($60) {
         $61 = ((($57)) + 1|0);
         $62 = HEAP8[$61>>0]|0;
         $63 = ($62<<24>>24)==(101);
         if ($63) {
          $64 = ((($57)) + 2|0);
          $65 = HEAP8[$64>>0]|0;
          $66 = ($65<<24>>24)==(102);
          if ($66) {
           $67 = HEAP8[$59>>0]|0;
           switch ($67<<24>>24) {
           case 37: case 125: case 123: case 93: case 91: case 62: case 60: case 41: case 40: case 47: case 0: case 12: case 9: case 10: case 13: case 32:  {
            $cur$2 = $59;
            break L40;
            break;
           }
           default: {
           }
           }
          }
         }
        }
        $$pr = HEAP8[$57>>0]|0;
        $69 = $$pr;
       } else {
        $69 = $56;
       }
       $68 = ($69<<24>>24)==(93);
       if ($68) {
        $$lcssa87 = $57;
        label = 24;
        break;
       }
       $71 = $69&255;
       $72 = (($71) + -48)|0;
       $73 = ($72>>>0)>(9);
       $or$cond1 = $47 & $73;
       do {
        if ($or$cond1) {
         $101 = HEAP32[$48>>2]|0;
         FUNCTION_TABLE_vi[$101 & 127]($loader);
         $102 = HEAP32[$49>>2]|0;
         $103 = ($102|0)==(0);
         if ($103) {
          $cur$1 = $57;$n$2 = $n$19;
         } else {
          label = 47;
          break L42;
         }
        } else {
         if ($50) {
          $charcode$0 = $n$19;
         } else {
          $74 = HEAP32[$55>>2]|0;
          $75 = (FUNCTION_TABLE_ii[$74 & 63]($loader)|0);
          $76 = HEAP32[$4>>2]|0;
          FUNCTION_TABLE_vi[$76 & 127]($loader);
          $charcode$0 = $75;
         }
         $77 = HEAP32[$loader>>2]|0;
         $78 = HEAP8[$77>>0]|0;
         $79 = ($78<<24>>24)==(47);
         $80 = ((($77)) + 2|0);
         $81 = ($80>>>0)<($1>>>0);
         $or$cond3 = $79 & $81;
         $82 = ($n$19|0)<($count$0|0);
         $or$cond4 = $82 & $or$cond3;
         if (!($or$cond4)) {
          if ($50) {
           label = 33;
           break L42;
          } else {
           $cur$1 = $77;$n$2 = $n$19;
           break;
          }
         }
         $83 = ((($77)) + 1|0);
         HEAP32[$loader>>2] = $83;
         $84 = HEAP32[$51>>2]|0;
         FUNCTION_TABLE_vi[$84 & 127]($loader);
         $85 = HEAP32[$52>>2]|0;
         $86 = ($85|0)==(0);
         if (!($86)) {
          label = 47;
          break L42;
         }
         $87 = HEAP32[$loader>>2]|0;
         $88 = $87;
         $89 = $83;
         $90 = (($88) - ($89))|0;
         $91 = HEAP32[$53>>2]|0;
         $92 = (($90) + 1)|0;
         $93 = (FUNCTION_TABLE_iiiii[$91 & 63]($14,$charcode$0,$83,$92)|0);
         HEAP32[$52>>2] = $93;
         $94 = ($93|0)==(0);
         if (!($94)) {
          label = 47;
          break L42;
         }
         $95 = HEAP32[$54>>2]|0;
         $96 = (($95) + ($charcode$0<<2)|0);
         $97 = HEAP32[$96>>2]|0;
         $98 = (($97) + ($90)|0);
         HEAP8[$98>>0] = 0;
         $99 = (($n$19) + 1)|0;
         $cur$1 = $83;$n$2 = $99;
        }
       } while(0);
       $104 = HEAP32[$4>>2]|0;
       FUNCTION_TABLE_vi[$104 & 127]($loader);
       $105 = HEAP32[$loader>>2]|0;
       $106 = ($105>>>0)<($1>>>0);
       if ($106) {
        $57 = $105;$n$19 = $n$2;
       } else {
        $cur$2 = $cur$1;
        break L40;
       }
      }
      if ((label|0) == 24) {
       $70 = ((($$lcssa87)) + 1|0);
       $cur$2 = $70;
       break;
      }
      else if ((label|0) == 33) {
       $100 = ((($loader)) + 12|0);
       HEAP32[$100>>2] = 2;
       STACKTOP = sp;return;
      }
      else if ((label|0) == 47) {
       STACKTOP = sp;return;
      }
     } else {
      $cur$2 = $6;
     }
    } while(0);
    $107 = ((($face)) + 368|0);
    HEAP32[$107>>2] = 1;
    HEAP32[$loader>>2] = $cur$2;
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[$error>>2]|0;
 $41 = ((($loader)) + 12|0);
 HEAP32[$41>>2] = $40;
 STACKTOP = sp;return;
}
function _parse_subrs($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base = 0, $error = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 8|0;
 $size = sp + 4|0;
 $base = sp;
 $0 = ((($loader)) + 316|0);
 $1 = ((($loader)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($face)) + 488|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($loader)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 127]($loader);
 $7 = HEAP32[$loader>>2]|0;
 $8 = ((($loader)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)<($9>>>0);
 if ($10) {
  $11 = HEAP8[$7>>0]|0;
  $12 = ($11<<24>>24)==(91);
  if ($12) {
   $13 = ((($loader)) + 32|0);
   $14 = HEAP32[$13>>2]|0;
   FUNCTION_TABLE_vi[$14 & 127]($loader);
   $15 = HEAP32[$5>>2]|0;
   FUNCTION_TABLE_vi[$15 & 127]($loader);
   $16 = HEAP32[$loader>>2]|0;
   $17 = HEAP32[$8>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = HEAP8[$16>>0]|0;
    $20 = ($19<<24>>24)==(93);
    if ($20) {
     STACKTOP = sp;return;
    }
   }
   $21 = ((($loader)) + 12|0);
   HEAP32[$21>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $22 = ((($loader)) + 36|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 63]($loader)|0);
 $25 = ((($loader)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_vi[$26 & 127]($loader);
 $27 = ((($loader)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$30 & 127]($loader);
 $31 = ((($loader)) + 312|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  $34 = HEAP32[$4>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  $36 = (FUNCTION_TABLE_iiii[$35 & 127]($0,$24,$2)|0);
  HEAP32[$error>>2] = $36;
  $37 = ($36|0)==(0);
  if ($37) {
   label = 9;
  }
 } else {
  label = 9;
 }
 L15: do {
  if ((label|0) == 9) {
   $38 = HEAP32[$loader>>2]|0;
   $39 = ((($38)) + 4|0);
   $40 = HEAP32[$8>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   L17: do {
    if ($41) {
     $42 = ((($face)) + 128|0);
     $43 = ((($face)) + 172|0);
     $44 = ((($4)) + 16|0);
     $45 = ((($loader)) + 360|0);
     $46 = ((($loader)) + 360|0);
     $47 = $38;
     while(1) {
      $48 = (_strncmp($47,88786,3)|0);
      $49 = ($48|0)==(0);
      if (!($49)) {
       break L17;
      }
      $50 = HEAP32[$25>>2]|0;
      FUNCTION_TABLE_vi[$50 & 127]($loader);
      $51 = HEAP32[$22>>2]|0;
      $52 = (FUNCTION_TABLE_ii[$51 & 63]($loader)|0);
      $53 = HEAP32[$42>>2]|0;
      $54 = ((($53)) + 52|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($55|0)!=(0|0);
      $57 = $56&1;
      $58 = (_read_binary_data($loader,$size,$base,$57)|0);
      $59 = ($58|0)==(0);
      if ($59) {
       label = 29;
       break;
      }
      $60 = HEAP32[$25>>2]|0;
      FUNCTION_TABLE_vi[$60 & 127]($loader);
      $61 = HEAP32[$27>>2]|0;
      $62 = ($61|0)==(0);
      if (!($62)) {
       label = 29;
       break;
      }
      $63 = HEAP32[$5>>2]|0;
      FUNCTION_TABLE_vi[$63 & 127]($loader);
      $64 = HEAP32[$loader>>2]|0;
      $65 = ((($64)) + 4|0);
      $66 = HEAP32[$8>>2]|0;
      $67 = ($65>>>0)<($66>>>0);
      if ($67) {
       $68 = (_strncmp($64,88790,3)|0);
       $69 = ($68|0)==(0);
       if ($69) {
        $70 = HEAP32[$25>>2]|0;
        FUNCTION_TABLE_vi[$70 & 127]($loader);
        $71 = HEAP32[$5>>2]|0;
        FUNCTION_TABLE_vi[$71 & 127]($loader);
       }
      }
      $72 = HEAP32[$31>>2]|0;
      $73 = ($72|0)==(0);
      if ($73) {
       $78 = HEAP32[$43>>2]|0;
       $79 = ($78|0)>(-1);
       if ($79) {
        $80 = HEAP32[$size>>2]|0;
        $81 = ($80|0)<($78|0);
        if ($81) {
         label = 21;
         break;
        }
        $82 = (_ft_mem_alloc($2,$80,$error)|0);
        $83 = HEAP32[$error>>2]|0;
        $84 = ($83|0)==(0);
        if (!($84)) {
         break L15;
        }
        $85 = HEAP32[$base>>2]|0;
        $86 = HEAP32[$size>>2]|0;
        _memcpy(($82|0),($85|0),($86|0))|0;
        $87 = HEAP32[$44>>2]|0;
        $88 = HEAP32[$size>>2]|0;
        FUNCTION_TABLE_viii[$87 & 31]($82,$88,4330);
        $89 = HEAP32[$43>>2]|0;
        $90 = HEAP32[$size>>2]|0;
        $91 = (($90) - ($89))|0;
        HEAP32[$size>>2] = $91;
        $92 = HEAP32[$45>>2]|0;
        $93 = HEAP32[$43>>2]|0;
        $94 = (($82) + ($93)|0);
        $95 = (FUNCTION_TABLE_iiiii[$92 & 63]($0,$52,$94,$91)|0);
        HEAP32[$error>>2] = $95;
        _ft_mem_free($2,$82);
        $$pr = HEAP32[$error>>2]|0;
        $101 = $$pr;
       } else {
        $96 = HEAP32[$46>>2]|0;
        $97 = HEAP32[$base>>2]|0;
        $98 = HEAP32[$size>>2]|0;
        $99 = (FUNCTION_TABLE_iiiii[$96 & 63]($0,$52,$97,$98)|0);
        HEAP32[$error>>2] = $99;
        $101 = $99;
       }
       $100 = ($101|0)==(0);
       if (!($100)) {
        break L15;
       }
      }
      $74 = HEAP32[$loader>>2]|0;
      $75 = ((($74)) + 4|0);
      $76 = HEAP32[$8>>2]|0;
      $77 = ($75>>>0)<($76>>>0);
      if ($77) {
       $47 = $74;
      } else {
       break L17;
      }
     }
     if ((label|0) == 21) {
      HEAP32[$error>>2] = 3;
      break L15;
     }
     else if ((label|0) == 29) {
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $102 = HEAP32[$31>>2]|0;
   $103 = ($102|0)==(0);
   if (!($103)) {
    STACKTOP = sp;return;
   }
   HEAP32[$31>>2] = $24;
   STACKTOP = sp;return;
  }
 } while(0);
 $104 = HEAP32[$error>>2]|0;
 HEAP32[$27>>2] = $104;
 STACKTOP = sp;return;
}
function _parse_charstrings($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $$lcssa = 0, $$lcssa128 = 0, $$notdef_found$0 = 0, $$pr = 0, $$pr4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base = 0, $cond = 0, $error = 0, $n$0$notdef_index$0 = 0, $n$0$ph$lcssa = 0, $n$0$ph$lcssa67 = 0, $n$0$ph37 = 0, $notdef_found$0$ph$lcssa = 0, $notdef_found$0$ph36 = 0, $notdef_found$1 = 0, $notdef_glyph = 0, $notdef_index$0$ph$lcssa = 0, $notdef_index$0$ph35 = 0, $notdef_index$1 = 0, $or$cond = 0, $or$cond3 = 0;
 var $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $error = sp + 8|0;
 $size = sp + 4|0;
 $base = sp;
 $notdef_glyph = sp + 12|0;
 $0 = ((($loader)) + 208|0);
 $1 = ((($loader)) + 156|0);
 $2 = ((($loader)) + 260|0);
 $3 = ((($loader)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($face)) + 488|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($loader)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($loader)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 63]($loader)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = ((($loader)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ((($loader)) + 152|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = HEAP32[$6>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($11) + 6)|0;
  $22 = (FUNCTION_TABLE_iiii[$20 & 127]($0,$21,$4)|0);
  HEAP32[$error>>2] = $22;
  $23 = ($22|0)==(0);
  if ($23) {
   $24 = HEAP32[$6>>2]|0;
   $25 = HEAP32[$24>>2]|0;
   $26 = (FUNCTION_TABLE_iiii[$25 & 127]($1,$21,$4)|0);
   HEAP32[$error>>2] = $26;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = HEAP32[$6>>2]|0;
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_iiii[$29 & 127]($2,4,$4)|0);
    HEAP32[$error>>2] = $30;
    $31 = ($30|0)==(0);
    if ($31) {
     label = 7;
    }
   }
  }
 } else {
  label = 7;
 }
 L11: do {
  if ((label|0) == 7) {
   $32 = ((($loader)) + 28|0);
   $33 = HEAP32[$32>>2]|0;
   FUNCTION_TABLE_vi[$33 & 127]($loader);
   $34 = HEAP32[$loader>>2]|0;
   $35 = ($34>>>0)<($8>>>0);
   do {
    if ($35) {
     $36 = ((($loader)) + 32|0);
     $37 = ((($face)) + 128|0);
     $38 = ((($loader)) + 200|0);
     $39 = ((($loader)) + 180|0);
     $40 = ((($face)) + 172|0);
     $41 = (($11) + 5)|0;
     $42 = ((($6)) + 16|0);
     $43 = ((($loader)) + 252|0);
     $44 = ((($loader)) + 252|0);
     $258 = $34;$n$0$ph37 = 0;$notdef_found$0$ph36 = 0;$notdef_index$0$ph35 = 0;
     L15: while(1) {
      $45 = ($n$0$ph37|0)!=(0);
      $47 = $258;
      while(1) {
       $46 = ((($47)) + 3|0);
       $48 = ($46>>>0)<($8>>>0);
       L19: do {
        if ($48) {
         $49 = HEAP8[$46>>0]|0;
         switch ($49<<24>>24) {
         case 37: case 125: case 123: case 93: case 91: case 62: case 60: case 41: case 40: case 47: case 0: case 12: case 9: case 10: case 13: case 32:  {
          break;
         }
         default: {
          break L19;
         }
         }
         $50 = HEAP8[$47>>0]|0;
         $51 = ($50<<24>>24)==(100);
         if ($51) {
          $52 = ((($47)) + 1|0);
          $53 = HEAP8[$52>>0]|0;
          $54 = ($53<<24>>24)==(101);
          if ($54) {
           $55 = ((($47)) + 2|0);
           $56 = HEAP8[$55>>0]|0;
           $57 = ($56<<24>>24)==(102);
           $or$cond = $45 & $57;
           if ($or$cond) {
            $n$0$ph$lcssa = $n$0$ph37;$notdef_found$0$ph$lcssa = $notdef_found$0$ph36;$notdef_index$0$ph$lcssa = $notdef_index$0$ph35;
            label = 38;
            break L15;
           }
          }
          $$pr = HEAP8[$47>>0]|0;
          $59 = $$pr;
         } else {
          $59 = $50;
         }
         $58 = ($59<<24>>24)==(101);
         if ($58) {
          $60 = ((($47)) + 1|0);
          $61 = HEAP8[$60>>0]|0;
          $62 = ($61<<24>>24)==(110);
          if ($62) {
           $63 = ((($47)) + 2|0);
           $64 = HEAP8[$63>>0]|0;
           $65 = ($64<<24>>24)==(100);
           if ($65) {
            $n$0$ph$lcssa = $n$0$ph37;$notdef_found$0$ph$lcssa = $notdef_found$0$ph36;$notdef_index$0$ph$lcssa = $notdef_index$0$ph35;
            label = 38;
            break L15;
           }
          }
         }
        }
       } while(0);
       $66 = HEAP32[$36>>2]|0;
       FUNCTION_TABLE_vi[$66 & 127]($loader);
       $67 = HEAP32[$13>>2]|0;
       $68 = ($67|0)==(0);
       if (!($68)) {
        label = 56;
        break L15;
       }
       $69 = HEAP8[$47>>0]|0;
       $70 = ($69<<24>>24)==(47);
       if ($70) {
        $74 = ((($47)) + 1|0);
        $75 = ($74>>>0)<($8>>>0);
        if (!($75)) {
         label = 24;
         break L15;
        }
        $76 = HEAP32[$loader>>2]|0;
        $77 = HEAP32[$37>>2]|0;
        $78 = ((($77)) + 52|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = ($79|0)!=(0|0);
        $81 = $80&1;
        $82 = (_read_binary_data($loader,$size,$base,$81)|0);
        $83 = ($82|0)==(0);
        if ($83) {
         label = 56;
         break L15;
        }
        $84 = HEAP32[$16>>2]|0;
        $85 = ($84|0)==(0);
        if ($85) {
         $$lcssa = $76;$$lcssa128 = $74;
         break;
        }
       }
       $71 = HEAP32[$32>>2]|0;
       FUNCTION_TABLE_vi[$71 & 127]($loader);
       $72 = HEAP32[$loader>>2]|0;
       $73 = ($72>>>0)<($8>>>0);
       if ($73) {
        $47 = $72;
       } else {
        $n$0$ph$lcssa = $n$0$ph37;$notdef_found$0$ph$lcssa = $notdef_found$0$ph36;$notdef_index$0$ph$lcssa = $notdef_index$0$ph35;
        label = 38;
        break L15;
       }
      }
      $86 = $$lcssa;
      $87 = $$lcssa128;
      $88 = (($86) - ($87))|0;
      $89 = HEAP32[$38>>2]|0;
      $90 = (($88) + 1)|0;
      $91 = (FUNCTION_TABLE_iiiii[$89 & 63]($1,$n$0$ph37,$$lcssa128,$90)|0);
      HEAP32[$error>>2] = $91;
      $92 = ($91|0)==(0);
      if (!($92)) {
       break L11;
      }
      $93 = HEAP32[$39>>2]|0;
      $94 = (($93) + ($n$0$ph37<<2)|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (($95) + ($88)|0);
      HEAP8[$96>>0] = 0;
      $97 = HEAP8[$$lcssa128>>0]|0;
      $98 = ($97<<24>>24)==(46);
      if ($98) {
       $99 = HEAP32[$39>>2]|0;
       $100 = (($99) + ($n$0$ph37<<2)|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = (_strcmp(89635,$101)|0);
       $103 = ($102|0)==(0);
       $n$0$notdef_index$0 = $103 ? $n$0$ph37 : $notdef_index$0$ph35;
       $$notdef_found$0 = $103 ? 1 : $notdef_found$0$ph36;
       $notdef_found$1 = $$notdef_found$0;$notdef_index$1 = $n$0$notdef_index$0;
      } else {
       $notdef_found$1 = $notdef_found$0$ph36;$notdef_index$1 = $notdef_index$0$ph35;
      }
      $104 = HEAP32[$40>>2]|0;
      $105 = ($104|0)>(-1);
      $106 = ($n$0$ph37|0)<($41|0);
      $or$cond3 = $106 & $105;
      if ($or$cond3) {
       $107 = HEAP32[$size>>2]|0;
       $108 = ($107|0)>($104|0);
       if (!($108)) {
        label = 32;
        break;
       }
       $109 = (_ft_mem_alloc($4,$107,$error)|0);
       $110 = HEAP32[$error>>2]|0;
       $111 = ($110|0)==(0);
       if (!($111)) {
        break L11;
       }
       $112 = HEAP32[$base>>2]|0;
       $113 = HEAP32[$size>>2]|0;
       _memcpy(($109|0),($112|0),($113|0))|0;
       $114 = HEAP32[$42>>2]|0;
       $115 = HEAP32[$size>>2]|0;
       FUNCTION_TABLE_viii[$114 & 31]($109,$115,4330);
       $116 = HEAP32[$40>>2]|0;
       $117 = HEAP32[$size>>2]|0;
       $118 = (($117) - ($116))|0;
       HEAP32[$size>>2] = $118;
       $119 = HEAP32[$43>>2]|0;
       $120 = HEAP32[$40>>2]|0;
       $121 = (($109) + ($120)|0);
       $122 = (FUNCTION_TABLE_iiiii[$119 & 63]($0,$n$0$ph37,$121,$118)|0);
       HEAP32[$error>>2] = $122;
       _ft_mem_free($4,$109);
       $$pr4 = HEAP32[$error>>2]|0;
       $128 = $$pr4;
      } else {
       $123 = HEAP32[$44>>2]|0;
       $124 = HEAP32[$base>>2]|0;
       $125 = HEAP32[$size>>2]|0;
       $126 = (FUNCTION_TABLE_iiiii[$123 & 63]($0,$n$0$ph37,$124,$125)|0);
       HEAP32[$error>>2] = $126;
       $128 = $126;
      }
      $127 = ($128|0)==(0);
      if (!($127)) {
       break L11;
      }
      $129 = (($n$0$ph37) + 1)|0;
      $130 = HEAP32[$32>>2]|0;
      FUNCTION_TABLE_vi[$130 & 127]($loader);
      $131 = HEAP32[$loader>>2]|0;
      $132 = ($131>>>0)<($8>>>0);
      if ($132) {
       $258 = $131;$n$0$ph37 = $129;$notdef_found$0$ph36 = $notdef_found$1;$notdef_index$0$ph35 = $notdef_index$1;
      } else {
       $n$0$ph$lcssa = $129;$notdef_found$0$ph$lcssa = $notdef_found$1;$notdef_index$0$ph$lcssa = $notdef_index$1;
       label = 38;
       break;
      }
     }
     if ((label|0) == 24) {
      HEAP32[$error>>2] = 3;
      break L11;
     }
     else if ((label|0) == 32) {
      HEAP32[$error>>2] = 3;
      break L11;
     }
     else if ((label|0) == 38) {
      HEAP32[$16>>2] = $n$0$ph$lcssa;
      $cond = ($notdef_found$0$ph$lcssa<<24>>24)==(0);
      if ($cond) {
       $n$0$ph$lcssa67 = $n$0$ph$lcssa;
       break;
      }
      $133 = ((($loader)) + 180|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = HEAP32[$134>>2]|0;
      $136 = (_strcmp(89635,$135)|0);
      $137 = ($136|0)==(0);
      if ($137) {
       STACKTOP = sp;return;
      }
      $138 = ((($loader)) + 304|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ((($loader)) + 184|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = HEAP32[$141>>2]|0;
      $143 = (FUNCTION_TABLE_iiiii[$139 & 63]($2,0,$135,$142)|0);
      HEAP32[$error>>2] = $143;
      $144 = ($143|0)==(0);
      if (!($144)) {
       break L11;
      }
      $145 = HEAP32[$138>>2]|0;
      $146 = ((($loader)) + 232|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($loader)) + 236|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = HEAP32[$150>>2]|0;
      $152 = (FUNCTION_TABLE_iiiii[$145 & 63]($2,1,$148,$151)|0);
      HEAP32[$error>>2] = $152;
      $153 = ($152|0)==(0);
      if (!($153)) {
       break L11;
      }
      $154 = HEAP32[$138>>2]|0;
      $155 = HEAP32[$133>>2]|0;
      $156 = (($155) + ($notdef_index$0$ph$lcssa<<2)|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = HEAP32[$140>>2]|0;
      $159 = (($158) + ($notdef_index$0$ph$lcssa<<2)|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = (FUNCTION_TABLE_iiiii[$154 & 63]($2,2,$157,$160)|0);
      HEAP32[$error>>2] = $161;
      $162 = ($161|0)==(0);
      if (!($162)) {
       break L11;
      }
      $163 = HEAP32[$138>>2]|0;
      $164 = HEAP32[$146>>2]|0;
      $165 = (($164) + ($notdef_index$0$ph$lcssa<<2)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[$149>>2]|0;
      $168 = (($167) + ($notdef_index$0$ph$lcssa<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (FUNCTION_TABLE_iiiii[$163 & 63]($2,3,$166,$169)|0);
      HEAP32[$error>>2] = $170;
      $171 = ($170|0)==(0);
      if (!($171)) {
       break L11;
      }
      $172 = ((($loader)) + 200|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ((($loader)) + 284|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = HEAP32[$175>>2]|0;
      $177 = ((($loader)) + 288|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = HEAP32[$178>>2]|0;
      $180 = (FUNCTION_TABLE_iiiii[$173 & 63]($1,$notdef_index$0$ph$lcssa,$176,$179)|0);
      HEAP32[$error>>2] = $180;
      $181 = ($180|0)==(0);
      if (!($181)) {
       break L11;
      }
      $182 = ((($loader)) + 252|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = HEAP32[$174>>2]|0;
      $185 = ((($184)) + 4|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = HEAP32[$177>>2]|0;
      $188 = ((($187)) + 4|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = (FUNCTION_TABLE_iiiii[$183 & 63]($0,$notdef_index$0$ph$lcssa,$186,$189)|0);
      HEAP32[$error>>2] = $190;
      $191 = ($190|0)==(0);
      if (!($191)) {
       break L11;
      }
      $192 = HEAP32[$172>>2]|0;
      $193 = HEAP32[$174>>2]|0;
      $194 = ((($193)) + 8|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = HEAP32[$177>>2]|0;
      $197 = ((($196)) + 8|0);
      $198 = HEAP32[$197>>2]|0;
      $199 = (FUNCTION_TABLE_iiiii[$192 & 63]($1,0,$195,$198)|0);
      HEAP32[$error>>2] = $199;
      $200 = ($199|0)==(0);
      if (!($200)) {
       break L11;
      }
      $201 = HEAP32[$182>>2]|0;
      $202 = HEAP32[$174>>2]|0;
      $203 = ((($202)) + 12|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = HEAP32[$177>>2]|0;
      $206 = ((($205)) + 12|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = (FUNCTION_TABLE_iiiii[$201 & 63]($0,0,$204,$207)|0);
      HEAP32[$error>>2] = $208;
      $209 = ($208|0)==(0);
      if (!($209)) {
       break L11;
      }
      STACKTOP = sp;return;
     }
     else if ((label|0) == 56) {
      STACKTOP = sp;return;
     }
    } else {
     HEAP32[$16>>2] = 0;
     $n$0$ph$lcssa67 = 0;
    }
   } while(0);
   ;HEAP8[$notdef_glyph>>0]=HEAP8[88781>>0]|0;HEAP8[$notdef_glyph+1>>0]=HEAP8[88781+1>>0]|0;HEAP8[$notdef_glyph+2>>0]=HEAP8[88781+2>>0]|0;HEAP8[$notdef_glyph+3>>0]=HEAP8[88781+3>>0]|0;HEAP8[$notdef_glyph+4>>0]=HEAP8[88781+4>>0]|0;
   $210 = ((($loader)) + 304|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = ((($loader)) + 180|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = HEAP32[$213>>2]|0;
   $215 = ((($loader)) + 184|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = HEAP32[$216>>2]|0;
   $218 = (FUNCTION_TABLE_iiiii[$211 & 63]($2,0,$214,$217)|0);
   HEAP32[$error>>2] = $218;
   $219 = ($218|0)==(0);
   if ($219) {
    $220 = HEAP32[$210>>2]|0;
    $221 = ((($loader)) + 232|0);
    $222 = HEAP32[$221>>2]|0;
    $223 = HEAP32[$222>>2]|0;
    $224 = ((($loader)) + 236|0);
    $225 = HEAP32[$224>>2]|0;
    $226 = HEAP32[$225>>2]|0;
    $227 = (FUNCTION_TABLE_iiiii[$220 & 63]($2,1,$223,$226)|0);
    HEAP32[$error>>2] = $227;
    $228 = ($227|0)==(0);
    if ($228) {
     $229 = ((($loader)) + 200|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = (FUNCTION_TABLE_iiiii[$230 & 63]($1,0,89635,8)|0);
     HEAP32[$error>>2] = $231;
     $232 = ($231|0)==(0);
     if ($232) {
      $233 = ((($loader)) + 252|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = (FUNCTION_TABLE_iiiii[$234 & 63]($0,0,$notdef_glyph,5)|0);
      HEAP32[$error>>2] = $235;
      $236 = ($235|0)==(0);
      if ($236) {
       $237 = HEAP32[$229>>2]|0;
       $238 = ((($loader)) + 284|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = HEAP32[$239>>2]|0;
       $241 = ((($loader)) + 288|0);
       $242 = HEAP32[$241>>2]|0;
       $243 = HEAP32[$242>>2]|0;
       $244 = (FUNCTION_TABLE_iiiii[$237 & 63]($1,$n$0$ph$lcssa67,$240,$243)|0);
       HEAP32[$error>>2] = $244;
       $245 = ($244|0)==(0);
       if ($245) {
        $246 = HEAP32[$233>>2]|0;
        $247 = HEAP32[$238>>2]|0;
        $248 = ((($247)) + 4|0);
        $249 = HEAP32[$248>>2]|0;
        $250 = HEAP32[$241>>2]|0;
        $251 = ((($250)) + 4|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = (FUNCTION_TABLE_iiiii[$246 & 63]($0,$n$0$ph$lcssa67,$249,$252)|0);
        HEAP32[$error>>2] = $253;
        $254 = ($253|0)==(0);
        if ($254) {
         $255 = HEAP32[$16>>2]|0;
         $256 = (($255) + 1)|0;
         HEAP32[$16>>2] = $256;
         STACKTOP = sp;return;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $257 = HEAP32[$error>>2]|0;
 HEAP32[$13>>2] = $257;
 STACKTOP = sp;return;
}
function _parse_private($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 372|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 return;
}
function _parse_blend_design_positions($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $axis$04 = 0, $axis_tokens = 0, $blend$05 = 0, $blend$1 = 0, $design_tokens = 0, $error$2$ph = 0, $error$3 = 0, $n$06 = 0, $n_axis = 0, $num_axis$07 = 0, $num_axis$1 = 0, $num_designs = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $design_tokens = sp + 56|0;
 $num_designs = sp + 4|0;
 $axis_tokens = sp + 8|0;
 $n_axis = sp;
 $0 = ((($loader)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_viiii[$1 & 15]($loader,$design_tokens,16,$num_designs);
 $2 = HEAP32[$num_designs>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  $error$3 = 162;
  $44 = ((($loader)) + 12|0);
  HEAP32[$44>>2] = $error$3;
  STACKTOP = sp;return;
 }
 $4 = ($2|0)==(0);
 $5 = ($2|0)>(16);
 $or$cond = $4 | $5;
 if ($or$cond) {
  $error$3 = 3;
  $44 = ((($loader)) + 12|0);
  HEAP32[$44>>2] = $error$3;
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$loader>>2]|0;
 $7 = ((($loader)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($face)) + 532|0);
 $10 = HEAP32[$num_designs>>2]|0;
 $11 = ($10|0)>(0);
 L7: do {
  if ($11) {
   $12 = HEAP32[$9>>2]|0;
   $13 = ((($loader)) + 40|0);
   $blend$05 = $12;$n$06 = 0;$num_axis$07 = 0;
   while(1) {
    $14 = (($design_tokens) + (($n$06*12)|0)|0);
    $15 = HEAP32[$14>>2]|0;
    HEAP32[$loader>>2] = $15;
    $16 = (((($design_tokens) + (($n$06*12)|0)|0)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    HEAP32[$7>>2] = $17;
    $18 = HEAP32[$0>>2]|0;
    FUNCTION_TABLE_viiii[$18 & 15]($loader,$axis_tokens,4,$n_axis);
    $19 = ($n$06|0)==(0);
    $20 = HEAP32[$n_axis>>2]|0;
    if ($19) {
     $$off = (($20) + -1)|0;
     $21 = ($$off>>>0)>(3);
     if ($21) {
      $error$2$ph = 3;
      break;
     }
     $22 = HEAP32[$num_designs>>2]|0;
     $23 = (_t1_allocate_blend($face,$22,$20)|0);
     $24 = ($23|0)==(0);
     if (!($24)) {
      $error$2$ph = $23;
      break;
     }
     $25 = HEAP32[$9>>2]|0;
     $blend$1 = $25;$num_axis$1 = $20;
    } else {
     $26 = ($20|0)==($num_axis$07|0);
     if ($26) {
      $blend$1 = $blend$05;$num_axis$1 = $num_axis$07;
     } else {
      $error$2$ph = 3;
      break;
     }
    }
    $27 = HEAP32[$n_axis>>2]|0;
    $28 = ($27|0)>(0);
    if ($28) {
     $29 = (((($blend$1)) + 24|0) + ($n$06<<2)|0);
     $axis$04 = 0;
     while(1) {
      $30 = (($axis_tokens) + (($axis$04*12)|0)|0);
      $31 = HEAP32[$30>>2]|0;
      HEAP32[$loader>>2] = $31;
      $32 = (((($axis_tokens) + (($axis$04*12)|0)|0)) + 4|0);
      $33 = HEAP32[$32>>2]|0;
      HEAP32[$7>>2] = $33;
      $34 = HEAP32[$13>>2]|0;
      $35 = (FUNCTION_TABLE_iii[$34 & 255]($loader,0)|0);
      $36 = HEAP32[$29>>2]|0;
      $37 = (($36) + ($axis$04<<2)|0);
      HEAP32[$37>>2] = $35;
      $38 = (($axis$04) + 1)|0;
      $39 = HEAP32[$n_axis>>2]|0;
      $40 = ($38|0)<($39|0);
      if ($40) {
       $axis$04 = $38;
      } else {
       break;
      }
     }
    }
    $41 = (($n$06) + 1)|0;
    $42 = HEAP32[$num_designs>>2]|0;
    $43 = ($41|0)<($42|0);
    if ($43) {
     $blend$05 = $blend$1;$n$06 = $41;$num_axis$07 = $num_axis$1;
    } else {
     break L7;
    }
   }
   $error$3 = $error$2$ph;
   $44 = ((($loader)) + 12|0);
   HEAP32[$44>>2] = $error$3;
   STACKTOP = sp;return;
  }
 } while(0);
 HEAP32[$loader>>2] = $6;
 HEAP32[$7>>2] = $8;
 $error$3 = 0;
 $44 = ((($loader)) + 12|0);
 HEAP32[$44>>2] = $error$3;
 STACKTOP = sp;return;
}
function _parse_blend_design_map($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $axis_tokens = 0, $error = 0, $n$07 = 0, $num_axis = 0, $num_points = 0, $or$cond = 0, $p$06 = 0, $point_tokens = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $error = sp + 248|0;
 $axis_tokens = sp + 256|0;
 $num_axis = sp + 4|0;
 $point_tokens = sp + 8|0;
 $num_points = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($loader)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viiii[$3 & 15]($loader,$axis_tokens,4,$num_axis);
 $4 = HEAP32[$num_axis>>2]|0;
 $5 = ($4|0)<(0);
 if ($5) {
  HEAP32[$error>>2] = 162;
  $59 = HEAP32[$error>>2]|0;
  $60 = ((($loader)) + 12|0);
  HEAP32[$60>>2] = $59;
  STACKTOP = sp;return;
 }
 $6 = ($4|0)==(0);
 $7 = ($4|0)>(4);
 $or$cond = $6 | $7;
 if ($or$cond) {
  HEAP32[$error>>2] = 3;
  $59 = HEAP32[$error>>2]|0;
  $60 = ((($loader)) + 12|0);
  HEAP32[$60>>2] = $59;
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$loader>>2]|0;
 $9 = ((($loader)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_t1_allocate_blend($face,0,$4)|0);
 HEAP32[$error>>2] = $11;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $59 = HEAP32[$error>>2]|0;
  $60 = ((($loader)) + 12|0);
  HEAP32[$60>>2] = $59;
  STACKTOP = sp;return;
 }
 $13 = ((($face)) + 532|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$num_axis>>2]|0;
 $16 = ($15|0)>(0);
 L12: do {
  if ($16) {
   $17 = ((($loader)) + 36|0);
   $18 = ((($loader)) + 40|0);
   $n$07 = 0;
   while(1) {
    $19 = (($axis_tokens) + (($n$07*12)|0)|0);
    $20 = HEAP32[$19>>2]|0;
    HEAP32[$loader>>2] = $20;
    $21 = (((($axis_tokens) + (($n$07*12)|0)|0)) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP32[$9>>2] = $22;
    $23 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$23 & 15]($loader,$point_tokens,20,$num_points);
    $24 = HEAP32[$num_points>>2]|0;
    $$off = (($24) + -1)|0;
    $25 = ($$off>>>0)>(19);
    if ($25) {
     label = 9;
     break;
    }
    $26 = $24 << 1;
    $27 = (_ft_mem_realloc($1,4,0,$26,0,$error)|0);
    $28 = (((((($14)) + 88|0) + (($n$07*12)|0)|0)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = HEAP32[$error>>2]|0;
    $30 = ($29|0)==(0);
    if (!($30)) {
     label = 15;
     break;
    }
    $31 = HEAP32[$num_points>>2]|0;
    $32 = (($27) + ($31<<2)|0);
    $33 = (((((($14)) + 88|0) + (($n$07*12)|0)|0)) + 8|0);
    HEAP32[$33>>2] = $32;
    $34 = HEAP32[$num_points>>2]|0;
    $35 = $34&255;
    $36 = (((($14)) + 88|0) + (($n$07*12)|0)|0);
    HEAP8[$36>>0] = $35;
    $37 = HEAP32[$num_points>>2]|0;
    $38 = ($37|0)>(0);
    if ($38) {
     $p$06 = 0;
     while(1) {
      $39 = (($point_tokens) + (($p$06*12)|0)|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ((($40)) + 1|0);
      HEAP32[$loader>>2] = $41;
      $42 = (((($point_tokens) + (($p$06*12)|0)|0)) + 4|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ((($43)) + -1|0);
      HEAP32[$9>>2] = $44;
      $45 = HEAP32[$17>>2]|0;
      $46 = (FUNCTION_TABLE_ii[$45 & 63]($loader)|0);
      $47 = HEAP32[$28>>2]|0;
      $48 = (($47) + ($p$06<<2)|0);
      HEAP32[$48>>2] = $46;
      $49 = HEAP32[$18>>2]|0;
      $50 = (FUNCTION_TABLE_iii[$49 & 255]($loader,0)|0);
      $51 = HEAP32[$33>>2]|0;
      $52 = (($51) + ($p$06<<2)|0);
      HEAP32[$52>>2] = $50;
      $53 = (($p$06) + 1)|0;
      $54 = HEAP32[$num_points>>2]|0;
      $55 = ($53|0)<($54|0);
      if ($55) {
       $p$06 = $53;
      } else {
       break;
      }
     }
    }
    $56 = (($n$07) + 1)|0;
    $57 = HEAP32[$num_axis>>2]|0;
    $58 = ($56|0)<($57|0);
    if ($58) {
     $n$07 = $56;
    } else {
     break L12;
    }
   }
   if ((label|0) == 9) {
    HEAP32[$error>>2] = 3;
    $59 = HEAP32[$error>>2]|0;
    $60 = ((($loader)) + 12|0);
    HEAP32[$60>>2] = $59;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 15) {
    $59 = HEAP32[$error>>2]|0;
    $60 = ((($loader)) + 12|0);
    HEAP32[$60>>2] = $59;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 HEAP32[$loader>>2] = $8;
 HEAP32[$9>>2] = $10;
 $59 = HEAP32[$error>>2]|0;
 $60 = ((($loader)) + 12|0);
 HEAP32[$60>>2] = $59;
 STACKTOP = sp;return;
}
function _parse_blend_axis_types($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $axis_tokens = 0, $error = 0;
 var $n$02 = 0, $num_axis = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $axis_tokens = sp + 8|0;
 $num_axis = sp + 4|0;
 $error = sp;
 HEAP32[$error>>2] = 0;
 $0 = ((($loader)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_viiii[$1 & 15]($loader,$axis_tokens,4,$num_axis);
 $2 = HEAP32[$num_axis>>2]|0;
 $3 = ($2|0)<(0);
 L1: do {
  if ($3) {
   HEAP32[$error>>2] = 162;
  } else {
   $4 = ($2|0)==(0);
   $5 = ($2|0)>(4);
   $or$cond = $4 | $5;
   if ($or$cond) {
    HEAP32[$error>>2] = 3;
    break;
   }
   $6 = (_t1_allocate_blend($face,0,$2)|0);
   HEAP32[$error>>2] = $6;
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = ((($face)) + 532|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($face)) + 100|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = HEAP32[$num_axis>>2]|0;
    $13 = ($12|0)>(0);
    if ($13) {
     $n$02 = 0;
     while(1) {
      $14 = (($axis_tokens) + (($n$02*12)|0)|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = HEAP8[$15>>0]|0;
      $17 = ($16<<24>>24)==(47);
      if ($17) {
       $18 = ((($15)) + 1|0);
       HEAP32[$14>>2] = $18;
      }
      $19 = (((($axis_tokens) + (($n$02*12)|0)|0)) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = HEAP32[$14>>2]|0;
      $22 = $20;
      $23 = $21;
      $24 = (($22) - ($23))|0;
      $25 = ($20|0)==($21|0);
      if ($25) {
       break;
      }
      $26 = (($24) + 1)|0;
      $27 = (_ft_mem_alloc($11,$26,$error)|0);
      $28 = (((($9)) + 8|0) + ($n$02<<2)|0);
      HEAP32[$28>>2] = $27;
      $29 = HEAP32[$error>>2]|0;
      $30 = ($29|0)==(0);
      if (!($30)) {
       break L1;
      }
      $31 = HEAP32[$14>>2]|0;
      _memcpy(($27|0),($31|0),($24|0))|0;
      $32 = (($27) + ($24)|0);
      HEAP8[$32>>0] = 0;
      $33 = (($n$02) + 1)|0;
      $34 = HEAP32[$num_axis>>2]|0;
      $35 = ($33|0)<($34|0);
      if ($35) {
       $n$02 = $33;
      } else {
       break L1;
      }
     }
     HEAP32[$error>>2] = 3;
    }
   }
  }
 } while(0);
 $36 = HEAP32[$error>>2]|0;
 $37 = ((($loader)) + 12|0);
 HEAP32[$37>>2] = $36;
 STACKTOP = sp;return;
}
function _parse_weight_vector($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blend$0 = 0, $design_tokens = 0;
 var $error$1 = 0, $n$02 = 0, $num_designs = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $design_tokens = sp + 8|0;
 $num_designs = sp;
 $0 = ((($face)) + 532|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($loader)) + 60|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viiii[$3 & 15]($loader,$design_tokens,16,$num_designs);
 $4 = HEAP32[$num_designs>>2]|0;
 $5 = ($4|0)<(0);
 do {
  if ($5) {
   $error$1 = 162;
  } else {
   $6 = ($4|0)==(0);
   $7 = ($4|0)>(16);
   $or$cond = $6 | $7;
   if ($or$cond) {
    $error$1 = 3;
   } else {
    $8 = ($1|0)==(0|0);
    if ($8) {
     label = 5;
    } else {
     $9 = HEAP32[$1>>2]|0;
     $10 = ($9|0)==(0);
     if ($10) {
      label = 5;
     } else {
      $15 = ($9|0)==($4|0);
      if ($15) {
       $blend$0 = $1;
      } else {
       $error$1 = 3;
       break;
      }
     }
    }
    if ((label|0) == 5) {
     $11 = HEAP32[$num_designs>>2]|0;
     $12 = (_t1_allocate_blend($face,$11,0)|0);
     $13 = ($12|0)==(0);
     if (!($13)) {
      $error$1 = $12;
      break;
     }
     $14 = HEAP32[$0>>2]|0;
     $blend$0 = $14;
    }
    $16 = HEAP32[$loader>>2]|0;
    $17 = ((($loader)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = HEAP32[$num_designs>>2]|0;
    $20 = ($19|0)>(0);
    if ($20) {
     $21 = ((($loader)) + 40|0);
     $22 = ((($blend$0)) + 136|0);
     $23 = ((($blend$0)) + 140|0);
     $n$02 = 0;
     while(1) {
      $24 = (($design_tokens) + (($n$02*12)|0)|0);
      $25 = HEAP32[$24>>2]|0;
      HEAP32[$loader>>2] = $25;
      $26 = (((($design_tokens) + (($n$02*12)|0)|0)) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      HEAP32[$17>>2] = $27;
      $28 = HEAP32[$21>>2]|0;
      $29 = (FUNCTION_TABLE_iii[$28 & 255]($loader,0)|0);
      $30 = HEAP32[$22>>2]|0;
      $31 = (($30) + ($n$02<<2)|0);
      HEAP32[$31>>2] = $29;
      $32 = HEAP32[$23>>2]|0;
      $33 = (($32) + ($n$02<<2)|0);
      HEAP32[$33>>2] = $29;
      $34 = (($n$02) + 1)|0;
      $35 = HEAP32[$num_designs>>2]|0;
      $36 = ($34|0)<($35|0);
      if ($36) {
       $n$02 = $34;
      } else {
       break;
      }
     }
    }
    HEAP32[$loader>>2] = $16;
    HEAP32[$17>>2] = $18;
    $error$1 = 0;
   }
  }
 } while(0);
 $37 = ((($loader)) + 12|0);
 HEAP32[$37>>2] = $error$1;
 STACKTOP = sp;return;
}
function _parse_buildchar($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iiiii[$1 & 63]($loader,0,0,0)|0);
 $3 = ((($face)) + 544|0);
 HEAP32[$3>>2] = $2;
 return;
}
function _t1_allocate_blend($face,$num_designs,$num_axis) {
 $face = $face|0;
 $num_designs = $num_designs|0;
 $num_axis = $num_axis|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $blend$0 = 0, $error = 0;
 var $exitcond = 0, $n$03 = 0, $nn$04 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = ((($face)) + 532|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $5 = (_ft_mem_alloc($1,420,$error)|0);
   $6 = HEAP32[$error>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = ((($5)) + 416|0);
    HEAP32[$8>>2] = 0;
    HEAP32[$2>>2] = $5;
    $blend$0 = $5;
    break;
   } else {
    $77 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($77|0);
   }
  } else {
   $blend$0 = $3;
  }
 } while(0);
 $9 = ($num_designs|0)==(0);
 do {
  if ($9) {
   label = 14;
  } else {
   $10 = HEAP32[$blend$0>>2]|0;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $53 = ($10|0)==($num_designs|0);
    if ($53) {
     label = 14;
     break;
    } else {
     break;
    }
   }
   $12 = (_ft_mem_realloc($1,32,0,$num_designs,0,$error)|0);
   $13 = ((($blend$0)) + 148|0);
   HEAP32[$13>>2] = $12;
   $14 = HEAP32[$error>>2]|0;
   $15 = ($14|0)==(0);
   if (!($15)) {
    $77 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($77|0);
   }
   $16 = (_ft_mem_realloc($1,196,0,$num_designs,0,$error)|0);
   $17 = ((($blend$0)) + 216|0);
   HEAP32[$17>>2] = $16;
   $18 = HEAP32[$error>>2]|0;
   $19 = ($18|0)==(0);
   if (!($19)) {
    $77 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($77|0);
   }
   $20 = (_ft_mem_realloc($1,16,0,$num_designs,0,$error)|0);
   $21 = ((($blend$0)) + 288|0);
   HEAP32[$21>>2] = $20;
   $22 = HEAP32[$error>>2]|0;
   $23 = ($22|0)==(0);
   if (!($23)) {
    $77 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($77|0);
   }
   $24 = $num_designs << 1;
   $25 = (_ft_mem_realloc($1,4,0,$24,0,$error)|0);
   $26 = ((($blend$0)) + 136|0);
   HEAP32[$26>>2] = $25;
   $27 = HEAP32[$error>>2]|0;
   $28 = ($27|0)==(0);
   if (!($28)) {
    $77 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($77|0);
   }
   $29 = (($25) + ($num_designs<<2)|0);
   $30 = ((($blend$0)) + 140|0);
   HEAP32[$30>>2] = $29;
   $31 = ((($face)) + 132|0);
   $32 = ((($blend$0)) + 144|0);
   HEAP32[$32>>2] = $31;
   $33 = ((($face)) + 168|0);
   $34 = ((($blend$0)) + 212|0);
   HEAP32[$34>>2] = $33;
   $35 = ((($face)) + 460|0);
   $36 = ((($blend$0)) + 284|0);
   HEAP32[$36>>2] = $35;
   $37 = ($num_designs>>>0)<(2);
   if (!($37)) {
    $nn$04 = 2;
    while(1) {
     $38 = (($nn$04) + -1)|0;
     $39 = (((($blend$0)) + 212|0) + ($38<<2)|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ((($40)) + 196|0);
     $42 = (((($blend$0)) + 212|0) + ($nn$04<<2)|0);
     HEAP32[$42>>2] = $41;
     $43 = (((($blend$0)) + 144|0) + ($38<<2)|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ((($44)) + 32|0);
     $46 = (((($blend$0)) + 144|0) + ($nn$04<<2)|0);
     HEAP32[$46>>2] = $45;
     $47 = (((($blend$0)) + 284|0) + ($38<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ((($48)) + 16|0);
     $50 = (((($blend$0)) + 284|0) + ($nn$04<<2)|0);
     HEAP32[$50>>2] = $49;
     $51 = (($nn$04) + 1)|0;
     $52 = ($51>>>0)>($num_designs>>>0);
     if ($52) {
      break;
     } else {
      $nn$04 = $51;
     }
    }
   }
   HEAP32[$blend$0>>2] = $num_designs;
   label = 14;
  }
 } while(0);
 do {
  if ((label|0) == 14) {
   $54 = ($num_axis|0)==(0);
   if (!($54)) {
    $55 = ((($blend$0)) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)==(0);
    $58 = ($56|0)==($num_axis|0);
    $or$cond2 = $57 | $58;
    if (!($or$cond2)) {
     break;
    }
    HEAP32[$55>>2] = $num_axis;
   }
   $59 = HEAP32[$blend$0>>2]|0;
   $60 = ((($blend$0)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)!=(0);
   $63 = ($61|0)!=(0);
   $or$cond = $62 & $63;
   if (!($or$cond)) {
    $77 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($77|0);
   }
   $64 = ((($blend$0)) + 24|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)==(0|0);
   if (!($66)) {
    $77 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($77|0);
   }
   $67 = Math_imul($61, $59)|0;
   $68 = (_ft_mem_realloc($1,4,0,$67,0,$error)|0);
   HEAP32[$64>>2] = $68;
   $69 = HEAP32[$error>>2]|0;
   $70 = ($69|0)==(0);
   $71 = ($59>>>0)>(1);
   $or$cond6 = $70 & $71;
   if ($or$cond6) {
    $n$03 = 1;
   } else {
    $77 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($77|0);
   }
   while(1) {
    $72 = HEAP32[$64>>2]|0;
    $73 = Math_imul($n$03, $61)|0;
    $74 = (($72) + ($73<<2)|0);
    $75 = (((($blend$0)) + 24|0) + ($n$03<<2)|0);
    HEAP32[$75>>2] = $74;
    $76 = (($n$03) + 1)|0;
    $exitcond = ($76|0)==($59|0);
    if ($exitcond) {
     break;
    } else {
     $n$03 = $76;
    }
   }
   $77 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($77|0);
  }
 } while(0);
 HEAP32[$error>>2] = 3;
 $77 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($77|0);
}
function _T1_New_Parser($parser,$stream,$memory,$psaux) {
 $parser = $parser|0;
 $stream = $stream|0;
 $memory = $memory|0;
 $psaux = $psaux|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $size = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 4|0;
 $tag = sp + 8|0;
 $size = sp;
 $0 = ((($psaux)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_viiii[$2 & 15]($parser,0,0,$memory);
 $3 = ((($parser)) + 72|0);
 HEAP32[$3>>2] = $stream;
 $4 = ((($parser)) + 80|0);
 $5 = ((($parser)) + 76|0);
 $6 = ((($parser)) + 92|0);
 $7 = ((($parser)) + 93|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP16[$5+16>>1]=0|0;HEAP8[$5+18>>0]=0|0;
 $8 = (_check_type1_format($stream,88794,14)|0);
 HEAP32[$error>>2] = $8;
 switch ($8|0) {
 case 0:  {
  label = 3;
  break;
 }
 case 2:  {
  $9 = (_check_type1_format($stream,88809,10)|0);
  HEAP32[$error>>2] = $9;
  $10 = ($9|0)==(0);
  if ($10) {
   label = 3;
  }
  break;
 }
 default: {
  $47 = $8;
  label = 15;
 }
 }
 do {
  if ((label|0) == 3) {
   $11 = (_FT_Stream_Seek($stream,0)|0);
   HEAP32[$error>>2] = $11;
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = (_read_pfb_tag($stream,$tag,$size)|0);
    HEAP32[$error>>2] = $13;
    $14 = ($13|0)==(0);
    if ($14) {
     $15 = HEAP16[$tag>>1]|0;
     $16 = ($15<<16>>16)==(-32767);
     if ($16) {
      HEAP8[$6>>0] = 1;
     } else {
      $17 = (_FT_Stream_Seek($stream,0)|0);
      HEAP32[$error>>2] = $17;
      $18 = ($17|0)==(0);
      if (!($18)) {
       break;
      }
      $19 = ((($stream)) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      HEAP32[$size>>2] = $20;
     }
     $21 = ((($stream)) + 20|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(0|0);
     if ($23) {
      $24 = HEAP32[$stream>>2]|0;
      $25 = ((($stream)) + 8|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($24) + ($26)|0);
      HEAP32[$5>>2] = $27;
      $28 = HEAP32[$size>>2]|0;
      HEAP32[$4>>2] = $28;
      HEAP8[$7>>0] = 1;
      $29 = HEAP32[$size>>2]|0;
      $30 = (_FT_Stream_Skip($stream,$29)|0);
      HEAP32[$error>>2] = $30;
      $31 = ($30|0)==(0);
      if (!($31)) {
       break;
      }
     } else {
      $32 = HEAP32[$size>>2]|0;
      $33 = (_ft_mem_alloc($memory,$32,$error)|0);
      HEAP32[$5>>2] = $33;
      $34 = HEAP32[$error>>2]|0;
      $35 = ($34|0)==(0);
      if (!($35)) {
       break;
      }
      $36 = HEAP32[$size>>2]|0;
      $37 = (_FT_Stream_Read($stream,$33,$36)|0);
      HEAP32[$error>>2] = $37;
      $38 = ($37|0)==(0);
      if (!($38)) {
       break;
      }
      $39 = HEAP32[$size>>2]|0;
      HEAP32[$4>>2] = $39;
     }
     $40 = HEAP32[$5>>2]|0;
     $41 = ((($parser)) + 4|0);
     HEAP32[$41>>2] = $40;
     $42 = HEAP32[$5>>2]|0;
     HEAP32[$parser>>2] = $42;
     $43 = HEAP32[$4>>2]|0;
     $44 = (($42) + ($43)|0);
     $45 = ((($parser)) + 8|0);
     HEAP32[$45>>2] = $44;
     $$pr = HEAP32[$error>>2]|0;
     $47 = $$pr;
     label = 15;
    }
   }
  }
 } while(0);
 if ((label|0) == 15) {
  $46 = ($47|0)==(0);
  if ($46) {
   $51 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($51|0);
  }
 }
 $48 = HEAP8[$7>>0]|0;
 $49 = ($48<<24>>24)==(0);
 if (!($49)) {
  $51 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 $50 = HEAP32[$5>>2]|0;
 _ft_mem_free($memory,$50);
 HEAP32[$5>>2] = 0;
 $51 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($51|0);
}
function _T1_Finalize_Parser($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 84|0);
 $3 = HEAP32[$2>>2]|0;
 _ft_mem_free($1,$3);
 HEAP32[$2>>2] = 0;
 $4 = ((($parser)) + 93|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $7 = ((($parser)) + 76|0);
  $8 = HEAP32[$7>>2]|0;
  _ft_mem_free($1,$8);
  HEAP32[$7>>2] = 0;
 }
 $9 = ((($parser)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 127]($parser);
 return;
}
function _T1_Get_Private_Dict($parser,$psaux) {
 $parser = $parser|0;
 $psaux = $psaux|0;
 var $$lcssa = 0, $$lcssa$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cur$0 = 0, $cur$0$ph = 0, $cur$1 = 0, $cur$130 = 0, $cur$131 = 0;
 var $cur$229 = 0, $cur$229$lcssa = 0, $error = 0, $len = 0, $limit$0$ph = 0, $or$cond = 0, $or$cond36 = 0, $size = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 8|0;
 $size = sp + 4|0;
 $tag = sp + 12|0;
 $len = sp;
 $0 = ((($parser)) + 72|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($parser)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$error>>2] = 0;
 $4 = ((($parser)) + 92|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L1: do {
  if ($6) {
   $45 = ((($parser)) + 76|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($parser)) + 80|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + ($48)|0);
   $50 = ((($parser)) + 8|0);
   $51 = ((($parser)) + 32|0);
   $52 = ((($parser)) + 12|0);
   $53 = ((($parser)) + 28|0);
   $cur$0$ph = $46;$limit$0$ph = $49;
   L3: while(1) {
    $cur$0 = $cur$0$ph;
    while(1) {
     $54 = HEAP8[$cur$0>>0]|0;
     $55 = ($54<<24>>24)==(101);
     if ($55) {
      $56 = ((($cur$0)) + 9|0);
      $57 = ($56>>>0)<($limit$0$ph>>>0);
      if ($57) {
       $58 = ((($cur$0)) + 1|0);
       $59 = HEAP8[$58>>0]|0;
       $60 = ($59<<24>>24)==(101);
       if ($60) {
        $61 = ((($cur$0)) + 2|0);
        $62 = HEAP8[$61>>0]|0;
        $63 = ($62<<24>>24)==(120);
        if ($63) {
         $64 = ((($cur$0)) + 3|0);
         $65 = HEAP8[$64>>0]|0;
         $66 = ($65<<24>>24)==(101);
         if ($66) {
          $67 = ((($cur$0)) + 4|0);
          $68 = HEAP8[$67>>0]|0;
          $69 = ($68<<24>>24)==(99);
          if ($69) {
           $$lcssa = $56;
           break;
          }
         }
        }
       }
      }
     }
     $70 = ((($cur$0)) + 1|0);
     $71 = ($70>>>0)<($limit$0$ph>>>0);
     if ($71) {
      $cur$0 = $70;
     } else {
      label = 23;
      break L3;
     }
    }
    $72 = HEAP32[$45>>2]|0;
    HEAP32[$parser>>2] = $72;
    HEAP32[$50>>2] = $$lcssa;
    $cur$130 = HEAP32[$parser>>2]|0;
    $73 = ($cur$130>>>0)<($$lcssa>>>0);
    L15: do {
     if ($73) {
      $cur$131 = $cur$130;
      while(1) {
       $74 = HEAP8[$cur$131>>0]|0;
       $75 = ($74<<24>>24)==(101);
       if ($75) {
        $76 = (_strncmp($cur$131,88820,5)|0);
        $77 = ($76|0)==(0);
        if ($77) {
         $$lcssa$lcssa = $$lcssa;
         break L3;
        }
       }
       $78 = HEAP32[$51>>2]|0;
       FUNCTION_TABLE_vi[$78 & 127]($parser);
       $79 = HEAP32[$52>>2]|0;
       $80 = ($79|0)==(0);
       if (!($80)) {
        break L15;
       }
       $81 = HEAP32[$53>>2]|0;
       FUNCTION_TABLE_vi[$81 & 127]($parser);
       $cur$1 = HEAP32[$parser>>2]|0;
       $82 = ($cur$1>>>0)<($$lcssa>>>0);
       if ($82) {
        $cur$131 = $cur$1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $83 = HEAP32[$45>>2]|0;
    $84 = HEAP32[$47>>2]|0;
    $85 = (($83) + ($84)|0);
    $cur$0$ph = $$lcssa;$limit$0$ph = $85;
   }
   if ((label|0) == 23) {
    HEAP32[$error>>2] = 3;
    $172 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($172|0);
   }
   $86 = HEAP32[$45>>2]|0;
   $87 = HEAP32[$47>>2]|0;
   $88 = (($86) + ($87)|0);
   HEAP32[$50>>2] = $88;
   $89 = ((($parser)) + 32|0);
   $90 = HEAP32[$89>>2]|0;
   FUNCTION_TABLE_vi[$90 & 127]($parser);
   $91 = HEAP32[$parser>>2]|0;
   $92 = ($91>>>0)<($$lcssa$lcssa>>>0);
   L27: do {
    if ($92) {
     $cur$229 = $91;
     L28: while(1) {
      $93 = HEAP8[$cur$229>>0]|0;
      switch ($93<<24>>24) {
      case 10: case 13: case 9: case 32:  {
       break;
      }
      default: {
       $cur$229$lcssa = $cur$229;
       break L28;
      }
      }
      $94 = ((($cur$229)) + 1|0);
      $95 = ($94>>>0)<($$lcssa$lcssa>>>0);
      if ($95) {
       $cur$229 = $94;
      } else {
       break L27;
      }
     }
     $96 = HEAP32[$47>>2]|0;
     $97 = HEAP32[$45>>2]|0;
     $98 = $cur$229$lcssa;
     $99 = $97;
     $100 = (($99) - ($98))|0;
     $101 = (($100) + ($96))|0;
     HEAP32[$size>>2] = $101;
     $102 = ((($parser)) + 93|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(0);
     do {
      if ($104) {
       $112 = ((($parser)) + 94|0);
       HEAP8[$112>>0] = 1;
       $113 = HEAP32[$45>>2]|0;
       $114 = ((($parser)) + 84|0);
       HEAP32[$114>>2] = $113;
       $115 = HEAP32[$size>>2]|0;
       $116 = ((($parser)) + 88|0);
       HEAP32[$116>>2] = $115;
       HEAP32[$45>>2] = 0;
       HEAP32[$47>>2] = 0;
      } else {
       $105 = (($101) + 1)|0;
       $106 = (_ft_mem_alloc($3,$105,$error)|0);
       $107 = ((($parser)) + 84|0);
       HEAP32[$107>>2] = $106;
       $108 = HEAP32[$error>>2]|0;
       $109 = ($108|0)==(0);
       if ($109) {
        $110 = HEAP32[$size>>2]|0;
        $111 = ((($parser)) + 88|0);
        HEAP32[$111>>2] = $110;
        break;
       } else {
        $172 = HEAP32[$error>>2]|0;
        STACKTOP = sp;return ($172|0);
       }
      }
     } while(0);
     $117 = HEAP8[$cur$229$lcssa>>0]|0;
     $118 = $117&255;
     $119 = (($118) + -48)|0;
     $120 = ($119>>>0)<(10);
     if ($120) {
      label = 40;
     } else {
      switch ($118|0) {
      case 65: case 66: case 67: case 68: case 69: case 70: case 97: case 98: case 99: case 100: case 101: case 102:  {
       label = 40;
       break;
      }
      default: {
      }
      }
     }
     L41: do {
      if ((label|0) == 40) {
       $121 = ((($cur$229$lcssa)) + 1|0);
       $122 = HEAP8[$121>>0]|0;
       $123 = $122&255;
       $124 = (($123) + -48)|0;
       $125 = ($124>>>0)<(10);
       if (!($125)) {
        switch ($123|0) {
        case 65: case 66: case 67: case 68: case 69: case 70: case 97: case 98: case 99: case 100: case 101: case 102:  {
         break;
        }
        default: {
         break L41;
        }
        }
       }
       $126 = ((($cur$229$lcssa)) + 2|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = $127&255;
       $129 = (($128) + -48)|0;
       $130 = ($129>>>0)<(10);
       if (!($130)) {
        switch ($128|0) {
        case 65: case 66: case 67: case 68: case 69: case 70: case 97: case 98: case 99: case 100: case 101: case 102:  {
         break;
        }
        default: {
         break L41;
        }
        }
       }
       $131 = ((($cur$229$lcssa)) + 3|0);
       $132 = HEAP8[$131>>0]|0;
       $133 = $132&255;
       $134 = (($133) + -48)|0;
       $135 = ($134>>>0)<(10);
       if (!($135)) {
        switch ($133|0) {
        case 65: case 66: case 67: case 68: case 69: case 70: case 97: case 98: case 99: case 100: case 101: case 102:  {
         break;
        }
        default: {
         break L41;
        }
        }
       }
       HEAP32[$parser>>2] = $cur$229$lcssa;
       $136 = ((($psaux)) + 4|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = ((($137)) + 24|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ((($parser)) + 84|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ((($parser)) + 88|0);
       $143 = HEAP32[$142>>2]|0;
       (FUNCTION_TABLE_iiiiii[$139 & 63]($parser,$141,$143,$len,0)|0);
       $144 = HEAP32[$len>>2]|0;
       HEAP32[$142>>2] = $144;
       $145 = HEAP32[$len>>2]|0;
       $146 = HEAP32[$140>>2]|0;
       $147 = (($146) + ($145)|0);
       HEAP8[$147>>0] = 0;
       break L1;
      }
     } while(0);
     $148 = ((($parser)) + 84|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = HEAP32[$size>>2]|0;
     _memmove(($149|0),($cur$229$lcssa|0),($150|0))|0;
     break L1;
    }
   } while(0);
   HEAP32[$error>>2] = 3;
   $172 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($172|0);
  } else {
   $7 = (_FT_Stream_Pos($1)|0);
   $8 = ((($parser)) + 88|0);
   HEAP32[$8>>2] = 0;
   while(1) {
    $9 = (_read_pfb_tag($1,$tag,$size)|0);
    HEAP32[$error>>2] = $9;
    $10 = ($9|0)==(0);
    if (!($10)) {
     label = 51;
     break;
    }
    $11 = HEAP16[$tag>>1]|0;
    $12 = ($11<<16>>16)==(-32766);
    if (!($12)) {
     label = 6;
     break;
    }
    $13 = HEAP32[$size>>2]|0;
    $14 = HEAP32[$8>>2]|0;
    $15 = (($14) + ($13))|0;
    HEAP32[$8>>2] = $15;
    $16 = HEAP32[$size>>2]|0;
    $17 = (_FT_Stream_Skip($1,$16)|0);
    HEAP32[$error>>2] = $17;
    $18 = ($17|0)==(0);
    if (!($18)) {
     label = 51;
     break;
    }
   }
   if ((label|0) == 6) {
    $19 = HEAP32[$8>>2]|0;
    $20 = ($19|0)==(0);
    if ($20) {
     HEAP32[$error>>2] = 3;
     $172 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($172|0);
    }
    $21 = (_FT_Stream_Seek($1,$7)|0);
    HEAP32[$error>>2] = $21;
    $22 = ($21|0)==(0);
    if (!($22)) {
     $172 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($172|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = (_ft_mem_alloc($3,$23,$error)|0);
    $25 = ((($parser)) + 84|0);
    HEAP32[$25>>2] = $24;
    $26 = HEAP32[$error>>2]|0;
    $27 = ($26|0)==(0);
    if (!($27)) {
     $172 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($172|0);
    }
    HEAP32[$8>>2] = 0;
    $28 = (_read_pfb_tag($1,$tag,$size)|0);
    HEAP32[$error>>2] = $28;
    $29 = ($28|0)==(0);
    $30 = HEAP16[$tag>>1]|0;
    $31 = ($30<<16>>16)==(-32766);
    $or$cond36 = $29 & $31;
    L74: do {
     if ($or$cond36) {
      while(1) {
       $32 = HEAP32[$25>>2]|0;
       $33 = HEAP32[$8>>2]|0;
       $34 = (($32) + ($33)|0);
       $35 = HEAP32[$size>>2]|0;
       $36 = (_FT_Stream_Read($1,$34,$35)|0);
       HEAP32[$error>>2] = $36;
       $37 = ($36|0)==(0);
       if (!($37)) {
        break;
       }
       $38 = HEAP32[$size>>2]|0;
       $39 = HEAP32[$8>>2]|0;
       $40 = (($39) + ($38))|0;
       HEAP32[$8>>2] = $40;
       $41 = (_read_pfb_tag($1,$tag,$size)|0);
       HEAP32[$error>>2] = $41;
       $42 = ($41|0)==(0);
       $43 = HEAP16[$tag>>1]|0;
       $44 = ($43<<16>>16)==(-32766);
       $or$cond = $42 & $44;
       if (!($or$cond)) {
        break L74;
       }
      }
      $172 = HEAP32[$error>>2]|0;
      STACKTOP = sp;return ($172|0);
     }
    } while(0);
    HEAP32[$error>>2] = 0;
    break;
   }
   else if ((label|0) == 51) {
    $172 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($172|0);
   }
  }
 } while(0);
 $151 = ((($psaux)) + 16|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ((($parser)) + 84|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = ((($parser)) + 88|0);
 $156 = HEAP32[$155>>2]|0;
 FUNCTION_TABLE_viii[$152 & 31]($154,$156,-9871);
 $157 = HEAP32[$155>>2]|0;
 $158 = ($157>>>0)<(4);
 if ($158) {
  HEAP32[$error>>2] = 3;
  $172 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($172|0);
 } else {
  $159 = HEAP32[$153>>2]|0;
  HEAP8[$159>>0] = 32;
  $160 = HEAP32[$153>>2]|0;
  $161 = ((($160)) + 1|0);
  HEAP8[$161>>0] = 32;
  $162 = HEAP32[$153>>2]|0;
  $163 = ((($162)) + 2|0);
  HEAP8[$163>>0] = 32;
  $164 = HEAP32[$153>>2]|0;
  $165 = ((($164)) + 3|0);
  HEAP8[$165>>0] = 32;
  $166 = HEAP32[$153>>2]|0;
  $167 = ((($parser)) + 4|0);
  HEAP32[$167>>2] = $166;
  $168 = HEAP32[$153>>2]|0;
  HEAP32[$parser>>2] = $168;
  $169 = HEAP32[$155>>2]|0;
  $170 = (($168) + ($169)|0);
  $171 = ((($parser)) + 8|0);
  HEAP32[$171>>2] = $170;
  $172 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($172|0);
 }
 return (0)|0;
}
function _check_type1_format($stream,$header_string,$header_length) {
 $stream = $stream|0;
 $header_string = $header_string|0;
 $header_length = $header_length|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy = 0, $error$1 = 0, $tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tag = sp + 4|0;
 $dummy = sp;
 $0 = (_FT_Stream_Seek($stream,0)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_read_pfb_tag($stream,$tag,$dummy)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    $4 = HEAP16[$tag>>1]|0;
    $5 = ($4<<16>>16)==(-32767);
    if (!($5)) {
     $6 = (_FT_Stream_Seek($stream,0)|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      $error$1 = $6;
      break;
     }
    }
    $8 = (_FT_Stream_EnterFrame($stream,$header_length)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $10 = ((($stream)) + 32|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (_memcmp($11,$header_string,$header_length)|0);
     $13 = ($12|0)==(0);
     $$ = $13 ? 0 : 2;
     _FT_Stream_ExitFrame($stream);
     $error$1 = $$;
    } else {
     $error$1 = $8;
    }
   } else {
    $error$1 = $2;
   }
  } else {
   $error$1 = $0;
  }
 } while(0);
 STACKTOP = sp;return ($error$1|0);
}
function _read_pfb_tag($stream,$atag,$asize) {
 $stream = $stream|0;
 $atag = $atag|0;
 $asize = $asize|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $error = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 HEAP16[$atag>>1] = 0;
 HEAP32[$asize>>2] = 0;
 $0 = (_FT_Stream_ReadUShort($stream,$error)|0);
 $1 = HEAP32[$error>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $6 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($6|0);
 }
 $$off = (($0) + 32767)<<16>>16;
 $switch = ($$off&65535)<(2);
 if ($switch) {
  $3 = (_FT_Stream_ReadULongLE($stream,$error)|0);
  $4 = HEAP32[$error>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   HEAP32[$asize>>2] = $3;
  }
 }
 HEAP16[$atag>>1] = $0;
 $6 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function _tt_face_build_cmaps($face) {
 $face = $face|0;
 var $$0$reg2mem$0 = 0, $$reg2mem58$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $charmap = 0, $clazz$sroa$0 = 0, $cmap = 0, $cond = 0, $cond1 = 0, $cond2 = 0, $cond3 = 0, $error = 0, $format = 0, $num_cmaps = 0, $p = 0, $pclazz = 0;
 var $ttcmap = 0, $valid = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $num_cmaps = sp + 40|0;
 $p = sp + 36|0;
 $charmap = sp + 24|0;
 $cmap = sp + 20|0;
 $format = sp + 16|0;
 $pclazz = sp + 12|0;
 $clazz$sroa$0 = sp + 8|0;
 $valid = sp + 48|0;
 $error = sp + 4|0;
 $ttcmap = sp;
 $0 = ((($face)) + 500|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 504|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + ($3)|0);
 HEAP32[$p>>2] = $1;
 $5 = HEAP32[$p>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0$reg2mem$0 = 8;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0$reg2mem$0|0);
 }
 $7 = HEAP32[$p>>2]|0;
 $8 = ((($7)) + 4|0);
 $9 = ($8>>>0)>($4>>>0);
 if ($9) {
  $$0$reg2mem$0 = 8;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0$reg2mem$0|0);
 }
 $10 = HEAP32[$p>>2]|0;
 $11 = ((($10)) + 2|0);
 HEAP32[$p>>2] = $11;
 $12 = HEAP32[$p>>2]|0;
 $13 = ((($12)) + -2|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = HEAP32[$p>>2]|0;
 $18 = ((($17)) + -1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 | $16;
 $22 = ($21|0)==(0);
 $23 = HEAP32[$p>>2]|0;
 if (!($22)) {
  $24 = ((($23)) + -2|0);
  HEAP32[$p>>2] = $24;
  $$0$reg2mem$0 = 8;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0$reg2mem$0|0);
 }
 $25 = ((($23)) + 2|0);
 HEAP32[$p>>2] = $25;
 $26 = HEAP32[$p>>2]|0;
 $27 = ((($26)) + -2|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 8;
 $31 = HEAP32[$p>>2]|0;
 $32 = ((($31)) + -1|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 | $30;
 HEAP32[$num_cmaps>>2] = $35;
 $36 = HEAP32[$num_cmaps>>2]|0;
 $37 = HEAP32[$num_cmaps>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  $$0$reg2mem$0 = 0;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0$reg2mem$0|0);
 }
 $39 = ((($charmap)) + 8|0);
 $40 = ((($charmap)) + 10|0);
 $41 = ((($charmap)) + 4|0);
 $42 = ((($face)) + 264|0);
 $43 = ((($valid)) + 172|0);
 $44 = ((($valid)) + 16|0);
 $45 = ((($valid)) + 12|0);
 while(1) {
  $46 = HEAP32[$p>>2]|0;
  $47 = ((($46)) + 8|0);
  $48 = ($47>>>0)>($4>>>0);
  if ($48) {
   $$0$reg2mem$0 = 0;
   label = 26;
   break;
  }
  $49 = HEAP32[$p>>2]|0;
  $50 = ((($49)) + 2|0);
  HEAP32[$p>>2] = $50;
  $51 = HEAP32[$p>>2]|0;
  $52 = ((($51)) + -2|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $54 << 8;
  $56 = HEAP32[$p>>2]|0;
  $57 = ((($56)) + -1|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = $59 | $55;
  $61 = $60&65535;
  HEAP16[$39>>1] = $61;
  $62 = HEAP32[$p>>2]|0;
  $63 = ((($62)) + 2|0);
  HEAP32[$p>>2] = $63;
  $64 = HEAP32[$p>>2]|0;
  $65 = ((($64)) + -2|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = $67 << 8;
  $69 = HEAP32[$p>>2]|0;
  $70 = ((($69)) + -1|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = $72 | $68;
  $74 = $73&65535;
  HEAP16[$40>>1] = $74;
  HEAP32[$charmap>>2] = $face;
  HEAP32[$41>>2] = 0;
  $75 = HEAP32[$p>>2]|0;
  $76 = ((($75)) + 4|0);
  HEAP32[$p>>2] = $76;
  $77 = HEAP32[$p>>2]|0;
  $78 = ((($77)) + -4|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = $80 << 24;
  $82 = HEAP32[$p>>2]|0;
  $83 = ((($82)) + -3|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $85 << 16;
  $87 = $86 | $81;
  $88 = HEAP32[$p>>2]|0;
  $89 = ((($88)) + -2|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = $91 << 8;
  $93 = $87 | $92;
  $94 = HEAP32[$p>>2]|0;
  $95 = ((($94)) + -1|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $98 = $93 | $97;
  $99 = ($98|0)==(0);
  if (!($99)) {
   $100 = HEAP32[$2>>2]|0;
   $101 = (($100) + -2)|0;
   $102 = ($98>>>0)>($101>>>0);
   if (!($102)) {
    $103 = (($1) + ($98)|0);
    HEAP32[$cmap>>2] = $103;
    $104 = HEAP32[$cmap>>2]|0;
    $105 = HEAP8[$104>>0]|0;
    $106 = $105&255;
    $107 = $106 << 8;
    $108 = HEAP32[$cmap>>2]|0;
    $109 = ((($108)) + 1|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110&255;
    $112 = $111 | $107;
    HEAP32[$format>>2] = $112;
    HEAP32[$pclazz>>2] = 15300;
    $113 = HEAP32[$pclazz>>2]|0;
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114|0)==(0|0);
    L20: do {
     if (!($115)) {
      while(1) {
       $116 = HEAP32[$pclazz>>2]|0;
       $117 = HEAP32[$116>>2]|0;
       HEAP32[$clazz$sroa$0>>2] = $117;
       $118 = HEAP32[$clazz$sroa$0>>2]|0;
       $119 = $118;
       $120 = ((($119)) + 40|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = HEAP32[$format>>2]|0;
       $123 = ($121|0)==($122|0);
       if ($123) {
        break;
       }
       $156 = HEAP32[$pclazz>>2]|0;
       $157 = ((($156)) + 4|0);
       HEAP32[$pclazz>>2] = $157;
       $158 = HEAP32[$pclazz>>2]|0;
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159|0)==(0|0);
       if ($160) {
        break L20;
       }
      }
      HEAP32[$error>>2] = 0;
      $124 = HEAP32[$cmap>>2]|0;
      __THREW__ = 0;
      invoke_viiii(13,($valid|0),($124|0),($4|0),0);
      $125 = __THREW__; __THREW__ = 0;
      if ((($125|0) != 0) & ((threwValue|0) != 0)) { $126 = _testSetjmp(HEAP32[$125>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($126|0) == 0) { _longjmp($125|0, threwValue|0); } tempRet0 = (threwValue); } else { $126 = -1; };
      $127 = tempRet0;
      $cond = ($126|0)==(1);
      if ($cond) {
       $$reg2mem58$0 = $127;
      } else {
       $128 = HEAP16[$42>>1]|0;
       $129 = $128&65535;
       HEAP32[$43>>2] = $129;
       _setjmpTable = _saveSetjmp($44,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
       __THREW__ = 0;
       $130 = __THREW__; __THREW__ = 0;
       if ((($130|0) != 0) & ((threwValue|0) != 0)) { $131 = _testSetjmp(HEAP32[$130>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($131|0) == 0) { _longjmp($130|0, threwValue|0); } tempRet0 = (threwValue); } else { $131 = -1; };
       $132 = tempRet0;
       $cond1 = ($131|0)==(1);
       if ($cond1) {
        $$reg2mem58$0 = $132;
       } else {
        $$reg2mem58$0 = 0;
       }
      }
      while(1) {
       $133 = ($$reg2mem58$0|0)==(0);
       if ($133) {
        $134 = HEAP32[$clazz$sroa$0>>2]|0;
        $135 = $134;
        $136 = ((($135)) + 44|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = HEAP32[$cmap>>2]|0;
        __THREW__ = 0;
        $139 = (invoke_iii($137|0,($138|0),($valid|0))|0);
        $140 = __THREW__; __THREW__ = 0;
        if ((($140|0) != 0) & ((threwValue|0) != 0)) { $141 = _testSetjmp(HEAP32[$140>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($141|0) == 0) { _longjmp($140|0, threwValue|0); } tempRet0 = (threwValue); } else { $141 = -1; };
        $142 = tempRet0;
        $cond3 = ($141|0)==(1);
        if ($cond3) {
         $$reg2mem58$0 = $142;
         continue;
        }
        HEAP32[$error>>2] = $139;
       }
       $143 = HEAP32[$45>>2]|0;
       $144 = ($143|0)==(0);
       if (!($144)) {
        break;
       }
       $145 = HEAP32[$clazz$sroa$0>>2]|0;
       $146 = $145;
       $147 = HEAP32[$cmap>>2]|0;
       __THREW__ = 0;
       $148 = (invoke_iiiii(42,($146|0),($147|0),($charmap|0),($ttcmap|0))|0);
       $149 = __THREW__; __THREW__ = 0;
       if ((($149|0) != 0) & ((threwValue|0) != 0)) { $150 = _testSetjmp(HEAP32[$149>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($150|0) == 0) { _longjmp($149|0, threwValue|0); } tempRet0 = (threwValue); } else { $150 = -1; };
       $151 = tempRet0;
       $cond2 = ($150|0)==(1);
       if ($cond2) {
        $$reg2mem58$0 = $151;
       } else {
        label = 20;
        break;
       }
      }
      if ((label|0) == 20) {
       label = 0;
       $152 = ($148|0)==(0);
       if ($152) {
        $153 = HEAP32[$error>>2]|0;
        $154 = HEAP32[$ttcmap>>2]|0;
        $155 = ((($154)) + 20|0);
        HEAP32[$155>>2] = $153;
       }
      }
     }
    } while(0);
    $161 = HEAP32[$pclazz>>2]|0;
   }
  }
  $162 = HEAP32[$num_cmaps>>2]|0;
  $163 = (($162) + -1)|0;
  HEAP32[$num_cmaps>>2] = $163;
  $164 = HEAP32[$num_cmaps>>2]|0;
  $165 = ($164|0)==(0);
  if ($165) {
   $$0$reg2mem$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$0$reg2mem$0|0);
 }
 return (0)|0;
}
function _tt_get_cmap_info($charmap,$cmap_info) {
 $charmap = $charmap|0;
 $cmap_info = $cmap_info|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($charmap)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iii[$3 & 255]($charmap,$cmap_info)|0);
 return ($4|0);
}
function _tt_cmap_init($cmap,$table) {
 $cmap = $cmap|0;
 $table = $table|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 HEAP32[$0>>2] = $table;
 return 0;
}
function _tt_cmap0_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($char_code>>>0)<(256);
 if (!($0)) {
  $7 = 0;
  return ($7|0);
 }
 $1 = ((($cmap)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($char_code) + 6)|0;
 $4 = (($2) + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6;
 return ($7|0);
}
function _tt_cmap0_char_next($cmap,$pchar_code) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $charcode$0 = 0, $gindex$0 = 0, $gindex$1 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pchar_code>>2]|0;
 $charcode$0 = $2;$gindex$0 = 0;
 while(1) {
  $3 = (($charcode$0) + 1)|0;
  $4 = ($3>>>0)<(256);
  if (!($4)) {
   $gindex$1 = $gindex$0;$result$0 = 0;
   label = 4;
   break;
  }
  $$sum = (($charcode$0) + 7)|0;
  $5 = (($1) + ($$sum)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = ($6<<24>>24)==(0);
  if ($8) {
   $charcode$0 = $3;$gindex$0 = $7;
  } else {
   $gindex$1 = $7;$result$0 = $3;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$pchar_code>>2] = $result$0;
  return ($gindex$1|0);
 }
 return (0)|0;
}
function _tt_cmap0_validate($table,$valid) {
 $table = $table|0;
 $valid = $valid|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $n$02 = 0, $or$cond = 0, $p$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 2|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = ((($table)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $3 | $6;
 $8 = (($table) + ($7)|0);
 $9 = ((($valid)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 $12 = ($7>>>0)<(262);
 $or$cond = $12 | $11;
 if ($or$cond) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $13 = ((($valid)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  return 0;
 }
 $16 = ((($table)) + 6|0);
 $17 = ((($valid)) + 172|0);
 $n$02 = 0;$p$03 = $16;
 while(1) {
  $18 = ((($p$03)) + 1|0);
  $19 = HEAP8[$p$03>>0]|0;
  $20 = $19&255;
  $21 = HEAP32[$17>>2]|0;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   label = 6;
   break;
  }
  $23 = (($n$02) + 1)|0;
  $exitcond = ($23|0)==(256);
  if ($exitcond) {
   label = 8;
   break;
  } else {
   $n$02 = $23;$p$03 = $18;
  }
 }
 if ((label|0) == 6) {
  _ft_validator_error($valid,16);
  // unreachable;
 }
 else if ((label|0) == 8) {
  return 0;
 }
 return (0)|0;
}
function _tt_cmap0_get_info($cmap,$cmap_info) {
 $cmap = $cmap|0;
 $cmap_info = $cmap_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = ((($cmap_info)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = ((($1)) + 5|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $6 | $9;
 HEAP32[$cmap_info>>2] = $10;
 return 0;
}
function _tt_cmap2_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_tt_cmap2_get_subheader($1,$char_code)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $4 = $char_code & 255;
 $5 = HEAP8[$2>>0]|0;
 $6 = $5&255;
 $7 = $6 << 8;
 $8 = ((($2)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $7 | $10;
 $12 = ((($2)) + 2|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 << 8;
 $16 = ((($2)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $15 | $18;
 $20 = ((($2)) + 6|0);
 $21 = ((($2)) + 4|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = $23 << 8;
 $25 = ((($2)) + 5|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $24 | $27;
 $29 = HEAP8[$20>>0]|0;
 $30 = $29&255;
 $31 = $30 << 8;
 $32 = ((($2)) + 7|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $31 | $34;
 $36 = (($4) - ($11))|0;
 $37 = ($36>>>0)<($19>>>0);
 $38 = ($35|0)!=(0);
 $or$cond = $37 & $38;
 if (!($or$cond)) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $39 = $36 << 1;
 $40 = (($35) + ($39))|0;
 $$sum = (($40) + 6)|0;
 $41 = (($2) + ($$sum)|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43 << 8;
 $$sum2 = (($40) + 7)|0;
 $45 = (($2) + ($$sum2)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $44 | $47;
 $49 = ($48|0)==(0);
 if ($49) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $50 = (($48) + ($28))|0;
 $51 = $50 & 65535;
 $result$0 = $51;
 return ($result$0|0);
}
function _tt_cmap2_char_next($cmap,$pcharcode) {
 $cmap = $cmap|0;
 $pcharcode = $pcharcode|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $char_lo$0 = 0, $charcode$07 = 0, $charcode$15 = 0, $charcode$2 = 0, $gindex$4 = 0, $p$04 = 0, $pos$0 = 0, $pos$16 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pcharcode>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ($3>>>0)<(65536);
 if ($4) {
  $charcode$07 = $3;
 } else {
  $gindex$4 = 0;$result$0 = 0;
  HEAP32[$pcharcode>>2] = $result$0;
  return ($gindex$4|0);
 }
 L3: while(1) {
  $5 = (_tt_cmap2_get_subheader($1,$charcode$07)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $charcode$2 = $charcode$07;
  } else {
   $7 = HEAP8[$5>>0]|0;
   $8 = $7&255;
   $9 = $8 << 8;
   $10 = ((($5)) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   $13 = $9 | $12;
   $14 = ((($5)) + 2|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $16 << 8;
   $18 = ((($5)) + 3|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = $17 | $20;
   $22 = ((($5)) + 6|0);
   $23 = ((($5)) + 4|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24 << 24 >> 24;
   $26 = $25 << 8;
   $27 = ((($5)) + 5|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = $26 | $29;
   $31 = HEAP8[$22>>0]|0;
   $32 = $31&255;
   $33 = $32 << 8;
   $34 = ((($5)) + 7|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35&255;
   $37 = $33 | $36;
   $38 = $charcode$07 & 255;
   $39 = ($37|0)==(0);
   if ($39) {
    $charcode$2 = $charcode$07;
   } else {
    $40 = ($38>>>0)<($13>>>0);
    $41 = (($38) - ($13))|0;
    $char_lo$0 = $40 ? $13 : $38;
    $pos$0 = $40 ? 0 : $41;
    $42 = $charcode$07 & -256;
    $43 = (($char_lo$0) + ($42))|0;
    $44 = ($pos$0>>>0)<($21>>>0);
    if ($44) {
     $45 = $pos$0 << 1;
     $46 = (($45) + 6)|0;
     $$sum = (($46) + ($37))|0;
     $47 = (($5) + ($$sum)|0);
     $charcode$15 = $43;$p$04 = $47;$pos$16 = $pos$0;
     while(1) {
      $48 = ((($p$04)) + 2|0);
      $49 = HEAP8[$p$04>>0]|0;
      $50 = $49&255;
      $51 = $50 << 8;
      $52 = ((($p$04)) + 1|0);
      $53 = HEAP8[$52>>0]|0;
      $54 = $53&255;
      $55 = $51 | $54;
      $56 = ($55|0)==(0);
      if (!($56)) {
       $57 = (($55) + ($30))|0;
       $58 = $57 & 65535;
       $59 = ($58|0)==(0);
       if (!($59)) {
        $gindex$4 = $58;$result$0 = $charcode$15;
        label = 10;
        break L3;
       }
      }
      $60 = (($pos$16) + 1)|0;
      $61 = (($charcode$15) + 1)|0;
      $62 = ($60>>>0)<($21>>>0);
      if ($62) {
       $charcode$15 = $61;$p$04 = $48;$pos$16 = $60;
      } else {
       $charcode$2 = $61;
       break;
      }
     }
    } else {
     $charcode$2 = $43;
    }
   }
  }
  $63 = (($charcode$2) + 256)|0;
  $64 = $63 & -256;
  $65 = ($64>>>0)<(65536);
  if ($65) {
   $charcode$07 = $64;
  } else {
   $gindex$4 = 0;$result$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  HEAP32[$pcharcode>>2] = $result$0;
  return ($gindex$4|0);
 }
 return (0)|0;
}
function _tt_cmap2_validate($table,$valid) {
 $table = $table|0;
 $valid = $valid|0;
 var $$max_subs$0 = 0, $$max_subs$0$lcssa = 0, $$sum = 0, $$sum2 = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $max_subs$011 = 0, $n$012 = 0, $n$19 = 0, $or$cond = 0, $or$cond5 = 0, $or$cond7 = 0, $p$013 = 0, $p$110 = 0, $p$11020 = 0, $p$28 = 0;
 var $p$3 = 0, $scevgep$sum = 0, $scevgep16$sum = 0, $scevgep17 = 0, $scevgep18 = 0, $scevgep19$sum = 0, $scevgep21 = 0, $scevgep2122 = 0, $scevgep23 = 0, $scevgep24 = 0, $scevgep25$sum = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 2|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = ((($table)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $3 | $6;
 $8 = (($table) + ($7)|0);
 $9 = ((($valid)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 $12 = ($7>>>0)<(518);
 $or$cond = $12 | $11;
 if ($or$cond) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $13 = ((($table)) + 6|0);
 $14 = ((($valid)) + 8|0);
 $scevgep24 = ((($table)) + 518|0);
 $max_subs$011 = 0;$n$012 = 0;$p$013 = $13;
 while(1) {
  $15 = ((($p$013)) + 2|0);
  $16 = HEAP8[$p$013>>0]|0;
  $17 = $16&255;
  $18 = $17 << 8;
  $19 = ((($p$013)) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $18 | $21;
  $23 = HEAP32[$14>>2]|0;
  $24 = ($23>>>0)<(2);
  $25 = $21 & 7;
  $26 = ($25|0)==(0);
  $or$cond5 = $24 | $26;
  if (!($or$cond5)) {
   label = 5;
   break;
  }
  $27 = $22 >>> 3;
  $28 = ($27>>>0)>($max_subs$011>>>0);
  $$max_subs$0 = $28 ? $27 : $max_subs$011;
  $29 = (($n$012) + 1)|0;
  $exitcond = ($29|0)==(256);
  if ($exitcond) {
   $$max_subs$0$lcssa = $$max_subs$0;
   break;
  } else {
   $max_subs$011 = $$max_subs$0;$n$012 = $29;$p$013 = $15;
  }
 }
 if ((label|0) == 5) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $30 = $$max_subs$0$lcssa << 3;
 $scevgep25$sum = (($30) + 526)|0;
 $31 = (($table) + ($scevgep25$sum)|0);
 $32 = HEAP32[$9>>2]|0;
 $33 = ($31>>>0)>($32>>>0);
 if ($33) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $34 = ((($valid)) + 8|0);
 $35 = ((($valid)) + 172|0);
 $n$19 = 0;$p$110 = $scevgep24;
 L13: while(1) {
  $p$11020 = $p$110;
  $36 = HEAP8[$p$110>>0]|0;
  $37 = $36&255;
  $38 = $37 << 8;
  $39 = ((($p$110)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $38 | $41;
  $43 = ((($p$110)) + 2|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $45 << 8;
  $47 = ((($p$110)) + 3|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = $46 | $49;
  $51 = ((($p$110)) + 4|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = $53 << 8;
  $55 = ((($p$110)) + 5|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $54 | $57;
  $59 = ((($p$110)) + 8|0);
  $60 = ((($p$110)) + 6|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = $62 << 8;
  $64 = ((($p$110)) + 7|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = $63 | $66;
  $68 = ($50|0)==(0);
  if ($68) {
   $p$3 = $59;
  } else {
   $69 = HEAP32[$34>>2]|0;
   $70 = ($69>>>0)>(1);
   if ($70) {
    $71 = ($42>>>0)>(255);
    $72 = (($50) + ($42))|0;
    $73 = ($72>>>0)>(256);
    $or$cond7 = $71 | $73;
    if ($or$cond7) {
     label = 13;
     break;
    }
   }
   $74 = ($67|0)==(0);
   if ($74) {
    $p$3 = $59;
   } else {
    $$sum = (($67) + 6)|0;
    $75 = (($p$110) + ($$sum)|0);
    $76 = ($75>>>0)<($31>>>0);
    if ($76) {
     label = 17;
     break;
    }
    $77 = $50 << 1;
    $$sum2 = (($$sum) + ($77))|0;
    $78 = (($p$110) + ($$sum2)|0);
    $79 = ($78>>>0)>($8>>>0);
    if ($79) {
     label = 17;
     break;
    }
    $80 = HEAP32[$34>>2]|0;
    $81 = ($80|0)==(0);
    if ($81) {
     $p$3 = $59;
    } else {
     $82 = $50 << 1;
     $$sum3 = (($82) + 8)|0;
     $83 = (($p$110) + ($$sum3)|0);
     $84 = ($50|0)==(0);
     if ($84) {
      $p$3 = $59;
     } else {
      $85 = $50 << 1;
      $scevgep16$sum = (($85) + 8)|0;
      $scevgep17 = (($p$110) + ($scevgep16$sum)|0);
      $scevgep18 = ((($p$110)) + 10|0);
      $86 = ($scevgep17>>>0)>($scevgep18>>>0);
      $umax = $86 ? $scevgep17 : $scevgep18;
      $scevgep19$sum = (-9 - ($p$11020))|0;
      $scevgep21 = (($umax) + ($scevgep19$sum)|0);
      $scevgep2122 = $scevgep21;
      $p$28 = $59;
      while(1) {
       $87 = ((($p$28)) + 2|0);
       $88 = HEAP8[$p$28>>0]|0;
       $89 = $88&255;
       $90 = $89 << 8;
       $91 = ((($p$28)) + 1|0);
       $92 = HEAP8[$91>>0]|0;
       $93 = $92&255;
       $94 = $90 | $93;
       $95 = ($94|0)==(0);
       if (!($95)) {
        $96 = (($94) + ($58))|0;
        $97 = $96 & 65535;
        $98 = HEAP32[$35>>2]|0;
        $99 = ($97>>>0)<($98>>>0);
        if (!($99)) {
         label = 23;
         break L13;
        }
       }
       $100 = ($87>>>0)<($83>>>0);
       if ($100) {
        $p$28 = $87;
       } else {
        break;
       }
      }
      $101 = (($scevgep2122) + 10)|0;
      $scevgep$sum = $101 & -2;
      $scevgep23 = (($p$110) + ($scevgep$sum)|0);
      $p$3 = $scevgep23;
     }
    }
   }
  }
  $102 = (($n$19) + 1)|0;
  $103 = ($102>>>0)>($$max_subs$0$lcssa>>>0);
  if ($103) {
   label = 27;
   break;
  } else {
   $n$19 = $102;$p$110 = $p$3;
  }
 }
 if ((label|0) == 13) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 17) {
  _ft_validator_error($valid,9);
  // unreachable;
 }
 else if ((label|0) == 23) {
  _ft_validator_error($valid,16);
  // unreachable;
 }
 else if ((label|0) == 27) {
  return 0;
 }
 return (0)|0;
}
function _tt_cmap2_get_info($cmap,$cmap_info) {
 $cmap = $cmap|0;
 $cmap_info = $cmap_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = ((($cmap_info)) + 4|0);
 HEAP32[$3>>2] = 2;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = ((($1)) + 5|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $6 | $9;
 HEAP32[$cmap_info>>2] = $10;
 return 0;
}
function _tt_cmap4_init($cmap,$table) {
 $cmap = $cmap|0;
 $table = $table|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 HEAP32[$0>>2] = $table;
 $1 = ((($table)) + 6|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 8;
 $5 = ((($table)) + 7|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $4 | $7;
 $9 = $8 >>> 1;
 $10 = ((($cmap)) + 32|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($cmap)) + 24|0);
 HEAP32[$11>>2] = -1;
 $12 = ((($cmap)) + 28|0);
 HEAP32[$12>>2] = 0;
 return 0;
}
function _tt_cmap4_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $char_code;
 $1 = ($char_code>>>0)>(65535);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = ((($cmap)) + 20|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = $3 & 1;
   $5 = ($4|0)==(0);
   if ($5) {
    $7 = (_tt_cmap4_char_map_binary($cmap,$0,0)|0);
    $$0 = $7;
    break;
   } else {
    $6 = (_tt_cmap4_char_map_linear($cmap,$0,0)|0);
    $$0 = $6;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _tt_cmap4_char_next($cmap,$pchar_code) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pchar_code>>2]|0;
 $1 = ($0>>>0)>(65534);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($cmap)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = (_tt_cmap4_char_map_linear($cmap,$pchar_code,1)|0);
  $$0 = $6;
  return ($$0|0);
 }
 $7 = ((($cmap)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($0|0)==($8|0);
 if (!($9)) {
  $14 = (_tt_cmap4_char_map_binary($cmap,$pchar_code,1)|0);
  $$0 = $14;
  return ($$0|0);
 }
 _tt_cmap4_next($cmap);
 $10 = ((($cmap)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = HEAP32[$7>>2]|0;
 HEAP32[$pchar_code>>2] = $13;
 $$0 = $11;
 return ($$0|0);
}
function _tt_cmap4_validate($table,$valid) {
 $table = $table|0;
 $valid = $valid|0;
 var $$sum = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $error$0$lcssa = 0, $error$031 = 0, $error$1 = 0, $exitcond = 0, $exitcond40 = 0, $i$030 = 0, $last_end$034 = 0, $last_start$033 = 0, $length$0 = 0, $n$032 = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0;
 var $or$cond11 = 0, $or$cond20 = 0, $or$cond22$not = 0, $or$cond24 = 0, $or$cond26 = 0, $or$cond27 = 0, $or$cond41 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $p$029 = 0, $p_delta$037 = 0, $p_end$036 = 0, $p_offset$038 = 0, $p_start$035 = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 2|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = ((($table)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $3 | $6;
 $8 = ($7>>>0)<(16);
 if ($8) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $9 = (($table) + ($7)|0);
 $10 = ((($valid)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($9>>>0)>($11>>>0);
 do {
  if ($12) {
   $13 = ((($valid)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = HEAP32[$10>>2]|0;
    $17 = $16;
    $18 = $table;
    $19 = (($17) - ($18))|0;
    $length$0 = $19;
    break;
   } else {
    _ft_validator_error($valid,8);
    // unreachable;
   }
  } else {
   $length$0 = $7;
  }
 } while(0);
 $20 = ((($table)) + 6|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 << 8;
 $24 = ((($table)) + 7|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $23 | $26;
 $28 = ((($valid)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29>>>0)<(2);
 $31 = $26 & 1;
 $32 = ($31|0)==(0);
 $or$cond20 = $30 | $32;
 if (!($or$cond20)) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $33 = $27 >>> 1;
 $34 = $33 << 1;
 $35 = $33 << 3;
 $36 = (($35) + 16)|0;
 $37 = ($length$0>>>0)<($36>>>0);
 if ($37) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $38 = HEAP32[$28>>2]|0;
 $39 = ($38>>>0)>(1);
 if ($39) {
  $40 = ((($table)) + 8|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $42 << 8;
  $44 = ((($table)) + 9|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = $43 | $46;
  $48 = ((($table)) + 10|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $50 << 8;
  $52 = ((($table)) + 11|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $51 | $54;
  $56 = ((($table)) + 12|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = $58 << 8;
  $60 = ((($table)) + 13|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = $59 | $62;
  $64 = $61 | $45;
  $65 = $64 & 1;
  $66 = ($65<<24>>24)==(0);
  if (!($66)) {
   _ft_validator_error($valid,8);
   // unreachable;
  }
  $67 = $47 >>> 1;
  $68 = $63 >>> 1;
  $69 = $67 << 1;
  $notlhs = ($67>>>0)<=($33>>>0);
  $notrhs = ($69>>>0)>=($33>>>0);
  $or$cond22$not = $notlhs & $notrhs;
  $70 = (($68) + ($67))|0;
  $71 = ($70|0)==($33|0);
  $or$cond24 = $or$cond22$not & $71;
  $72 = 1 << $55;
  $73 = ($67|0)==($72|0);
  $or$cond26 = $73 & $or$cond24;
  if (!($or$cond26)) {
   _ft_validator_error($valid,8);
   // unreachable;
  }
 }
 $74 = ((($table)) + 14|0);
 $$sum = (($34) + 16)|0;
 $75 = (($table) + ($$sum)|0);
 $$sum12 = (($$sum) + ($34))|0;
 $76 = (($table) + ($$sum12)|0);
 $$sum13 = (($$sum12) + ($34))|0;
 $77 = (($table) + ($$sum13)|0);
 $$sum14 = (($$sum13) + ($34))|0;
 $78 = (($table) + ($$sum14)|0);
 $79 = HEAP32[$28>>2]|0;
 $80 = ($79>>>0)>(1);
 if ($80) {
  $$sum17 = (($34) + 12)|0;
  $81 = (($table) + ($$sum17)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = $83 << 8;
  $$sum18 = (($34) + 13)|0;
  $85 = (($table) + ($$sum18)|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $84 | $87;
  $89 = ($88|0)==(65535);
  if (!($89)) {
   _ft_validator_error($valid,8);
   // unreachable;
  }
 }
 $90 = ($33|0)==(0);
 if ($90) {
  $error$0$lcssa = 0;
  return ($error$0$lcssa|0);
 }
 $91 = (($33) + -1)|0;
 $92 = ((($valid)) + 172|0);
 $93 = (($table) + ($length$0)|0);
 $94 = (($33) + -1)|0;
 $95 = $27 >>> 1;
 $error$031 = 0;$last_end$034 = 0;$last_start$033 = 0;$n$032 = 0;$p_delta$037 = $76;$p_end$036 = $74;$p_offset$038 = $77;$p_start$035 = $75;
 L30: while(1) {
  $96 = ((($p_start$035)) + 2|0);
  $97 = HEAP8[$p_start$035>>0]|0;
  $98 = $97&255;
  $99 = $98 << 8;
  $100 = ((($p_start$035)) + 1|0);
  $101 = HEAP8[$100>>0]|0;
  $102 = $101&255;
  $103 = $99 | $102;
  $104 = ((($p_end$036)) + 2|0);
  $105 = HEAP8[$p_end$036>>0]|0;
  $106 = $105&255;
  $107 = $106 << 8;
  $108 = ((($p_end$036)) + 1|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = $107 | $110;
  $112 = ((($p_delta$037)) + 2|0);
  $113 = HEAP8[$p_delta$037>>0]|0;
  $114 = $113 << 24 >> 24;
  $115 = $114 << 8;
  $116 = ((($p_delta$037)) + 1|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = $115 | $118;
  $120 = ((($p_offset$038)) + 2|0);
  $121 = HEAP8[$p_offset$038>>0]|0;
  $122 = $121&255;
  $123 = $122 << 8;
  $124 = ((($p_offset$038)) + 1|0);
  $125 = HEAP8[$124>>0]|0;
  $126 = $125&255;
  $127 = $123 | $126;
  $128 = ($111>>>0)<($103>>>0);
  if ($128) {
   label = 22;
   break;
  }
  $129 = ($103>>>0)<=($last_end$034>>>0);
  $130 = ($n$032|0)!=(0);
  $or$cond = $130 & $129;
  do {
   if ($or$cond) {
    $131 = HEAP32[$28>>2]|0;
    $132 = ($131|0)==(0);
    if (!($132)) {
     label = 25;
     break L30;
    }
    $133 = ($last_start$033>>>0)>($103>>>0);
    $134 = ($last_end$034>>>0)>($111>>>0);
    $or$cond27 = $133 | $134;
    if ($or$cond27) {
     $135 = $error$031 | 1;
     $error$1 = $135;
     break;
    } else {
     $136 = $error$031 | 2;
     $error$1 = $136;
     break;
    }
   } else {
    $error$1 = $error$031;
   }
  } while(0);
  $switch$split2D = ($127|0)<(65535);
  L40: do {
   if ($switch$split2D) {
    switch ($127|0) {
    case 0:  {
     break;
    }
    default: {
     label = 30;
    }
    }
   } else {
    switch ($127|0) {
    case 65535:  {
     break;
    }
    default: {
     label = 30;
     break L40;
    }
    }
    $173 = HEAP32[$28>>2]|0;
    $174 = ($173>>>0)>(1);
    if ($174) {
     label = 45;
     break L30;
    }
    $175 = ($n$032|0)==($94|0);
    $176 = ($103|0)==(65535);
    $or$cond9 = $175 & $176;
    $177 = ($111|0)==(65535);
    $or$cond11 = $or$cond9 & $177;
    if (!($or$cond11)) {
     label = 45;
     break L30;
    }
   }
  } while(0);
  if ((label|0) == 30) {
   label = 0;
   $137 = (($p_offset$038) + ($127)|0);
   $138 = HEAP32[$28>>2]|0;
   $139 = ($138|0)==(0);
   if ($139) {
    $146 = ($n$032|0)==($91|0);
    $147 = ($103|0)==(65535);
    $or$cond5 = $146 & $147;
    $148 = ($111|0)==(65535);
    $or$cond7 = $or$cond5 & $148;
    if (!($or$cond7)) {
     $149 = ($137>>>0)<($78>>>0);
     if ($149) {
      label = 37;
      break;
     }
     $150 = (($111) - ($103))|0;
     $151 = $150 << 1;
     $152 = (($151) + 2)|0;
     $$sum15 = (($152) + ($127))|0;
     $153 = (($p_offset$038) + ($$sum15)|0);
     $154 = HEAP32[$10>>2]|0;
     $155 = ($153>>>0)>($154>>>0);
     if ($155) {
      label = 37;
      break;
     }
    }
   } else {
    $140 = ($137>>>0)<($78>>>0);
    if ($140) {
     label = 33;
     break;
    }
    $141 = (($111) - ($103))|0;
    $142 = $141 << 1;
    $143 = (($142) + 2)|0;
    $$sum16 = (($143) + ($127))|0;
    $144 = (($p_offset$038) + ($$sum16)|0);
    $145 = ($144>>>0)>($93>>>0);
    if ($145) {
     label = 33;
     break;
    }
   }
   $156 = HEAP32[$28>>2]|0;
   $157 = ($156|0)!=(0);
   $158 = ($111>>>0)>($103>>>0);
   $or$cond41 = $157 & $158;
   if ($or$cond41) {
    $i$030 = $103;$p$029 = $137;
    while(1) {
     $159 = ((($p$029)) + 2|0);
     $160 = HEAP8[$p$029>>0]|0;
     $161 = $160&255;
     $162 = $161 << 8;
     $163 = ((($p$029)) + 1|0);
     $164 = HEAP8[$163>>0]|0;
     $165 = $164&255;
     $166 = $162 | $165;
     $167 = ($166|0)==(0);
     if (!($167)) {
      $168 = (($166) + ($119))|0;
      $169 = $168 & 65535;
      $170 = HEAP32[$92>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if (!($171)) {
       label = 41;
       break L30;
      }
     }
     $172 = (($i$030) + 1)|0;
     $exitcond = ($172|0)==($111|0);
     if ($exitcond) {
      break;
     } else {
      $i$030 = $172;$p$029 = $159;
     }
    }
   }
  }
  $178 = (($n$032) + 1)|0;
  $exitcond40 = ($178|0)==($95|0);
  if ($exitcond40) {
   $error$0$lcssa = $error$1;
   label = 47;
   break;
  } else {
   $error$031 = $error$1;$last_end$034 = $111;$last_start$033 = $103;$n$032 = $178;$p_delta$037 = $112;$p_end$036 = $104;$p_offset$038 = $120;$p_start$035 = $96;
  }
 }
 if ((label|0) == 22) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 25) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 33) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 37) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 41) {
  _ft_validator_error($valid,16);
  // unreachable;
 }
 else if ((label|0) == 45) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 47) {
  return ($error$0$lcssa|0);
 }
 return (0)|0;
}
function _tt_cmap4_get_info($cmap,$cmap_info) {
 $cmap = $cmap|0;
 $cmap_info = $cmap_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = ((($cmap_info)) + 4|0);
 HEAP32[$3>>2] = 4;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = ((($1)) + 5|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $6 | $9;
 HEAP32[$cmap_info>>2] = $10;
 return 0;
}
function _tt_cmap6_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 6|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 8;
 $6 = ((($1)) + 7|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $5 | $8;
 $10 = ((($1)) + 8|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = ((($1)) + 9|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $13 | $16;
 $18 = (($char_code) - ($9))|0;
 $19 = ($18>>>0)<($17>>>0);
 if (!($19)) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $20 = $18 << 1;
 $$sum = (($20) + 10)|0;
 $21 = (($1) + ($$sum)|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 << 8;
 $$sum1 = (($20) + 11)|0;
 $25 = (($1) + ($$sum1)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $24 | $27;
 $result$0 = $28;
 return ($result$0|0);
}
function _tt_cmap6_char_next($cmap,$pchar_code) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 var $$ = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $char_code$12 = 0, $gindex$1 = 0, $idx$03 = 0, $p$01 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pchar_code>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ((($1)) + 6|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 8;
 $8 = ((($1)) + 7|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $7 | $10;
 $12 = ((($1)) + 8|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 << 8;
 $16 = ((($1)) + 9|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $15 | $18;
 $20 = ($3>>>0)>(65535);
 if ($20) {
  $gindex$1 = 0;$result$0 = 0;
  HEAP32[$pchar_code>>2] = $result$0;
  return ($gindex$1|0);
 }
 $21 = ($3>>>0)<($11>>>0);
 $$ = $21 ? $11 : $3;
 $22 = (($$) - ($11))|0;
 $23 = ($22>>>0)<($19>>>0);
 if (!($23)) {
  $gindex$1 = 0;$result$0 = 0;
  HEAP32[$pchar_code>>2] = $result$0;
  return ($gindex$1|0);
 }
 $24 = $22 << 1;
 $$sum = (($24) + 10)|0;
 $25 = (($1) + ($$sum)|0);
 $char_code$12 = $$;$idx$03 = $22;$p$01 = $25;
 while(1) {
  $26 = HEAP8[$p$01>>0]|0;
  $27 = $26&255;
  $28 = $27 << 8;
  $29 = ((($p$01)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $28 | $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   $gindex$1 = $32;$result$0 = $char_code$12;
   label = 6;
   break;
  }
  $34 = ((($p$01)) + 2|0);
  $35 = (($char_code$12) + 1)|0;
  $36 = (($idx$03) + 1)|0;
  $37 = ($36>>>0)<($19>>>0);
  if ($37) {
   $char_code$12 = $35;$idx$03 = $36;$p$01 = $34;
  } else {
   $gindex$1 = 0;$result$0 = 0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  HEAP32[$pchar_code>>2] = $result$0;
  return ($gindex$1|0);
 }
 return (0)|0;
}
function _tt_cmap6_validate($table,$valid) {
 $table = $table|0;
 $valid = $valid|0;
 var $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $count$0 = 0, $or$cond = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 10|0);
 $1 = ((($valid)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)>($2>>>0);
 if ($3) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $4 = ((($table)) + 2|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 8;
 $8 = ((($table)) + 3|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $7 | $10;
 $12 = ((($table)) + 8|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 << 8;
 $16 = ((($table)) + 9|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $15 | $18;
 $20 = (($table) + ($11)|0);
 $21 = HEAP32[$1>>2]|0;
 $22 = ($20>>>0)>($21>>>0);
 if ($22) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $23 = $19 << 1;
 $24 = (($23) + 10)|0;
 $25 = ($11>>>0)<($24>>>0);
 if ($25) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $26 = ((($valid)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0);
 $29 = ($19|0)!=(0);
 $or$cond = $29 & $28;
 if (!($or$cond)) {
  return 0;
 }
 $30 = ((($valid)) + 172|0);
 $count$0 = $19;$p$0 = $0;
 while(1) {
  $31 = ((($p$0)) + 2|0);
  $32 = HEAP8[$p$0>>0]|0;
  $33 = $32&255;
  $34 = $33 << 8;
  $35 = ((($p$0)) + 1|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $34 | $37;
  $39 = HEAP32[$30>>2]|0;
  $40 = ($38>>>0)<($39>>>0);
  if (!($40)) {
   label = 9;
   break;
  }
  $41 = (($count$0) + -1)|0;
  $$old1 = ($41|0)==(0);
  if ($$old1) {
   label = 11;
   break;
  } else {
   $count$0 = $41;$p$0 = $31;
  }
 }
 if ((label|0) == 9) {
  _ft_validator_error($valid,16);
  // unreachable;
 }
 else if ((label|0) == 11) {
  return 0;
 }
 return (0)|0;
}
function _tt_cmap6_get_info($cmap,$cmap_info) {
 $cmap = $cmap|0;
 $cmap_info = $cmap_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 $3 = ((($cmap_info)) + 4|0);
 HEAP32[$3>>2] = 6;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = ((($1)) + 5|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $6 | $9;
 HEAP32[$cmap_info>>2] = $10;
 return 0;
}
function _tt_cmap8_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var $$lcssa36 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $9 = 0, $num_groups$02 = 0, $p$03 = 0, $p$03$lcssa35 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8204|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 24;
 $6 = ((($1)) + 8205|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 16;
 $10 = $9 | $5;
 $11 = ((($1)) + 8206|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 8;
 $15 = $10 | $14;
 $16 = ((($1)) + 8207|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $15 | $18;
 $20 = ($19|0)==(0);
 if ($20) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $21 = ((($1)) + 8208|0);
 $num_groups$02 = $19;$p$03 = $21;
 while(1) {
  $25 = HEAP8[$p$03>>0]|0;
  $26 = $25&255;
  $27 = $26 << 24;
  $28 = ((($p$03)) + 1|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 << 16;
  $32 = $31 | $27;
  $33 = ((($p$03)) + 2|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $35 << 8;
  $37 = $32 | $36;
  $38 = ((($p$03)) + 3|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = $37 | $40;
  $42 = ($41>>>0)>($char_code>>>0);
  if ($42) {
   $result$0 = 0;
   label = 7;
   break;
  }
  $43 = ((($p$03)) + 4|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $45 << 24;
  $47 = ((($p$03)) + 5|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = $49 << 16;
  $51 = $50 | $46;
  $52 = ((($p$03)) + 6|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $54 << 8;
  $56 = $51 | $55;
  $57 = ((($p$03)) + 7|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = $56 | $59;
  $61 = ($60>>>0)<($char_code>>>0);
  $24 = (($num_groups$02) + -1)|0;
  if (!($61)) {
   $$lcssa36 = $41;$p$03$lcssa35 = $p$03;
   label = 6;
   break;
  }
  $22 = ((($p$03)) + 12|0);
  $23 = ($24|0)==(0);
  if ($23) {
   $result$0 = 0;
   label = 7;
   break;
  } else {
   $num_groups$02 = $24;$p$03 = $22;
  }
 }
 if ((label|0) == 6) {
  $62 = ((($p$03$lcssa35)) + 8|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = $64 << 24;
  $66 = ((($p$03$lcssa35)) + 9|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $68 << 16;
  $70 = $69 | $65;
  $71 = ((($p$03$lcssa35)) + 10|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $73 << 8;
  $75 = $70 | $74;
  $76 = ((($p$03$lcssa35)) + 11|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = $75 | $78;
  $80 = (($char_code) - ($$lcssa36))|0;
  $81 = (($80) + ($79))|0;
  $result$0 = $81;
  return ($result$0|0);
 }
 else if ((label|0) == 7) {
  return ($result$0|0);
 }
 return (0)|0;
}
function _tt_cmap8_char_next($cmap,$pchar_code) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 var $$char_code$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $char_code$03 = 0, $gindex$2 = 0, $num_groups$02 = 0, $p$01 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8204|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 24;
 $6 = ((($1)) + 8205|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 16;
 $10 = $9 | $5;
 $11 = ((($1)) + 8206|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 8;
 $15 = $10 | $14;
 $16 = ((($1)) + 8207|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $15 | $18;
 $20 = ($19|0)==(0);
 if ($20) {
  $gindex$2 = 0;$result$0 = 0;
  HEAP32[$pchar_code>>2] = $result$0;
  return ($gindex$2|0);
 }
 $21 = ((($1)) + 8208|0);
 $22 = HEAP32[$pchar_code>>2]|0;
 $23 = (($22) + 1)|0;
 $char_code$03 = $23;$num_groups$02 = $19;$p$01 = $21;
 while(1) {
  $24 = HEAP8[$p$01>>0]|0;
  $25 = $24&255;
  $26 = $25 << 24;
  $27 = ((($p$01)) + 1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $29 << 16;
  $31 = $30 | $26;
  $32 = ((($p$01)) + 2|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $34 << 8;
  $36 = $31 | $35;
  $37 = ((($p$01)) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $36 | $39;
  $41 = ((($p$01)) + 4|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $43 << 24;
  $45 = ((($p$01)) + 5|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $47 << 16;
  $49 = $48 | $44;
  $50 = ((($p$01)) + 6|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $52 << 8;
  $54 = $49 | $53;
  $55 = ((($p$01)) + 7|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $54 | $57;
  $59 = ((($p$01)) + 12|0);
  $60 = ($char_code$03>>>0)<($40>>>0);
  $$char_code$0 = $60 ? $40 : $char_code$03;
  $61 = ($$char_code$0>>>0)>($58>>>0);
  if (!($61)) {
   $62 = ((($p$01)) + 8|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = $64 << 24;
   $66 = ((($p$01)) + 9|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $69 = $68 << 16;
   $70 = $69 | $65;
   $71 = ((($p$01)) + 10|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72&255;
   $74 = $73 << 8;
   $75 = $70 | $74;
   $76 = ((($p$01)) + 11|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $79 = $75 | $78;
   $80 = (($$char_code$0) - ($40))|0;
   $81 = (($79) + ($80))|0;
   $82 = ($81|0)==(0);
   if (!($82)) {
    $gindex$2 = $81;$result$0 = $$char_code$0;
    label = 6;
    break;
   }
  }
  $83 = (($num_groups$02) + -1)|0;
  $84 = ($83|0)==(0);
  if ($84) {
   $gindex$2 = 0;$result$0 = 0;
   label = 6;
   break;
  } else {
   $char_code$03 = $$char_code$0;$num_groups$02 = $83;$p$01 = $59;
  }
 }
 if ((label|0) == 6) {
  HEAP32[$pchar_code>>2] = $result$0;
  return ($gindex$2|0);
 }
 return (0)|0;
}
function _tt_cmap8_validate($table,$valid) {
 $table = $table|0;
 $valid = $valid|0;
 var $$sum = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $count$010 = 0, $count$112 = 0, $exitcond = 0, $last$015 = 0, $n$014 = 0, $or$cond = 0, $or$cond5 = 0, $p$016 = 0, $start$09 = 0, $start$111 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 8208|0);
 $1 = ((($valid)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)>($2>>>0);
 if ($3) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $4 = ((($table)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 24;
 $8 = ((($table)) + 5|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = $11 | $7;
 $13 = ((($table)) + 6|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = $12 | $16;
 $18 = ((($table)) + 7|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $17 | $20;
 $22 = HEAP32[$1>>2]|0;
 $23 = $22;
 $24 = $table;
 $25 = (($23) - ($24))|0;
 $26 = ($21>>>0)>($25>>>0);
 $27 = ($21>>>0)<(8208);
 $or$cond = $26 | $27;
 if ($or$cond) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $28 = ((($table)) + 8204|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 << 24;
 $32 = ((($table)) + 8205|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 << 16;
 $36 = $35 | $31;
 $37 = ((($table)) + 8206|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 << 8;
 $41 = $36 | $40;
 $42 = ((($table)) + 8207|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $41 | $44;
 $46 = ($45*12)|0;
 $$sum = (($46) + 8208)|0;
 $47 = (($table) + ($$sum)|0);
 $48 = HEAP32[$1>>2]|0;
 $49 = ($47>>>0)>($48>>>0);
 if ($49) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $50 = ($45|0)==(0);
 if ($50) {
  return 0;
 }
 $51 = ((($valid)) + 8|0);
 $52 = ((($valid)) + 172|0);
 $last$015 = 0;$n$014 = 0;$p$016 = $0;
 L13: while(1) {
  $53 = HEAP8[$p$016>>0]|0;
  $54 = $53&255;
  $55 = $54 << 24;
  $56 = ((($p$016)) + 1|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = $58 << 16;
  $60 = $59 | $55;
  $61 = ((($p$016)) + 2|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = $63 << 8;
  $65 = $60 | $64;
  $66 = ((($p$016)) + 3|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $65 | $68;
  $70 = ((($p$016)) + 4|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = $72 << 24;
  $74 = ((($p$016)) + 5|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = $76 << 16;
  $78 = $77 | $73;
  $79 = ((($p$016)) + 6|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = $81 << 8;
  $83 = $78 | $82;
  $84 = ((($p$016)) + 7|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = $83 | $86;
  $88 = ((($p$016)) + 12|0);
  $89 = ((($p$016)) + 8|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = $91 << 24;
  $93 = ((($p$016)) + 9|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = $95 << 16;
  $97 = $96 | $92;
  $98 = ((($p$016)) + 10|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = $100 << 8;
  $102 = $97 | $101;
  $103 = ((($p$016)) + 11|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = $102 | $105;
  $107 = ($87>>>0)<($69>>>0);
  if ($107) {
   label = 10;
   break;
  }
  $108 = ($n$014|0)==(0);
  $109 = ($69>>>0)>($last$015>>>0);
  $or$cond5 = $108 | $109;
  if (!($or$cond5)) {
   label = 12;
   break;
  }
  $110 = HEAP32[$51>>2]|0;
  $111 = ($110|0)==(0);
  do {
   if (!($111)) {
    $112 = (($87) - ($69))|0;
    $113 = (($112) + ($106))|0;
    $114 = HEAP32[$52>>2]|0;
    $115 = ($113>>>0)<($114>>>0);
    if (!($115)) {
     label = 15;
     break L13;
    }
    $116 = (($87) - ($69))|0;
    $117 = (($116) + 1)|0;
    $118 = ($60|0)==(0);
    if ($118) {
     $141 = ($78|0)==(0);
     if (!($141)) {
      label = 24;
      break L13;
     }
     $142 = ($117|0)==(0);
     if ($142) {
      break;
     } else {
      $count$112 = $117;$start$111 = $69;
     }
     while(1) {
      $143 = $start$111 >>> 3;
      $144 = $143 & 8191;
      $$sum2 = (($144) + 12)|0;
      $145 = (($table) + ($$sum2)|0);
      $146 = HEAP8[$145>>0]|0;
      $147 = $146&255;
      $148 = $start$111 & 7;
      $149 = 128 >>> $148;
      $150 = $147 & $149;
      $151 = ($150|0)==(0);
      if (!($151)) {
       label = 27;
       break L13;
      }
      $152 = (($count$112) + -1)|0;
      $153 = (($start$111) + 1)|0;
      $154 = ($152|0)==(0);
      if ($154) {
       break;
      } else {
       $count$112 = $152;$start$111 = $153;
      }
     }
    } else {
     $119 = ($117|0)==(0);
     if ($119) {
      break;
     } else {
      $count$010 = $117;$start$09 = $69;
     }
     while(1) {
      $120 = $start$09 >>> 16;
      $121 = $start$09 >>> 19;
      $$sum3 = (($121) + 12)|0;
      $122 = (($table) + ($$sum3)|0);
      $123 = HEAP8[$122>>0]|0;
      $124 = $123&255;
      $125 = $120 & 7;
      $126 = 128 >>> $125;
      $127 = $124 & $126;
      $128 = ($127|0)==(0);
      if ($128) {
       label = 19;
       break L13;
      }
      $129 = $start$09 >>> 3;
      $130 = $129 & 8191;
      $$sum4 = (($130) + 12)|0;
      $131 = (($table) + ($$sum4)|0);
      $132 = HEAP8[$131>>0]|0;
      $133 = $132&255;
      $134 = $start$09 & 7;
      $135 = 128 >>> $134;
      $136 = $133 & $135;
      $137 = ($136|0)==(0);
      if ($137) {
       label = 21;
       break L13;
      }
      $138 = (($count$010) + -1)|0;
      $139 = (($start$09) + 1)|0;
      $140 = ($138|0)==(0);
      if ($140) {
       break;
      } else {
       $count$010 = $138;$start$09 = $139;
      }
     }
    }
   }
  } while(0);
  $155 = (($n$014) + 1)|0;
  $exitcond = ($155|0)==($45|0);
  if ($exitcond) {
   label = 30;
   break;
  } else {
   $last$015 = $87;$n$014 = $155;$p$016 = $88;
  }
 }
 if ((label|0) == 10) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 12) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 15) {
  _ft_validator_error($valid,16);
  // unreachable;
 }
 else if ((label|0) == 19) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 21) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 24) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 27) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 30) {
  return 0;
 }
 return (0)|0;
}
function _tt_cmap8_get_info($cmap,$cmap_info) {
 $cmap = $cmap|0;
 $cmap_info = $cmap_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = ((($cmap_info)) + 4|0);
 HEAP32[$3>>2] = 8;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 24;
 $7 = ((($1)) + 9|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 << 16;
 $11 = $10 | $6;
 $12 = ((($1)) + 10|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 << 8;
 $16 = $11 | $15;
 $17 = ((($1)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $16 | $19;
 HEAP32[$cmap_info>>2] = $20;
 return 0;
}
function _tt_cmap10_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 24;
 $6 = ((($1)) + 13|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 16;
 $10 = $9 | $5;
 $11 = ((($1)) + 14|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 8;
 $15 = $10 | $14;
 $16 = ((($1)) + 15|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $15 | $18;
 $20 = ((($1)) + 16|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 << 24;
 $24 = ((($1)) + 17|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $26 << 16;
 $28 = $27 | $23;
 $29 = ((($1)) + 18|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $31 << 8;
 $33 = $28 | $32;
 $34 = ((($1)) + 19|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&255;
 $37 = $33 | $36;
 $38 = (($char_code) - ($19))|0;
 $39 = ($38>>>0)<($37>>>0);
 if (!($39)) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $40 = $38 << 1;
 $$sum = (($40) + 20)|0;
 $41 = (($1) + ($$sum)|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $43 << 8;
 $$sum1 = (($40) + 21)|0;
 $45 = (($1) + ($$sum1)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $44 | $47;
 $result$0 = $48;
 return ($result$0|0);
}
function _tt_cmap10_char_next($cmap,$pchar_code) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 var $$ = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $char_code$1$lcssa = 0;
 var $char_code$12 = 0, $gindex$1 = 0, $idx$03 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$pchar_code>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ((($1)) + 12|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 24;
 $8 = ((($1)) + 13|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = $11 | $7;
 $13 = ((($1)) + 14|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = $12 | $16;
 $18 = ((($1)) + 15|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $17 | $20;
 $22 = ((($1)) + 16|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 24;
 $26 = ((($1)) + 17|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 << 16;
 $30 = $29 | $25;
 $31 = ((($1)) + 18|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 << 8;
 $35 = $30 | $34;
 $36 = ((($1)) + 19|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $35 | $38;
 $40 = ($3>>>0)<($21>>>0);
 $$ = $40 ? $21 : $3;
 $41 = (($$) - ($21))|0;
 $42 = ($41>>>0)<($39>>>0);
 if (!($42)) {
  $char_code$1$lcssa = $$;$gindex$1 = 0;
  HEAP32[$pchar_code>>2] = $char_code$1$lcssa;
  return ($gindex$1|0);
 }
 $43 = $41 << 1;
 $$sum = (($43) + 20)|0;
 $44 = (($1) + ($$sum)|0);
 $char_code$12 = $$;$idx$03 = $41;$p$01 = $44;
 while(1) {
  $45 = HEAP8[$p$01>>0]|0;
  $46 = $45&255;
  $47 = $46 << 8;
  $48 = ((($p$01)) + 1|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $47 | $50;
  $52 = ($51|0)==(0);
  if (!($52)) {
   $char_code$1$lcssa = $char_code$12;$gindex$1 = $51;
   label = 5;
   break;
  }
  $53 = ((($p$01)) + 2|0);
  $54 = (($char_code$12) + 1)|0;
  $55 = (($idx$03) + 1)|0;
  $56 = ($55>>>0)<($39>>>0);
  if ($56) {
   $char_code$12 = $54;$idx$03 = $55;$p$01 = $53;
  } else {
   $char_code$1$lcssa = $54;$gindex$1 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  HEAP32[$pchar_code>>2] = $char_code$1$lcssa;
  return ($gindex$1|0);
 }
 return (0)|0;
}
function _tt_cmap10_validate($table,$valid) {
 $table = $table|0;
 $valid = $valid|0;
 var $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0 = 0, $or$cond = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 20|0);
 $1 = ((($valid)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)>($2>>>0);
 if ($3) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $4 = ((($table)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 24;
 $8 = ((($table)) + 5|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = $11 | $7;
 $13 = ((($table)) + 6|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = $12 | $16;
 $18 = ((($table)) + 7|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $17 | $20;
 $22 = ((($table)) + 16|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 24;
 $26 = ((($table)) + 17|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 << 16;
 $30 = $29 | $25;
 $31 = ((($table)) + 18|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 << 8;
 $35 = $30 | $34;
 $36 = ((($table)) + 19|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $35 | $38;
 $40 = HEAP32[$1>>2]|0;
 $41 = $40;
 $42 = $table;
 $43 = (($41) - ($42))|0;
 $44 = ($21>>>0)>($43>>>0);
 if ($44) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $45 = $39 << 1;
 $46 = (($45) + 20)|0;
 $47 = ($21>>>0)<($46>>>0);
 if ($47) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $48 = ((($valid)) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)!=(0);
 $51 = ($39|0)!=(0);
 $or$cond = $51 & $50;
 if (!($or$cond)) {
  return 0;
 }
 $52 = ((($valid)) + 172|0);
 $count$0 = $39;$p$0 = $0;
 while(1) {
  $53 = ((($p$0)) + 2|0);
  $54 = HEAP8[$p$0>>0]|0;
  $55 = $54&255;
  $56 = $55 << 8;
  $57 = ((($p$0)) + 1|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = $56 | $59;
  $61 = HEAP32[$52>>2]|0;
  $62 = ($60>>>0)<($61>>>0);
  if (!($62)) {
   label = 9;
   break;
  }
  $63 = (($count$0) + -1)|0;
  $$old1 = ($63|0)==(0);
  if ($$old1) {
   label = 11;
   break;
  } else {
   $count$0 = $63;$p$0 = $53;
  }
 }
 if ((label|0) == 9) {
  _ft_validator_error($valid,16);
  // unreachable;
 }
 else if ((label|0) == 11) {
  return 0;
 }
 return (0)|0;
}
function _tt_cmap10_get_info($cmap,$cmap_info) {
 $cmap = $cmap|0;
 $cmap_info = $cmap_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = ((($cmap_info)) + 4|0);
 HEAP32[$3>>2] = 10;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 24;
 $7 = ((($1)) + 9|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 << 16;
 $11 = $10 | $6;
 $12 = ((($1)) + 10|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 << 8;
 $16 = $11 | $15;
 $17 = ((($1)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $16 | $19;
 HEAP32[$cmap_info>>2] = $20;
 return 0;
}
function _tt_cmap12_init($cmap,$table) {
 $cmap = $cmap|0;
 $table = $table|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 HEAP32[$0>>2] = $table;
 $1 = ((($table)) + 12|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($table)) + 13|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($table)) + 14|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = ((($table)) + 15|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 | $17;
 $19 = ((($cmap)) + 40|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($cmap)) + 24|0);
 HEAP8[$20>>0] = 0;
 return 0;
}
function _tt_cmap12_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $char_code;
 $1 = (_tt_cmap12_char_map_binary($cmap,$0,0)|0);
 STACKTOP = sp;return ($1|0);
}
function _tt_cmap12_char_next($cmap,$pchar_code) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($cmap)) + 24|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $6 = HEAP32[$pchar_code>>2]|0;
  $7 = ($1|0)==($6|0);
  if ($7) {
   _tt_cmap12_next($cmap);
   $8 = HEAP8[$3>>0]|0;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $$0 = 0;
    return ($$0|0);
   }
   $10 = ((($cmap)) + 32|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$0 = 0;
    return ($$0|0);
   }
   $13 = HEAP32[$0>>2]|0;
   HEAP32[$pchar_code>>2] = $13;
   $$0 = $11;
   return ($$0|0);
  }
 }
 $14 = (_tt_cmap12_char_map_binary($cmap,$pchar_code,1)|0);
 $$0 = $14;
 return ($$0|0);
}
function _tt_cmap12_validate($table,$valid) {
 $table = $table|0;
 $valid = $valid|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $last$03 = 0, $n$01 = 0, $or$cond = 0, $p$02 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 16|0);
 $1 = ((($valid)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)>($2>>>0);
 if ($3) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $4 = ((($table)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 24;
 $8 = ((($table)) + 5|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = $11 | $7;
 $13 = ((($table)) + 6|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = $12 | $16;
 $18 = ((($table)) + 7|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $17 | $20;
 $22 = ((($table)) + 12|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 24;
 $26 = ((($table)) + 13|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 << 16;
 $30 = $29 | $25;
 $31 = ((($table)) + 14|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 << 8;
 $35 = $30 | $34;
 $36 = ((($table)) + 15|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $35 | $38;
 $40 = HEAP32[$1>>2]|0;
 $41 = $40;
 $42 = $table;
 $43 = (($41) - ($42))|0;
 $44 = ($21>>>0)>($43>>>0);
 if ($44) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $45 = ($39*12)|0;
 $46 = (($45) + 16)|0;
 $47 = ($21>>>0)<($46>>>0);
 if ($47) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $48 = ($39|0)==(0);
 if ($48) {
  return 0;
 }
 $49 = ((($valid)) + 8|0);
 $50 = ((($valid)) + 172|0);
 $last$03 = 0;$n$01 = 0;$p$02 = $0;
 while(1) {
  $51 = HEAP8[$p$02>>0]|0;
  $52 = $51&255;
  $53 = $52 << 24;
  $54 = ((($p$02)) + 1|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = $56 << 16;
  $58 = $57 | $53;
  $59 = ((($p$02)) + 2|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $61 << 8;
  $63 = $58 | $62;
  $64 = ((($p$02)) + 3|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = $63 | $66;
  $68 = ((($p$02)) + 4|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = $70 << 24;
  $72 = ((($p$02)) + 5|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = $74 << 16;
  $76 = $75 | $71;
  $77 = ((($p$02)) + 6|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = $79 << 8;
  $81 = $76 | $80;
  $82 = ((($p$02)) + 7|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = $81 | $84;
  $86 = ((($p$02)) + 12|0);
  $87 = ((($p$02)) + 8|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = $89 << 24;
  $91 = ((($p$02)) + 9|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = $93 << 16;
  $95 = $94 | $90;
  $96 = ((($p$02)) + 10|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $98 << 8;
  $100 = $95 | $99;
  $101 = ((($p$02)) + 11|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = $100 | $103;
  $105 = ($85>>>0)<($67>>>0);
  if ($105) {
   label = 9;
   break;
  }
  $106 = ($n$01|0)==(0);
  $107 = ($67>>>0)>($last$03>>>0);
  $or$cond = $106 | $107;
  if (!($or$cond)) {
   label = 11;
   break;
  }
  $108 = HEAP32[$49>>2]|0;
  $109 = ($108|0)==(0);
  if (!($109)) {
   $110 = (($85) - ($67))|0;
   $111 = (($110) + ($104))|0;
   $112 = HEAP32[$50>>2]|0;
   $113 = ($111>>>0)<($112>>>0);
   if (!($113)) {
    label = 14;
    break;
   }
  }
  $114 = (($n$01) + 1)|0;
  $exitcond = ($114|0)==($39|0);
  if ($exitcond) {
   label = 16;
   break;
  } else {
   $last$03 = $85;$n$01 = $114;$p$02 = $86;
  }
 }
 if ((label|0) == 9) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 11) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 14) {
  _ft_validator_error($valid,16);
  // unreachable;
 }
 else if ((label|0) == 16) {
  return 0;
 }
 return (0)|0;
}
function _tt_cmap12_get_info($cmap,$cmap_info) {
 $cmap = $cmap|0;
 $cmap_info = $cmap_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = ((($cmap_info)) + 4|0);
 HEAP32[$3>>2] = 12;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 24;
 $7 = ((($1)) + 9|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 << 16;
 $11 = $10 | $6;
 $12 = ((($1)) + 10|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 << 8;
 $16 = $11 | $15;
 $17 = ((($1)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $16 | $19;
 HEAP32[$cmap_info>>2] = $20;
 return 0;
}
function _tt_cmap13_init($cmap,$table) {
 $cmap = $cmap|0;
 $table = $table|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 HEAP32[$0>>2] = $table;
 $1 = ((($table)) + 12|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($table)) + 13|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($table)) + 14|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = ((($table)) + 15|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 | $17;
 $19 = ((($cmap)) + 40|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($cmap)) + 24|0);
 HEAP8[$20>>0] = 0;
 return 0;
}
function _tt_cmap13_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $char_code;
 $1 = (_tt_cmap13_char_map_binary($cmap,$0,0)|0);
 STACKTOP = sp;return ($1|0);
}
function _tt_cmap13_char_next($cmap,$pchar_code) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(-1);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($cmap)) + 24|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $6 = HEAP32[$pchar_code>>2]|0;
  $7 = ($1|0)==($6|0);
  if ($7) {
   _tt_cmap13_next($cmap);
   $8 = HEAP8[$3>>0]|0;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $$0 = 0;
    return ($$0|0);
   }
   $10 = ((($cmap)) + 32|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$0 = 0;
    return ($$0|0);
   }
   $13 = HEAP32[$0>>2]|0;
   HEAP32[$pchar_code>>2] = $13;
   $$0 = $11;
   return ($$0|0);
  }
 }
 $14 = (_tt_cmap13_char_map_binary($cmap,$pchar_code,1)|0);
 $$0 = $14;
 return ($$0|0);
}
function _tt_cmap13_validate($table,$valid) {
 $table = $table|0;
 $valid = $valid|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $last$03 = 0, $n$01 = 0, $or$cond = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 16|0);
 $1 = ((($valid)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)>($2>>>0);
 if ($3) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $4 = ((($table)) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 24;
 $8 = ((($table)) + 5|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = $11 | $7;
 $13 = ((($table)) + 6|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = $12 | $16;
 $18 = ((($table)) + 7|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $17 | $20;
 $22 = ((($table)) + 12|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 24;
 $26 = ((($table)) + 13|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 << 16;
 $30 = $29 | $25;
 $31 = ((($table)) + 14|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 << 8;
 $35 = $30 | $34;
 $36 = ((($table)) + 15|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $35 | $38;
 $40 = HEAP32[$1>>2]|0;
 $41 = $40;
 $42 = $table;
 $43 = (($41) - ($42))|0;
 $44 = ($21>>>0)>($43>>>0);
 if ($44) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $45 = ($39*12)|0;
 $46 = (($45) + 16)|0;
 $47 = ($21>>>0)<($46>>>0);
 if ($47) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $48 = ($39|0)==(0);
 if ($48) {
  return 0;
 }
 $49 = ((($valid)) + 8|0);
 $50 = ((($valid)) + 172|0);
 $last$03 = 0;$n$01 = 0;$p$02 = $0;
 while(1) {
  $51 = HEAP8[$p$02>>0]|0;
  $52 = $51&255;
  $53 = $52 << 24;
  $54 = ((($p$02)) + 1|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = $56 << 16;
  $58 = $57 | $53;
  $59 = ((($p$02)) + 2|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $61 << 8;
  $63 = $58 | $62;
  $64 = ((($p$02)) + 3|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = $63 | $66;
  $68 = ((($p$02)) + 4|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = $70 << 24;
  $72 = ((($p$02)) + 5|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = $74 << 16;
  $76 = $75 | $71;
  $77 = ((($p$02)) + 6|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = $79 << 8;
  $81 = $76 | $80;
  $82 = ((($p$02)) + 7|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = $81 | $84;
  $86 = ((($p$02)) + 12|0);
  $87 = ((($p$02)) + 8|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = $88&255;
  $90 = $89 << 24;
  $91 = ((($p$02)) + 9|0);
  $92 = HEAP8[$91>>0]|0;
  $93 = $92&255;
  $94 = $93 << 16;
  $95 = $94 | $90;
  $96 = ((($p$02)) + 10|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = $98 << 8;
  $100 = $95 | $99;
  $101 = ((($p$02)) + 11|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = $100 | $103;
  $105 = ($67>>>0)>($85>>>0);
  if ($105) {
   label = 9;
   break;
  }
  $106 = ($n$01|0)==(0);
  $107 = ($67>>>0)>($last$03>>>0);
  $or$cond = $106 | $107;
  if (!($or$cond)) {
   label = 11;
   break;
  }
  $108 = HEAP32[$49>>2]|0;
  $109 = ($108|0)==(0);
  if (!($109)) {
   $110 = HEAP32[$50>>2]|0;
   $111 = ($104>>>0)<($110>>>0);
   if (!($111)) {
    label = 14;
    break;
   }
  }
  $112 = (($n$01) + 1)|0;
  $exitcond = ($112|0)==($39|0);
  if ($exitcond) {
   label = 16;
   break;
  } else {
   $last$03 = $85;$n$01 = $112;$p$02 = $86;
  }
 }
 if ((label|0) == 9) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 11) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 else if ((label|0) == 14) {
  _ft_validator_error($valid,16);
  // unreachable;
 }
 else if ((label|0) == 16) {
  return 0;
 }
 return (0)|0;
}
function _tt_cmap13_get_info($cmap,$cmap_info) {
 $cmap = $cmap|0;
 $cmap_info = $cmap_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = ((($cmap_info)) + 4|0);
 HEAP32[$3>>2] = 13;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 24;
 $7 = ((($1)) + 9|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 << 16;
 $11 = $10 | $6;
 $12 = ((($1)) + 10|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 << 8;
 $16 = $11 | $15;
 $17 = ((($1)) + 11|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $16 | $19;
 HEAP32[$cmap_info>>2] = $20;
 return 0;
}
function _tt_cmap14_init($cmap,$table) {
 $cmap = $cmap|0;
 $table = $table|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 HEAP32[$0>>2] = $table;
 $1 = ((($table)) + 6|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 24;
 $5 = ((($table)) + 7|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 16;
 $9 = $8 | $4;
 $10 = ((($table)) + 8|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $9 | $13;
 $15 = ((($table)) + 9|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 | $17;
 $19 = ((($cmap)) + 24|0);
 HEAP32[$19>>2] = $18;
 $20 = ((($cmap)) + 28|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($cmap)) + 32|0);
 HEAP32[$21>>2] = 0;
 return 0;
}
function _tt_cmap14_done($cmap) {
 $cmap = $cmap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($cmap)) + 28|0);
 HEAP32[$2>>2] = 0;
 $3 = ($1|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($cmap)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  return;
 }
 _ft_mem_free($1,$5);
 HEAP32[$4>>2] = 0;
 return;
}
function _tt_cmap14_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _tt_cmap14_char_next($cmap,$pchar_code) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$pchar_code>>2] = 0;
 return 0;
}
function _tt_cmap14_char_var_index($cmap,$ucmap,$charcode,$variantSelector) {
 $cmap = $cmap|0;
 $ucmap = $ucmap|0;
 $charcode = $charcode|0;
 $variantSelector = $variantSelector|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 6|0);
 $3 = (_tt_cmap14_find_variant($2,$variantSelector)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($3)) + 4|0);
 $6 = HEAP8[$3>>0]|0;
 $7 = $6&255;
 $8 = $7 << 24;
 $9 = ((($3)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 16;
 $13 = $12 | $8;
 $14 = ((($3)) + 2|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 8;
 $18 = $13 | $17;
 $19 = ((($3)) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $18 | $21;
 $23 = HEAP8[$5>>0]|0;
 $24 = $23&255;
 $25 = $24 << 24;
 $26 = ((($3)) + 5|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 << 16;
 $30 = $29 | $25;
 $31 = ((($3)) + 6|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 << 8;
 $35 = $30 | $34;
 $36 = ((($3)) + 7|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $35 | $38;
 $40 = ($22|0)==(0);
 if (!($40)) {
  $41 = (($1) + ($22)|0);
  $42 = (_tt_cmap14_char_map_def_binary($41,$charcode)|0);
  $43 = ($42|0)==(0);
  if (!($43)) {
   $44 = ((($ucmap)) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iii[$47 & 255]($ucmap,$charcode)|0);
   $$0 = $48;
   return ($$0|0);
  }
 }
 $49 = ($39|0)==(0);
 if ($49) {
  $$0 = 0;
  return ($$0|0);
 }
 $50 = HEAP32[$0>>2]|0;
 $51 = (($50) + ($39)|0);
 $52 = (_tt_cmap14_char_map_nondef_binary($51,$charcode)|0);
 $$0 = $52;
 return ($$0|0);
}
function _tt_cmap14_char_var_isdefault($cmap,$charcode,$variantSelector) {
 $cmap = $cmap|0;
 $charcode = $charcode|0;
 $variantSelector = $variantSelector|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 6|0);
 $3 = (_tt_cmap14_find_variant($2,$variantSelector)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = HEAP8[$3>>0]|0;
 $6 = $5&255;
 $7 = $6 << 24;
 $8 = ((($3)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = $11 | $7;
 $13 = ((($3)) + 2|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = $12 | $16;
 $18 = ((($3)) + 3|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $17 | $20;
 $22 = ((($3)) + 4|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 24;
 $26 = ((($3)) + 5|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 << 16;
 $30 = $29 | $25;
 $31 = ((($3)) + 6|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 << 8;
 $35 = $30 | $34;
 $36 = ((($3)) + 7|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $35 | $38;
 $40 = ($21|0)==(0);
 if (!($40)) {
  $41 = (($1) + ($21)|0);
  $42 = (_tt_cmap14_char_map_def_binary($41,$charcode)|0);
  $43 = ($42|0)==(0);
  if (!($43)) {
   $$0 = 1;
   return ($$0|0);
  }
 }
 $44 = ($39|0)==(0);
 if (!($44)) {
  $45 = HEAP32[$0>>2]|0;
  $46 = (($45) + ($39)|0);
  $47 = (_tt_cmap14_char_map_nondef_binary($46,$charcode)|0);
  $48 = ($47|0)==(0);
  if (!($48)) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $$0 = -1;
 return ($$0|0);
}
function _tt_cmap14_variants($cmap,$memory) {
 $cmap = $cmap|0;
 $memory = $memory|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$0$lcssa = 0, $i$02 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($cmap)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 1)|0;
 $5 = (_tt_cmap14_ensure($cmap,$4,$memory)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($cmap)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($1|0)==(0);
 if ($9) {
  $i$0$lcssa = 0;
 } else {
  $10 = ((($3)) + 10|0);
  $i$02 = 0;$p$01 = $10;
  while(1) {
   $11 = HEAP8[$p$01>>0]|0;
   $12 = $11&255;
   $13 = $12 << 16;
   $14 = ((($p$01)) + 1|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $16 << 8;
   $18 = $17 | $13;
   $19 = ((($p$01)) + 2|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = $18 | $21;
   $23 = (($8) + ($i$02<<2)|0);
   HEAP32[$23>>2] = $22;
   $24 = ((($p$01)) + 11|0);
   $25 = (($i$02) + 1)|0;
   $exitcond = ($25|0)==($1|0);
   if ($exitcond) {
    $i$0$lcssa = $1;
    break;
   } else {
    $i$02 = $25;$p$01 = $24;
   }
  }
 }
 $26 = (($8) + ($i$0$lcssa<<2)|0);
 HEAP32[$26>>2] = 0;
 $$0 = $8;
 return ($$0|0);
}
function _tt_cmap14_char_variants($cmap,$memory,$charCode) {
 $cmap = $cmap|0;
 $memory = $memory|0;
 $charCode = $charCode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $count$03 = 0, $p$02 = 0, $q$0$lcssa = 0, $q$01 = 0, $q$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($cmap)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 1)|0;
 $5 = (_tt_cmap14_ensure($cmap,$4,$memory)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($cmap)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($1|0)==(0);
 if ($9) {
  $q$0$lcssa = $8;
 } else {
  $10 = ((($3)) + 10|0);
  $count$03 = $1;$p$02 = $10;$q$01 = $8;
  while(1) {
   $11 = HEAP8[$p$02>>0]|0;
   $12 = $11&255;
   $13 = $12 << 16;
   $14 = ((($p$02)) + 1|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $16 << 8;
   $18 = $17 | $13;
   $19 = ((($p$02)) + 2|0);
   $20 = HEAP8[$19>>0]|0;
   $21 = $20&255;
   $22 = $18 | $21;
   $23 = ((($p$02)) + 3|0);
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $25 << 24;
   $27 = ((($p$02)) + 4|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = $29 << 16;
   $31 = $30 | $26;
   $32 = ((($p$02)) + 5|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = $34 << 8;
   $36 = $31 | $35;
   $37 = ((($p$02)) + 6|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $40 = $36 | $39;
   $41 = ((($p$02)) + 11|0);
   $42 = ((($p$02)) + 7|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $45 = $44 << 24;
   $46 = ((($p$02)) + 8|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = $48 << 16;
   $50 = $49 | $45;
   $51 = ((($p$02)) + 9|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $53 << 8;
   $55 = $50 | $54;
   $56 = ((($p$02)) + 10|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $55 | $58;
   $60 = ($40|0)==(0);
   if ($60) {
    label = 6;
   } else {
    $61 = HEAP32[$2>>2]|0;
    $62 = (($61) + ($40)|0);
    $63 = (_tt_cmap14_char_map_def_binary($62,$charCode)|0);
    $64 = ($63|0)==(0);
    if ($64) {
     label = 6;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 6) {
    label = 0;
    $65 = ($59|0)==(0);
    if ($65) {
     $q$1 = $q$01;
    } else {
     $66 = HEAP32[$2>>2]|0;
     $67 = (($66) + ($59)|0);
     $68 = (_tt_cmap14_char_map_nondef_binary($67,$charCode)|0);
     $69 = ($68|0)==(0);
     if ($69) {
      $q$1 = $q$01;
     } else {
      label = 8;
     }
    }
   }
   if ((label|0) == 8) {
    label = 0;
    HEAP32[$q$01>>2] = $22;
    $70 = ((($q$01)) + 4|0);
    $q$1 = $70;
   }
   $71 = (($count$03) + -1)|0;
   $72 = ($71|0)==(0);
   if ($72) {
    $q$0$lcssa = $q$1;
    break;
   } else {
    $count$03 = $71;$p$02 = $41;$q$01 = $q$1;
   }
  }
 }
 HEAP32[$q$0$lcssa>>2] = 0;
 $73 = HEAP32[$7>>2]|0;
 $$0 = $73;
 return ($$0|0);
}
function _tt_cmap14_variant_chars($cmap,$memory,$variantSelector) {
 $cmap = $cmap|0;
 $memory = $memory|0;
 $variantSelector = $variantSelector|0;
 var $$0 = 0, $$lcssa139 = 0, $$lcssa140 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $dcnt$0$lcssa = 0, $dcnt$0$ph = 0, $dcnt$030 = 0, $dcnt$057 = 0, $di$0$lcssa = 0, $di$0$ph = 0, $di$059 = 0, $di$1 = 0, $di$244 = 0, $dp$0$lcssa = 0, $dp$0$ph = 0, $dp$032 = 0, $dp$058 = 0, $dp$143 = 0, $duni$0$lcssa = 0, $duni$0$ph = 0, $duni$028 = 0, $duni$056 = 0, $exitcond = 0;
 var $exitcond83 = 0, $exitcond84 = 0, $i$0$lcssa = 0, $i$0$ph = 0, $i$055 = 0, $i$153 = 0, $i$2 = 0, $i$3 = 0, $i$4 = 0, $i$447 = 0, $i$450 = 0, $i$545 = 0, $i$642 = 0, $i$740 = 0, $i$8 = 0, $k$054 = 0, $k$146 = 0, $k$241 = 0, $ni$0$ph = 0, $ni$1 = 0;
 var $ni$249 = 0, $nuni$0$ph = 0, $nuni$0$ph153 = 0, $p$0$ph = 0, $p$0$ph151 = 0, $p$148 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 6|0);
 $3 = (_tt_cmap14_find_variant($2,$variantSelector)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = HEAP8[$3>>0]|0;
 $6 = $5&255;
 $7 = $6 << 24;
 $8 = ((($3)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 16;
 $12 = $11 | $7;
 $13 = ((($3)) + 2|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 8;
 $17 = $12 | $16;
 $18 = ((($3)) + 3|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $17 | $20;
 $22 = ((($3)) + 4|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 24;
 $26 = ((($3)) + 5|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 << 16;
 $30 = $29 | $25;
 $31 = ((($3)) + 6|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 << 8;
 $35 = $30 | $34;
 $36 = ((($3)) + 7|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $35 | $38;
 $40 = ($39|0)==(0);
 $41 = $39 | $21;
 $42 = ($41|0)==(0);
 if ($42) {
  $$0 = 0;
  return ($$0|0);
 }
 $43 = ($21|0)==(0);
 if ($43) {
  $44 = (($1) + ($39)|0);
  $45 = (_tt_cmap14_get_nondef_chars($cmap,$44,$memory)|0);
  $$0 = $45;
  return ($$0|0);
 }
 if ($40) {
  $46 = (($1) + ($21)|0);
  $47 = (_tt_cmap14_get_def_chars($cmap,$46,$memory)|0);
  $$0 = $47;
  return ($$0|0);
 }
 $48 = (($1) + ($21)|0);
 $49 = (($1) + ($39)|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 << 24;
 $$sum3 = (($39) + 1)|0;
 $53 = (($1) + ($$sum3)|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 << 16;
 $57 = $56 | $52;
 $$sum4 = (($39) + 2)|0;
 $58 = (($1) + ($$sum4)|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $60 << 8;
 $62 = $57 | $61;
 $$sum5 = (($39) + 3)|0;
 $63 = (($1) + ($$sum5)|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $62 | $65;
 $67 = (_tt_cmap14_def_char_count($48)|0);
 $68 = HEAP8[$48>>0]|0;
 $69 = $68&255;
 $70 = $69 << 24;
 $$sum8 = (($21) + 1)|0;
 $71 = (($1) + ($$sum8)|0);
 $72 = HEAP8[$71>>0]|0;
 $73 = $72&255;
 $74 = $73 << 16;
 $75 = $74 | $70;
 $$sum9 = (($21) + 2)|0;
 $76 = (($1) + ($$sum9)|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&255;
 $79 = $78 << 8;
 $80 = $75 | $79;
 $$sum10 = (($21) + 3)|0;
 $81 = (($1) + ($$sum10)|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = $80 | $83;
 $85 = ($66|0)==(0);
 if ($85) {
  $86 = (_tt_cmap14_get_def_chars($cmap,$48,$memory)|0);
  $$0 = $86;
  return ($$0|0);
 }
 $87 = ($67|0)==(0);
 if ($87) {
  $88 = (_tt_cmap14_get_nondef_chars($cmap,$49,$memory)|0);
  $$0 = $88;
  return ($$0|0);
 }
 $89 = (($67) + 1)|0;
 $90 = (($89) + ($66))|0;
 $91 = (_tt_cmap14_ensure($cmap,$90,$memory)|0);
 $92 = ($91|0)==(0);
 if (!($92)) {
  $$0 = 0;
  return ($$0|0);
 }
 $93 = ((($cmap)) + 32|0);
 $94 = HEAP32[$93>>2]|0;
 $$sum11 = (($21) + 7)|0;
 $95 = (($1) + ($$sum11)|0);
 $$sum12 = (($21) + 4)|0;
 $96 = (($1) + ($$sum12)|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 $99 = $98 << 16;
 $$sum13 = (($21) + 5)|0;
 $100 = (($1) + ($$sum13)|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = $102 << 8;
 $104 = $103 | $99;
 $$sum14 = (($21) + 6)|0;
 $105 = (($1) + ($$sum14)|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = $106&255;
 $108 = $104 | $107;
 $$sum15 = (($21) + 8)|0;
 $109 = (($1) + ($$sum15)|0);
 $110 = HEAP8[$95>>0]|0;
 $111 = $110&255;
 $$sum17 = (($39) + 4)|0;
 $112 = (($1) + ($$sum17)|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113&255;
 $115 = $114 << 16;
 $$sum18 = (($39) + 5)|0;
 $116 = (($1) + ($$sum18)|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = $117&255;
 $119 = $118 << 8;
 $120 = $119 | $115;
 $$sum19 = (($39) + 6)|0;
 $121 = (($1) + ($$sum19)|0);
 $122 = HEAP8[$121>>0]|0;
 $123 = $122&255;
 $124 = $120 | $123;
 $$sum20 = (($39) + 9)|0;
 $125 = (($1) + ($$sum20)|0);
 $dcnt$0$ph = $111;$di$0$ph = 1;$dp$0$ph = $109;$duni$0$ph = $108;$i$0$ph = 0;$ni$0$ph = 1;$nuni$0$ph = $124;$p$0$ph = $125;
 L26: while(1) {
  $126 = (($dcnt$0$ph) + ($duni$0$ph))|0;
  $127 = ($nuni$0$ph>>>0)>($126>>>0);
  if ($127) {
   $dcnt$057 = $dcnt$0$ph;$di$059 = $di$0$ph;$dp$058 = $dp$0$ph;$duni$056 = $duni$0$ph;$i$055 = $i$0$ph;
   while(1) {
    $i$153 = $i$055;$k$054 = 0;
    while(1) {
     $128 = (($k$054) + ($duni$056))|0;
     $129 = (($i$153) + 1)|0;
     $130 = (($94) + ($i$153<<2)|0);
     HEAP32[$130>>2] = $128;
     $131 = (($k$054) + 1)|0;
     $132 = ($131>>>0)>($dcnt$057>>>0);
     if ($132) {
      $$lcssa140 = $129;
      break;
     } else {
      $i$153 = $129;$k$054 = $131;
     }
    }
    $133 = (($di$059) + 1)|0;
    $134 = ($133>>>0)>($84>>>0);
    if ($134) {
     $dcnt$030 = $dcnt$057;$di$1 = $133;$dp$032 = $dp$058;$duni$028 = $duni$056;$i$3 = $$lcssa140;$ni$1 = $ni$0$ph;$nuni$0$ph153 = $nuni$0$ph;$p$0$ph151 = $p$0$ph;
     break L26;
    }
    $135 = ((($dp$058)) + 3|0);
    $136 = HEAP8[$dp$058>>0]|0;
    $137 = $136&255;
    $138 = $137 << 16;
    $139 = ((($dp$058)) + 1|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = $140&255;
    $142 = $141 << 8;
    $143 = $142 | $138;
    $144 = ((($dp$058)) + 2|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $145&255;
    $147 = $143 | $146;
    $148 = ((($dp$058)) + 4|0);
    $149 = HEAP8[$135>>0]|0;
    $150 = $149&255;
    $151 = (($150) + ($147))|0;
    $152 = ($nuni$0$ph>>>0)>($151>>>0);
    if ($152) {
     $dcnt$057 = $150;$di$059 = $133;$dp$058 = $148;$duni$056 = $147;$i$055 = $$lcssa140;
    } else {
     $dcnt$0$lcssa = $150;$di$0$lcssa = $133;$dp$0$lcssa = $148;$duni$0$lcssa = $147;$i$0$lcssa = $$lcssa140;
     break;
    }
   }
  } else {
   $dcnt$0$lcssa = $dcnt$0$ph;$di$0$lcssa = $di$0$ph;$dp$0$lcssa = $dp$0$ph;$duni$0$lcssa = $duni$0$ph;$i$0$lcssa = $i$0$ph;
  }
  $153 = ($nuni$0$ph>>>0)<($duni$0$lcssa>>>0);
  if ($153) {
   $154 = (($i$0$lcssa) + 1)|0;
   $155 = (($94) + ($i$0$lcssa<<2)|0);
   HEAP32[$155>>2] = $nuni$0$ph;
   $i$2 = $154;
  } else {
   $i$2 = $i$0$lcssa;
  }
  $156 = (($ni$0$ph) + 1)|0;
  $157 = ($156>>>0)>($66>>>0);
  if ($157) {
   $dcnt$030 = $dcnt$0$lcssa;$di$1 = $di$0$lcssa;$dp$032 = $dp$0$lcssa;$duni$028 = $duni$0$lcssa;$i$3 = $i$2;$ni$1 = $156;$nuni$0$ph153 = $nuni$0$ph;$p$0$ph151 = $p$0$ph;
   break;
  }
  $158 = HEAP8[$p$0$ph>>0]|0;
  $159 = $158&255;
  $160 = $159 << 16;
  $161 = ((($p$0$ph)) + 1|0);
  $162 = HEAP8[$161>>0]|0;
  $163 = $162&255;
  $164 = $163 << 8;
  $165 = $164 | $160;
  $166 = ((($p$0$ph)) + 2|0);
  $167 = HEAP8[$166>>0]|0;
  $168 = $167&255;
  $169 = $165 | $168;
  $170 = ((($p$0$ph)) + 5|0);
  $dcnt$0$ph = $dcnt$0$lcssa;$di$0$ph = $di$0$lcssa;$dp$0$ph = $dp$0$lcssa;$duni$0$ph = $duni$0$lcssa;$i$0$ph = $i$2;$ni$0$ph = $156;$nuni$0$ph = $169;$p$0$ph = $170;
 }
 $171 = ($ni$1>>>0)>($66>>>0);
 if ($171) {
  $191 = ($di$1>>>0)>($84>>>0);
  if ($191) {
   $i$8 = $i$3;
  } else {
   $i$545 = $i$3;$k$146 = 0;
   while(1) {
    $193 = (($k$146) + ($duni$028))|0;
    $194 = (($i$545) + 1)|0;
    $195 = (($94) + ($i$545<<2)|0);
    HEAP32[$195>>2] = $193;
    $196 = (($k$146) + 1)|0;
    $197 = ($196>>>0)>($dcnt$030>>>0);
    if ($197) {
     $$lcssa139 = $194;
     break;
    } else {
     $i$545 = $194;$k$146 = $196;
    }
   }
   $192 = ($di$1>>>0)<($84>>>0);
   if ($192) {
    $di$244 = $di$1;$dp$143 = $dp$032;$i$642 = $$lcssa139;
    while(1) {
     $198 = ((($dp$143)) + 3|0);
     $199 = HEAP8[$dp$143>>0]|0;
     $200 = $199&255;
     $201 = $200 << 16;
     $202 = ((($dp$143)) + 1|0);
     $203 = HEAP8[$202>>0]|0;
     $204 = $203&255;
     $205 = $204 << 8;
     $206 = $205 | $201;
     $207 = ((($dp$143)) + 2|0);
     $208 = HEAP8[$207>>0]|0;
     $209 = $208&255;
     $210 = $206 | $209;
     $211 = HEAP8[$198>>0]|0;
     $212 = $211&255;
     $i$740 = $i$642;$k$241 = 0;
     while(1) {
      $213 = (($k$241) + ($210))|0;
      $214 = (($i$740) + 1)|0;
      $215 = (($94) + ($i$740<<2)|0);
      HEAP32[$215>>2] = $213;
      $216 = (($k$241) + 1)|0;
      $exitcond = ($k$241|0)==($212|0);
      if ($exitcond) {
       break;
      } else {
       $i$740 = $214;$k$241 = $216;
      }
     }
     $217 = ((($dp$143)) + 4|0);
     $218 = (($i$642) + 1)|0;
     $219 = (($218) + ($212))|0;
     $220 = (($di$244) + 1)|0;
     $exitcond83 = ($220|0)==($84|0);
     if ($exitcond83) {
      $i$8 = $219;
      break;
     } else {
      $di$244 = $220;$dp$143 = $217;$i$642 = $219;
     }
    }
   } else {
    $i$8 = $$lcssa139;
   }
  }
 } else {
  $172 = (($94) + ($i$3<<2)|0);
  HEAP32[$172>>2] = $nuni$0$ph153;
  $i$447 = (($i$3) + 1)|0;
  $173 = ($ni$1>>>0)<($66>>>0);
  if ($173) {
   $174 = (($i$3) + ($66))|0;
   $175 = (($174) + 1)|0;
   $i$450 = $i$447;$ni$249 = $ni$1;$p$148 = $p$0$ph151;
   while(1) {
    $176 = HEAP8[$p$148>>0]|0;
    $177 = $176&255;
    $178 = $177 << 16;
    $179 = ((($p$148)) + 1|0);
    $180 = HEAP8[$179>>0]|0;
    $181 = $180&255;
    $182 = $181 << 8;
    $183 = $182 | $178;
    $184 = ((($p$148)) + 2|0);
    $185 = HEAP8[$184>>0]|0;
    $186 = $185&255;
    $187 = $183 | $186;
    $188 = (($94) + ($i$450<<2)|0);
    HEAP32[$188>>2] = $187;
    $189 = ((($p$148)) + 5|0);
    $190 = (($ni$249) + 1)|0;
    $i$4 = (($i$450) + 1)|0;
    $exitcond84 = ($190|0)==($66|0);
    if ($exitcond84) {
     break;
    } else {
     $i$450 = $i$4;$ni$249 = $190;$p$148 = $189;
    }
   }
   $221 = (($175) - ($ni$1))|0;
   $i$8 = $221;
  } else {
   $i$8 = $i$447;
  }
 }
 $222 = (($94) + ($i$8<<2)|0);
 HEAP32[$222>>2] = 0;
 $$0 = $94;
 return ($$0|0);
}
function _tt_cmap14_validate($table,$valid) {
 $table = $table|0;
 $valid = $valid|0;
 var $$sum = 0, $$sum10 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $defp$016 = 0, $exitcond = 0, $exitcond25 = 0, $exitcond26 = 0, $i$015 = 0, $i1$018 = 0;
 var $lastBase$014 = 0, $lastUni$019 = 0, $lastVarSel$021 = 0, $n$022 = 0, $ndp$017 = 0, $or$cond = 0, $p$023 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($table)) + 2|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 24;
 $4 = ((($table)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 16;
 $8 = $7 | $3;
 $9 = ((($table)) + 4|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 8;
 $13 = $8 | $12;
 $14 = ((($table)) + 5|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $13 | $16;
 $18 = ((($table)) + 10|0);
 $19 = ((($table)) + 6|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 << 24;
 $23 = ((($table)) + 7|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 16;
 $27 = $26 | $22;
 $28 = ((($table)) + 8|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 << 8;
 $32 = $27 | $31;
 $33 = ((($table)) + 9|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = $32 | $35;
 $37 = ((($valid)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38;
 $40 = $table;
 $41 = (($39) - ($40))|0;
 $42 = ($17>>>0)>($41>>>0);
 if ($42) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $43 = ($36*11)|0;
 $44 = (($43) + 10)|0;
 $45 = ($17>>>0)<($44>>>0);
 if ($45) {
  _ft_validator_error($valid,8);
  // unreachable;
 }
 $46 = ($36|0)==(0);
 if ($46) {
  return 0;
 }
 $47 = ((($valid)) + 8|0);
 $48 = ((($valid)) + 172|0);
 $lastVarSel$021 = 1;$n$022 = 0;$p$023 = $18;
 L10: while(1) {
  $49 = HEAP8[$p$023>>0]|0;
  $50 = $49&255;
  $51 = $50 << 16;
  $52 = ((($p$023)) + 1|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $54 << 8;
  $56 = $55 | $51;
  $57 = ((($p$023)) + 2|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = $56 | $59;
  $61 = ((($p$023)) + 3|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = $63 << 24;
  $65 = ((($p$023)) + 4|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = $67 << 16;
  $69 = $68 | $64;
  $70 = ((($p$023)) + 5|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = $72 << 8;
  $74 = $69 | $73;
  $75 = ((($p$023)) + 6|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = $74 | $77;
  $79 = ((($p$023)) + 11|0);
  $80 = ((($p$023)) + 7|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = $82 << 24;
  $84 = ((($p$023)) + 8|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = $86 << 16;
  $88 = $87 | $83;
  $89 = ((($p$023)) + 9|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = $91 << 8;
  $93 = $88 | $92;
  $94 = ((($p$023)) + 10|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = $93 | $96;
  $98 = ($78>>>0)<($17>>>0);
  $99 = ($97>>>0)<($17>>>0);
  $or$cond = $98 & $99;
  if (!($or$cond)) {
   label = 7;
   break;
  }
  $100 = ($60>>>0)<($lastVarSel$021>>>0);
  if ($100) {
   label = 9;
   break;
  }
  $101 = (($60) + 1)|0;
  $102 = ($78|0)==(0);
  if (!($102)) {
   $$sum5 = (($78) + 4)|0;
   $103 = (($table) + ($$sum5)|0);
   $104 = (($table) + ($78)|0);
   $105 = HEAP8[$104>>0]|0;
   $106 = $105&255;
   $107 = $106 << 24;
   $$sum7 = (($78) + 1)|0;
   $108 = (($table) + ($$sum7)|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = $110 << 16;
   $112 = $111 | $107;
   $$sum8 = (($78) + 2)|0;
   $113 = (($table) + ($$sum8)|0);
   $114 = HEAP8[$113>>0]|0;
   $115 = $114&255;
   $116 = $115 << 8;
   $117 = $112 | $116;
   $$sum9 = (($78) + 3)|0;
   $118 = (($table) + ($$sum9)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = $117 | $120;
   $122 = $121 << 2;
   $$sum10 = (($122) + ($$sum5))|0;
   $123 = (($table) + ($$sum10)|0);
   $124 = HEAP32[$37>>2]|0;
   $125 = ($123>>>0)>($124>>>0);
   if ($125) {
    label = 12;
    break;
   }
   $126 = ($121|0)==(0);
   if (!($126)) {
    $defp$016 = $103;$i$015 = 0;$lastBase$014 = 0;
    while(1) {
     $127 = ((($defp$016)) + 3|0);
     $128 = HEAP8[$defp$016>>0]|0;
     $129 = $128&255;
     $130 = $129 << 16;
     $131 = ((($defp$016)) + 1|0);
     $132 = HEAP8[$131>>0]|0;
     $133 = $132&255;
     $134 = $133 << 8;
     $135 = $134 | $130;
     $136 = ((($defp$016)) + 2|0);
     $137 = HEAP8[$136>>0]|0;
     $138 = $137&255;
     $139 = $135 | $138;
     $140 = ((($defp$016)) + 4|0);
     $141 = HEAP8[$127>>0]|0;
     $142 = $141&255;
     $143 = (($139) + ($142))|0;
     $144 = ($143>>>0)>(1114111);
     if ($144) {
      label = 15;
      break L10;
     }
     $145 = ($139>>>0)<($lastBase$014>>>0);
     if ($145) {
      label = 17;
      break L10;
     }
     $146 = (($143) + 1)|0;
     $147 = (($i$015) + 1)|0;
     $exitcond = ($147|0)==($121|0);
     if ($exitcond) {
      break;
     } else {
      $defp$016 = $140;$i$015 = $147;$lastBase$014 = $146;
     }
    }
   }
  }
  $148 = ($97|0)==(0);
  if (!($148)) {
   $$sum = (($97) + 4)|0;
   $149 = (($table) + ($$sum)|0);
   $150 = (($table) + ($97)|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = $151&255;
   $153 = $152 << 24;
   $$sum2 = (($97) + 1)|0;
   $154 = (($table) + ($$sum2)|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = $155&255;
   $157 = $156 << 16;
   $158 = $157 | $153;
   $$sum3 = (($97) + 2)|0;
   $159 = (($table) + ($$sum3)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = $161 << 8;
   $163 = $158 | $162;
   $$sum4 = (($97) + 3)|0;
   $164 = (($table) + ($$sum4)|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = $163 | $166;
   $168 = $167 << 2;
   $169 = HEAP32[$37>>2]|0;
   $170 = $169;
   $171 = $149;
   $172 = (($170) - ($171))|0;
   $173 = ($168>>>0)>($172>>>0);
   if ($173) {
    label = 21;
    break;
   }
   $174 = ($167|0)==(0);
   if (!($174)) {
    $i1$018 = 0;$lastUni$019 = 0;$ndp$017 = $149;
    while(1) {
     $175 = HEAP8[$ndp$017>>0]|0;
     $176 = $175&255;
     $177 = $176 << 16;
     $178 = ((($ndp$017)) + 1|0);
     $179 = HEAP8[$178>>0]|0;
     $180 = $179&255;
     $181 = $180 << 8;
     $182 = $181 | $177;
     $183 = ((($ndp$017)) + 2|0);
     $184 = HEAP8[$183>>0]|0;
     $185 = $184&255;
     $186 = $182 | $185;
     $187 = ((($ndp$017)) + 5|0);
     $188 = ((($ndp$017)) + 3|0);
     $189 = HEAP8[$188>>0]|0;
     $190 = $189&255;
     $191 = $190 << 8;
     $192 = ((($ndp$017)) + 4|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = $191 | $194;
     $196 = ($186>>>0)>(1114111);
     if ($196) {
      label = 24;
      break L10;
     }
     $197 = ($186>>>0)<($lastUni$019>>>0);
     if ($197) {
      label = 26;
      break L10;
     }
     $198 = (($186) + 1)|0;
     $199 = HEAP32[$47>>2]|0;
     $200 = ($199|0)==(0);
     if (!($200)) {
      $201 = HEAP32[$48>>2]|0;
      $202 = ($195>>>0)<($201>>>0);
      if (!($202)) {
       label = 29;
       break L10;
      }
     }
     $203 = (($i1$018) + 1)|0;
     $exitcond25 = ($203|0)==($167|0);
     if ($exitcond25) {
      break;
     } else {
      $i1$018 = $203;$lastUni$019 = $198;$ndp$017 = $187;
     }
    }
   }
  }
  $204 = (($n$022) + 1)|0;
  $exitcond26 = ($204|0)==($36|0);
  if ($exitcond26) {
   label = 32;
   break;
  } else {
   $lastVarSel$021 = $101;$n$022 = $204;$p$023 = $79;
  }
 }
 switch (label|0) {
  case 7: {
   _ft_validator_error($valid,8);
   // unreachable;
   break;
  }
  case 9: {
   _ft_validator_error($valid,8);
   // unreachable;
   break;
  }
  case 12: {
   _ft_validator_error($valid,8);
   // unreachable;
   break;
  }
  case 15: {
   _ft_validator_error($valid,8);
   // unreachable;
   break;
  }
  case 17: {
   _ft_validator_error($valid,8);
   // unreachable;
   break;
  }
  case 21: {
   _ft_validator_error($valid,8);
   // unreachable;
   break;
  }
  case 24: {
   _ft_validator_error($valid,8);
   // unreachable;
   break;
  }
  case 26: {
   _ft_validator_error($valid,8);
   // unreachable;
   break;
  }
  case 29: {
   _ft_validator_error($valid,16);
   // unreachable;
   break;
  }
  case 32: {
   return 0;
   break;
  }
 }
 return (0)|0;
}
function _tt_cmap14_get_info($cmap,$cmap_info) {
 $cmap = $cmap|0;
 $cmap_info = $cmap_info|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap_info)) + 4|0);
 HEAP32[$0>>2] = 14;
 HEAP32[$cmap_info>>2] = -1;
 return 0;
}
function _tt_cmap14_find_variant($base,$variantCode) {
 $base = $base|0;
 $variantCode = $variantCode|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa50 = 0, $$sum1$le = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max$0$ph11 = 0, $min$0$ph12 = 0, $min$06 = 0, $min$06$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$base>>0]|0;
 $1 = $0&255;
 $2 = $1 << 24;
 $3 = ((($base)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 16;
 $7 = $6 | $2;
 $8 = ((($base)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 8;
 $12 = $7 | $11;
 $13 = ((($base)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $max$0$ph11 = $16;$min$0$ph12 = 0;
 }
 L3: while(1) {
  $min$06 = $min$0$ph12;
  while(1) {
   $19 = (($min$06) + ($max$0$ph11))|0;
   $20 = $19 >>> 1;
   $21 = ($20*11)|0;
   $$sum2 = (($21) + 4)|0;
   $22 = (($base) + ($$sum2)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $24 << 16;
   $$sum3 = (($21) + 5)|0;
   $26 = (($base) + ($$sum3)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 << 8;
   $30 = $29 | $25;
   $$sum4 = (($21) + 6)|0;
   $31 = (($base) + ($$sum4)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $30 | $33;
   $35 = ($34>>>0)>($variantCode>>>0);
   if ($35) {
    $$lcssa = $20;$min$06$lcssa = $min$06;
    break;
   }
   $36 = ($34>>>0)<($variantCode>>>0);
   if (!($36)) {
    $$lcssa50 = $21;
    label = 7;
    break L3;
   }
   $37 = (($20) + 1)|0;
   $38 = ($37>>>0)<($max$0$ph11>>>0);
   if ($38) {
    $min$06 = $37;
   } else {
    $$0 = 0;
    label = 8;
    break L3;
   }
  }
  $18 = ($min$06$lcssa>>>0)<($$lcssa>>>0);
  if ($18) {
   $max$0$ph11 = $$lcssa;$min$0$ph12 = $min$06$lcssa;
  } else {
   $$0 = 0;
   label = 8;
   break;
  }
 }
 if ((label|0) == 7) {
  $$sum1$le = (($$lcssa50) + 7)|0;
  $39 = (($base) + ($$sum1$le)|0);
  $$0 = $39;
  return ($$0|0);
 }
 else if ((label|0) == 8) {
  return ($$0|0);
 }
 return (0)|0;
}
function _tt_cmap14_get_nondef_chars($cmap,$p,$memory) {
 $cmap = $cmap|0;
 $p = $p|0;
 $memory = $memory|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $i$0$lcssa = 0, $i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = $0&255;
 $2 = $1 << 24;
 $3 = ((($p)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 16;
 $7 = $6 | $2;
 $8 = ((($p)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 8;
 $12 = $7 | $11;
 $13 = ((($p)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = (($16) + 1)|0;
 $18 = (_tt_cmap14_ensure($cmap,$17,$memory)|0);
 $19 = ($18|0)==(0);
 if (!($19)) {
  $$0 = 0;
  return ($$0|0);
 }
 $20 = ((($cmap)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($16|0)==(0);
 if ($22) {
  $i$0$lcssa = 0;
 } else {
  $23 = ((($p)) + 4|0);
  $$012 = $23;$i$03 = 0;
  while(1) {
   $24 = HEAP8[$$012>>0]|0;
   $25 = $24&255;
   $26 = $25 << 16;
   $27 = ((($$012)) + 1|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = $29 << 8;
   $31 = $30 | $26;
   $32 = ((($$012)) + 2|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = $31 | $34;
   $36 = (($21) + ($i$03<<2)|0);
   HEAP32[$36>>2] = $35;
   $37 = ((($$012)) + 5|0);
   $38 = (($i$03) + 1)|0;
   $exitcond = ($38|0)==($16|0);
   if ($exitcond) {
    $i$0$lcssa = $16;
    break;
   } else {
    $$012 = $37;$i$03 = $38;
   }
  }
 }
 $39 = (($21) + ($i$0$lcssa<<2)|0);
 HEAP32[$39>>2] = 0;
 $$0 = $21;
 return ($$0|0);
}
function _tt_cmap14_get_def_chars($cmap,$p,$memory) {
 $cmap = $cmap|0;
 $p = $p|0;
 $memory = $memory|0;
 var $$0 = 0, $$016 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $numRanges$04 = 0, $p$pn = 0, $q$0$lcssa = 0, $q$05 = 0, $q$1 = 0, $scevgep$sum = 0, $scevgep7 = 0, $uni$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_tt_cmap14_def_char_count($p)|0);
 $1 = HEAP8[$p>>0]|0;
 $2 = ((($p)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($p)) + 2|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ((($p)) + 3|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($0) + 1)|0;
 $9 = (_tt_cmap14_ensure($cmap,$8,$memory)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = $1&255;
 $12 = $11 << 24;
 $13 = $3&255;
 $14 = $13 << 16;
 $15 = $14 | $12;
 $16 = $5&255;
 $17 = $16 << 8;
 $18 = $15 | $17;
 $19 = $7&255;
 $20 = $18 | $19;
 $21 = ((($cmap)) + 32|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($20|0)==(0);
 if ($23) {
  $q$0$lcssa = $22;
 } else {
  $numRanges$04 = $20;$p$pn = $p;$q$05 = $22;
  while(1) {
   $$016 = ((($p$pn)) + 4|0);
   $24 = ((($p$pn)) + 7|0);
   $25 = HEAP8[$$016>>0]|0;
   $26 = $25&255;
   $27 = $26 << 16;
   $28 = ((($p$pn)) + 5|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = $30 << 8;
   $32 = $31 | $27;
   $33 = ((($p$pn)) + 6|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $32 | $35;
   $37 = HEAP8[$24>>0]|0;
   $38 = $37&255;
   $39 = (($38) + 1)|0;
   $40 = $37&255;
   $cnt$0 = $39;$q$1 = $q$05;$uni$0 = $36;
   while(1) {
    HEAP32[$q$1>>2] = $uni$0;
    $41 = (($uni$0) + 1)|0;
    $42 = ((($q$1)) + 4|0);
    $43 = (($cnt$0) + -1)|0;
    $44 = ($43|0)==(0);
    if ($44) {
     break;
    } else {
     $cnt$0 = $43;$q$1 = $42;$uni$0 = $41;
    }
   }
   $scevgep$sum = (($40) + 1)|0;
   $scevgep7 = (($q$05) + ($scevgep$sum<<2)|0);
   $45 = (($numRanges$04) + -1)|0;
   $46 = ($45|0)==(0);
   if ($46) {
    $q$0$lcssa = $scevgep7;
    break;
   } else {
    $numRanges$04 = $45;$p$pn = $$016;$q$05 = $scevgep7;
   }
  }
 }
 HEAP32[$q$0$lcssa>>2] = 0;
 $47 = HEAP32[$21>>2]|0;
 $$0 = $47;
 return ($$0|0);
}
function _tt_cmap14_def_char_count($p) {
 $p = $p|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $numRanges$02 = 0, $tot$0$lcssa = 0, $tot$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$p>>0]|0;
 $1 = $0&255;
 $2 = $1 << 24;
 $3 = ((($p)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 16;
 $7 = $6 | $2;
 $8 = ((($p)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 8;
 $12 = $7 | $11;
 $13 = ((($p)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = ($16|0)==(0);
 if ($17) {
  $tot$0$lcssa = 0;
  return ($tot$0$lcssa|0);
 }
 $18 = ((($p)) + 7|0);
 $$01 = $18;$numRanges$02 = $16;$tot$03 = 0;
 while(1) {
  $19 = HEAP8[$$01>>0]|0;
  $20 = $19&255;
  $21 = (($tot$03) + 1)|0;
  $22 = (($21) + ($20))|0;
  $23 = ((($$01)) + 4|0);
  $24 = (($numRanges$02) + -1)|0;
  $25 = ($24|0)==(0);
  if ($25) {
   $tot$0$lcssa = $22;
   break;
  } else {
   $$01 = $23;$numRanges$02 = $24;$tot$03 = $22;
  }
 }
 return ($tot$0$lcssa|0);
}
function _tt_cmap14_ensure($cmap,$num_results,$memory) {
 $cmap = $cmap|0;
 $num_results = $num_results|0;
 $memory = $memory|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($cmap)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)<($num_results>>>0);
 do {
  if ($3) {
   $4 = ((($cmap)) + 36|0);
   HEAP32[$4>>2] = $memory;
   $5 = ((($cmap)) + 32|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (_ft_mem_realloc($memory,4,$1,$num_results,$6,$error)|0);
   HEAP32[$5>>2] = $7;
   $8 = HEAP32[$error>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$0>>2] = $num_results;
    break;
   } else {
    $$0 = $8;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $10 = HEAP32[$error>>2]|0;
 $$0 = $10;
 STACKTOP = sp;return ($$0|0);
}
function _tt_cmap14_char_map_def_binary($base,$char_code) {
 $base = $base|0;
 $char_code = $char_code|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa25 = 0, $$lcssa26 = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max$0 = 0, $max$0$lcssa24 = 0, $max$0$ph = 0, $min$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$base>>0]|0;
 $1 = $0&255;
 $2 = $1 << 24;
 $3 = ((($base)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 16;
 $7 = $6 | $2;
 $8 = ((($base)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 8;
 $12 = $7 | $11;
 $13 = ((($base)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $max$0$ph = $16;$min$0$ph = 0;
 L1: while(1) {
  $max$0 = $max$0$ph;
  while(1) {
   $17 = ($min$0$ph>>>0)<($max$0>>>0);
   if (!($17)) {
    $$0 = 0;
    label = 6;
    break L1;
   }
   $18 = (($max$0) + ($min$0$ph))|0;
   $19 = $18 >>> 1;
   $20 = $19 << 2;
   $$sum2 = (($20) + 4)|0;
   $21 = (($base) + ($$sum2)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $23 << 16;
   $$sum3 = (($20) + 5)|0;
   $25 = (($base) + ($$sum3)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = $27 << 8;
   $29 = $28 | $24;
   $$sum4 = (($20) + 6)|0;
   $30 = (($base) + ($$sum4)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $33 = $29 | $32;
   $34 = ($33>>>0)>($char_code>>>0);
   if ($34) {
    $max$0 = $19;
   } else {
    $$lcssa = $19;$$lcssa25 = $20;$$lcssa26 = $33;$max$0$lcssa24 = $max$0;
    break;
   }
  }
  $$sum1 = (($$lcssa25) + 7)|0;
  $35 = (($base) + ($$sum1)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (($37) + ($$lcssa26))|0;
  $39 = ($38>>>0)<($char_code>>>0);
  $40 = (($$lcssa) + 1)|0;
  if ($39) {
   $max$0$ph = $max$0$lcssa24;$min$0$ph = $40;
  } else {
   $$0 = 1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function _tt_cmap14_char_map_nondef_binary($base,$char_code) {
 $base = $base|0;
 $char_code = $char_code|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa53 = 0, $$sum1$le = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max$0$ph15 = 0, $min$0$ph16 = 0, $min$013 = 0, $min$013$lcssa = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$base>>0]|0;
 $1 = $0&255;
 $2 = $1 << 24;
 $3 = ((($base)) + 1|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 << 16;
 $7 = $6 | $2;
 $8 = ((($base)) + 2|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 8;
 $12 = $7 | $11;
 $13 = ((($base)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $12 | $15;
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $max$0$ph15 = $16;$min$0$ph16 = 0;
 }
 L3: while(1) {
  $min$013 = $min$0$ph16;
  while(1) {
   $19 = (($min$013) + ($max$0$ph15))|0;
   $20 = $19 >>> 1;
   $21 = ($20*5)|0;
   $$sum2 = (($21) + 4)|0;
   $22 = (($base) + ($$sum2)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $24 << 16;
   $$sum3 = (($21) + 5)|0;
   $26 = (($base) + ($$sum3)|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 << 8;
   $30 = $29 | $25;
   $$sum4 = (($21) + 6)|0;
   $31 = (($base) + ($$sum4)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $34 = $30 | $33;
   $35 = ($34>>>0)>($char_code>>>0);
   if ($35) {
    $$lcssa = $20;$min$013$lcssa = $min$013;
    break;
   }
   $36 = ($34>>>0)<($char_code>>>0);
   if (!($36)) {
    $$lcssa53 = $21;
    label = 7;
    break L3;
   }
   $37 = (($20) + 1)|0;
   $38 = ($37>>>0)<($max$0$ph15>>>0);
   if ($38) {
    $min$013 = $37;
   } else {
    $$0 = 0;
    label = 8;
    break L3;
   }
  }
  $18 = ($min$013$lcssa>>>0)<($$lcssa>>>0);
  if ($18) {
   $max$0$ph15 = $$lcssa;$min$0$ph16 = $min$013$lcssa;
  } else {
   $$0 = 0;
   label = 8;
   break;
  }
 }
 if ((label|0) == 7) {
  $$sum1$le = (($$lcssa53) + 7)|0;
  $39 = (($base) + ($$sum1$le)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $41 << 8;
  $$sum5 = (($$lcssa53) + 8)|0;
  $43 = (($base) + ($$sum5)|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $42 | $45;
  $$0 = $46;
  return ($$0|0);
 }
 else if ((label|0) == 8) {
  return ($$0|0);
 }
 return (0)|0;
}
function _tt_cmap13_next($cmap) {
 $cmap = $cmap|0;
 var $$char_code$0 = 0, $$char_code$0$lcssa = 0, $$lcssa = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $char_code$016 = 0, $n$015 = 0, $n$015$lcssa = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(-1);
 L1: do {
  if (!($2)) {
   $3 = ((($cmap)) + 36|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($cmap)) + 40|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   if ($7) {
    $8 = (($1) + 1)|0;
    $9 = ((($cmap)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $char_code$016 = $8;$n$015 = $4;
    while(1) {
     $11 = ($n$015*12)|0;
     $$sum2 = (($11) + 16)|0;
     $12 = (($10) + ($$sum2)|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = $13&255;
     $15 = $14 << 24;
     $$sum3 = (($11) + 17)|0;
     $16 = (($10) + ($$sum3)|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = $18 << 16;
     $20 = $19 | $15;
     $$sum4 = (($11) + 18)|0;
     $21 = (($10) + ($$sum4)|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = $22&255;
     $24 = $23 << 8;
     $25 = $20 | $24;
     $$sum5 = (($11) + 19)|0;
     $26 = (($10) + ($$sum5)|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = $25 | $28;
     $$sum6 = (($11) + 24)|0;
     $30 = (($10) + ($$sum6)|0);
     $$sum7 = (($11) + 20)|0;
     $31 = (($10) + ($$sum7)|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $33 << 24;
     $$sum8 = (($11) + 21)|0;
     $35 = (($10) + ($$sum8)|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = $37 << 16;
     $39 = $38 | $34;
     $$sum9 = (($11) + 22)|0;
     $40 = (($10) + ($$sum9)|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41&255;
     $43 = $42 << 8;
     $44 = $39 | $43;
     $$sum10 = (($11) + 23)|0;
     $45 = (($10) + ($$sum10)|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = $44 | $47;
     $49 = HEAP8[$30>>0]|0;
     $50 = $49&255;
     $51 = $50 << 24;
     $$sum11 = (($11) + 25)|0;
     $52 = (($10) + ($$sum11)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53&255;
     $55 = $54 << 16;
     $56 = $55 | $51;
     $$sum12 = (($11) + 26)|0;
     $57 = (($10) + ($$sum12)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = $59 << 8;
     $61 = $56 | $60;
     $$sum13 = (($11) + 27)|0;
     $62 = (($10) + ($$sum13)|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = $63&255;
     $65 = $61 | $64;
     $66 = ($char_code$016>>>0)<($29>>>0);
     $$char_code$0 = $66 ? $29 : $char_code$016;
     $67 = ($$char_code$0>>>0)>($48>>>0);
     $68 = ($65|0)==(0);
     $or$cond = $67 | $68;
     if (!($or$cond)) {
      $$char_code$0$lcssa = $$char_code$0;$$lcssa = $65;$n$015$lcssa = $n$015;
      break;
     }
     $70 = (($n$015) + 1)|0;
     $71 = HEAP32[$5>>2]|0;
     $72 = ($70>>>0)<($71>>>0);
     if ($72) {
      $char_code$016 = $$char_code$0;$n$015 = $70;
     } else {
      break L1;
     }
    }
    HEAP32[$0>>2] = $$char_code$0$lcssa;
    $69 = ((($cmap)) + 32|0);
    HEAP32[$69>>2] = $$lcssa;
    HEAP32[$3>>2] = $n$015$lcssa;
    return;
   }
  }
 } while(0);
 $73 = ((($cmap)) + 24|0);
 HEAP8[$73>>0] = 0;
 return;
}
function _tt_cmap13_char_map_binary($cmap,$pchar_code,$next) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 $next = $next|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lcssa86 = 0, $$lcssa89 = 0, $$lcssa91 = 0, $$lcssa92 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6$le = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $gindex$0 = 0, $gindex$115 = 0, $max$0$ph37 = 0, $mid$2 = 0, $min$0$ph38 = 0, $min$031 = 0, $min$031$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 24;
 $6 = ((($1)) + 13|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 16;
 $10 = $9 | $5;
 $11 = ((($1)) + 14|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 8;
 $15 = $10 | $14;
 $16 = ((($1)) + 15|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $15 | $18;
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 0;
  return ($$0|0);
 }
 $21 = HEAP32[$pchar_code>>2]|0;
 $22 = ($next<<24>>24)!=(0);
 $23 = $22&1;
 $$ = (($21) + ($23))|0;
 $24 = HEAP32[$0>>2]|0;
 $max$0$ph37 = $19;$min$0$ph38 = 0;
 L4: while(1) {
  $min$031 = $min$0$ph38;
  while(1) {
   $26 = (($min$031) + ($max$0$ph37))|0;
   $27 = $26 >>> 1;
   $28 = ($27*12)|0;
   $$sum2 = (($28) + 16)|0;
   $29 = (($24) + ($$sum2)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = $31 << 24;
   $$sum3 = (($28) + 17)|0;
   $33 = (($24) + ($$sum3)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $35 << 16;
   $37 = $36 | $32;
   $$sum4 = (($28) + 18)|0;
   $38 = (($24) + ($$sum4)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $40 << 8;
   $42 = $37 | $41;
   $$sum5 = (($28) + 19)|0;
   $43 = (($24) + ($$sum5)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = $42 | $45;
   $$sum7 = (($28) + 20)|0;
   $47 = (($24) + ($$sum7)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = $49 << 24;
   $$sum8 = (($28) + 21)|0;
   $51 = (($24) + ($$sum8)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $53 << 16;
   $55 = $54 | $50;
   $$sum9 = (($28) + 22)|0;
   $56 = (($24) + ($$sum9)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 << 8;
   $60 = $55 | $59;
   $$sum10 = (($28) + 23)|0;
   $61 = (($24) + ($$sum10)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $60 | $63;
   $65 = ($$>>>0)<($46>>>0);
   if ($65) {
    $$lcssa = $27;$$lcssa91 = $64;$min$031$lcssa = $min$031;
    break;
   }
   $66 = ($$>>>0)>($64>>>0);
   if (!($66)) {
    $$lcssa86 = $27;$$lcssa89 = $28;$$lcssa92 = $64;
    label = 8;
    break L4;
   }
   $67 = (($27) + 1)|0;
   $68 = ($67>>>0)<($max$0$ph37>>>0);
   if ($68) {
    $min$031 = $67;
   } else {
    $88 = $64;$90 = $27;$gindex$0 = 0;
    break L4;
   }
  }
  $25 = ($min$031$lcssa>>>0)<($$lcssa>>>0);
  if ($25) {
   $max$0$ph37 = $$lcssa;$min$0$ph38 = $min$031$lcssa;
  } else {
   $88 = $$lcssa91;$90 = $$lcssa;$gindex$0 = 0;
   break;
  }
 }
 if ((label|0) == 8) {
  $$sum6$le = (($$lcssa89) + 24)|0;
  $69 = (($24) + ($$sum6$le)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $71 << 24;
  $$sum11 = (($$lcssa89) + 25)|0;
  $73 = (($24) + ($$sum11)|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = $75 << 16;
  $77 = $76 | $72;
  $$sum12 = (($$lcssa89) + 26)|0;
  $78 = (($24) + ($$sum12)|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = $80 << 8;
  $82 = $77 | $81;
  $$sum13 = (($$lcssa89) + 27)|0;
  $83 = (($24) + ($$sum13)|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $82 | $85;
  $88 = $$lcssa92;$90 = $$lcssa86;$gindex$0 = $86;
 }
 if (!($22)) {
  $$0 = $gindex$0;
  return ($$0|0);
 }
 $87 = ($$>>>0)>($88>>>0);
 if ($87) {
  $89 = (($90) + 1)|0;
  $91 = ($89|0)==($19|0);
  if ($91) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $mid$2 = $89;
  }
 } else {
  $mid$2 = $90;
 }
 $92 = ((($cmap)) + 24|0);
 HEAP8[$92>>0] = 1;
 $93 = ((($cmap)) + 28|0);
 HEAP32[$93>>2] = $$;
 $94 = ((($cmap)) + 36|0);
 HEAP32[$94>>2] = $mid$2;
 $95 = ($gindex$0|0)==(0);
 if ($95) {
  _tt_cmap13_next($cmap);
  $96 = HEAP8[$92>>0]|0;
  $97 = ($96<<24>>24)==(0);
  if ($97) {
   $$0 = 0;
   return ($$0|0);
  }
  $99 = ((($cmap)) + 32|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($100|0)==(0);
  if ($101) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $gindex$115 = $100;
  }
 } else {
  $98 = ((($cmap)) + 32|0);
  HEAP32[$98>>2] = $gindex$0;
  $gindex$115 = $gindex$0;
 }
 $102 = HEAP32[$93>>2]|0;
 HEAP32[$pchar_code>>2] = $102;
 $$0 = $gindex$115;
 return ($$0|0);
}
function _tt_cmap12_next($cmap) {
 $cmap = $cmap|0;
 var $$char_code$0 = 0, $$lcssa = 0, $$lcssa51 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $char_code$020 = 0, $char_code$1$lcssa = 0, $char_code$117 = 0, $char_code$117$lcssa = 0, $n$018 = 0, $n$018$lcssa = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(-1);
 L1: do {
  if (!($2)) {
   $3 = ((($cmap)) + 36|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($cmap)) + 40|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   if ($7) {
    $8 = (($1) + 1)|0;
    $9 = ((($cmap)) + 16|0);
    $10 = HEAP32[$9>>2]|0;
    $char_code$020 = $8;$n$018 = $4;
    L4: while(1) {
     $11 = ($n$018*12)|0;
     $$sum2 = (($11) + 16)|0;
     $12 = (($10) + ($$sum2)|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = $13&255;
     $15 = $14 << 24;
     $$sum3 = (($11) + 17)|0;
     $16 = (($10) + ($$sum3)|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = $18 << 16;
     $20 = $19 | $15;
     $$sum4 = (($11) + 18)|0;
     $21 = (($10) + ($$sum4)|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = $22&255;
     $24 = $23 << 8;
     $25 = $20 | $24;
     $$sum5 = (($11) + 19)|0;
     $26 = (($10) + ($$sum5)|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27&255;
     $29 = $25 | $28;
     $$sum6 = (($11) + 24)|0;
     $30 = (($10) + ($$sum6)|0);
     $$sum7 = (($11) + 20)|0;
     $31 = (($10) + ($$sum7)|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = $33 << 24;
     $$sum8 = (($11) + 21)|0;
     $35 = (($10) + ($$sum8)|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36&255;
     $38 = $37 << 16;
     $39 = $38 | $34;
     $$sum9 = (($11) + 22)|0;
     $40 = (($10) + ($$sum9)|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41&255;
     $43 = $42 << 8;
     $44 = $39 | $43;
     $$sum10 = (($11) + 23)|0;
     $45 = (($10) + ($$sum10)|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46&255;
     $48 = $44 | $47;
     $49 = HEAP8[$30>>0]|0;
     $50 = $49&255;
     $51 = $50 << 24;
     $$sum11 = (($11) + 25)|0;
     $52 = (($10) + ($$sum11)|0);
     $53 = HEAP8[$52>>0]|0;
     $54 = $53&255;
     $55 = $54 << 16;
     $56 = $55 | $51;
     $$sum12 = (($11) + 26)|0;
     $57 = (($10) + ($$sum12)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = $59 << 8;
     $61 = $56 | $60;
     $$sum13 = (($11) + 27)|0;
     $62 = (($10) + ($$sum13)|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = $63&255;
     $65 = $61 | $64;
     $66 = ($char_code$020>>>0)<($29>>>0);
     $$char_code$0 = $66 ? $29 : $char_code$020;
     $67 = ($$char_code$0>>>0)>($48>>>0);
     if ($67) {
      $char_code$1$lcssa = $$char_code$0;
     } else {
      $char_code$117 = $$char_code$0;
      while(1) {
       $68 = (($char_code$117) + ($65))|0;
       $69 = ($68|0)==($29|0);
       if (!($69)) {
        $$lcssa = $68;$$lcssa51 = $29;$char_code$117$lcssa = $char_code$117;$n$018$lcssa = $n$018;
        break L4;
       }
       $72 = (($char_code$117) + 1)|0;
       $73 = ($72>>>0)>($48>>>0);
       if ($73) {
        $char_code$1$lcssa = $72;
        break;
       } else {
        $char_code$117 = $72;
       }
      }
     }
     $74 = (($n$018) + 1)|0;
     $75 = HEAP32[$5>>2]|0;
     $76 = ($74>>>0)<($75>>>0);
     if ($76) {
      $char_code$020 = $char_code$1$lcssa;$n$018 = $74;
     } else {
      break L1;
     }
    }
    $70 = (($$lcssa) - ($$lcssa51))|0;
    HEAP32[$0>>2] = $char_code$117$lcssa;
    $71 = ((($cmap)) + 32|0);
    HEAP32[$71>>2] = $70;
    HEAP32[$3>>2] = $n$018$lcssa;
    return;
   }
  }
 } while(0);
 $77 = ((($cmap)) + 24|0);
 HEAP8[$77>>0] = 0;
 return;
}
function _tt_cmap12_char_map_binary($cmap,$pchar_code,$next) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 $next = $next|0;
 var $$ = 0, $$0 = 0, $$lcssa = 0, $$lcssa100 = 0, $$lcssa103 = 0, $$lcssa106 = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6$le = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $gindex$0 = 0, $gindex$115 = 0, $max$0$ph39 = 0, $mid$2 = 0, $min$0$ph40 = 0, $min$033 = 0, $min$033$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 24;
 $6 = ((($1)) + 13|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 16;
 $10 = $9 | $5;
 $11 = ((($1)) + 14|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 8;
 $15 = $10 | $14;
 $16 = ((($1)) + 15|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $15 | $18;
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 0;
  return ($$0|0);
 }
 $21 = HEAP32[$pchar_code>>2]|0;
 $22 = ($next<<24>>24)!=(0);
 $23 = $22&1;
 $$ = (($21) + ($23))|0;
 $24 = HEAP32[$0>>2]|0;
 $max$0$ph39 = $19;$min$0$ph40 = 0;
 L4: while(1) {
  $min$033 = $min$0$ph40;
  while(1) {
   $26 = (($min$033) + ($max$0$ph39))|0;
   $27 = $26 >>> 1;
   $28 = ($27*12)|0;
   $$sum2 = (($28) + 16)|0;
   $29 = (($24) + ($$sum2)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = $31 << 24;
   $$sum3 = (($28) + 17)|0;
   $33 = (($24) + ($$sum3)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $35 << 16;
   $37 = $36 | $32;
   $$sum4 = (($28) + 18)|0;
   $38 = (($24) + ($$sum4)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = $40 << 8;
   $42 = $37 | $41;
   $$sum5 = (($28) + 19)|0;
   $43 = (($24) + ($$sum5)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = $42 | $45;
   $$sum7 = (($28) + 20)|0;
   $47 = (($24) + ($$sum7)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = $49 << 24;
   $$sum8 = (($28) + 21)|0;
   $51 = (($24) + ($$sum8)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $53 << 16;
   $55 = $54 | $50;
   $$sum9 = (($28) + 22)|0;
   $56 = (($24) + ($$sum9)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 << 8;
   $60 = $55 | $59;
   $$sum10 = (($28) + 23)|0;
   $61 = (($24) + ($$sum10)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $60 | $63;
   $65 = ($$>>>0)<($46>>>0);
   if ($65) {
    $$lcssa = $27;$$lcssa108 = $64;$min$033$lcssa = $min$033;
    break;
   }
   $66 = ($$>>>0)>($64>>>0);
   if (!($66)) {
    $$lcssa100 = $27;$$lcssa103 = $28;$$lcssa106 = $46;$$lcssa109 = $64;
    label = 8;
    break L4;
   }
   $67 = (($27) + 1)|0;
   $68 = ($67>>>0)<($max$0$ph39>>>0);
   if ($68) {
    $min$033 = $67;
   } else {
    $90 = $64;$92 = $27;$gindex$0 = 0;
    break L4;
   }
  }
  $25 = ($min$033$lcssa>>>0)<($$lcssa>>>0);
  if ($25) {
   $max$0$ph39 = $$lcssa;$min$0$ph40 = $min$033$lcssa;
  } else {
   $90 = $$lcssa108;$92 = $$lcssa;$gindex$0 = 0;
   break;
  }
 }
 if ((label|0) == 8) {
  $$sum6$le = (($$lcssa103) + 24)|0;
  $69 = (($24) + ($$sum6$le)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $71 << 24;
  $$sum11 = (($$lcssa103) + 25)|0;
  $73 = (($24) + ($$sum11)|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = $75 << 16;
  $77 = $76 | $72;
  $$sum12 = (($$lcssa103) + 26)|0;
  $78 = (($24) + ($$sum12)|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = $80 << 8;
  $82 = $77 | $81;
  $$sum13 = (($$lcssa103) + 27)|0;
  $83 = (($24) + ($$sum13)|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = $82 | $85;
  $87 = (($$) - ($$lcssa106))|0;
  $88 = (($87) + ($86))|0;
  $90 = $$lcssa109;$92 = $$lcssa100;$gindex$0 = $88;
 }
 if (!($22)) {
  $$0 = $gindex$0;
  return ($$0|0);
 }
 $89 = ($$>>>0)>($90>>>0);
 if ($89) {
  $91 = (($92) + 1)|0;
  $93 = ($91|0)==($19|0);
  if ($93) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $mid$2 = $91;
  }
 } else {
  $mid$2 = $92;
 }
 $94 = ((($cmap)) + 24|0);
 HEAP8[$94>>0] = 1;
 $95 = ((($cmap)) + 28|0);
 HEAP32[$95>>2] = $$;
 $96 = ((($cmap)) + 36|0);
 HEAP32[$96>>2] = $mid$2;
 $97 = ($gindex$0|0)==(0);
 if ($97) {
  _tt_cmap12_next($cmap);
  $98 = HEAP8[$94>>0]|0;
  $99 = ($98<<24>>24)==(0);
  if ($99) {
   $$0 = 0;
   return ($$0|0);
  }
  $101 = ((($cmap)) + 32|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = ($102|0)==(0);
  if ($103) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $gindex$115 = $102;
  }
 } else {
  $100 = ((($cmap)) + 32|0);
  HEAP32[$100>>2] = $gindex$0;
  $gindex$115 = $gindex$0;
 }
 $104 = HEAP32[$95>>2]|0;
 HEAP32[$pchar_code>>2] = $104;
 $$0 = $gindex$115;
 return ($$0|0);
}
function _tt_cmap4_char_map_linear($cmap,$pcharcode,$next) {
 $cmap = $cmap|0;
 $pcharcode = $pcharcode|0;
 $next = $next|0;
 var $$ = 0, $$0 = 0, $$18 = 0, $$19 = 0, $$lcssa57 = 0, $$masked = 0, $$sum = 0, $$sum10 = 0, $$sum1112 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1535 = 0, $$sum16 = 0, $$sum89 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $charcode$0$lcssa = 0, $charcode$028 = 0, $delta$0 = 0, $delta$0$lcssa = 0, $delta$020 = 0, $gindex$029 = 0, $gindex$1 = 0, $gindex$1$lcssa = 0, $i$025 = 0, $offset$0 = 0, $offset$0$lcssa = 0, $or$cond = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var $p$026 = 0, $p$1 = 0, $q$027 = 0, $q$027$lcssa55 = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 6|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 8;
 $6 = ((($1)) + 7|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $$masked = $8 & 254;
 $9 = $$masked | $5;
 $10 = $9 >>> 1;
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = HEAP32[$pcharcode>>2]|0;
 $13 = ($next<<24>>24)==(0);
 $14 = $13&1;
 $15 = $14 ^ 1;
 $$ = (($12) + ($15))|0;
 $16 = ($$>>>0)<(65536);
 if (!($16)) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = ((($17)) + 14|0);
 $$sum = (($9) + 16)|0;
 $19 = (($17) + ($$sum)|0);
 $$sum89 = $9 | 1;
 $$sum10 = $9 << 1;
 $$sum1112 = $$sum10 | 1;
 $20 = (($10) + -1)|0;
 $$sum1535 = $$sum10 | 2;
 $charcode$028 = $$;$gindex$029 = 0;
 while(1) {
  $i$025 = 0;$p$026 = $18;$q$027 = $19;
  L9: while(1) {
   $21 = ((($p$026)) + 2|0);
   $22 = HEAP8[$p$026>>0]|0;
   $23 = $22&255;
   $24 = $23 << 8;
   $25 = ((($p$026)) + 1|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = $24 | $27;
   $29 = ((($q$027)) + 2|0);
   $30 = HEAP8[$q$027>>0]|0;
   $31 = $30&255;
   $32 = $31 << 8;
   $33 = ((($q$027)) + 1|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $32 | $35;
   $37 = ($charcode$028>>>0)<($36>>>0);
   $38 = ($charcode$028>>>0)>($28>>>0);
   $or$cond17 = $38 | $37;
   if ($or$cond17) {
    $p$1 = $21;
   } else {
    $39 = (($q$027) + ($9)|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $42 = $41 << 8;
    $43 = (($q$027) + ($$sum89)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = $42 | $45;
    $47 = (($q$027) + ($$sum10)|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48&255;
    $50 = $49 << 8;
    $51 = (($q$027) + ($$sum1112)|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = $50 | $53;
    $55 = ($i$025>>>0)>=($20>>>0);
    $56 = ($36|0)==(65535);
    $or$cond = $55 & $56;
    $57 = ($28|0)==(65535);
    $or$cond3 = $57 & $or$cond;
    if ($or$cond3) {
     $58 = HEAP32[$cmap>>2]|0;
     $59 = ($54|0)==(0);
     if ($59) {
      $delta$020 = $46;
      label = 12;
      break;
     }
     $60 = ((($58)) + 500|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ((($58)) + 504|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (($61) + ($63)|0);
     $$sum16 = (($$sum1535) + ($54))|0;
     $65 = (($q$027) + ($$sum16)|0);
     $66 = ($65>>>0)>($64>>>0);
     $$18 = $66 ? 1 : $46;
     $$19 = $66 ? 0 : $54;
     $delta$0 = $$18;$offset$0 = $$19;
    } else {
     $delta$0 = $46;$offset$0 = $54;
    }
    $switch$split2D = ($offset$0|0)<(65535);
    if ($switch$split2D) {
     label = 19;
     break;
    }
    switch ($offset$0|0) {
    case 65535:  {
     $p$1 = $47;
     break;
    }
    default: {
     $$lcssa57 = $36;$delta$0$lcssa = $delta$0;$offset$0$lcssa = $offset$0;$q$027$lcssa55 = $q$027;
     label = 10;
     break L9;
    }
    }
   }
   $83 = (($i$025) + 1)|0;
   $84 = ($83>>>0)<($10>>>0);
   if ($84) {
    $i$025 = $83;$p$026 = $p$1;$q$027 = $29;
   } else {
    $gindex$1 = $gindex$029;
    break;
   }
  }
  if ((label|0) == 19) {
   label = 0;
   switch ($offset$0|0) {
   case 0:  {
    $delta$020 = $delta$0;
    label = 12;
    break;
   }
   default: {
    $$lcssa57 = $36;$delta$0$lcssa = $delta$0;$offset$0$lcssa = $offset$0;$q$027$lcssa55 = $q$027;
    label = 10;
   }
   }
  }
  if ((label|0) == 10) {
   label = 0;
   $67 = (($charcode$028) - ($$lcssa57))|0;
   $68 = $67 << 1;
   $69 = (($68) + ($$sum10))|0;
   $$sum13 = (($69) + ($offset$0$lcssa))|0;
   $70 = (($q$027$lcssa55) + ($$sum13)|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71&255;
   $73 = $72 << 8;
   $$sum14 = (($$sum13) + 1)|0;
   $74 = (($q$027$lcssa55) + ($$sum14)|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75&255;
   $77 = $73 | $76;
   $78 = ($77|0)==(0);
   if ($78) {
    $gindex$1 = 0;
   } else {
    $79 = (($77) + ($delta$0$lcssa))|0;
    $80 = $79 & 65535;
    $gindex$1 = $80;
   }
  }
  else if ((label|0) == 12) {
   label = 0;
   $81 = (($delta$020) + ($charcode$028))|0;
   $82 = $81 & 65535;
   $gindex$1 = $82;
  }
  $85 = ($gindex$1|0)!=(0);
  $or$cond5 = $13 | $85;
  if ($or$cond5) {
   $charcode$0$lcssa = $charcode$028;$gindex$1$lcssa = $gindex$1;
   break;
  }
  $86 = (($charcode$028) + 1)|0;
  $87 = ($86>>>0)<(65536);
  if ($87) {
   $charcode$028 = $86;$gindex$029 = $gindex$1;
  } else {
   $charcode$0$lcssa = $86;$gindex$1$lcssa = $gindex$1;
   break;
  }
 }
 $88 = ($next<<24>>24)!=(0);
 $89 = ($gindex$1$lcssa|0)!=(0);
 $or$cond7 = $88 & $89;
 if (!($or$cond7)) {
  $$0 = $gindex$1$lcssa;
  return ($$0|0);
 }
 HEAP32[$pcharcode>>2] = $charcode$0$lcssa;
 $$0 = $gindex$1$lcssa;
 return ($$0|0);
}
function _tt_cmap4_next($cmap) {
 $cmap = $cmap|0;
 var $$ = 0, $$charcode$3 = 0, $$lcssa = 0, $$lcssa39 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $charcode$0 = 0, $charcode$1 = 0, $charcode$1$lcssa = 0, $charcode$2 = 0, $charcode$2$lcssa = 0, $charcode$3 = 0, $p$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>(65534);
 L1: do {
  if (!($2)) {
   $3 = (($1) + 1)|0;
   $4 = ((($cmap)) + 40|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3>>>0)<($5>>>0);
   $$ = $6 ? $5 : $3;
   $7 = ((($cmap)) + 52|0);
   $8 = ((($cmap)) + 44|0);
   $9 = ((($cmap)) + 48|0);
   $10 = ((($cmap)) + 36|0);
   $charcode$0 = $$;
   L3: while(1) {
    $11 = HEAP32[$7>>2]|0;
    $12 = HEAP32[$8>>2]|0;
    $13 = HEAP32[$9>>2]|0;
    $14 = ($charcode$0>>>0)>($12>>>0);
    L5: do {
     if ($14) {
      $charcode$3 = $charcode$0;
     } else {
      $15 = ($11|0)==(0|0);
      if ($15) {
       $charcode$2 = $charcode$0;
       while(1) {
        $35 = (($charcode$2) + ($13))|0;
        $36 = $35 & 65535;
        $37 = ($36|0)==(0);
        if (!($37)) {
         $$lcssa39 = $36;$charcode$2$lcssa = $charcode$2;
         label = 11;
         break L3;
        }
        $39 = (($charcode$2) + 1)|0;
        $40 = ($39>>>0)>($12>>>0);
        if ($40) {
         $charcode$3 = $39;
         break L5;
        } else {
         $charcode$2 = $39;
        }
       }
      }
      $16 = HEAP32[$4>>2]|0;
      $17 = (($charcode$0) - ($16))|0;
      $18 = $17 << 1;
      $19 = (($11) + ($18)|0);
      $charcode$1 = $charcode$0;$p$0 = $19;
      while(1) {
       $20 = ((($p$0)) + 2|0);
       $21 = HEAP8[$p$0>>0]|0;
       $22 = $21&255;
       $23 = $22 << 8;
       $24 = ((($p$0)) + 1|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = $25&255;
       $27 = $23 | $26;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $29 = (($27) + ($13))|0;
        $30 = $29 & 65535;
        $31 = ($30|0)==(0);
        if (!($31)) {
         $$lcssa = $30;$charcode$1$lcssa = $charcode$1;
         label = 8;
         break L3;
        }
       }
       $33 = (($charcode$1) + 1)|0;
       $34 = ($33>>>0)>($12>>>0);
       if ($34) {
        $charcode$3 = $33;
        break;
       } else {
        $charcode$1 = $33;$p$0 = $20;
       }
      }
     }
    } while(0);
    $41 = HEAP32[$10>>2]|0;
    $42 = (($41) + 1)|0;
    $43 = (_tt_cmap4_set_range($cmap,$42)|0);
    $44 = ($43|0)<(0);
    if ($44) {
     break L1;
    }
    $45 = HEAP32[$4>>2]|0;
    $46 = ($charcode$3>>>0)<($45>>>0);
    $$charcode$3 = $46 ? $45 : $charcode$3;
    $charcode$0 = $$charcode$3;
   }
   if ((label|0) == 8) {
    HEAP32[$0>>2] = $charcode$1$lcssa;
    $32 = ((($cmap)) + 28|0);
    HEAP32[$32>>2] = $$lcssa;
    return;
   }
   else if ((label|0) == 11) {
    HEAP32[$0>>2] = $charcode$2$lcssa;
    $38 = ((($cmap)) + 28|0);
    HEAP32[$38>>2] = $$lcssa39;
    return;
   }
  }
 } while(0);
 HEAP32[$0>>2] = -1;
 $47 = ((($cmap)) + 28|0);
 HEAP32[$47>>2] = 0;
 return;
}
function _tt_cmap4_char_map_binary($cmap,$pcharcode,$next) {
 $cmap = $cmap|0;
 $pcharcode = $pcharcode|0;
 $next = $next|0;
 var $$ = 0, $$0 = 0, $$56 = 0, $$57 = 0, $$58 = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $$lcssa170 = 0, $$lcssa170$lcssa = 0, $$lcssa171 = 0, $$lcssa171$lcssa = 0, $$lcssa172 = 0, $$lcssa172$lcssa = 0, $$masked = 0, $$sum = 0, $$sum$lcssa = 0, $$sum$lcssa$lcssa = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0;
 var $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2021 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum2728 = 0, $$sum29 = 0, $$sum3031 = 0, $$sum32 = 0, $$sum33 = 0, $$sum4 = 0, $$sum4$lcssa = 0, $$sum4$lcssa$lcssa = 0, $$sum44 = 0;
 var $$sum45 = 0, $$sum46 = 0, $$sum4748 = 0, $$sum49 = 0, $$sum5 = 0, $$sum5$lcssa = 0, $$sum5$lcssa$lcssa = 0, $$sum5051 = 0, $$sum52 = 0, $$sum53 = 0, $$sum54 = 0, $$sum55 = 0, $$sum67 = 0, $$sum67$lcssa = 0, $$sum67$lcssa$lcssa = 0, $$sum8 = 0, $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $delta$0 = 0, $delta$1$lcssa = 0, $delta$191 = 0, $delta$3$lcssa = 0, $delta$3$ph = 0, $delta$370 = 0, $delta$4 = 0, $delta$5 = 0;
 var $end$0 = 0, $end$0$ph = 0, $end$1$lcssa = 0, $end$193 = 0, $end$3$lcssa = 0, $end$3$ph = 0, $end$372 = 0, $end$4 = 0, $end$5 = 0, $end$6 = 0, $gindex$0 = 0, $gindex$159 = 0, $i$0$lcssa = 0, $i$090 = 0, $i$1$lcssa = 0, $i$169 = 0, $i$2 = 0, $max$0 = 0, $max$0$lcssa168 = 0, $max$0$ph = 0;
 var $mid$0 = 0, $mid$0$ph = 0, $mid$2$ = 0, $mid$2$lcssa = 0, $mid$288 = 0, $mid$4$i$1 = 0, $mid$4$lcssa = 0, $mid$468 = 0, $mid$6 = 0, $mid$7 = 0, $mid$8 = 0, $mid$9 = 0, $min$0$ph = 0, $offset$0 = 0, $offset$1$lcssa = 0, $offset$192 = 0, $offset$3$lcssa = 0, $offset$3$ph = 0, $offset$371 = 0, $offset$4 = 0;
 var $offset$5 = 0, $or$cond = 0, $or$cond3 = 0, $p$0$lcssa = 0, $p$089 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $start$0$lcssa = 0, $start$094 = 0, $start$2$lcssa = 0, $start$2$ph = 0, $start$273 = 0, $start$3 = 0, $start$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 6|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 << 8;
 $6 = ((($1)) + 7|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $$masked = $8 & 254;
 $9 = $$masked | $5;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = HEAP32[$pcharcode>>2]|0;
 $12 = $9 >>> 1;
 $13 = ($next<<24>>24)!=(0);
 $14 = $13&1;
 $$ = (($11) + ($14))|0;
 $15 = (($9) + 2)|0;
 $end$0$ph = 65535;$max$0$ph = $12;$mid$0$ph = $12;$min$0$ph = 0;
 L4: while(1) {
  $end$0 = $end$0$ph;$max$0 = $max$0$ph;$mid$0 = $mid$0$ph;
  while(1) {
   $16 = ($min$0$ph>>>0)<($max$0>>>0);
   if (!($16)) {
    $end$6 = $end$0;$gindex$0 = 0;$mid$8 = $mid$0;
    break L4;
   }
   $17 = (($max$0) + ($min$0$ph))|0;
   $18 = $17 >>> 1;
   $19 = HEAP32[$0>>2]|0;
   $20 = $18 << 1;
   $$sum = (($20) + 14)|0;
   $21 = (($19) + ($$sum)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22&255;
   $24 = $23 << 8;
   $$sum4 = (($20) + 15)|0;
   $25 = (($19) + ($$sum4)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = $24 | $27;
   $$sum5 = (($$sum) + ($15))|0;
   $29 = (($19) + ($$sum5)|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = $31 << 8;
   $$sum67 = $$sum5 | 1;
   $33 = (($19) + ($$sum67)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $32 | $35;
   $37 = ($$>>>0)<($36>>>0);
   if ($37) {
    $end$0 = $28;$max$0 = $18;$mid$0 = $18;
   } else {
    $$lcssa = $18;$$lcssa170 = $19;$$lcssa171 = $28;$$lcssa172 = $36;$$sum$lcssa = $$sum;$$sum4$lcssa = $$sum4;$$sum5$lcssa = $$sum5;$$sum67$lcssa = $$sum67;$max$0$lcssa168 = $max$0;
    break;
   }
  }
  $38 = ($$>>>0)>($$lcssa171>>>0);
  if (!($38)) {
   $$lcssa$lcssa = $$lcssa;$$lcssa170$lcssa = $$lcssa170;$$lcssa171$lcssa = $$lcssa171;$$lcssa172$lcssa = $$lcssa172;$$sum$lcssa$lcssa = $$sum$lcssa;$$sum4$lcssa$lcssa = $$sum4$lcssa;$$sum5$lcssa$lcssa = $$sum5$lcssa;$$sum67$lcssa$lcssa = $$sum67$lcssa;
   label = 8;
   break;
  }
  $39 = (($$lcssa) + 1)|0;
  $end$0$ph = $$lcssa171;$max$0$ph = $max$0$lcssa168;$mid$0$ph = $$lcssa;$min$0$ph = $39;
 }
 do {
  if ((label|0) == 8) {
   $$sum8 = (($$sum5$lcssa$lcssa) + ($9))|0;
   $40 = (($$lcssa170$lcssa) + ($$sum8)|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41 << 24 >> 24;
   $43 = $42 << 8;
   $$sum910 = $$sum8 | 1;
   $44 = (($$lcssa170$lcssa) + ($$sum910)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $47 = $43 | $46;
   $$sum11 = (($$sum8) + ($9))|0;
   $48 = (($$lcssa170$lcssa) + ($$sum11)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = $50 << 8;
   $$sum12 = $$sum11 | 1;
   $52 = (($$lcssa170$lcssa) + ($$sum12)|0);
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = $51 | $54;
   $56 = (($12) + -1)|0;
   $57 = ($$lcssa$lcssa>>>0)>=($56>>>0);
   $58 = ($$lcssa172$lcssa|0)==(65535);
   $or$cond = $57 & $58;
   $59 = ($$lcssa171$lcssa|0)==(65535);
   $or$cond3 = $59 & $or$cond;
   if ($or$cond3) {
    $60 = HEAP32[$cmap>>2]|0;
    $61 = ($55|0)==(0);
    if ($61) {
     $delta$0 = $47;$offset$0 = 0;
    } else {
     $62 = ((($60)) + 500|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ((($60)) + 504|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($63) + ($65)|0);
     $$sum54 = (($$sum11) + 2)|0;
     $$sum55 = (($$sum54) + ($55))|0;
     $67 = (($$lcssa170$lcssa) + ($$sum55)|0);
     $68 = ($67>>>0)>($66>>>0);
     $$56 = $68 ? 1 : $47;
     $$57 = $68 ? 0 : $55;
     $delta$0 = $$56;$offset$0 = $$57;
    }
   } else {
    $delta$0 = $47;$offset$0 = $55;
   }
   $69 = ((($cmap)) + 20|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $70 & 2;
   $72 = ($71|0)==(0);
   $73 = ($offset$0|0)==(65535);
   if ($72) {
    if ($73) {
     $end$6 = $$lcssa171$lcssa;$gindex$0 = 0;$mid$8 = $$lcssa$lcssa;
     break;
    } else {
     $delta$5 = $delta$0;$end$5 = $$lcssa171$lcssa;$mid$7 = $$lcssa$lcssa;$offset$5 = $offset$0;$p$6 = $48;$start$4 = $$lcssa172$lcssa;
    }
   } else {
    $74 = (($$lcssa$lcssa) + 1)|0;
    $$58 = $73 ? $74 : $$lcssa$lcssa;
    $75 = ($$lcssa$lcssa|0)==(0);
    L20: do {
     if ($75) {
      $delta$1$lcssa = $delta$0;$end$1$lcssa = $$lcssa171$lcssa;$i$0$lcssa = 0;$mid$2$lcssa = $$58;$offset$1$lcssa = $offset$0;$p$0$lcssa = $48;$start$0$lcssa = $$lcssa172$lcssa;
     } else {
      $76 = HEAP32[$0>>2]|0;
      $delta$191 = $delta$0;$end$193 = $$lcssa171$lcssa;$i$090 = $$lcssa$lcssa;$mid$288 = $$58;$offset$192 = $offset$0;$p$089 = $48;$start$094 = $$lcssa172$lcssa;
      while(1) {
       $77 = (($i$090) + -1)|0;
       $78 = $77 << 1;
       $$sum44 = (($78) + 14)|0;
       $79 = (($76) + ($$sum44)|0);
       $80 = HEAP8[$79>>0]|0;
       $81 = $80&255;
       $82 = $81 << 8;
       $$sum45 = (($78) + 15)|0;
       $83 = (($76) + ($$sum45)|0);
       $84 = HEAP8[$83>>0]|0;
       $85 = $84&255;
       $86 = $82 | $85;
       $87 = ($$>>>0)>($86>>>0);
       if ($87) {
        $delta$1$lcssa = $delta$191;$end$1$lcssa = $end$193;$i$0$lcssa = $i$090;$mid$2$lcssa = $mid$288;$offset$1$lcssa = $offset$192;$p$0$lcssa = $p$089;$start$0$lcssa = $start$094;
        break L20;
       }
       $$sum46 = (($$sum44) + ($15))|0;
       $88 = (($76) + ($$sum46)|0);
       $89 = HEAP8[$88>>0]|0;
       $90 = $89&255;
       $91 = $90 << 8;
       $$sum4748 = $$sum46 | 1;
       $92 = (($76) + ($$sum4748)|0);
       $93 = HEAP8[$92>>0]|0;
       $94 = $93&255;
       $95 = $91 | $94;
       $$sum49 = (($$sum46) + ($9))|0;
       $96 = (($76) + ($$sum49)|0);
       $97 = HEAP8[$96>>0]|0;
       $98 = $97 << 24 >> 24;
       $99 = $98 << 8;
       $$sum5051 = $$sum49 | 1;
       $100 = (($76) + ($$sum5051)|0);
       $101 = HEAP8[$100>>0]|0;
       $102 = $101&255;
       $103 = $99 | $102;
       $$sum52 = (($$sum49) + ($9))|0;
       $104 = (($76) + ($$sum52)|0);
       $105 = HEAP8[$104>>0]|0;
       $106 = $105&255;
       $107 = $106 << 8;
       $$sum53 = $$sum52 | 1;
       $108 = (($76) + ($$sum53)|0);
       $109 = HEAP8[$108>>0]|0;
       $110 = $109&255;
       $111 = $107 | $110;
       $112 = ($111|0)==(65535);
       $mid$2$ = $112 ? $mid$288 : $77;
       $113 = ($77|0)==(0);
       if ($113) {
        $delta$1$lcssa = $103;$end$1$lcssa = $86;$i$0$lcssa = 0;$mid$2$lcssa = $mid$2$;$offset$1$lcssa = $111;$p$0$lcssa = $104;$start$0$lcssa = $95;
        break;
       } else {
        $delta$191 = $103;$end$193 = $86;$i$090 = $77;$mid$288 = $mid$2$;$offset$192 = $111;$p$089 = $104;$start$094 = $95;
       }
      }
     }
    } while(0);
    $114 = ($mid$2$lcssa|0)==($74|0);
    if ($114) {
     $115 = ($i$0$lcssa|0)==($$lcssa$lcssa|0);
     if ($115) {
      $delta$3$ph = $delta$1$lcssa;$end$3$ph = $end$1$lcssa;$offset$3$ph = $offset$1$lcssa;$start$2$ph = $start$0$lcssa;
     } else {
      $116 = HEAP32[$0>>2]|0;
      $117 = (($116) + ($$sum$lcssa$lcssa)|0);
      $118 = HEAP8[$117>>0]|0;
      $119 = $118&255;
      $120 = $119 << 8;
      $121 = (($116) + ($$sum4$lcssa$lcssa)|0);
      $122 = HEAP8[$121>>0]|0;
      $123 = $122&255;
      $124 = $120 | $123;
      $125 = (($116) + ($$sum5$lcssa$lcssa)|0);
      $126 = HEAP8[$125>>0]|0;
      $127 = $126&255;
      $128 = $127 << 8;
      $129 = (($116) + ($$sum67$lcssa$lcssa)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = $128 | $131;
      $133 = (($116) + ($$sum8)|0);
      $134 = HEAP8[$133>>0]|0;
      $135 = $134 << 24 >> 24;
      $136 = $135 << 8;
      $137 = (($116) + ($$sum910)|0);
      $138 = HEAP8[$137>>0]|0;
      $139 = $138&255;
      $140 = $136 | $139;
      $141 = (($116) + ($$sum11)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = $143 << 8;
      $145 = (($116) + ($$sum12)|0);
      $146 = HEAP8[$145>>0]|0;
      $147 = $146&255;
      $148 = $144 | $147;
      $delta$3$ph = $140;$end$3$ph = $124;$offset$3$ph = $148;$start$2$ph = $132;
     }
     $149 = ($74>>>0)<($12>>>0);
     if (!($149)) {
      $end$6 = $end$3$ph;$gindex$0 = 0;$mid$8 = $$lcssa$lcssa;
      break;
     }
     $150 = HEAP32[$0>>2]|0;
     $delta$370 = $delta$3$ph;$end$372 = $end$3$ph;$i$169 = $74;$mid$468 = $$lcssa$lcssa;$offset$371 = $offset$3$ph;$start$273 = $start$2$ph;
     while(1) {
      $151 = $i$169 << 1;
      $$sum24 = (($151) + 14)|0;
      $$sum26 = (($$sum24) + ($15))|0;
      $152 = (($150) + ($$sum26)|0);
      $153 = HEAP8[$152>>0]|0;
      $154 = $153&255;
      $155 = $154 << 8;
      $$sum2728 = $$sum26 | 1;
      $156 = (($150) + ($$sum2728)|0);
      $157 = HEAP8[$156>>0]|0;
      $158 = $157&255;
      $159 = $155 | $158;
      $160 = ($$>>>0)<($159>>>0);
      if ($160) {
       $delta$3$lcssa = $delta$370;$end$3$lcssa = $end$372;$i$1$lcssa = $i$169;$mid$4$lcssa = $mid$468;$offset$3$lcssa = $offset$371;$p$4 = $152;$start$2$lcssa = $start$273;
       break;
      }
      $161 = (($150) + ($$sum24)|0);
      $162 = HEAP8[$161>>0]|0;
      $163 = $162&255;
      $164 = $163 << 8;
      $$sum25 = (($151) + 15)|0;
      $165 = (($150) + ($$sum25)|0);
      $166 = HEAP8[$165>>0]|0;
      $167 = $166&255;
      $168 = $164 | $167;
      $$sum29 = (($$sum26) + ($9))|0;
      $169 = (($150) + ($$sum29)|0);
      $170 = HEAP8[$169>>0]|0;
      $171 = $170 << 24 >> 24;
      $172 = $171 << 8;
      $$sum3031 = $$sum29 | 1;
      $173 = (($150) + ($$sum3031)|0);
      $174 = HEAP8[$173>>0]|0;
      $175 = $174&255;
      $176 = $172 | $175;
      $$sum32 = (($$sum29) + ($9))|0;
      $177 = (($150) + ($$sum32)|0);
      $178 = HEAP8[$177>>0]|0;
      $179 = $178&255;
      $180 = $179 << 8;
      $$sum33 = $$sum32 | 1;
      $181 = (($150) + ($$sum33)|0);
      $182 = HEAP8[$181>>0]|0;
      $183 = $182&255;
      $184 = $180 | $183;
      $185 = ($184|0)==(65535);
      $mid$4$i$1 = $185 ? $mid$468 : $i$169;
      $186 = (($i$169) + 1)|0;
      $187 = ($186>>>0)<($12>>>0);
      if ($187) {
       $delta$370 = $176;$end$372 = $168;$i$169 = $186;$mid$468 = $mid$4$i$1;$offset$371 = $184;$start$273 = $159;
      } else {
       $delta$3$lcssa = $176;$end$3$lcssa = $168;$i$1$lcssa = $186;$mid$4$lcssa = $mid$4$i$1;$offset$3$lcssa = $184;$p$4 = $177;$start$2$lcssa = $159;
       break;
      }
     }
     $188 = (($i$1$lcssa) + -1)|0;
     $189 = ($mid$4$lcssa|0)==($$lcssa$lcssa|0);
     if ($189) {
      $end$6 = $end$3$lcssa;$gindex$0 = 0;$mid$8 = $188;
      break;
     } else {
      $delta$4 = $delta$3$lcssa;$end$4 = $end$3$lcssa;$i$2 = $188;$mid$6 = $mid$4$lcssa;$offset$4 = $offset$3$lcssa;$p$5 = $p$4;$start$3 = $start$2$lcssa;
     }
    } else {
     $delta$4 = $delta$1$lcssa;$end$4 = $end$1$lcssa;$i$2 = $i$0$lcssa;$mid$6 = $mid$2$lcssa;$offset$4 = $offset$1$lcssa;$p$5 = $p$0$lcssa;$start$3 = $start$0$lcssa;
    }
    $190 = ($mid$6|0)==($i$2|0);
    if ($190) {
     $delta$5 = $delta$4;$end$5 = $end$4;$mid$7 = $mid$6;$offset$5 = $offset$4;$p$6 = $p$5;$start$4 = $start$3;
    } else {
     $191 = HEAP32[$0>>2]|0;
     $192 = $mid$6 << 1;
     $$sum14 = (($192) + 14)|0;
     $193 = (($191) + ($$sum14)|0);
     $194 = HEAP8[$193>>0]|0;
     $195 = $194&255;
     $196 = $195 << 8;
     $$sum15 = (($192) + 15)|0;
     $197 = (($191) + ($$sum15)|0);
     $198 = HEAP8[$197>>0]|0;
     $199 = $198&255;
     $200 = $196 | $199;
     $$sum16 = (($$sum14) + ($15))|0;
     $201 = (($191) + ($$sum16)|0);
     $202 = HEAP8[$201>>0]|0;
     $203 = $202&255;
     $204 = $203 << 8;
     $$sum1718 = $$sum16 | 1;
     $205 = (($191) + ($$sum1718)|0);
     $206 = HEAP8[$205>>0]|0;
     $207 = $206&255;
     $208 = $204 | $207;
     $$sum19 = (($$sum16) + ($9))|0;
     $209 = (($191) + ($$sum19)|0);
     $210 = HEAP8[$209>>0]|0;
     $211 = $210 << 24 >> 24;
     $212 = $211 << 8;
     $$sum2021 = $$sum19 | 1;
     $213 = (($191) + ($$sum2021)|0);
     $214 = HEAP8[$213>>0]|0;
     $215 = $214&255;
     $216 = $212 | $215;
     $$sum22 = (($$sum19) + ($9))|0;
     $217 = (($191) + ($$sum22)|0);
     $218 = HEAP8[$217>>0]|0;
     $219 = $218&255;
     $220 = $219 << 8;
     $$sum23 = $$sum22 | 1;
     $221 = (($191) + ($$sum23)|0);
     $222 = HEAP8[$221>>0]|0;
     $223 = $222&255;
     $224 = $220 | $223;
     $delta$5 = $216;$end$5 = $200;$mid$7 = $mid$6;$offset$5 = $224;$p$6 = $217;$start$4 = $208;
    }
   }
   $225 = ($offset$5|0)==(0);
   if ($225) {
    $240 = (($delta$5) + ($$))|0;
    $241 = $240 & 65535;
    $end$6 = $end$5;$gindex$0 = $241;$mid$8 = $mid$7;
    break;
   }
   $226 = (($$) - ($start$4))|0;
   $227 = $226 << 1;
   $228 = (($227) + ($offset$5))|0;
   $229 = (($p$6) + ($228)|0);
   $230 = HEAP8[$229>>0]|0;
   $231 = $230&255;
   $232 = $231 << 8;
   $$sum13 = (($228) + 1)|0;
   $233 = (($p$6) + ($$sum13)|0);
   $234 = HEAP8[$233>>0]|0;
   $235 = $234&255;
   $236 = $232 | $235;
   $237 = ($236|0)==(0);
   if ($237) {
    $end$6 = $end$5;$gindex$0 = 0;$mid$8 = $mid$7;
   } else {
    $238 = (($236) + ($delta$5))|0;
    $239 = $238 & 65535;
    $end$6 = $end$5;$gindex$0 = $239;$mid$8 = $mid$7;
   }
  }
 } while(0);
 if (!($13)) {
  $$0 = $gindex$0;
  return ($$0|0);
 }
 $242 = ($$>>>0)>($end$6>>>0);
 if ($242) {
  $243 = (($mid$8) + 1)|0;
  $244 = ($243|0)==($12|0);
  if ($244) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $mid$9 = $243;
  }
 } else {
  $mid$9 = $mid$8;
 }
 $245 = (_tt_cmap4_set_range($cmap,$mid$9)|0);
 $246 = ($245|0)==(0);
 if (!($246)) {
  $247 = ($gindex$0|0)==(0);
  if ($247) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$pcharcode>>2] = $$;
  $$0 = $gindex$0;
  return ($$0|0);
 }
 $248 = ((($cmap)) + 24|0);
 HEAP32[$248>>2] = $$;
 $249 = ($gindex$0|0)==(0);
 if ($249) {
  HEAP32[$248>>2] = $$;
  _tt_cmap4_next($cmap);
  $251 = ((($cmap)) + 28|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = ($252|0)==(0);
  if ($253) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $gindex$159 = $252;
  }
 } else {
  $250 = ((($cmap)) + 28|0);
  HEAP32[$250>>2] = $gindex$0;
  $gindex$159 = $gindex$0;
 }
 $254 = HEAP32[$248>>2]|0;
 HEAP32[$pcharcode>>2] = $254;
 $$0 = $gindex$159;
 return ($$0|0);
}
function _tt_cmap4_set_range($cmap,$range_index) {
 $cmap = $cmap|0;
 $range_index = $range_index|0;
 var $$0 = 0, $$0125 = 0, $$0125$lcssa66 = 0, $$0125$lcssa67 = 0, $$012569 = 0, $$lcssa74 = 0, $$sum = 0, $$sum1011 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum2 = 0, $$sum3 = 0, $$sum45 = 0, $$sum6 = 0, $$sum78 = 0, $$sum9 = 0, $$sum9$lcssa71 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($cmap)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>($range_index>>>0);
 if (!($4)) {
  $$0 = -1;
  return ($$0|0);
 }
 $5 = ((($cmap)) + 44|0);
 $6 = $3 << 1;
 $7 = (($6) + 2)|0;
 $8 = ((($cmap)) + 40|0);
 $9 = ((($cmap)) + 48|0);
 $10 = (($3) + -1)|0;
 $$0125 = $range_index;
 L4: while(1) {
  $11 = $$0125 << 1;
  $$sum = (($11) + 14)|0;
  $12 = (($1) + ($$sum)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 << 8;
  $$sum2 = (($11) + 15)|0;
  $16 = (($1) + ($$sum2)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $15 | $18;
  HEAP32[$5>>2] = $19;
  $$sum3 = (($7) + ($$sum))|0;
  $20 = (($1) + ($$sum3)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $22 << 8;
  $$sum45 = $$sum3 | 1;
  $24 = (($1) + ($$sum45)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $23 | $26;
  HEAP32[$8>>2] = $27;
  $$sum6 = (($$sum3) + ($6))|0;
  $28 = (($1) + ($$sum6)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 << 24 >> 24;
  $31 = $30 << 8;
  $$sum78 = $$sum6 | 1;
  $32 = (($1) + ($$sum78)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $31 | $34;
  HEAP32[$9>>2] = $35;
  $$sum9 = (($$sum6) + ($6))|0;
  $36 = (($1) + ($$sum9)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = $38 << 8;
  $$sum1011 = $$sum9 | 1;
  $40 = (($1) + ($$sum1011)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $39 | $42;
  $44 = ($$0125>>>0)<($10>>>0);
  if (!($44)) {
   $45 = HEAP32[$8>>2]|0;
   $46 = ($45|0)==(65535);
   if ($46) {
    $47 = HEAP32[$5>>2]|0;
    $48 = ($47|0)==(65535);
    if ($48) {
     $49 = HEAP32[$cmap>>2]|0;
     $50 = ($43|0)==(0);
     if ($50) {
      $$012569 = $$0125;$60 = 0;
      break;
     }
     $51 = ((($49)) + 500|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ((($49)) + 504|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($52) + ($54)|0);
     $$sum13 = (($$sum9) + 2)|0;
     $$sum14 = (($$sum13) + ($43))|0;
     $56 = (($1) + ($$sum14)|0);
     $57 = ($56>>>0)>($55>>>0);
     if ($57) {
      $$0125$lcssa66 = $$0125;
      label = 8;
      break;
     }
    }
   }
  }
  $switch$split2D = ($43|0)<(65535);
  if ($switch$split2D) {
   label = 14;
   break;
  }
  switch ($43|0) {
  case 65535:  {
   break;
  }
  default: {
   $$0125$lcssa67 = $$0125;$$lcssa74 = $43;$$sum9$lcssa71 = $$sum9;
   label = 10;
   break L4;
  }
  }
  $62 = (($$0125) + 1)|0;
  $63 = ($62>>>0)<($3>>>0);
  if ($63) {
   $$0125 = $62;
  } else {
   $$0 = -1;
   label = 13;
   break;
  }
 }
 if ((label|0) == 8) {
  HEAP32[$9>>2] = 1;
  $$012569 = $$0125$lcssa66;$60 = 0;
 }
 else if ((label|0) == 13) {
  return ($$0|0);
 }
 else if ((label|0) == 14) {
  switch ($43|0) {
  case 0:  {
   $$012569 = $$0125;$60 = 0;
   break;
  }
  default: {
   $$0125$lcssa67 = $$0125;$$lcssa74 = $43;$$sum9$lcssa71 = $$sum9;
   label = 10;
  }
  }
 }
 if ((label|0) == 10) {
  $$sum12 = (($$lcssa74) + ($$sum9$lcssa71))|0;
  $58 = (($1) + ($$sum12)|0);
  $$012569 = $$0125$lcssa67;$60 = $58;
 }
 $59 = ((($cmap)) + 52|0);
 HEAP32[$59>>2] = $60;
 $61 = ((($cmap)) + 36|0);
 HEAP32[$61>>2] = $$012569;
 $$0 = 0;
 return ($$0|0);
}
function _tt_cmap2_get_subheader($table,$char_code) {
 $table = $table|0;
 $char_code = $char_code|0;
 var $$masked = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result$0 = 0, $sub$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($char_code>>>0)<(65536);
 if (!($0)) {
  $result$0 = 0;
  return ($result$0|0);
 }
 $1 = $char_code >>> 8;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ((($table)) + 518|0);
  $4 = $char_code << 1;
  $5 = $4 & 510;
  $$sum3 = (($5) + 6)|0;
  $6 = (($table) + ($$sum3)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $8 << 8;
  $$sum4 = (($5) + 7)|0;
  $10 = (($table) + ($$sum4)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $9 | $12;
  $14 = ($13|0)==(0);
  if ($14) {
   $sub$0 = $3;
  } else {
   $result$0 = 0;
   return ($result$0|0);
  }
 } else {
  $15 = $1 << 1;
  $$sum = (($15) + 6)|0;
  $16 = (($table) + ($$sum)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 << 8;
  $$sum1 = (($15) + 7)|0;
  $20 = (($table) + ($$sum1)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $$masked = $22 & 248;
  $23 = $$masked | $19;
  $$sum2 = (($23) + 518)|0;
  $24 = (($table) + ($$sum2)|0);
  $25 = ($23|0)==(0);
  if ($25) {
   $result$0 = 0;
   return ($result$0|0);
  } else {
   $sub$0 = $24;
  }
 }
 $result$0 = $sub$0;
 return ($result$0|0);
}
function _cid_get_interface($module,$cid_interface) {
 $module = $module|0;
 $cid_interface = $cid_interface|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_service_list_lookup(15444,$cid_interface)|0);
 return ($0|0);
}
function _cid_get_ros($face,$registry,$ordering,$supplement) {
 $face = $face|0;
 $registry = $registry|0;
 $ordering = $ordering|0;
 $supplement = $supplement|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($registry|0)==(0|0);
 if (!($0)) {
  $1 = ((($face)) + 152|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$registry>>2] = $2;
 }
 $3 = ($ordering|0)==(0|0);
 if (!($3)) {
  $4 = ((($face)) + 156|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$ordering>>2] = $5;
 }
 $6 = ($supplement|0)==(0|0);
 if ($6) {
  return 0;
 }
 $7 = ((($face)) + 160|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$supplement>>2] = $8;
 return 0;
}
function _cid_get_is_cid($face,$is_cid) {
 $face = $face|0;
 $is_cid = $is_cid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($is_cid|0)==(0|0);
 if ($0) {
  return 0;
 }
 HEAP8[$is_cid>>0] = 1;
 return 0;
}
function _cid_get_cid_from_glyph_index($face,$glyph_index,$cid) {
 $face = $face|0;
 $glyph_index = $glyph_index|0;
 $cid = $cid|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($cid|0)==(0|0);
 if ($0) {
  return 0;
 }
 HEAP32[$cid>>2] = $glyph_index;
 return 0;
}
function _cid_ps_get_font_info($face,$afont_info) {
 $face = $face|0;
 $afont_info = $afont_info|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 140|0);
 $1 = ((($0)) + 24|0);
 ;HEAP32[$afont_info>>2]=HEAP32[$1>>2]|0;HEAP32[$afont_info+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$afont_info+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$afont_info+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$afont_info+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$afont_info+20>>2]=HEAP32[$1+20>>2]|0;HEAP32[$afont_info+24>>2]=HEAP32[$1+24>>2]|0;HEAP32[$afont_info+28>>2]=HEAP32[$1+28>>2]|0;
 return 0;
}
function _cid_ps_get_font_extra($face,$afont_extra) {
 $face = $face|0;
 $afont_extra = $afont_extra|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 312|0);
 $1 = HEAP16[$0>>1]|0;
 HEAP16[$afont_extra>>1] = $1;
 return 0;
}
function _cid_get_postscript_name($face) {
 $face = $face|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 140|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return ($1|0);
 } else {
  $3 = HEAP8[$1>>0]|0;
  $4 = ($3<<24>>24)==(47);
  $5 = ((($1)) + 1|0);
  $$ = $4 ? $5 : $1;
  return ($$|0);
 }
 return (0)|0;
}
function _cid_slot_done($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($slot)) + 156|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 HEAP32[$2>>2] = 0;
 return;
}
function _cid_slot_init($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($slot)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 320|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return 0;
 }
 $5 = ((($1)) + 96|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_FT_Get_Module($8,88847)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  return 0;
 }
 $11 = ((($3)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 63]($9)|0);
 $14 = ((($slot)) + 156|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 36|0);
 HEAP32[$16>>2] = $13;
 return 0;
}
function _cid_size_done($cidsize) {
 $cidsize = $cidsize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cidsize)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = (_cid_size_get_globals_funcs($cidsize)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($3)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$0>>2]|0;
  FUNCTION_TABLE_vi[$6 & 127]($7);
 }
 HEAP32[$0>>2] = 0;
 return;
}
function _cid_size_init($cidsize) {
 $cidsize = $cidsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $globals = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $globals = sp;
 $0 = (_cid_size_get_globals_funcs($cidsize)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 }
 $2 = HEAP32[$cidsize>>2]|0;
 $3 = ((($2)) + 140|0);
 $4 = ((($3)) + 164|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + (($7*252)|0)|0);
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($2)) + 100|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiii[$9 & 127]($11,$8,$globals)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $error$0 = $12;
  STACKTOP = sp;return ($error$0|0);
 }
 $14 = HEAP32[$globals>>2]|0;
 $15 = ((($cidsize)) + 40|0);
 HEAP32[$15>>2] = $14;
 $error$0 = 0;
 STACKTOP = sp;return ($error$0|0);
}
function _cid_size_request($size,$req) {
 $size = $size|0;
 $req = $req|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 _FT_Request_Metrics($0,$req);
 $1 = (_cid_size_get_globals_funcs($size)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  return 0;
 }
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($size)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($size)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($size)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 (FUNCTION_TABLE_iiiiii[$4 & 63]($6,$8,$10,0,0)|0);
 return 0;
}
function _cid_face_done($cidface) {
 $cidface = $cidface|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($cidface|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($cidface)) + 140|0);
 $2 = ((($1)) + 24|0);
 $3 = ((($cidface)) + 100|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($cidface)) + 316|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($1)) + 160|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>(0);
  if ($10) {
   $n$01 = 0;
   while(1) {
    $11 = HEAP32[$5>>2]|0;
    $12 = (((($11) + ($n$01<<3)|0)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($13|0)==(0|0);
    if (!($14)) {
     $15 = HEAP32[$13>>2]|0;
     _ft_mem_free($4,$15);
     $16 = HEAP32[$12>>2]|0;
     HEAP32[$16>>2] = 0;
     $17 = HEAP32[$12>>2]|0;
     _ft_mem_free($4,$17);
     HEAP32[$12>>2] = 0;
    }
    $18 = (($n$01) + 1)|0;
    $19 = HEAP32[$8>>2]|0;
    $20 = ($18|0)<($19|0);
    if ($20) {
     $n$01 = $18;
    } else {
     break;
    }
   }
  }
  $21 = HEAP32[$5>>2]|0;
  _ft_mem_free($4,$21);
  HEAP32[$5>>2] = 0;
 }
 $22 = HEAP32[$2>>2]|0;
 _ft_mem_free($4,$22);
 HEAP32[$2>>2] = 0;
 $23 = ((($1)) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 _ft_mem_free($4,$24);
 HEAP32[$23>>2] = 0;
 $25 = ((($1)) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 _ft_mem_free($4,$26);
 HEAP32[$25>>2] = 0;
 $27 = ((($1)) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 _ft_mem_free($4,$28);
 HEAP32[$27>>2] = 0;
 $29 = ((($1)) + 40|0);
 $30 = HEAP32[$29>>2]|0;
 _ft_mem_free($4,$30);
 HEAP32[$29>>2] = 0;
 $31 = ((($1)) + 164|0);
 $32 = HEAP32[$31>>2]|0;
 _ft_mem_free($4,$32);
 HEAP32[$31>>2] = 0;
 $33 = ((($1)) + 160|0);
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$1>>2]|0;
 _ft_mem_free($4,$34);
 HEAP32[$1>>2] = 0;
 $35 = ((($1)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 _ft_mem_free($4,$36);
 HEAP32[$35>>2] = 0;
 $37 = ((($1)) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 _ft_mem_free($4,$38);
 HEAP32[$37>>2] = 0;
 $39 = ((($cidface)) + 20|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($cidface)) + 24|0);
 HEAP32[$40>>2] = 0;
 $41 = ((($cidface)) + 324|0);
 $42 = HEAP32[$41>>2]|0;
 _ft_mem_free($4,$42);
 HEAP32[$41>>2] = 0;
 $43 = ((($cidface)) + 328|0);
 $44 = HEAP32[$43>>2]|0;
 _ft_mem_free($4,$44);
 HEAP32[$43>>2] = 0;
 return;
}
function _cid_face_init($stream,$cidface,$face_index,$num_params,$params) {
 $stream = $stream|0;
 $cidface = $cidface|0;
 $face_index = $face_index|0;
 $num_params = $num_params|0;
 $params = $params|0;
 var $$ = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $error$0 = 0, $family$0$ph$be = 0, $family$0$ph10 = 0, $family$07 = 0, $family$07$lcssa = 0, $full$0$ph$be = 0, $full$0$ph9 = 0, $full$0$ph9$lcssa39 = 0, $not$ = 0, $or$cond = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$cidface>>2] = 1;
 $0 = ((($cidface)) + 136|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = ((($cidface)) + 96|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($4)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (_FT_Get_Module_Interface($6,89338)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $error$0 = 11;
    return ($error$0|0);
   } else {
    HEAP32[$0>>2] = $7;
    break;
   }
  }
 } while(0);
 $9 = ((($cidface)) + 320|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = ((($cidface)) + 96|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_FT_Get_Module_Interface($15,88847)|0);
  HEAP32[$9>>2] = $16;
 }
 $17 = (_FT_Stream_Seek($stream,0)|0);
 $18 = ($17|0)==(0);
 if (!($18)) {
  $error$0 = $17;
  return ($error$0|0);
 }
 $19 = (_cid_face_open($cidface,$face_index)|0);
 $20 = ($19|0)!=(0);
 $21 = ($face_index|0)<(0);
 $or$cond = $21 | $20;
 if ($or$cond) {
  $error$0 = $19;
  return ($error$0|0);
 }
 $22 = ($face_index|0)==(0);
 if (!($22)) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $23 = ((($cidface)) + 140|0);
 $24 = ((($23)) + 24|0);
 $25 = ((($23)) + 156|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($cidface)) + 16|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($cidface)) + 36|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($cidface)) + 4|0);
 HEAP32[$29>>2] = $face_index;
 $30 = ((($cidface)) + 8|0);
 $31 = ((($23)) + 48|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ($32<<24>>24)==(0);
 $$ = $33 ? 2065 : 2069;
 HEAP32[$30>>2] = $$;
 $34 = ((($23)) + 36|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($cidface)) + 20|0);
 HEAP32[$36>>2] = $35;
 $37 = ((($cidface)) + 24|0);
 HEAP32[$37>>2] = 89763;
 $38 = HEAP32[$36>>2]|0;
 $39 = ($38|0)==(0|0);
 L19: do {
  if ($39) {
   $54 = HEAP32[$23>>2]|0;
   $55 = ($54|0)==(0|0);
   if (!($55)) {
    HEAP32[$36>>2] = $54;
   }
  } else {
   $40 = ((($23)) + 32|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0|0);
   if (!($42)) {
    $43 = HEAP8[$41>>0]|0;
    $44 = ($43<<24>>24)==(0);
    if (!($44)) {
     $117 = $43;$family$0$ph10 = $38;$full$0$ph9 = $41;
     L24: while(1) {
      $47 = $117;$family$07 = $family$0$ph10;
      L26: while(1) {
       $45 = HEAP8[$family$07>>0]|0;
       $46 = ($47<<24>>24)==($45<<24>>24);
       if ($46) {
        $family$07$lcssa = $family$07;
        label = 14;
        break;
       }
       switch ($47<<24>>24) {
       case 45: case 32:  {
        $family$0$ph$be = $family$07;
        break L26;
        break;
       }
       default: {
       }
       }
       switch ($45<<24>>24) {
       case 0:  {
        $full$0$ph9$lcssa39 = $full$0$ph9;
        break L24;
        break;
       }
       case 45: case 32:  {
        break;
       }
       default: {
        break L19;
       }
       }
       $51 = ((($family$07)) + 1|0);
       $52 = HEAP8[$full$0$ph9>>0]|0;
       $53 = ($52<<24>>24)==(0);
       if ($53) {
        break L19;
       } else {
        $47 = $52;$family$07 = $51;
       }
      }
      if ((label|0) == 14) {
       label = 0;
       $48 = ((($family$07$lcssa)) + 1|0);
       $family$0$ph$be = $48;
      }
      $full$0$ph$be = ((($full$0$ph9)) + 1|0);
      $49 = HEAP8[$full$0$ph$be>>0]|0;
      $50 = ($49<<24>>24)==(0);
      if ($50) {
       break L19;
      } else {
       $117 = $49;$family$0$ph10 = $family$0$ph$be;$full$0$ph9 = $full$0$ph$be;
      }
     }
     HEAP32[$37>>2] = $full$0$ph9$lcssa39;
    }
   }
  }
 } while(0);
 $56 = ((($cidface)) + 12|0);
 $57 = ((($23)) + 44|0);
 $58 = HEAP32[$57>>2]|0;
 $not$ = ($58|0)!=(0);
 $$2 = $not$&1;
 HEAP32[$56>>2] = $$2;
 $59 = ((($23)) + 40|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0|0);
 do {
  if (!($61)) {
   $62 = (_strcmp($60,89783)|0);
   $63 = ($62|0)==(0);
   if (!($63)) {
    $64 = (_strcmp($60,88856)|0);
    $65 = ($64|0)==(0);
    if (!($65)) {
     break;
    }
   }
   $66 = HEAP32[$56>>2]|0;
   $67 = $66 | 2;
   HEAP32[$56>>2] = $67;
  }
 } while(0);
 $68 = ((($cidface)) + 28|0);
 HEAP32[$68>>2] = 0;
 $69 = ((($cidface)) + 32|0);
 HEAP32[$69>>2] = 0;
 $70 = ((($23)) + 56|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $71 >> 16;
 $73 = ((($cidface)) + 52|0);
 HEAP32[$73>>2] = $72;
 $74 = ((($23)) + 60|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $75 >> 16;
 $77 = ((($cidface)) + 56|0);
 HEAP32[$77>>2] = $76;
 $78 = ((($23)) + 64|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + 65535)|0;
 $81 = $80 >> 16;
 $82 = ((($cidface)) + 60|0);
 HEAP32[$82>>2] = $81;
 $83 = ((($23)) + 68|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + 65535)|0;
 $86 = $85 >> 16;
 $87 = ((($cidface)) + 64|0);
 HEAP32[$87>>2] = $86;
 $88 = ((($cidface)) + 68|0);
 $89 = HEAP16[$88>>1]|0;
 $90 = ($89<<16>>16)==(0);
 if ($90) {
  HEAP16[$88>>1] = 1000;
 }
 $91 = HEAP32[$87>>2]|0;
 $92 = $91&65535;
 $93 = ((($cidface)) + 70|0);
 HEAP16[$93>>1] = $92;
 $94 = HEAP32[$77>>2]|0;
 $95 = $94&65535;
 $96 = ((($cidface)) + 72|0);
 HEAP16[$96>>1] = $95;
 $97 = HEAP16[$88>>1]|0;
 $98 = $97&65535;
 $99 = ($98*12)|0;
 $100 = (($99>>>0) / 10)&-1;
 $101 = $100&65535;
 $102 = ((($cidface)) + 74|0);
 HEAP16[$102>>1] = $101;
 $sext = $100 << 16;
 $103 = $sext >> 16;
 $104 = HEAP16[$93>>1]|0;
 $105 = $104 << 16 >> 16;
 $106 = HEAP16[$96>>1]|0;
 $107 = $106 << 16 >> 16;
 $108 = (($105) - ($107))|0;
 $109 = ($103|0)<($108|0);
 if ($109) {
  $110 = $108&65535;
  HEAP16[$102>>1] = $110;
 }
 $111 = ((($24)) + 26|0);
 $112 = HEAP16[$111>>1]|0;
 $113 = ((($cidface)) + 80|0);
 HEAP16[$113>>1] = $112;
 $114 = ((($23)) + 52|0);
 $115 = HEAP16[$114>>1]|0;
 $116 = ((($cidface)) + 82|0);
 HEAP16[$116>>1] = $115;
 $error$0 = $19;
 return ($error$0|0);
}
function _cid_driver_init($driver) {
 $driver = $driver|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _cid_driver_done($driver) {
 $driver = $driver|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _cid_size_get_globals_funcs($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 320|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 96|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_FT_Get_Module($6,88847)|0);
 $8 = ($7|0)!=(0|0);
 $9 = ($2|0)!=(0|0);
 $or$cond = $9 & $8;
 if (!($or$cond)) {
  $13 = 0;
  return ($13|0);
 }
 $10 = HEAP32[$2>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $13 = 0;
  return ($13|0);
 }
 $12 = (FUNCTION_TABLE_ii[$10 & 63]($7)|0);
 $13 = $12;
 return ($13|0);
}
function _cid_get_offset($start,$offsize) {
 $start = $start|0;
 $offsize = $offsize|0;
 var $$01 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0$lcssa = 0, $p$03 = 0, $result$0$lcssa = 0, $result$02 = 0, $scevgep = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$start>>2]|0;
 $1 = ($offsize<<24>>24)==(0);
 if ($1) {
  $p$0$lcssa = $0;$result$0$lcssa = 0;
  HEAP32[$start>>2] = $p$0$lcssa;
  return ($result$0$lcssa|0);
 }
 $2 = (($offsize) + -1)<<24>>24;
 $3 = $2&255;
 $4 = (($3) + 1)|0;
 $$01 = $offsize;$p$03 = $0;$result$02 = 0;
 while(1) {
  $5 = $result$02 << 8;
  $6 = ((($p$03)) + 1|0);
  $7 = HEAP8[$p$03>>0]|0;
  $8 = $7&255;
  $9 = $8 | $5;
  $10 = (($$01) + -1)<<24>>24;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $$lcssa = $9;
   break;
  } else {
   $$01 = $10;$p$03 = $6;$result$02 = $9;
  }
 }
 $scevgep = (($0) + ($4)|0);
 $p$0$lcssa = $scevgep;$result$0$lcssa = $$lcssa;
 HEAP32[$start>>2] = $p$0$lcssa;
 return ($result$0$lcssa|0);
}
function _cid_face_open($face,$face_index) {
 $face = $face|0;
 $face_index = $face_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $error = 0, $loader = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $loader = sp + 8|0;
 $error = sp;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 _cid_init_loader($loader);
 $2 = ((($face)) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($face)) + 136|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_cid_parser_new($loader,$3,$4,$6)|0);
 HEAP32[$error>>2] = $7;
 $8 = ($7|0)==(0);
 do {
  if ($8) {
   $9 = ((($loader)) + 76|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($loader)) + 80|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_cid_parse_dict($face,$loader,$10,$12)|0);
   HEAP32[$error>>2] = $13;
   $14 = ($13|0)!=(0);
   $15 = ($face_index|0)<(0);
   $or$cond = $15 | $14;
   if (!($or$cond)) {
    $16 = (_ft_mem_alloc($1,40,$error)|0);
    $17 = ((($face)) + 328|0);
    HEAP32[$17>>2] = $16;
    $18 = HEAP32[$error>>2]|0;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = ((($loader)) + 88|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0);
     if ($22) {
      $36 = HEAP32[$2>>2]|0;
      dest=$16; src=$36; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      $37 = ((($loader)) + 84|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ((($face)) + 308|0);
      HEAP32[$39>>2] = $38;
     } else {
      $23 = (_ft_mem_alloc($1,$21,$error)|0);
      $24 = ((($face)) + 324|0);
      HEAP32[$24>>2] = $23;
      $25 = HEAP32[$error>>2]|0;
      $26 = ($25|0)==(0);
      if (!($26)) {
       break;
      }
      $27 = HEAP32[$20>>2]|0;
      $28 = ((($loader)) + 84|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (_cid_hex_to_binary($23,$27,$29,$face)|0);
      $31 = ($30|0)==(0);
      if (!($31)) {
       break;
      }
      $32 = HEAP32[$17>>2]|0;
      $33 = HEAP32[$24>>2]|0;
      $34 = HEAP32[$20>>2]|0;
      _FT_Stream_OpenMemory($32,$33,$34);
      $35 = ((($face)) + 308|0);
      HEAP32[$35>>2] = 0;
     }
     $40 = (_cid_read_subrs($face)|0);
     HEAP32[$error>>2] = $40;
    }
   }
  }
 } while(0);
 _cid_done_loader($loader);
 $41 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function _cid_init_loader($loader) {
 $loader = $loader|0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$loader; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _cid_parse_dict($face,$loader,$base,$size) {
 $face = $face|0;
 $loader = $loader|0;
 $base = $base|0;
 $size = $size|0;
 var $$ = 0, $$0 = 0, $$off = 0, $$sum = 0, $$sum3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur$0 = 0, $cur$110 = 0, $exitcond = 0, $keyword$015 = 0, $keyword$01534 = 0, $n$011 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$loader>>2] = $base;
 $0 = (($base) + ($size)|0);
 $1 = ((($loader)) + 8|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($loader)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($loader)) + 28|0);
 $$sum3 = (($size) + -18)|0;
 $4 = (($base) + ($$sum3)|0);
 $5 = ((($loader)) + 32|0);
 $6 = ((($face)) + 300|0);
 $7 = ((($loader)) + 96|0);
 $cur$0 = $base;
 L1: while(1) {
  HEAP32[$loader>>2] = $cur$0;
  $8 = HEAP32[$3>>2]|0;
  FUNCTION_TABLE_vi[$8 & 127]($loader);
  $9 = HEAP32[$loader>>2]|0;
  $10 = ($9>>>0)<($0>>>0);
  $11 = ((($9)) + -17|0);
  $$ = $10 ? $11 : $4;
  $12 = ($cur$0>>>0)<($$>>>0);
  if ($12) {
   $cur$110 = $cur$0;
   while(1) {
    $13 = HEAP8[$cur$110>>0]|0;
    $14 = ($13<<24>>24)==(37);
    if ($14) {
     $15 = (_strncmp($cur$110,88862,17)|0);
     $16 = ($15|0)==(0);
     if ($16) {
      $17 = HEAP32[$6>>2]|0;
      $18 = ($17|0)>(0);
      if ($18) {
       $19 = HEAP32[$7>>2]|0;
       $20 = (($19) + 1)|0;
       HEAP32[$7>>2] = $20;
      }
     }
    }
    $21 = ((($cur$110)) + 1|0);
    $exitcond = ($21|0)==($$|0);
    if ($exitcond) {
     break;
    } else {
     $cur$110 = $21;
    }
   }
  }
  $22 = HEAP32[$loader>>2]|0;
  $23 = ($22>>>0)<($0>>>0);
  if (!($23)) {
   break;
  }
  $24 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$24 & 127]($loader);
  $25 = HEAP32[$loader>>2]|0;
  $26 = ($25>>>0)<($0>>>0);
  if (!($26)) {
   break;
  }
  $27 = HEAP32[$2>>2]|0;
  $28 = ($27|0)==(0);
  if (!($28)) {
   break;
  }
  $29 = HEAP8[$22>>0]|0;
  $30 = ($29<<24>>24)==(47);
  $31 = ((($22)) + 2|0);
  $32 = ($31>>>0)<($0>>>0);
  $or$cond = $32 & $30;
  L15: do {
   if ($or$cond) {
    $33 = ((($22)) + 1|0);
    $34 = $25;
    $35 = $33;
    $36 = (($34) - ($35))|0;
    $$off = (($36) + -1)|0;
    $37 = ($$off>>>0)<(21);
    if ($37) {
     $38 = HEAP8[$33>>0]|0;
     $39 = ($36|0)>(1);
     $41 = 88880;$keyword$015 = 15520;
     L18: while(1) {
      $40 = HEAP8[$41>>0]|0;
      $42 = ($38<<24>>24)==($40<<24>>24);
      L20: do {
       if ($42) {
        $43 = (_strlen($41)|0);
        $44 = ($36|0)==($43|0);
        if ($44) {
         if ($39) {
          $n$011 = 1;
         } else {
          $keyword$01534 = $keyword$015;
          break L18;
         }
         while(1) {
          $$sum = (($n$011) + 1)|0;
          $47 = (($22) + ($$sum)|0);
          $48 = HEAP8[$47>>0]|0;
          $49 = (($41) + ($n$011)|0);
          $50 = HEAP8[$49>>0]|0;
          $51 = ($48<<24>>24)==($50<<24>>24);
          $46 = (($n$011) + 1)|0;
          if (!($51)) {
           break L20;
          }
          $45 = ($46|0)<($36|0);
          if ($45) {
           $n$011 = $46;
          } else {
           $keyword$01534 = $keyword$015;
           break L18;
          }
         }
        }
       }
      } while(0);
      $54 = ((($keyword$015)) + 36|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($55|0)==(0|0);
      if ($56) {
       break L15;
      } else {
       $41 = $55;$keyword$015 = $54;
      }
     }
     $52 = (_cid_load_keyword($face,$loader,$keyword$01534)|0);
     HEAP32[$2>>2] = $52;
     $53 = ($52|0)==(0);
     if (!($53)) {
      $$0 = $52;
      label = 23;
      break L1;
     }
    }
   }
  } while(0);
  $57 = HEAP32[$loader>>2]|0;
  $cur$0 = $57;
 }
 if ((label|0) == 23) {
  return ($$0|0);
 }
 $58 = HEAP32[$2>>2]|0;
 $$0 = $58;
 return ($$0|0);
}
function _cid_hex_to_binary($data,$data_len,$offset,$face) {
 $data = $data|0;
 $data_len = $data_len|0;
 $offset = $offset|0;
 $face = $face|0;
 var $$lcssa = 0, $$lcssa92 = 0, $$lcssa93 = 0, $$off = 0, $$off2 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $d$0$ph25 = 0, $d$1 = 0, $done$1 = 0, $error$0 = 0, $p$0$ph28 = 0, $p$017 = 0;
 var $p$1 = 0, $p$1$lcssa = 0, $p$1$lcssa88 = 0, $p$1$lcssa89 = 0, $p$191 = 0, $plimit$0$ph27 = 0, $plimit$016 = 0, $plimit$1 = 0, $plimit$1$lcssa = 0, $plimit$1$lcssa84 = 0, $plimit$1$lcssa85 = 0, $plimit$187 = 0, $upper_nibble$0$ph26 = 0, $val$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $buffer = sp;
 $0 = ((($face)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_FT_Stream_Seek($1,$offset)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $error$0 = $2;
  STACKTOP = sp;return ($error$0|0);
 }
 $4 = (($data) + ($data_len)|0);
 $5 = ($data_len|0)>(0);
 if (!($5)) {
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 }
 $6 = ((($1)) + 4|0);
 $d$0$ph25 = $data;$p$0$ph28 = $buffer;$plimit$0$ph27 = $buffer;$upper_nibble$0$ph26 = 1;
 L7: while(1) {
  $p$017 = $p$0$ph28;$plimit$016 = $plimit$0$ph27;
  L9: while(1) {
   $7 = ($p$017>>>0)<($plimit$016>>>0);
   if ($7) {
    $p$1 = $p$017;$plimit$1 = $plimit$016;
   } else {
    $8 = (_FT_Stream_Pos($1)|0);
    $9 = HEAP32[$6>>2]|0;
    $10 = (($9) - ($8))|0;
    $11 = ($9|0)==($8|0);
    if ($11) {
     $error$0 = 160;
     label = 22;
     break L7;
    }
    $12 = ($10>>>0)<(256);
    $13 = $12 ? $10 : 256;
    $14 = (_FT_Stream_Read($1,$buffer,$13)|0);
    $15 = ($14|0)==(0);
    if (!($15)) {
     $error$0 = $14;
     label = 22;
     break L7;
    }
    $16 = (_FT_Stream_Pos($1)|0);
    $$sum = (($16) - ($8))|0;
    $17 = (($buffer) + ($$sum)|0);
    $p$1 = $buffer;$plimit$1 = $17;
   }
   $18 = HEAP8[$p$1>>0]|0;
   $19 = $18&255;
   $20 = (($19) + -48)|0;
   $21 = ($20>>>0)<(10);
   if ($21) {
    $$lcssa = $19;$p$1$lcssa = $p$1;$plimit$1$lcssa = $plimit$1;
    label = 10;
    break;
   }
   $$off = (($18) + -97)<<24>>24;
   $24 = ($$off&255)<(6);
   if ($24) {
    $$lcssa92 = $19;$p$1$lcssa88 = $p$1;$plimit$1$lcssa84 = $plimit$1;
    label = 12;
    break;
   }
   $$off2 = (($18) + -65)<<24>>24;
   $27 = ($$off2&255)<(6);
   if ($27) {
    $$lcssa93 = $19;$p$1$lcssa89 = $p$1;$plimit$1$lcssa85 = $plimit$1;
    label = 14;
    break;
   }
   switch ($18<<24>>24) {
   case 62:  {
    $done$1 = 1;$p$191 = $p$1;$plimit$187 = $plimit$1;$val$0 = 0;
    break L9;
    break;
   }
   case 0: case 12: case 10: case 13: case 9: case 32:  {
    break;
   }
   default: {
    $error$0 = 160;
    label = 22;
    break L7;
   }
   }
   $30 = ((($p$1)) + 1|0);
   $p$017 = $30;$plimit$016 = $plimit$1;
  }
  if ((label|0) == 10) {
   label = 0;
   $22 = (($$lcssa) + 208)|0;
   $23 = $22&255;
   $done$1 = 0;$p$191 = $p$1$lcssa;$plimit$187 = $plimit$1$lcssa;$val$0 = $23;
  }
  else if ((label|0) == 12) {
   label = 0;
   $25 = (($$lcssa92) + 159)|0;
   $26 = $25&255;
   $done$1 = 0;$p$191 = $p$1$lcssa88;$plimit$187 = $plimit$1$lcssa84;$val$0 = $26;
  }
  else if ((label|0) == 14) {
   label = 0;
   $28 = (($$lcssa93) + 201)|0;
   $29 = $28&255;
   $done$1 = 0;$p$191 = $p$1$lcssa89;$plimit$187 = $plimit$1$lcssa85;$val$0 = $29;
  }
  $31 = ($upper_nibble$0$ph26<<24>>24)==(0);
  if ($31) {
   $35 = HEAP8[$d$0$ph25>>0]|0;
   $36 = $35&255;
   $37 = $val$0&255;
   $38 = (($36) + ($37))|0;
   $39 = $38&255;
   HEAP8[$d$0$ph25>>0] = $39;
   $40 = ((($d$0$ph25)) + 1|0);
   $d$1 = $40;
  } else {
   $32 = $val$0&255;
   $33 = $32 << 4;
   $34 = $33&255;
   HEAP8[$d$0$ph25>>0] = $34;
   $d$1 = $d$0$ph25;
  }
  $41 = ($done$1<<24>>24)==(0);
  if (!($41)) {
   $error$0 = 0;
   label = 22;
   break;
  }
  $42 = $upper_nibble$0$ph26&255;
  $43 = (1 - ($42))|0;
  $44 = $43&255;
  $45 = ((($p$191)) + 1|0);
  $46 = ($d$1>>>0)<($4>>>0);
  if ($46) {
   $d$0$ph25 = $d$1;$p$0$ph28 = $45;$plimit$0$ph27 = $plimit$187;$upper_nibble$0$ph26 = $44;
  } else {
   $error$0 = 0;
   label = 22;
   break;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($error$0|0);
 }
 return (0)|0;
}
function _cid_read_subrs($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$011 = 0, $count$112 = 0, $count$216 = 0, $count$319 = 0, $error = 0, $exitcond = 0, $max_offsets$022 = 0, $max_offsets$1 = 0;
 var $n$024 = 0, $n$110 = 0, $offsets$021 = 0, $offsets$021$lcssa = 0, $offsets$021$lcssa50 = 0, $offsets$1 = 0, $offsets$2 = 0, $offsets$3 = 0, $or$cond = 0, $p = 0, $subr$023 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 4|0;
 $p = sp;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 328|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 136|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($face)) + 300|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_ft_mem_realloc($1,8,0,$7,0,$error)|0);
 $9 = ((($face)) + 316|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$error>>2]|0;
 $11 = ($10|0)==(0);
 if (!($11)) {
  $offsets$2 = 0;
  _ft_mem_free($1,$offsets$2);
  $110 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($110|0);
 }
 $12 = HEAP32[$6>>2]|0;
 $13 = ($12|0)>(0);
 if (!($13)) {
  $offsets$2 = 0;
  _ft_mem_free($1,$offsets$2);
  $110 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($110|0);
 }
 $14 = ((($face)) + 304|0);
 $15 = ((($face)) + 308|0);
 $16 = ((($3)) + 32|0);
 $17 = ((($5)) + 16|0);
 $max_offsets$022 = 0;$n$024 = 0;$offsets$021 = 0;$subr$023 = $8;
 L7: while(1) {
  $18 = HEAP32[$14>>2]|0;
  $19 = (((($18) + (($n$024*252)|0)|0)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (((($18) + (($n$024*252)|0)|0)) + 240|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(-1);
  if ($23) {
   $offsets$021$lcssa = $offsets$021;
   label = 5;
   break;
  }
  $24 = (($22) + 1)|0;
  $25 = ($24>>>0)>($max_offsets$022>>>0);
  if ($25) {
   $26 = (($22) + 4)|0;
   $27 = $26 & -4;
   $28 = ($27>>>0)>($max_offsets$022>>>0);
   if (!($28)) {
    $offsets$021$lcssa50 = $offsets$021;
    label = 8;
    break;
   }
   $29 = (_ft_mem_realloc($1,4,$max_offsets$022,$27,$offsets$021,$error)|0);
   $30 = HEAP32[$error>>2]|0;
   $31 = ($30|0)==(0);
   if ($31) {
    $max_offsets$1 = $27;$offsets$1 = $29;
   } else {
    $offsets$3 = $29;
    break;
   }
  } else {
   $max_offsets$1 = $max_offsets$022;$offsets$1 = $offsets$021;
  }
  $32 = HEAP32[$15>>2]|0;
  $33 = (((($18) + (($n$024*252)|0)|0)) + 244|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($32))|0;
  $36 = (_FT_Stream_Seek($3,$35)|0);
  HEAP32[$error>>2] = $36;
  $37 = ($36|0)==(0);
  if (!($37)) {
   $offsets$3 = $offsets$1;
   break;
  }
  $38 = (((($18) + (($n$024*252)|0)|0)) + 248|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($39, $24)|0;
  $41 = (_FT_Stream_EnterFrame($3,$40)|0);
  HEAP32[$error>>2] = $41;
  $42 = ($41|0)==(0);
  if (!($42)) {
   $offsets$3 = $offsets$1;
   break;
  }
  $43 = HEAP32[$16>>2]|0;
  HEAP32[$p>>2] = $43;
  $count$011 = 0;
  while(1) {
   $44 = HEAP32[$38>>2]|0;
   $45 = $44&255;
   $46 = (_cid_get_offset($p,$45)|0);
   $47 = (($offsets$1) + ($count$011<<2)|0);
   HEAP32[$47>>2] = $46;
   $48 = (($count$011) + 1)|0;
   $49 = ($48>>>0)>($22>>>0);
   if ($49) {
    break;
   } else {
    $count$011 = $48;
   }
  }
  _FT_Stream_ExitFrame($3);
  $50 = ($22|0)==(0);
  if (!($50)) {
   $count$112 = 1;
   while(1) {
    $53 = (($count$112) + -1)|0;
    $54 = (($offsets$1) + ($53<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (($offsets$1) + ($count$112<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($55>>>0)>($57>>>0);
    $52 = (($count$112) + 1)|0;
    if ($58) {
     $offsets$3 = $offsets$1;
     break L7;
    }
    $51 = ($52>>>0)>($22>>>0);
    if ($51) {
     break;
    } else {
     $count$112 = $52;
    }
   }
  }
  $59 = (($offsets$1) + ($22<<2)|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = HEAP32[$offsets$1>>2]|0;
  $62 = (($60) - ($61))|0;
  $63 = (_ft_mem_realloc($1,4,0,$24,0,$error)|0);
  $64 = ((($subr$023)) + 4|0);
  HEAP32[$64>>2] = $63;
  $65 = HEAP32[$error>>2]|0;
  $66 = ($65|0)==(0);
  if (!($66)) {
   $offsets$3 = $offsets$1;
   break;
  }
  $67 = (_ft_mem_alloc($1,$62,$error)|0);
  $68 = HEAP32[$64>>2]|0;
  HEAP32[$68>>2] = $67;
  $69 = HEAP32[$error>>2]|0;
  $70 = ($69|0)==(0);
  if (!($70)) {
   $offsets$3 = $offsets$1;
   break;
  }
  $71 = HEAP32[$15>>2]|0;
  $72 = HEAP32[$offsets$1>>2]|0;
  $73 = (($72) + ($71))|0;
  $74 = (_FT_Stream_Seek($3,$73)|0);
  HEAP32[$error>>2] = $74;
  $75 = ($74|0)==(0);
  if (!($75)) {
   $offsets$3 = $offsets$1;
   break;
  }
  $76 = HEAP32[$64>>2]|0;
  $77 = HEAP32[$76>>2]|0;
  $78 = (_FT_Stream_Read($3,$77,$62)|0);
  HEAP32[$error>>2] = $78;
  $79 = ($78|0)==(0);
  if (!($79)) {
   $offsets$3 = $offsets$1;
   break;
  }
  $80 = ($22|0)==(0);
  if (!($80)) {
   $count$216 = 1;
   while(1) {
    $81 = (($offsets$1) + ($count$216<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($count$216) + -1)|0;
    $84 = (($offsets$1) + ($83<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($82) - ($85))|0;
    $87 = HEAP32[$64>>2]|0;
    $88 = (($87) + ($83<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($89) + ($86)|0);
    $91 = (($87) + ($count$216<<2)|0);
    HEAP32[$91>>2] = $90;
    $92 = (($count$216) + 1)|0;
    $93 = ($92>>>0)>($22>>>0);
    if ($93) {
     break;
    } else {
     $count$216 = $92;
    }
   }
  }
  $94 = ($20|0)<(0);
  $95 = ($22|0)==(0);
  $or$cond = $94 | $95;
  if (!($or$cond)) {
   $count$319 = 0;
   while(1) {
    $96 = (($count$319) + 1)|0;
    $97 = (($offsets$1) + ($96<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($offsets$1) + ($count$319<<2)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($98) - ($100))|0;
    $102 = HEAP32[$17>>2]|0;
    $103 = HEAP32[$64>>2]|0;
    $104 = (($103) + ($count$319<<2)|0);
    $105 = HEAP32[$104>>2]|0;
    FUNCTION_TABLE_viii[$102 & 31]($105,$101,4330);
    $exitcond = ($96|0)==($22|0);
    if ($exitcond) {
     break;
    } else {
     $count$319 = $96;
    }
   }
  }
  HEAP32[$subr$023>>2] = $22;
  $106 = (($n$024) + 1)|0;
  $107 = ((($subr$023)) + 8|0);
  $108 = HEAP32[$6>>2]|0;
  $109 = ($106|0)<($108|0);
  if ($109) {
   $max_offsets$022 = $max_offsets$1;$n$024 = $106;$offsets$021 = $offsets$1;$subr$023 = $107;
  } else {
   $offsets$2 = $offsets$1;
   label = 26;
   break;
  }
 }
 if ((label|0) == 5) {
  HEAP32[$error>>2] = 160;
  $offsets$3 = $offsets$021$lcssa;
 }
 else if ((label|0) == 8) {
  HEAP32[$error>>2] = 160;
  $offsets$3 = $offsets$021$lcssa50;
 }
 else if ((label|0) == 26) {
  _ft_mem_free($1,$offsets$2);
  $110 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($110|0);
 }
 $111 = HEAP32[$9>>2]|0;
 $112 = ($111|0)==(0|0);
 if ($112) {
  $offsets$2 = $offsets$3;
  _ft_mem_free($1,$offsets$2);
  $110 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($110|0);
 }
 $113 = HEAP32[$6>>2]|0;
 $114 = ($113|0)>(0);
 if ($114) {
  $n$110 = 0;
  while(1) {
   $115 = HEAP32[$9>>2]|0;
   $116 = (((($115) + ($n$110<<3)|0)) + 4|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ($117|0)==(0|0);
   if (!($118)) {
    $119 = HEAP32[$117>>2]|0;
    _ft_mem_free($1,$119);
    $120 = HEAP32[$9>>2]|0;
    $121 = (((($120) + ($n$110<<3)|0)) + 4|0);
    $122 = HEAP32[$121>>2]|0;
    HEAP32[$122>>2] = 0;
   }
   $123 = HEAP32[$9>>2]|0;
   $124 = (((($123) + ($n$110<<3)|0)) + 4|0);
   $125 = HEAP32[$124>>2]|0;
   _ft_mem_free($1,$125);
   $126 = HEAP32[$9>>2]|0;
   $127 = (((($126) + ($n$110<<3)|0)) + 4|0);
   HEAP32[$127>>2] = 0;
   $128 = (($n$110) + 1)|0;
   $129 = HEAP32[$6>>2]|0;
   $130 = ($128|0)<($129|0);
   if ($130) {
    $n$110 = $128;
   } else {
    break;
   }
  }
 }
 $131 = HEAP32[$9>>2]|0;
 _ft_mem_free($1,$131);
 HEAP32[$9>>2] = 0;
 $offsets$2 = $offsets$3;
 _ft_mem_free($1,$offsets$2);
 $110 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($110|0);
}
function _cid_done_loader($loader) {
 $loader = $loader|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cid_parser_done($loader);
 return;
}
function _cid_load_keyword($face,$loader,$keyword) {
 $face = $face|0;
 $loader = $loader|0;
 $keyword = $keyword|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dummy_object = 0, $error$0 = 0, $object$0 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dummy_object = sp;
 $0 = ((($face)) + 140|0);
 $1 = ((($keyword)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(10);
 if ($3) {
  $4 = ((($keyword)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vii[$5 & 31]($face,$loader);
  $6 = ((($loader)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $error$0 = $7;
  STACKTOP = sp;return ($error$0|0);
 }
 $8 = ((($keyword)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 L5: do {
  switch ($9|0) {
  case 0:  {
   $object$0 = $0;
   break;
  }
  case 3:  {
   $10 = ((($face)) + 164|0);
   $object$0 = $10;
   break;
  }
  case 2:  {
   $11 = ((($face)) + 312|0);
   $object$0 = $11;
   break;
  }
  case 5:  {
   $12 = ((($face)) + 196|0);
   $object$0 = $12;
   break;
  }
  default: {
   $13 = ((($loader)) + 96|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)<(0);
   if ($15) {
    $error$0 = 160;
    STACKTOP = sp;return ($error$0|0);
   }
   $16 = ((($face)) + 300|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($14|0)<($17|0);
   if ($18) {
    $19 = ((($face)) + 304|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + (($14*252)|0)|0);
    $object$0 = $21;
    break L5;
   } else {
    $error$0 = 160;
    STACKTOP = sp;return ($error$0|0);
   }
  }
  }
 } while(0);
 HEAP32[$dummy_object>>2] = $object$0;
 $22 = HEAP32[$1>>2]|0;
 $23 = $22 & -2;
 $switch = ($23|0)==(8);
 if ($switch) {
  $24 = ((($loader)) + 68|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (FUNCTION_TABLE_iiiiii[$25 & 63]($loader,$keyword,$dummy_object,0,0)|0);
  $error$0 = $26;
  STACKTOP = sp;return ($error$0|0);
 } else {
  $27 = ((($loader)) + 64|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (FUNCTION_TABLE_iiiiii[$28 & 63]($loader,$keyword,$dummy_object,0,0)|0);
  $error$0 = $29;
  STACKTOP = sp;return ($error$0|0);
 }
 return (0)|0;
}
function _parse_fd_array($face,$parser) {
 $face = $face|0;
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0;
 var $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$error>>2] = 0;
 $2 = ((($parser)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 63]($parser)|0);
 $5 = ((($face)) + 304|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = (_ft_mem_realloc($1,252,0,$4,0,$error)|0);
  HEAP32[$5>>2] = $8;
  $9 = HEAP32[$error>>2]|0;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = ((($face)) + 300|0);
   HEAP32[$11>>2] = $4;
   $12 = ($4|0)>(0);
   if ($12) {
    $13 = HEAP32[$5>>2]|0;
    $14 = HEAP32[$11>>2]|0;
    $n$01 = 0;
    while(1) {
     $15 = (((($13) + (($n$01*252)|0)|0)) + 4|0);
     HEAP32[$15>>2] = 4;
     $16 = (($n$01) + 1)|0;
     $17 = ($16|0)<($14|0);
     if ($17) {
      $n$01 = $16;
     } else {
      break;
     }
    }
   }
  }
 }
 $18 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($18|0);
}
function _cid_parse_font_matrix($face,$parser) {
 $face = $face|0;
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $temp = sp;
 $0 = ((($parser)) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if (!($2)) {
  STACKTOP = sp;return 0;
 }
 $3 = ((($face)) + 300|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)<($4|0);
 if (!($5)) {
  STACKTOP = sp;return 0;
 }
 $6 = ((($face)) + 304|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($parser)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 (FUNCTION_TABLE_iiiii[$9 & 63]($parser,6,$temp,3)|0);
 $10 = ((($temp)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)<(0);
 $13 = (0 - ($11))|0;
 $14 = $12 ? $13 : $11;
 $15 = (_FT_DivFix($14,1000)|0);
 $16 = (_FT_DivFix(65536,$15)|0);
 $17 = $16&65535;
 $18 = ((($face)) + 68|0);
 HEAP16[$18>>1] = $17;
 $19 = ($14|0)==(65536);
 if (!($19)) {
  $20 = HEAP32[$temp>>2]|0;
  $21 = (_FT_DivFix($20,$14)|0);
  HEAP32[$temp>>2] = $21;
  $22 = ((($temp)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_FT_DivFix($23,$14)|0);
  HEAP32[$22>>2] = $24;
  $25 = ((($temp)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_FT_DivFix($26,$14)|0);
  HEAP32[$25>>2] = $27;
  $28 = ((($temp)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_FT_DivFix($29,$14)|0);
  HEAP32[$28>>2] = $30;
  $31 = ((($temp)) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_FT_DivFix($32,$14)|0);
  HEAP32[$31>>2] = $33;
  HEAP32[$10>>2] = 65536;
 }
 $34 = HEAP32[$temp>>2]|0;
 $35 = (((($7) + (($1*252)|0)|0)) + 216|0);
 HEAP32[$35>>2] = $34;
 $36 = ((($temp)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (((($7) + (($1*252)|0)|0)) + 224|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($temp)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (((($7) + (($1*252)|0)|0)) + 220|0);
 HEAP32[$41>>2] = $40;
 $42 = HEAP32[$10>>2]|0;
 $43 = (((($7) + (($1*252)|0)|0)) + 228|0);
 HEAP32[$43>>2] = $42;
 $44 = ((($temp)) + 16|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 >> 16;
 $47 = (((($7) + (($1*252)|0)|0)) + 232|0);
 HEAP32[$47>>2] = $46;
 $48 = ((($temp)) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >> 16;
 $51 = (((($7) + (($1*252)|0)|0)) + 236|0);
 HEAP32[$51>>2] = $50;
 STACKTOP = sp;return 0;
}
function _parse_expansion_factor($face,$parser) {
 $face = $face|0;
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if (!($2)) {
  return 0;
 }
 $3 = ((($face)) + 300|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)<($4|0);
 if (!($5)) {
  return 0;
 }
 $6 = ((($face)) + 304|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($parser)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (FUNCTION_TABLE_iii[$9 & 255]($parser,0)|0);
 $11 = (((($7) + (($1*252)|0)|0)) + 208|0);
 HEAP32[$11>>2] = $10;
 $12 = (((($7) + (($1*252)|0)|0)) + 180|0);
 HEAP32[$12>>2] = $10;
 return 0;
}
function _T42_Get_Interface($module,$t42_interface) {
 $module = $module|0;
 $t42_interface = $t42_interface|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_service_list_lookup(17460,$t42_interface)|0);
 return ($0|0);
}
function _t42_ps_get_font_info($face,$afont_info) {
 $face = $face|0;
 $afont_info = $afont_info|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 132|0);
 ;HEAP32[$afont_info>>2]=HEAP32[$0>>2]|0;HEAP32[$afont_info+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$afont_info+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$afont_info+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$afont_info+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$afont_info+20>>2]=HEAP32[$0+20>>2]|0;HEAP32[$afont_info+24>>2]=HEAP32[$0+24>>2]|0;HEAP32[$afont_info+28>>2]=HEAP32[$0+28>>2]|0;
 return 0;
}
function _t42_ps_get_font_extra($face,$afont_extra) {
 $face = $face|0;
 $afont_extra = $afont_extra|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 164|0);
 $1 = HEAP16[$0>>1]|0;
 HEAP16[$afont_extra>>1] = $1;
 return 0;
}
function _t42_ps_has_glyph_names($face) {
 $face = $face|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _t42_ps_get_font_private($face,$afont_private) {
 $face = $face|0;
 $afont_private = $afont_private|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 168|0);
 _memcpy(($afont_private|0),($0|0),196)|0;
 return 0;
}
function _t42_get_ps_font_name($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 364|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _t42_get_glyph_name($face,$glyph_index,$buffer,$buffer_max) {
 $face = $face|0;
 $glyph_index = $glyph_index|0;
 $buffer = $buffer|0;
 $buffer_max = $buffer_max|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 420|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($glyph_index<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 (_ft_mem_strcpyn($buffer,$3,$buffer_max)|0);
 return 0;
}
function _t42_get_name_index($face,$glyph_name) {
 $face = $face|0;
 $glyph_name = $glyph_name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$02 = 0, $i$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 416|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($face)) + 420|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP8[$glyph_name>>0]|0;
 $i$02 = 0;
 while(1) {
  $6 = (($4) + ($i$02<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP8[$7>>0]|0;
  $9 = ($5<<24>>24)==($8<<24>>24);
  if ($9) {
   $10 = (_strcmp($glyph_name,$7)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $i$02$lcssa = $i$02;
    break;
   }
  }
  $17 = (($i$02) + 1)|0;
  $18 = HEAP32[$0>>2]|0;
  $19 = ($17|0)<($18|0);
  if ($19) {
   $i$02 = $17;
  } else {
   $$0 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $12 = ((($face)) + 424|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($i$02$lcssa<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_atol($15)|0);
 $$0 = $16;
 return ($$0|0);
}
function _T42_Face_Init($stream,$t42face,$face_index,$num_params,$params) {
 $stream = $stream|0;
 $t42face = $t42face|0;
 $face_index = $face_index|0;
 $num_params = $num_params|0;
 $params = $params|0;
 var $$4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $args = 0, $charmap = 0, $clazz$0 = 0, $clazz$0$in = 0;
 var $error$0 = 0, $family$0$ph$be = 0, $family$0$ph12 = 0, $family$09 = 0, $family$09$lcssa = 0, $full$0$ph$be = 0, $full$0$ph11 = 0, $full$0$ph11$lcssa41 = 0, $not$ = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $args = sp + 16|0;
 $charmap = sp;
 $0 = ((($t42face)) + 132|0);
 $1 = ((($t42face)) + 500|0);
 HEAP32[$1>>2] = 0;
 HEAP32[$t42face>>2] = 1;
 $2 = ((($t42face)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_ft_module_get_service($3,89321)|0);
 $5 = ((($t42face)) + 484|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$2>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_FT_Get_Module_Interface($8,89338)|0);
 $10 = ((($t42face)) + 488|0);
 HEAP32[$10>>2] = $9;
 $11 = ($9|0)==(0|0);
 if ($11) {
  $error$0 = 11;
  STACKTOP = sp;return ($error$0|0);
 }
 $12 = (_T42_Open_Face($t42face)|0);
 $13 = ($12|0)!=(0);
 $14 = ($face_index|0)<(0);
 $or$cond3 = $14 | $13;
 if ($or$cond3) {
  $error$0 = $12;
  STACKTOP = sp;return ($error$0|0);
 }
 $15 = ($face_index|0)>(0);
 if ($15) {
  $error$0 = 6;
  STACKTOP = sp;return ($error$0|0);
 }
 $16 = ((($t42face)) + 416|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($t42face)) + 16|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($t42face)) + 36|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($t42face)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($t42face)) + 8|0);
 $22 = ((($t42face)) + 156|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(0);
 $25 = $24 ? 2577 : 2581;
 HEAP32[$21>>2] = $25;
 $26 = ((($t42face)) + 144|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($t42face)) + 20|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($t42face)) + 24|0);
 HEAP32[$29>>2] = 89763;
 $30 = HEAP32[$28>>2]|0;
 $31 = ($30|0)==(0|0);
 L10: do {
  if ($31) {
   $46 = ((($t42face)) + 364|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0|0);
   if (!($48)) {
    HEAP32[$28>>2] = $47;
   }
  } else {
   $32 = ((($t42face)) + 140|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0|0);
   if (!($34)) {
    $35 = HEAP8[$33>>0]|0;
    $36 = ($35<<24>>24)==(0);
    if (!($36)) {
     $134 = $35;$family$0$ph12 = $30;$full$0$ph11 = $33;
     L15: while(1) {
      $39 = $134;$family$09 = $family$0$ph12;
      L17: while(1) {
       $37 = HEAP8[$family$09>>0]|0;
       $38 = ($39<<24>>24)==($37<<24>>24);
       if ($38) {
        $family$09$lcssa = $family$09;
        label = 9;
        break;
       }
       switch ($39<<24>>24) {
       case 45: case 32:  {
        $family$0$ph$be = $family$09;
        break L17;
        break;
       }
       default: {
       }
       }
       switch ($37<<24>>24) {
       case 0:  {
        $full$0$ph11$lcssa41 = $full$0$ph11;
        break L15;
        break;
       }
       case 45: case 32:  {
        break;
       }
       default: {
        break L10;
       }
       }
       $43 = ((($family$09)) + 1|0);
       $44 = HEAP8[$full$0$ph11>>0]|0;
       $45 = ($44<<24>>24)==(0);
       if ($45) {
        break L10;
       } else {
        $39 = $44;$family$09 = $43;
       }
      }
      if ((label|0) == 9) {
       label = 0;
       $40 = ((($family$09$lcssa)) + 1|0);
       $family$0$ph$be = $40;
      }
      $full$0$ph$be = ((($full$0$ph11)) + 1|0);
      $41 = HEAP8[$full$0$ph$be>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if ($42) {
       break L10;
      } else {
       $134 = $41;$family$0$ph12 = $family$0$ph$be;$full$0$ph11 = $full$0$ph$be;
      }
     }
     HEAP32[$29>>2] = $full$0$ph11$lcssa41;
    }
   }
  }
 } while(0);
 $49 = ((($t42face)) + 28|0);
 HEAP32[$49>>2] = 0;
 $50 = ((($t42face)) + 32|0);
 HEAP32[$50>>2] = 0;
 HEAP32[$args>>2] = 1;
 $51 = ((($t42face)) + 492|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ((($args)) + 4|0);
 HEAP32[$53>>2] = $52;
 $54 = ((($t42face)) + 496|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($args)) + 8|0);
 HEAP32[$56>>2] = $55;
 $57 = ($num_params|0)==(0);
 if (!($57)) {
  $58 = HEAP32[$args>>2]|0;
  $59 = $58 | 16;
  HEAP32[$args>>2] = $59;
  $60 = ((($args)) + 24|0);
  HEAP32[$60>>2] = $num_params;
  $61 = ((($args)) + 28|0);
  HEAP32[$61>>2] = $params;
 }
 $62 = HEAP32[$2>>2]|0;
 $63 = ((($62)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (_FT_Open_Face($64,$args,0,$1)|0);
 $66 = ($65|0)==(0);
 if (!($66)) {
  $error$0 = $65;
  STACKTOP = sp;return ($error$0|0);
 }
 $67 = HEAP32[$1>>2]|0;
 $68 = ((($67)) + 88|0);
 $69 = HEAP32[$68>>2]|0;
 (_FT_Done_Size($69)|0);
 $70 = ((($t42face)) + 52|0);
 $71 = HEAP32[$1>>2]|0;
 $72 = ((($71)) + 52|0);
 ;HEAP32[$70>>2]=HEAP32[$72>>2]|0;HEAP32[$70+4>>2]=HEAP32[$72+4>>2]|0;HEAP32[$70+8>>2]=HEAP32[$72+8>>2]|0;HEAP32[$70+12>>2]=HEAP32[$72+12>>2]|0;
 $73 = HEAP32[$1>>2]|0;
 $74 = ((($73)) + 68|0);
 $75 = HEAP16[$74>>1]|0;
 $76 = ((($t42face)) + 68|0);
 HEAP16[$76>>1] = $75;
 $77 = HEAP32[$1>>2]|0;
 $78 = ((($77)) + 70|0);
 $79 = HEAP16[$78>>1]|0;
 $80 = ((($t42face)) + 70|0);
 HEAP16[$80>>1] = $79;
 $81 = HEAP32[$1>>2]|0;
 $82 = ((($81)) + 72|0);
 $83 = HEAP16[$82>>1]|0;
 $84 = ((($t42face)) + 72|0);
 HEAP16[$84>>1] = $83;
 $85 = HEAP32[$1>>2]|0;
 $86 = ((($85)) + 74|0);
 $87 = HEAP16[$86>>1]|0;
 $88 = ((($t42face)) + 74|0);
 HEAP16[$88>>1] = $87;
 $89 = HEAP32[$1>>2]|0;
 $90 = ((($89)) + 76|0);
 $91 = HEAP16[$90>>1]|0;
 $92 = ((($t42face)) + 76|0);
 HEAP16[$92>>1] = $91;
 $93 = HEAP32[$1>>2]|0;
 $94 = ((($93)) + 78|0);
 $95 = HEAP16[$94>>1]|0;
 $96 = ((($t42face)) + 78|0);
 HEAP16[$96>>1] = $95;
 $97 = ((($0)) + 26|0);
 $98 = HEAP16[$97>>1]|0;
 $99 = ((($t42face)) + 80|0);
 HEAP16[$99>>1] = $98;
 $100 = ((($t42face)) + 160|0);
 $101 = HEAP16[$100>>1]|0;
 $102 = ((($t42face)) + 82|0);
 HEAP16[$102>>1] = $101;
 $103 = ((($t42face)) + 12|0);
 $104 = ((($t42face)) + 152|0);
 $105 = HEAP32[$104>>2]|0;
 $not$ = ($105|0)!=(0);
 $$4 = $not$&1;
 HEAP32[$103>>2] = $$4;
 $106 = HEAP32[$1>>2]|0;
 $107 = ((($106)) + 12|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = $108 & 2;
 $110 = ($109|0)==(0);
 if (!($110)) {
  $111 = $$4 | 2;
  HEAP32[$103>>2] = $111;
 }
 $112 = HEAP32[$1>>2]|0;
 $113 = ((($112)) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 32;
 $116 = ($115|0)==(0);
 if (!($116)) {
  $117 = HEAP32[$21>>2]|0;
  $118 = $117 | 32;
  HEAP32[$21>>2] = $118;
 }
 $119 = ($4|0)==(0|0);
 if ($119) {
  $error$0 = $65;
  STACKTOP = sp;return ($error$0|0);
 }
 $120 = ((($9)) + 20|0);
 $121 = HEAP32[$120>>2]|0;
 HEAP32[$charmap>>2] = $t42face;
 $122 = ((($charmap)) + 8|0);
 HEAP16[$122>>1] = 3;
 $123 = ((($charmap)) + 10|0);
 HEAP16[$123>>1] = 1;
 $124 = ((($charmap)) + 4|0);
 HEAP32[$124>>2] = 1970170211;
 $125 = ((($121)) + 12|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = (_FT_CMap_New($126,0,$charmap,0)|0);
 switch ($127|0) {
 case 0: case 163:  {
  break;
 }
 default: {
  $error$0 = $127;
  STACKTOP = sp;return ($error$0|0);
 }
 }
 HEAP16[$122>>1] = 7;
 $128 = ((($t42face)) + 368|0);
 $129 = HEAP32[$128>>2]|0;
 switch ($129|0) {
 case 2:  {
  HEAP32[$124>>2] = 1094995778;
  HEAP16[$123>>1] = 0;
  $clazz$0$in = $121;
  break;
 }
 case 4:  {
  HEAP32[$124>>2] = 1094992453;
  HEAP16[$123>>1] = 1;
  $130 = ((($121)) + 4|0);
  $clazz$0$in = $130;
  break;
 }
 case 1:  {
  HEAP32[$124>>2] = 1094992451;
  HEAP16[$123>>1] = 2;
  $131 = ((($121)) + 8|0);
  $clazz$0$in = $131;
  break;
 }
 case 3:  {
  HEAP32[$124>>2] = 1818326065;
  HEAP16[$123>>1] = 3;
  $clazz$0$in = $125;
  break;
 }
 default: {
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 }
 }
 $clazz$0 = HEAP32[$clazz$0$in>>2]|0;
 $132 = ($clazz$0|0)==(0|0);
 if ($132) {
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 }
 $133 = (_FT_CMap_New($clazz$0,0,$charmap,0)|0);
 $error$0 = $133;
 STACKTOP = sp;return ($error$0|0);
}
function _T42_Face_Done($t42face) {
 $t42face = $t42face|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($t42face|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($t42face)) + 132|0);
 $2 = ((($t42face)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($t42face)) + 500|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  (_FT_Done_Face($5)|0);
 }
 $7 = HEAP32[$1>>2]|0;
 _ft_mem_free($3,$7);
 HEAP32[$1>>2] = 0;
 $8 = ((($t42face)) + 136|0);
 $9 = HEAP32[$8>>2]|0;
 _ft_mem_free($3,$9);
 HEAP32[$8>>2] = 0;
 $10 = ((($t42face)) + 140|0);
 $11 = HEAP32[$10>>2]|0;
 _ft_mem_free($3,$11);
 HEAP32[$10>>2] = 0;
 $12 = ((($t42face)) + 144|0);
 $13 = HEAP32[$12>>2]|0;
 _ft_mem_free($3,$13);
 HEAP32[$12>>2] = 0;
 $14 = ((($t42face)) + 148|0);
 $15 = HEAP32[$14>>2]|0;
 _ft_mem_free($3,$15);
 HEAP32[$14>>2] = 0;
 $16 = ((($t42face)) + 428|0);
 $17 = HEAP32[$16>>2]|0;
 _ft_mem_free($3,$17);
 HEAP32[$16>>2] = 0;
 $18 = ((($t42face)) + 424|0);
 $19 = HEAP32[$18>>2]|0;
 _ft_mem_free($3,$19);
 HEAP32[$18>>2] = 0;
 $20 = ((($t42face)) + 420|0);
 $21 = HEAP32[$20>>2]|0;
 _ft_mem_free($3,$21);
 HEAP32[$20>>2] = 0;
 $22 = ((($t42face)) + 396|0);
 $23 = HEAP32[$22>>2]|0;
 _ft_mem_free($3,$23);
 HEAP32[$22>>2] = 0;
 $24 = ((($t42face)) + 400|0);
 $25 = HEAP32[$24>>2]|0;
 _ft_mem_free($3,$25);
 HEAP32[$24>>2] = 0;
 $26 = ((($t42face)) + 372|0);
 $27 = ((($26)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 _ft_mem_free($3,$28);
 HEAP32[$27>>2] = 0;
 $29 = ((($26)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 _ft_mem_free($3,$30);
 HEAP32[$29>>2] = 0;
 $31 = ((($t42face)) + 364|0);
 $32 = HEAP32[$31>>2]|0;
 _ft_mem_free($3,$32);
 HEAP32[$31>>2] = 0;
 $33 = ((($t42face)) + 492|0);
 $34 = HEAP32[$33>>2]|0;
 _ft_mem_free($3,$34);
 HEAP32[$33>>2] = 0;
 $35 = ((($t42face)) + 536|0);
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 _ft_mem_free($3,$37);
 HEAP32[$36>>2] = 0;
 $38 = ((($35)) + 16|0);
 HEAP32[$38>>2] = 0;
 $39 = ((($t42face)) + 20|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($t42face)) + 24|0);
 HEAP32[$40>>2] = 0;
 return;
}
function _T42_Driver_Init($module) {
 $module = $module|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($module)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_FT_Get_Module($1,89693)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 11;
  return ($$0|0);
 }
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($module)) + 28|0);
 HEAP32[$5>>2] = $4;
 $$0 = 0;
 return ($$0|0);
}
function _T42_Driver_Done($module) {
 $module = $module|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _T42_Size_Init($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ttsize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ttsize = sp;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 500|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_FT_New_Size($2,$ttsize)|0);
 $4 = HEAP32[$ttsize>>2]|0;
 $5 = ((($size)) + 44|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$ttsize>>2]|0;
 (_FT_Activate_Size($6)|0);
 STACKTOP = sp;return ($3|0);
}
function _T42_Size_Request($t42size,$req) {
 $t42size = $t42size|0;
 $req = $req|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$t42size>>2]|0;
 $1 = ((($t42size)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 (_FT_Activate_Size($2)|0);
 $3 = ((($0)) + 500|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_FT_Request_Size($4,$req)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  return ($5|0);
 }
 $7 = ((($t42size)) + 12|0);
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 ;HEAP32[$7>>2]=HEAP32[$11>>2]|0;HEAP32[$7+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$11+12>>2]|0;HEAP32[$7+16>>2]=HEAP32[$11+16>>2]|0;HEAP32[$7+20>>2]=HEAP32[$11+20>>2]|0;HEAP32[$7+24>>2]=HEAP32[$11+24>>2]|0;
 return ($5|0);
}
function _T42_Size_Select($t42size,$strike_index) {
 $t42size = $t42size|0;
 $strike_index = $strike_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$t42size>>2]|0;
 $1 = ((($t42size)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 (_FT_Activate_Size($2)|0);
 $3 = ((($0)) + 500|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_FT_Select_Size($4,$strike_index)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  return ($5|0);
 }
 $7 = ((($t42size)) + 12|0);
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 12|0);
 ;HEAP32[$7>>2]=HEAP32[$11>>2]|0;HEAP32[$7+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$11+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$11+12>>2]|0;HEAP32[$7+16>>2]=HEAP32[$11+16>>2]|0;HEAP32[$7+20>>2]=HEAP32[$11+20>>2]|0;HEAP32[$7+24>>2]=HEAP32[$11+24>>2]|0;
 return ($5|0);
}
function _T42_Size_Done($t42size) {
 $t42size = $t42size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$t42size>>2]|0;
 $1 = ((($0)) + 500|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 108|0);
 $4 = ((($t42size)) + 44|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_FT_List_Find($3,$5)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  return;
 }
 $8 = HEAP32[$4>>2]|0;
 (_FT_Done_Size($8)|0);
 HEAP32[$4>>2] = 0;
 return;
}
function _T42_GlyphSlot_Init($t42slot) {
 $t42slot = $t42slot|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $ttslot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ttslot = sp;
 $0 = ((($t42slot)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 84|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = ((($1)) + 500|0);
 $6 = HEAP32[$5>>2]|0;
 if ($4) {
  $7 = ((($6)) + 84|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($t42slot)) + 160|0);
  HEAP32[$9>>2] = $8;
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 } else {
  $10 = (_FT_New_GlyphSlot($6,$ttslot)|0);
  $11 = HEAP32[$ttslot>>2]|0;
  $12 = ((($t42slot)) + 160|0);
  HEAP32[$12>>2] = $11;
  $error$0 = $10;
  STACKTOP = sp;return ($error$0|0);
 }
 return (0)|0;
}
function _T42_GlyphSlot_Done($t42slot) {
 $t42slot = $t42slot|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($t42slot)) + 160|0);
 $1 = HEAP32[$0>>2]|0;
 _FT_Done_GlyphSlot($1);
 return;
}
function _T42_GlyphSlot_Load($glyph,$size,$glyph_index,$load_flags) {
 $glyph = $glyph|0;
 $size = $size|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($glyph)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($glyph)) + 160|0);
 $7 = HEAP32[$6>>2]|0;
 _t42_glyphslot_clear($7);
 $8 = ((($5)) + 80|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$6>>2]|0;
 $11 = ((($size)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $load_flags | 8;
 $14 = (FUNCTION_TABLE_iiiii[$9 & 63]($10,$12,$glyph_index,$13)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  return ($14|0);
 }
 $16 = ((($glyph)) + 24|0);
 $17 = HEAP32[$6>>2]|0;
 $18 = ((($17)) + 24|0);
 ;HEAP32[$16>>2]=HEAP32[$18>>2]|0;HEAP32[$16+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$18+12>>2]|0;HEAP32[$16+16>>2]=HEAP32[$18+16>>2]|0;HEAP32[$16+20>>2]=HEAP32[$18+20>>2]|0;HEAP32[$16+24>>2]=HEAP32[$18+24>>2]|0;HEAP32[$16+28>>2]=HEAP32[$18+28>>2]|0;
 $19 = HEAP32[$6>>2]|0;
 $20 = ((($19)) + 56|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($glyph)) + 56|0);
 HEAP32[$22>>2] = $21;
 $23 = HEAP32[$6>>2]|0;
 $24 = ((($23)) + 60|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($glyph)) + 60|0);
 HEAP32[$26>>2] = $25;
 $27 = HEAP32[$6>>2]|0;
 $28 = ((($27)) + 72|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($glyph)) + 72|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($glyph)) + 108|0);
 $32 = HEAP32[$6>>2]|0;
 $33 = ((($32)) + 108|0);
 ;HEAP32[$31>>2]=HEAP32[$33>>2]|0;HEAP32[$31+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$31+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$31+12>>2]=HEAP32[$33+12>>2]|0;HEAP32[$31+16>>2]=HEAP32[$33+16>>2]|0;
 $34 = ((($glyph)) + 76|0);
 $35 = HEAP32[$6>>2]|0;
 $36 = ((($35)) + 76|0);
 ;HEAP32[$34>>2]=HEAP32[$36>>2]|0;HEAP32[$34+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$34+12>>2]=HEAP32[$36+12>>2]|0;HEAP32[$34+16>>2]=HEAP32[$36+16>>2]|0;HEAP32[$34+20>>2]=HEAP32[$36+20>>2]|0;
 $37 = HEAP32[$6>>2]|0;
 $38 = ((($37)) + 100|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($glyph)) + 100|0);
 HEAP32[$40>>2] = $39;
 $41 = HEAP32[$6>>2]|0;
 $42 = ((($41)) + 104|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($glyph)) + 104|0);
 HEAP32[$44>>2] = $43;
 $45 = HEAP32[$6>>2]|0;
 $46 = ((($45)) + 128|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($glyph)) + 128|0);
 HEAP32[$48>>2] = $47;
 $49 = HEAP32[$6>>2]|0;
 $50 = ((($49)) + 132|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($glyph)) + 132|0);
 HEAP32[$52>>2] = $51;
 $53 = HEAP32[$6>>2]|0;
 $54 = ((($53)) + 136|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ((($glyph)) + 136|0);
 HEAP32[$56>>2] = $55;
 $57 = HEAP32[$6>>2]|0;
 $58 = ((($57)) + 140|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ((($glyph)) + 140|0);
 HEAP32[$60>>2] = $59;
 return ($14|0);
}
function _T42_Open_Face($face) {
 $face = $face|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $charcode$0$min_char$0 = 0, $charcode$06 = 0, $error = 0, $idx$03 = 0, $idx$03$lcssa = 0, $loader = 0, $max_char$0$ = 0, $max_char$0$lcssa = 0, $max_char$04 = 0, $max_char$1 = 0, $min_char$0$lcssa = 0;
 var $min_char$05 = 0, $min_char$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $loader = sp + 8|0;
 $error = sp;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 488|0);
 $3 = HEAP32[$2>>2]|0;
 _t42_loader_init($loader,$face);
 $4 = (_ft_mem_alloc($1,12,$error)|0);
 $5 = ((($face)) + 492|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[$error>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  _t42_loader_done($loader);
  $87 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($87|0);
 }
 $8 = ((($face)) + 104|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_t42_parser_init($loader,$9,$1,$3)|0);
 HEAP32[$error>>2] = $10;
 $11 = ($10|0)==(0);
 if (!($11)) {
  _t42_loader_done($loader);
  $87 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($87|0);
 }
 $12 = ((($loader)) + 76|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($loader)) + 80|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_t42_parse_dict($face,$loader,$13,$15)|0);
 HEAP32[$error>>2] = $16;
 $17 = ($16|0)==(0);
 if (!($17)) {
  _t42_loader_done($loader);
  $87 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($87|0);
 }
 $18 = ((($face)) + 433|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(42);
 if (!($20)) {
  HEAP32[$error>>2] = 2;
  _t42_loader_done($loader);
  $87 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($87|0);
 }
 $21 = ((($loader)) + 144|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($face)) + 416|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($loader)) + 200|0);
 $25 = ((($loader)) + 212|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0);
 if ($27) {
  HEAP32[$error>>2] = 3;
 }
 HEAP32[$25>>2] = 0;
 $28 = HEAP32[$24>>2]|0;
 $29 = ((($face)) + 396|0);
 HEAP32[$29>>2] = $28;
 $30 = ((($loader)) + 224|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($face)) + 424|0);
 HEAP32[$32>>2] = $31;
 $33 = ((($loader)) + 228|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($face)) + 428|0);
 HEAP32[$35>>2] = $34;
 $36 = ((($loader)) + 148|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($face)) + 400|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($loader)) + 172|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($face)) + 420|0);
 HEAP32[$41>>2] = $40;
 HEAP32[$36>>2] = 0;
 HEAP32[$39>>2] = 0;
 $42 = ((($face)) + 368|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(1);
 if (!($44)) {
  _t42_loader_done($loader);
  $87 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($87|0);
 }
 $45 = ((($loader)) + 108|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)>(0);
 if ($47) {
  $48 = ((($face)) + 384|0);
  $49 = ((($face)) + 388|0);
  $50 = ((($loader)) + 116|0);
  $charcode$06 = 0;$max_char$04 = 0;$min_char$05 = 0;
  while(1) {
   $51 = HEAP32[$48>>2]|0;
   $52 = (($51) + ($charcode$06<<1)|0);
   HEAP16[$52>>1] = 0;
   $53 = HEAP32[$49>>2]|0;
   $54 = (($53) + ($charcode$06<<2)|0);
   HEAP32[$54>>2] = 89635;
   $55 = HEAP32[$50>>2]|0;
   $56 = (($55) + ($charcode$06<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(0|0);
   L24: do {
    if ($58) {
     $max_char$1 = $max_char$04;$min_char$2 = $min_char$05;
    } else {
     $59 = HEAP32[$23>>2]|0;
     $60 = ($59|0)>(0);
     if ($60) {
      $61 = HEAP32[$41>>2]|0;
      $idx$03 = 0;
      while(1) {
       $62 = (($61) + ($idx$03<<2)|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = (_strcmp($57,$63)|0);
       $65 = ($64|0)==(0);
       if ($65) {
        $$lcssa = $63;$idx$03$lcssa = $idx$03;
        break;
       }
       $76 = (($idx$03) + 1)|0;
       $77 = HEAP32[$23>>2]|0;
       $78 = ($76|0)<($77|0);
       if ($78) {
        $idx$03 = $76;
       } else {
        $max_char$1 = $max_char$04;$min_char$2 = $min_char$05;
        break L24;
       }
      }
      $66 = $idx$03$lcssa&65535;
      $67 = HEAP32[$48>>2]|0;
      $68 = (($67) + ($charcode$06<<1)|0);
      HEAP16[$68>>1] = $66;
      $69 = HEAP32[$49>>2]|0;
      $70 = (($69) + ($charcode$06<<2)|0);
      HEAP32[$70>>2] = $$lcssa;
      $71 = (_strcmp(89635,$$lcssa)|0);
      $72 = ($71|0)==(0);
      if ($72) {
       $max_char$1 = $max_char$04;$min_char$2 = $min_char$05;
      } else {
       $73 = ($charcode$06|0)<($min_char$05|0);
       $charcode$0$min_char$0 = $73 ? $charcode$06 : $min_char$05;
       $74 = ($charcode$06|0)<($max_char$04|0);
       $75 = (($charcode$06) + 1)|0;
       $max_char$0$ = $74 ? $max_char$04 : $75;
       $max_char$1 = $max_char$0$;$min_char$2 = $charcode$0$min_char$0;
      }
     } else {
      $max_char$1 = $max_char$04;$min_char$2 = $min_char$05;
     }
    }
   } while(0);
   $79 = (($charcode$06) + 1)|0;
   $80 = HEAP32[$45>>2]|0;
   $81 = ($79|0)<($80|0);
   if ($81) {
    $charcode$06 = $79;$max_char$04 = $max_char$1;$min_char$05 = $min_char$2;
   } else {
    $max_char$0$lcssa = $max_char$1;$min_char$0$lcssa = $min_char$2;
    break;
   }
  }
 } else {
  $max_char$0$lcssa = 0;$min_char$0$lcssa = 0;
 }
 $82 = ((($face)) + 376|0);
 HEAP32[$82>>2] = $min_char$0$lcssa;
 $83 = ((($face)) + 380|0);
 HEAP32[$83>>2] = $max_char$0$lcssa;
 $84 = ((($loader)) + 88|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ((($face)) + 372|0);
 HEAP32[$86>>2] = $85;
 _t42_loader_done($loader);
 $87 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($87|0);
}
function _t42_glyphslot_clear($slot) {
 $slot = $slot|0;
 var $0 = 0, $1 = 0, $2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 _ft_glyphslot_free_bitmap($slot);
 $0 = ((($slot)) + 24|0);
 $1 = ((($slot)) + 152|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($slot)) + 72|0);
 dest=$0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$2; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function _tt_face_free_ps_names($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 628|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  HEAP8[$2>>0] = 0;
  return;
 }
 $5 = ((($face)) + 468|0);
 $6 = HEAP32[$5>>2]|0;
 $switch$split2D = ($6|0)<(163840);
 if (!($switch$split2D)) {
  switch ($6|0) {
  case 163840:  {
   break;
  }
  default: {
   HEAP8[$2>>0] = 0;
   return;
  }
  }
  $25 = ((($face)) + 636|0);
  $26 = HEAP32[$25>>2]|0;
  _ft_mem_free($1,$26);
  HEAP32[$25>>2] = 0;
  $27 = ((($face)) + 632|0);
  HEAP16[$27>>1] = 0;
  HEAP8[$2>>0] = 0;
  return;
 }
 switch ($6|0) {
 case 131072:  {
  break;
 }
 default: {
  HEAP8[$2>>0] = 0;
  return;
 }
 }
 $7 = ((($face)) + 636|0);
 $8 = HEAP32[$7>>2]|0;
 _ft_mem_free($1,$8);
 HEAP32[$7>>2] = 0;
 $9 = ((($face)) + 632|0);
 HEAP16[$9>>1] = 0;
 $10 = ((($face)) + 634|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11<<16>>16)==(0);
 $13 = ((($face)) + 640|0);
 if (!($12)) {
  $16 = 0;$n$02 = 0;
  while(1) {
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($16<<2)|0);
   $17 = HEAP32[$15>>2]|0;
   _ft_mem_free($1,$17);
   $18 = HEAP32[$13>>2]|0;
   $19 = (($18) + ($16<<2)|0);
   HEAP32[$19>>2] = 0;
   $20 = (($n$02) + 1)<<16>>16;
   $21 = $20&65535;
   $22 = HEAP16[$10>>1]|0;
   $23 = ($20&65535)<($22&65535);
   if ($23) {
    $16 = $21;$n$02 = $20;
   } else {
    break;
   }
  }
 }
 $24 = HEAP32[$13>>2]|0;
 _ft_mem_free($1,$24);
 HEAP32[$13>>2] = 0;
 HEAP16[$10>>1] = 0;
 HEAP8[$2>>0] = 0;
 return;
}
function _tt_face_get_ps_name($face,$idx,$PSname) {
 $face = $face|0;
 $idx = $idx|0;
 $PSname = $PSname|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split12D = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($face|0)==(0|0);
 if ($0) {
  $$0 = 35;
  return ($$0|0);
 }
 $1 = ((($face)) + 264|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ($3>>>0)>($idx>>>0);
 if (!($4)) {
  $$0 = 16;
  return ($$0|0);
 }
 $5 = ((($face)) + 536|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 7;
  return ($$0|0);
 }
 $8 = ((($face)) + 628|0);
 $9 = ((($6)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 63](0)|0);
 HEAP32[$PSname>>2] = $11;
 $12 = ((($face)) + 468|0);
 $13 = HEAP32[$12>>2]|0;
 $switch$split2D = ($13|0)<(131072);
 if ($switch$split2D) {
  switch ($13|0) {
  case 65536:  {
   break;
  }
  default: {
   $$0 = 0;
   return ($$0|0);
  }
  }
  $14 = ($idx>>>0)<(258);
  if (!($14)) {
   $$0 = 0;
   return ($$0|0);
  }
  $15 = HEAP32[$9>>2]|0;
  $16 = (FUNCTION_TABLE_ii[$15 & 63]($idx)|0);
  HEAP32[$PSname>>2] = $16;
  $$0 = 0;
  return ($$0|0);
 }
 $switch$split12D = ($13|0)<(163840);
 if (!($switch$split12D)) {
  switch ($13|0) {
  case 163840:  {
   break;
  }
  default: {
   $$0 = 0;
   return ($$0|0);
  }
  }
  $38 = HEAP8[$8>>0]|0;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $40 = (_load_post_names($face)|0);
   $41 = ($40|0)==(0);
   if (!($41)) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $42 = ((($face)) + 632|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43&65535;
  $45 = ($44>>>0)>($idx>>>0);
  if (!($45)) {
   $$0 = 0;
   return ($$0|0);
  }
  $46 = ((($face)) + 636|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($idx)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49 << 24 >> 24;
  $51 = (($50) + ($idx))|0;
  $52 = HEAP32[$9>>2]|0;
  $53 = (FUNCTION_TABLE_ii[$52 & 63]($51)|0);
  HEAP32[$PSname>>2] = $53;
  $$0 = 0;
  return ($$0|0);
 }
 switch ($13|0) {
 case 131072:  {
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 $17 = HEAP8[$8>>0]|0;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $19 = (_load_post_names($face)|0);
  $20 = ($19|0)==(0);
  if (!($20)) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $21 = ((($face)) + 632|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = ($23>>>0)>($idx>>>0);
 if (!($24)) {
  $$0 = 0;
  return ($$0|0);
 }
 $25 = ((($face)) + 636|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + ($idx<<1)|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = ($28&65535)<(258);
 if ($30) {
  $31 = HEAP32[$9>>2]|0;
  $32 = (FUNCTION_TABLE_ii[$31 & 63]($29)|0);
  HEAP32[$PSname>>2] = $32;
  $$0 = 0;
  return ($$0|0);
 } else {
  $33 = (($29) + -258)|0;
  $34 = ((($face)) + 640|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($33<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  HEAP32[$PSname>>2] = $37;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _load_post_names($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $error$1 = 0, $post_len = 0, $switch$split2D = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $post_len = sp;
 $0 = ((($face)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 508|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiii[$3 & 63]($face,1886352244,$1,$post_len)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $error$1 = $4;
  STACKTOP = sp;return ($error$1|0);
 }
 $6 = (_FT_Stream_Pos($1)|0);
 $7 = HEAP32[$post_len>>2]|0;
 $8 = (($7) + ($6))|0;
 $9 = ((($face)) + 468|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_FT_Stream_Skip($1,32)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $error$1 = $11;
  STACKTOP = sp;return ($error$1|0);
 }
 $switch$split2D = ($10|0)<(163840);
 L7: do {
  if ($switch$split2D) {
   switch ($10|0) {
   case 131072:  {
    break;
   }
   default: {
    $error$0 = 3;
    break L7;
   }
   }
   $13 = (_load_format_20($face,$1,$8)|0);
   $error$0 = $13;
  } else {
   switch ($10|0) {
   case 163840:  {
    break;
   }
   default: {
    $error$0 = 3;
    break L7;
   }
   }
   $14 = (_load_format_25($face,$1)|0);
   $error$0 = $14;
  }
 } while(0);
 $15 = ((($face)) + 628|0);
 HEAP8[$15>>0] = 1;
 $error$1 = $error$0;
 STACKTOP = sp;return ($error$1|0);
}
function _load_format_20($face,$stream,$post_limit) {
 $face = $face|0;
 $stream = $stream|0;
 $post_limit = $post_limit|0;
 var $$0 = 0, $$num_names$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0;
 var $error = 0, $exitcond = 0, $exitcond25 = 0, $exitcond26 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $indvars$iv$next22 = 0, $indvars$iv$next24 = 0, $indvars$iv21 = 0, $indvars$iv23 = 0, $indvars$iv23$lcssa = 0, $len$0 = 0, $lftr$wideiv = 0, $n$016 = 0, $n1$014 = 0, $name_strings$0 = 0, $num_names$0$lcssa = 0, $num_names$013 = 0, $num_names$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_FT_Stream_ReadUShort($stream,$error)|0);
 $3 = $2&65535;
 $4 = HEAP32[$error>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = ((($face)) + 264|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = ($2&65535)>($7&65535);
   if ($8) {
    HEAP32[$error>>2] = 3;
    break;
   }
   $9 = (_ft_mem_realloc($1,2,0,$3,0,$error)|0);
   $10 = HEAP32[$error>>2]|0;
   $11 = ($10|0)==(0);
   L6: do {
    if ($11) {
     $12 = $3 << 1;
     $13 = (_FT_Stream_EnterFrame($stream,$12)|0);
     HEAP32[$error>>2] = $13;
     $14 = ($13|0)==(0);
     if ($14) {
      $15 = ($2<<16>>16)==(0);
      if ($15) {
       _FT_Stream_ExitFrame($stream);
       $num_names$0$lcssa = 0;
      } else {
       $16 = $2&65535;
       $n$016 = 0;
       while(1) {
        $17 = (_FT_Stream_GetUShort($stream)|0);
        $18 = (($9) + ($n$016<<1)|0);
        HEAP16[$18>>1] = $17;
        $19 = (($n$016) + 1)|0;
        $exitcond26 = ($19|0)==($16|0);
        if ($exitcond26) {
         break;
        } else {
         $n$016 = $19;
        }
       }
       _FT_Stream_ExitFrame($stream);
       $20 = ($2<<16>>16)==(0);
       if ($20) {
        $num_names$0$lcssa = 0;
       } else {
        $21 = $2&65535;
        $n1$014 = 0;$num_names$013 = 0;
        while(1) {
         $22 = (($9) + ($n1$014<<1)|0);
         $23 = HEAP16[$22>>1]|0;
         $24 = ($23&65535)>(257);
         if ($24) {
          $25 = $23&65535;
          $26 = (($25) + -257)|0;
          $27 = $num_names$013&65535;
          $28 = ($26|0)>($27|0);
          $29 = $26&65535;
          $$num_names$0 = $28 ? $29 : $num_names$013;
          $num_names$1 = $$num_names$0;
         } else {
          $num_names$1 = $num_names$013;
         }
         $30 = (($n1$014) + 1)|0;
         $exitcond25 = ($30|0)==($21|0);
         if ($exitcond25) {
          $num_names$0$lcssa = $num_names$1;
          break;
         } else {
          $n1$014 = $30;$num_names$013 = $num_names$1;
         }
        }
       }
      }
      $31 = $num_names$0$lcssa&65535;
      $32 = (_ft_mem_realloc($1,4,0,$31,0,$error)|0);
      $33 = HEAP32[$error>>2]|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $35 = ($num_names$0$lcssa<<16>>16)==(0);
       L23: do {
        if (!($35)) {
         $36 = $num_names$0$lcssa&65535;
         $indvars$iv23 = 0;
         while(1) {
          $37 = (_FT_Stream_Pos($stream)|0);
          $38 = ($37|0)<($post_limit|0);
          if (!($38)) {
           $indvars$iv23$lcssa = $indvars$iv23;
           label = 19;
           break;
          }
          $43 = (_FT_Stream_ReadChar($stream,$error)|0);
          $44 = $43&255;
          $45 = HEAP32[$error>>2]|0;
          $46 = ($45|0)==(0);
          if (!($46)) {
           break;
          }
          $47 = ($44|0)>($post_limit|0);
          if ($47) {
           label = 24;
          } else {
           $48 = (_FT_Stream_Pos($stream)|0);
           $49 = (($post_limit) - ($44))|0;
           $50 = ($48|0)>($49|0);
           if ($50) {
            label = 24;
           } else {
            $len$0 = $44;
           }
          }
          if ((label|0) == 24) {
           label = 0;
           $51 = (_FT_Stream_Pos($stream)|0);
           $52 = ($51|0)>($post_limit|0);
           if ($52) {
            $len$0 = 0;
           } else {
            $53 = (_FT_Stream_Pos($stream)|0);
            $54 = (($post_limit) - ($53))|0;
            $len$0 = $54;
           }
          }
          $55 = (($len$0) + 1)|0;
          $56 = (_ft_mem_realloc($1,1,0,$55,0,$error)|0);
          $57 = (($32) + ($indvars$iv23<<2)|0);
          HEAP32[$57>>2] = $56;
          $58 = HEAP32[$error>>2]|0;
          $59 = ($58|0)==(0);
          if (!($59)) {
           break;
          }
          $60 = (_FT_Stream_Read($stream,$56,$len$0)|0);
          HEAP32[$error>>2] = $60;
          $61 = ($60|0)==(0);
          if (!($61)) {
           break;
          }
          $62 = HEAP32[$57>>2]|0;
          $63 = (($62) + ($len$0)|0);
          HEAP8[$63>>0] = 0;
          $indvars$iv$next24 = (($indvars$iv23) + 1)|0;
          $64 = ($indvars$iv$next24>>>0)<($36>>>0);
          if ($64) {
           $indvars$iv23 = $indvars$iv$next24;
          } else {
           break L23;
          }
         }
         L37: do {
          if ((label|0) == 19) {
           $39 = $indvars$iv23$lcssa&65535;
           $40 = ($39&65535)<($num_names$0$lcssa&65535);
           if (!($40)) {
            break L23;
           }
           $41 = $indvars$iv23$lcssa & 65535;
           $42 = $num_names$0$lcssa&65535;
           $indvars$iv21 = $41;
           while(1) {
            $65 = (_ft_mem_realloc($1,1,0,1,0,$error)|0);
            $66 = (($32) + ($indvars$iv21<<2)|0);
            HEAP32[$66>>2] = $65;
            $67 = HEAP32[$error>>2]|0;
            $68 = ($67|0)==(0);
            if (!($68)) {
             break L37;
            }
            HEAP8[$65>>0] = 0;
            $indvars$iv$next22 = (($indvars$iv21) + 1)|0;
            $70 = ($indvars$iv$next22>>>0)<($42>>>0);
            if ($70) {
             $indvars$iv21 = $indvars$iv$next22;
            } else {
             break L23;
            }
           }
          }
         } while(0);
         $69 = ($num_names$0$lcssa<<16>>16)==(0);
         if ($69) {
          $name_strings$0 = $32;
          break L6;
         } else {
          $indvars$iv = 0;
         }
         while(1) {
          $75 = (($32) + ($indvars$iv<<2)|0);
          $76 = HEAP32[$75>>2]|0;
          _ft_mem_free($1,$76);
          HEAP32[$75>>2] = 0;
          $indvars$iv$next = (($indvars$iv) + 1)|0;
          $lftr$wideiv = $indvars$iv$next&65535;
          $exitcond = ($lftr$wideiv<<16>>16)==($num_names$0$lcssa<<16>>16);
          if ($exitcond) {
           $name_strings$0 = $32;
           break L6;
          } else {
           $indvars$iv = $indvars$iv$next;
          }
         }
        }
       } while(0);
       $71 = ((($face)) + 632|0);
       HEAP16[$71>>1] = $2;
       $72 = ((($face)) + 634|0);
       HEAP16[$72>>1] = $num_names$0$lcssa;
       $73 = ((($face)) + 636|0);
       HEAP32[$73>>2] = $9;
       $74 = ((($face)) + 640|0);
       HEAP32[$74>>2] = $32;
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      } else {
       $name_strings$0 = $32;
      }
     } else {
      $name_strings$0 = 0;
     }
    } else {
     $name_strings$0 = 0;
    }
   } while(0);
   _ft_mem_free($1,$name_strings$0);
   _ft_mem_free($1,$9);
  }
 } while(0);
 $77 = HEAP32[$error>>2]|0;
 $$0 = $77;
 STACKTOP = sp;return ($$0|0);
}
function _load_format_25($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $n$02 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_FT_Stream_ReadUShort($stream,$error)|0);
 $3 = $2&65535;
 $4 = HEAP32[$error>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = ((($face)) + 264|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = ($2&65535)>($7&65535);
   $9 = ($2&65535)>(258);
   $or$cond = $9 | $8;
   if ($or$cond) {
    HEAP32[$error>>2] = 3;
    break;
   }
   $10 = (_ft_mem_realloc($1,1,0,$3,0,$error)|0);
   $11 = HEAP32[$error>>2]|0;
   $12 = ($11|0)==(0);
   L6: do {
    if ($12) {
     $13 = (_FT_Stream_Read($stream,$10,$3)|0);
     HEAP32[$error>>2] = $13;
     $14 = ($13|0)==(0);
     if ($14) {
      $15 = ($2<<16>>16)==(0);
      L9: do {
       if (!($15)) {
        $n$02 = 0;
        while(1) {
         $18 = (($10) + ($n$02)|0);
         $19 = HEAP8[$18>>0]|0;
         $20 = $19 << 24 >> 24;
         $21 = (($20) + ($n$02))|0;
         $22 = ($21>>>0)>($3>>>0);
         $17 = (($n$02) + 1)|0;
         if ($22) {
          break;
         }
         $16 = ($17|0)<($3|0);
         if ($16) {
          $n$02 = $17;
         } else {
          break L9;
         }
        }
        HEAP32[$error>>2] = 3;
        break L6;
       }
      } while(0);
      $23 = ((($face)) + 632|0);
      HEAP16[$23>>1] = $2;
      $24 = ((($face)) + 636|0);
      HEAP32[$24>>2] = $10;
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   _ft_mem_free($1,$10);
  }
 } while(0);
 $25 = HEAP32[$error>>2]|0;
 $$0 = $25;
 STACKTOP = sp;return ($$0|0);
}
function _cid_parser_new($parser,$stream,$memory,$psaux) {
 $parser = $parser|0;
 $stream = $stream|0;
 $memory = $memory|0;
 $psaux = $psaux|0;
 var $$ = 0, $$lcssa110 = 0, $$sink = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $arg1$036 = 0, $arg1$036$lcssa108 = 0, $arg1$036$phi = 0, $arg2$037 = 0, $arg2$037$lcssa106 = 0, $arg2$037$phi = 0, $buffer = 0, $cur$0 = 0, $cur$035 = 0, $cur$038 = 0, $error$1$ph = 0, $error$2 = 0, $offset$021 = 0, $offset$021$lcssa103 = 0, $offset$021$lcssa104 = 0, $offset$021105 = 0;
 var $p$024 = 0, $p$1$lcssa = 0, $p$120 = 0, $p$120$lcssa = 0, $p$120$lcssa100 = 0, $read_len$023 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $buffer = sp;
 dest=$parser; stop=dest+100|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($psaux)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_viiii[$2 & 15]($parser,0,0,$memory);
 $3 = ((($parser)) + 72|0);
 HEAP32[$3>>2] = $stream;
 $4 = (_FT_Stream_Pos($stream)|0);
 $5 = (_FT_Stream_EnterFrame($stream,31)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $error$2 = $5;
  STACKTOP = sp;return ($error$2|0);
 }
 $7 = ((($stream)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_strncmp($8,89344,31)|0);
 $10 = ($9|0)==(0);
 $$ = $10 ? $5 : 2;
 _FT_Stream_ExitFrame($stream);
 $11 = ($$|0)==(0);
 if (!($11)) {
  $error$2 = $$;
  STACKTOP = sp;return ($error$2|0);
 }
 $12 = ((($stream)) + 4|0);
 $13 = ((($buffer)) + 10|0);
 $14 = $buffer;
 $15 = (10 - ($14))|0;
 $16 = ((($parser)) + 76|0);
 $17 = ((($parser)) + 84|0);
 $18 = ((($parser)) + 80|0);
 $19 = ((($parser)) + 4|0);
 $20 = ((($parser)) + 8|0);
 $21 = ((($parser)) + 96|0);
 $22 = ((($parser)) + 32|0);
 $23 = ((($parser)) + 28|0);
 $24 = ((($parser)) + 12|0);
 $25 = $buffer;
 $26 = (7 - ($25))|0;
 L7: while(1) {
  $27 = (_FT_Stream_Pos($stream)|0);
  $28 = HEAP32[$12>>2]|0;
  $29 = (_FT_Stream_Pos($stream)|0);
  $30 = ($28|0)==($29|0);
  if ($30) {
   $error$1$ph = 3;
   label = 18;
   break;
  }
  $31 = (($28) - ($29))|0;
  $33 = $31;$38 = 0;$offset$021 = $27;$p$024 = $buffer;$read_len$023 = 266;
  L10: while(1) {
   $32 = ($read_len$023|0)<($33|0);
   $34 = $32 ? $read_len$023 : $33;
   $35 = (_FT_Stream_Read($stream,$p$024,$34)|0);
   $36 = ($35|0)==(0);
   if (!($36)) {
    $error$1$ph = $35;
    label = 18;
    break L7;
   }
   $37 = ($34|0)<(256);
   if ($37) {
    $$sum1 = (($34) + ($38))|0;
    $39 = (($buffer) + ($$sum1)|0);
    HEAP8[$39>>0] = 0;
   }
   $$sum = (($38) + -10)|0;
   $$sum2 = (($$sum) + ($34))|0;
   $40 = (($buffer) + ($$sum2)|0);
   $41 = ($$sum2|0)>(0);
   if ($41) {
    $p$120 = $buffer;
    while(1) {
     $42 = HEAP8[$p$120>>0]|0;
     $43 = ($42<<24>>24)==(83);
     if ($43) {
      $44 = (_strncmp($p$120,89376,9)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       $offset$021$lcssa103 = $offset$021;$p$120$lcssa = $p$120;
       label = 12;
       break L10;
      }
     }
     $48 = ((($p$120)) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = ($49<<24>>24)==(115);
     if ($50) {
      $51 = (_strncmp($p$120,89386,6)|0);
      $52 = ($51|0)==(0);
      if ($52) {
       $offset$021$lcssa104 = $offset$021;$p$120$lcssa100 = $p$120;
       label = 16;
       break L10;
      }
     }
     $53 = ($48>>>0)<($40>>>0);
     if ($53) {
      $p$120 = $48;
     } else {
      $p$1$lcssa = $48;
      break;
     }
    }
   } else {
    $p$1$lcssa = $buffer;
   }
   _memmove(($buffer|0),($p$1$lcssa|0),10)|0;
   $56 = (($offset$021) + 256)|0;
   $57 = HEAP32[$12>>2]|0;
   $58 = (_FT_Stream_Pos($stream)|0);
   $59 = (($57) - ($58))|0;
   $60 = ($57|0)==($58|0);
   if ($60) {
    $error$1$ph = 3;
    label = 18;
    break L7;
   } else {
    $33 = $59;$38 = 10;$offset$021 = $56;$p$024 = $13;$read_len$023 = 256;
   }
  }
  if ((label|0) == 12) {
   label = 0;
   $46 = $p$120$lcssa;
   $47 = (($15) + ($46))|0;
   $$sink = $47;$offset$021105 = $offset$021$lcssa103;
  }
  else if ((label|0) == 16) {
   label = 0;
   $54 = $p$120$lcssa100;
   $55 = (($26) + ($54))|0;
   $$sink = $55;$offset$021105 = $offset$021$lcssa104;
  }
  $61 = (($$sink) + ($offset$021105))|0;
  $62 = (($61) - ($4))|0;
  $63 = (_FT_Stream_Seek($stream,$4)|0);
  $64 = ($63|0)==(0);
  if (!($64)) {
   $error$2 = $63;
   label = 31;
   break;
  }
  $65 = (_FT_Stream_ExtractFrame($stream,$62,$16)|0);
  $66 = ($65|0)==(0);
  if (!($66)) {
   $error$2 = $65;
   label = 31;
   break;
  }
  HEAP32[$17>>2] = $61;
  HEAP32[$18>>2] = $62;
  $67 = HEAP32[$16>>2]|0;
  HEAP32[$19>>2] = $67;
  $68 = HEAP32[$16>>2]|0;
  HEAP32[$parser>>2] = $68;
  $69 = (($68) + ($62)|0);
  HEAP32[$20>>2] = $69;
  HEAP32[$21>>2] = -1;
  $70 = HEAP32[$parser>>2]|0;
  $71 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vi[$71 & 127]($parser);
  $72 = HEAP32[$23>>2]|0;
  FUNCTION_TABLE_vi[$72 & 127]($parser);
  $73 = HEAP32[$parser>>2]|0;
  $74 = HEAP32[$22>>2]|0;
  FUNCTION_TABLE_vi[$74 & 127]($parser);
  $75 = HEAP32[$23>>2]|0;
  FUNCTION_TABLE_vi[$75 & 127]($parser);
  $76 = HEAP32[$20>>2]|0;
  $cur$035 = HEAP32[$parser>>2]|0;
  $77 = ($cur$035>>>0)<($76>>>0);
  if ($77) {
   $arg1$036 = $70;$arg2$037 = $73;$cur$038 = $cur$035;
   while(1) {
    $78 = HEAP32[$24>>2]|0;
    $79 = ($78|0)==(0);
    if (!($79)) {
     $error$2 = $78;
     label = 31;
     break L7;
    }
    $80 = HEAP8[$cur$038>>0]|0;
    $81 = ($80<<24>>24)==(83);
    if ($81) {
     $82 = (_strncmp($cur$038,89376,9)|0);
     $83 = ($82|0)==(0);
     if ($83) {
      $$lcssa110 = $65;$arg1$036$lcssa108 = $arg1$036;$arg2$037$lcssa106 = $arg2$037;
      label = 25;
      break L7;
     }
    }
    $88 = ((($cur$038)) + 1|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = ($89<<24>>24)==(115);
    if ($90) {
     $91 = (_strncmp($cur$038,89386,6)|0);
     $92 = ($91|0)==(0);
     if ($92) {
      $error$2 = 2;
      label = 31;
      break L7;
     }
    }
    $93 = HEAP32[$22>>2]|0;
    FUNCTION_TABLE_vi[$93 & 127]($parser);
    $94 = HEAP32[$23>>2]|0;
    FUNCTION_TABLE_vi[$94 & 127]($parser);
    $cur$0 = HEAP32[$parser>>2]|0;
    $95 = ($cur$0>>>0)<($76>>>0);
    if ($95) {
     $arg2$037$phi = $cur$038;$arg1$036$phi = $arg2$037;$cur$038 = $cur$0;$arg2$037 = $arg2$037$phi;$arg1$036 = $arg1$036$phi;
    } else {
     break;
    }
   }
  }
  _FT_Stream_ReleaseFrame($stream,$16);
  $96 = (_FT_Stream_Seek($stream,$61)|0);
  $97 = ($96|0)==(0);
  if (!($97)) {
   $error$2 = $96;
   label = 31;
   break;
  }
 }
 if ((label|0) == 18) {
  $error$2 = $error$1$ph;
  STACKTOP = sp;return ($error$2|0);
 }
 else if ((label|0) == 25) {
  $84 = (_strncmp($arg1$036$lcssa108,89393,5)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   $error$2 = $$lcssa110;
   STACKTOP = sp;return ($error$2|0);
  }
  $86 = (_atol($arg2$037$lcssa106)|0);
  $87 = ((($parser)) + 88|0);
  HEAP32[$87>>2] = $86;
  $error$2 = $$lcssa110;
  STACKTOP = sp;return ($error$2|0);
 }
 else if ((label|0) == 31) {
  STACKTOP = sp;return ($error$2|0);
 }
 return (0)|0;
}
function _cid_parser_done($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($parser)) + 72|0);
  $4 = HEAP32[$3>>2]|0;
  _FT_Stream_ReleaseFrame($4,$0);
 }
 $5 = ((($parser)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vi[$6 & 127]($parser);
 return;
}
function _cid_slot_load_glyph($cidglyph,$cidsize,$glyph_index,$load_flags) {
 $cidglyph = $cidglyph|0;
 $cidsize = $cidsize|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 var $$lobit = 0, $$lobit1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $advance = 0, $cbox = 0, $decoder = 0, $error$0 = 0, $font_matrix = 0, $load_flags$ = 0, $n$03 = 0, $phitmp = 0, $vec$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1552|0;
 $decoder = sp + 40|0;
 $font_matrix = sp + 24|0;
 $cbox = sp + 8|0;
 $advance = sp;
 $0 = ((($cidglyph)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 136|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)>($glyph_index>>>0);
 if (!($6)) {
  $error$0 = 6;
  STACKTOP = sp;return ($error$0|0);
 }
 $7 = $load_flags & 1024;
 $8 = ($7|0)==(0);
 $9 = $load_flags | 3;
 $load_flags$ = $8 ? $load_flags : $9;
 $10 = ((($cidsize)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($cidglyph)) + 164|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($cidsize)) + 20|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($cidglyph)) + 168|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($cidglyph)) + 108|0);
 $17 = ((($cidglyph)) + 110|0);
 HEAP16[$17>>1] = 0;
 HEAP16[$16>>1] = 0;
 $18 = $load_flags$ & 1;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = $load_flags$ >>> 1;
  $$lobit = $20 & 1;
  $21 = $$lobit ^ 1;
  $phitmp = $21&255;
  $29 = $phitmp;
 } else {
  $29 = 0;
 }
 $22 = ((($cidglyph)) + 72|0);
 HEAP32[$22>>2] = 1869968492;
 $23 = ((($3)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$0>>2]|0;
 $27 = $load_flags$ >>> 16;
 $28 = $27 & 15;
 $30 = (FUNCTION_TABLE_iiiiiiiiii[$25 & 1]($decoder,$26,$cidsize,$cidglyph,0,0,$29,$28,161)|0);
 $31 = ($30|0)==(0);
 if (!($31)) {
  $error$0 = $30;
  STACKTOP = sp;return ($error$0|0);
 }
 $32 = $load_flags$ & 1024;
 $$lobit1 = $32 >>> 10;
 $33 = $$lobit1&255;
 $34 = ((($decoder)) + 69|0);
 HEAP8[$34>>0] = $33;
 $35 = (_cid_load_glyph($decoder,$glyph_index)|0);
 $36 = ($35|0)==(0);
 if (!($36)) {
  $error$0 = $35;
  STACKTOP = sp;return ($error$0|0);
 }
 $37 = ($32|0)==(0);
 $38 = ((($decoder)) + 1376|0);
 ;HEAP32[$font_matrix>>2]=HEAP32[$38>>2]|0;HEAP32[$font_matrix+4>>2]=HEAP32[$38+4>>2]|0;HEAP32[$font_matrix+8>>2]=HEAP32[$38+8>>2]|0;HEAP32[$font_matrix+12>>2]=HEAP32[$38+12>>2]|0;
 $39 = ((($decoder)) + 1392|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($decoder)) + 1396|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = HEAP32[$23>>2]|0;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 FUNCTION_TABLE_vi[$45 & 127]($decoder);
 $46 = ((($cidglyph)) + 124|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 & 1;
 $49 = $48 | 4;
 HEAP32[$46>>2] = $49;
 if (!($37)) {
  $50 = ((($cidglyph)) + 156|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ((($decoder)) + 32|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (_FT_RoundFix($53)|0);
  $55 = $54 >> 16;
  $56 = ((($cidglyph)) + 32|0);
  HEAP32[$56>>2] = $55;
  $57 = ((($decoder)) + 40|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_FT_RoundFix($58)|0);
  $60 = $59 >> 16;
  $61 = ((($cidglyph)) + 40|0);
  HEAP32[$61>>2] = $60;
  $62 = ((($51)) + 12|0);
  ;HEAP32[$62>>2]=HEAP32[$font_matrix>>2]|0;HEAP32[$62+4>>2]=HEAP32[$font_matrix+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$font_matrix+8>>2]|0;HEAP32[$62+12>>2]=HEAP32[$font_matrix+12>>2]|0;
  $63 = ((($51)) + 28|0);
  HEAP32[$63>>2] = $40;
  $64 = ((($51)) + 32|0);
  HEAP32[$64>>2] = $42;
  $65 = ((($51)) + 8|0);
  HEAP8[$65>>0] = 1;
  $error$0 = 0;
  STACKTOP = sp;return ($error$0|0);
 }
 $66 = ((($cidglyph)) + 24|0);
 $67 = ((($decoder)) + 40|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (_FT_RoundFix($68)|0);
 $70 = $69 >> 16;
 $71 = ((($cidglyph)) + 40|0);
 HEAP32[$71>>2] = $70;
 $72 = HEAP32[$67>>2]|0;
 $73 = (_FT_RoundFix($72)|0);
 $74 = $73 >> 16;
 $75 = ((($cidglyph)) + 56|0);
 HEAP32[$75>>2] = $74;
 $76 = ((($cidglyph)) + 156|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ((($77)) + 8|0);
 HEAP8[$78>>0] = 0;
 $79 = ((($1)) + 208|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($1)) + 200|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($80) - ($82))|0;
 $84 = $83 >> 16;
 $85 = ((($cidglyph)) + 52|0);
 HEAP32[$85>>2] = $84;
 $86 = ((($cidglyph)) + 60|0);
 HEAP32[$86>>2] = $84;
 HEAP32[$22>>2] = 1869968492;
 $87 = ((($cidsize)) + 14|0);
 $88 = HEAP16[$87>>1]|0;
 $89 = ($88&65535)<(24);
 if ($89) {
  $90 = HEAP32[$46>>2]|0;
  $91 = $90 | 256;
  HEAP32[$46>>2] = $91;
 }
 _FT_Outline_Transform($16,$font_matrix);
 _FT_Outline_Translate($16,$40,$42);
 $92 = HEAP32[$71>>2]|0;
 HEAP32[$advance>>2] = $92;
 $93 = ((($advance)) + 4|0);
 HEAP32[$93>>2] = 0;
 _FT_Vector_Transform($advance,$font_matrix);
 $94 = HEAP32[$advance>>2]|0;
 $95 = (($94) + ($40))|0;
 HEAP32[$71>>2] = $95;
 HEAP32[$advance>>2] = 0;
 $96 = HEAP32[$85>>2]|0;
 HEAP32[$93>>2] = $96;
 _FT_Vector_Transform($advance,$font_matrix);
 $97 = HEAP32[$93>>2]|0;
 $98 = (($97) + ($42))|0;
 HEAP32[$85>>2] = $98;
 if ($19) {
  $99 = ((($decoder)) + 16|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ((($100)) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = HEAP32[$12>>2]|0;
  $104 = HEAP32[$15>>2]|0;
  $105 = ($29<<24>>24)==(0);
  if ($105) {
   label = 13;
  } else {
   $106 = ((($decoder)) + 72|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($107|0)==(0|0);
   if ($108) {
    label = 13;
   }
  }
  if ((label|0) == 13) {
   $109 = ((($100)) + 2|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = ($110<<16>>16)>(0);
   if ($111) {
    $112 = $110 << 16 >> 16;
    $n$03 = $112;$vec$02 = $102;
    while(1) {
     $113 = HEAP32[$vec$02>>2]|0;
     $114 = (_FT_MulFix($113,$103)|0);
     HEAP32[$vec$02>>2] = $114;
     $115 = ((($vec$02)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = (_FT_MulFix($116,$104)|0);
     HEAP32[$115>>2] = $117;
     $118 = (($n$03) + -1)|0;
     $119 = ((($vec$02)) + 8|0);
     $120 = ($n$03|0)>(1);
     if ($120) {
      $n$03 = $118;$vec$02 = $119;
     } else {
      break;
     }
    }
   }
  }
  $121 = HEAP32[$71>>2]|0;
  $122 = (_FT_MulFix($121,$103)|0);
  HEAP32[$71>>2] = $122;
  $123 = HEAP32[$85>>2]|0;
  $124 = (_FT_MulFix($123,$104)|0);
  HEAP32[$85>>2] = $124;
 }
 _FT_Outline_Get_CBox($16,$cbox);
 $125 = ((($cbox)) + 8|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = HEAP32[$cbox>>2]|0;
 $128 = (($126) - ($127))|0;
 HEAP32[$66>>2] = $128;
 $129 = ((($cbox)) + 12|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ((($cbox)) + 4|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (($130) - ($132))|0;
 $134 = ((($cidglyph)) + 28|0);
 HEAP32[$134>>2] = $133;
 $135 = HEAP32[$cbox>>2]|0;
 $136 = ((($cidglyph)) + 32|0);
 HEAP32[$136>>2] = $135;
 $137 = HEAP32[$129>>2]|0;
 $138 = ((($cidglyph)) + 36|0);
 HEAP32[$138>>2] = $137;
 $139 = $load_flags$ & 16;
 $140 = ($139|0)==(0);
 if ($140) {
  $error$0 = $35;
  STACKTOP = sp;return ($error$0|0);
 }
 $141 = HEAP32[$85>>2]|0;
 _ft_synthesize_vertical_metrics($66,$141);
 $error$0 = $35;
 STACKTOP = sp;return ($error$0|0);
}
function _cid_load_glyph($decoder,$glyph_index) {
 $decoder = $decoder|0;
 $glyph_index = $glyph_index|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $charstring$0 = 0, $charstring$1 = 0, $error = 0, $fd_select$0 = 0, $glyph_data = 0;
 var $glyph_length$0 = 0, $glyph_length$1 = 0, $metrics = 0, $or$cond = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $p = sp + 28|0;
 $error = sp + 24|0;
 $glyph_data = sp + 16|0;
 $metrics = sp;
 $0 = ((($decoder)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 328|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$error>>2] = 0;
 $4 = ((($1)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 136|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 128|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 52|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = HEAP32[$11>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($11)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiii[$14 & 127]($16,$glyph_index,$glyph_data)|0);
  HEAP32[$error>>2] = $17;
  $18 = ($17|0)==(0);
  if (!($18)) {
   $153 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($153|0);
  }
  $19 = HEAP32[$glyph_data>>2]|0;
  HEAP32[$p>>2] = $19;
  $20 = ((($1)) + 288|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21&255;
  $23 = (_cid_get_offset($p,$22)|0);
  $24 = ((($glyph_data)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==(0);
  if ($26) {
   $charstring$0 = 0;$glyph_length$0 = 0;
  } else {
   $27 = HEAP32[$20>>2]|0;
   $28 = (($25) - ($27))|0;
   $29 = (_ft_mem_alloc($5,$28,$error)|0);
   $30 = HEAP32[$error>>2]|0;
   $31 = ($30|0)==(0);
   if ($31) {
    $32 = HEAP32[$glyph_data>>2]|0;
    $33 = HEAP32[$20>>2]|0;
    $34 = (($32) + ($33)|0);
    _memcpy(($29|0),($34|0),($28|0))|0;
    $charstring$0 = $29;$glyph_length$0 = $28;
   } else {
    $charstring$0 = $29;$glyph_length$0 = $28;
   }
  }
  $35 = HEAP32[$11>>2]|0;
  $36 = ((($35)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$15>>2]|0;
  FUNCTION_TABLE_vii[$37 & 31]($38,$glyph_data);
  $39 = HEAP32[$error>>2]|0;
  $40 = ($39|0)==(0);
  if ($40) {
   $charstring$1 = $charstring$0;$fd_select$0 = $23;$glyph_length$1 = $glyph_length$0;
  } else {
   $153 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($153|0);
  }
 } else {
  $41 = ((($1)) + 288|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ((($1)) + 292|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + ($42))|0;
  $46 = ((($1)) + 308|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($1)) + 284|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($47))|0;
  $51 = Math_imul($45, $glyph_index)|0;
  $52 = (($50) + ($51))|0;
  $53 = (_FT_Stream_Seek($3,$52)|0);
  HEAP32[$error>>2] = $53;
  $54 = ($53|0)==(0);
  if (!($54)) {
   $153 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($153|0);
  }
  $55 = $45 << 1;
  $56 = (_FT_Stream_EnterFrame($3,$55)|0);
  HEAP32[$error>>2] = $56;
  $57 = ($56|0)==(0);
  if (!($57)) {
   $153 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($153|0);
  }
  $58 = ((($3)) + 32|0);
  $59 = HEAP32[$58>>2]|0;
  HEAP32[$p>>2] = $59;
  $60 = HEAP32[$41>>2]|0;
  $61 = $60&255;
  $62 = (_cid_get_offset($p,$61)|0);
  $63 = HEAP32[$43>>2]|0;
  $64 = $63&255;
  $65 = (_cid_get_offset($p,$64)|0);
  $66 = HEAP32[$41>>2]|0;
  $67 = HEAP32[$p>>2]|0;
  $68 = (($67) + ($66)|0);
  HEAP32[$p>>2] = $68;
  $69 = HEAP32[$43>>2]|0;
  $70 = $69&255;
  $71 = (_cid_get_offset($p,$70)|0);
  $72 = (($71) - ($65))|0;
  _FT_Stream_ExitFrame($3);
  $73 = ((($1)) + 300|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($62>>>0)<($74>>>0);
  if (!($75)) {
   HEAP32[$error>>2] = 9;
   $153 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($153|0);
  }
  $76 = ($71|0)==($65|0);
  if ($76) {
   $153 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($153|0);
  }
  $77 = (_ft_mem_alloc($5,$72,$error)|0);
  $78 = HEAP32[$error>>2]|0;
  $79 = ($78|0)==(0);
  if (!($79)) {
   $153 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($153|0);
  }
  $80 = HEAP32[$46>>2]|0;
  $81 = (($80) + ($65))|0;
  $82 = (_FT_Stream_ReadAt($3,$81,$77,$72)|0);
  HEAP32[$error>>2] = $82;
  $83 = ($82|0)==(0);
  if ($83) {
   $charstring$1 = $77;$fd_select$0 = $62;$glyph_length$1 = $72;
  } else {
   $153 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($153|0);
  }
 }
 $84 = ((($1)) + 316|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + ($fd_select$0<<3)|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ((($decoder)) + 1364|0);
 HEAP32[$88>>2] = $87;
 $89 = (((($85) + ($fd_select$0<<3)|0)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ((($decoder)) + 1368|0);
 HEAP32[$91>>2] = $90;
 $92 = ((($decoder)) + 1372|0);
 HEAP32[$92>>2] = 0;
 $93 = ((($1)) + 304|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ((($decoder)) + 1376|0);
 $96 = (((($94) + (($fd_select$0*252)|0)|0)) + 216|0);
 ;HEAP32[$95>>2]=HEAP32[$96>>2]|0;HEAP32[$95+4>>2]=HEAP32[$96+4>>2]|0;HEAP32[$95+8>>2]=HEAP32[$96+8>>2]|0;HEAP32[$95+12>>2]=HEAP32[$96+12>>2]|0;
 $97 = ((($decoder)) + 1392|0);
 $98 = (((($94) + (($fd_select$0*252)|0)|0)) + 232|0);
 $99 = $98;
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = (($99) + 4)|0;
 $103 = $102;
 $104 = HEAP32[$103>>2]|0;
 $105 = $97;
 $106 = $105;
 HEAP32[$106>>2] = $101;
 $107 = (($105) + 4)|0;
 $108 = $107;
 HEAP32[$108>>2] = $104;
 $109 = (((($94) + (($fd_select$0*252)|0)|0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ((($decoder)) + 1360|0);
 HEAP32[$111>>2] = $110;
 $112 = ($110|0)>(-1);
 $$ = $112 ? $110 : 0;
 if ($112) {
  $113 = ((($7)) + 16|0);
  $114 = HEAP32[$113>>2]|0;
  FUNCTION_TABLE_viii[$114 & 31]($charstring$1,$glyph_length$1,4330);
 }
 $115 = ((($decoder)) + 1484|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($charstring$1) + ($$)|0);
 $118 = (($glyph_length$1) - ($$))|0;
 $119 = (FUNCTION_TABLE_iiii[$116 & 127]($decoder,$117,$118)|0);
 HEAP32[$error>>2] = $119;
 _ft_mem_free($5,$charstring$1);
 $120 = HEAP32[$error>>2]|0;
 $121 = ($120|0)==(0);
 $or$cond = $12 & $121;
 if (!($or$cond)) {
  $153 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($153|0);
 }
 $122 = HEAP32[$11>>2]|0;
 $123 = ((($122)) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)==(0|0);
 if ($125) {
  $153 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($153|0);
 }
 $126 = ((($decoder)) + 32|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (_FT_RoundFix($127)|0);
 $129 = $128 >> 16;
 HEAP32[$metrics>>2] = $129;
 $130 = ((($metrics)) + 4|0);
 HEAP32[$130>>2] = 0;
 $131 = ((($decoder)) + 40|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (_FT_RoundFix($132)|0);
 $134 = $133 >> 16;
 $135 = ((($metrics)) + 8|0);
 HEAP32[$135>>2] = $134;
 $136 = ((($decoder)) + 44|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = (_FT_RoundFix($137)|0);
 $139 = $138 >> 16;
 $140 = ((($metrics)) + 12|0);
 HEAP32[$140>>2] = $139;
 $141 = HEAP32[$11>>2]|0;
 $142 = ((($141)) + 8|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = ((($11)) + 4|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = (FUNCTION_TABLE_iiiii[$143 & 63]($145,$glyph_index,0,$metrics)|0);
 HEAP32[$error>>2] = $146;
 $147 = HEAP32[$metrics>>2]|0;
 $148 = $147 << 16;
 HEAP32[$126>>2] = $148;
 $149 = HEAP32[$135>>2]|0;
 $150 = $149 << 16;
 HEAP32[$131>>2] = $150;
 $151 = HEAP32[$140>>2]|0;
 $152 = $151 << 16;
 HEAP32[$136>>2] = $152;
 $153 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($153|0);
}
function _t42_parser_init($parser,$stream,$memory,$psaux) {
 $parser = $parser|0;
 $stream = $stream|0;
 $memory = $memory|0;
 $psaux = $psaux|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($psaux)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_viiii[$2 & 15]($parser,0,0,$memory);
 $3 = ((($parser)) + 72|0);
 HEAP32[$3>>2] = $stream;
 $4 = ((($parser)) + 80|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($parser)) + 76|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($parser)) + 84|0);
 HEAP8[$6>>0] = 0;
 $7 = (_FT_Stream_Seek($stream,0)|0);
 HEAP32[$error>>2] = $7;
 $8 = ($7|0)==(0);
 do {
  if ($8) {
   $9 = (_FT_Stream_EnterFrame($stream,17)|0);
   HEAP32[$error>>2] = $9;
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = ((($stream)) + 32|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (_memcmp($12,89399,17)|0);
    $14 = ($13|0)==(0);
    if (!($14)) {
     HEAP32[$error>>2] = 2;
    }
    _FT_Stream_ExitFrame($stream);
    $15 = HEAP32[$error>>2]|0;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = (_FT_Stream_Seek($stream,0)|0);
     HEAP32[$error>>2] = $17;
     $18 = ($17|0)==(0);
     if ($18) {
      $19 = ((($stream)) + 4|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ((($stream)) + 20|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(0|0);
      if ($23) {
       $24 = HEAP32[$stream>>2]|0;
       $25 = ((($stream)) + 8|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = (($24) + ($26)|0);
       HEAP32[$5>>2] = $27;
       HEAP32[$4>>2] = $20;
       HEAP8[$6>>0] = 1;
       $28 = (_FT_Stream_Skip($stream,$20)|0);
       HEAP32[$error>>2] = $28;
       $29 = ($28|0)==(0);
       if (!($29)) {
        break;
       }
      } else {
       $30 = (_ft_mem_alloc($memory,$20,$error)|0);
       HEAP32[$5>>2] = $30;
       $31 = HEAP32[$error>>2]|0;
       $32 = ($31|0)==(0);
       if (!($32)) {
        break;
       }
       $33 = (_FT_Stream_Read($stream,$30,$20)|0);
       HEAP32[$error>>2] = $33;
       $34 = ($33|0)==(0);
       if (!($34)) {
        break;
       }
       HEAP32[$4>>2] = $20;
      }
      $35 = HEAP32[$5>>2]|0;
      $36 = ((($parser)) + 4|0);
      HEAP32[$36>>2] = $35;
      $37 = HEAP32[$5>>2]|0;
      HEAP32[$parser>>2] = $37;
      $38 = HEAP32[$4>>2]|0;
      $39 = (($37) + ($38)|0);
      $40 = ((($parser)) + 8|0);
      HEAP32[$40>>2] = $39;
      $$pr = HEAP32[$error>>2]|0;
      $41 = ($$pr|0)==(0);
      if ($41) {
       $45 = HEAP32[$error>>2]|0;
       STACKTOP = sp;return ($45|0);
      }
     }
    }
   }
  }
 } while(0);
 $42 = HEAP8[$6>>0]|0;
 $43 = ($42<<24>>24)==(0);
 if (!($43)) {
  $45 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($45|0);
 }
 $44 = HEAP32[$5>>2]|0;
 _ft_mem_free($memory,$44);
 HEAP32[$5>>2] = 0;
 $45 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($45|0);
}
function _t42_parser_done($parser) {
 $parser = $parser|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($parser)) + 84|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = ((($parser)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($parser)) + 76|0);
  $6 = HEAP32[$5>>2]|0;
  _ft_mem_free($4,$6);
  HEAP32[$5>>2] = 0;
 }
 $7 = ((($parser)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 127]($parser);
 return;
}
function _t42_parse_dict($face,$loader,$base,$size) {
 $face = $face|0;
 $loader = $loader|0;
 $base = $base|0;
 $size = $size|0;
 var $$0 = 0, $$lcssa = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $cur$013 = 0;
 var $cur2$0 = 0, $i$012 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond7 = 0, $token = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $token = sp;
 HEAP32[$loader>>2] = $base;
 $0 = (($base) + ($size)|0);
 $1 = ((($loader)) + 8|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($loader)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($loader)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 127]($loader);
 $6 = HEAP32[$loader>>2]|0;
 $7 = ($6>>>0)<($3>>>0);
 L1: do {
  if ($7) {
   $8 = ((($loader)) + 32|0);
   $9 = ((($loader)) + 56|0);
   $10 = ((($token)) + 8|0);
   $11 = ((($loader)) + 32|0);
   $12 = ((($loader)) + 32|0);
   $14 = $6;
   L3: while(1) {
    $13 = HEAP8[$14>>0]|0;
    $15 = ($13<<24>>24)==(70);
    $16 = ((($14)) + 25|0);
    $17 = ($16>>>0)<($3>>>0);
    $or$cond = $17 & $15;
    if ($or$cond) {
     $18 = (_strncmp($14,89417,13)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      $20 = HEAP32[$8>>2]|0;
      FUNCTION_TABLE_vi[$20 & 127]($loader);
      $21 = HEAP32[$4>>2]|0;
      FUNCTION_TABLE_vi[$21 & 127]($loader);
      $22 = HEAP32[$loader>>2]|0;
      $23 = ($22>>>0)<($3>>>0);
      L8: do {
       if ($23) {
        $cur$013 = $22;
        while(1) {
         $24 = HEAP8[$cur$013>>0]|0;
         $25 = ($24<<24>>24)==(107);
         $26 = ((($cur$013)) + 5|0);
         $27 = ($26>>>0)<($3>>>0);
         $or$cond4 = $27 & $25;
         if ($or$cond4) {
          $28 = (_strncmp($cur$013,89431,5)|0);
          $29 = ($28|0)==(0);
          if ($29) {
           break;
          }
         }
         $30 = HEAP32[$8>>2]|0;
         FUNCTION_TABLE_vi[$30 & 127]($loader);
         $31 = HEAP32[$2>>2]|0;
         $32 = ($31|0)==(0);
         if (!($32)) {
          break L1;
         }
         $33 = HEAP32[$4>>2]|0;
         FUNCTION_TABLE_vi[$33 & 127]($loader);
         $34 = HEAP32[$loader>>2]|0;
         $35 = ($34>>>0)<($3>>>0);
         if ($35) {
          $cur$013 = $34;
         } else {
          $cur2$0 = $22;
          break L8;
         }
        }
        $36 = HEAP32[$8>>2]|0;
        FUNCTION_TABLE_vi[$36 & 127]($loader);
        $37 = HEAP32[$9>>2]|0;
        FUNCTION_TABLE_vii[$37 & 31]($loader,$token);
        $38 = HEAP32[$10>>2]|0;
        $39 = ($38|0)==(3);
        if ($39) {
         $40 = HEAP32[$loader>>2]|0;
         $cur2$0 = $40;
        } else {
         $cur2$0 = $22;
        }
       } else {
        $cur2$0 = $22;
       }
      } while(0);
      HEAP32[$loader>>2] = $cur2$0;
     } else {
      label = 13;
     }
    } else {
     label = 13;
    }
    L18: do {
     if ((label|0) == 13) {
      label = 0;
      $41 = HEAP8[$14>>0]|0;
      $42 = ($41<<24>>24)==(47);
      $43 = ((($14)) + 2|0);
      $44 = ($43>>>0)<($3>>>0);
      $or$cond6 = $44 & $42;
      if (!($or$cond6)) {
       $69 = HEAP32[$12>>2]|0;
       FUNCTION_TABLE_vi[$69 & 127]($loader);
       $70 = HEAP32[$2>>2]|0;
       $71 = ($70|0)==(0);
       if ($71) {
        break;
       } else {
        break L1;
       }
      }
      $45 = ((($14)) + 1|0);
      HEAP32[$loader>>2] = $45;
      $46 = HEAP32[$11>>2]|0;
      FUNCTION_TABLE_vi[$46 & 127]($loader);
      $47 = HEAP32[$2>>2]|0;
      $48 = ($47|0)==(0);
      if (!($48)) {
       break L1;
      }
      $49 = HEAP32[$loader>>2]|0;
      $50 = $49;
      $51 = $45;
      $52 = (($50) - ($51))|0;
      $$off = (($52) + -1)|0;
      $53 = ($$off>>>0)<(21);
      $54 = ($49>>>0)<($3>>>0);
      $or$cond7 = $54 & $53;
      if ($or$cond7) {
       $i$012 = 0;
       while(1) {
        $55 = (17532 + (($i$012*36)|0)|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = ($56|0)==(0|0);
        if (!($57)) {
         $58 = HEAP8[$45>>0]|0;
         $59 = HEAP8[$56>>0]|0;
         $60 = ($58<<24>>24)==($59<<24>>24);
         if ($60) {
          $61 = (_strlen($56)|0);
          $62 = ($52|0)==($61|0);
          if ($62) {
           $63 = (_memcmp($45,$56,$52)|0);
           $64 = ($63|0)==(0);
           if ($64) {
            $$lcssa = $55;
            break;
           }
          }
         }
        }
        $67 = (($i$012) + 1)|0;
        $68 = ($67|0)<(20);
        if ($68) {
         $i$012 = $67;
        } else {
         break L18;
        }
       }
       $65 = (_t42_load_keyword($face,$loader,$$lcssa)|0);
       HEAP32[$2>>2] = $65;
       $66 = ($65|0)==(0);
       if (!($66)) {
        $$0 = $65;
        break L3;
       }
      }
     }
    } while(0);
    $72 = HEAP32[$4>>2]|0;
    FUNCTION_TABLE_vi[$72 & 127]($loader);
    $73 = HEAP32[$loader>>2]|0;
    $74 = ($73>>>0)<($3>>>0);
    if ($74) {
     $14 = $73;
    } else {
     break L1;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $75 = HEAP32[$2>>2]|0;
 $$0 = $75;
 STACKTOP = sp;return ($$0|0);
}
function _t42_loader_init($loader,$face) {
 $loader = $loader|0;
 $face = $face|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset(($loader|0),0,304)|0;
 return;
}
function _t42_loader_done($loader) {
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 140|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = ((($loader)) + 92|0);
  FUNCTION_TABLE_vi[$1 & 127]($3);
 }
 $4 = ((($loader)) + 248|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($loader)) + 200|0);
  FUNCTION_TABLE_vi[$5 & 127]($7);
 }
 $8 = ((($loader)) + 196|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($loader)) + 148|0);
  FUNCTION_TABLE_vi[$9 & 127]($11);
 }
 $12 = ((($loader)) + 300|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  _t42_parser_done($loader);
  return;
 }
 $15 = ((($loader)) + 252|0);
 FUNCTION_TABLE_vi[$13 & 127]($15);
 _t42_parser_done($loader);
 return;
}
function _t42_load_keyword($face,$loader,$field) {
 $face = $face|0;
 $loader = $loader|0;
 $field = $field|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dummy_object = 0, $error$0 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dummy_object = sp;
 $0 = ((($field)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(10);
 if ($2) {
  $3 = ((($field)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  FUNCTION_TABLE_vii[$4 & 31]($face,$loader);
  $5 = ((($loader)) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $error$0 = $6;
  STACKTOP = sp;return ($error$0|0);
 }
 $7 = ((($field)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 switch ($8|0) {
 case 3:  {
  $9 = ((($face)) + 132|0);
  HEAP32[$dummy_object>>2] = $9;
  break;
 }
 case 2:  {
  $10 = ((($face)) + 164|0);
  HEAP32[$dummy_object>>2] = $10;
  break;
 }
 case 5:  {
  $11 = ((($face)) + 460|0);
  HEAP32[$dummy_object>>2] = $11;
  break;
 }
 default: {
  $12 = ((($face)) + 132|0);
  HEAP32[$dummy_object>>2] = $12;
 }
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = $13 & -2;
 $switch = ($14|0)==(8);
 if ($switch) {
  $15 = ((($loader)) + 68|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiiiii[$16 & 63]($loader,$field,$dummy_object,0,0)|0);
  $error$0 = $17;
  STACKTOP = sp;return ($error$0|0);
 } else {
  $18 = ((($loader)) + 64|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_iiiiii[$19 & 63]($loader,$field,$dummy_object,0,0)|0);
  $error$0 = $20;
  STACKTOP = sp;return ($error$0|0);
 }
 return (0)|0;
}
function _t42_parse_font_matrix($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $temp = sp;
 $0 = ((($loader)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 (FUNCTION_TABLE_iiiii[$1 & 63]($loader,6,$temp,3)|0);
 $2 = ((($temp)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 $5 = (0 - ($3))|0;
 $6 = $4 ? $5 : $3;
 $7 = (_FT_DivFix(65536000,$6)|0);
 $8 = $7 >>> 16;
 $9 = $8&65535;
 $10 = ((($face)) + 68|0);
 HEAP16[$10>>1] = $9;
 $11 = ($6|0)==(65536);
 if (!($11)) {
  $12 = HEAP32[$temp>>2]|0;
  $13 = (_FT_DivFix($12,$6)|0);
  HEAP32[$temp>>2] = $13;
  $14 = ((($temp)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_FT_DivFix($15,$6)|0);
  HEAP32[$14>>2] = $16;
  $17 = ((($temp)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_FT_DivFix($18,$6)|0);
  HEAP32[$17>>2] = $19;
  $20 = ((($temp)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (_FT_DivFix($21,$6)|0);
  HEAP32[$20>>2] = $22;
  $23 = ((($temp)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_FT_DivFix($24,$6)|0);
  HEAP32[$23>>2] = $25;
  HEAP32[$2>>2] = 65536;
 }
 $26 = HEAP32[$temp>>2]|0;
 $27 = ((($face)) + 436|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($temp)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($face)) + 444|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($temp)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($face)) + 440|0);
 HEAP32[$33>>2] = $32;
 $34 = HEAP32[$2>>2]|0;
 $35 = ((($face)) + 448|0);
 HEAP32[$35>>2] = $34;
 $36 = ((($temp)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 >> 16;
 $39 = ((($face)) + 452|0);
 HEAP32[$39>>2] = $38;
 $40 = ((($temp)) + 20|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $41 >> 16;
 $43 = ((($face)) + 456|0);
 HEAP32[$43>>2] = $42;
 STACKTOP = sp;return;
}
function _t42_parse_encoding($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $$lcssa22 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $charcode$0 = 0, $count$0 = 0, $cur$1 = 0, $cur$2 = 0, $error = 0, $exitcond = 0, $n$011 = 0, $n$18 = 0, $n$2 = 0, $only_immediates$0 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond3 = 0, $or$cond4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($loader)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 488|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($loader)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 127]($loader);
 $6 = HEAP32[$loader>>2]|0;
 $7 = ($6>>>0)<($1>>>0);
 if (!($7)) {
  $8 = ((($loader)) + 12|0);
  HEAP32[$8>>2] = 3;
  STACKTOP = sp;return;
 }
 $9 = HEAP8[$6>>0]|0;
 $10 = $9&255;
 $11 = (($10) + -48)|0;
 $12 = ($11>>>0)<(10);
 $13 = ($9<<24>>24)==(91);
 $or$cond = $13 | $12;
 if (!($or$cond)) {
  $108 = ((($6)) + 17|0);
  $109 = ($108>>>0)<($1>>>0);
  if ($109) {
   $110 = (_strncmp($6,89643,16)|0);
   $111 = ($110|0)==(0);
   if ($111) {
    $112 = ((($face)) + 368|0);
    HEAP32[$112>>2] = 2;
    STACKTOP = sp;return;
   }
  }
  $113 = ((($6)) + 15|0);
  $114 = ($113>>>0)<($1>>>0);
  if ($114) {
   $115 = (_strncmp($6,89660,14)|0);
   $116 = ($115|0)==(0);
   if ($116) {
    $117 = ((($face)) + 368|0);
    HEAP32[$117>>2] = 4;
    STACKTOP = sp;return;
   }
  }
  $118 = ((($6)) + 18|0);
  $119 = ($118>>>0)<($1>>>0);
  if ($119) {
   $120 = (_strncmp($6,89675,17)|0);
   $121 = ($120|0)==(0);
   if ($121) {
    $122 = ((($face)) + 368|0);
    HEAP32[$122>>2] = 3;
    STACKTOP = sp;return;
   }
  }
  $123 = ((($loader)) + 12|0);
  HEAP32[$123>>2] = 3;
  STACKTOP = sp;return;
 }
 $14 = ((($loader)) + 92|0);
 $15 = ((($loader)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 if ($13) {
  $17 = ((($6)) + 1|0);
  HEAP32[$loader>>2] = $17;
  $count$0 = 256;$only_immediates$0 = 1;
 } else {
  $18 = ((($loader)) + 36|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_ii[$19 & 63]($loader)|0);
  $count$0 = $20;$only_immediates$0 = 0;
 }
 $21 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$21 & 127]($loader);
 $22 = HEAP32[$loader>>2]|0;
 $23 = ($22>>>0)<($1>>>0);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = ((($face)) + 372|0);
 HEAP32[$24>>2] = $count$0;
 $25 = ((($loader)) + 88|0);
 HEAP32[$25>>2] = $count$0;
 $26 = (_ft_mem_realloc($16,2,0,$count$0,0,$error)|0);
 $27 = ((($face)) + 384|0);
 HEAP32[$27>>2] = $26;
 $28 = HEAP32[$error>>2]|0;
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = (_ft_mem_realloc($16,4,0,$count$0,0,$error)|0);
  $31 = ((($face)) + 388|0);
  HEAP32[$31>>2] = $30;
  $32 = HEAP32[$error>>2]|0;
  $33 = ($32|0)==(0);
  if ($33) {
   $34 = HEAP32[$3>>2]|0;
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_iiii[$35 & 127]($14,$count$0,$16)|0);
   HEAP32[$error>>2] = $36;
   $37 = ($36|0)==(0);
   if ($37) {
    $38 = ($count$0|0)==(0);
    if (!($38)) {
     $39 = ((($loader)) + 136|0);
     $n$011 = 0;
     while(1) {
      $42 = HEAP32[$39>>2]|0;
      (FUNCTION_TABLE_iiiii[$42 & 63]($14,$n$011,89635,8)|0);
      $43 = (($n$011) + 1)|0;
      $exitcond = ($43|0)==($count$0|0);
      if ($exitcond) {
       break;
      } else {
       $n$011 = $43;
      }
     }
    }
    $44 = HEAP32[$4>>2]|0;
    FUNCTION_TABLE_vi[$44 & 127]($loader);
    $45 = HEAP32[$loader>>2]|0;
    $46 = ($45>>>0)<($1>>>0);
    L40: do {
     if ($46) {
      $47 = ($only_immediates$0<<24>>24)==(0);
      $48 = ((($loader)) + 32|0);
      $49 = ((($loader)) + 12|0);
      $50 = ((($loader)) + 36|0);
      $51 = ((($loader)) + 32|0);
      $52 = ((($loader)) + 12|0);
      $53 = ((($loader)) + 136|0);
      $54 = ((($loader)) + 116|0);
      $56 = $45;$n$18 = 0;
      while(1) {
       $55 = HEAP8[$56>>0]|0;
       $57 = ($55<<24>>24)==(100);
       if ($57) {
        $58 = ((($56)) + 3|0);
        $59 = ($58>>>0)<($1>>>0);
        if ($59) {
         $60 = ((($56)) + 1|0);
         $61 = HEAP8[$60>>0]|0;
         $62 = ($61<<24>>24)==(101);
         if ($62) {
          $63 = ((($56)) + 2|0);
          $64 = HEAP8[$63>>0]|0;
          $65 = ($64<<24>>24)==(102);
          if ($65) {
           $66 = HEAP8[$58>>0]|0;
           $67 = (_t42_is_space($66)|0);
           $68 = ($67|0)==(0);
           if (!($68)) {
            $cur$2 = $58;
            break L40;
           }
          }
         }
        }
        $$pr = HEAP8[$56>>0]|0;
        $70 = $$pr;
       } else {
        $70 = $55;
       }
       $69 = ($70<<24>>24)==(93);
       if ($69) {
        $$lcssa22 = $56;
        label = 24;
        break;
       }
       $72 = $70&255;
       $73 = (($72) + -48)|0;
       $74 = ($73>>>0)>(9);
       $or$cond1 = $47 & $74;
       if ($or$cond1) {
        $101 = HEAP32[$48>>2]|0;
        FUNCTION_TABLE_vi[$101 & 127]($loader);
        $102 = HEAP32[$49>>2]|0;
        $103 = ($102|0)==(0);
        if ($103) {
         $cur$1 = $56;$n$2 = $n$18;
        } else {
         label = 45;
         break;
        }
       } else {
        if ($47) {
         $75 = HEAP32[$50>>2]|0;
         $76 = (FUNCTION_TABLE_ii[$75 & 63]($loader)|0);
         $77 = HEAP32[$4>>2]|0;
         FUNCTION_TABLE_vi[$77 & 127]($loader);
         $charcode$0 = $76;
        } else {
         $charcode$0 = $n$18;
        }
        $78 = HEAP32[$loader>>2]|0;
        $79 = HEAP8[$78>>0]|0;
        $80 = ($79<<24>>24)==(47);
        $81 = ((($78)) + 2|0);
        $82 = ($81>>>0)<($1>>>0);
        $or$cond3 = $80 & $82;
        $83 = ($n$18>>>0)<($count$0>>>0);
        $or$cond4 = $83 & $or$cond3;
        if ($or$cond4) {
         $84 = ((($78)) + 1|0);
         HEAP32[$loader>>2] = $84;
         $85 = HEAP32[$51>>2]|0;
         FUNCTION_TABLE_vi[$85 & 127]($loader);
         $86 = HEAP32[$52>>2]|0;
         $87 = ($86|0)==(0);
         if (!($87)) {
          label = 45;
          break;
         }
         $88 = HEAP32[$loader>>2]|0;
         $89 = $88;
         $90 = $84;
         $91 = (($89) - ($90))|0;
         $92 = HEAP32[$53>>2]|0;
         $93 = (($91) + 1)|0;
         $94 = (FUNCTION_TABLE_iiiii[$92 & 63]($14,$charcode$0,$84,$93)|0);
         HEAP32[$52>>2] = $94;
         $95 = ($94|0)==(0);
         if (!($95)) {
          label = 45;
          break;
         }
         $96 = HEAP32[$54>>2]|0;
         $97 = (($96) + ($charcode$0<<2)|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = (($98) + ($91)|0);
         HEAP8[$99>>0] = 0;
         $100 = (($n$18) + 1)|0;
         $cur$1 = $84;$n$2 = $100;
        } else {
         $cur$1 = $78;$n$2 = $n$18;
        }
       }
       $104 = HEAP32[$4>>2]|0;
       FUNCTION_TABLE_vi[$104 & 127]($loader);
       $105 = HEAP32[$loader>>2]|0;
       $106 = ($105>>>0)<($1>>>0);
       if ($106) {
        $56 = $105;$n$18 = $n$2;
       } else {
        $cur$2 = $cur$1;
        break L40;
       }
      }
      if ((label|0) == 24) {
       $71 = ((($$lcssa22)) + 1|0);
       $cur$2 = $71;
       break;
      }
      else if ((label|0) == 45) {
       STACKTOP = sp;return;
      }
     } else {
      $cur$2 = $6;
     }
    } while(0);
    $107 = ((($face)) + 368|0);
    HEAP32[$107>>2] = 1;
    HEAP32[$loader>>2] = $cur$2;
    STACKTOP = sp;return;
   }
  }
 }
 $40 = HEAP32[$error>>2]|0;
 $41 = ((($loader)) + 12|0);
 HEAP32[$41>>2] = $40;
 STACKTOP = sp;return;
}
function _t42_parse_charstrings($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $$cast = 0, $$lcssa79 = 0, $$notdef_found$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$019 = 0, $count$019$lcssa = 0, $count$1 = 0, $error$0 = 0, $n$0$notdef_index$0 = 0, $n$0$ph = 0, $n$1 = 0;
 var $notdef_found$0$ph = 0, $notdef_found$1 = 0, $notdef_found$2 = 0, $notdef_index$0$ph = 0, $notdef_index$1 = 0, $notdef_index$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($loader)) + 200|0);
 $1 = ((($loader)) + 148|0);
 $2 = ((($loader)) + 252|0);
 $3 = ((($loader)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($face)) + 488|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($loader)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($loader)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$10 & 127]($loader);
 $11 = HEAP32[$loader>>2]|0;
 $12 = ($11>>>0)<($8>>>0);
 L1: do {
  if ($12) {
   $13 = HEAP8[$11>>0]|0;
   $14 = $13&255;
   $15 = (($14) + -48)|0;
   $16 = ($15>>>0)<(10);
   L3: do {
    if ($16) {
     $17 = ((($loader)) + 36|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (FUNCTION_TABLE_ii[$18 & 63]($loader)|0);
     $20 = ((($loader)) + 144|0);
     HEAP32[$20>>2] = $19;
     $21 = ((($loader)) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = ($22|0)==(0);
     if (!($23)) {
      return;
     }
    } else {
     $24 = ($13<<24>>24)==(60);
     if (!($24)) {
      $error$0 = 3;
      break L1;
     }
     $25 = ((($loader)) + 32|0);
     $26 = HEAP32[$25>>2]|0;
     FUNCTION_TABLE_vi[$26 & 127]($loader);
     $27 = ((($loader)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(0);
     if (!($29)) {
      return;
     }
     $30 = HEAP32[$9>>2]|0;
     FUNCTION_TABLE_vi[$30 & 127]($loader);
     $31 = HEAP32[$loader>>2]|0;
     $$cast = $31;
     $32 = ($$cast>>>0)<($8>>>0);
     if ($32) {
      $34 = $$cast;$count$019 = 0;
      L11: while(1) {
       $33 = HEAP8[$34>>0]|0;
       switch ($33<<24>>24) {
       case 62:  {
        $count$019$lcssa = $count$019;
        label = 9;
        break L11;
        break;
       }
       case 47:  {
        $35 = (($count$019) + 1)|0;
        $count$1 = $35;
        break;
       }
       default: {
        $count$1 = $count$019;
       }
       }
       $37 = HEAP32[$25>>2]|0;
       FUNCTION_TABLE_vi[$37 & 127]($loader);
       $38 = HEAP32[$27>>2]|0;
       $39 = ($38|0)==(0);
       if (!($39)) {
        label = 46;
        break;
       }
       $40 = HEAP32[$9>>2]|0;
       FUNCTION_TABLE_vi[$40 & 127]($loader);
       $41 = HEAP32[$loader>>2]|0;
       $42 = ($41>>>0)<($8>>>0);
       if ($42) {
        $34 = $41;$count$019 = $count$1;
       } else {
        break L3;
       }
      }
      if ((label|0) == 9) {
       $36 = ((($loader)) + 144|0);
       HEAP32[$36>>2] = $count$019$lcssa;
       HEAP32[$loader>>2] = $31;
       break;
      }
      else if ((label|0) == 46) {
       return;
      }
     }
    }
   } while(0);
   $43 = HEAP32[$loader>>2]|0;
   $44 = ($43>>>0)<($8>>>0);
   if ($44) {
    $45 = HEAP32[$6>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($loader)) + 144|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (FUNCTION_TABLE_iiii[$46 & 127]($0,$48,$4)|0);
    $50 = ($49|0)==(0);
    if ($50) {
     $51 = HEAP32[$6>>2]|0;
     $52 = HEAP32[$51>>2]|0;
     $53 = HEAP32[$47>>2]|0;
     $54 = (FUNCTION_TABLE_iiii[$52 & 127]($1,$53,$4)|0);
     $55 = ($54|0)==(0);
     if ($55) {
      $56 = HEAP32[$6>>2]|0;
      $57 = HEAP32[$56>>2]|0;
      $58 = (FUNCTION_TABLE_iiii[$57 & 127]($2,4,$4)|0);
      $59 = ($58|0)==(0);
      if ($59) {
       $60 = ((($loader)) + 32|0);
       $61 = ((($loader)) + 12|0);
       $62 = ((($loader)) + 192|0);
       $63 = ((($loader)) + 172|0);
       $64 = ((($loader)) + 36|0);
       $65 = ((($loader)) + 244|0);
       $66 = ((($loader)) + 224|0);
       $n$0$ph = 0;$notdef_found$0$ph = 0;$notdef_index$0$ph = 0;
       L25: while(1) {
        while(1) {
         $67 = HEAP32[$9>>2]|0;
         FUNCTION_TABLE_vi[$67 & 127]($loader);
         $68 = HEAP32[$loader>>2]|0;
         $69 = ($68>>>0)<($8>>>0);
         if (!($69)) {
          $n$1 = $n$0$ph;$notdef_found$2 = $notdef_found$0$ph;$notdef_index$2 = $notdef_index$0$ph;
          break L25;
         }
         $70 = HEAP8[$68>>0]|0;
         $71 = ($70<<24>>24)==(101);
         if ($71) {
          $72 = ((($68)) + 3|0);
          $73 = ($72>>>0)<($8>>>0);
          if ($73) {
           $74 = ((($68)) + 1|0);
           $75 = HEAP8[$74>>0]|0;
           $76 = ($75<<24>>24)==(110);
           if ($76) {
            $77 = ((($68)) + 2|0);
            $78 = HEAP8[$77>>0]|0;
            $79 = ($78<<24>>24)==(100);
            if ($79) {
             $80 = HEAP8[$72>>0]|0;
             $81 = (_t42_is_space($80)|0);
             $82 = ($81|0)==(0);
             if (!($82)) {
              $n$1 = $n$0$ph;$notdef_found$2 = $notdef_found$0$ph;$notdef_index$2 = $notdef_index$0$ph;
              break L25;
             }
            }
           }
          }
          $$pr = HEAP8[$68>>0]|0;
          $84 = $$pr;
         } else {
          $84 = $70;
         }
         $83 = ($84<<24>>24)==(62);
         if ($83) {
          $n$1 = $n$0$ph;$notdef_found$2 = $notdef_found$0$ph;$notdef_index$2 = $notdef_index$0$ph;
          break L25;
         }
         $85 = HEAP32[$60>>2]|0;
         FUNCTION_TABLE_vi[$85 & 127]($loader);
         $86 = HEAP32[$61>>2]|0;
         $87 = ($86|0)==(0);
         if (!($87)) {
          label = 46;
          break L25;
         }
         $88 = HEAP8[$68>>0]|0;
         $89 = ($88<<24>>24)==(47);
         if ($89) {
          $$lcssa79 = $68;
          break;
         }
        }
        $90 = ((($$lcssa79)) + 1|0);
        $91 = ($90>>>0)<($8>>>0);
        if (!($91)) {
         $error$0 = 3;
         break L1;
        }
        $92 = HEAP32[$loader>>2]|0;
        $93 = $92;
        $94 = $90;
        $95 = (($93) - ($94))|0;
        $96 = HEAP32[$62>>2]|0;
        $97 = (($95) + 1)|0;
        $98 = (FUNCTION_TABLE_iiiii[$96 & 63]($1,$n$0$ph,$90,$97)|0);
        $99 = ($98|0)==(0);
        if (!($99)) {
         $error$0 = $98;
         break L1;
        }
        $100 = HEAP32[$63>>2]|0;
        $101 = (($100) + ($n$0$ph<<2)|0);
        $102 = HEAP32[$101>>2]|0;
        $103 = (($102) + ($95)|0);
        HEAP8[$103>>0] = 0;
        $104 = HEAP8[$90>>0]|0;
        $105 = ($104<<24>>24)==(46);
        if ($105) {
         $106 = HEAP32[$63>>2]|0;
         $107 = (($106) + ($n$0$ph<<2)|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = (_strcmp(89635,$108)|0);
         $110 = ($109|0)==(0);
         $n$0$notdef_index$0 = $110 ? $n$0$ph : $notdef_index$0$ph;
         $$notdef_found$0 = $110 ? 1 : $notdef_found$0$ph;
         $notdef_found$1 = $$notdef_found$0;$notdef_index$1 = $n$0$notdef_index$0;
        } else {
         $notdef_found$1 = $notdef_found$0$ph;$notdef_index$1 = $notdef_index$0$ph;
        }
        $111 = HEAP32[$9>>2]|0;
        FUNCTION_TABLE_vi[$111 & 127]($loader);
        $112 = HEAP32[$loader>>2]|0;
        $113 = HEAP32[$64>>2]|0;
        (FUNCTION_TABLE_ii[$113 & 63]($loader)|0);
        $114 = HEAP32[$loader>>2]|0;
        $115 = ($114>>>0)<($8>>>0);
        if (!($115)) {
         $error$0 = 3;
         break L1;
        }
        $116 = $114;
        $117 = $112;
        $118 = (($116) - ($117))|0;
        $119 = HEAP32[$65>>2]|0;
        $120 = (($118) + 1)|0;
        $121 = (FUNCTION_TABLE_iiiii[$119 & 63]($0,$n$0$ph,$112,$120)|0);
        $122 = ($121|0)==(0);
        if (!($122)) {
         $error$0 = $121;
         break L1;
        }
        $123 = HEAP32[$66>>2]|0;
        $124 = (($123) + ($n$0$ph<<2)|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = (($125) + ($118)|0);
        HEAP8[$126>>0] = 0;
        $127 = (($n$0$ph) + 1)|0;
        $128 = HEAP32[$47>>2]|0;
        $129 = ($127>>>0)<($128>>>0);
        if ($129) {
         $n$0$ph = $127;$notdef_found$0$ph = $notdef_found$1;$notdef_index$0$ph = $notdef_index$1;
        } else {
         $n$1 = $127;$notdef_found$2 = $notdef_found$1;$notdef_index$2 = $notdef_index$1;
         break;
        }
       }
       if ((label|0) == 46) {
        return;
       }
       HEAP32[$47>>2] = $n$1;
       $130 = ($notdef_found$2<<24>>24)==(0);
       if ($130) {
        $error$0 = 3;
       } else {
        $131 = ((($loader)) + 172|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = HEAP32[$132>>2]|0;
        $134 = (_strcmp(89635,$133)|0);
        $135 = ($134|0)==(0);
        if ($135) {
         return;
        }
        $136 = ((($loader)) + 296|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = ((($loader)) + 176|0);
        $139 = HEAP32[$138>>2]|0;
        $140 = HEAP32[$139>>2]|0;
        $141 = (FUNCTION_TABLE_iiiii[$137 & 63]($2,0,$133,$140)|0);
        $142 = ($141|0)==(0);
        if ($142) {
         $143 = HEAP32[$136>>2]|0;
         $144 = ((($loader)) + 224|0);
         $145 = HEAP32[$144>>2]|0;
         $146 = HEAP32[$145>>2]|0;
         $147 = ((($loader)) + 228|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = HEAP32[$148>>2]|0;
         $150 = (FUNCTION_TABLE_iiiii[$143 & 63]($2,1,$146,$149)|0);
         $151 = ($150|0)==(0);
         if ($151) {
          $152 = HEAP32[$136>>2]|0;
          $153 = HEAP32[$131>>2]|0;
          $154 = (($153) + ($notdef_index$2<<2)|0);
          $155 = HEAP32[$154>>2]|0;
          $156 = HEAP32[$138>>2]|0;
          $157 = (($156) + ($notdef_index$2<<2)|0);
          $158 = HEAP32[$157>>2]|0;
          $159 = (FUNCTION_TABLE_iiiii[$152 & 63]($2,2,$155,$158)|0);
          $160 = ($159|0)==(0);
          if ($160) {
           $161 = HEAP32[$136>>2]|0;
           $162 = HEAP32[$144>>2]|0;
           $163 = (($162) + ($notdef_index$2<<2)|0);
           $164 = HEAP32[$163>>2]|0;
           $165 = HEAP32[$147>>2]|0;
           $166 = (($165) + ($notdef_index$2<<2)|0);
           $167 = HEAP32[$166>>2]|0;
           $168 = (FUNCTION_TABLE_iiiii[$161 & 63]($2,3,$164,$167)|0);
           $169 = ($168|0)==(0);
           if ($169) {
            $170 = ((($loader)) + 192|0);
            $171 = HEAP32[$170>>2]|0;
            $172 = ((($loader)) + 276|0);
            $173 = HEAP32[$172>>2]|0;
            $174 = HEAP32[$173>>2]|0;
            $175 = ((($loader)) + 280|0);
            $176 = HEAP32[$175>>2]|0;
            $177 = HEAP32[$176>>2]|0;
            $178 = (FUNCTION_TABLE_iiiii[$171 & 63]($1,$notdef_index$2,$174,$177)|0);
            $179 = ($178|0)==(0);
            if ($179) {
             $180 = ((($loader)) + 244|0);
             $181 = HEAP32[$180>>2]|0;
             $182 = HEAP32[$172>>2]|0;
             $183 = ((($182)) + 4|0);
             $184 = HEAP32[$183>>2]|0;
             $185 = HEAP32[$175>>2]|0;
             $186 = ((($185)) + 4|0);
             $187 = HEAP32[$186>>2]|0;
             $188 = (FUNCTION_TABLE_iiiii[$181 & 63]($0,$notdef_index$2,$184,$187)|0);
             $189 = ($188|0)==(0);
             if ($189) {
              $190 = HEAP32[$170>>2]|0;
              $191 = HEAP32[$172>>2]|0;
              $192 = ((($191)) + 8|0);
              $193 = HEAP32[$192>>2]|0;
              $194 = HEAP32[$175>>2]|0;
              $195 = ((($194)) + 8|0);
              $196 = HEAP32[$195>>2]|0;
              $197 = (FUNCTION_TABLE_iiiii[$190 & 63]($1,0,$193,$196)|0);
              $198 = ($197|0)==(0);
              if ($198) {
               $199 = HEAP32[$180>>2]|0;
               $200 = HEAP32[$172>>2]|0;
               $201 = ((($200)) + 12|0);
               $202 = HEAP32[$201>>2]|0;
               $203 = HEAP32[$175>>2]|0;
               $204 = ((($203)) + 12|0);
               $205 = HEAP32[$204>>2]|0;
               $206 = (FUNCTION_TABLE_iiiii[$199 & 63]($0,0,$202,$205)|0);
               $207 = ($206|0)==(0);
               if ($207) {
                return;
               } else {
                $error$0 = $206;
               }
              } else {
               $error$0 = $197;
              }
             } else {
              $error$0 = $188;
             }
            } else {
             $error$0 = $178;
            }
           } else {
            $error$0 = $168;
           }
          } else {
           $error$0 = $159;
          }
         } else {
          $error$0 = $150;
         }
        } else {
         $error$0 = $141;
        }
       }
      } else {
       $error$0 = $58;
      }
     } else {
      $error$0 = $54;
     }
    } else {
     $error$0 = $49;
    }
   } else {
    $error$0 = 3;
   }
  } else {
   $error$0 = 3;
  }
 } while(0);
 $208 = ((($loader)) + 12|0);
 HEAP32[$208>>2] = $error$0;
 return;
}
function _t42_parse_sfnts($face,$loader) {
 $face = $face|0;
 $loader = $loader|0;
 var $$lcssa259 = 0, $$lcssa294 = 0, $$string_size$1 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $allocated$0$lcssa = 0, $allocated$079 = 0, $allocated$079$lcssa = 0, $allocated$079$lcssa274 = 0, $allocated$1 = 0, $allocated$1$lcssa = 0, $allocated$18 = 0, $allocated$18$lcssa = 0, $allocated$18$lcssa296 = 0;
 var $allocated$2 = 0, $allocated$3 = 0, $count$081 = 0, $count$1$lcssa = 0, $count$166 = 0, $count$2 = 0, $error = 0, $exitcond = 0, $i$060 = 0, $n$062 = 0, $num_tables$082 = 0, $num_tables$1$lcssa = 0, $num_tables$168 = 0, $num_tables$2 = 0, $num_tables$3 = 0, $num_tables$4 = 0, $old_string_size$077 = 0, $old_string_size$1 = 0, $old_string_size$16 = 0, $real_size = 0;
 var $status$080 = 0, $status$1$lcssa = 0, $status$165 = 0, $status$4 = 0, $string_buf$0$lcssa = 0, $string_buf$078 = 0, $string_buf$078$lcssa = 0, $string_buf$078$lcssa285 = 0, $string_buf$078$lcssa286 = 0, $string_buf$1 = 0, $string_buf$17 = 0, $string_buf$17$lcssa = 0, $string_buf$17$lcssa299 = 0, $string_buf$2 = 0, $string_buf$3 = 0, $string_size$076 = 0, $string_size$1 = 0, $string_size$15 = 0, $string_size$2 = 0, $ttf_size$075 = 0;
 var $ttf_size$1$lcssa = 0, $ttf_size$161 = 0, $ttf_size$2 = 0, $ttf_size$3$lcssa = 0, $ttf_size$359 = 0, $ttf_size$4 = 0, $ttf_size$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 4|0;
 $real_size = sp;
 $0 = ((($loader)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($loader)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($loader)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 127]($loader);
 $6 = HEAP32[$loader>>2]|0;
 $7 = ($6>>>0)<($3>>>0);
 L1: do {
  if ($7) {
   $8 = ((($6)) + 1|0);
   HEAP32[$loader>>2] = $8;
   $9 = HEAP8[$6>>0]|0;
   $10 = ($9<<24>>24)==(91);
   if ($10) {
    $11 = HEAP32[$4>>2]|0;
    FUNCTION_TABLE_vi[$11 & 127]($loader);
    $12 = HEAP32[$loader>>2]|0;
    $13 = ($12>>>0)<($3>>>0);
    L4: do {
     if ($13) {
      $14 = ((($loader)) + 36|0);
      $15 = ((($loader)) + 32|0);
      $16 = ((($loader)) + 12|0);
      $17 = $3;
      $18 = ((($face)) + 492|0);
      $19 = ((($face)) + 492|0);
      $20 = ((($face)) + 492|0);
      $21 = ((($face)) + 496|0);
      $22 = ((($face)) + 492|0);
      $23 = ((($face)) + 492|0);
      $24 = ((($face)) + 492|0);
      $25 = ((($loader)) + 32|0);
      $26 = ((($loader)) + 12|0);
      $27 = ((($loader)) + 44|0);
      $29 = $12;$allocated$079 = 0;$count$081 = 0;$num_tables$082 = 0;$old_string_size$077 = 0;$status$080 = 0;$string_buf$078 = 0;$string_size$076 = 0;$ttf_size$075 = 0;
      L6: while(1) {
       $28 = HEAP8[$29>>0]|0;
       switch ($28<<24>>24) {
       case 93:  {
        $$lcssa259 = $29;$allocated$079$lcssa = $allocated$079;$string_buf$078$lcssa = $string_buf$078;
        label = 7;
        break L6;
        break;
       }
       case 60:  {
        $31 = HEAP32[$25>>2]|0;
        FUNCTION_TABLE_vi[$31 & 127]($loader);
        $32 = HEAP32[$26>>2]|0;
        $33 = ($32|0)==(0);
        if (!($33)) {
         $allocated$3 = $allocated$079;$string_buf$3 = $string_buf$078;
         break L1;
        }
        $34 = HEAP32[$loader>>2]|0;
        $35 = $34;
        $36 = $29;
        $37 = $36 ^ -1;
        $38 = (($35) + ($37))|0;
        $39 = (($38|0) / 2)&-1;
        $40 = (_ft_mem_realloc($1,1,$old_string_size$077,$39,$string_buf$078,$error)|0);
        $41 = HEAP32[$error>>2]|0;
        $42 = ($41|0)==(0);
        if (!($42)) {
         $allocated$2 = $allocated$079;$string_buf$2 = $40;
         label = 43;
         break L1;
        }
        HEAP32[$loader>>2] = $29;
        $43 = HEAP32[$27>>2]|0;
        (FUNCTION_TABLE_iiiiii[$43 & 63]($loader,$40,$39,$real_size,1)|0);
        $44 = HEAP32[$real_size>>2]|0;
        $allocated$1 = 1;$old_string_size$1 = $39;$string_buf$1 = $40;$string_size$1 = $44;
        label = 20;
        break;
       }
       default: {
        $45 = $28&255;
        $46 = (($45) + -48)|0;
        $47 = ($46>>>0)<(10);
        if ($47) {
         $48 = ($allocated$079<<24>>24)==(0);
         if (!($48)) {
          $allocated$079$lcssa274 = $allocated$079;$string_buf$078$lcssa285 = $string_buf$078;
          label = 13;
          break L6;
         }
         $49 = HEAP32[$14>>2]|0;
         $50 = (FUNCTION_TABLE_ii[$49 & 63]($loader)|0);
         $51 = ($50|0)<(0);
         if ($51) {
          $string_buf$078$lcssa286 = $string_buf$078;
          label = 15;
          break L6;
         }
         $52 = HEAP32[$15>>2]|0;
         FUNCTION_TABLE_vi[$52 & 127]($loader);
         $53 = HEAP32[$16>>2]|0;
         $54 = ($53|0)==(0);
         if (!($54)) {
          label = 46;
          break L6;
         }
         $55 = HEAP32[$loader>>2]|0;
         $56 = ((($55)) + 1|0);
         $57 = $55;
         $58 = (($17) - ($57))|0;
         $59 = ($58|0)<($50|0);
         if ($59) {
          $$lcssa294 = $56;
          label = 18;
          break L6;
         }
         $60 = (($50) + 1)|0;
         $61 = (($55) + ($60)|0);
         HEAP32[$loader>>2] = $61;
         $allocated$18 = 0;$old_string_size$16 = $old_string_size$077;$string_buf$17 = $56;$string_size$15 = $50;
        } else {
         $allocated$1 = $allocated$079;$old_string_size$1 = $old_string_size$077;$string_buf$1 = $string_buf$078;$string_size$1 = $string_size$076;
         label = 20;
        }
       }
       }
       if ((label|0) == 20) {
        label = 0;
        $62 = ($string_buf$1|0)==(0|0);
        if ($62) {
         $allocated$1$lcssa = $allocated$1;
         label = 21;
         break;
        } else {
         $allocated$18 = $allocated$1;$old_string_size$16 = $old_string_size$1;$string_buf$17 = $string_buf$1;$string_size$15 = $string_size$1;
        }
       }
       $63 = $string_size$15 & 1;
       $64 = ($63|0)==(0);
       if ($64) {
        $string_size$2 = $string_size$15;
       } else {
        $65 = (($string_size$15) + -1)|0;
        $66 = (($string_buf$17) + ($65)|0);
        $67 = HEAP8[$66>>0]|0;
        $68 = ($67<<24>>24)==(0);
        $$string_size$1 = $68 ? $65 : $string_size$15;
        $string_size$2 = $$string_size$1;
       }
       $69 = ($string_size$2|0)==(0);
       if ($69) {
        $allocated$18$lcssa = $allocated$18;$string_buf$17$lcssa = $string_buf$17;
        label = 26;
        break;
       }
       $70 = ($string_size$2|0)>(0);
       L25: do {
        if ($70) {
         $count$166 = $count$081;$n$062 = 0;$num_tables$168 = $num_tables$082;$status$165 = $status$080;$ttf_size$161 = $ttf_size$075;
         while(1) {
          L28: do {
           switch ($status$165|0) {
           case 0:  {
            $71 = ($count$166>>>0)<(12);
            if ($71) {
             $72 = (($string_buf$17) + ($n$062)|0);
             $73 = HEAP8[$72>>0]|0;
             $74 = (($count$166) + 1)|0;
             $75 = HEAP32[$18>>2]|0;
             $76 = (($75) + ($count$166)|0);
             HEAP8[$76>>0] = $73;
             $count$2 = $74;$num_tables$4 = $num_tables$168;$status$4 = 0;$ttf_size$5 = $ttf_size$161;
             break L28;
            } else {
             $77 = HEAP32[$19>>2]|0;
             $78 = ((($77)) + 4|0);
             $79 = HEAP8[$78>>0]|0;
             $80 = $79&255;
             $81 = $80 << 4;
             $82 = ((($77)) + 5|0);
             $83 = HEAP8[$82>>0]|0;
             $84 = $83&255;
             $85 = (($81) + ($84))|0;
             $86 = $85 << 4;
             $87 = $86 | 12;
             $88 = (_ft_mem_realloc($1,1,12,$87,$77,$error)|0);
             HEAP32[$19>>2] = $88;
             $89 = HEAP32[$error>>2]|0;
             $90 = ($89|0)==(0);
             if ($90) {
              $num_tables$2 = $85;$ttf_size$2 = $87;
              label = 31;
              break L28;
             } else {
              $allocated$2 = $allocated$18;$string_buf$2 = $string_buf$17;
              label = 43;
              break L1;
             }
            }
            break;
           }
           case 1:  {
            $num_tables$2 = $num_tables$168;$ttf_size$2 = $ttf_size$161;
            label = 31;
            break;
           }
           case 2:  {
            $num_tables$3 = $num_tables$168;$ttf_size$4 = $ttf_size$161;
            label = 37;
            break;
           }
           default: {
            $count$2 = $count$166;$num_tables$4 = $num_tables$168;$status$4 = $status$165;$ttf_size$5 = $ttf_size$161;
           }
           }
          } while(0);
          do {
           if ((label|0) == 31) {
            label = 0;
            $91 = ($count$166>>>0)<($ttf_size$2>>>0);
            if ($91) {
             $94 = (($string_buf$17) + ($n$062)|0);
             $95 = HEAP8[$94>>0]|0;
             $96 = (($count$166) + 1)|0;
             $97 = HEAP32[$20>>2]|0;
             $98 = (($97) + ($count$166)|0);
             HEAP8[$98>>0] = $95;
             $count$2 = $96;$num_tables$4 = $num_tables$2;$status$4 = 1;$ttf_size$5 = $ttf_size$2;
             break;
            }
            $92 = ($num_tables$2|0)>(0);
            if ($92) {
             $93 = HEAP32[$23>>2]|0;
             $i$060 = 0;$ttf_size$359 = $ttf_size$2;
             while(1) {
              $99 = $i$060 << 4;
              $$sum1 = $99 | 12;
              $$sum = (($$sum1) + 12)|0;
              $100 = (($93) + ($$sum)|0);
              $101 = HEAP8[$100>>0]|0;
              $102 = $101&255;
              $103 = $102 << 24;
              $$sum2 = (($$sum1) + 13)|0;
              $104 = (($93) + ($$sum2)|0);
              $105 = HEAP8[$104>>0]|0;
              $106 = $105&255;
              $107 = $106 << 16;
              $108 = $107 | $103;
              $$sum3 = (($$sum1) + 14)|0;
              $109 = (($93) + ($$sum3)|0);
              $110 = HEAP8[$109>>0]|0;
              $111 = $110&255;
              $112 = $111 << 8;
              $113 = $108 | $112;
              $$sum4 = (($$sum1) + 15)|0;
              $114 = (($93) + ($$sum4)|0);
              $115 = HEAP8[$114>>0]|0;
              $116 = $115&255;
              $117 = $113 | $116;
              $118 = (($117) + 3)|0;
              $119 = $118 & -4;
              $120 = (($119) + ($ttf_size$359))|0;
              $121 = (($i$060) + 1)|0;
              $exitcond = ($121|0)==($num_tables$2|0);
              if ($exitcond) {
               $ttf_size$3$lcssa = $120;
               break;
              } else {
               $i$060 = $121;$ttf_size$359 = $120;
              }
             }
            } else {
             $ttf_size$3$lcssa = $ttf_size$2;
            }
            HEAP32[$21>>2] = $ttf_size$3$lcssa;
            $122 = $num_tables$2 << 4;
            $123 = $122 | 12;
            $124 = (($ttf_size$3$lcssa) + 1)|0;
            $125 = HEAP32[$22>>2]|0;
            $126 = (_ft_mem_realloc($1,1,$123,$124,$125,$error)|0);
            HEAP32[$22>>2] = $126;
            $127 = HEAP32[$error>>2]|0;
            $128 = ($127|0)==(0);
            if ($128) {
             $num_tables$3 = $num_tables$2;$ttf_size$4 = $ttf_size$3$lcssa;
             label = 37;
            } else {
             $allocated$2 = $allocated$18;$string_buf$2 = $string_buf$17;
             label = 43;
             break L1;
            }
           }
          } while(0);
          if ((label|0) == 37) {
           label = 0;
           $129 = ($count$166>>>0)<($ttf_size$4>>>0);
           if (!($129)) {
            $allocated$18$lcssa296 = $allocated$18;$string_buf$17$lcssa299 = $string_buf$17;
            label = 38;
            break L6;
           }
           $130 = (($string_buf$17) + ($n$062)|0);
           $131 = HEAP8[$130>>0]|0;
           $132 = (($count$166) + 1)|0;
           $133 = HEAP32[$24>>2]|0;
           $134 = (($133) + ($count$166)|0);
           HEAP8[$134>>0] = $131;
           $count$2 = $132;$num_tables$4 = $num_tables$3;$status$4 = 2;$ttf_size$5 = $ttf_size$4;
          }
          $135 = (($n$062) + 1)|0;
          $136 = ($135|0)<($string_size$2|0);
          if ($136) {
           $count$166 = $count$2;$n$062 = $135;$num_tables$168 = $num_tables$4;$status$165 = $status$4;$ttf_size$161 = $ttf_size$5;
          } else {
           $count$1$lcssa = $count$2;$num_tables$1$lcssa = $num_tables$4;$status$1$lcssa = $status$4;$ttf_size$1$lcssa = $ttf_size$5;
           break L25;
          }
         }
        } else {
         $count$1$lcssa = $count$081;$num_tables$1$lcssa = $num_tables$082;$status$1$lcssa = $status$080;$ttf_size$1$lcssa = $ttf_size$075;
        }
       } while(0);
       $137 = HEAP32[$4>>2]|0;
       FUNCTION_TABLE_vi[$137 & 127]($loader);
       $138 = HEAP32[$loader>>2]|0;
       $139 = ($138>>>0)<($3>>>0);
       if ($139) {
        $29 = $138;$allocated$079 = $allocated$18;$count$081 = $count$1$lcssa;$num_tables$082 = $num_tables$1$lcssa;$old_string_size$077 = $old_string_size$16;$status$080 = $status$1$lcssa;$string_buf$078 = $string_buf$17;$string_size$076 = $string_size$2;$ttf_size$075 = $ttf_size$1$lcssa;
       } else {
        $allocated$0$lcssa = $allocated$18;$string_buf$0$lcssa = $string_buf$17;
        break L4;
       }
      }
      if ((label|0) == 7) {
       $30 = ((($$lcssa259)) + 1|0);
       HEAP32[$loader>>2] = $30;
       $allocated$3 = $allocated$079$lcssa;$string_buf$3 = $string_buf$078$lcssa;
       break L1;
      }
      else if ((label|0) == 13) {
       HEAP32[$error>>2] = 3;
       $allocated$2 = $allocated$079$lcssa274;$string_buf$2 = $string_buf$078$lcssa285;
       label = 43;
       break L1;
      }
      else if ((label|0) == 15) {
       HEAP32[$error>>2] = 3;
       $allocated$2 = 0;$string_buf$2 = $string_buf$078$lcssa286;
       label = 43;
       break L1;
      }
      else if ((label|0) == 18) {
       HEAP32[$error>>2] = 3;
       $allocated$2 = 0;$string_buf$2 = $$lcssa294;
       label = 43;
       break L1;
      }
      else if ((label|0) == 21) {
       HEAP32[$error>>2] = 3;
       $allocated$2 = $allocated$1$lcssa;$string_buf$2 = 0;
       label = 43;
       break L1;
      }
      else if ((label|0) == 26) {
       HEAP32[$error>>2] = 3;
       $allocated$2 = $allocated$18$lcssa;$string_buf$2 = $string_buf$17$lcssa;
       label = 43;
       break L1;
      }
      else if ((label|0) == 38) {
       HEAP32[$error>>2] = 3;
       $allocated$2 = $allocated$18$lcssa296;$string_buf$2 = $string_buf$17$lcssa299;
       label = 43;
       break L1;
      }
      else if ((label|0) == 46) {
       STACKTOP = sp;return;
      }
     } else {
      $allocated$0$lcssa = 0;$string_buf$0$lcssa = 0;
     }
    } while(0);
    HEAP32[$error>>2] = 3;
    $allocated$2 = $allocated$0$lcssa;$string_buf$2 = $string_buf$0$lcssa;
    label = 43;
   } else {
    label = 3;
   }
  } else {
   label = 3;
  }
 } while(0);
 if ((label|0) == 3) {
  HEAP32[$error>>2] = 3;
  $allocated$2 = 0;$string_buf$2 = 0;
  label = 43;
 }
 if ((label|0) == 43) {
  $140 = HEAP32[$error>>2]|0;
  $141 = ((($loader)) + 12|0);
  HEAP32[$141>>2] = $140;
  $allocated$3 = $allocated$2;$string_buf$3 = $string_buf$2;
 }
 $142 = ($allocated$3<<24>>24)==(0);
 if ($142) {
  STACKTOP = sp;return;
 }
 _ft_mem_free($1,$string_buf$3);
 STACKTOP = sp;return;
}
function _t42_is_space($c) {
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($c<<24>>24) {
 case 0: case 12: case 10: case 13: case 9: case 32:  {
  $0 = 1;
  break;
 }
 default: {
  $0 = 0;
 }
 }
 return ($0|0);
}
function _tt_get_interface($driver,$tt_interface) {
 $driver = $driver|0;
 $tt_interface = $tt_interface|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_service_list_lookup(18356,$tt_interface)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = $0;
  return ($$0|0);
 }
 $2 = ($driver|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($driver)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_FT_Get_Module($4,89702)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = HEAP32[$6>>2]|0;
 $9 = ((($8)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ((($10)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iii[$13 & 255]($driver,$tt_interface)|0);
 $$0 = $14;
 return ($$0|0);
}
function _tt_glyph_load($ttslot,$ttsize,$glyph_index,$load_flags) {
 $ttslot = $ttslot|0;
 $ttsize = $ttsize|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $load_flags$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ttslot)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($ttslot|0)==(0|0);
 if ($2) {
  $$0 = 37;
  return ($$0|0);
 }
 $3 = ($ttsize|0)==(0|0);
 if ($3) {
  $$0 = 36;
  return ($$0|0);
 }
 $4 = ($1|0)==(0|0);
 if ($4) {
  $$0 = 6;
  return ($$0|0);
 }
 $5 = ((($1)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>($glyph_index>>>0);
 if (!($7)) {
  $8 = ((($1)) + 128|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 52|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $$0 = 6;
   return ($$0|0);
  }
 }
 $13 = $load_flags & 2;
 $14 = ($13|0)==(0);
 if ($14) {
  $$1 = $load_flags;
 } else {
  $15 = ((($1)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 8192;
  $18 = ($17|0)==(0);
  $19 = $load_flags & -3;
  $load_flags$ = $18 ? $load_flags : $19;
  $20 = $load_flags$ >>> 14;
  $21 = $20 & 2;
  $22 = $21 | $load_flags$;
  $$1 = $22;
 }
 $23 = $$1 & 1025;
 $24 = ($23|0)==(0);
 if ($24) {
  $$2 = $$1;
 } else {
  $25 = ((($1)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 >>> 12;
  $28 = $27 & 2;
  $29 = $28 ^ 11;
  $$ = $29 | $$1;
  $$2 = $$;
 }
 $30 = (_TT_Load_Glyph($ttsize,$ttslot,$glyph_index,$$2)|0);
 $$0 = $30;
 return ($$0|0);
}
function _tt_get_kerning($ttface,$left_glyph,$right_glyph,$kerning) {
 $ttface = $ttface|0;
 $left_glyph = $left_glyph|0;
 $right_glyph = $right_glyph|0;
 $kerning = $kerning|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ttface)) + 532|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$kerning>>2] = 0;
 $2 = ((($kerning)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ($1|0)==(0|0);
 if ($3) {
  return 0;
 }
 $4 = ((($1)) + 128|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$5 & 127]($ttface,$left_glyph,$right_glyph)|0);
 HEAP32[$kerning>>2] = $6;
 return 0;
}
function _tt_get_advances($ttface,$start,$count,$flags,$advances) {
 $ttface = $ttface|0;
 $start = $start|0;
 $count = $count|0;
 $flags = $flags|0;
 $advances = $advances|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ah = 0, $aw = 0, $exitcond = 0, $exitcond6 = 0, $lsb = 0, $nn$04 = 0, $nn$13 = 0;
 var $tsb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tsb = sp + 6|0;
 $ah = sp + 4|0;
 $lsb = sp + 2|0;
 $aw = sp;
 $0 = $flags & 16;
 $1 = ($0|0)==(0);
 $2 = ($count|0)==(0);
 if ($1) {
  if ($2) {
   STACKTOP = sp;return 0;
  } else {
   $nn$13 = 0;
  }
  while(1) {
   $8 = (($nn$13) + ($start))|0;
   _TT_Get_HMetrics($ttface,$8,$lsb,$aw);
   $9 = HEAP16[$aw>>1]|0;
   $10 = $9&65535;
   $11 = (($advances) + ($nn$13<<2)|0);
   HEAP32[$11>>2] = $10;
   $12 = (($nn$13) + 1)|0;
   $exitcond = ($12|0)==($count|0);
   if ($exitcond) {
    break;
   } else {
    $nn$13 = $12;
   }
  }
  STACKTOP = sp;return 0;
 } else {
  if ($2) {
   STACKTOP = sp;return 0;
  } else {
   $nn$04 = 0;
  }
  while(1) {
   $3 = (($nn$04) + ($start))|0;
   _TT_Get_VMetrics($ttface,$3,$tsb,$ah);
   $4 = HEAP16[$ah>>1]|0;
   $5 = $4&65535;
   $6 = (($advances) + ($nn$04<<2)|0);
   HEAP32[$6>>2] = $5;
   $7 = (($nn$04) + 1)|0;
   $exitcond6 = ($7|0)==($count|0);
   if ($exitcond6) {
    break;
   } else {
    $nn$04 = $7;
   }
  }
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _tt_size_request($size,$req) {
 $size = $size|0;
 $req = $req|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, $strike_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $strike_index = sp;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 2;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $error$0 = 0;
  } else {
   $5 = ((($0)) + 532|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 148|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (FUNCTION_TABLE_iiii[$8 & 127]($0,$req,$strike_index)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    $11 = ((($size)) + 112|0);
    HEAP32[$11>>2] = -1;
    $error$0 = $9;
    break;
   }
   $12 = HEAP32[$strike_index>>2]|0;
   $13 = (_tt_size_select($size,$12)|0);
   $$0 = $13;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $14 = HEAP32[$size>>2]|0;
 _FT_Request_Metrics($14,$req);
 $15 = HEAP32[$size>>2]|0;
 $16 = ((($15)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 1;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = $error$0;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = (_tt_size_reset($size)|0);
 $21 = ((($size)) + 12|0);
 $22 = ((($size)) + 44|0);
 ;HEAP32[$21>>2]=HEAP32[$22>>2]|0;HEAP32[$21+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$21+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$21+12>>2]=HEAP32[$22+12>>2]|0;HEAP32[$21+16>>2]=HEAP32[$22+16>>2]|0;HEAP32[$21+20>>2]=HEAP32[$22+20>>2]|0;HEAP32[$21+24>>2]=HEAP32[$22+24>>2]|0;
 $$0 = $20;
 STACKTOP = sp;return ($$0|0);
}
function _tt_size_select($size,$strike_index) {
 $size = $size|0;
 $strike_index = $strike_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($size)) + 112|0);
 HEAP32[$1>>2] = $strike_index;
 $2 = HEAP32[$size>>2]|0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if (!($6)) {
  _FT_Select_Metrics($2,$strike_index);
  (_tt_size_reset($size)|0);
  $error$0 = 0;
  return ($error$0|0);
 }
 $7 = ((($0)) + 532|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($size)) + 12|0);
 $10 = ((($8)) + 152|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiii[$11 & 127]($0,$strike_index,$9)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $error$0 = 0;
  return ($error$0|0);
 }
 HEAP32[$1>>2] = -1;
 $error$0 = $12;
 return ($error$0|0);
}
function _tt_face_free_bdf_props($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 812|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  return;
 }
 $3 = ((($face)) + 792|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($face)) + 104|0);
  $7 = HEAP32[$6>>2]|0;
  _FT_Stream_ReleaseFrame($7,$3);
 }
 $8 = ((($face)) + 796|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($face)) + 800|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($face)) + 804|0);
 HEAP32[$10>>2] = 0;
 return;
}
function _tt_face_find_bdf_prop($face,$property_name,$aprop) {
 $face = $face|0;
 $property_name = $property_name|0;
 $aprop = $aprop|0;
 var $$lcssa = 0, $$lcssa39 = 0, $$lcssa40 = 0, $$lcssa42 = 0, $$old2 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $count$0 = 0, $count$114 = 0, $error$0 = 0, $or$cond = 0;
 var $or$cond3 = 0, $p$0 = 0, $p$115 = 0, $strike$0 = 0, $strike$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 88|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$aprop>>2] = 0;
 $2 = ((($face)) + 812|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = ((($face)) + 104|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_tt_face_load_bdf_props($face,$6)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $error$0 = $7;
   return ($error$0|0);
  }
 }
 $9 = ((($face)) + 808|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($face)) + 792|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($1|0)==(0|0);
 $14 = ($property_name|0)==(0|0);
 $or$cond = $14 | $13;
 if ($or$cond) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $15 = (_strlen($property_name)|0);
 $16 = ($15|0)!=(0);
 $17 = ($10|0)!=(0);
 $or$cond3 = $17 & $16;
 if (!($or$cond3)) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $18 = $10 << 2;
 $$sum = (($18) + 8)|0;
 $19 = (($12) + ($$sum)|0);
 $20 = ((($12)) + 8|0);
 $21 = ((($1)) + 14|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $count$0 = $10;$p$0 = $20;$strike$0 = $19;
 while(1) {
  $24 = HEAP8[$p$0>>0]|0;
  $25 = $24&255;
  $26 = $25 << 8;
  $27 = ((($p$0)) + 1|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $26 | $29;
  $31 = ((($p$0)) + 2|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $33 << 8;
  $35 = ((($p$0)) + 3|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = $34 | $37;
  $39 = ($30|0)==($23|0);
  if ($39) {
   $$lcssa42 = $38;$strike$0$lcssa = $strike$0;
   break;
  }
  $43 = ((($p$0)) + 4|0);
  $44 = ($38*10)|0;
  $45 = (($strike$0) + ($44)|0);
  $46 = (($count$0) + -1)|0;
  $$old2 = ($46|0)==(0);
  if ($$old2) {
   $error$0 = 6;
   label = 21;
   break;
  } else {
   $count$0 = $46;$p$0 = $43;$strike$0 = $45;
  }
 }
 if ((label|0) == 21) {
  return ($error$0|0);
 }
 $40 = ($$lcssa42|0)==(0);
 if ($40) {
  $error$0 = 6;
  return ($error$0|0);
 }
 $41 = ((($face)) + 804|0);
 $42 = ((($face)) + 800|0);
 $count$114 = $$lcssa42;$p$115 = $strike$0$lcssa;
 L20: while(1) {
  $47 = ((($p$115)) + 5|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = $49 & 16;
  $51 = ($50|0)==(0);
  L22: do {
   if (!($51)) {
    $52 = HEAP8[$p$115>>0]|0;
    $53 = $52&255;
    $54 = $53 << 24;
    $55 = ((($p$115)) + 1|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = $57 << 16;
    $59 = $58 | $54;
    $60 = ((($p$115)) + 2|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = $62 << 8;
    $64 = $59 | $63;
    $65 = ((($p$115)) + 3|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = $64 | $67;
    $69 = ((($p$115)) + 6|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $70&255;
    $72 = $71 << 24;
    $73 = ((($p$115)) + 7|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = $75 << 16;
    $77 = $76 | $72;
    $78 = ((($p$115)) + 8|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = $80 << 8;
    $82 = $77 | $81;
    $83 = ((($p$115)) + 9|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $86 = $82 | $85;
    $87 = HEAP32[$41>>2]|0;
    $88 = ($87>>>0)>($68>>>0);
    if ($88) {
     $89 = (($87) - ($68))|0;
     $90 = ($15>>>0)<($89>>>0);
     if ($90) {
      $91 = HEAP32[$42>>2]|0;
      $92 = (($91) + ($68)|0);
      $93 = (_strncmp($property_name,$92,$89)|0);
      $94 = ($93|0)==(0);
      if ($94) {
       $95 = $49 & 15;
       switch ($95|0) {
       case 2:  {
        $$lcssa = $86;
        label = 18;
        break L20;
        break;
       }
       case 3:  {
        $$lcssa39 = $86;
        label = 19;
        break L20;
        break;
       }
       case 1: case 0:  {
        break;
       }
       default: {
        break L22;
       }
       }
       $96 = HEAP32[$41>>2]|0;
       $97 = ($86>>>0)<($96>>>0);
       if ($97) {
        $98 = HEAP32[$42>>2]|0;
        $99 = (($98) + ($86)|0);
        $100 = (_memchr($99,0,$96)|0);
        $101 = ($100|0)==(0|0);
        if (!($101)) {
         $$lcssa40 = $86;
         label = 17;
         break L20;
        }
       }
      }
     }
    }
   }
  } while(0);
  $107 = ((($p$115)) + 10|0);
  $108 = (($count$114) + -1)|0;
  $109 = ($108|0)==(0);
  if ($109) {
   $error$0 = 6;
   label = 21;
   break;
  } else {
   $count$114 = $108;$p$115 = $107;
  }
 }
 if ((label|0) == 17) {
  HEAP32[$aprop>>2] = 1;
  $102 = HEAP32[$42>>2]|0;
  $103 = (($102) + ($$lcssa40)|0);
  $104 = ((($aprop)) + 4|0);
  HEAP32[$104>>2] = $103;
  $error$0 = 0;
  return ($error$0|0);
 }
 else if ((label|0) == 18) {
  HEAP32[$aprop>>2] = 2;
  $105 = ((($aprop)) + 4|0);
  HEAP32[$105>>2] = $$lcssa;
  $error$0 = 0;
  return ($error$0|0);
 }
 else if ((label|0) == 19) {
  HEAP32[$aprop>>2] = 3;
  $106 = ((($aprop)) + 4|0);
  HEAP32[$106>>2] = $$lcssa39;
  $error$0 = 0;
  return ($error$0|0);
 }
 else if ((label|0) == 21) {
  return ($error$0|0);
 }
 return (0)|0;
}
function _tt_face_load_bdf_props($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $9 = 0, $count$05 = 0, $error$0 = 0, $length = 0, $or$cond = 0, $or$cond3 = 0, $p$04 = 0, $strike$0$lcssa = 0, $strike$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $length = sp;
 $0 = ((($face)) + 792|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
 $1 = (_tt_face_goto_table($face,1111770656,$stream,$length)|0);
 $2 = ($1|0)!=(0);
 $3 = HEAP32[$length>>2]|0;
 $4 = ($3>>>0)<(8);
 $or$cond = $2 | $4;
 if ($or$cond) {
  $error$0 = 8;
  STACKTOP = sp;return ($error$0|0);
 }
 $5 = (_FT_Stream_ExtractFrame($stream,$3,$0)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $error$0 = 8;
  STACKTOP = sp;return ($error$0|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$length>>2]|0;
 $9 = (($7) + ($8)|0);
 $10 = ((($face)) + 796|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 8;
 $15 = ((($11)) + 1|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $14 | $17;
 $19 = ((($11)) + 2|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 << 8;
 $23 = ((($11)) + 3|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $22 | $25;
 $27 = ((($11)) + 4|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 24;
 $31 = ((($11)) + 5|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 << 16;
 $35 = $34 | $30;
 $36 = ((($11)) + 6|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = $38 << 8;
 $40 = $35 | $39;
 $41 = ((($11)) + 7|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = $40 | $43;
 $45 = ($18|0)!=(1);
 $46 = ($44>>>0)<(8);
 $or$cond3 = $45 | $46;
 if (!($or$cond3)) {
  $47 = (($44) + -8)|0;
  $48 = $47 >>> 2;
  $49 = ($48>>>0)<($26>>>0);
  if (!($49)) {
   $50 = (($44) + 1)|0;
   $51 = HEAP32[$length>>2]|0;
   $52 = ($50>>>0)>($51>>>0);
   if (!($52)) {
    $53 = ((($face)) + 808|0);
    HEAP32[$53>>2] = $26;
    $54 = HEAP32[$0>>2]|0;
    $55 = (($54) + ($44)|0);
    $56 = ((($face)) + 800|0);
    HEAP32[$56>>2] = $55;
    $57 = HEAP32[$length>>2]|0;
    $58 = (($57) - ($44))|0;
    $59 = ((($face)) + 804|0);
    HEAP32[$59>>2] = $58;
    $60 = HEAP32[$53>>2]|0;
    $61 = HEAP32[$0>>2]|0;
    $62 = $60 << 2;
    $$sum = (($62) + 8)|0;
    $63 = (($61) + ($$sum)|0);
    $64 = ($60|0)==(0);
    if ($64) {
     $strike$0$lcssa = $63;
    } else {
     $65 = ((($61)) + 8|0);
     $count$05 = $60;$p$04 = $65;$strike$06 = $63;
     while(1) {
      $66 = ((($p$04)) + 2|0);
      $67 = HEAP8[$66>>0]|0;
      $68 = $67&255;
      $69 = $68 << 8;
      $70 = ((($p$04)) + 3|0);
      $71 = HEAP8[$70>>0]|0;
      $72 = $71&255;
      $73 = $69 | $72;
      $74 = ($73*10)|0;
      $75 = (($strike$06) + ($74)|0);
      $76 = ((($p$04)) + 4|0);
      $77 = (($count$05) + -1)|0;
      $78 = ($77|0)==(0);
      if ($78) {
       $strike$0$lcssa = $75;
       break;
      } else {
       $count$05 = $77;$p$04 = $76;$strike$06 = $75;
      }
     }
    }
    $79 = HEAP32[$56>>2]|0;
    $80 = ($strike$0$lcssa>>>0)>($79>>>0);
    if (!($80)) {
     $81 = ((($face)) + 812|0);
     HEAP8[$81>>0] = 1;
     $error$0 = $5;
     STACKTOP = sp;return ($error$0|0);
    }
   }
  }
 }
 _FT_Stream_ReleaseFrame($stream,$0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
 $error$0 = 8;
 STACKTOP = sp;return ($error$0|0);
}
function _tt_face_lookup_table($face,$tag) {
 $face = $face|0;
 $tag = $tag|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 156|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 152|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($1) + ($4<<4)|0);
 $6 = ($3<<16>>16)==(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $entry$01 = $1;
 }
 while(1) {
  $7 = HEAP32[$entry$01>>2]|0;
  $8 = ($7|0)==($tag|0);
  if ($8) {
   $9 = ((($entry$01)) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $$0 = $entry$01;
    label = 5;
    break;
   }
  }
  $12 = ((($entry$01)) + 16|0);
  $13 = ($12>>>0)<($5>>>0);
  if ($13) {
   $entry$01 = $12;
  } else {
   $$0 = 0;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _tt_face_goto_table($face,$tag,$stream,$length) {
 $face = $face|0;
 $tag = $tag|0;
 $stream = $stream|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_tt_face_lookup_table($face,$tag)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $error$0 = 142;
  return ($error$0|0);
 }
 $2 = ($length|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$length>>2] = $4;
 }
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_FT_Stream_Seek($stream,$6)|0);
 $error$0 = $7;
 return ($error$0|0);
}
function _tt_face_load_font_dir($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entry$0$ = 0, $entry$01 = 0, $error = 0, $nn$02 = 0, $sfnt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $sfnt = sp + 8|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_FT_Stream_Pos($stream)|0);
 $3 = ((($sfnt)) + 12|0);
 HEAP32[$3>>2] = $2;
 $4 = (_FT_Stream_ReadULong($stream,$error)|0);
 HEAP32[$sfnt>>2] = $4;
 $5 = HEAP32[$error>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $51 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 $7 = (_FT_Stream_ReadFields($stream,23950,$sfnt)|0);
 HEAP32[$error>>2] = $7;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $51 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 $9 = (_check_table_dir($sfnt,$stream)|0);
 HEAP32[$error>>2] = $9;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $51 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 $11 = ((($sfnt)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($face)) + 152|0);
 HEAP16[$13>>1] = $12;
 $14 = HEAP32[$sfnt>>2]|0;
 $15 = ((($face)) + 148|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP16[$13>>1]|0;
 $17 = $16&65535;
 $18 = (_ft_mem_realloc($1,16,0,$17,0,$error)|0);
 $19 = ((($face)) + 156|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$error>>2]|0;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $51 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 $22 = HEAP32[$3>>2]|0;
 $23 = (($22) + 12)|0;
 $24 = (_FT_Stream_Seek($stream,$23)|0);
 HEAP32[$error>>2] = $24;
 $25 = ($24|0)==(0);
 if (!($25)) {
  $51 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 $26 = HEAP16[$13>>1]|0;
 $27 = $26&65535;
 $28 = $27 << 4;
 $29 = (_FT_Stream_EnterFrame($stream,$28)|0);
 HEAP32[$error>>2] = $29;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $51 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($51|0);
 }
 $31 = HEAP16[$11>>1]|0;
 $32 = ($31<<16>>16)==(0);
 if (!($32)) {
  $33 = HEAP32[$19>>2]|0;
  $34 = ((($stream)) + 4|0);
  $entry$01 = $33;$nn$02 = 0;
  while(1) {
   $35 = (_FT_Stream_GetULong($stream)|0);
   HEAP32[$entry$01>>2] = $35;
   $36 = (_FT_Stream_GetULong($stream)|0);
   $37 = ((($entry$01)) + 4|0);
   HEAP32[$37>>2] = $36;
   $38 = (_FT_Stream_GetULong($stream)|0);
   $39 = ((($entry$01)) + 8|0);
   HEAP32[$39>>2] = $38;
   $40 = (_FT_Stream_GetULong($stream)|0);
   $41 = ((($entry$01)) + 12|0);
   HEAP32[$41>>2] = $40;
   $42 = HEAP32[$39>>2]|0;
   $43 = (($42) + ($40))|0;
   $44 = HEAP32[$34>>2]|0;
   $45 = ($43>>>0)>($44>>>0);
   $46 = ((($entry$01)) + 16|0);
   $entry$0$ = $45 ? $entry$01 : $46;
   $47 = (($nn$02) + 1)|0;
   $48 = HEAP16[$11>>1]|0;
   $49 = $48&65535;
   $50 = ($47|0)<($49|0);
   if ($50) {
    $entry$01 = $entry$0$;$nn$02 = $47;
   } else {
    break;
   }
  }
 }
 _FT_Stream_ExitFrame($stream);
 $51 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($51|0);
}
function _tt_face_load_any($face,$tag,$offset,$buffer,$length) {
 $face = $face|0;
 $tag = $tag|0;
 $offset = $offset|0;
 $buffer = $buffer|0;
 $length = $length|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size$0 = 0, $size$0$in = 0;
 var $size$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($tag|0)==(0);
 do {
  if ($0) {
   $7 = ((($face)) + 104|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 4|0);
   $$01 = $offset;$size$0$in = $9;
  } else {
   $1 = (_tt_face_lookup_table($face,$tag)|0);
   $2 = ($1|0)==(0|0);
   if ($2) {
    $$0 = 142;
    return ($$0|0);
   } else {
    $3 = ((($1)) + 8|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (($4) + ($offset))|0;
    $6 = ((($1)) + 12|0);
    $$01 = $5;$size$0$in = $6;
    break;
   }
  }
 } while(0);
 $size$0 = HEAP32[$size$0$in>>2]|0;
 $10 = ($length|0)==(0|0);
 if ($10) {
  $size$1 = $size$0;
 } else {
  $11 = HEAP32[$length>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   HEAP32[$length>>2] = $size$0;
   $$0 = 0;
   return ($$0|0);
  } else {
   $size$1 = $11;
  }
 }
 $13 = ((($face)) + 104|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_FT_Stream_ReadAt($14,$$01,$buffer,$size$1)|0);
 $$0 = $15;
 return ($$0|0);
}
function _tt_face_load_head($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_tt_face_load_generic_header($face,$stream,1751474532)|0);
 return ($0|0);
}
function _tt_face_load_bhed($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_tt_face_load_generic_header($face,$stream,1651008868)|0);
 return ($0|0);
}
function _tt_face_load_maxp($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $error$0 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 260|0);
 $1 = ((($face)) + 508|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_iiiii[$2 & 63]($face,1835104368,$stream,0)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $error$0 = $3;
  return ($error$0|0);
 }
 $5 = (_FT_Stream_ReadFields($stream,23974,$0)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $error$0 = $5;
  return ($error$0|0);
 }
 $7 = ((($face)) + 266|0);
 $8 = ((($face)) + 276|0);
 $9 = ((($face)) + 280|0);
 $10 = ((($face)) + 290|0);
 dest=$7; stop=dest+26|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)>(65535);
 if (!($12)) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $13 = (_FT_Stream_ReadFields($stream,23990,$0)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $error$0 = $13;
  return ($error$0|0);
 }
 $15 = HEAP16[$9>>1]|0;
 $16 = ($15&65535)<(64);
 if ($16) {
  HEAP16[$9>>1] = 64;
 }
 $17 = HEAP16[$8>>1]|0;
 $18 = ($17&65535)>(65531);
 if ($18) {
  HEAP16[$8>>1] = -5;
 }
 $19 = HEAP16[$10>>1]|0;
 $20 = ($19&65535)>(100);
 if (!($20)) {
  $error$0 = 0;
  return ($error$0|0);
 }
 HEAP16[$10>>1] = 100;
 $error$0 = 0;
 return ($error$0|0);
}
function _tt_face_load_name($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$01 = 0, $entry$0$lcssa = 0, $entry$02 = 0, $entry$1 = 0, $error = 0;
 var $table_len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 4|0;
 $table_len = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 364|0);
 HEAP32[$2>>2] = $stream;
 $3 = ((($face)) + 508|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiiii[$4 & 63]($face,1851878757,$stream,$table_len)|0);
 HEAP32[$error>>2] = $5;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $54 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($54|0);
 }
 $7 = ((($face)) + 348|0);
 $8 = (_FT_Stream_Pos($stream)|0);
 $9 = (_FT_Stream_ReadFields($stream,24050,$7)|0);
 HEAP32[$error>>2] = $9;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $54 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($54|0);
 }
 $11 = (($8) + 6)|0;
 $12 = ((($face)) + 352|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13*12)|0;
 $15 = (($11) + ($14))|0;
 $16 = HEAP32[$table_len>>2]|0;
 $17 = (($16) + ($8))|0;
 $18 = ($15>>>0)>($17>>>0);
 if ($18) {
  HEAP32[$error>>2] = 145;
  $54 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($54|0);
 }
 HEAP32[$12>>2] = 0;
 $19 = (_ft_mem_realloc($1,20,0,$13,0,$error)|0);
 $20 = ((($face)) + 360|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$error>>2]|0;
 $22 = ($21|0)==(0);
 if (!($22)) {
  $54 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($54|0);
 }
 $23 = (_FT_Stream_EnterFrame($stream,$14)|0);
 HEAP32[$error>>2] = $23;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $54 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($54|0);
 }
 $25 = HEAP32[$20>>2]|0;
 $26 = ($13|0)==(0);
 if ($26) {
  $entry$0$lcssa = $25;
 } else {
  $27 = ((($face)) + 356|0);
  $count$01 = $13;$entry$02 = $25;
  while(1) {
   $28 = (_FT_Stream_ReadFields($stream,24070,$entry$02)|0);
   HEAP32[$error>>2] = $28;
   $29 = ($28|0)==(0);
   do {
    if ($29) {
     $30 = ((($entry$02)) + 8|0);
     $31 = HEAP16[$30>>1]|0;
     $32 = ($31<<16>>16)==(0);
     if ($32) {
      $entry$1 = $entry$02;
     } else {
      $33 = HEAP32[$27>>2]|0;
      $34 = (($33) + ($8))|0;
      $35 = ((($entry$02)) + 12|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (($34) + ($36))|0;
      HEAP32[$35>>2] = $37;
      $38 = ($37>>>0)<($15>>>0);
      if (!($38)) {
       $39 = HEAP16[$30>>1]|0;
       $40 = $39&65535;
       $41 = (($40) + ($37))|0;
       $42 = ($41>>>0)>($17>>>0);
       if (!($42)) {
        $43 = ((($entry$02)) + 20|0);
        $entry$1 = $43;
        break;
       }
      }
      HEAP32[$35>>2] = 0;
      HEAP16[$30>>1] = 0;
      $entry$1 = $entry$02;
     }
    } else {
     $entry$1 = $entry$02;
    }
   } while(0);
   $44 = (($count$01) + -1)|0;
   $45 = ($44|0)==(0);
   if ($45) {
    $entry$0$lcssa = $entry$1;
    break;
   } else {
    $count$01 = $44;$entry$02 = $entry$1;
   }
  }
 }
 $46 = HEAP32[$20>>2]|0;
 $47 = $entry$0$lcssa;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 20)&-1;
 HEAP32[$12>>2] = $50;
 _FT_Stream_ExitFrame($stream);
 $51 = HEAP32[$12>>2]|0;
 $52 = $51&65535;
 $53 = ((($face)) + 344|0);
 HEAP16[$53>>1] = $52;
 $54 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($54|0);
}
function _tt_face_free_name($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$02 = 0;
 var $entry$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 360|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($face)) + 352|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==(0|0);
 if ($8) {
  HEAP32[$6>>2] = 0;
  $17 = ((($face)) + 348|0);
  HEAP16[$17>>1] = 0;
  $18 = ((($face)) + 356|0);
  HEAP32[$18>>2] = 0;
  return;
 }
 $9 = ($7|0)==(0);
 if (!($9)) {
  $count$02 = $7;$entry$01 = $5;
  while(1) {
   $10 = ((($entry$01)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   _ft_mem_free($3,$11);
   HEAP32[$10>>2] = 0;
   $12 = ((($entry$01)) + 8|0);
   HEAP16[$12>>1] = 0;
   $13 = (($count$02) + -1)|0;
   $14 = ((($entry$01)) + 20|0);
   $15 = ($13|0)==(0);
   if ($15) {
    break;
   } else {
    $count$02 = $13;$entry$01 = $14;
   }
  }
 }
 $16 = HEAP32[$4>>2]|0;
 _ft_mem_free($3,$16);
 HEAP32[$4>>2] = 0;
 HEAP32[$6>>2] = 0;
 $17 = ((($face)) + 348|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($face)) + 356|0);
 HEAP32[$18>>2] = 0;
 return;
}
function _tt_face_load_cmap($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 508|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 504|0);
 $3 = (FUNCTION_TABLE_iiiii[$1 & 63]($face,1668112752,$stream,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $error$0 = $3;
  return ($error$0|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($face)) + 500|0);
 $7 = (_FT_Stream_ExtractFrame($stream,$5,$6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $error$0 = 0;
  return ($error$0|0);
 }
 HEAP32[$2>>2] = 0;
 $error$0 = $7;
 return ($error$0|0);
}
function _tt_face_load_os2($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 508|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iiiii[$1 & 63]($face,1330851634,$stream,0)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $error$0 = $2;
  return ($error$0|0);
 }
 $4 = ((($face)) + 368|0);
 $5 = (_FT_Stream_ReadFields($stream,24098,$4)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  $error$0 = $5;
  return ($error$0|0);
 }
 $7 = ((($face)) + 448|0);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;HEAP16[$7+16>>1]=0|0;
 $8 = HEAP16[$4>>1]|0;
 $9 = ($8<<16>>16)==(0);
 if ($9) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $10 = (_FT_Stream_ReadFields($stream,24274,$4)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $error$0 = $10;
  return ($error$0|0);
 }
 $12 = HEAP16[$4>>1]|0;
 $13 = ($12&65535)>(1);
 if (!($13)) {
  $error$0 = 0;
  return ($error$0|0);
 }
 $14 = (_FT_Stream_ReadFields($stream,24290,$4)|0);
 $error$0 = $14;
 return ($error$0|0);
}
function _tt_face_load_post($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 508|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iiiii[$1 & 63]($face,1886352244,$stream,0)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  return ($$0|0);
 }
 $4 = ((($face)) + 468|0);
 $5 = (_FT_Stream_ReadFields($stream,24318,$4)|0);
 $$0 = $5;
 return ($$0|0);
}
function _tt_face_load_pclt($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 508|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iiiii[$1 & 63]($face,1346587732,$stream,0)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $error$0 = $2;
  return ($error$0|0);
 }
 $4 = ((($face)) + 556|0);
 $5 = (_FT_Stream_ReadFields($stream,24362,$4)|0);
 $error$0 = $5;
 return ($error$0|0);
}
function _tt_face_load_gasp($face,$stream) {
 $face = $face|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $exitcond = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = ((($stream)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 508|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiiii[$3 & 63]($face,1734439792,$stream,0)|0);
 HEAP32[$error>>2] = $4;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = (_FT_Stream_EnterFrame($stream,4)|0);
   HEAP32[$error>>2] = $6;
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = (_FT_Stream_GetUShort($stream)|0);
    $9 = ((($face)) + 548|0);
    HEAP16[$9>>1] = $8;
    $10 = (_FT_Stream_GetUShort($stream)|0);
    $11 = ((($face)) + 550|0);
    HEAP16[$11>>1] = $10;
    _FT_Stream_ExitFrame($stream);
    $12 = HEAP16[$9>>1]|0;
    $13 = ($12&65535)>(1);
    if ($13) {
     HEAP16[$11>>1] = 0;
     HEAP32[$error>>2] = 8;
     break;
    }
    $14 = HEAP16[$11>>1]|0;
    $15 = $14&65535;
    $16 = (_ft_mem_realloc($1,4,0,$15,0,$error)|0);
    $17 = HEAP32[$error>>2]|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $19 = $15 << 2;
     $20 = (_FT_Stream_EnterFrame($stream,$19)|0);
     HEAP32[$error>>2] = $20;
     $21 = ($20|0)==(0);
     if ($21) {
      $22 = ((($face)) + 552|0);
      HEAP32[$22>>2] = $16;
      $23 = ($14<<16>>16)==(0);
      if (!($23)) {
       $24 = $14&65535;
       $j$01 = 0;
       while(1) {
        $25 = (_FT_Stream_GetUShort($stream)|0);
        $26 = (($16) + ($j$01<<2)|0);
        HEAP16[$26>>1] = $25;
        $27 = (_FT_Stream_GetUShort($stream)|0);
        $28 = (((($16) + ($j$01<<2)|0)) + 2|0);
        HEAP16[$28>>1] = $27;
        $29 = (($j$01) + 1)|0;
        $exitcond = ($29|0)==($24|0);
        if ($exitcond) {
         break;
        } else {
         $j$01 = $29;
        }
       }
      }
      _FT_Stream_ExitFrame($stream);
     }
    }
   }
  }
 } while(0);
 $30 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($30|0);
}
function _check_table_dir($sfnt,$stream) {
 $sfnt = $sfnt|0;
 $stream = $stream|0;
 var $$has_meta$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, $has_head$031 = 0, $has_head$031$lcssa = 0, $has_head$07 = 0, $has_head$1 = 0, $has_meta$017 = 0, $has_meta$033 = 0, $has_meta$033$lcssa = 0, $has_meta$1 = 0, $has_sing$012 = 0, $has_sing$032 = 0, $has_sing$032$lcssa = 0;
 var $has_sing$1 = 0, $nn$035 = 0, $nn$035$lcssa = 0, $or$cond = 0, $switch$split12D = 0, $switch$split2D = 0, $table = 0, $valid_entries$022 = 0, $valid_entries$034 = 0, $valid_entries$034$lcssa = 0, $valid_entries$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $error = sp + 16|0;
 $table = sp;
 $0 = ((($sfnt)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12)|0;
 $3 = (_FT_Stream_Seek($stream,$2)|0);
 HEAP32[$error>>2] = $3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = ((($sfnt)) + 4|0);
   $6 = HEAP16[$5>>1]|0;
   $7 = ($6<<16>>16)==(0);
   if ($7) {
    HEAP16[$5>>1] = 0;
   } else {
    $8 = ((($table)) + 8|0);
    $9 = ((($table)) + 12|0);
    $10 = ((($stream)) + 4|0);
    $11 = (($1) + 28)|0;
    $33 = 0;$has_head$031 = 0;$has_meta$033 = 0;$has_sing$032 = 0;$nn$035 = 0;$valid_entries$034 = 0;
    L6: while(1) {
     $12 = (_FT_Stream_ReadFields($stream,24510,$table)|0);
     HEAP32[$error>>2] = $12;
     $13 = ($12|0)==(0);
     if (!($13)) {
      $has_head$031$lcssa = $has_head$031;$has_meta$033$lcssa = $has_meta$033;$has_sing$032$lcssa = $has_sing$032;$nn$035$lcssa = $nn$035;$valid_entries$034$lcssa = $valid_entries$034;
      label = 6;
      break;
     }
     $15 = HEAP32[$8>>2]|0;
     $16 = HEAP32[$9>>2]|0;
     $17 = (($16) + ($15))|0;
     $18 = HEAP32[$10>>2]|0;
     $19 = ($17>>>0)>($18>>>0);
     L9: do {
      if ($19) {
       $has_head$1 = $has_head$031;$has_meta$1 = $has_meta$033;$has_sing$1 = $has_sing$032;$valid_entries$1 = $valid_entries$034;
      } else {
       $20 = (($valid_entries$034) + 1)<<16>>16;
       $21 = HEAP32[$table>>2]|0;
       $switch$split2D = ($21|0)<(1651008868);
       L11: do {
        if ($switch$split2D) {
         switch ($21|0) {
         case 1397313095:  {
          $has_head$1 = $has_head$031;$has_meta$1 = $has_meta$033;$has_sing$1 = 1;$valid_entries$1 = $20;
          break L9;
          break;
         }
         default: {
         }
         }
        } else {
         $switch$split12D = ($21|0)<(1751474532);
         if ($switch$split12D) {
          switch ($21|0) {
          case 1651008868:  {
           break;
          }
          default: {
           break L11;
          }
          }
         } else {
          switch ($21|0) {
          case 1751474532:  {
           break;
          }
          default: {
           break L11;
          }
          }
         }
         $22 = HEAP32[$9>>2]|0;
         $23 = ($22>>>0)<(54);
         if ($23) {
          label = 10;
          break L6;
         }
         $24 = HEAP32[$8>>2]|0;
         $25 = (($24) + 12)|0;
         $26 = (_FT_Stream_Seek($stream,$25)|0);
         HEAP32[$error>>2] = $26;
         $27 = ($26|0)==(0);
         if (!($27)) {
          break L1;
         }
         $28 = (_FT_Stream_ReadULong($stream,$error)|0);
         $29 = HEAP32[$error>>2]|0;
         $30 = ($29|0)==(0);
         if (!($30)) {
          break L1;
         }
         $31 = ($28|0)==(1594834165);
         if (!($31)) {
          label = 14;
          break L6;
         }
         $32 = $33 << 4;
         $34 = (($11) + ($32))|0;
         $35 = (_FT_Stream_Seek($stream,$34)|0);
         HEAP32[$error>>2] = $35;
         $36 = ($35|0)==(0);
         if ($36) {
          $has_head$1 = 1;$has_meta$1 = $has_meta$033;$has_sing$1 = $has_sing$032;$valid_entries$1 = $20;
          break L9;
         } else {
          break L1;
         }
        }
       } while(0);
       $37 = ($21|0)==(1296389185);
       $$has_meta$0 = $37 ? 1 : $has_meta$033;
       $has_head$1 = $has_head$031;$has_meta$1 = $$has_meta$0;$has_sing$1 = $has_sing$032;$valid_entries$1 = $20;
      }
     } while(0);
     $38 = (($nn$035) + 1)<<16>>16;
     $39 = $38&65535;
     $40 = HEAP16[$5>>1]|0;
     $41 = ($38&65535)<($40&65535);
     if ($41) {
      $33 = $39;$has_head$031 = $has_head$1;$has_meta$033 = $has_meta$1;$has_sing$032 = $has_sing$1;$nn$035 = $38;$valid_entries$034 = $valid_entries$1;
     } else {
      $has_head$07 = $has_head$1;$has_meta$017 = $has_meta$1;$has_sing$012 = $has_sing$1;$valid_entries$022 = $valid_entries$1;
      break;
     }
    }
    if ((label|0) == 6) {
     $14 = (($nn$035$lcssa) + -1)<<16>>16;
     HEAP16[$5>>1] = $14;
     $has_head$07 = $has_head$031$lcssa;$has_meta$017 = $has_meta$033$lcssa;$has_sing$012 = $has_sing$032$lcssa;$valid_entries$022 = $valid_entries$034$lcssa;
    }
    else if ((label|0) == 10) {
     HEAP32[$error>>2] = 142;
     break;
    }
    else if ((label|0) == 14) {
     HEAP32[$error>>2] = 142;
     break;
    }
    HEAP16[$5>>1] = $valid_entries$022;
    $42 = ($valid_entries$022<<16>>16)==(0);
    if (!($42)) {
     $43 = ($has_head$07|0)==(0);
     if ($43) {
      $44 = ($has_sing$012|0)!=(0);
      $45 = ($has_meta$017|0)!=(0);
      $or$cond = $44 & $45;
      if (!($or$cond)) {
       HEAP32[$error>>2] = 142;
       break;
      }
     }
     HEAP32[$error>>2] = 0;
     break;
    }
   }
   HEAP32[$error>>2] = 2;
  }
 } while(0);
 $46 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($46|0);
}
function _tt_face_load_generic_header($face,$stream,$tag) {
 $face = $face|0;
 $stream = $stream|0;
 $tag = $tag|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 508|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (FUNCTION_TABLE_iiiii[$1 & 63]($face,$tag,$stream,0)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $error$0 = $2;
  return ($error$0|0);
 }
 $4 = ((($face)) + 160|0);
 $5 = (_FT_Stream_ReadFields($stream,24426,$4)|0);
 $error$0 = $5;
 return ($error$0|0);
}
function _winfnt_get_service($module,$service_id) {
 $module = $module|0;
 $service_id = $service_id|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ft_service_list_lookup(18568,$service_id)|0);
 return ($0|0);
}
function _FNT_Face_Init($stream,$fntface,$face_index,$num_params,$params) {
 $stream = $stream|0;
 $fntface = $fntface|0;
 $face_index = $face_index|0;
 $num_params = $num_params|0;
 $params = $params|0;
 var $$ = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $charmap = 0, $error = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp + 12|0;
 $charmap = sp;
 $0 = ((($fntface)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fnt_face_get_dll_font($fntface,$face_index)|0);
 HEAP32[$error>>2] = $2;
 $3 = ($2|0)==(0);
 $4 = ($face_index|0)<(0);
 $or$cond = $4 & $3;
 if ($or$cond) {
  $140 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($140|0);
 }
 $5 = ($2|0)==(2);
 do {
  if ($5) {
   $6 = (_ft_mem_alloc($1,172,$error)|0);
   $7 = ((($fntface)) + 132|0);
   HEAP32[$7>>2] = $6;
   $8 = HEAP32[$error>>2]|0;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $140 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($140|0);
   }
   HEAP32[$fntface>>2] = 1;
   $10 = HEAP32[$7>>2]|0;
   HEAP32[$10>>2] = 0;
   $11 = ((($stream)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ((($10)) + 164|0);
   HEAP32[$13>>2] = $12;
   $14 = (_fnt_font_load($10,$stream)|0);
   HEAP32[$error>>2] = $14;
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = ($face_index|0)>(0);
    if ($16) {
     HEAP32[$error>>2] = 6;
     break;
    }
    if ($4) {
     $140 = HEAP32[$error>>2]|0;
     STACKTOP = sp;return ($140|0);
    } else {
     label = 8;
    }
   }
  } else {
   label = 8;
  }
 } while(0);
 do {
  if ((label|0) == 8) {
   $$pr = HEAP32[$error>>2]|0;
   $17 = ($$pr|0)==(0);
   if ($17) {
    $18 = ((($fntface)) + 132|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ((($fntface)) + 4|0);
    HEAP32[$20>>2] = $face_index;
    $21 = ((($fntface)) + 8|0);
    $22 = ((($19)) + 100|0);
    $23 = HEAP16[$22>>1]|0;
    $24 = ((($19)) + 102|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = ($23<<16>>16)==($25<<16>>16);
    $$ = $26 ? 22 : 18;
    HEAP32[$21>>2] = $$;
    $27 = ((($19)) + 86|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = ($28<<24>>24)==(0);
    if (!($29)) {
     $30 = ((($fntface)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = $31 | 1;
     HEAP32[$30>>2] = $32;
    }
    $33 = ((($19)) + 90|0);
    $34 = HEAP16[$33>>1]|0;
    $35 = ($34&65535)>(799);
    if ($35) {
     $36 = ((($fntface)) + 12|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $37 | 2;
     HEAP32[$36>>2] = $38;
    }
    $39 = (_ft_mem_realloc($1,16,0,1,0,$error)|0);
    $40 = ((($fntface)) + 32|0);
    HEAP32[$40>>2] = $39;
    $41 = HEAP32[$error>>2]|0;
    $42 = ($41|0)==(0);
    if ($42) {
     $43 = ((($fntface)) + 28|0);
     HEAP32[$43>>2] = 1;
     $44 = HEAP32[$40>>2]|0;
     $45 = HEAP16[$22>>1]|0;
     $46 = ((($44)) + 2|0);
     HEAP16[$46>>1] = $45;
     $47 = ((($19)) + 96|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = $48&65535;
     $50 = ((($19)) + 84|0);
     $51 = HEAP16[$50>>1]|0;
     $52 = $51&65535;
     $53 = (($52) + ($49))|0;
     $54 = $53&65535;
     HEAP16[$44>>1] = $54;
     $55 = ((($19)) + 74|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56&65535;
     $58 = $57 << 6;
     $59 = ((($44)) + 4|0);
     HEAP32[$59>>2] = $58;
     $60 = ((($19)) + 78|0);
     $61 = HEAP16[$60>>1]|0;
     $62 = ($61<<16>>16)!=(0);
     $63 = ((($19)) + 76|0);
     $64 = HEAP16[$63>>1]|0;
     $65 = ($64<<16>>16)!=(0);
     $66 = $64&65535;
     $67 = $65 ? $66 : 72;
     $68 = (_FT_MulDiv($58,$67,72)|0);
     $69 = ((($44)) + 12|0);
     $70 = (($68) + 32)|0;
     $71 = $70 & -64;
     HEAP32[$69>>2] = $71;
     $72 = HEAP16[$47>>1]|0;
     $73 = $72&65535;
     $74 = $73 << 6;
     $75 = ($71|0)>($74|0);
     if ($75) {
      HEAP32[$69>>2] = $74;
      $76 = (_FT_MulDiv($74,72,$67)|0);
      HEAP32[$59>>2] = $76;
     }
     $77 = HEAP32[$59>>2]|0;
     $78 = $61&65535;
     $79 = $62 ? $78 : 72;
     $80 = (_FT_MulDiv($77,$79,72)|0);
     $81 = ((($44)) + 8|0);
     $82 = (($80) + 32)|0;
     $83 = $82 & -64;
     HEAP32[$81>>2] = $83;
     $84 = ((($charmap)) + 4|0);
     HEAP32[$84>>2] = 0;
     $85 = ((($charmap)) + 8|0);
     HEAP16[$85>>1] = 0;
     $86 = ((($charmap)) + 10|0);
     HEAP16[$86>>1] = 0;
     HEAP32[$charmap>>2] = $fntface;
     $87 = ((($19)) + 92|0);
     $88 = HEAP8[$87>>0]|0;
     $89 = ($88<<24>>24)==(77);
     if ($89) {
      HEAP32[$84>>2] = 1634889070;
      HEAP16[$85>>1] = 1;
     }
     $90 = (_FT_CMap_New(18528,0,$charmap,0)|0);
     HEAP32[$error>>2] = $90;
     $91 = ($90|0)==(0);
     if ($91) {
      $92 = ((($fntface)) + 36|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = ($93|0)==(0);
      if (!($94)) {
       $95 = ((($fntface)) + 40|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = HEAP32[$96>>2]|0;
       $98 = ((($fntface)) + 92|0);
       HEAP32[$98>>2] = $97;
      }
      $99 = ((($19)) + 105|0);
      $100 = HEAP8[$99>>0]|0;
      $101 = ((($19)) + 104|0);
      $102 = HEAP8[$101>>0]|0;
      $103 = ($100&255)<($102&255);
      if ($103) {
       HEAP32[$error>>2] = 3;
       break;
      }
      $104 = $100&255;
      $105 = $102&255;
      $106 = (($104) + 2)|0;
      $107 = (($106) - ($105))|0;
      $108 = ((($fntface)) + 16|0);
      HEAP32[$108>>2] = $107;
      $109 = ((($19)) + 116|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ((($19)) + 8|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ($112>>>0)>($110>>>0);
      if (!($113)) {
       HEAP32[$error>>2] = 3;
       break;
      }
      $114 = (($112) - ($110))|0;
      $115 = (($114) + 1)|0;
      $116 = (_ft_mem_alloc($1,$115,$error)|0);
      $117 = ((($19)) + 168|0);
      HEAP32[$117>>2] = $116;
      $118 = HEAP32[$error>>2]|0;
      $119 = ($118|0)==(0);
      if ($119) {
       $120 = ((($19)) + 160|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = HEAP32[$109>>2]|0;
       $123 = (($121) + ($122)|0);
       _memcpy(($116|0),($123|0),($114|0))|0;
       $124 = HEAP32[$117>>2]|0;
       $125 = (($124) + ($114)|0);
       HEAP8[$125>>0] = 0;
       $126 = HEAP32[$117>>2]|0;
       $127 = (_strlen($126)|0);
       $128 = (($127) + 1)|0;
       $129 = (_ft_mem_realloc($1,1,$114,$128,$126,$error)|0);
       HEAP32[$117>>2] = $129;
       $130 = HEAP32[$error>>2]|0;
       $131 = ($130|0)==(0);
       if ($131) {
        $132 = ((($fntface)) + 20|0);
        HEAP32[$132>>2] = $129;
        $133 = ((($fntface)) + 24|0);
        HEAP32[$133>>2] = 89763;
        $134 = ((($fntface)) + 12|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = $135 & 2;
        $137 = ($136|0)==(0);
        $138 = $135 & 1;
        $139 = ($138|0)!=(0);
        if ($137) {
         if (!($139)) {
          $140 = HEAP32[$error>>2]|0;
          STACKTOP = sp;return ($140|0);
         }
         HEAP32[$133>>2] = 89788;
         $140 = HEAP32[$error>>2]|0;
         STACKTOP = sp;return ($140|0);
        }
        if ($139) {
         HEAP32[$133>>2] = 89771;
         $140 = HEAP32[$error>>2]|0;
         STACKTOP = sp;return ($140|0);
        } else {
         HEAP32[$133>>2] = 89783;
         $140 = HEAP32[$error>>2]|0;
         STACKTOP = sp;return ($140|0);
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 _FNT_Face_Done($fntface);
 $140 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($140|0);
}
function _FNT_Face_Done($fntface) {
 $fntface = $fntface|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($fntface|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($fntface)) + 100|0);
 $2 = HEAP32[$1>>2]|0;
 _fnt_font_done($fntface);
 $3 = ((($fntface)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 _ft_mem_free($2,$4);
 HEAP32[$3>>2] = 0;
 $5 = ((($fntface)) + 28|0);
 HEAP32[$5>>2] = 0;
 return;
}
function _FNT_Load_Glyph($slot,$size,$glyph_index,$load_flags) {
 $slot = $slot|0;
 $size = $size|0;
 $glyph_index = $glyph_index|0;
 $load_flags = $load_flags|0;
 var $$0 = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum34 = 0, $$sum7 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $column$017 = 0, $error = 0, $offset$0 = 0, $p$015 = 0, $p$1$lcssa = 0, $p$113 = 0, $pitch$016 = 0, $write$014 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $error = sp;
 $0 = HEAP32[$size>>2]|0;
 HEAP32[$error>>2] = 0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$error>>2] = 6;
  $118 = HEAP32[$error>>2]|0;
  STACKTOP = sp;return ($118|0);
 }
 $2 = ((($0)) + 132|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($0)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6>>>0)>($glyph_index>>>0);
  if ($7) {
   $8 = ($glyph_index|0)==(0);
   if ($8) {
    $10 = ((($3)) + 106|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = $11&255;
    $$0 = $12;
   } else {
    $9 = (($glyph_index) + -1)|0;
    $$0 = $9;
   }
   $13 = ((($3)) + 4|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = ($14<<16>>16)==(768);
   $16 = $15 ? 6 : 4;
   $17 = ((($3)) + 160|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $15 ? 148 : 118;
   $20 = Math_imul($16, $$0)|0;
   $$sum = (($20) + ($19))|0;
   $21 = (($18) + ($$sum)|0);
   $$sum34 = $$sum | 1;
   $22 = (($18) + ($$sum34)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = $24 << 8;
   $26 = HEAP8[$21>>0]|0;
   $27 = $26&255;
   $28 = $25 | $27;
   $29 = ((($slot)) + 80|0);
   HEAP32[$29>>2] = $28;
   $$sum9 = (($$sum) + 2)|0;
   $30 = (($18) + ($$sum9)|0);
   if ($15) {
    $$sum10 = (($$sum) + 5)|0;
    $31 = (($18) + ($$sum10)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = $33 << 24;
    $$sum11 = (($$sum) + 4)|0;
    $35 = (($18) + ($$sum11)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = $37 << 16;
    $39 = $38 | $34;
    $$sum12 = (($$sum) + 3)|0;
    $40 = (($18) + ($$sum12)|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = $41&255;
    $43 = $42 << 8;
    $44 = $39 | $43;
    $45 = HEAP8[$30>>0]|0;
    $46 = $45&255;
    $47 = $44 | $46;
    $offset$0 = $47;
   } else {
    $$sum7 = (($$sum) + 3)|0;
    $48 = (($18) + ($$sum7)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = $50 << 8;
    $52 = HEAP8[$30>>0]|0;
    $53 = $52&255;
    $54 = $51 | $53;
    $offset$0 = $54;
   }
   $55 = ((($3)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($offset$0>>>0)<($56>>>0);
   if (!($57)) {
    HEAP32[$error>>2] = 3;
    $118 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($118|0);
   }
   $58 = HEAP32[$17>>2]|0;
   $59 = ((($slot)) + 4|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($60)) + 100|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = HEAP32[$29>>2]|0;
   $64 = (($63) + 7)|0;
   $65 = $64 >> 3;
   $66 = ((($slot)) + 84|0);
   HEAP32[$66>>2] = $65;
   $67 = ((($3)) + 96|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68&65535;
   $70 = ((($slot)) + 76|0);
   HEAP32[$70>>2] = $69;
   $71 = ((($slot)) + 94|0);
   HEAP8[$71>>0] = 1;
   $72 = HEAP32[$70>>2]|0;
   $73 = Math_imul($65, $72)|0;
   $74 = (($73) + ($offset$0))|0;
   $75 = HEAP32[$55>>2]|0;
   $76 = ($74>>>0)<($75>>>0);
   if (!($76)) {
    HEAP32[$error>>2] = 3;
    $118 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($118|0);
   }
   $77 = (_ft_mem_realloc($62,$72,0,$65,0,$error)|0);
   $78 = ((($slot)) + 88|0);
   HEAP32[$78>>2] = $77;
   $79 = HEAP32[$error>>2]|0;
   $80 = ($79|0)==(0);
   if (!($80)) {
    $118 = HEAP32[$error>>2]|0;
    STACKTOP = sp;return ($118|0);
   }
   $81 = ($65|0)>(0);
   if ($81) {
    $82 = (($58) + ($offset$0)|0);
    $column$017 = $77;$p$015 = $82;$pitch$016 = $65;
    while(1) {
     $83 = HEAP32[$70>>2]|0;
     $84 = (($p$015) + ($83)|0);
     $85 = ($83|0)>(0);
     if ($85) {
      $p$113 = $p$015;$write$014 = $column$017;
      while(1) {
       $86 = HEAP8[$p$113>>0]|0;
       HEAP8[$write$014>>0] = $86;
       $87 = ((($p$113)) + 1|0);
       $88 = HEAP32[$66>>2]|0;
       $89 = (($write$014) + ($88)|0);
       $90 = ($87>>>0)<($84>>>0);
       if ($90) {
        $p$113 = $87;$write$014 = $89;
       } else {
        $p$1$lcssa = $87;
        break;
       }
      }
     } else {
      $p$1$lcssa = $p$015;
     }
     $91 = (($pitch$016) + -1)|0;
     $92 = ((($column$017)) + 1|0);
     $93 = ($pitch$016|0)>(1);
     if ($93) {
      $column$017 = $92;$p$015 = $p$1$lcssa;$pitch$016 = $91;
     } else {
      break;
     }
    }
   }
   $94 = ((($slot)) + 156|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($95)) + 4|0);
   HEAP32[$96>>2] = 1;
   $97 = ((($slot)) + 100|0);
   HEAP32[$97>>2] = 0;
   $98 = ((($3)) + 80|0);
   $99 = HEAP16[$98>>1]|0;
   $100 = $99&65535;
   $101 = ((($slot)) + 104|0);
   HEAP32[$101>>2] = $100;
   $102 = ((($slot)) + 72|0);
   HEAP32[$102>>2] = 1651078259;
   $103 = HEAP32[$29>>2]|0;
   $104 = $103 << 6;
   $105 = ((($slot)) + 24|0);
   HEAP32[$105>>2] = $104;
   $106 = HEAP32[$70>>2]|0;
   $107 = $106 << 6;
   $108 = ((($slot)) + 28|0);
   HEAP32[$108>>2] = $107;
   $109 = HEAP32[$29>>2]|0;
   $110 = $109 << 6;
   $111 = ((($slot)) + 40|0);
   HEAP32[$111>>2] = $110;
   $112 = ((($slot)) + 32|0);
   HEAP32[$112>>2] = 0;
   $113 = HEAP32[$101>>2]|0;
   $114 = $113 << 6;
   $115 = ((($slot)) + 36|0);
   HEAP32[$115>>2] = $114;
   $116 = HEAP32[$70>>2]|0;
   $117 = $116 << 6;
   _ft_synthesize_vertical_metrics($105,$117);
   $118 = HEAP32[$error>>2]|0;
   STACKTOP = sp;return ($118|0);
  }
 }
 HEAP32[$error>>2] = 6;
 $118 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($118|0);
}
function _FNT_Size_Request($size,$req) {
 $size = $size|0;
 $req = $req|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 132|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($req)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 $8 = ((($req)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 if ($7) {
  $14 = $9;
 } else {
  $10 = Math_imul($9, $6)|0;
  $11 = (($10) + 36)|0;
  $12 = (($11|0) / 72)&-1;
  $14 = $12;
 }
 $13 = (($14) + 32)|0;
 $15 = $13 >> 6;
 $16 = HEAP32[$req>>2]|0;
 switch ($16|0) {
 case 0:  {
  $17 = ((($4)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 32)|0;
  $20 = $19 >> 6;
  $21 = ($15|0)==($20|0);
  if (!($21)) {
   $$0 = 23;
   return ($$0|0);
  }
  break;
 }
 case 1:  {
  $22 = ((($2)) + 96|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23&65535;
  $25 = ($15|0)==($24|0);
  if (!($25)) {
   $$0 = 23;
   return ($$0|0);
  }
  break;
 }
 default: {
  $$0 = 7;
  return ($$0|0);
 }
 }
 (_FNT_Size_Select($size,0)|0);
 $$0 = 0;
 return ($$0|0);
}
function _FNT_Size_Select($size,$strike_index) {
 $size = $size|0;
 $strike_index = $strike_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$size>>2]|0;
 $1 = ((($0)) + 132|0);
 $2 = HEAP32[$1>>2]|0;
 _FT_Select_Metrics($0,0);
 $3 = ((($2)) + 80|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $5 << 6;
 $7 = ((($size)) + 24|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($2)) + 96|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&65535;
 $11 = HEAP16[$3>>1]|0;
 $12 = $11&65535;
 $13 = (($12) - ($10))|0;
 $14 = $13 << 6;
 $15 = ((($size)) + 28|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($2)) + 102|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = $17&65535;
 $19 = $18 << 6;
 $20 = ((($size)) + 36|0);
 HEAP32[$20>>2] = $19;
 return 0;
}
function _fnt_font_done($face) {
 $face = $face|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 100|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 132|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  return;
 }
 $7 = ((($5)) + 160|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _FT_Stream_ReleaseFrame($3,$7);
 }
 $10 = ((($5)) + 168|0);
 $11 = HEAP32[$10>>2]|0;
 _ft_mem_free($1,$11);
 HEAP32[$10>>2] = 0;
 _ft_mem_free($1,$5);
 HEAP32[$4>>2] = 0;
 return;
}
function _fnt_face_get_dll_font($face,$face_index) {
 $face = $face|0;
 $face_index = $face_index|0;
 var $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data_entry = 0, $dir_entry1 = 0;
 var $dir_entry2 = 0, $dir_entry3 = 0, $error = 0, $font_count$0 = 0, $font_offset$0 = 0, $i$018 = 0, $i$115 = 0, $j$012 = 0, $k$010 = 0, $lang_dir = 0, $mz_header = 0, $name_dir = 0, $ne_header = 0, $or$cond = 0, $pe32_header = 0, $pe32_section = 0, $root_dir = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $error = sp + 128|0;
 $mz_header = sp + 140|0;
 $ne_header = sp + 132|0;
 $pe32_header = sp + 108|0;
 $pe32_section = sp + 88|0;
 $root_dir = sp + 72|0;
 $name_dir = sp + 56|0;
 $lang_dir = sp + 40|0;
 $dir_entry1 = sp + 32|0;
 $dir_entry2 = sp + 24|0;
 $dir_entry3 = sp + 16|0;
 $data_entry = sp;
 $0 = ((($face)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($face)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($face)) + 132|0);
 HEAP32[$4>>2] = 0;
 $5 = (_FT_Stream_Seek($1,0)|0);
 HEAP32[$error>>2] = $5;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = (_FT_Stream_ReadFields($1,24686,$mz_header)|0);
   HEAP32[$error>>2] = $7;
   $8 = ($7|0)==(0);
   if ($8) {
    HEAP32[$error>>2] = 2;
    $9 = HEAP16[$mz_header>>1]|0;
    $10 = ($9<<16>>16)==(23117);
    L4: do {
     if ($10) {
      $11 = ((($mz_header)) + 2|0);
      $12 = HEAP16[$11>>1]|0;
      $13 = $12&65535;
      $14 = (_FT_Stream_Seek($1,$13)|0);
      HEAP32[$error>>2] = $14;
      $15 = ($14|0)==(0);
      if (!($15)) {
       break L1;
      }
      $16 = (_FT_Stream_ReadFields($1,24706,$ne_header)|0);
      HEAP32[$error>>2] = $16;
      $17 = ($16|0)==(0);
      if (!($17)) {
       break L1;
      }
      HEAP32[$error>>2] = 2;
      $18 = HEAP16[$ne_header>>1]|0;
      L8: do {
       switch ($18<<16>>16) {
       case 17742:  {
        $19 = HEAP16[$11>>1]|0;
        $20 = $19&65535;
        $21 = ((($ne_header)) + 2|0);
        $22 = HEAP16[$21>>1]|0;
        $23 = $22&65535;
        $24 = (($23) + ($20))|0;
        $25 = (_FT_Stream_Seek($1,$24)|0);
        HEAP32[$error>>2] = $25;
        $26 = ($25|0)==(0);
        if (!($26)) {
         break L1;
        }
        $27 = ((($ne_header)) + 4|0);
        $28 = HEAP16[$27>>1]|0;
        $29 = $28&65535;
        $30 = HEAP16[$21>>1]|0;
        $31 = $30&65535;
        $32 = (($29) - ($31))|0;
        $33 = (_FT_Stream_EnterFrame($1,$32)|0);
        HEAP32[$error>>2] = $33;
        $34 = ($33|0)==(0);
        if (!($34)) {
         break L1;
        }
        $35 = (_FT_Stream_GetUShortLE($1)|0);
        $36 = (_FT_Stream_GetUShortLE($1)|0);
        $37 = ($36<<16>>16)==(0);
        L12: do {
         if ($37) {
          $font_count$0 = 0;$font_offset$0 = 0;
         } else {
          $38 = ((($1)) + 32|0);
          $41 = $36;
          while(1) {
           $39 = (_FT_Stream_GetUShortLE($1)|0);
           $40 = ($41<<16>>16)==(-32760);
           if ($40) {
            $$lcssa = $39;
            break;
           }
           $52 = $39&65535;
           $53 = ($52*12)|0;
           $54 = (($53) + 4)|0;
           $55 = HEAP32[$38>>2]|0;
           $56 = (($55) + ($54)|0);
           HEAP32[$38>>2] = $56;
           $57 = (_FT_Stream_GetUShortLE($1)|0);
           $58 = ($57<<16>>16)==(0);
           if ($58) {
            $font_count$0 = 0;$font_offset$0 = 0;
            break L12;
           } else {
            $41 = $57;
           }
          }
          $42 = (_FT_Stream_Pos($1)|0);
          $43 = ((($1)) + 32|0);
          $44 = HEAP32[$43>>2]|0;
          $45 = ((($1)) + 36|0);
          $46 = HEAP32[$45>>2]|0;
          $47 = $44;
          $48 = $46;
          $49 = (($42) + 4)|0;
          $50 = (($49) + ($47))|0;
          $51 = (($50) - ($48))|0;
          $font_count$0 = $$lcssa;$font_offset$0 = $51;
         }
        } while(0);
        _FT_Stream_ExitFrame($1);
        $59 = ($font_count$0<<16>>16)!=(0);
        $60 = ($font_offset$0|0)!=(0);
        $or$cond = $60 & $59;
        if (!($or$cond)) {
         HEAP32[$error>>2] = 3;
         break L1;
        }
        $61 = $font_count$0&65535;
        $62 = ($61*118)|0;
        $63 = ((($1)) + 4|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = ($62>>>0)>($64>>>0);
        if ($65) {
         HEAP32[$error>>2] = 3;
         break L1;
        }
        HEAP32[$face>>2] = $61;
        $66 = ($61|0)>($face_index|0);
        if (!($66)) {
         HEAP32[$error>>2] = 6;
         break L1;
        }
        $67 = ($face_index|0)<(0);
        if ($67) {
         break L1;
        }
        $68 = (_ft_mem_alloc($3,172,$error)|0);
        HEAP32[$4>>2] = $68;
        $69 = HEAP32[$error>>2]|0;
        $70 = ($69|0)==(0);
        if (!($70)) {
         break L1;
        }
        $71 = ($face_index*12)|0;
        $72 = (($font_offset$0) + ($71))|0;
        $73 = (_FT_Stream_Seek($1,$72)|0);
        HEAP32[$error>>2] = $73;
        $74 = ($73|0)==(0);
        if (!($74)) {
         break L4;
        }
        $75 = (_FT_Stream_EnterFrame($1,12)|0);
        HEAP32[$error>>2] = $75;
        $76 = ($75|0)==(0);
        if (!($76)) {
         break L4;
        }
        $77 = (_FT_Stream_GetUShortLE($1)|0);
        $78 = $77&65535;
        $79 = $35&65535;
        $80 = $78 << $79;
        $81 = HEAP32[$4>>2]|0;
        HEAP32[$81>>2] = $80;
        $82 = (_FT_Stream_GetUShortLE($1)|0);
        $83 = $82&65535;
        $84 = $83 << $79;
        $85 = HEAP32[$4>>2]|0;
        $86 = ((($85)) + 164|0);
        HEAP32[$86>>2] = $84;
        $87 = ((($1)) + 32|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = ((($88)) + 8|0);
        HEAP32[$87>>2] = $89;
        _FT_Stream_ExitFrame($1);
        $90 = HEAP32[$4>>2]|0;
        $91 = (_fnt_font_load($90,$1)|0);
        HEAP32[$error>>2] = $91;
        break;
       }
       case 17744:  {
        $92 = HEAP16[$11>>1]|0;
        $93 = $92&65535;
        $94 = (_FT_Stream_Seek($1,$93)|0);
        HEAP32[$error>>2] = $94;
        $95 = ($94|0)==(0);
        if (!($95)) {
         break L1;
        }
        $96 = (_FT_Stream_ReadFields($1,24730,$pe32_header)|0);
        HEAP32[$error>>2] = $96;
        $97 = ($96|0)==(0);
        if (!($97)) {
         break L1;
        }
        $98 = HEAP32[$pe32_header>>2]|0;
        $99 = ($98|0)==(17744);
        if ($99) {
         $100 = ((($pe32_header)) + 4|0);
         $101 = HEAP16[$100>>1]|0;
         $102 = ($101<<16>>16)==(332);
         if ($102) {
          $103 = ((($pe32_header)) + 8|0);
          $104 = HEAP16[$103>>1]|0;
          $105 = ($104<<16>>16)==(224);
          if ($105) {
           $106 = ((($pe32_header)) + 10|0);
           $107 = HEAP16[$106>>1]|0;
           $108 = ($107<<16>>16)==(267);
           if ($108) {
            HEAP32[$face>>2] = 0;
            $109 = ((($pe32_header)) + 6|0);
            $110 = HEAP16[$109>>1]|0;
            $111 = ($110<<16>>16)==(0);
            L40: do {
             if (!($111)) {
              $112 = ((($pe32_header)) + 12|0);
              $113 = ((($pe32_section)) + 8|0);
              $i$018 = 0;
              while(1) {
               $117 = (_FT_Stream_ReadFields($1,24782,$pe32_section)|0);
               HEAP32[$error>>2] = $117;
               $118 = ($117|0)==(0);
               if (!($118)) {
                break L1;
               }
               $119 = HEAP32[$112>>2]|0;
               $120 = HEAP32[$113>>2]|0;
               $121 = ($119|0)==($120|0);
               $116 = (($i$018) + 1)<<16>>16;
               if ($121) {
                break;
               }
               $114 = HEAP16[$109>>1]|0;
               $115 = ($116&65535)<($114&65535);
               if ($115) {
                $i$018 = $116;
               } else {
                break L40;
               }
              }
              $122 = ((($pe32_section)) + 16|0);
              $123 = HEAP32[$122>>2]|0;
              $124 = (_FT_Stream_Seek($1,$123)|0);
              HEAP32[$error>>2] = $124;
              $125 = ($124|0)==(0);
              if (!($125)) {
               break L1;
              }
              $126 = (_FT_Stream_ReadFields($1,24814,$root_dir)|0);
              HEAP32[$error>>2] = $126;
              $127 = ($126|0)==(0);
              if (!($127)) {
               break L1;
              }
              $128 = HEAP32[$122>>2]|0;
              $129 = ((($root_dir)) + 12|0);
              $130 = HEAP16[$129>>1]|0;
              $131 = $130&65535;
              $132 = ((($root_dir)) + 14|0);
              $133 = HEAP16[$132>>1]|0;
              $134 = $133&65535;
              $135 = (($134) + ($131))|0;
              $136 = ($135|0)>(0);
              if (!($136)) {
               break L8;
              }
              $137 = (($128) + 16)|0;
              $138 = ((($dir_entry1)) + 4|0);
              $139 = ((($name_dir)) + 12|0);
              $140 = ((($name_dir)) + 14|0);
              $141 = ((($dir_entry2)) + 4|0);
              $142 = ((($lang_dir)) + 12|0);
              $143 = ((($lang_dir)) + 14|0);
              $144 = ((($dir_entry3)) + 4|0);
              $145 = ((($data_entry)) + 4|0);
              $147 = 0;$i$115 = 0;
              L50: while(1) {
               $146 = $147 << 3;
               $148 = (($137) + ($146))|0;
               $149 = (_FT_Stream_Seek($1,$148)|0);
               HEAP32[$error>>2] = $149;
               $150 = ($149|0)==(0);
               if (!($150)) {
                break L1;
               }
               $151 = (_FT_Stream_ReadFields($1,24846,$dir_entry1)|0);
               HEAP32[$error>>2] = $151;
               $152 = ($151|0)==(0);
               if (!($152)) {
                break L1;
               }
               $153 = HEAP32[$138>>2]|0;
               $154 = ($153|0)<(0);
               if (!($154)) {
                label = 45;
                break;
               }
               $155 = $153 & 2147483647;
               HEAP32[$138>>2] = $155;
               $156 = HEAP32[$122>>2]|0;
               $157 = (($156) + ($155))|0;
               $158 = (_FT_Stream_Seek($1,$157)|0);
               HEAP32[$error>>2] = $158;
               $159 = ($158|0)==(0);
               if (!($159)) {
                break L1;
               }
               $160 = (_FT_Stream_ReadFields($1,24814,$name_dir)|0);
               HEAP32[$error>>2] = $160;
               $161 = ($160|0)==(0);
               if (!($161)) {
                break L1;
               }
               $162 = HEAP16[$139>>1]|0;
               $163 = $162&65535;
               $164 = HEAP16[$140>>1]|0;
               $165 = $164&65535;
               $166 = (($165) + ($163))|0;
               $167 = ($166|0)>(0);
               if ($167) {
                $168 = (($157) + 16)|0;
                $170 = 0;$j$012 = 0;
                while(1) {
                 $169 = $170 << 3;
                 $171 = (($168) + ($169))|0;
                 $172 = (_FT_Stream_Seek($1,$171)|0);
                 HEAP32[$error>>2] = $172;
                 $173 = ($172|0)==(0);
                 if (!($173)) {
                  break L1;
                 }
                 $174 = (_FT_Stream_ReadFields($1,24846,$dir_entry2)|0);
                 HEAP32[$error>>2] = $174;
                 $175 = ($174|0)==(0);
                 if (!($175)) {
                  break L1;
                 }
                 $176 = HEAP32[$141>>2]|0;
                 $177 = ($176|0)<(0);
                 if (!($177)) {
                  label = 53;
                  break L50;
                 }
                 $178 = $176 & 2147483647;
                 HEAP32[$141>>2] = $178;
                 $179 = HEAP32[$122>>2]|0;
                 $180 = (($179) + ($178))|0;
                 $181 = (_FT_Stream_Seek($1,$180)|0);
                 HEAP32[$error>>2] = $181;
                 $182 = ($181|0)==(0);
                 if (!($182)) {
                  break L1;
                 }
                 $183 = (_FT_Stream_ReadFields($1,24814,$lang_dir)|0);
                 HEAP32[$error>>2] = $183;
                 $184 = ($183|0)==(0);
                 if (!($184)) {
                  break L1;
                 }
                 $185 = HEAP16[$142>>1]|0;
                 $186 = $185&65535;
                 $187 = HEAP16[$143>>1]|0;
                 $188 = $187&65535;
                 $189 = (($188) + ($186))|0;
                 $190 = ($189|0)>(0);
                 if ($190) {
                  $191 = (($180) + 16)|0;
                  $193 = 0;$k$010 = 0;
                  while(1) {
                   $192 = $193 << 3;
                   $194 = (($191) + ($192))|0;
                   $195 = (_FT_Stream_Seek($1,$194)|0);
                   HEAP32[$error>>2] = $195;
                   $196 = ($195|0)==(0);
                   if (!($196)) {
                    break L1;
                   }
                   $197 = (_FT_Stream_ReadFields($1,24846,$dir_entry3)|0);
                   HEAP32[$error>>2] = $197;
                   $198 = ($197|0)==(0);
                   if (!($198)) {
                    break L1;
                   }
                   $199 = HEAP32[$141>>2]|0;
                   $200 = ($199|0)<(0);
                   if ($200) {
                    label = 61;
                    break L50;
                   }
                   $201 = HEAP32[$dir_entry1>>2]|0;
                   $202 = ($201|0)==(8);
                   if ($202) {
                    $203 = HEAP32[$144>>2]|0;
                    $204 = (($203) + ($128))|0;
                    $205 = (_FT_Stream_Seek($1,$204)|0);
                    HEAP32[$error>>2] = $205;
                    $206 = ($205|0)==(0);
                    if (!($206)) {
                     break L1;
                    }
                    $207 = (_FT_Stream_ReadFields($1,24862,$data_entry)|0);
                    HEAP32[$error>>2] = $207;
                    $208 = ($207|0)==(0);
                    if (!($208)) {
                     break L1;
                    }
                    $209 = HEAP32[$face>>2]|0;
                    $210 = ($209|0)==($face_index|0);
                    if ($210) {
                     $211 = (_ft_mem_alloc($3,172,$error)|0);
                     HEAP32[$4>>2] = $211;
                     $212 = HEAP32[$error>>2]|0;
                     $213 = ($212|0)==(0);
                     if (!($213)) {
                      break L1;
                     }
                     $214 = HEAP32[$122>>2]|0;
                     $215 = HEAP32[$data_entry>>2]|0;
                     $216 = (($215) + ($214))|0;
                     $217 = HEAP32[$113>>2]|0;
                     $218 = (($216) - ($217))|0;
                     HEAP32[$211>>2] = $218;
                     $219 = HEAP32[$145>>2]|0;
                     $220 = HEAP32[$4>>2]|0;
                     $221 = ((($220)) + 164|0);
                     HEAP32[$221>>2] = $219;
                     $222 = HEAP32[$4>>2]|0;
                     $223 = (_fnt_font_load($222,$1)|0);
                     HEAP32[$error>>2] = $223;
                     $224 = ($223|0)==(0);
                     if (!($224)) {
                      break L4;
                     }
                    }
                    $225 = HEAP32[$face>>2]|0;
                    $226 = (($225) + 1)|0;
                    HEAP32[$face>>2] = $226;
                   }
                   $227 = (($k$010) + 1)<<16>>16;
                   $228 = $227&65535;
                   $229 = HEAP16[$142>>1]|0;
                   $230 = $229&65535;
                   $231 = HEAP16[$143>>1]|0;
                   $232 = $231&65535;
                   $233 = (($232) + ($230))|0;
                   $234 = ($228|0)<($233|0);
                   if ($234) {
                    $193 = $228;$k$010 = $227;
                   } else {
                    break;
                   }
                  }
                 }
                 $235 = (($j$012) + 1)<<16>>16;
                 $236 = $235&65535;
                 $237 = HEAP16[$139>>1]|0;
                 $238 = $237&65535;
                 $239 = HEAP16[$140>>1]|0;
                 $240 = $239&65535;
                 $241 = (($240) + ($238))|0;
                 $242 = ($236|0)<($241|0);
                 if ($242) {
                  $170 = $236;$j$012 = $235;
                 } else {
                  break;
                 }
                }
               }
               $243 = (($i$115) + 1)<<16>>16;
               $244 = $243&65535;
               $245 = HEAP16[$129>>1]|0;
               $246 = $245&65535;
               $247 = HEAP16[$132>>1]|0;
               $248 = $247&65535;
               $249 = (($248) + ($246))|0;
               $250 = ($244|0)<($249|0);
               if ($250) {
                $147 = $244;$i$115 = $243;
               } else {
                break L8;
               }
              }
              if ((label|0) == 45) {
               HEAP32[$error>>2] = 3;
               break L1;
              }
              else if ((label|0) == 53) {
               HEAP32[$error>>2] = 3;
               break L1;
              }
              else if ((label|0) == 61) {
               HEAP32[$error>>2] = 3;
               break L1;
              }
             }
            } while(0);
            HEAP32[$error>>2] = 3;
            break L1;
           }
          }
         }
        }
        HEAP32[$error>>2] = 3;
        break L1;
        break;
       }
       default: {
       }
       }
      } while(0);
      $251 = HEAP32[$face>>2]|0;
      $252 = ($251|0)==(0);
      if ($252) {
       HEAP32[$error>>2] = 3;
       break L1;
      }
      $253 = ($251|0)>($face_index|0);
      if ($253) {
       $$pr = HEAP32[$error>>2]|0;
       $254 = ($$pr|0)==(0);
       if ($254) {
        break L1;
       } else {
        break;
       }
      } else {
       HEAP32[$error>>2] = 6;
       break L1;
      }
     }
    } while(0);
    _fnt_font_done($face);
   }
  }
 } while(0);
 $255 = HEAP32[$error>>2]|0;
 STACKTOP = sp;return ($255|0);
}
function _fnt_font_load($font,$stream) {
 $font = $font|0;
 $stream = $stream|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($font)) + 4|0);
 $1 = HEAP32[$font>>2]|0;
 $2 = (_FT_Stream_Seek($stream,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $error$0 = $2;
  return ($error$0|0);
 }
 $4 = (_FT_Stream_ReadFields($stream,24534,$0)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $error$0 = $4;
  return ($error$0|0);
 }
 $6 = HEAP16[$0>>1]|0;
 switch ($6<<16>>16) {
 case 768: case 512:  {
  break;
 }
 default: {
  $error$0 = 2;
  return ($error$0|0);
 }
 }
 $7 = ($6<<16>>16)==(768);
 $8 = $7 ? 148 : 118;
 $9 = ((($font)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10>>>0)<($8>>>0);
 if ($11) {
  $error$0 = 2;
  return ($error$0|0);
 }
 $12 = ($6<<16>>16)==(512);
 if ($12) {
  $13 = ((($font)) + 132|0);
  ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;
 }
 $14 = ((($font)) + 72|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 & 1;
 $17 = ($16<<16>>16)==(0);
 if (!($17)) {
  $error$0 = 2;
  return ($error$0|0);
 }
 $18 = HEAP32[$font>>2]|0;
 $19 = (_FT_Stream_Seek($stream,$18)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  $error$0 = $19;
  return ($error$0|0);
 }
 $21 = HEAP32[$9>>2]|0;
 $22 = ((($font)) + 160|0);
 $23 = (_FT_Stream_ExtractFrame($stream,$21,$22)|0);
 $error$0 = $23;
 return ($error$0|0);
}
function _fnt_cmap_init($cmap) {
 $cmap = $cmap|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$cmap>>2]|0;
 $1 = ((($0)) + 132|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 104|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ((($cmap)) + 16|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($2)) + 105|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (1 - ($5))|0;
 $11 = (($10) + ($9))|0;
 $12 = ((($cmap)) + 20|0);
 HEAP32[$12>>2] = $11;
 return 0;
}
function _fnt_cmap_char_index($cmap,$char_code) {
 $cmap = $cmap|0;
 $char_code = $char_code|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($cmap)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($char_code) - ($1))|0;
 $3 = ((($cmap)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 $6 = (($2) + 1)|0;
 $$ = $5 ? $6 : 0;
 return ($$|0);
}
function _fnt_cmap_char_next($cmap,$pchar_code) {
 $cmap = $cmap|0;
 $pchar_code = $pchar_code|0;
 var $$ = 0, $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gindex$0 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$pchar_code>>2]|0;
 $1 = (($0) + 1)|0;
 $2 = ((($cmap)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if (!($4)) {
  $gindex$0 = 1;$result$0 = $3;
  HEAP32[$pchar_code>>2] = $result$0;
  return ($gindex$0|0);
 }
 $5 = (($1) - ($3))|0;
 $6 = ((($cmap)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)<($7>>>0);
 $9 = (($5) + 1)|0;
 $$ = $8 ? $9 : 0;
 $$1 = $8 ? $1 : 0;
 $gindex$0 = $$;$result$0 = $$1;
 HEAP32[$pchar_code>>2] = $result$0;
 return ($gindex$0|0);
}
function _winfnt_get_header($face,$aheader) {
 $face = $face|0;
 $aheader = $aheader|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($face)) + 132|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 4|0);
 _memcpy(($aheader|0),($2|0),156)|0;
 return 0;
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 return ($2|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[18596>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 18648;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (89824 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 89912;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 89912;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 89912;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(91716,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $13 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $13 = $$pre;
   }
   $12 = ($13<<24>>24)==(97);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 65;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 66;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 46;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 50;
   $34 = HEAP32[(18600)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((18624)|0));
   $37 = HEAP32[(18620)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $40 = $37;
    $41 = ((($40)) + 52|0);
    HEAP32[$41>>2] = $4;
   }
   HEAP32[(18620)>>2] = $4;
   ___unlock(((18624)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[18596>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((67|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $32 = $30;
   $33 = (($32) + ($29)|0);
   $34 = ((($f)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$0 = $len;
   } else {
    $37 = ((($32)) + 1|0);
    HEAP32[$31>>2] = $37;
    $38 = HEAP8[$32>>0]|0;
    $39 = (($len) + -1)|0;
    $40 = (($buf) + ($39)|0);
    HEAP8[$40>>0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[18596>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((68|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 66;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 127]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((18624)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(18620)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(18620)>>2] = $14;
  }
  ___unlock(((18624)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 63]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[18644>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[18644>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((18624)|0));
   $$012 = HEAP32[(18620)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $24 = $15;
     } else {
      $24 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $23 = ($24|0)==(0);
     if (!($23)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((18624)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(91716,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $32 = $4;
 } else {
  $32 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = ($17>>>0)<($0>>>0);
  $$ = $19 ? $17 : $0;
  _memcpy(($destv|0),($14|0),($$|0))|0;
  $20 = (($14) + ($$)|0);
  HEAP32[$13>>2] = $20;
  $21 = (($destv) + ($$)|0);
  $22 = (($0) - ($$))|0;
  $dest$0$ph = $21;$l$0$ph = $22;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $23 = ($l$0$ph|0)==(0);
 L7: do {
  if ($23) {
   label = 13;
  } else {
   $24 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $25 = (___toread($f)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $27 = HEAP32[$24>>2]|0;
    $28 = (FUNCTION_TABLE_iiii[$27 & 127]($f,$dest$02,$l$03)|0);
    $29 = (($28) + 1)|0;
    $30 = ($29>>>0)<(2);
    if ($30) {
     $l$03$lcssa = $l$03;
     break;
    }
    $35 = (($l$03) - ($28))|0;
    $36 = (($dest$02) + ($28)|0);
    $37 = ($l$03|0)==($28|0);
    if ($37) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $36;$l$03 = $35;
    }
   }
   $31 = ($32|0)==(0);
   if (!($31)) {
    ___unlockfile($f);
   }
   $33 = (($0) - ($l$03$lcssa))|0;
   $34 = (($33>>>0) / ($size>>>0))&-1;
   $$0 = $34;
  }
 } while(0);
 if ((label|0) == 13) {
  $38 = ($32|0)==(0);
  if ($38) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $2;
  $6 = $4;
  $7 = (($off) - ($5))|0;
  $8 = (($7) + ($6))|0;
  $$01 = $8;
 } else {
  $$01 = $off;
 }
 $9 = ((($f)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($f)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  $14 = ((($f)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  (FUNCTION_TABLE_iiii[$15 & 127]($f,0,0)|0);
  $16 = HEAP32[$9>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $18 = ((($f)) + 16|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $19 = ((($f)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$20 & 127]($f,$$01,$whence)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   $$0 = -1;
  } else {
   $23 = ((($f)) + 8|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($f)) + 4|0);
   HEAP32[$24>>2] = 0;
   $25 = HEAP32[$f>>2]|0;
   $26 = $25 & -17;
   HEAP32[$f>>2] = $26;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 127]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $14;
  $18 = $16;
  $19 = ((($f)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($f)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($11) - ($17))|0;
  $26 = (($25) + ($18))|0;
  $27 = (($26) + ($23))|0;
  $28 = (($27) - ($24))|0;
  $$0 = $28;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $8 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $8 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = $8;
   $9 = $6;
   $10 = (($7) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 127]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 127]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[18640>>2]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 80|0;
 $nl_type = sp + 96|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $33 = $5;
  } else {
   $33 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 127]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $32 = ($33|0)==(0);
  if (!($32)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f; src=18652; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
   label = 4;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;$$02 = $n;
  label = 4;
 }
 if ((label|0) == 4) {
  $4 = $$01;
  $5 = (-2 - ($4))|0;
  $6 = ($$02>>>0)>($5>>>0);
  $$$02 = $6 ? $5 : $$02;
  $7 = ((($f)) + 48|0);
  HEAP32[$7>>2] = $$$02;
  $8 = ((($f)) + 20|0);
  HEAP32[$8>>2] = $$01;
  $9 = ((($f)) + 44|0);
  HEAP32[$9>>2] = $$01;
  $10 = (($$01) + ($$$02)|0);
  $11 = ((($f)) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($f)) + 28|0);
  HEAP32[$12>>2] = $10;
  $13 = (_vfprintf($f,$fmt,$ap)|0);
  $14 = ($$$02|0)==(0);
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8>>2]|0;
   $16 = HEAP32[$11>>2]|0;
   $17 = ($15|0)==($16|0);
   $18 = $17 << 31 >> 31;
   $19 = (($15) + ($18)|0);
   HEAP8[$19>>0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 return ($0|0);
}
function _atol($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp5 = 0, $n$0$lcssa = 0, $n$04 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = ((($$0)) + 1|0);
  if ($3) {
   $$0$lcssa = $$0;$$lcssa9 = $4;
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0$lcssa>>0]|0;
 $6 = $5 << 24 >> 24;
 switch ($6|0) {
 case 45:  {
  $neg$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $neg$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = $$0$lcssa;$8 = $5;$neg$1$ph = 0;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$$lcssa9>>0]|0;
  $$1$ph = $$lcssa9;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $isdigittmp1 = (($7) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 if ($isdigit2) {
  $$13 = $$1$ph;$isdigittmp5 = $isdigittmp1;$n$04 = 0;
  while(1) {
   $9 = ($n$04*10)|0;
   $10 = ((($$13)) + 1|0);
   $11 = (($9) - ($isdigittmp5))|0;
   $12 = HEAP8[$10>>0]|0;
   $13 = $12 << 24 >> 24;
   $isdigittmp = (($13) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$13 = $10;$isdigittmp5 = $isdigittmp;$n$04 = $11;
   } else {
    $n$0$lcssa = $11;
    break;
   }
  }
 } else {
  $n$0$lcssa = 0;
 }
 $14 = ($neg$1$ph|0)!=(0);
 $15 = (0 - ($n$0$lcssa))|0;
 $16 = $14 ? $n$0$lcssa : $15;
 return ($16|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$0$i = 0, $$0$i30 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$lcssa = 0, $$lcssa57 = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i11 = 0, $$pre$i20 = 0, $$pre$i5 = 0, $$pre$i8 = 0, $$pre1$i = 0, $$pre1$i12 = 0, $$pre1$i27$pre = 0, $$pre1$i6 = 0, $$pre1$i9 = 0, $$sum = 0, $$sum2 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $8$phi = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $head$0$lcssa = 0, $head$036 = 0;
 var $head$1$be = 0, $head$153 = 0, $i$0 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond48 = 0, $or$cond4852 = 0, $or$cond51 = 0, $p = 0, $pshift$0$lcssa = 0, $pshift$037 = 0, $pshift$1 = 0, $pshift$2$be = 0, $pshift$254 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $lp = sp + 8|0;
 $p = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = $p;
 $2 = $1;
 HEAP32[$2>>2] = 1;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ($0|0)==(0);
 if (!($5)) {
  $$sum = (($0) - ($width))|0;
  $6 = ((($lp)) + 4|0);
  HEAP32[$6>>2] = $width;
  HEAP32[$lp>>2] = $width;
  $10 = $width;$8 = $width;$i$0 = 2;
  while(1) {
   $7 = (($8) + ($width))|0;
   $9 = (($7) + ($10))|0;
   $11 = (($lp) + ($i$0<<2)|0);
   HEAP32[$11>>2] = $9;
   $12 = ($9>>>0)<($0>>>0);
   $13 = (($i$0) + 1)|0;
   if ($12) {
    $8$phi = $10;$10 = $9;$i$0 = $13;$8 = $8$phi;
   } else {
    break;
   }
  }
  $14 = (0 - ($width))|0;
  $15 = (($base) + ($$sum)|0);
  $16 = ($$sum|0)>(0);
  $$phi$trans$insert$i = ((($p)) + 4|0);
  if ($16) {
   $17 = $15;
   $19 = 1;$head$036 = $base;$pshift$037 = 1;
   while(1) {
    $18 = $19 & 3;
    $20 = ($18|0)==(3);
    do {
     if ($20) {
      _sift($head$036,$width,$cmp,$pshift$037,$lp);
      $$pre$i = HEAP32[$p>>2]|0;
      $$pre1$i = HEAP32[$$phi$trans$insert$i>>2]|0;
      $21 = $$pre$i >>> 2;
      $22 = $$pre1$i << 30;
      $23 = $22 | $21;
      HEAP32[$p>>2] = $23;
      $24 = $$pre1$i >>> 2;
      HEAP32[$$phi$trans$insert$i>>2] = $24;
      $25 = (($pshift$037) + 2)|0;
      $48 = $23;$pshift$1 = $25;
     } else {
      $26 = (($pshift$037) + -1)|0;
      $27 = (($lp) + ($26<<2)|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = $head$036;
      $30 = (($17) - ($29))|0;
      $31 = ($28>>>0)<($30>>>0);
      if ($31) {
       _sift($head$036,$width,$cmp,$pshift$037,$lp);
      } else {
       _trinkle($head$036,$width,$cmp,$p,$pshift$037,0,$lp);
      }
      $32 = ($pshift$037|0)==(1);
      if ($32) {
       $$pre$i5 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i6 = HEAP32[$p>>2]|0;
       $33 = $$pre$i5 << 1;
       $34 = $$pre1$i6 >>> 31;
       $35 = $34 | $33;
       HEAP32[$$phi$trans$insert$i>>2] = $35;
       $36 = $$pre1$i6 << 1;
       HEAP32[$p>>2] = $36;
       $48 = $36;$pshift$1 = 0;
       break;
      }
      $37 = ($26>>>0)>(31);
      if ($37) {
       $38 = (($pshift$037) + -33)|0;
       $39 = HEAP32[$p>>2]|0;
       HEAP32[$$phi$trans$insert$i>>2] = $39;
       HEAP32[$p>>2] = 0;
       $$0$i = $38;$41 = $39;$44 = 0;
      } else {
       $$pre$i11 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i12 = HEAP32[$p>>2]|0;
       $$0$i = $26;$41 = $$pre$i11;$44 = $$pre1$i12;
      }
      $40 = $41 << $$0$i;
      $42 = (32 - ($$0$i))|0;
      $43 = $44 >>> $42;
      $45 = $43 | $40;
      HEAP32[$$phi$trans$insert$i>>2] = $45;
      $46 = $44 << $$0$i;
      HEAP32[$p>>2] = $46;
      $48 = $46;$pshift$1 = 1;
     }
    } while(0);
    $47 = $48 | 1;
    HEAP32[$p>>2] = $47;
    $49 = (($head$036) + ($width)|0);
    $50 = ($49>>>0)<($15>>>0);
    if ($50) {
     $19 = $47;$head$036 = $49;$pshift$037 = $pshift$1;
    } else {
     $head$0$lcssa = $49;$pshift$0$lcssa = $pshift$1;
     break;
    }
   }
  } else {
   $head$0$lcssa = $base;$pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa,$width,$cmp,$p,$pshift$0$lcssa,0,$lp);
  $51 = ((($p)) + 4|0);
  $52 = ($pshift$0$lcssa|0)==(1);
  $53 = HEAP32[$p>>2]|0;
  $54 = ($53|0)==(1);
  $or$cond51 = $52 & $54;
  $55 = HEAP32[$51>>2]|0;
  $56 = ($55|0)==(0);
  $or$cond4852 = $or$cond51 & $56;
  if (!($or$cond4852)) {
   $59 = $53;$head$153 = $head$0$lcssa;$pshift$254 = $pshift$0$lcssa;
   while(1) {
    $57 = ($pshift$254|0)<(2);
    if ($57) {
     $58 = (($59) + -1)|0;
     $60 = ($58|0)==(0);
     do {
      if ($60) {
       $81 = 32;
       label = 30;
      } else {
       $61 = $58 & 1;
       $62 = ($61|0)==(0);
       if ($62) {
        $$02$i$i = $58;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $63 = (($nTrailingZeros$03$i$i) + 1)|0;
         $64 = $$02$i$i >>> 1;
         $65 = $64 & 1;
         $66 = ($65|0)==(0);
         if ($66) {
          $$02$i$i = $64;$nTrailingZeros$03$i$i = $63;
         } else {
          $$lcssa = $63;
          break;
         }
        }
        $67 = ($$lcssa|0)==(0);
        if ($67) {
         label = 24;
        } else {
         $79 = $$lcssa;
        }
       } else {
        label = 24;
       }
       if ((label|0) == 24) {
        label = 0;
        $68 = HEAP32[$$phi$trans$insert$i>>2]|0;
        $69 = ($68|0)==(0);
        if ($69) {
         $81 = 64;
         label = 30;
         break;
        }
        $70 = $68 & 1;
        $71 = ($70|0)==(0);
        if ($71) {
         $$02$i3$i = $68;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        }
        while(1) {
         $72 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $73 = $$02$i3$i >>> 1;
         $74 = $73 & 1;
         $75 = ($74|0)==(0);
         if ($75) {
          $$02$i3$i = $73;$nTrailingZeros$03$i2$i = $72;
         } else {
          $$lcssa57 = $72;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $76 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $77 = ($$lcssa57|0)==(0);
        if ($77) {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        } else {
         $79 = $76;
        }
       }
       $78 = ($79>>>0)>(31);
       if ($78) {
        $81 = $79;
        label = 30;
       } else {
        $$pre1$i27$pre = HEAP32[$$phi$trans$insert$i>>2]|0;
        $$0$i30 = $79;$84 = $59;$87 = $$pre1$i27$pre;$91 = $79;
       }
      }
     } while(0);
     if ((label|0) == 30) {
      label = 0;
      $80 = (($81) + -32)|0;
      $82 = HEAP32[$$phi$trans$insert$i>>2]|0;
      HEAP32[$p>>2] = $82;
      HEAP32[$$phi$trans$insert$i>>2] = 0;
      $$0$i30 = $80;$84 = $82;$87 = 0;$91 = $81;
     }
     $83 = $84 >>> $$0$i30;
     $85 = (32 - ($$0$i30))|0;
     $86 = $87 << $85;
     $88 = $86 | $83;
     HEAP32[$p>>2] = $88;
     $89 = $87 >>> $$0$i30;
     HEAP32[$$phi$trans$insert$i>>2] = $89;
     $90 = (($91) + ($pshift$254))|0;
     $$pre = (($head$153) + ($14)|0);
     $head$1$be = $$pre;$pshift$2$be = $90;
    } else {
     $$pre$i20 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $92 = $$pre$i20 << 2;
     $93 = $59 >>> 30;
     $94 = $93 | $92;
     $95 = (($pshift$254) + -2)|0;
     $96 = $59 << 1;
     $97 = $96 & 2147483646;
     $98 = $93 << 31;
     $99 = $97 | $98;
     $100 = $99 ^ 3;
     HEAP32[$p>>2] = $100;
     $101 = $94 >>> 1;
     HEAP32[$$phi$trans$insert$i>>2] = $101;
     $102 = (($lp) + ($95<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $sum = (($103) + ($width))|0;
     $$sum2 = (0 - ($sum))|0;
     $104 = (($head$153) + ($$sum2)|0);
     $105 = (($pshift$254) + -1)|0;
     _trinkle($104,$width,$cmp,$p,$105,1,$lp);
     $$pre$i8 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $$pre1$i9 = HEAP32[$p>>2]|0;
     $106 = $$pre$i8 << 1;
     $107 = $$pre1$i9 >>> 31;
     $108 = $107 | $106;
     HEAP32[$$phi$trans$insert$i>>2] = $108;
     $109 = $$pre1$i9 << 1;
     $110 = $109 | 1;
     HEAP32[$p>>2] = $110;
     $111 = (($head$153) + ($14)|0);
     _trinkle($111,$width,$cmp,$p,$95,1,$lp);
     $head$1$be = $111;$pshift$2$be = $95;
    }
    $112 = ($pshift$2$be|0)==(1);
    $113 = HEAP32[$p>>2]|0;
    $114 = ($113|0)==(1);
    $or$cond = $112 & $114;
    $115 = HEAP32[$51>>2]|0;
    $116 = ($115|0)==(0);
    $or$cond48 = $or$cond & $116;
    if ($or$cond48) {
     break;
    } else {
     $59 = $113;$head$153 = $head$1$be;$pshift$254 = $pshift$2$be;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   break;
  } else {
   $$01 = $1;
  }
 }
 return ($$0|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = ((($$016)) + 1|0);
     $10 = ((($$0115)) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
    while(1) {
     $20 = ((($ws$011)) + 4|0);
     $21 = ((($wd$010)) + 4|0);
     HEAP32[$wd$010>>2] = $22;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($23) + -16843009)|0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27|0)==(0);
     if ($28) {
      $22 = $23;$wd$010 = $21;$ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;$ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;$$12$ph = $d;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$12$ph>>0] = $29;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;$$19 = $$1$ph;
   while(1) {
    $31 = ((($$19)) + 1|0);
    $32 = ((($$128)) + 1|0);
    $33 = HEAP8[$31>>0]|0;
    HEAP8[$32>>0] = $33;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;$$19 = $31;
    }
   }
  }
 }
 return ($$03|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa60 = 0, $$031 = 0, $$04$lcssa = 0, $$04$lcssa61 = 0, $$0430 = 0, $$06$lcssa = 0, $$06$lcssa62 = 0, $$0629 = 0, $$1$lcssa = 0, $$117 = 0, $$15$ph = 0, $$1511 = 0, $$17$ph = 0, $$1710 = 0, $$2$ph = 0, $$212 = 0, $$28 = 0, $$3 = 0, $$lcssa = 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $wd$0$lcssa = 0;
 var $wd$018 = 0, $ws$0$lcssa = 0, $ws$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)!=(0);
   $7 = ($n|0)!=(0);
   $or$cond28 = $7 & $6;
   L3: do {
    if ($or$cond28) {
     $$031 = $n;$$0430 = $s;$$0629 = $d;
     while(1) {
      $8 = HEAP8[$$0430>>0]|0;
      HEAP8[$$0629>>0] = $8;
      $9 = ($8<<24>>24)==(0);
      if ($9) {
       $$0$lcssa60 = $$031;$$04$lcssa61 = $$0430;$$06$lcssa62 = $$0629;
       break L3;
      }
      $10 = (($$031) + -1)|0;
      $11 = ((($$0430)) + 1|0);
      $12 = ((($$0629)) + 1|0);
      $13 = $11;
      $14 = $13 & 3;
      $15 = ($14|0)!=(0);
      $16 = ($10|0)!=(0);
      $or$cond = $16 & $15;
      if ($or$cond) {
       $$031 = $10;$$0430 = $11;$$0629 = $12;
      } else {
       $$0$lcssa = $10;$$04$lcssa = $11;$$06$lcssa = $12;$$lcssa = $16;
       label = 5;
       break;
      }
     }
    } else {
     $$0$lcssa = $n;$$04$lcssa = $s;$$06$lcssa = $d;$$lcssa = $7;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$0$lcssa60 = $$0$lcssa;$$04$lcssa61 = $$04$lcssa;$$06$lcssa62 = $$06$lcssa;
    } else {
     $$28 = $$06$lcssa;$$3 = 0;
     break;
    }
   }
   $17 = HEAP8[$$04$lcssa61>>0]|0;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $$28 = $$06$lcssa62;$$3 = $$0$lcssa60;
   } else {
    $19 = ($$0$lcssa60>>>0)>(3);
    L11: do {
     if ($19) {
      $$117 = $$0$lcssa60;$wd$018 = $$06$lcssa62;$ws$019 = $$04$lcssa61;
      while(1) {
       $20 = HEAP32[$ws$019>>2]|0;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$117;$wd$0$lcssa = $wd$018;$ws$0$lcssa = $ws$019;
        break L11;
       }
       HEAP32[$wd$018>>2] = $20;
       $26 = (($$117) + -4)|0;
       $27 = ((($ws$019)) + 4|0);
       $28 = ((($wd$018)) + 4|0);
       $29 = ($26>>>0)>(3);
       if ($29) {
        $$117 = $26;$wd$018 = $28;$ws$019 = $27;
       } else {
        $$1$lcssa = $26;$wd$0$lcssa = $28;$ws$0$lcssa = $27;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa60;$wd$0$lcssa = $$06$lcssa62;$ws$0$lcssa = $$04$lcssa61;
     }
    } while(0);
    $$15$ph = $ws$0$lcssa;$$17$ph = $wd$0$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$15$ph = $s;$$17$ph = $d;$$2$ph = $n;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $30 = ($$2$ph|0)==(0);
   if ($30) {
    $$28 = $$17$ph;$$3 = 0;
   } else {
    $$1511 = $$15$ph;$$1710 = $$17$ph;$$212 = $$2$ph;
    while(1) {
     $31 = HEAP8[$$1511>>0]|0;
     HEAP8[$$1710>>0] = $31;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$28 = $$1710;$$3 = $$212;
      break L16;
     }
     $33 = (($$212) + -1)|0;
     $34 = ((($$1511)) + 1|0);
     $35 = ((($$1710)) + 1|0);
     $36 = ($33|0)==(0);
     if ($36) {
      $$28 = $35;$$3 = 0;
      break;
     } else {
      $$1511 = $34;$$1710 = $35;$$212 = $33;
     }
    }
   }
  }
 } while(0);
 _memset(($$28|0),0,($$3|0))|0;
 return ($$28|0);
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $l$03$lcssa24 = 0, $r$0$lcssa = 0, $r$04 = 0, $r$04$lcssa23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $6 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $6;$r$0$lcssa = $r$04;
     break L1;
    }
    $5 = ($6<<24>>24)==($3<<24>>24);
    if (!($5)) {
     $8 = (_tolower($7)|0);
     $9 = HEAP8[$r$04>>0]|0;
     $10 = $9&255;
     $11 = (_tolower($10)|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      $l$03$lcssa24 = $l$03;$r$04$lcssa23 = $r$04;
      break;
     }
    }
    $13 = ((($l$03)) + 1|0);
    $14 = ((($r$04)) + 1|0);
    $15 = HEAP8[$13>>0]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $6 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre = HEAP8[$l$03$lcssa24>>0]|0;
   $19 = $$pre;$r$0$lcssa = $r$04$lcssa23;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower($18)|0);
 $21 = HEAP8[$r$0$lcssa>>0]|0;
 $22 = $21&255;
 $23 = (_tolower($22)|0);
 $24 = (($20) - ($23))|0;
 return ($24|0);
}
function _strcat($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($dest)|0);
 $1 = (($dest) + ($0)|0);
 (_strcpy($1,$src)|0);
 return ($dest|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy(($2|0),($s|0),($1|0))|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$7 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $6 = ($7<<24>>24)==($3<<24>>24);
     $or$cond4 = $6 & $or$cond;
     if (!($or$cond4)) {
      $13 = $7;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$7 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 return ($2|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i11 = 0, $$01$i = 0, $$02$i = 0, $$02$i7 = 0, $$03$i = 0, $$lcssa$i = 0, $$lcssa$i10 = 0, $$lcssa$i4 = 0, $$lcssa281 = 0, $$lcssa284 = 0, $$lcssa287 = 0, $$lcssa301 = 0, $$lcssa304 = 0, $$lcssa307 = 0, $$lcssa322 = 0, $$pr$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $233$phi = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $byteset$i = 0, $div$i = 0, $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i6 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa143$i = 0, $ip$0$ph76$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0;
 var $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$4$i = 0, $l$080$i = 0, $l$080$i$lcssa321 = 0, $mem$0$i = 0, $mem0$0$i = 0, $or$cond$i = 0, $or$cond$i2 = 0, $or$cond$i8 = 0, $or$cond5$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32147$i = 0, $p$0$ph$ph71$i = 0;
 var $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3$i = 0, $shift$i = 0, $z$0$i = 0, $z$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = $h;
  } else {
   $2 = $0 << 24 >> 24;
   $3 = (_strchr($h,$2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
   } else {
    $5 = ((($n)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0 = $3;
    } else {
     $8 = ((($3)) + 1|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$0 = 0;
     } else {
      $11 = ((($n)) + 2|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)==(0);
      if ($13) {
       $14 = $0&255;
       $15 = $14 << 8;
       $16 = $6&255;
       $17 = $16 | $15;
       $18 = HEAP8[$3>>0]|0;
       $19 = $18&255;
       $20 = $19 << 8;
       $21 = $9&255;
       $22 = $20 | $21;
       $$01$i = $8;$232 = $9;$233 = $3;$hw$0$in2$i = $22;
       while(1) {
        $23 = $hw$0$in2$i & 65535;
        $24 = ($23|0)==($17|0);
        if ($24) {
         $$lcssa$i = $233;$32 = $232;
         break;
        }
        $25 = $23 << 8;
        $26 = ((($$01$i)) + 1|0);
        $27 = HEAP8[$26>>0]|0;
        $28 = $27&255;
        $29 = $28 | $25;
        $30 = ($27<<24>>24)==(0);
        if ($30) {
         $$lcssa$i = $$01$i;$32 = 0;
         break;
        } else {
         $233$phi = $$01$i;$$01$i = $26;$232 = $27;$hw$0$in2$i = $29;$233 = $233$phi;
        }
       }
       $31 = ($32<<24>>24)!=(0);
       $33 = $31 ? $$lcssa$i : 0;
       $$0 = $33;
       break;
      }
      $34 = ((($3)) + 2|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $$0 = 0;
      } else {
       $37 = ((($n)) + 3|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = ($38<<24>>24)==(0);
       if ($39) {
        $40 = $0&255;
        $41 = $40 << 24;
        $42 = $6&255;
        $43 = $42 << 16;
        $44 = $43 | $41;
        $45 = $12&255;
        $46 = $45 << 8;
        $47 = $44 | $46;
        $48 = HEAP8[$3>>0]|0;
        $49 = $48&255;
        $50 = $49 << 24;
        $51 = $9&255;
        $52 = $51 << 16;
        $53 = $35&255;
        $54 = $53 << 8;
        $55 = $54 | $52;
        $56 = $55 | $50;
        $57 = ($56|0)==($47|0);
        if ($57) {
         $$0$lcssa$i = $34;$$lcssa$i4 = $35;
        } else {
         $$02$i = $34;$hw$03$i = $56;
         while(1) {
          $58 = ((($$02$i)) + 1|0);
          $59 = HEAP8[$58>>0]|0;
          $60 = $59&255;
          $61 = $60 | $hw$03$i;
          $62 = $61 << 8;
          $63 = ($59<<24>>24)==(0);
          $64 = ($62|0)==($47|0);
          $or$cond$i2 = $63 | $64;
          if ($or$cond$i2) {
           $$0$lcssa$i = $58;$$lcssa$i4 = $59;
           break;
          } else {
           $$02$i = $58;$hw$03$i = $62;
          }
         }
        }
        $65 = ($$lcssa$i4<<24>>24)!=(0);
        $66 = ((($$0$lcssa$i)) + -2|0);
        $67 = $65 ? $66 : 0;
        $$0 = $67;
        break;
       }
       $68 = ((($3)) + 3|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ($69<<24>>24)==(0);
       if ($70) {
        $$0 = 0;
       } else {
        $71 = ((($n)) + 4|0);
        $72 = HEAP8[$71>>0]|0;
        $73 = ($72<<24>>24)==(0);
        if ($73) {
         $74 = $0&255;
         $75 = $74 << 24;
         $76 = $6&255;
         $77 = $76 << 16;
         $78 = $77 | $75;
         $79 = $12&255;
         $80 = $79 << 8;
         $81 = $78 | $80;
         $82 = $38&255;
         $83 = $81 | $82;
         $84 = HEAP8[$3>>0]|0;
         $85 = $84&255;
         $86 = $85 << 24;
         $87 = $9&255;
         $88 = $87 << 16;
         $89 = $35&255;
         $90 = $89 << 8;
         $91 = $69&255;
         $92 = $90 | $88;
         $93 = $92 | $91;
         $94 = $93 | $86;
         $95 = ($94|0)==($83|0);
         if ($95) {
          $$0$lcssa$i11 = $68;$$lcssa$i10 = $69;
         } else {
          $$02$i7 = $68;$hw$03$i6 = $94;
          while(1) {
           $96 = $hw$03$i6 << 8;
           $97 = ((($$02$i7)) + 1|0);
           $98 = HEAP8[$97>>0]|0;
           $99 = $98&255;
           $100 = $99 | $96;
           $101 = ($98<<24>>24)==(0);
           $102 = ($100|0)==($83|0);
           $or$cond$i8 = $101 | $102;
           if ($or$cond$i8) {
            $$0$lcssa$i11 = $97;$$lcssa$i10 = $98;
            break;
           } else {
            $$02$i7 = $97;$hw$03$i6 = $100;
           }
          }
         }
         $103 = ($$lcssa$i10<<24>>24)!=(0);
         $104 = ((($$0$lcssa$i11)) + -3|0);
         $105 = $103 ? $104 : 0;
         $$0 = $105;
         break;
        }
        ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
        $110 = $0;$l$080$i = 0;
        while(1) {
         $106 = (($3) + ($l$080$i)|0);
         $107 = HEAP8[$106>>0]|0;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $$0$i = 0;
          break;
         }
         $109 = $110 & 31;
         $111 = $109&255;
         $112 = 1 << $111;
         $div4$i = ($110&255) >>> 5;
         $113 = $div4$i&255;
         $114 = (($byteset$i) + ($113<<2)|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = $115 | $112;
         HEAP32[$114>>2] = $116;
         $117 = (($l$080$i) + 1)|0;
         $118 = $110&255;
         $119 = (($shift$i) + ($118<<2)|0);
         HEAP32[$119>>2] = $117;
         $120 = (($n) + ($117)|0);
         $121 = HEAP8[$120>>0]|0;
         $122 = ($121<<24>>24)==(0);
         if ($122) {
          $$lcssa322 = $117;$l$080$i$lcssa321 = $l$080$i;
          label = 23;
          break;
         } else {
          $110 = $121;$l$080$i = $117;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $123 = ($$lcssa322>>>0)>(1);
          L34: do {
           if ($123) {
            $234 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
            L35: while(1) {
             $235 = $234;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
             while(1) {
              $236 = $235;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
              L39: while(1) {
               $133 = $236;$k$059$i = 1;
               while(1) {
                $129 = (($k$059$i) + ($ip$0$ph76$i))|0;
                $130 = (($n) + ($129)|0);
                $131 = HEAP8[$130>>0]|0;
                $132 = (($n) + ($133)|0);
                $134 = HEAP8[$132>>0]|0;
                $135 = ($131<<24>>24)==($134<<24>>24);
                if (!($135)) {
                 $$lcssa301 = $133;$$lcssa304 = $131;$$lcssa307 = $134;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
                 break L39;
                }
                $136 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
                $127 = (($k$059$i) + 1)|0;
                if ($136) {
                 break;
                }
                $126 = (($127) + ($jp$0$ph1365$i))|0;
                $128 = ($126>>>0)<($$lcssa322>>>0);
                if ($128) {
                 $133 = $126;$k$059$i = $127;
                } else {
                 $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                 break L35;
                }
               }
               $137 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
               $138 = (($137) + 1)|0;
               $139 = ($138>>>0)<($$lcssa322>>>0);
               if ($139) {
                $236 = $138;$jp$0$ph1365$i = $137;
               } else {
                $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                break L35;
               }
              }
              $140 = ($$lcssa304&255)>($$lcssa307&255);
              $141 = (($$lcssa301) - ($ip$0$ph76$i))|0;
              if (!($140)) {
               $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
               break;
              }
              $124 = (($$lcssa301) + 1)|0;
              $125 = ($124>>>0)<($$lcssa322>>>0);
              if ($125) {
               $235 = $124;$jp$0$ph13$ph70$i = $$lcssa301;$p$0$ph$ph71$i = $141;
              } else {
               $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $141;
               break L35;
              }
             }
             $142 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
             $143 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
             $144 = ($143>>>0)<($$lcssa322>>>0);
             if ($144) {
              $234 = $143;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $142;
             } else {
              $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
              break;
             }
            }
            $237 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
            while(1) {
             $239 = $237;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
             while(1) {
              $238 = $239;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
              L54: while(1) {
               $152 = $238;$k$139$i = 1;
               while(1) {
                $148 = (($k$139$i) + ($ip$1$ph55$i))|0;
                $149 = (($n) + ($148)|0);
                $150 = HEAP8[$149>>0]|0;
                $151 = (($n) + ($152)|0);
                $153 = HEAP8[$151>>0]|0;
                $154 = ($150<<24>>24)==($153<<24>>24);
                if (!($154)) {
                 $$lcssa281 = $152;$$lcssa284 = $150;$$lcssa287 = $153;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
                 break L54;
                }
                $155 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
                $146 = (($k$139$i) + 1)|0;
                if ($155) {
                 break;
                }
                $145 = (($146) + ($jp$1$ph944$i))|0;
                $147 = ($145>>>0)<($$lcssa322>>>0);
                if ($147) {
                 $152 = $145;$k$139$i = $146;
                } else {
                 $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                 break L34;
                }
               }
               $156 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
               $157 = (($156) + 1)|0;
               $158 = ($157>>>0)<($$lcssa322>>>0);
               if ($158) {
                $238 = $157;$jp$1$ph944$i = $156;
               } else {
                $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                break L34;
               }
              }
              $159 = ($$lcssa284&255)<($$lcssa287&255);
              $160 = (($$lcssa281) - ($ip$1$ph55$i))|0;
              if (!($159)) {
               $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
               break;
              }
              $164 = (($$lcssa281) + 1)|0;
              $165 = ($164>>>0)<($$lcssa322>>>0);
              if ($165) {
               $239 = $164;$jp$1$ph9$ph49$i = $$lcssa281;$p$1$ph$ph50$i = $160;
              } else {
               $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $160;
               break L34;
              }
             }
             $161 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
             $162 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
             $163 = ($162>>>0)<($$lcssa322>>>0);
             if ($163) {
              $237 = $162;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $161;
             } else {
              $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
              break;
             }
            }
           } else {
            $ip$0$ph$lcssa143$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32147$i = 1;$p$1$ph$ph$lcssa23$i = 1;
           }
          } while(0);
          $166 = (($ip$1$ph$lcssa$i) + 1)|0;
          $167 = (($ip$0$ph$lcssa143$i) + 1)|0;
          $168 = ($166>>>0)>($167>>>0);
          $p$1$p$0$i = $168 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32147$i;
          $ip$1$ip$0$i = $168 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa143$i;
          $169 = (($n) + ($p$1$p$0$i)|0);
          $170 = (($ip$1$ip$0$i) + 1)|0;
          $171 = (_memcmp($n,$169,$170)|0);
          $172 = ($171|0)==(0);
          if ($172) {
           $177 = (($$lcssa322) - ($p$1$p$0$i))|0;
           $mem0$0$i = $177;$p$3$i = $p$1$p$0$i;
          } else {
           $173 = (($$lcssa322) - ($ip$1$ip$0$i))|0;
           $174 = (($173) + -1)|0;
           $175 = ($ip$1$ip$0$i>>>0)>($174>>>0);
           $ip$1$ip$0$$i = $175 ? $ip$1$ip$0$i : $174;
           $176 = (($ip$1$ip$0$$i) + 1)|0;
           $mem0$0$i = 0;$p$3$i = $176;
          }
          $178 = $$lcssa322 | 63;
          $179 = ($mem0$0$i|0)!=(0);
          $180 = (($$lcssa322) - ($p$3$i))|0;
          $$03$i = $3;$mem$0$i = 0;$z$0$i = $3;
          L69: while(1) {
           $181 = $z$0$i;
           $182 = $$03$i;
           $183 = (($181) - ($182))|0;
           $184 = ($183>>>0)<($$lcssa322>>>0);
           do {
            if ($184) {
             $185 = (_memchr($z$0$i,0,$178)|0);
             $186 = ($185|0)==(0|0);
             if ($186) {
              $190 = (($z$0$i) + ($178)|0);
              $z$1$i = $190;
              break;
             } else {
              $187 = $185;
              $188 = (($187) - ($182))|0;
              $189 = ($188>>>0)<($$lcssa322>>>0);
              if ($189) {
               $$0$i = 0;
               break L32;
              } else {
               $z$1$i = $185;
               break;
              }
             }
            } else {
             $z$1$i = $z$0$i;
            }
           } while(0);
           $191 = (($$03$i) + ($l$080$i$lcssa321)|0);
           $192 = HEAP8[$191>>0]|0;
           $div$i = ($192&255) >>> 5;
           $193 = $div$i&255;
           $194 = (($byteset$i) + ($193<<2)|0);
           $195 = HEAP32[$194>>2]|0;
           $196 = $192 & 31;
           $197 = $196&255;
           $198 = 1 << $197;
           $199 = $198 & $195;
           $200 = ($199|0)==(0);
           if ($200) {
            $209 = (($$03$i) + ($$lcssa322)|0);
            $$03$i = $209;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $201 = $192&255;
           $202 = (($shift$i) + ($201<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = (($$lcssa322) - ($203))|0;
           $205 = ($$lcssa322|0)==($203|0);
           if (!($205)) {
            $206 = ($mem$0$i|0)!=(0);
            $or$cond$i = $179 & $206;
            $207 = ($204>>>0)<($p$3$i>>>0);
            $or$cond5$i = $or$cond$i & $207;
            $k$2$i = $or$cond5$i ? $180 : $204;
            $208 = (($$03$i) + ($k$2$i)|0);
            $$03$i = $208;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $210 = ($170>>>0)>($mem$0$i>>>0);
           $211 = $210 ? $170 : $mem$0$i;
           $212 = (($n) + ($211)|0);
           $213 = HEAP8[$212>>0]|0;
           $214 = ($213<<24>>24)==(0);
           L83: do {
            if ($214) {
             $k$4$i = $170;
            } else {
             $$pr$i = $213;$k$338$i = $211;
             while(1) {
              $215 = (($$03$i) + ($k$338$i)|0);
              $216 = HEAP8[$215>>0]|0;
              $217 = ($$pr$i<<24>>24)==($216<<24>>24);
              if (!($217)) {
               $k$338$i$lcssa = $k$338$i;
               break;
              }
              $218 = (($k$338$i) + 1)|0;
              $219 = (($n) + ($218)|0);
              $220 = HEAP8[$219>>0]|0;
              $221 = ($220<<24>>24)==(0);
              if ($221) {
               $k$4$i = $170;
               break L83;
              } else {
               $$pr$i = $220;$k$338$i = $218;
              }
             }
             $222 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
             $223 = (($$03$i) + ($222)|0);
             $$03$i = $223;$mem$0$i = 0;$z$0$i = $z$1$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $224 = ($k$4$i>>>0)>($mem$0$i>>>0);
            if (!($224)) {
             $$0$i = $$03$i;
             break L32;
            }
            $225 = (($k$4$i) + -1)|0;
            $226 = (($n) + ($225)|0);
            $227 = HEAP8[$226>>0]|0;
            $228 = (($$03$i) + ($225)|0);
            $229 = HEAP8[$228>>0]|0;
            $230 = ($227<<24>>24)==($229<<24>>24);
            if ($230) {
             $k$4$i = $225;
            } else {
             break;
            }
           }
           $231 = (($$03$i) + ($p$3$i)|0);
           $$03$i = $231;$mem$0$i = $mem0$0$i;$z$0$i = $z$1$i;
          }
         }
        } while(0);
        $$0 = $$0$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _cleanup387($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup392($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 127]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 127]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0;
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $66 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $66 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $66 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $65 = ($66<<24>>24)==(42);
  do {
   if ($65) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $66 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((92752 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 93232;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 93232;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 93232;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 93232 : (93234);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (93233);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 93232;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 93232;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 93242;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 93249;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (93250) : (93255);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (93252);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (93216 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$481 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$481 = $$pre179$i;
      }
      $480 = ($481|0)<(0);
      $$31$i = $480 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $491 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $490 = ($491|0)>(29);
        $492 = $490 ? 29 : $491;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $491 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(93284,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(93284,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 93268 : 93272;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 93276 : 93280;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 93232;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 93232;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (93216 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 93232;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (93232 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 93232;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $793 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $792 = ($793|0)<(10);
       if ($792) {
        $i$398 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _sift($head,$width,$cmp,$pshift,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pshift = $pshift|0;
 $lp = $lp|0;
 var $$0$be = 0, $$01$be = 0, $$012 = 0, $$03 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$04 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = ($pshift|0)>(1);
 L1: do {
  if ($0) {
   $1 = (0 - ($width))|0;
   $$012 = $pshift;$$03 = $head;$7 = $head;$i$04 = 1;
   while(1) {
    $2 = (($$03) + ($1)|0);
    $3 = (($$012) + -2)|0;
    $4 = (($lp) + ($3<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $sum = (($5) + ($width))|0;
    $$sum = (0 - ($sum))|0;
    $6 = (($$03) + ($$sum)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 255]($7,$6)|0);
    $9 = ($8|0)>(-1);
    if ($9) {
     $10 = (FUNCTION_TABLE_iii[$cmp & 255]($7,$2)|0);
     $11 = ($10|0)>(-1);
     if ($11) {
      $i$0$lcssa = $i$04;
      break L1;
     }
    }
    $12 = (FUNCTION_TABLE_iii[$cmp & 255]($6,$2)|0);
    $13 = ($12|0)>(-1);
    $14 = (($i$04) + 1)|0;
    $15 = (($ar) + ($i$04<<2)|0);
    if ($13) {
     HEAP32[$15>>2] = $6;
     $16 = (($$012) + -1)|0;
     $$0$be = $6;$$01$be = $16;
    } else {
     HEAP32[$15>>2] = $2;
     $$0$be = $2;$$01$be = $3;
    }
    $17 = ($$01$be|0)>(1);
    if (!($17)) {
     $i$0$lcssa = $14;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$012 = $$01$be;$$03 = $$0$be;$7 = $$pre;$i$04 = $14;
   }
  } else {
   $i$0$lcssa = 1;
  }
 } while(0);
 _cycle($width,$ar,$i$0$lcssa);
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp = $pp|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01162 = 0, $$01162$phi = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02964 = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa75 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$0$lcssa50 = 0, $i$01063 = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $phitmp = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $ar = sp;
 $0 = HEAP32[$pp>>2]|0;
 $1 = ((($pp)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$ar>>2] = $head;
 $3 = (0 - ($width))|0;
 $4 = ($0|0)!=(1);
 $5 = ($2|0)!=(0);
 $6 = $5 | $4;
 L1: do {
  if ($6) {
   $7 = (($lp) + ($pshift<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (0 - ($8))|0;
   $10 = (($head) + ($9)|0);
   $11 = (FUNCTION_TABLE_iii[$cmp & 255]($10,$head)|0);
   $12 = ($11|0)<(1);
   if ($12) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 19;
   } else {
    $phitmp = ($trusty|0)==(0);
    $$01162 = $head;$$02964 = $pshift;$$03865 = $phitmp;$18 = $10;$27 = $0;$37 = $2;$i$01063 = 1;
    while(1) {
     $13 = ($$02964|0)>(1);
     $or$cond = $$03865 & $13;
     if ($or$cond) {
      $14 = (($$01162) + ($3)|0);
      $15 = (($$02964) + -2)|0;
      $16 = (($lp) + ($15<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $19 = (FUNCTION_TABLE_iii[$cmp & 255]($14,$18)|0);
      $20 = ($19|0)>(-1);
      if ($20) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
      $sum = (($17) + ($width))|0;
      $$sum = (0 - ($sum))|0;
      $21 = (($$01162) + ($$sum)|0);
      $22 = (FUNCTION_TABLE_iii[$cmp & 255]($21,$18)|0);
      $23 = ($22|0)>(-1);
      if ($23) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
     }
     $24 = (($i$01063) + 1)|0;
     $25 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$25>>2] = $18;
     $26 = (($27) + -1)|0;
     $28 = ($26|0)==(0);
     do {
      if ($28) {
       $49 = 32;
       label = 16;
      } else {
       $29 = $26 & 1;
       $30 = ($29|0)==(0);
       if ($30) {
        $$02$i$i = $26;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $31 = (($nTrailingZeros$03$i$i) + 1)|0;
         $32 = $$02$i$i >>> 1;
         $33 = $32 & 1;
         $34 = ($33|0)==(0);
         if ($34) {
          $$02$i$i = $32;$nTrailingZeros$03$i$i = $31;
         } else {
          $$lcssa = $31;
          break;
         }
        }
        $35 = ($$lcssa|0)==(0);
        if ($35) {
         label = 11;
        } else {
         $47 = $$lcssa;
        }
       } else {
        label = 11;
       }
       if ((label|0) == 11) {
        label = 0;
        $36 = ($37|0)==(0);
        if ($36) {
         $49 = 64;
         label = 16;
         break;
        }
        $38 = $37 & 1;
        $39 = ($38|0)==(0);
        if ($39) {
         $$02$i3$i = $37;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i = 0;$51 = $27;$54 = $37;$58 = 0;
         break;
        }
        while(1) {
         $40 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $41 = $$02$i3$i >>> 1;
         $42 = $41 & 1;
         $43 = ($42|0)==(0);
         if ($43) {
          $$02$i3$i = $41;$nTrailingZeros$03$i2$i = $40;
         } else {
          $$lcssa75 = $40;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $44 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $45 = ($$lcssa75|0)==(0);
        if ($45) {
         $$0$i = 0;$51 = $27;$54 = $37;$58 = 0;
         break;
        } else {
         $47 = $44;
        }
       }
       $46 = ($47>>>0)>(31);
       if ($46) {
        $49 = $47;
        label = 16;
       } else {
        $$0$i = $47;$51 = $27;$54 = $37;$58 = $47;
       }
      }
     } while(0);
     if ((label|0) == 16) {
      label = 0;
      $48 = (($49) + -32)|0;
      $$0$i = $48;$51 = $37;$54 = 0;$58 = $49;
     }
     $50 = $51 >>> $$0$i;
     $52 = (32 - ($$0$i))|0;
     $53 = $54 << $52;
     $55 = $53 | $50;
     $56 = $54 >>> $$0$i;
     $57 = (($58) + ($$02964))|0;
     $59 = ($55|0)!=(1);
     $60 = ($56|0)!=(0);
     $61 = $60 | $59;
     if (!($61)) {
      $$0$lcssa49 = $18;$$02$lcssa51 = $57;$i$0$lcssa50 = $24;
      label = 20;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $62 = (($lp) + ($57<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (0 - ($63))|0;
     $65 = (($18) + ($64)|0);
     $66 = (FUNCTION_TABLE_iii[$cmp & 255]($65,$$pre)|0);
     $67 = ($66|0)<(1);
     if ($67) {
      $$0$lcssa = $18;$$02$lcssa = $57;$$03$lcssa = 0;$i$0$lcssa = $24;
      label = 19;
      break;
     } else {
      $$01162$phi = $18;$$02964 = $57;$$03865 = 1;$18 = $65;$27 = $55;$37 = $56;$i$01063 = $24;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 19;
  }
 } while(0);
 if ((label|0) == 19) {
  $68 = ($$03$lcssa|0)==(0);
  if ($68) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
   label = 20;
  }
 }
 if ((label|0) == 20) {
  _cycle($width,$ar,$i$0$lcssa50);
  _sift($$0$lcssa49,$width,$cmp,$$02$lcssa51,$lp);
 }
 STACKTOP = sp;return;
}
function _cycle($width,$ar,$n) {
 $width = $width|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $tmp = sp;
 $0 = ($n|0)<(2);
 L1: do {
  if (!($0)) {
   $1 = (($ar) + ($n<<2)|0);
   HEAP32[$1>>2] = $tmp;
   $2 = ($width|0)==(0);
   if (!($2)) {
    $$02 = $width;$6 = $tmp;
    while(1) {
     $3 = ($$02>>>0)>(256);
     $4 = $3 ? 256 : $$02;
     $5 = HEAP32[$ar>>2]|0;
     _memcpy(($6|0),($5|0),($4|0))|0;
     $i$01 = 0;
     while(1) {
      $7 = (($ar) + ($i$01<<2)|0);
      $8 = HEAP32[$7>>2]|0;
      $9 = (($i$01) + 1)|0;
      $10 = (($ar) + ($9<<2)|0);
      $11 = HEAP32[$10>>2]|0;
      _memcpy(($8|0),($11|0),($4|0))|0;
      $12 = HEAP32[$7>>2]|0;
      $13 = (($12) + ($4)|0);
      HEAP32[$7>>2] = $13;
      $exitcond = ($9|0)==($n|0);
      if ($exitcond) {
       break;
      } else {
       $i$01 = $9;
      }
     }
     $14 = ($$02|0)==($4|0);
     if ($14) {
      break L1;
     }
     $15 = (($$02) - ($4))|0;
     $$pre = HEAP32[$1>>2]|0;
     $$02 = $15;$6 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[18876>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (18916 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (18916 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[18876>>2] = $22;
     } else {
      $23 = HEAP32[(18892)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(18884)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (18916 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (18916 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[18876>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[(18892)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(18884)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[(18896)>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = (18916 + ($92<<2)|0);
      $94 = HEAP32[18876>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[18876>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (18916 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (18916 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(18892)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(18884)>>2] = $81;
     HEAP32[(18896)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(18880)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (19180 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(18892)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (19180 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(18880)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(18880)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(18892)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(18892)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(18892)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(18884)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(18896)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (18916 + ($229<<2)|0);
       $231 = HEAP32[18876>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[18876>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (18916 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (18916 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(18892)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(18884)>>2] = $rsize$0$i$lcssa;
      HEAP32[(18896)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(18880)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (19180 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (19180 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(18884)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(18892)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (19180 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(18880)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(18880)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(18892)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(18892)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(18892)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (18916 + ($424<<2)|0);
          $426 = HEAP32[18876>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[18876>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (18916 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (18916 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(18892)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (19180 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(18880)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(18880)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(18892)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(18892)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(18884)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(18896)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(18896)>>2] = $514;
   HEAP32[(18884)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(18884)>>2] = 0;
   HEAP32[(18896)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(18888)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(18888)>>2] = $528;
  $529 = HEAP32[(18900)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(18900)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[19348>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(19356)>>2] = $538;
    HEAP32[(19352)>>2] = $538;
    HEAP32[(19360)>>2] = -1;
    HEAP32[(19364)>>2] = -1;
    HEAP32[(19368)>>2] = 0;
    HEAP32[(19320)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[19348>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(19356)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(19316)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(19308)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(19320)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(18900)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (19324);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(18888)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(19352)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(19308)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(19316)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(19356)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(19320)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(19320)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(19308)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(19308)>>2] = $632;
  $633 = HEAP32[(19312)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(19312)>>2] = $632;
  }
  $635 = HEAP32[(18900)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(18892)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(18892)>>2] = $tbase$255$i;
    }
    HEAP32[(19324)>>2] = $tbase$255$i;
    HEAP32[(19328)>>2] = $tsize$254$i;
    HEAP32[(19336)>>2] = 0;
    $640 = HEAP32[19348>>2]|0;
    HEAP32[(18912)>>2] = $640;
    HEAP32[(18908)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (18916 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (18916 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (18916 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(18900)>>2] = $654;
    HEAP32[(18888)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(19364)>>2]|0;
    HEAP32[(18904)>>2] = $659;
   } else {
    $sp$084$i = (19324);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(18888)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(18900)>>2] = $684;
       HEAP32[(18888)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(19364)>>2]|0;
       HEAP32[(18904)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(18892)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(18892)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (19324);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (19324);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(18888)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(18888)>>2] = $730;
        HEAP32[(18900)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(18896)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(18884)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(18884)>>2] = $736;
         HEAP32[(18896)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (18916 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[18876>>2]|0;
            $763 = $762 & $761;
            HEAP32[18876>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (19180 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(18880)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(18880)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(18892)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(18892)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(18892)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (18916 + ($840<<2)|0);
         $842 = HEAP32[18876>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[18876>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (18916 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (18916 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(18892)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (19180 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(18880)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(18880)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(18892)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(18892)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (19324);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(18900)>>2] = $953;
    HEAP32[(18888)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(19364)>>2]|0;
    HEAP32[(18904)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(19324)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(19324)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(19324)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(19324)+12>>2]|0;
    HEAP32[(19324)>>2] = $tbase$255$i;
    HEAP32[(19328)>>2] = $tsize$254$i;
    HEAP32[(19336)>>2] = 0;
    HEAP32[(19332)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (18916 + ($977<<2)|0);
      $979 = HEAP32[18876>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[18876>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (18916 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (18916 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(18892)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (19180 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(18880)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(18880)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(18892)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(18892)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(18888)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(18888)>>2] = $1062;
   $1063 = HEAP32[(18900)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(18900)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(18892)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(18896)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(18884)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (18916 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[18876>>2]|0;
     $36 = $35 & $34;
     HEAP32[18876>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (19180 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(18880)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(18880)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(18892)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(18892)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(18892)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(18900)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(18888)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(18888)>>2] = $120;
   HEAP32[(18900)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(18896)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(18896)>>2] = 0;
   HEAP32[(18884)>>2] = 0;
   return;
  }
  $125 = HEAP32[(18896)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(18884)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(18884)>>2] = $128;
   HEAP32[(18896)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (18916 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(18892)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[18876>>2]|0;
     $152 = $151 & $150;
     HEAP32[18876>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(18892)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(18892)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(18892)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (19180 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(18880)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(18880)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(18892)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(18892)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(18892)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(18896)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(18884)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (18916 + ($233<<2)|0);
  $235 = HEAP32[18876>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[18876>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (18916 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (18916 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(18892)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (19180 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(18880)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(18880)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(18892)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(18892)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(18908)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(18908)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (19332);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(18908)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(18892)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(19356)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(18900)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(18888)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(18900)>>2] = $36;
  HEAP32[(18888)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(18896)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(18884)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(18884)>>2] = $storemerge21;
  HEAP32[(18896)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (18916 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[18876>>2]|0;
    $88 = $87 & $86;
    HEAP32[18876>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (19180 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(18880)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(18880)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(18892)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(18892)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(18892)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(18892)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(18896)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(18884)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (18916 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[18876>>2]|0;
     $32 = $31 & $30;
     HEAP32[18876>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (19180 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(18880)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(18880)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(18892)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(18892)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(18892)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(18892)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(18900)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(18888)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(18888)>>2] = $115;
   HEAP32[(18900)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(18896)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(18896)>>2] = 0;
   HEAP32[(18884)>>2] = 0;
   return;
  }
  $120 = HEAP32[(18896)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(18884)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(18884)>>2] = $123;
   HEAP32[(18896)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (18916 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[18876>>2]|0;
     $146 = $145 & $144;
     HEAP32[18876>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (19180 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(18880)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(18880)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(18892)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(18892)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(18892)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(18896)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(18884)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (18916 + ($224<<2)|0);
  $226 = HEAP32[18876>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[18876>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (18916 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (18916 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(18892)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (19180 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(18880)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(18880)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(18892)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(18892)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  return FUNCTION_TABLE_iiiiiiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&31](a1|0,a2|0);
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&63](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&15](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(1);return 0;
}
function b2(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(2);
}
function b3(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; abort(3);return 0;
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(4);
}
function b5(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(5);return 0;
}
function b6(p0) {
 p0 = p0|0; abort(6);return 0;
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(7);
}
function b8(p0) {
 p0 = p0|0; abort(8);
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(9);return 0;
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(10);
}
function b11(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(11);return 0;
}
function b12(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(12);return 0;
}
function b13(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(13);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,_tt_face_load_sbit_image];
var FUNCTION_TABLE_iiii = [b1,_ft_stub_set_pixel_sizes,_cff_get_cid_from_glyph_index,_bdf_get_charset_id,_bdf_get_bdf_property,_af_cjk_hints_apply,_af_indic_hints_apply,_af_latin_hints_apply,_ft_raster1_set_mode,_ft_smooth_set_mode,_gray_conic_to,_pcf_get_charset_id,_pcf_get_bdf_property,_pfr_get_advance,_pfr_extra_item_load_bitmap_info,_pfr_extra_item_load_font_id,_pfr_extra_item_load_stem_snaps,_pfr_extra_item_load_kerning_pairs,_ps_table_new,_ps_parser_to_coord_array,_t1_builder_add_point1,_t1_builder_start_point,_t1_decoder_parse_charstrings,_tt_face_load_directory_stub,_tt_face_load_hhea,_tt_load_sbit_metrics,_tt_face_get_ps_name,_tt_face_load_charmap_stub,_tt_face_get_kerning
,_tt_face_load_hmtx,_tt_face_set_sbit_strike,_tt_face_load_strike_metrics,_sfnt_get_charset_id,_tt_face_find_bdf_prop,_T1_Set_MM_Design,_T1_Set_MM_Blend,_T1_Set_Var_Design,_tt_cmap14_char_var_isdefault,_tt_cmap14_char_variants,_tt_cmap14_variant_chars,_cid_get_cid_from_glyph_index,_TT_Set_MM_Blend,_TT_Set_Var_Design,_tt_face_get_location,_sn_write,___stdout_write,___stdio_seek,_FT_Outline_Decompose,_ft_gzip_alloc,_zcalloc,_adler32,_psh_globals_new,_Round_To_Grid,_Round_To_Half_Grid,_Round_To_Double_Grid,_Round_Super,_Round_Super_45,_Round_None,_Round_Up_To_Grid
,_Round_Down_To_Grid,_Project_x,_Project_y,_Project,_Dual_Project,_t1_get_index,___stdio_read,___stdio_write,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,_t1_builder_init];
var FUNCTION_TABLE_iiiiiiiiii = [b3,_t1_decoder_init];
var FUNCTION_TABLE_vii = [b4,_af_cjk_metrics_scale,_af_indic_metrics_scale,_af_latin_metrics_scale,_ps_parser_to_token,_t1_parse_font_matrix,_parse_encoding,_parse_subrs,_parse_charstrings,_parse_private,_parse_blend_design_positions,_parse_blend_design_map,_parse_blend_axis_types,_parse_weight_vector,_parse_buildchar,_t42_parse_font_matrix,_t42_parse_encoding,_t42_parse_charstrings,_t42_parse_sfnts,_ft_free,_ft_gzip_free,_zcfree,_ps_hints_t1reset,b4,b4,b4,b4,b4,b4
,b4,b4,b4];
var FUNCTION_TABLE_iiiiiii = [b5,_ps_unicodes_init,_tt_find_sbit_image,b5];
var FUNCTION_TABLE_ii = [b6,_cff_driver_init,_cff_size_init,_cff_slot_init,_cff_ps_has_glyph_names,_cff_get_ps_name,_cff_cmap_encoding_init,_cff_cmap_unicode_init,_cff_parse_font_matrix,_cff_parse_font_bbox,_cff_parse_private_dict,_cff_parse_cid_ros,_af_autofitter_init,_ft_raster1_init,_ft_smooth_init,_pfr_slot_init,_pfr_cmap_init,_ps_parser_to_int,_t1_builder_add_contour,_afm_parser_parse,_ps_hinter_init,_pshinter_get_globals_funcs,_pshinter_get_t1_funcs,_pshinter_get_t2_funcs,_ps_unicode_value,_ps_get_macintosh_name,_ps_get_standard_strings,_sfnt_get_ps_name,_t1_cmap_standard_init
,_t1_cmap_expert_init,_t1_cmap_custom_init,_t1_cmap_unicode_init,_T1_Driver_Init,_T1_Size_Init,_T1_GlyphSlot_Init,_t1_get_ps_name,_t1_ps_has_glyph_names,_cid_driver_init,_cid_size_init,_cid_slot_init,_cid_get_postscript_name,_T42_Driver_Init,_T42_Size_Init,_T42_GlyphSlot_Init,_t42_get_ps_font_name,_t42_ps_has_glyph_names,_tt_driver_init,_tt_size_init,_tt_slot_init,_fnt_cmap_init,___stdio_close,_TT_RunIns,_TT_Load_Glyph_Header,_TT_Load_Simple_Glyph,_TT_Load_Composite_Glyph,b6,b6,b6,b6
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viii = [b7,_ft_raster1_get_cbox,_ft_smooth_get_cbox,_gray_raster_reset,_ft_black_reset,_ft_black_set_mode,_t1_decrypt,_destroy_size,_destroy_face,_Vertical_Sweep_Init,_Horizontal_Sweep_Init,_t1_hints_stem,_ps_hints_t1stem3,_ps_hints_t2counter,_Write_CVT_Stretched,_Move_CVT_Stretched,_Write_CVT,_Move_CVT,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7];
var FUNCTION_TABLE_vi = [b8,_cff_driver_done,_cff_face_done,_cff_size_done,_cff_slot_done,_bdf_cmap_done,_BDF_Face_Done,_cff_cmap_encoding_done,_cff_cmap_unicode_done,_af_autofitter_done,_gray_raster_done,_ft_black_done,_pcf_cmap_done,_PCF_Face_Done,_pfr_face_done,_pfr_slot_done,_pfr_cmap_done,_ps_table_done,_ps_table_release,_ps_parser_done,_ps_parser_skip_spaces,_ps_parser_skip_PS_token,_t1_builder_done,_t1_builder_close_contour,_t1_decoder_done,_afm_parser_done,_ps_hinter_done,_sfnt_done_face,_tt_face_free_name
,_tt_face_free_hdmx_stub,_tt_face_free_sbit_stub,_tt_face_free_ps_names,_tt_face_free_eblc,_t1_cmap_std_done,_t1_cmap_custom_done,_t1_cmap_unicode_done,_T1_Driver_Done,_T1_Face_Done,_T1_Size_Done,_T1_GlyphSlot_Done,_tt_cmap14_done,_cid_driver_done,_cid_face_done,_cid_size_done,_cid_slot_done,_T42_Driver_Done,_T42_Face_Done,_T42_Size_Done,_T42_GlyphSlot_Done,_tt_driver_done,_tt_face_done,_tt_size_done,_FNT_Face_Done,_memory_stream_close,_ft_ansi_stream_close,_af_face_globals_free,_gray_record_cell,_Vertical_Sweep_Step,_Horizontal_Sweep_Step
,_Split_Conic,_Split_Cubic,_ft_gzip_stream_close,_ft_lzw_stream_close,_t1_hints_open,_t2_hints_open,_psh_globals_destroy,_TT_Forget_Glyph_Frame,_cleanup387,_cleanup392,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iiiii = [b9,_cff_glyph_load,_cff_get_kerning,_cff_get_glyph_name,_cff_get_ros,_BDF_Glyph_Load,_ft_raster1_render,_ft_raster1_transform,_ft_smooth_render,_ft_smooth_transform,_ft_smooth_render_lcd,_ft_smooth_render_lcd_v,_gray_cubic_to,_PCF_Glyph_Load,_pfr_face_get_kerning,_pfr_slot_load,_pfr_get_kerning,_ps_table_add,_ps_parser_to_fixed_array,_afm_parser_init,_tt_face_goto_table,_tt_face_load_sfnt_header_stub,_tt_face_set_sbit_strike_stub,_sfnt_get_glyph_name,_T1_Load_Glyph,_Get_Kerning,_t1_get_glyph_name,_T1_Get_Track_Kerning,_tt_cmap14_char_var_index
,_cid_slot_load_glyph,_cid_get_ros,_T42_GlyphSlot_Load,_t42_get_glyph_name,_tt_glyph_load,_tt_get_kerning,_FNT_Load_Glyph,_ft_ansi_stream_io,_ft_realloc,_ft_gzip_stream_io,_ft_lzw_stream_io,_ps_hints_apply,_TT_Access_Glyph_Frame,_FT_CMap_New,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,_Vertical_Sweep_Span,_Vertical_Sweep_Drop,_Horizontal_Sweep_Span,_Horizontal_Sweep_Drop,b10,b10,b10];
var FUNCTION_TABLE_iii = [b11,_cff_get_interface,_cff_size_request,_cff_size_select,_cff_ps_get_font_info,_cff_get_name_index,_cff_get_cmap_info,_cff_get_is_cid,_bdf_cmap_init,_bdf_cmap_char_index,_bdf_cmap_char_next,_bdf_driver_requester,_BDF_Size_Request,_BDF_Size_Select,_cff_cmap_encoding_char_index,_cff_cmap_encoding_char_next,_cff_cmap_unicode_char_index,_cff_cmap_unicode_char_next,_af_cjk_metrics_init,_af_cjk_hints_init,_af_dummy_hints_init,_af_dummy_hints_apply,_af_indic_metrics_init,_af_indic_hints_init,_af_latin_metrics_init,_af_latin_hints_init,_gray_raster_new,_gray_raster_render,_gray_move_to
,_gray_line_to,_ft_black_new,_ft_black_render,_pcf_cmap_init,_pcf_cmap_char_index,_pcf_cmap_char_next,_pcf_driver_requester,_PCF_Size_Request,_PCF_Size_Select,_pfr_get_service,_pfr_cmap_char_index,_pfr_cmap_char_next,_ps_parser_to_fixed,_t1_builder_check_points,_psnames_get_service,_ps_unicodes_char_index,_ps_unicodes_char_next,_sfnt_get_interface,_tt_face_load_head,_tt_face_load_cmap,_tt_face_load_maxp,_tt_face_load_os2,_tt_face_load_post,_tt_face_load_name,_tt_face_load_hdmx_stub,_tt_face_load_kern,_tt_face_load_gasp,_tt_face_load_pclt,_tt_face_load_bhed,_tt_face_load_sbit_stub
,_tt_face_free_charmap_stub,_tt_face_load_font_dir,_tt_face_load_eblc,_get_sfnt_table,_sfnt_get_name_index,_tt_get_cmap_info,_t1_cmap_std_char_index,_t1_cmap_std_char_next,_t1_cmap_custom_char_index,_t1_cmap_custom_char_next,_t1_cmap_unicode_char_index,_t1_cmap_unicode_char_next,_Get_Interface,_T1_Read_Metrics,_T1_Size_Request,_t1_get_name_index,_t1_ps_get_font_info,_t1_ps_get_font_extra,_t1_ps_get_font_private,_T1_Get_Multi_Master,_T1_Get_MM_Var,_tt_cmap_init,_tt_cmap0_char_index,_tt_cmap0_char_next,_tt_cmap0_validate,_tt_cmap0_get_info,_tt_cmap2_char_index,_tt_cmap2_char_next,_tt_cmap2_validate,_tt_cmap2_get_info
,_tt_cmap4_init,_tt_cmap4_char_index,_tt_cmap4_char_next,_tt_cmap4_validate,_tt_cmap4_get_info,_tt_cmap6_char_index,_tt_cmap6_char_next,_tt_cmap6_validate,_tt_cmap6_get_info,_tt_cmap8_char_index,_tt_cmap8_char_next,_tt_cmap8_validate,_tt_cmap8_get_info,_tt_cmap10_char_index,_tt_cmap10_char_next,_tt_cmap10_validate,_tt_cmap10_get_info,_tt_cmap12_init,_tt_cmap12_char_index,_tt_cmap12_char_next,_tt_cmap12_validate,_tt_cmap12_get_info,_tt_cmap13_init,_tt_cmap13_char_index,_tt_cmap13_char_next,_tt_cmap13_validate,_tt_cmap13_get_info,_tt_cmap14_init,_tt_cmap14_char_index,_tt_cmap14_char_next
,_tt_cmap14_variants,_tt_cmap14_validate,_tt_cmap14_get_info,_cid_get_interface,_cid_size_request,_cid_ps_get_font_info,_cid_ps_get_font_extra,_cid_get_is_cid,_parse_fd_array,_cid_parse_font_matrix,_parse_expansion_factor,_T42_Get_Interface,_T42_Size_Request,_T42_Size_Select,_t42_get_name_index,_t42_ps_get_font_info,_t42_ps_get_font_extra,_t42_ps_get_font_private,_tt_get_interface,_tt_size_request,_tt_size_select,_TT_Get_MM_Var,_winfnt_get_service,_FNT_Size_Request,_FNT_Size_Select,_fnt_cmap_char_index,_fnt_cmap_char_next,_winfnt_get_header,_ft_alloc,_ft_raccess_sort_ref_by_id
,_by_encoding,_cff_sid_to_glyph_name,_afm_compare_kern_pairs,_ps_hints_close,_compare_uni_maps,_tt_name_entry_ascii_from_utf16,_tt_name_entry_ascii_from_other,_psaux_get_glyph_name,_Read_CVT_Stretched,_Read_CVT,_T1_Parse_Glyph,_compare_kern_pairs,_cid_load_glyph,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiiiii = [b12,_raccess_guess_apple_double,_raccess_guess_apple_single,_raccess_guess_darwin_ufs_export,_raccess_guess_darwin_newvfs,_raccess_guess_darwin_hfsplus,_raccess_guess_vfat,_raccess_guess_linux_cap,_raccess_guess_linux_double,_raccess_guess_linux_netatalk,_cff_face_init,_ft_stub_set_char_sizes,_cff_get_advances,_BDF_Face_Init,_af_autofitter_load_glyph,_PCF_Face_Init,_pfr_get_metrics,_pfr_face_init,_ps_parser_to_bytes,_ps_parser_load_field,_ps_parser_load_field_table,_sfnt_init_face,_sfnt_load_face,_tt_face_load_any,_tt_face_get_metrics,_sfnt_table_info,_T1_Face_Init,_T1_Get_Advances,_t1_ps_get_font_value
,_cid_face_init,_T42_Face_Init,_tt_face_init,_tt_get_advances,_FNT_Face_Init,__bdf_parse_start,__bdf_parse_properties,__bdf_parse_glyphs,_psh_globals_set_scale,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viiii = [b13,_ps_parser_init,_ps_parser_to_token_array,_t1_builder_add_point,_gray_render_span,_t2_hints_stems,_ps_hints_t2mask,_Direct_Move,_Direct_Move_Orig,_Direct_Move_X,_Direct_Move_Orig_X,_Direct_Move_Y,_Direct_Move_Orig_Y,_ft_validator_init,b13,b13];

  return { _get_top: _get_top, _main: _main, _get_debug_code: _get_debug_code, _load_font: _load_font, _bitshift64Lshr: _bitshift64Lshr, _get_width: _get_width, _bitshift64Shl: _bitshift64Shl, _monochrome: _monochrome, _fflush: _fflush, _load_mem_font: _load_mem_font, _memset: _memset, _find_font: _find_font, _memcpy: _memcpy, _close_font: _close_font, _i64Subtract: _i64Subtract, _realloc: _realloc, _i64Add: _i64Add, _get_advance: _get_advance, _get_bitmap: _get_bitmap, _get_height: _get_height, _get_left: _get_left, _get_bitmap_opt_retcode: _get_bitmap_opt_retcode, ___errno_location: ___errno_location, _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _free: _free, _memmove: _memmove, _malloc: _malloc, _get_pitch: _get_pitch, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_vi: dynCall_vi, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _get_top = Module["_get_top"] = asm["_get_top"];
var _main = Module["_main"] = asm["_main"];
var _get_debug_code = Module["_get_debug_code"] = asm["_get_debug_code"];
var _load_font = Module["_load_font"] = asm["_load_font"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _get_width = Module["_get_width"] = asm["_get_width"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _monochrome = Module["_monochrome"] = asm["_monochrome"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _load_mem_font = Module["_load_mem_font"] = asm["_load_mem_font"];
var _memset = Module["_memset"] = asm["_memset"];
var _find_font = Module["_find_font"] = asm["_find_font"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _close_font = Module["_close_font"] = asm["_close_font"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _get_advance = Module["_get_advance"] = asm["_get_advance"];
var _get_bitmap = Module["_get_bitmap"] = asm["_get_bitmap"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _get_left = Module["_get_left"] = asm["_get_left"];
var _get_bitmap_opt_retcode = Module["_get_bitmap_opt_retcode"] = asm["_get_bitmap_opt_retcode"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _get_height = Module["_get_height"] = asm["_get_height"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _get_pitch = Module["_get_pitch"] = asm["_get_pitch"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = asm["dynCall_iiiiiiiiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



